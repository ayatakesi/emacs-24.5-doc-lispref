@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1994, 1999, 2001-2015 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node Abbrevs
@chapter Abbrevs and Abbrev Expansion
@cindex abbrev
@c  @cindex abbrev table  Redundant with "abbrev".

  略語(abbreviation)、または@dfn{abbrev}は、より長い文字列へと展開される文字列です。ユーザーはabbrev文字列を挿入して、それを探して自動的にabbrevの展開形に置換できます。これによりタイプ量を節約できます。

  カレントで効果をもつabbrevsのセットは、@dfn{abbrevテーブル(abbrev
table)}内に記録されます。バッファーはそれぞれローカルにabbrevテーブルをもちますが、通常は同一のメジャーモードにあるすべてのバッファーが1つのabbrevテーブルを共有します。グローバルabbrevテーブルも存在します。通常は両者が使用されます。

  abbrevテーブルはobarrayとして表されます。obarraysについての情報は、@ref{Creating
Symbols}を参照してください。略語はそれぞれ、obarray内のシンボルとして表現されます。そのシンボルの名前が略語で、値が展開形になります。シンボルの関数定義は展開を行うフック関数です(@ref{Defining
Abbrevs}を参照)。また、シンボルノプロパティセルには、使用回数やその略語が展開された回数を含む、さまざまな追加プロパティが含まれます(@ref{Abbrev
Properties}を参照)。

@cindex system abbrev
  @dfn{システムabbrev(system
abbrevs)}と呼ばれる特定のabbrevは、ユーザーではなくメジャーモードにより定義されます。システムabbrevは、非@code{nil}の@code{:system}プロパティにより識別されます(@ref{Abbrev
Properties}を参照)。abbrevがabbrevファイルに保存される際、システムabbrevは省略されます。@ref{Abbrev
Files}を参照してください。

  abbrevに使用されるシンボルは通常のobarrayにinternされないので、Lisp式の読み取り結果として現れることは決してありません。実際に、通常はabbrevを扱うコードを除き、それらが使用されることはありません。したがって、それらを非標準的な方法で使用しても安全なのです。

  マイナーモードであるAbbrevモードが有効な場合、バッファーローカル変数@code{abbrev-mode}は非@code{nil}となり、そのバッファー内で、abbrevは自動的に展開されます。abbrev用のユーザーレベルのコマンドについては、@ref{Abbrevs,,
Abbrev Mode, emacs, The GNU Emacs Manual}を参照してください。

@menu
* Tables: Abbrev Tables.     abbrevテーブルの作成と操作。
* Defining Abbrevs::         略語の指定とそれらの展開。
* Files: Abbrev Files.       ファイルへのabbrevの保存。
* Expansion: Abbrev Expansion.  展開の制御と展開サブルーチン。
* Standard Abbrev Tables::   種々メジャーモードに使用されるabbrevテーブル。
* Abbrev Properties::        abbrevプロパティの読み取りとセットを行う方法。どのプロパティが何の効果をもつか。
* Abbrev Table Properties::  abbrevテーブルプロパティの読み取りとセットを行う方法。どのプロパティが効果をもつか。
@end menu

@node Abbrev Tables
@section Abbrev Tables
@cindex abbrev tables

  このセクションでは、abbrevテーブルの作成と操作を行う方法について説明します。

@defun make-abbrev-table &optional props
この関数は、空のabbrevテーブル(シンボルを含まないobarray)を作成してリターンする。これは0で充填されたベクターである。@var{props}は、新たなテーブルに適用されるプロパティリストである(@ref{Abbrev
Table Properties}を参照)。
@end defun

@defun abbrev-table-p object
この関数は、@var{object}がabbrevテーブルなら、非@code{nil}をリターンする。
@end defun

@defun clear-abbrev-table abbrev-table
@c Don't see why this needs saying.
@c It always returns @code{nil}.
この関数は、@var{abbrev-table}内のabbrevをすべて未定義とし、空のまま残す。
@end defun

@defun copy-abbrev-table abbrev-table
この関数は、@var{abbrev-table}のコピー(同じabbrev定義を含む新たなabbrevテーブル)をリターンする。これは名前、値、関数だけをコピーし、プロパティリストは何も@emph{コピーしない}。
@end defun

@defun define-abbrev-table tabname definitions &optional docstring &rest props
この関数はabbrevテーブル名(値がabbrevテーブルであるような変数)として@var{tabname}(シンボル)を定義する。これは、そのテーブル内に@var{definitions}に応じて、abbrevを定義する。@var{definitions}は、@code{(@var{abbrevname}
@var{expansion} [@var{hook}]
[@var{props}...])}という形式の要素をもつリストである。これらの要素は引数として、@code{define-abbrev}に渡される。  

オプション文字列@var{docstring}は、変数@var{tabname}のドキュメント文字列である。プロパティリスト@var{props}は、abbrevテーブルに適用される(@ref{Abbrev
Table Properties}を参照)。

同一の@var{tabname}にたいしてこの関数が複数回呼び出された場合は、元のコンテンツ全体を上書きせずに、後続の呼び出しは@var{definitions}内の定義を@var{tabname}に追加する(後続の呼び出しでは、@var{definitions}内で明示的に再定義または未定義にした場合のみabbrevを上書きできる)。
@end defun

@defvar abbrev-table-name-list
これは、値がabbrevテーブルであるようなシンボルのリストである。@code{define-abbrev-table}は、このリストに新たなabbrevテーブル名を追加する。
@end defvar

@defun insert-abbrev-table-description name &optional human
この関数は、ポイントの前に名前が@var{name}のabbrevテーブルの説明を挿入する。引数@var{name}は、値がabbrevテーブルであるようなシンボルである。  

@var{human}が非@code{nil}なら、説明は人間向けになる。システムabbrevはそのようにリストされ、識別される。それ以外なら説明はLisp式(カレントで定義されているように@var{name}を定義するが、システムabbrevとしては定義しないような@code{define-abbrev-table}呼び出し)となる(@var{name}を使用するモードまたはパッケージは、それらを個別に@var{name}に追加すると想定されている)。
@end defun

@node Defining Abbrevs
@section Defining Abbrevs
@cindex defining abbrevs

  @code{define-abbrev}は、abbrevテーブル内にabbrevを定義するための基本的な低レベル関数です。

  メジャーモードがシステムabbrevを定義する際は、@code{:system}プロパティに@code{t}を指定して@code{define-abbrev}を呼び出すべきです。すべての保存された非``システム''abbrevは起動時(何らかのメジャーモードがロードされる前)にリストアされることに注意してください。したがってメジャーモードは、最初にそのモードがロードされた際、それらのモードのabbrevテーブルが空であると仮定するべきではありません。

@defun define-abbrev abbrev-table name expansion &optional hook &rest props
この関数は、@var{abbrev-table}内に@var{name}という名前で、@var{expansion}に展開され、@var{hook}を呼び出すabbrevを、プロパティ@var{props}(@ref{Abbrev
Properties}を参照)とともに定義する。リターン値は@var{name}。ここでは、@var{props}内の@code{:system}プロパティは特別に扱われる。このプロパティが値@code{force}をもつなら、たとえ同じ名前の非``システム''abbrevでも、既存の定義を上書きするだろう。

@var{name}は文字列であること。引数@var{expansion}は通常は望む展開形(文字列)であり、@code{nil}ならそのabbrevを未定義とする。これが文字列または@code{nil}以外の何かなら、そのabbrevは@var{hook}を実行することにより、単に``展開''される。

引数@var{hook}は、関数または@code{nil}であること。@var{hook}が非@code{nil}なら、abbrevが@var{expansion}に置換された後に、引数なしでそれが呼び出される。@var{hook}呼び出し時、ポイントは@var{expansion}の終端に置かれる。

@cindex @code{no-self-insert} property
@var{hook}が、@code{no-self-insert}プロパティが非@code{nil}であるような、非@code{nil}のシンボルなら、@var{hook}は展開をトリガーするような自己挿入入力文字を挿入できるかどうかを、明示的に制御できる。この場合、@var{hook}が非@code{nil}をリターンしたら、その文字の挿入を抑止する。対照的に、@var{hook}が@code{nil}をリターンした場合は、あたかも実際には展開が行われなかったかのように、@code{expand-abbrev}(または@code{abbrev-insert})も@code{nil}をリターンする。

通常@code{define-abbrev}は、実際にabbrevを変更した場合は、変数@code{abbrevs-changed}に@code{t}をセットする。これはいくつかのコマンドが、abbrevの保存を提案するためである。システムabbrevは、いずれにせよ保存されないので、システムabbrevにたいして、これは行われない。
@end defun

@defopt only-global-abbrevs
この変数が非@code{nil}なら、それはユーザーがグローバルabbrevのみの使用を計画していることを意味する。これはモード固有のabbrevを定義するコマンドにたいして、かわりにグローバルabbrevを定義するよう指示する。この変数は、このセクション内の関数の振る舞いを変更しない。それは呼び出し側により検証される。
@end defopt

@node Abbrev Files
@section Saving Abbrevs in Files
@cindex save abbrevs in files

  A file of saved abbrev definitions is actually a file of Lisp code.  The
abbrevs are saved in the form of a Lisp program to define the same abbrev
tables with the same contents.  Therefore, you can load the file with
@code{load} (@pxref{How Programs Do Loading}).  However, the function
@code{quietly-read-abbrev-file} is provided as a more convenient interface.
Emacs automatically calls this function at startup.

  User-level facilities such as @code{save-some-buffers} can save abbrevs in a
file automatically, under the control of variables described here.

@defopt abbrev-file-name
This is the default file name for reading and saving abbrevs.
@end defopt

@defun quietly-read-abbrev-file &optional filename
This function reads abbrev definitions from a file named @var{filename},
previously written with @code{write-abbrev-file}.  If @var{filename} is
omitted or @code{nil}, the file specified in @code{abbrev-file-name} is
used.

@c It returns @code{nil}.
As the name implies, this function does not display any messages.
@end defun

@defopt save-abbrevs
A non-@code{nil} value for @code{save-abbrevs} means that Emacs should offer
to save abbrevs (if any have changed) when files are saved.  If the value is
@code{silently}, Emacs saves the abbrevs without asking the user.
@code{abbrev-file-name} specifies the file to save the abbrevs in.
@end defopt

@defvar abbrevs-changed
This variable is set non-@code{nil} by defining or altering any abbrevs
(except system abbrevs).  This serves as a flag for various Emacs commands
to offer to save your abbrevs.
@end defvar

@deffn Command write-abbrev-file &optional filename
Save all abbrev definitions (except system abbrevs), for all abbrev tables
listed in @code{abbrev-table-name-list}, in the file @var{filename}, in the
form of a Lisp program that when loaded will define the same abbrevs.  If
@var{filename} is @code{nil} or omitted, @code{abbrev-file-name} is used.
This function returns @code{nil}.
@end deffn

@node Abbrev Expansion
@section Looking Up and Expanding Abbreviations
@cindex looking up abbrevs
@cindex expanding abbrevs
@cindex abbrevs, looking up and expanding

  Abbrevs are usually expanded by certain interactive commands, including
@code{self-insert-command}.  This section describes the subroutines used in
writing such commands, as well as the variables they use for communication.

@defun abbrev-symbol abbrev &optional table
This function returns the symbol representing the abbrev named
@var{abbrev}.  It returns @code{nil} if that abbrev is not defined.  The
optional second argument @var{table} is the abbrev table in which to look it
up.  If @var{table} is @code{nil}, this function tries first the current
buffer's local abbrev table, and second the global abbrev table.
@end defun

@defun abbrev-expansion abbrev &optional table
This function returns the string that @var{abbrev} would expand into (as
defined by the abbrev tables used for the current buffer).  It returns
@code{nil} if @var{abbrev} is not a valid abbrev.  The optional argument
@var{table} specifies the abbrev table to use, as in @code{abbrev-symbol}.
@end defun

@deffn Command expand-abbrev
This command expands the abbrev before point, if any.  If point does not
follow an abbrev, this command does nothing.  To do the expansion, it calls
the function that is the value of the @code{abbrev-expand-function}
variable, with no arguments, and returns whatever that function does.

The default expansion function returns the abbrev symbol if it did
expansion, and @code{nil} otherwise.  If the abbrev symbol has a hook
function that is a symbol whose @code{no-self-insert} property is
non-@code{nil}, and if the hook function returns @code{nil} as its value,
then the default expansion function returns @code{nil}, even though
expansion did occur.
@end deffn

@defun abbrev-insert abbrev &optional name start end
This function inserts the abbrev expansion of @code{abbrev}, replacing the
text between @code{start} and @code{end}.  If @code{start} is omitted, it
defaults to point.  @code{name}, if non-@code{nil}, should be the name by
which this abbrev was found (a string); it is used to figure out whether to
adjust the capitalization of the expansion.  The function returns
@code{abbrev} if the abbrev was successfully inserted.
@end defun

@deffn Command abbrev-prefix-mark &optional arg
This command marks the current location of point as the beginning of an
abbrev.  The next call to @code{expand-abbrev} will use the text from here
to point (where it is then) as the abbrev to expand, rather than using the
previous word as usual.

First, this command expands any abbrev before point, unless @var{arg} is
non-@code{nil}.  (Interactively, @var{arg} is the prefix argument.)  Then it
inserts a hyphen before point, to indicate the start of the next abbrev to
be expanded.  The actual expansion removes the hyphen.
@end deffn

@defopt abbrev-all-caps
When this is set non-@code{nil}, an abbrev entered entirely in upper case is
expanded using all upper case.  Otherwise, an abbrev entered entirely in
upper case is expanded by capitalizing each word of the expansion.
@end defopt

@defvar abbrev-start-location
The value of this variable is a buffer position (an integer or a marker)
for @code{expand-abbrev} to use as the start of the next abbrev to be
expanded.  The value can also be @code{nil}, which means to use the word
before point instead.  @code{abbrev-start-location} is set to @code{nil}
each time @code{expand-abbrev} is called.  This variable is also set by
@code{abbrev-prefix-mark}.
@end defvar

@defvar abbrev-start-location-buffer
The value of this variable is the buffer for which
@code{abbrev-start-location} has been set.  Trying to expand an abbrev in
any other buffer clears @code{abbrev-start-location}.  This variable is set
by @code{abbrev-prefix-mark}.
@end defvar

@defvar last-abbrev
This is the @code{abbrev-symbol} of the most recent abbrev expanded.  This
information is left by @code{expand-abbrev} for the sake of the
@code{unexpand-abbrev} command (@pxref{Expanding Abbrevs,, Expanding
Abbrevs, emacs, The GNU Emacs Manual}).
@end defvar

@defvar last-abbrev-location
This is the location of the most recent abbrev expanded.  This contains
information left by @code{expand-abbrev} for the sake of the
@code{unexpand-abbrev} command.
@end defvar

@defvar last-abbrev-text
This is the exact expansion text of the most recent abbrev expanded, after
case conversion (if any).  Its value is @code{nil} if the abbrev has already
been unexpanded.  This contains information left by @code{expand-abbrev} for
the sake of the @code{unexpand-abbrev} command.
@end defvar

@defvar abbrev-expand-function
The value of this variable is a function that @code{expand-abbrev} will call
with no arguments to do the expansion.  The function can do anything it
wants before and after performing the expansion.  It should return the
abbrev symbol if expansion took place.
@end defvar

  The following sample code shows a simple use of
@code{abbrev-expand-function}.  It assumes that @code{foo-mode} is a mode
for editing certain files in which lines that start with @samp{#} are
comments.  You want to use Text mode abbrevs for those lines.  The regular
local abbrev table, @code{foo-mode-abbrev-table} is appropriate for all
other lines.  @xref{Standard Abbrev Tables}, for the definitions of
@code{local-abbrev-table} and @code{text-mode-abbrev-table}.  @xref{Advising
Functions}, for details of @code{add-function}.

@smallexample
(defun foo-mode-abbrev-expand-function (expand)
  (if (not (save-excursion (forward-line 0) (eq (char-after) ?#)))
      ;; Performs normal expansion.
      (funcall expand)
    ;; We're inside a comment: use the text-mode abbrevs.
    (let ((local-abbrev-table text-mode-abbrev-table))
      (funcall expand))))

(add-hook 'foo-mode-hook
          #'(lambda ()
              (add-function :around (local 'abbrev-expand-function)
                            #'foo-mode-abbrev-expand-function)))
@end smallexample

@node Standard Abbrev Tables
@section Standard Abbrev Tables
@cindex standard abbrev tables

  Here we list the variables that hold the abbrev tables for the preloaded
major modes of Emacs.

@defvar global-abbrev-table
This is the abbrev table for mode-independent abbrevs.  The abbrevs defined
in it apply to all buffers.  Each buffer may also have a local abbrev table,
whose abbrev definitions take precedence over those in the global table.
@end defvar

@defvar local-abbrev-table
The value of this buffer-local variable is the (mode-specific)  abbreviation
table of the current buffer.  It can also be a list of such tables.
@end defvar

@defvar abbrev-minor-mode-table-alist
The value of this variable is a list of elements of the form
@code{(@var{mode} . @var{abbrev-table})} where @var{mode} is the name of a
variable: if the variable is bound to a non-@code{nil} value, then the
@var{abbrev-table} is active, otherwise it is ignored.  @var{abbrev-table}
can also be a list of abbrev tables.
@end defvar

@defvar fundamental-mode-abbrev-table
This is the local abbrev table used in Fundamental mode; in other words, it
is the local abbrev table in all buffers in Fundamental mode.
@end defvar

@defvar text-mode-abbrev-table
This is the local abbrev table used in Text mode.
@end defvar

@defvar lisp-mode-abbrev-table
This is the local abbrev table used in Lisp mode.  It is the parent of the
local abbrev table used in Emacs Lisp mode.  @xref{Abbrev Table Properties}.
@end defvar

@node Abbrev Properties
@section Abbrev Properties
@cindex abbrev properties

Abbrevs have properties, some of which influence the way they work.  You can
provide them as arguments to @code{define-abbrev}, and manipulate them with
the following functions:

@defun abbrev-put abbrev prop val
Set the property @var{prop} of @var{abbrev} to value @var{val}.
@end defun

@defun abbrev-get abbrev prop
Return the property @var{prop} of @var{abbrev}, or @code{nil} if the abbrev
has no such property.
@end defun

The following properties have special meanings:

@table @code
@item :count
This property counts the number of times the abbrev has been expanded.  If
not explicitly set, it is initialized to 0 by @code{define-abbrev}.

@item :system
If non-@code{nil}, this property marks the abbrev as a system abbrev.  Such
abbrevs are not saved (@pxref{Abbrev Files}).

@item :enable-function
If non-@code{nil}, this property should be a function of no arguments which
returns @code{nil} if the abbrev should not be used and @code{t} otherwise.

@item :case-fixed
If non-@code{nil}, this property indicates that the case of the abbrev's
name is significant and should only match a text with the same pattern of
capitalization.  It also disables the code that modifies the capitalization
of the expansion.
@end table

@node Abbrev Table Properties
@section Abbrev Table Properties
@cindex abbrev table properties

Like abbrevs, abbrev tables have properties, some of which influence the way
they work.  You can provide them as arguments to @code{define-abbrev-table},
and manipulate them with the functions:

@defun abbrev-table-put table prop val
Set the property @var{prop} of abbrev table @var{table} to value @var{val}.
@end defun

@defun abbrev-table-get table prop
Return the property @var{prop} of abbrev table @var{table}, or @code{nil} if
the abbrev has no such property.
@end defun

The following properties have special meaning:

@table @code
@item :enable-function
This is like the @code{:enable-function} abbrev property except that it
applies to all abbrevs in the table.  It is used before even trying to find
the abbrev before point, so it can dynamically modify the abbrev table.

@item :case-fixed
This is like the @code{:case-fixed} abbrev property except that it applies
to all abbrevs in the table.

@item :regexp
If non-@code{nil}, this property is a regular expression that indicates how
to extract the name of the abbrev before point, before looking it up in the
table.  When the regular expression matches before point, the abbrev name is
expected to be in submatch 1.  If this property is @code{nil}, the default
is to use @code{backward-word} and @code{forward-word} to find the name.
This property allows the use of abbrevs whose name contains characters of
non-word syntax.

@item :parents
This property holds a list of tables from which to inherit other abbrevs.

@item :abbrev-table-modiff
This property holds a counter incremented each time a new abbrev is added to
the table.

@end table
