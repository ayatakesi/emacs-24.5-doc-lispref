@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1999, 2001-2015 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node Backups and Auto-Saving
@chapter Backups and Auto-Saving
@cindex backups and auto-saving

  バックアップファイルおよびauto-save(自動保存)ファイルは、Emacsがクラッシュ、またはユーザー自身のエラーからユーザーの保護を試みるための、2つの手段です。自動保存(auto-saving)は、カレントの編集セッション開始以降のテキストを保存します。一方バックアップファイルは、カレントセッションの前のファイルコンテンツを保存します。

@menu
* Backup Files::             バックアップファイルの作成と名前選択の方法。
* Auto-Saving::              auto-saveファイルの作成と名前選択の方法。
* Reverting::                @code{revert-buffer}とその動作のカスタマイズ方法。
@end menu

@node Backup Files
@section Backup Files
@cindex backup file

  @dfn{バックアップファイル(backup
file)}とは、編集中ファイルの古いコンテンツのコピーです。Emacsは、visitされているファイルにバッファーを最初に保存するとき、バックアップファイルを作成します。したがって、バックアップファイルには通常、カレント編集セッションの前にあったような、ファイルのコンテンツが含まれています。バックアップファイルのコンテンツには、通常は一度存在したバックアップファイルが変更されずに残ります。

  バックアップは通常、visitされているファイルを新たな名前にリネームすることにより作成されます。オプションで、バックアップファイルがvisitされているファイルをコピーすることにより作成されるように指定できます。この選択により、複数の名前をもつファイルのときに、違いが生じます。また、編集中のファイルの所有者が元のオーナーのままか、それとも編集ユーザーになるかにも、影響し得ます。

  デフォルトでは、Emacsは編集中のファイルごとに、単一のバックアップファイルを作成します。かわりに、番号付きバックアップ(numbered
backup)を要求することもできます。その場合は、新たなバックアップファイルそれぞれが、新たな名前を得ます。必要なくなったときは古い番号付きバックアップを削除したり、Emacsがそれらを自動的に削除することもできます。

@menu
* Making Backups::           Emacsがバックアップファイルを作成する方法とタイミング。
* Rename or Copy::           2つの選択肢: 
                               古いファイルのリネームとコピー。
* Numbered Backups::         ソースファイルごとに複数のバックアップを保持する。
* Backup Names::             バックアップファイル名の計算方法とカスタマイズ。
@end menu

@node Making Backups
@subsection Making Backup Files
@cindex making backup files

@defun backup-buffer
  この関数は、もしそれが適切であれば、カレントバッファーにvisitされているファイルのバックアップを作成する。これは、最初のバッファー保存を行う前に、@code{save-buffer}により呼び出される。

リネームによりバックアップが作成された場合、リターン値は(@var{modes} @var{extra-alist}
@var{backupname})という形式のコンスセルである。ここで@var{modes}は、@code{file-modes}(@ref{Testing
Accessibility}を参照)でリターンされるような元ファイルのモードビット、@var{extra-alist}は@code{file-extended-attributes}(@ref{Extended
Attributes}を参照)によりリターンされるような元ファイルの拡張属性を示すalist、そして@var{backupname}はバックアップの名前である。

他のすべての場合(コピーによりバックアップが作成された、またはバックアップが作成されなかった)、この関数は@code{nil}をリターンする。
@end defun

@defvar buffer-backed-up
  このバッファーローカル変数は、そのバッファーのファイルがバッファーによりバックアップされたかどうかを明示する。非@code{nil}の場合、バックアップファイルは書き込み済みであり、それ以外では、(バックアップが有効なら)次回保存時にファイルはバックアップされる。この変数は永続的にローカルであり、@code{kill-all-local-variables}はそれを変更しない。
@end defvar

@defopt make-backup-files
この変数は、バックアップファイルを作成するかどうかを決定する。非@code{nil}の場合、Emacsは初回保存時にすべてのファイルのバックアップを作成する
--- ただし@code{backup-inhibited}が@code{nil}の場合(以下参照)。

以下の例は、Rmailバッファーだけで変数@code{make-backup-files}を変更して、それ以外では変更しない方法を示す。この変数を@code{nil}にセットすると、Emacsはそれらのファイルのバックアップ作成をストップし、それはディスク容量の消費を節約するだろう(あなたは、このコードをinitファイルに配置したいと思うかもしれない)。

@smallexample
@group
(add-hook 'rmail-mode-hook
          (lambda () (setq-local make-backup-files nil)))
@end group
@end smallexample
@end defopt

@defvar backup-enable-predicate
この変数の値は、あるファイルがバックアップファイルをもつべきかどうかを決定する、特定の機会に呼び出される関数である。関数は、判断すべき絶対ファイル名という、1つの引数を受け取る。この関数が@code{nil}をリターンした場合、そのファイルにたいするバックアップは無効になる。それ以外では、このセクション内の他の変数がバックアップ作成の是非と方法を指定する。

@findex normal-backup-enable-predicate
デフォルト値は@code{normal-backup-enable-predicate}で、これは@code{temporary-file-directory}と@code{small-temporary-file-directory}内のファイルをチェックする。
@end defvar

@defvar backup-inhibited
この変数が非@code{nil}の場合、バックアップは抑止される。これは、visitされているファイル名にたいする@code{backup-enable-predicate}のテスト結果を記録する。さらに、visitされているファイルにたいするバックアップ抑止にもとづくその他機構によっても、使用され得る。たとえば、VCはバージョンコントロールシステムに管理されるファイルのバックアップを防ぐために、この変数を非@code{nil}にセットする。

これは永続的にローカルなので、メジャーモード変更により値は失われない。メジャーモードはこの変数ではなく、かわりに@code{make-backup-files}をセットするべきである。
@end defvar

@defopt backup-directory-alist
この変数の値は、ファイル名パターンとバックアップディレクトリー名のalistである。各要素は以下の形式をもつ
@smallexample
(@var{regexp} . @var{directory})
@end smallexample

@noindent
名前が@var{regexp}にマッチするファイルのバックアップが、@var{directory}内に作成されるだろう。@var{directory}には相対ディレクトリー、または絶対ディレクトリーを指定できる。絶対ディレクトリーの場合は、マッチするすべてのファイルが同じディレクトリー内にバックアップされる。このディレクトリー内でのファイル名は、クラッシュを避けるために、バックアップされるファイルの完全名のすべてのディレクトリー区切りは、@samp{!}に変更される。結果の名前を切り詰めるファイルシステムでは、これは正しく機能しないだろう。

すべてのバックアップが単一のディレクトリーで行われる一般的なケースでは、alistは@samp{"."}と適切なディレクトリーからなるペアーの、単一の要素を含むべきである。

この変数が@code{nil}(デフォルト)、またはファイル名のマッチに失敗した場合、バックアップは元のファイルのディレクトリーに作成される。

長いファイル名のないMS-DOSファイルシステムでは、この変数は常に無視される。
@end defopt

@defopt make-backup-file-name-function
この変数の値は、バックアップファイル名を作成する関数である。関数@code{make-backup-file-name}は、これを呼び出す。@ref{Backup
Names,, Naming Backup Files}を参照のこと。

特定のファイルにたいして特別なことを行うために、これをバッファーローカルにすることもできる。変更する場合は、@code{backup-file-name-p}と@code{file-name-sans-versions}も変更する必要があるかもしれない。
@end defopt


@node Rename or Copy
@subsection Backup by Renaming or by Copying?
@cindex backup files, rename or copy

  Emacsがバックアップファイルを作成できる、2つの方法があります:

@itemize @bullet
@item
Emacsは元のファイルをリネームすることができ、それがバックアップファイルになる。その後、バッファーの保存は新たなファイルに書き込まれる。この手順後、元ファイルの他のすべての名前(ハードリンク)はバックアップファイルを参照することになる。新たなファイルの所有者は編集を行っているユーザーになり、グループはそのディレクトリー内でそのユーザーが新たなファイルを書き込んだときのデフォルトのグループになる。

@item
Emacsは元のファイルをバックアップファイルにコピーでき、新たな内容はその後、元のファイルに上書きされる。この手順後、元のファイルの他のすべての名前(ハードリンク)は、そのファイルの(更新された)カレントバージョンを参照し続ける。ファイルの所有者とグループは変更されない。
@end itemize

  デフォルトは、1つ目の方法のリネームです。

  変数@code{backup-by-copying}が非@code{nil}の場合、それは2つ目の方法、つまり元のファイルをコピーして、新たなバッファー内容で上書きすることを意味します。変数@code{file-precious-flag}が非@code{nil}の場合にも、(メイン機能の副作用として)この効果があります。@ref{Saving
Buffers}を参照してください。

@defopt backup-by-copying
この変数が非@code{nil}の場合、Emacsは常にコピーによりバックアップファイルを作成する。デフォルトは@code{nil}。
@end defopt

  以下の3つの変数が非@code{nil}の際は、ある特定のケースに2つ目の方法が使用されます。その特定のケースに該当しないファイルの処理に影響はありません。

@defopt backup-by-copying-when-linked
この変数が非@code{nil}の場合、Emacsは複数名(ハードリンク)をもつファイルにたいして、コピーによりバックアップを作成する。デフォルトは@code{nil}。

@code{backup-by-copying}が非@code{nil}の場合は常にコピーによりバックアップが作成されるので、この変数は@code{backup-by-copying}が@code{nil}のときだけ意味がある。
@end defopt

@defopt backup-by-copying-when-mismatch
この変数が非@code{nil}(デフォルト)の場合、リネームによりファイルの所有者、またはグループが変更されるケースでは、Emacsはコピーによりバックアップを作成する。

リネームによりファイルの所有者、またはグループが変更されない場合、値は効果をもたない。つまり、そのディレクトリーで新たに作成されるファイルにたいするデフォルトのグループに属するユーザーにより所有されるファイルが該当する。

@code{backup-by-copying}が非@code{nil}の場合は常にコピーによりバックアップが作成されるので、この変数は@code{backup-by-copying}が@code{nil}のときだけ意味がある。
@end defopt

@defopt backup-by-copying-when-privileged-mismatch
この変数が非@code{nil}の場合、特定のユーザーID値(具体的には、特定の値以下のID数値)にたいしてのみ、@code{backup-by-copying-when-mismatch}と同じように振る舞うことを指定する。変数には、その数値をセットする。

したがって、ファイル所有者の変更を防ぐ必要がある際は、@code{backup-by-copying-when-privileged-mismatch}を0にセットすれば、スーパーユーザーだけがコピーによるバックアップを行うことができる。

デフォルトは200。
@end defopt

@node Numbered Backups
@subsection Making and Deleting Numbered Backup Files
@cindex numbered backups

  ファイルの名前が@file{foo}の場合、番号付きバックアップのバージョン名は@file{foo.~@var{v}~}となります。@var{v}は@file{foo.~1~}、@file{foo.~2~}、@file{foo.~3~}、@dots{}、@file{foo.~259~}のように、さまざまな整数です。

@defopt version-control
この変数は、単一の非番号付きバックアップファイルを作成するか、それとも複数の番号付きバックアップを作成するかを制御する。

@table @asis
@item @code{nil}
visitされたファイルが番号付きバックアップの場合は番号付きバックアップを作成し、それ以外は作成しない。これがデフォルトである。

@item @code{never}
番号付きバックアップを作成しない。

@item @var{anything else}
番号付きバックアップを作成する。
@end table
@end defopt

  番号付きバックアップを使用することにより、バックアップのバージョン番号は最終的には非常に大きな番号になるので、それらを削除しなければなりません。Emacsはこれを自動で行うことができ、ユーザーに削除するか確認することもできます。

@defopt kept-new-versions
この変数の値は、新たな番号付きバックアップが作成された際に保持すべき、もっとも新しいバージョンの個数である。新たに作成されたバックアップもカウントされる。デフォルトは2。
@end defopt

@defopt kept-old-versions
この変数の値は、新たな番号付きバックアップが作成された際に保持すべき、もっとも古いバージョンの個数である。デフォルトは2。
@end defopt

  番号が1、2、3、5、7のバックアップがあり、かつこれらの変数が値2をもつ場合は、番号が1と2のバックアップは古いバージョンとして保持され、番号が5と7のバックアップは新しいバージョンとして保持される。そして、番号が3のバックアップは、余分なバックアップとなる。関数@code{find-backup-file-name}(@ref{Backup
Names}を参照)は、どのバージョンのバックアップを削除するかを決定する役目を負うが、この関数自身がバックアップを削除する訳ではない。

@defopt delete-old-versions
この変数が@code{t}の場合は、ファイルの保存により、余分なバージョンのバックアップは、暗黙里に削除される。@code{nil}の場合は、余分なバックアップの削除前に確認を求めることを意味し、それ以外では、余分なバックアップは削除されない。
@end defopt

@defopt dired-kept-versions
この変数は、Dired内のコマンド@kbd{.}(ピリオド。@code{dired-clean-directory})で、もっとも新しいバージョンのバックアップをいくつ保持するかを指定する。これは、新たにバックアップファイルを作成する際に、@code{kept-new-versions}を指定するのと同等である。デフォルトは2。
@end defopt

@node Backup Names
@subsection Naming Backup Files
@cindex naming backup files

  The functions in this section are documented mainly because you can
customize the naming conventions for backup files by redefining them.  If
you change one, you probably need to change the rest.

@defun backup-file-name-p filename
This function returns a non-@code{nil} value if @var{filename} is a possible
name for a backup file.  It just checks the name, not whether a file with
the name @var{filename} exists.

@smallexample
@group
(backup-file-name-p "foo")
     @result{} nil
@end group
@group
(backup-file-name-p "foo~")
     @result{} 3
@end group
@end smallexample

The standard definition of this function is as follows:

@smallexample
@group
(defun backup-file-name-p (file)
  "Return non-nil if FILE is a backup file \
name (numeric or not)..."
  (string-match "~\\'" file))
@end group
@end smallexample

@noindent
Thus, the function returns a non-@code{nil} value if the file name ends with
a @samp{~}.  (We use a backslash to split the documentation string's first
line into two lines in the text, but produce just one line in the string
itself.)

This simple expression is placed in a separate function to make it easy to
redefine for customization.
@end defun

@defun make-backup-file-name filename
This function returns a string that is the name to use for a non-numbered
backup file for file @var{filename}.  On Unix, this is just @var{filename}
with a tilde appended.

The standard definition of this function, on most operating systems, is as
follows:

@smallexample
@group
(defun make-backup-file-name (file)
  "Create the non-numeric backup file name for FILE..."
  (concat file "~"))
@end group
@end smallexample

You can change the backup-file naming convention by redefining this
function.  The following example redefines @code{make-backup-file-name} to
prepend a @samp{.} in addition to appending a tilde:

@smallexample
@group
(defun make-backup-file-name (filename)
  (expand-file-name
    (concat "." (file-name-nondirectory filename) "~")
    (file-name-directory filename)))
@end group

@group
(make-backup-file-name "backups.texi")
     @result{} ".backups.texi~"
@end group
@end smallexample

Some parts of Emacs, including some Dired commands, assume that backup file
names end with @samp{~}.  If you do not follow that convention, it will not
cause serious problems, but these commands may give less-than-desirable
results.
@end defun

@defun find-backup-file-name filename
This function computes the file name for a new backup file for
@var{filename}.  It may also propose certain existing backup files for
deletion.  @code{find-backup-file-name} returns a list whose @sc{car} is the
name for the new backup file and whose @sc{cdr} is a list of backup files
whose deletion is proposed.  The value can also be @code{nil}, which means
not to make a backup.

Two variables, @code{kept-old-versions} and @code{kept-new-versions},
determine which backup versions should be kept.  This function keeps those
versions by excluding them from the @sc{cdr} of the value.  @xref{Numbered
Backups}.

In this example, the value says that @file{~rms/foo.~5~} is the name to use
for the new backup file, and @file{~rms/foo.~3~} is an ``excess'' version
that the caller should consider deleting now.

@smallexample
@group
(find-backup-file-name "~rms/foo")
     @result{} ("~rms/foo.~5~" "~rms/foo.~3~")
@end group
@end smallexample
@end defun

@c Emacs 19 feature
@defun file-newest-backup filename
This function returns the name of the most recent backup file for
@var{filename}, or @code{nil} if that file has no backup files.

Some file comparison commands use this function so that they can
automatically compare a file with its most recent backup.
@end defun

@node Auto-Saving
@section Auto-Saving
@c @cindex auto-saving   Lots of symbols starting with auto-save here.

  Emacs periodically saves all files that you are visiting; this is called
@dfn{auto-saving}.  Auto-saving prevents you from losing more than a limited
amount of work if the system crashes.  By default, auto-saves happen every
300 keystrokes, or after around 30 seconds of idle time.  @xref{Auto Save,
Auto Save, Auto-Saving: Protection Against Disasters, emacs, The GNU Emacs
Manual}, for information on auto-save for users.  Here we describe the
functions used to implement auto-saving and the variables that control them.

@defvar buffer-auto-save-file-name
This buffer-local variable is the name of the file used for auto-saving the
current buffer.  It is @code{nil} if the buffer should not be auto-saved.

@example
@group
buffer-auto-save-file-name
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@end example
@end defvar

@deffn Command auto-save-mode arg
This is the mode command for Auto Save mode, a buffer-local minor mode.
When Auto Save mode is enabled, auto-saving is enabled in the buffer.  The
calling convention is the same as for other minor mode commands
(@pxref{Minor Mode Conventions}).

Unlike most minor modes, there is no @code{auto-save-mode} variable.  Auto
Save mode is enabled if @code{buffer-auto-save-file-name} is non-@code{nil}
and @code{buffer-saved-size} (see below) is non-zero.
@end deffn

@defun auto-save-file-name-p filename
This function returns a non-@code{nil} value if @var{filename} is a string
that could be the name of an auto-save file.  It assumes the usual naming
convention for auto-save files: a name that begins and ends with hash marks
(@samp{#}) is a possible auto-save file name.  The argument @var{filename}
should not contain a directory part.

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@group
(auto-save-file-name-p "#backups.texi#")
     @result{} 0
@end group
@group
(auto-save-file-name-p "backups.texi")
     @result{} nil
@end group
@end example

The standard definition of this function is as follows:

@example
@group
(defun auto-save-file-name-p (filename)
  "Return non-nil if FILENAME can be yielded by..."
  (string-match "^#.*#$" filename))
@end group
@end example

This function exists so that you can customize it if you wish to change the
naming convention for auto-save files.  If you redefine it, be sure to
redefine the function @code{make-auto-save-file-name} correspondingly.
@end defun

@defun make-auto-save-file-name
This function returns the file name to use for auto-saving the current
buffer.  This is just the file name with hash marks (@samp{#}) prepended and
appended to it.  This function does not look at the variable
@code{auto-save-visited-file-name} (described below); callers of this
function should check that variable first.

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@end example

Here is a simplified version of the standard definition of this function:

@example
@group
(defun make-auto-save-file-name ()
  "Return file name to use for auto-saves \
of current buffer.."
  (if buffer-file-name
@end group
@group
      (concat
       (file-name-directory buffer-file-name)
       "#"
       (file-name-nondirectory buffer-file-name)
       "#")
    (expand-file-name
     (concat "#%" (buffer-name) "#"))))
@end group
@end example

This exists as a separate function so that you can redefine it to customize
the naming convention for auto-save files.  Be sure to change
@code{auto-save-file-name-p} in a corresponding way.
@end defun

@defopt auto-save-visited-file-name
If this variable is non-@code{nil}, Emacs auto-saves buffers in the files
they are visiting.  That is, the auto-save is done in the same file that you
are editing.  Normally, this variable is @code{nil}, so auto-save files have
distinct names that are created by @code{make-auto-save-file-name}.

When you change the value of this variable, the new value does not take
effect in an existing buffer until the next time auto-save mode is reenabled
in it.  If auto-save mode is already enabled, auto-saves continue to go in
the same file name until @code{auto-save-mode} is called again.
@end defopt

@defun recent-auto-save-p
This function returns @code{t} if the current buffer has been auto-saved
since the last time it was read in or saved.
@end defun

@defun set-buffer-auto-saved
This function marks the current buffer as auto-saved.  The buffer will not
be auto-saved again until the buffer text is changed again.  The function
returns @code{nil}.
@end defun

@defopt auto-save-interval
The value of this variable specifies how often to do auto-saving, in terms
of number of input events.  Each time this many additional input events are
read, Emacs does auto-saving for all buffers in which that is enabled.
Setting this to zero disables autosaving based on the number of characters
typed.
@end defopt

@defopt auto-save-timeout
The value of this variable is the number of seconds of idle time that should
cause auto-saving.  Each time the user pauses for this long, Emacs does
auto-saving for all buffers in which that is enabled.  (If the current
buffer is large, the specified timeout is multiplied by a factor that
increases as the size increases; for a million-byte buffer, the factor is
almost 4.)

If the value is zero or @code{nil}, then auto-saving is not done as a result
of idleness, only after a certain number of input events as specified by
@code{auto-save-interval}.
@end defopt

@defvar auto-save-hook
This normal hook is run whenever an auto-save is about to happen.
@end defvar

@defopt auto-save-default
If this variable is non-@code{nil}, buffers that are visiting files have
auto-saving enabled by default.  Otherwise, they do not.
@end defopt

@deffn Command do-auto-save &optional no-message current-only
This function auto-saves all buffers that need to be auto-saved.  It saves
all buffers for which auto-saving is enabled and that have been changed
since the previous auto-save.

If any buffers are auto-saved, @code{do-auto-save} normally displays a
message saying @samp{Auto-saving...} in the echo area while auto-saving is
going on.  However, if @var{no-message} is non-@code{nil}, the message is
inhibited.

If @var{current-only} is non-@code{nil}, only the current buffer is
auto-saved.
@end deffn

@defun delete-auto-save-file-if-necessary &optional force
This function deletes the current buffer's auto-save file if
@code{delete-auto-save-files} is non-@code{nil}.  It is called every time a
buffer is saved.

Unless @var{force} is non-@code{nil}, this function only deletes the file if
it was written by the current Emacs session since the last true save.
@end defun

@defopt delete-auto-save-files
This variable is used by the function
@code{delete-auto-save-file-if-necessary}.  If it is non-@code{nil}, Emacs
deletes auto-save files when a true save is done (in the visited file).
This saves disk space and unclutters your directory.
@end defopt

@defun rename-auto-save-file
This function adjusts the current buffer's auto-save file name if the
visited file name has changed.  It also renames an existing auto-save file,
if it was made in the current Emacs session.  If the visited file name has
not changed, this function does nothing.
@end defun

@defvar buffer-saved-size
The value of this buffer-local variable is the length of the current buffer,
when it was last read in, saved, or auto-saved.  This is used to detect a
substantial decrease in size, and turn off auto-saving in response.

If it is @minus{}1, that means auto-saving is temporarily shut off in this
buffer due to a substantial decrease in size.  Explicitly saving the buffer
stores a positive value in this variable, thus reenabling auto-saving.
Turning auto-save mode off or on also updates this variable, so that the
substantial decrease in size is forgotten.

If it is @minus{}2, that means this buffer should disregard changes in
buffer size; in particular, it should not shut off auto-saving temporarily
due to changes in buffer size.
@end defvar

@defvar auto-save-list-file-name
This variable (if non-@code{nil}) specifies a file for recording the names
of all the auto-save files.  Each time Emacs does auto-saving, it writes two
lines into this file for each buffer that has auto-saving enabled.  The
first line gives the name of the visited file (it's empty if the buffer has
none), and the second gives the name of the auto-save file.

When Emacs exits normally, it deletes this file; if Emacs crashes, you can
look in the file to find all the auto-save files that might contain work
that was otherwise lost.  The @code{recover-session} command uses this file
to find them.

The default name for this file specifies your home directory and starts with
@samp{.saves-}.  It also contains the Emacs process @acronym{ID} and the
host name.
@end defvar

@defopt auto-save-list-file-prefix
After Emacs reads your init file, it initializes
@code{auto-save-list-file-name} (if you have not already set it
non-@code{nil}) based on this prefix, adding the host name and process ID@.
If you set this to @code{nil} in your init file, then Emacs does not
initialize @code{auto-save-list-file-name}.
@end defopt

@node Reverting
@section Reverting
@cindex reverting buffers

  If you have made extensive changes to a file and then change your mind about
them, you can get rid of them by reading in the previous version of the file
with the @code{revert-buffer} command.  @xref{Reverting, , Reverting a
Buffer, emacs, The GNU Emacs Manual}.

@deffn Command revert-buffer &optional ignore-auto noconfirm preserve-modes
This command replaces the buffer text with the text of the visited file on
disk.  This action undoes all changes since the file was visited or saved.

By default, if the latest auto-save file is more recent than the visited
file, and the argument @var{ignore-auto} is @code{nil}, @code{revert-buffer}
asks the user whether to use that auto-save instead.  When you invoke this
command interactively, @var{ignore-auto} is @code{t} if there is no numeric
prefix argument; thus, the interactive default is not to check the auto-save
file.

Normally, @code{revert-buffer} asks for confirmation before it changes the
buffer; but if the argument @var{noconfirm} is non-@code{nil},
@code{revert-buffer} does not ask for confirmation.

Normally, this command reinitializes the buffer's major and minor modes
using @code{normal-mode}.  But if @var{preserve-modes} is non-@code{nil},
the modes remain unchanged.

Reverting tries to preserve marker positions in the buffer by using the
replacement feature of @code{insert-file-contents}.  If the buffer contents
and the file contents are identical before the revert operation, reverting
preserves all the markers.  If they are not identical, reverting does change
the buffer; in that case, it preserves the markers in the unchanged text (if
any) at the beginning and end of the buffer.  Preserving any additional
markers would be problematical.
@end deffn

@defvar revert-buffer-in-progress-p
@code{revert-buffer} binds this variable to a non-@code{nil} value while it
is working.
@end defvar

You can customize how @code{revert-buffer} does its work by setting the
variables described in the rest of this section.

@defopt revert-without-query
This variable holds a list of files that should be reverted without query.
The value is a list of regular expressions.  If the visited file name
matches one of these regular expressions, and the file has changed on disk
but the buffer is not modified, then @code{revert-buffer} reverts the file
without asking the user for confirmation.
@end defopt

  Some major modes customize @code{revert-buffer} by making buffer-local
bindings for these variables:

@defvar revert-buffer-function
@anchor{Definition of revert-buffer-function}
The value of this variable is the function to use to revert this buffer.  It
should be a function with two optional arguments to do the work of
reverting.  The two optional arguments, @var{ignore-auto} and
@var{noconfirm}, are the arguments that @code{revert-buffer} received.

Modes such as Dired mode, in which the text being edited does not consist of
a file's contents but can be regenerated in some other fashion, can give
this variable a buffer-local value that is a special function to regenerate
the contents.
@end defvar

@defvar revert-buffer-insert-file-contents-function
The value of this variable specifies the function to use to insert the
updated contents when reverting this buffer.  The function receives two
arguments: first the file name to use; second, @code{t} if the user has
asked to read the auto-save file.

The reason for a mode to change this variable instead of
@code{revert-buffer-function} is to avoid duplicating or replacing the rest
of what @code{revert-buffer} does: asking for confirmation, clearing the
undo list, deciding the proper major mode, and running the hooks listed
below.
@end defvar

@defvar before-revert-hook
This normal hook is run by the default @code{revert-buffer-function} before
inserting the modified contents.  A custom @code{revert-buffer-function} may
or may not run this hook.
@end defvar

@defvar after-revert-hook
This normal hook is run by the default @code{revert-buffer-function} after
inserting the modified contents.  A custom @code{revert-buffer-function} may
or may not run this hook.
@end defvar

@c FIXME?  Move this section from arevert-xtra to here?
@defvar buffer-stale-function
The value of this variable specifies a function to call to check whether a
buffer needs reverting.  The default value only handles buffers that are
visiting files, by checking their modification time.  Buffers that are not
visiting files require a custom function
@iftex
(@pxref{Supporting additional buffers,,, emacs-xtra, Specialized Emacs
Features}).
@end iftex
@ifnottex
(@pxref{Supporting additional buffers,,, emacs}).
@end ifnottex
@end defvar
