@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Buffers
@chapter Buffers
@cindex buffer

  @dfn{バッファー(buffer)}とは、編集されるテキストを含むLispオブジェクトのことです。バッファーは、visitされるファイルのコンテンツを保持するために使用されます。しかし、ファイルをvisitしないバッファーも存在するかもしれません。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current
buffer)}に指定できるのは、常に1つのバッファーだけです。ほとんどの編集コマンドは、カレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは、任意のウィンドウ内に表示されるときも、表示されない場合もあります。

@menu
* Buffer Basics::            バッファーとは?
* Current Buffer::           バッファーをカレントに指定することにより、プリミティブはバッファーのコンテンツにアクセスする。
* Buffer Names::             バッファー名にたいするアクセスと変更。
* Buffer File Name::         バッファーファイル名は、どのファイルをvisitしているかを示す。
* Buffer Modification::      保存が必要なら、バッファーは@dfn{変更されている(modified)}。
* Modification Time::        "Emacsの裏"でvisitされているファイルが変更されたかどうかを判断する。
* Read Only Buffers::        読み取り専用バッファーでのテキスト変更は許されない。
* Buffer List::              すべての既存バッファーを閲覧する方法。
* Creating Buffers::         バッファーを作成する関数。
* Killing Buffers::          明示的にkillされるまで、バッファーは存在する。
* Indirect Buffers::         インダイレクトバッファーは、他のバッファーとテキストを共有する。
* Swapping Text::            2つのバッファー間でのテキストの交換。
* Buffer Gap::               バッファー内のギャップ。
@end menu

@node Buffer Basics
@section Buffer Basics

@ifnottex
  @dfn{バッファー(buffer)}とは、編集されるテキストを含むLispオブジェクトのことです。バッファーは、visitされるファイルのコンテンツを保持するために使用されます。しかし、ファイルをvisitしないバッファーも存在します。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current
buffer)}に指定できるのは、常に1つのバッファーだけです。ほとんどの編集コマンドは、カレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは、任意のウィンドウ内に表示されるときも、表示されない場合もあります。
@end ifnottex

  Emacs編集におけるバッファーは、個別に名前をもち、編集可能なテキストを保持するオブジェクトです。Lispプログラムにたいして、バッファーはスペシャルデータ型として表されます。バッファーのコンテンツを、拡張可能な文字列と考えることができます。挿入と削除は、バッファー内の任意の箇所で発生し得ます。@ref{Text}を参照してください。

  Lispのバッファーオブジェクトは、多くの情報要素を含んでいます。これらの情報のいくつかは変数を通じてプログラマーが直接アクセスできるのにたいして、その他の情報は特殊な目的のための関数を通じてのみアクセスすることができます。たとえば、visitされているファイルの名前は変数を通じて直接アクセスできますが、ポイント値はプリミティブ関数からのみアクセスできます。

  直接アクセス可能な、バッファー固有の情報は、@dfn{バッファーローカル(buffer-local)}な変数バインディング内に格納されます。これは、特定のバッファー内だけで効力のある変数値のことです。この機能により、それぞれのバッファーは、特定の変数の値をオーバーライドすることができます。ほとんどのメジャーモードは、この方法で@code{fill-column}や@code{comment-column}のような変数をオーバーライドしています。バッファーローカルな変数、およびそれらに関連する関数についての詳細は、@ref{Buffer-Local
Variables}を参照してください。

  バッファーからファイルをvisitする関数および変数については、@ref{Visiting Files}、および@ref{Saving
Buffers}を参照してください。ウィンドウ内へのバッファー表示に関連する関数および変数については、@ref{Buffers and
Windows}を参照してください。

@defun bufferp object
この関数は、@var{object}がバッファーなら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@node Current Buffer
@section The Current Buffer
@cindex selecting a buffer
@cindex changing to another buffer
@cindex current buffer

  一般的に、1つのEmacsセッション内には、多くのバッファーが存在します。常に、それらのうちの1つが@dfn{カレントバッファー(current
buffer)}に指定され、ます。カレントバッファーとは、ほとんどの編集が行われるバッファーのことです。テキストを調べたり変更するプリミティブのほとんどは、暗黙的にカレントバッファーにたいして処理を行います(@ref{Text}を参照)。

  通常は、選択されたウィンドウ内に表示されるバッファーがカレントバッファーですが、常にそうではありません。Lispプログラムは、バッファーのコンテンツを処理するために、スクリーン上に表示されているものを変更することなく、任意のバッファーを一時的にカレントに指定できます。カレントバッファーの指定にたいしてもっとも基本的な関数は、@code{set-buffer}です。

@defun current-buffer
この関数は、カレントバッファーをリターンする関数。

@example
@group
(current-buffer)
     @result{} #<buffer buffers.texi>
@end group
@end example
@end defun

@defun set-buffer buffer-or-name
この関数は、@var{buffer-or-name}をカレントバッファーにする。@var{buffer-or-name}は既存のバッファー、または既存のバッファーの名前でなければならない。リターン値は、カレントになったバッファーである。

この関数は、そのバッファーをどのウィンドウにも表示しないので、必然的にユーザーはそのバッファーを見ることはできない。しかし、Lispプログラムはその後、そのバッファーにたいして処理を行うことになるだろう。
@end defun

  編集コマンドがエディターコマンドループにリターンする際、Emacsは選択されたウィンドウ内に表示されているバッファーにたいして、自動的に@code{set-buffer}を呼び出します。これは混乱を防ぐためで、これにより、Emacsがコマンドを読み取るときに、カーソルのあるバッファーが、コマンドを適用されるバッファーになるのが保証されます(@ref{Command
Loop}を参照)。したがって、異なるバッファーを指示して切り替える場合に、@code{set-buffer}を使用するべきではありません。これを行うためには、@ref{Switching
Buffers}で説明されているカを使用してください。

  Lisp関数を記述する際は、処理後にカレントバッファーをリストアするために、コマンドループのこの振る舞いに@emph{依存しないでください}。編集コマンドは、コマンドループだけではなく、他のプログラムからLisp関数としても呼び出されます。呼び出し側にとっては、そのサブルーチンがカレントだったバッファーを変更しないほうが便利です(もちろん、それがサブルーチンの目的でない場合ですが)。

  他のバッファーにたいして一時的に処理を行うには、@code{save-current-buffer}フォーム内に@code{set-buffer}を置きます。以下の例は、コマンド@code{append-to-buffer}の簡略版です:

@example
@group
(defun append-to-buffer (buffer start end)
  "リージョンのテキストをBUFFERに追加する"
  (interactive "BAppend to buffer: \nr")
  (let ((oldbuf (current-buffer)))
    (save-current-buffer
      (set-buffer (get-buffer-create buffer))
      (insert-buffer-substring oldbuf start end))))
@end group
@end example

@noindent
ここでは、カレントバッファーを記録するためにローカル変数にバインドしてから、後で@code{save-current-buffer}がそれを再びカレントにするよう、取り計らっています。次に、@code{set-buffer}が指定されたバッファーをカレントにして、@code{insert-buffer-substring}が元のバッファーの文字列を、指定された(今はカレントの)バッファーにコピーします。

  かわりに、@code{with-current-buffer}マクロを使用することもできます:

@example
@group
(defun append-to-buffer (buffer start end)
  "BUFFERにリージョンのテキストを追加する"
  (interactive "BAppend to buffer: \nr")
  (let ((oldbuf (current-buffer)))
    (with-current-buffer (get-buffer-create buffer)
      (insert-buffer-substring oldbuf start end))))
@end group
@end example

  どちらの場合でも、追加されるバッファーが偶然他のウィンドウに表示されていた場合には、次回の再表示でそのテキストがどのように変更されたか表示されるでしょう。どのウィンドウにも表示されていない場合には、スクリーン上で即座に変更を目にすることはありません。コマンドはバッファーを一時的にカレントにしますが、そのことがバッファーの表示を誘因する訳ではありません。

  バッファーローカルバインディングをもつ変数にたいして、(@code{let}や関数引数などで)ローカルバインディングを作成する場合は、そのローカルバインディングのスコープの最初と最後で、同じバッファーがカレントとなることを確認してください。そうしないと、あるバッファーではバインドして、他のバッファーではバインドされないことになるかもしれません!

  @code{set-buffer}の使用において、カレントバッファーが戻ることに依存しないでください。なぜなら、間違ったバッファーがカレントのときにquitが発生した場合、その処理は行われないでしょう。たとえば上記の例に倣うと、以下は間違ったやり方です:

@example
@group
  (let ((oldbuf (current-buffer)))
    (set-buffer (get-buffer-create buffer))
    (insert-buffer-substring oldbuf start end)
    (set-buffer oldbuf))
@end group
@end example

@noindent
例で示したように@code{save-current-buffer}、または@code{with-current-buffer}を使用すれば、quitや@code{throw}を、通常の評価と同様に処理できます。

@defspec save-current-buffer body@dots{}
スペシャルフォーム@code{save-current-buffer}は、カレントバッファーの識別を保存して、@var{body}フォームを評価し、最後にそのバッファーをカレントにリストアする。リターン値は、@var{body}内の最後のフォームの値である。@code{throw}やエラーを通じた異常exitの場合でも、カレントバッファーはリストアされる(@ref{Nonlocal
Exits}を参照)。

カレントとして使用されていたバッファーが、@code{save-current-buffer}によるexit時にkillされていた場合は、それが再びカレントとなることは当然ない。かわりに、exit直前にカレントバッファーが何であれ、それがカレントになる。
@end defspec

@defmac with-current-buffer buffer-or-name body@dots{}
@code{with-current-buffer}マクロは、カレントバッファーの識別を保存して、@var{buffer-or-name}をカレントにし、@var{body}フォームを評価して、最後にカレントバッファーをリストアする。@var{buffer-or-name}には既存のバッファー、または既存のバッファー名を指定しなければならない。

リターン値は、@var{body}内の最後のフォームの値である。@code{throw}やエラーを通じた異常exitの場合でも、カレントバッファーはリストアされる(@ref{Nonlocal
Exits}を参照)。
@end defmac

@defmac with-temp-buffer body@dots{}
@anchor{Definition of with-temp-buffer}
@code{with-temp-buffer}マクロは、一時的なバッファーをカレントバッファーとして、@var{body}フォームを評価する。これはカレントバッファーの識別を保存して、一時的なバッファーを作成、それをカレントとして、@var{body}フォームを評価し、一時バッファーをkillする間に、以前のカレントバッファーをリストアする。
デフォルトでは、このマクロにより作成されたバッファー内のアンドゥ情報(@ref{Undo}を参照)は記録されない(が、必要なら@var{body}でそれを有効にできる)。

リターン値は、@var{body}内の最後のフォームの値である。最後のフォームとして@code{(buffer-string)}を使用することにより、一時バッファーのコンテンツをリターンできる。

@code{throw}やエラーを通じた異常exitの場合でも、カレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。

@ref{Definition of with-temp-file,, Writing to
Files}の@code{with-temp-file}も参照されたい。
@end defmac

@node Buffer Names
@section Buffer Names
@cindex buffer names

  それぞれのバッファーは、文字列で表される一意な名前をもちます。バッファーにたいして機能する関数の多くは、引数としてバッファーとバッファー名の両方を受け入れます。@var{buffer-or-name}という名前の引数がこのタイプで、それが文字列でもバッファーでもない場合は、エラーがシグナルされます。@var{buffer}という名前の引数は、名前ではなく実際のバッファーオブジェクトでなければなりません。

@cindex hidden buffers
@cindex buffers without undo information
  短命でユーザーが関心をもたないようなバッファーは名前がスペースで始まり、それらについては@code{list-buffers}および@code{buffer-menu}コマンドは無視します(が、ファイルをvisitしているようなバッファーは@strong{無視されない})。スペースで始まる名前は、初期状態ではアンドゥ情報の記録も無効になっています。@ref{Undo}を参照してください。

@defun buffer-name &optional buffer
この関数は、@var{buffer}の名前を文字列としてリターンする。@var{buffer}のデフォルトは、カレントバッファーである。

@code{buffer-name}が@code{nil}をリターンした場合、それは@var{buffer}がkillされていることを意味する。@ref{Killing
Buffers}を参照のこと。

@example
@group
(buffer-name)
     @result{} "buffers.texi"
@end group

@group
(setq foo (get-buffer "temp"))
     @result{} #<buffer temp>
@end group
@group
(kill-buffer foo)
     @result{} nil
@end group
@group
(buffer-name foo)
     @result{} nil
@end group
@group
foo
     @result{} #<killed buffer>
@end group
@end example
@end defun

@deffn Command rename-buffer newname &optional unique
この関数は、カレントバッファーを@var{newname}にリネームする。@var{newname}が文字列でない場合は、エラーをシグナルする。

@c Emacs 19 feature
@var{newname}がすでに使用済みの場合、@code{rename-buffer}は通常はエラーをシグナルする。しかし、@var{unique}が非@code{nil}の場合は、未使用の名前となるように@var{newname}を変更する。interactiveに呼び出した場合は、プレフィックス数引数により@var{unique}に非@code{nil}を指定できる(この方法により、コマンド@code{rename-uniquely}は実装される)。

この関数は、実際にバッファーに与えられた名前をリターンする。
@end deffn

@defun get-buffer buffer-or-name
この関数は、@var{buffer-or-name}で指定されたバッファーをリターンする。@var{buffer-or-name}が文字列で、かつそのような名前のバッファーが存在しない場合、値は@code{nil}になる。@var{buffer-or-name}がバッファーの場合は、与えられたバッファーをリターンする。これは有用とは言い難く、引数は通常は名前である。たとえば:

@example
@group
(setq b (get-buffer "lewis"))
     @result{} #<buffer lewis>
@end group
@group
(get-buffer b)
     @result{} #<buffer lewis>
@end group
@group
(get-buffer "Frazzle-nots")
     @result{} nil
@end group
@end example

@ref{Creating Buffers}の関数@code{get-buffer-create}も参照のこと。
@end defun

@c Emacs 19 feature
@defun generate-new-buffer-name starting-name &optional ignore
この関数は、新たなバッファーにたいして一意となるような名前をリターンする ---
が、バッファーは作成しない。この名前は@var{starting-name}で始まり、内部が数字であるような@samp{<@dots{}>}を追加することにより、すべてのバッファーでカレントで使用されていない名前を生成する。この数字は2で始まり、既存バッファーの名前でない名前になる数字まで増加される。

オプション引数@var{ignore}が非@code{nil}の場合、それは潜在的にバッファー名であるような文字列であること。これは、たとえそれが(通常は拒絶されるであろう)既存バッファーの名前であっても、試みられた場合は、潜在的に受容可能なバッファーとして考慮することを意味する。つまり@samp{foo}、@samp{foo<2>}、@samp{foo<3>}、@samp{foo<4>}という名前のバッファーが存在する場合、

@example
(generate-new-buffer-name "foo")
     @result{} "foo<5>"
(generate-new-buffer-name "foo" "foo<3>")
     @result{} "foo<3>"
(generate-new-buffer-name "foo" "foo<6>")
     @result{} "foo<5>"
@end example

@ref{Creating Buffers}の関連する関数@code{generate-new-buffer}も参照のこと。
@end defun

@node Buffer File Name
@section Buffer File Name
@cindex visited file
@cindex buffer file name
@cindex file name of buffer

  @dfn{バッファーファイル名(buffer file
name)}とは、そのバッファーにvisitされているファイルの名前です。バッファーがファイルをvisiblyしていなければ、バッファーファイル名は@code{nil}です。大抵、バッファー名はバッファーファイル名の非ディレクトリーパートと同じですが、バッファーファイル名とバッファー名は別物であり、個別にセットすることができます。@ref{Visiting
Files}を参照してください。

@defun buffer-file-name &optional buffer
この関数は、@var{buffer}がvisitしているファイルの、絶対ファイル名をリターンする。@var{buffer}がファイルをvisitしていない場合、@code{buffer-file-name}は@code{nil}をリターンする。@var{buffer}が与えられない場合のデフォルトは、カレントバッファーになる。

@example
@group
(buffer-file-name (other-buffer))
     @result{} "/usr/user/lewis/manual/files.texi"
@end group
@end example
@end defun

@defvar buffer-file-name
このバッファーローカル変数は、カレントバッファーにvisitされているファイルの名前、ファイルをvisitしていなければ@code{nil}が含まれる。これは永続的なローカル変数であり、@code{kill-all-local-variables}の影響を受けない。

@example
@group
buffer-file-name
     @result{} "/usr/user/lewis/manual/buffers.texi"
@end group
@end example

他のさまざまな事項を変更せずに、この変数を変更するのは危険である。通常は、@code{set-visited-file-name}を使用するほうがよい(以下参照)。バッファー名の変更などのような、そこで行われることのいくつかは、絶対必要という訳ではないが、その他の事項はEmacsが混乱するのを防ぐために必要不可欠である。
@end defvar

@defvar buffer-file-truename
このバッファーローカル変数は、カレントバッファーにvisitされているファイルの省略された形式の実名(truename)、ファイルをvisitしていない場合は@code{nil}を保持する。これは永続的にローカルであり、@code{kill-all-local-variables}の影響を受けない。@xref{Truenames}、および@ref{abbreviate-file-name}を参照のこと。
@end defvar

@defvar buffer-file-number
このバッファーローカル変数は、カレントバッファーにvisitされているファイルのファイル番号(file number)とデバイス番号(device
number)、ファイルをvisitしていない場合は@code{nil}を保持する。これは永続的にローカルであり、@code{kill-all-local-variables}の影響を受けない。

値は通常、@code{(@var{filenum}
@var{devnum})}のような形式のリストである。この番号ペアーは、システム上でアクセス可能なすべてのファイルの中から、ファイルを一意に識別する。より詳細な情報は、@ref{File
Attributes}の@code{file-attributes}を参照のこと。

@code{buffer-file-name}がシンボリックリンク名の場合は、どちらの番号も再帰的なターゲットを参照する。
@end defvar

@defun get-file-buffer filename
この関数は、ファイル@var{filename}をvisitしているバッファーをリターンする。そのようなバッファーが存在しない場合は、@code{nil}をリターンする。引数@var{filename}は文字列でなければならず、展開(@ref{File
Name
Expansion}を参照)された後、killされていないすべてのバッファーがvisitしているファイル名と比較される。バッファーの@code{buffer-file-name}は、@var{filename}の展開形と正確にマッチしなければならないことに注意。この関数は、同じファイルにたいする他の名前は、認識しないだろう。

@example
@group
(get-file-buffer "buffers.texi")
    @result{} #<buffer buffers.texi>
@end group
@end example

特殊な状況下では、複数のバッファーが同じファイル名をvisitすることがあり得る。そのような場合、この関数はバッファーリスト内の最初に該当するバッファーをリターンする。
@end defun

@defun find-buffer-visiting filename &optional predicate
これは@code{get-file-buffer}と似ているが、そのファイルを@emph{違う名前}でvisitしているかもしれないすべてのバッファーをリターンする。つまり、バッファーの@code{buffer-file-name}は@var{filename}の展開形式と正確にマッチする必要はなく、同じファイルを参照することだけが要求される。@var{predicate}が非@code{nil}の場合、それは@var{filename}をvisitしているバッファーを1つの引数とする関数であること。そのバッファーにたいして、@var{predicate}が非@code{nil}をリターンした場合のみ、適切なリターン値と判断される。リターンすべき適切なバッファーが見つからない場合、@code{find-buffer-visiting}は@code{nil}をリターンする。
@end defun

@deffn Command set-visited-file-name filename &optional no-query along-with-file
@var{filename}が非空文字列の場合、この関数はカレントバッファーにvisitされているファイルの名前を、@var{filename}に変更する(バッファーがファイルをvisitしていない場合は、visitするファイルとして@var{filename}を与える)。そのバッファーにたいする@emph{次回}の保存では、新たに指定されたファイルに保存されるだろう。

このコマンドは、たとえそのバッファーのコンテンツがその前にvisitされていたファイルとマッチしていても、(Emacsが関知するかぎり)@var{filename}のコンテンツとはマッチしないので、バッファーが変更されている(modified)とマークする。これは、その名前がすでに使用されていなければ、新たなファイル名に対応してバッファーをリネームする。

@var{filename}が@code{nil}、または空文字列の場合、それは``visitされているファイルがない''ことを意味する。この場合、@code{set-visited-file-name}はバッファーの変更フラグを変更することなく、そのバッファーがファイルをvisitしていないとマークする。

この関数は@var{filename}をvisitしているバッファーがすでに存在する場合は、通常はユーザーに確認を求める。しかし、@var{no-query}が非@code{nil}の場合は、この質問を行わない。@var{filename}をvisitしているバッファーがすでに存在し、かつユーザーが承認、または@var{no-query}が非@code{nil}の場合、この関数は中に数字が入った@samp{<@dots{}>}を@var{filename}に追加して、新たなバッファーの名前を一意にする。

@var{along-with-file}が非@code{nil}の場合、それは前にvisitされていたファイルが@var{filename}にリネームされたと想定することを意味する。この場合、コマンドはバッファーの修正フラグを変更せず、そのバッファーの記録されている最終ファイル変更時刻を@code{visited-file-modtime}が報告する時刻(@ref{Modification
Time}を参照)で変更もしない。@var{along-with-file}が@code{nil}の場合、この関数は@code{visited-file-modtime}が0をリターンした後に、記録済みの最終ファイル変更時刻をクリアーする。

関数@code{set-visited-file-name}がinteractiveに呼び出されたときは、ミニバッファー内で@var{filename}の入力を求める。
@end deffn

@defvar list-buffers-directory
このバッファーローカル変数は、visitしているファイル名をもたないバッファーにたいして、バッファーリスト中のvisitしているファイル名を表示する場所に表示する文字列を指定する。Diredバッファーは、この変数を使用する。
@end defvar

@node Buffer Modification
@section Buffer Modification
@cindex buffer modification
@cindex modification flag (of buffer)

  Emacsは、各バッファーにたいして、バッファーのテキストを変更したかどうかを記録するために、@dfn{変更フラグ(modified
flag)}と呼ばれるフラグを管理しています。このフラグは、バッファーのコンテンツを変更すると常に@code{t}にセットされ、バッファーを保存したとき@code{nil}にクリアーされます。したがって、このフラグは保存されていない変更があるかどうかを表します。フラグの値は通常、モードライン内(@ref{Mode
Line Variables}を参照)に表示され、保存(@ref{Saving
Buffers}を参照)と自動保存(@ref{Auto-Saving}を参照)を制御します。

  いくつかのLispプログラムは、このフラグを明示的にセットします。たとえば、関数@code{set-visited-file-name}は、このフラグを@code{t}にセットします。なぜなら、たとえその前にvisitしていたファイルが変更されていなくても、テキストは新たにvisitされたファイルとマッチしないからです。

  バッファーのコンテンツを変更する関数については、@ref{Text}で説明されています。

@defun buffer-modified-p &optional buffer
この関数は、バッファー@var{buffer}が最後にファイルから読み込まれた、あるいは保存されてから変更されていれば@code{t}、それ以外では@code{nil}をリターンする。@var{buffer}が与えられない場合は、カレントバッファーがテストされる。
@end defun

@defun set-buffer-modified-p flag
この関数は、@var{flag}が非@code{nil}ならカレントバッファーを変更済みとしてマークし、@code{nil}なら未変更としてマークする。

この関数を呼び出すことによる別の効果は、それがカレントバッファーのモードラインの無条件な再表示を引き起こすことである。実際のところ、関数@code{force-mode-line-update}は、以下を行うことにより機能する:

@example
@group
(set-buffer-modified-p (buffer-modified-p))
@end group
@end example
@end defun

@defun restore-buffer-modified-p flag
@code{set-buffer-modified-p}と同様だが、モードラインにたいする強制的な再表示を行わない。
@end defun

@deffn Command not-modified &optional arg
このコマンドは、カレントバッファーが変更されておらず、保存する必要がないとマークする。@var{arg}が非@code{nil}の場合、これは変更されているとマークするので、次回の適切なタイミングでバッファーは保存されるだろう。interactiveに呼び出された場合、@var{arg}はプレフィックス引数である。

この関数は、エコーエリア内にメッセージをプリントするので、プログラム内で使用してはならない。かわりに、@code{set-buffer-modified-p}(上記)を使用すること。
@end deffn

@defun buffer-modified-tick &optional buffer
この関数は、@var{buffer}の変更カウント(modification-count)をリターンする。これは、バッファーが変更されるたびに増加されるカウンターである。@var{buffer}が@code{nil}(または省略)の場合は、カレントバッファーが使用される。このカウンターは、時折0にクリアーされ得る。
@end defun

@defun buffer-chars-modified-tick &optional buffer
この関数は、@var{buffer}の文字変更に関わる変更カウントをリターンする。テキストプロパティを変更しても、このカウンターは変化しない。しかし、そのバッファーにテキストが挿入、または削除されるたびに、このカウンターは@code{buffer-modified-tick}によりリターンされるであろう値にリセットされる。@code{buffer-chars-modified-tick}を2回呼び出してリターンされる値を比較することにより、その呼び出しの間にバッファー内で文字変更があったかどうかを知ることができる。@var{buffer}が@code{nil}(または省略)の場合は、カレントバッファーが使用される。
@end defun

@node Modification Time
@section Buffer Modification Time
@cindex comparing file modification time
@cindex modification time of buffer

  あるファイルをvisitして、そのバッファー内で変更を行って、その一方ではディスク上でファイル自身が変更されたとします。この時点でバッファーを保存すると、ファイル内の変更は上書きされるでしょう。これが正に望んでいる動作のときもありますが、通常は有用な情報が失われてしまいます。したがって、Emacsはファイルを保存する前に、以下で説明する関数を使用して、ファイルの変更時刻をチェックします(ファイルの変更時刻を調べる方法は、@ref{File
Attributes}を参照)。

@defun verify-visited-file-modtime &optional buffer
この関数は、@var{buffer}(デフォルトはカレントバッファー)にvisitされているファイルにたいして記録されている変更時刻と、オペレーティングシステムにより記録された実際の変更時刻を比較する。これら2つの時刻は、Emacsがそのファイルをvisit、もしくは保存して以降、他のプロセスにより書き込みがされていなければ、等しくなるはずである。

この関数は、実際の最終変更時刻と、Emacsが記録した変更時刻が同じなら@code{t}、それ以外は@code{nil}をリターンする。そのバッファーが記録済みの最終変更時刻をもたない、すなわち@code{visited-file-modtime}が0をリターンするような場合も、@code{t}をリターンする。

これは、たとえ@code{visited-file-modtime}が非0の値をリターンしたとしても、ファイルをvisitしていないバッファーにたいしては、常に@code{t}をリターンする。たとえば、diredバッファーにたいして、この関数は常に@code{t}をリターンする。また、存在せず、
以前に存在したこともなかったファイルをvisitするバッファーにたいして@code{t}をリターンするが、visitしているファイルが削除されたバッファーにたいしては@code{nil}をリターンする。
@end defun

@defun clear-visited-file-modtime
この関数は、カレントバッファーによりvisitされているファイルの最終変更時刻の記録をクリアーする。結果として、このバッファーにを次回の保存では、ファイルの変更時刻の食い違いは報告されなくなる。

この関数は@code{set-visited-file-name}、および変更済みファイルの上書きを防ぐための通常テストを行わない例外的な箇所で呼び出される。
@end defun

@defun visited-file-modtime
この関数は、カレントバッファーの記録された最終ファイル変更時刻を、@code{(@var{high} @var{low} @var{microsec}
@var{picosec})}のような形式のリストでリターンする(これは、@code{file-attributes}が時刻値をリターンするために使用するフォーマットと同じである。@ref{File
Attributes}を参照されたい)。

バッファーが最終変更時刻の記録をもたない場合、この関数は0をリターンする。これが発生するのは、たとえばバッファーがファイルをvisitしていなかったり、@code{clear-visited-file-modtime}で最終変更時刻が明示的にクリアーされた場合である。しかし@code{visited-file-modtime}は、いくつかの非ファイルバッファーにたいするリストをリターンすることに注意。たとえば、ディレクトリーをリストするDiredバッファーでは、Diredが記録するそのディレクトリーの最終変更時刻がリターンされる。

バッファーがファイルをvisitしていない場合、この関数は-1をリターンする。
@end defun

@defun set-visited-file-modtime &optional time
この関数は、バッファーがvisitしているファイルの最終変更時刻の記録を、@var{time}が非@code{nil}、それ以外はvisitしているファイルの最終変更時刻により更新する。

@var{time}が@code{nil}や0でない場合、それは@code{current-time}で使用される形式@code{(@var{high}
@var{low} @var{microsec} @var{picosec})}というフォーマットであること(@ref{Time of
Day}を参照)。

この関数は、バッファーが通常のようにファイルから読み取られたものでない場合や、ファイル自身が害のない既知の理由により変更されている場合に有用である。
@end defun

@defun ask-user-about-supersession-threat filename
これは、visitしているファイル@var{filename}がバッファーのテキストより新しいときにバッファーの変更を試みた後、ユーザーに処理方法を尋ねるために使用する関数である。Emacsはディスク上のファイルの変更時刻が、バッファーを最後に保存した時刻より新しいかどうかで、これを検知する。これはおそらく、他のプログラムがそのファイルを変更したことを意味する。

@kindex file-supersession
この関数が正常にリターンするかどうかは、ユーザーの答えに依存する。関数はバッファーの変更が処理された場合は正常にリターンし、バッファーの変更が許可されなかった場合は、データ@code{(@var{filename})}とともにエラー@code{file-supersession}をシグナルする。

この関数は、適切なタイミングでEmacsにより自動的に呼び出される。これは、再定義することによりEmacsをカスタマイズ可能にするために存在する。標準的な定義は、ファイル@file{userlock.el}を参照されたい。

@ref{File Locks}のファイルロックのメカニズムも参照のこと。
@end defun

@node Read Only Buffers
@section Read-Only Buffers
@cindex read-only buffer
@cindex buffer, read-only

  あるバッファーが@dfn{読み取り専用(read-only)}の場合は、たとえスクロールやナローイングによってファイルのコンテンツのビューを変更しても、そのコンテンツを変更することはできません。

  読み取り専用バッファーは、2つのタイプの状況において使用されます:

@itemize @bullet
@item
書き込み保護されたファイルをvisitするバッファーは、通常は読み取り専用になる。

ここでの目的は、ユーザーにたいしてそのファイルへの保存を意図したバッファーの編集が無益、または望ましくないかもしれないことを伝えることである。それにも関わらずバッファーのテキストの変更を望むユーザーは、@kbd{C-x
C-q}で読み取り専用フラグをクリアーした後、これを行うことができる。

@item
DiredやRmailのようなモードは、通常の編集コマンドによるコンテンツの変更がおそらく間違いであるようなときに、バッファーを読み取り専用にする。

このようなモードのスペシャルコマンドは、@code{buffer-read-only}を(@code{let}により)@code{nil}にバインドしたり、テキストを変更する箇所では@code{inhibit-read-only}を@code{t}にバインドする。
@end itemize

@defvar buffer-read-only
このバッファーローカル変数は、そのバッファーが読み取り専用かどうかを指定する。この変数が非@code{nil}なら、そのバッファーは読み取り専用である。
@end defvar

@defvar inhibit-read-only
この変数が非@code{nil}の場合、読み取り専用バッファー、およびその実際の値に依存して、一部もしくはすべての読み取り専用文字が変更されている。バッファー内の読み取り専用文字とは、テキストプロパティ@code{read-only}が非@code{nil}の文字である。テキストプロパティについての詳細は、@ref{Special
Properties}を参照のこと。

@code{inhibit-read-only}が@code{t}の場合、すべての@code{read-only}文字プロパティは効果がなくなる。@code{inhibit-read-only}がリストの場合、@code{read-only}文字プロパティがリストのメンバーなら効果がなくなる(比較は@code{eq}で行われる)。
@end defvar

@deffn Command read-only-mode &optional arg
これは、バッファーローカルなマイナーモードである、Read
Onlyモードにたいするモードコマンドである。このモードが有効なときは、そのバッファーの@code{buffer-read-only}は非@code{nil}である。無効なときは、そのバッファーの@code{buffer-read-only}は@code{nil}である。呼び出す際の慣習は、他のマイナーモードコマンドの慣習と同じである(@ref{Minor
Mode Conventions}を参照)。

このマイナーモードは他のマイナーモードとは異なり、主に@code{buffer-read-only}にたいするラッパーの役目を果たし、別個に@code{read-only-mode}変数は存在しない。Read
Onlyモードが無効なときでも、@code{read-only}テキストプロパティが非@code{nil}の文字は読み取り専用のままである。一時的にすべての読み取り専用ステータスを無視するには、上述の@code{inhibit-read-only}をバインドすること。

Read
Onlyモードを有効にする際、このモードコマンドはオプション@code{view-read-only}が非@code{nil}なら、Viewモードも有効にする。@ref{Misc
Buffer,,Miscellaneous Buffer Operations, emacs, The GNU Emacs
Manual}を参照のこと。Read Onlyモードを無効にする際に、もしもViewモードが有効なら、Viewモードも無効にする。
@end deffn

@defun barf-if-buffer-read-only
この関数は、カレントバッファーが読み取り専用の場合は、@code{buffer-read-only}エラーをシグナルする。カレントバッファーが読み取り専用の場合にエラーをシグナルする他の方法については、@ref{Using
Interactive}を参照のこと。
@end defun

@node Buffer List
@section The Buffer List
@cindex buffer list
@cindex listing all buffers

  @dfn{バッファーリスト(buffer
list)}とは、すべての生きた(killされていない)バッファーのリストです。このリスト内のバッファーの順序は主に、それぞれのバッファーがウィンドウに表示されたのがどれほど最近なのかにもとづきます。いくつかの関数、特に@code{other-buffer}はこの順序を使用します。ユーザーに表示されるバッファーリストも、この順序にしたがいます。

  バッファーを作成すると、それはバッファーリストの最後に追加され
バッファーをkillすることにより、そのリストから削除されます。ウィンドウに表示するためにバッファーが選択されたとき(@ref{Switching
Buffers}を参照)、あるいはバッファーを表示するウィンドウが選択されたとき(@ref{Selecting
Windows}を参照)、そのバッファーは常にこのリストの先頭に移動します。バッファーがバリー(以下の@code{bury-buffer}を参照)されたときは、このリストの最後に移動します。バッファーリストを直接操作するために利用できる、Lispプログラマー向けの関数は存在しません。

  説明した基本バッファーリスト(fundamental buffer
list)に加えて、Emacsはそれぞれのフレームにたいしてローカルバッファーリスト(local buffer
list)を保守します。ローカルバッファーリストでは、そのフレーム内で表示されていた(または選択されたウィンドウの)バッファーが先頭になります(この順序は、そのフレームのフレームパラメーター@code{buffer-list}に記録される。@ref{Buffer
Parameters}を参照されたい)。そのフレームでは表示されていないフレームは後になるよう、並び順は基本バッファーリストに準じます。

@defun buffer-list &optional frame
この関数は、すべてのバッファーを含むバッファーリストをリターンする(名前がスペースで始まるバッファーも含む)。リストの要素はバッファーの名前ではなく、実際のバッファーである。

@var{frame}がフレームの場合は、@var{frame}のローカルバッファーリストをリターンする。@var{frame}が@code{nil}、または省略された場合は、基本バッファーリストが使用される。その場合、そのバッファーを表示するフレームがどれかとは無関係に、もっとも最近に表示、または選択されたバッファーの順になる。

@example
@group
(buffer-list)
     @result{} (#<buffer buffers.texi>
         #<buffer  *Minibuf-1*> #<buffer buffer.c>
         #<buffer *Help*> #<buffer TAGS>)
@end group

@group
;; @r{ミニバッファーの名前が}
;;   @r{スペースで始まることに注意!}
(mapcar (function buffer-name) (buffer-list))
    @result{} ("buffers.texi" " *Minibuf-1*"
        "buffer.c" "*Help*" "TAGS")
@end group
@end example
@end defun

  @code{buffer-list}からリターンされるリストは、それ専用に構築されたリストであり、Emacsの内部的なデータ構造ではないし、それを変更してもバッファーの並び順に影響はありません。基本バッファーリスト内のバッファーの並び順を変更したい場合に簡単なのは、以下の方法です:

@example
(defun reorder-buffer-list (new-list)
  (while new-list
    (bury-buffer (car new-list))
    (setq new-list (cdr new-list))))
@end example

  この方法により、バッファーを失ったり、有効な生きたバッファー以外の何かを追加する危険を犯さずに、リストに任意の並び順を指定できます。

  特定のフレームのバッファーリストの並び順や値を変更するには、@code{modify-frame-parameters}でそのフレームの@code{buffer-list}パラメーターをセットしてください(@ref{Parameter
Access}を参照)。

@defun other-buffer &optional buffer visible-ok frame
この関数は、バッファーリスト中で@var{buffer}以外の最初のバッファーをリターンする。これは通常選択されたウィンドウ(フレーム@var{frame}、または選択されたフレーム。@ref{Input
Focus}を参照)に、もっとも最近表示された、@var{buffer}以外のバッファーである。名前がスペースで始まるバッファーは、考慮されない。

@var{buffer}が与えられない(または生きたバッファーでない)場合、@code{other-buffer}は選択されたフレームのローカルバッファーリスト内の、最初のバッファーをリターンする(@var{frame}が非@code{nil}の場合は、@var{frame}のローカルバッファーリスト内の最初のバッファーをリターンする)。

@var{frame}が非@code{nil}の@code{buffer-predicate}パラメーターをもつ場合は、どのバッファーを考慮すべきかを決定するために、@code{other-buffer}はその述語を使用する。これはそれぞれのバッファーごとにその述語を一度呼び出して、値が@code{nil}ならそのバッファーは無視される。@ref{Buffer
Parameters}を参照のこと。

@c Emacs 19 feature
@var{visible-ok}が@code{nil}ならば、@code{other-buffer}はやむを得ない場合を除き、任意の可視のフレーム上のウィンドウ内で可視のバッファーをリターンすることを避ける。@var{visible-ok}が非@code{nil}の場合は、バッファーがどこかで表示されているかどうかは問題にしない。

適切なバッファーが存在しない場合は、バッファー@file{*scratch*}を(必要なら作成して)リターンする。
@end defun

@defun last-buffer &optional buffer visible-ok frame
この関数は、@var{frame}のバッファーリスト内から、@var{buffer}以外の最後のバッファーをリターンする。@var{frame}が省略、または@code{nil}の場合は、選択されたフレームのバッファーリストを使用する。

引数@var{visible-ok}は、上述した@code{other-buffer}と同様に扱われる。適切なバッファーを見つけられない場合は、バッファー@file{*scratch*}がリターンされる。
@end defun

@deffn Command bury-buffer &optional buffer-or-name
このコマンドは、バッファーリスト内の他のバッファーの並び順を変更することなく、@var{buffer-or-name}をバッファーリストの最後に置く。つまり、このバッファーは@code{other-buffer}がリターンする候補で、もっとも期待度が低くなる。引数はバッファー自身か、バッファーの名前を指定できる。

この関数は、基本バッファーリストと同様に、それぞれのフレームの@code{buffer-list}パラメーターを操作する。したがってバリー(bury:
埋める、隠す)したバッファーは、@code{(buffer-list
@var{frame})}および@code{(buffer-list)}の値の最後に置かれるだろう。さらに、そのバッファーが選択されたウィンドウに表示されていれば、そのウィンドウのバッファーリストの最後にバッファーを置くことも行う(@ref{Window
History}を参照)。

@var{buffer-or-name}が@code{nil}、または省略された場合は、カレントバッファーをバリーすることを意味する。加えて、カレントバッファーが選択されたウィンドウに表示されている場合は、そのウィンドウを削除するか、他のバッファーを表示する。より正確には、選択されたウィンドウが専用(dedicated)のウィンドウ(@pxref{Dedicated
Windows})であり、かつそのフレーム上に他のウィンドウが存在する場合、専用ウィンドウは削除される。それがフレーム上で唯一のウィンドウであり、かつそのフレームが端末上で唯一のフレームでない場合、そのフレームは@code{frame-auto-hide-function}で指定される関数を呼び出すことにより、``開放''される(@ref{Quitting
Windows}を参照)。それ以外の場合は、他のバッファーをそのウィンドウ内に表示するために、@code{switch-to-prev-buffer}を呼び出す(@ref{Window
History}を参照)。@var{buffer-or-name}が他のウィンドウで表示されていた場合は、そのまま表示され続ける。

あるバッファーにたいして、それを表示するすべてのウィンドウでバッファーを置き換えるには、@code{replace-buffer-in-windows}を使用する。@ref{Buffers
and Windows}を参照のこと。
@end deffn

@deffn Command unbury-buffer
このコマンドは、選択されたフレームのローカルバッファーリストの最後のバッファーに切り替える。より正確には、選択されたウィンドウ内で、@code{last-buffer}(上記参照)がリターンするバッファーを表示するために、関数@code{switch-to-buffer}を呼び出す(@ref{Switching
Buffers}を参照)。
@end deffn

@defvar buffer-list-update-hook
これは、バッファーリストが変更されたときは、常に実行されるノーマルフックである。(暗黙的に)このフックを実行する関数は@code{get-buffer-create}(@ref{Creating
Buffers}を参照)、@code{rename-buffer}(@ref{Buffer
Names}を参照)、@code{kill-buffer}(@ref{Killing
Buffers}を参照)、@code{bury-buffer}(上記参照)、@code{select-window}(@ref{Selecting
Windows}を参照)である。
@end defvar

@node Creating Buffers
@section Creating Buffers
@cindex creating buffers
@cindex buffers, creating

  このセクションでは、バッファーを作成する2つのプリミティブについて説明します。@code{get-buffer-create}は、指定された名前の既存バッファーが見つからない場合は作成します。@code{generate-new-buffer}は、常に新たにバッファーを作成して、それに一意な名前を与えます。

  バッファーを作成するために使用できる他の関数には、@code{with-output-to-temp-buffer}(@ref{Temporary
Displays}を参照)、および@code{create-file-buffer}(@ref{Visiting
Files}を参照)が含まれます。サブプロセスの開始によっても、バッファーを作成することができます(@ref{Processes}を参照)。

@defun get-buffer-create buffer-or-name
この関数は、@var{buffer-or-name}という名前のバッファーをリターンする。リターンされたバッファーはカレントにならない ---
この関数はカレントがどのバッファーであるかを変更しない。

@var{buffer-or-name}は文字列、または既存バッファーのいずれかでなければならない。これが文字列で、かつ既存の生きたバッファーの名前の場合、@code{get-buffer-create}はそのバッファーをリターンする。そのようなバッファーが存在しなければ、新たにバッファーを作成する。@var{buffer-or-name}が文字列ではなくバッファーの場合、たとえそのバッファーが生きていなくても、与えられたバッファーをリターンする。

@example
@group
(get-buffer-create "foo")
     @result{} #<buffer foo>
@end group
@end example

新たに作成されたバッファーにたいするメジャーモードは、Fundamentalモードにセットされる(変数@code{major-mode}のデフォルト値は、より高いレベルで処理される。@ref{Auto
Major
Mode}を参照されたい)。名前がスペースで始まる場合、そのバッファーのアンドゥ情報の記録は、初期状態では無効である(@ref{Undo}を参照)。
@end defun

@defun generate-new-buffer name
この関数は、新たに空のバッファーを作成してリターンするが、それをカレントにはしない。バッファーの名前は、関数@code{generate-new-buffer-name}に@var{name}を渡すことにより生成される(@ref{Buffer
Names}を参照)。つまり、@var{name}という名前のバッファーが存在しなければ、それが新たなバッファーの名前になり、その名前が使用されていた場合は、@samp{<@var{n}>}という形式のサフィックスが@var{name}に追加される。ここで@var{n}は整数である。

@var{name}が文字列でない場合は、エラーがシグナルされる。

@example
@group
(generate-new-buffer "bar")
     @result{} #<buffer bar>
@end group
@group
(generate-new-buffer "bar")
     @result{} #<buffer bar<2>>
@end group
@group
(generate-new-buffer "bar")
     @result{} #<buffer bar<3>>
@end group
@end example

新たなバッファーにたいするメジャーモードは、Fundamentalモードにセットされる。変数@code{major-mode}のデフォルト値は、より高いレベルで処理される。@ref{Auto
Major Mode}を参照のこと。
@end defun

@node Killing Buffers
@section Killing Buffers
@cindex killing buffers
@cindex buffers, killing

  @dfn{バッファーのkill}により、
そのバッファーの名前はEmacsにとって未知の名前となり、そのバッファーが占めていたメモリースペースは、他の用途に使用できるようになります。

  バッファーに対応するバッファーオブジェクトは、それを参照するものがあればkillされても存在し続けますが、それをカレントにしたり表示することができないよう、特別にマークされます。とはいえ、killされたバッファーの同一性は保たれるので、2つの識別可能なバッファーをkillした場合、たとえ両方死んだバッファーであっても、@code{eq}による同一性は残ります。

  あるウィンドウ内においてカレント、あるいは表示されているバッファーをkillした場合、Emacsはかわりに他の何らかのバッファーを自動的に選択、または表示します。これは、バッファーのkillにより、カレントバッファーが変更されることを意味します。したがって、バッファーをkillする際は、(killされるバッファーがカレントを偶然知っていた場合を除き)カレントバッファーの変更に関しても、事前に注意を払うべきです。@ref{Current
Buffer}を参照してください。

  1つ以上のインダイレクト
@iftex
バッファー
@end iftex
@ifnottex
バッファー(@ref{Indirect Buffers}を参照)
@end ifnottex
のベースとなるバッファーをkillした場合は、インダイレクトバッファーも同様に自動的にkillされます。

@cindex live buffer
  バッファーの@code{buffer-name}が@code{nil}の場合のみ、バッファーはkillされる。killされていないバッファーは@dfn{生きた(live)}バッファーと呼ばれる。あるバッファーにたいして、そのバッファーが生きているか、またはkillされているかを確認するには、@code{buffer-live-p}を使用する(下記参照)。

@deffn Command kill-buffer &optional buffer-or-name
この関数は、バッファー@var{buffer-or-name}をkillして、そのバッファーのメモリーを他の用途のために開放、またはオペレーティングシステムに返却する。@var{buffer-or-name}が@code{nil}、または省略された場合は、カレントバッファーをkillする。

そのバッファーを@code{process-buffer}として所有するすべてのプロセスには、通常はプロセスを終了させるシグナル@code{SIGHUP}(``hangup'')が送信される。@ref{Signals
to Processes}を参照のこと。

バッファーがファイルをvisitしていて、かつ保存されていない変更が含まれる場合、@code{kill-buffer}はバッファーをkillする前に、ユーザーにたいして確認を求める。これは、@code{kill-buffer}がinteractiveに呼び出されていなくても、行われる。この確認要求を抑制するには、@code{kill-buffer}の呼び出し前に、変更フラグ(modified
flag)をクリアーすればよい。@ref{Buffer Modification}を参照のこと。

killされるバッファーをカレントで表示しているすべてのバッファーをクリーンアップするために、この関数は@code{replace-buffer-in-windows}を呼び出す。

すでに死んでいるバッファーをkillしても、効果はない。

この関数は、実際にバッファーをkillした場合は、@code{t}をリターンする。ユーザーが確認で拒否を選択、または@var{buffer-or-name}がすでに死んでいる場合は、@code{nil}をリターンする。

@smallexample
(kill-buffer "foo.unchanged")
     @result{} t
(kill-buffer "foo.changed")

---------- Buffer: Minibuffer ----------
Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}
---------- Buffer: Minibuffer ----------

     @result{} t
@end smallexample
@end deffn

@defvar kill-buffer-query-functions
保存されていない変更について確認を求める前に、@code{kill-buffer}はリスト@code{kill-buffer-query-functions}内の関数を、出現順に引数なしで呼び出す。
Before confirming unsaved changes,  calls the functions in the list , in
order of appearance, with no arguments.
それらが呼び出される際には、killされるバッファーがカレントになる。この機能は、これらの関数がユーザーに確認を求めるというアイデアが元となっている。これらの関数のいずれかが@code{nil}をリターンした場合、@code{kill-buffer}はそのバッファーの命を奪わない。
@end defvar

@defvar kill-buffer-hook
これは、尋ねることになっている質問をすべて終えた後、実際にバッファーをkillする直前に、@code{kill-buffer}により実行されるノーマルフックである。この変数は永続的にローカルであり、メジャーモードの変更により、そのローカルバインディングはクリアーされない。
@end defvar

@defopt buffer-offer-save
特定のバッファーにおいてこの変数が非@code{nil}の場合、@code{save-buffers-kill-emacs}および@code{save-some-buffers}(この関数の2つ目のオプション引数が@code{t}の場合)は、ファイルをvisitしているバッファーと同じように、そのバッファーの保存を提案する。@ref{Definition
of
save-some-buffers}を参照のこと。何らかの理由により変数@code{buffer-offer-save}をセットする際は、自動的にバッファーローカルになる。@ref{Buffer-Local
Variables}を参照のこと。
@end defopt

@defvar buffer-save-without-query
特定のバッファーにおいてこの変数が非@code{nil}の場合、@code{save-buffers-kill-emacs}および@code{save-some-buffers}は、(バッファーが変更されていれば)ユーザーに確認を求めることなく、そのバッファーを保存する。何らかの理由によりこの変数をセットする際は、自動的にバッファーローカルになる。
@end defvar

@defun buffer-live-p object
この関数は、@var{object}が生きたバッファー(killされていないバッファー)なら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@node Indirect Buffers
@section Indirect Buffers
@cindex indirect buffers
@cindex base buffer

  @dfn{インダイレクトバッファー(indirect buffer: 間接バッファー)}とは、@dfn{ベースバッファー(base
buffer)}と呼ばれる他のバッファーとテキストを共有します。いくつかの点において、インダイレクトバッファーはファイル間でのシンボリックリンクに類似しています。ベースバッファー自身は、インダイレクトバッファーでない可能性があります。

  インダイレクトバッファーのテキストは、常にベースバッファーのテキストと同一です。編集により一方が変更されると、それは即座に他方のバッファーから可視になります。これには文字自体に加えて、テキストプロパティも同様に含まれます。

  他のすべての観点において、インダイレクトバッファーとそのベースバッファーは、完全に別物です。それらは別の名前、独自のポイント値、ナローイング、マーカー、オーバーレイ、メジャーモード、バッファーローカルな変数バインディングをもちます(ただし、どちらかのバッファーでのテキストの挿入や削除を行うと、両方のバッファーでマーカーとオーバーレイの再配置が行われる)。

  インダイレクトバッファーはファイルをvisitできませんが、ベースバッファーは可能です。インダイレクトバッファーの保存を試みた場合、実際にはベースバッファーが保存されます。

  インダイレクトバッファーをkillしても、ベースバッファーに影響はありません。ベースバッファーをkillすると、インダイレクトバッファーはkillされて、再びカレントバッファーになることはできません。

@deffn Command make-indirect-buffer base-buffer name &optional clone
これは、ベースバッファーが@var{base-buffer}であるような、@var{name}という名前のインダイレクトバッファーを作成してリターンする。引数@var{base-buffer}は生きたバッファー、または既存バッファーの名前(文字列)を指定できる。@var{name}が既存バッファーの名前の場合は、エラーがシグナルされる。

@var{clone}が非@code{nil}の場合、インダイレクトバッファーは最初は@var{base-buffer}のメジャーモード、マイナーモード、バッファーローカル変数等の``状態''を共有する。@var{clone}が省略、または@code{nil}の場合、インダイレクトバッファーの情報は、新たなバッファーにたいするデフォルト状態にセットされる。

@var{base-buffer}がインダイレクトバッファーの場合は、新たなバッファーのベースとして、それのベースバッファーが使用される。さらに、@var{clone}が非@code{nil}ならば、初期状態は@var{base-buffer}ではなく、実際のベースバッファーからコピーされる。
@end deffn

@deffn Command clone-indirect-buffer newname display-flag &optional norecord
この関数は、カレントバッファーのベースバッファーを共有するインダイレクトバッファーを新たに作成し、カレントバッファーの残りの属性をコピーしてリターンする(カレントバッファーがインダイレクトバッファーでない場合は、それがベースバッファーとして使用される)。

@var{display-flag}が非@code{nil}の場合、それは@code{pop-to-buffer}を呼び出すことにより新しいバッファーを表示することを意味する。@var{norecord}が非@code{nil}の場合、それは新しいバッファーをバッファーリストの先頭に置かないことを意味する。
@end deffn

@defun buffer-base-buffer &optional buffer
この関数は、@var{buffer}(デフォルトはカレントバッファー)のベースバッファーをリターンする。@var{buffer}がインダイレクトバッファーでない場合、値は@code{nil}になり、それ以外では値は他のバッファーとなり、このバッファーがインダイレクトバッファーではあり得ない。
@end defun

@node Swapping Text
@section Swapping Text Between Two Buffers
@cindex swap text between buffers
@cindex virtual buffers

  特別なモードでは、ユーザーが同一のバッファーから複数の非常に異なったテキストにアクセスできるようにしなければならない場合があります。たとえば、バッファーのテキストのサマリーを表示して、ユーザーがそのテキストにアクセスできるようにする場合です。

  これは、(ユーザーがテキストを編集した際には同期を保つ)複数バッファーや、ナローイング(@ref{Narrowing}を参照)により実装することができるかもしれません。しかし、これらの候補案はときに退屈になりがちであり、特にそれぞれのテキストタイプが正しい表示と編集コマンドを提供するために高価なバッファーグローバル操作を要求する場合には、飛び抜けて高価になる場合があります。

  Emacsは、そのようなモードにたいする、別の機能を提供します。@code{buffer-swap-text}を使用すれば、2つのバッファー間でバッファーテキストを素早く交換することができます。この関数は、テキストの移動は行わず、異なるテキスト塊(text
chunk)をポイントするように、バッファーオブジェクトの内部的なデータ構造だけを変更するので、非常に高速です。これを使用することにより、2つ以上のバッファーグループから、個々のバッファーのコンテンツすべてを併せもつような、単一の仮想バッファー(virtual
buffer)が実在するように、見せかけることができます。

@defun buffer-swap-text buffer
この関数は、カレントバッファーのテキストと、引数@var{buffer}のテキストを交換する。2つのバッファーのいずれか一方がインダイレクトバッファー(@ref{Indirect
Buffers}を参照)、またはインダイレクトバッファーのベースバッファーの場合は、エラーをシグナルする。

バッファーテキストに関連するすべてのバッファープロパティ、つまりポイントとマークの位置、すべてのマーカーとオーバーレイ、テキストプロパティ、アンドゥリスト、@code{enable-multibyte-characters}フラグの値(@ref{Text
Representations, enable-multibyte-characters}を参照)等も、同じように交換される。
@end defun

  ファイルをvisitしているバッファーに@code{buffer-swap-text}を使用した場合は、交換されたテキストではなく、そのバッファーの元のテキストを保存するようにフックをセットアップするべきです。@code{write-region-annotate-functions}は、正にこの目的のために機能します。そのバッファーの@code{buffer-saved-size}を、おそらく交換されたテキストにたいする変更が自動保存に干渉しないであろう、@minus{}2にセットするべきでしょう。

@node Buffer Gap
@section The Buffer Gap
@cindex buffer gap

  Emacsのバッファーは、挿入と削除を高速にするために、不可視の@dfn{ギャップ(gap)}を使用して実装されています。挿入はギャップ部分を充填し、削除はギャップを追加することにより機能します。もちろん、これは最初にギャップを挿入もしくは削除の部位(locus)に移動しなければならないことを意味します。Emacsは、ユーザーが挿入、または削除を試みたときだけ、ギャップを移動します。大きなバッファー内の遠く離れた位置で編集した後、他の箇所での最初の編集コマンドに無視できない遅延が発生する場合があるのは、これが理由です。

  このメカニズムは暗に機能するものであり、Lispコードはギャップのカレント位置に影響されるべきでは決してありませんが、以下の関数はギャップ状態に関する情報の取得に利用できます。

@defun gap-position
この関数は、カレントバッファー内のギャップのカレント位置をリターンする。
@end defun

@defun gap-size
この関数は、カレントバッファー内のギャップのサイズをリターンする。
@end defun
