# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-07-04 00:24+0900\n"
"PO-Revision-Date: 2018-07-04 18:20+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: buffers.texi.orig:6 buffers.texi.orig:7
#, no-wrap
msgid "Buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:8
#, no-wrap
msgid "buffer"
msgstr "buffer"

#. type: Plain text
#: buffers.texi.orig:17
msgid "A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are used to hold the contents of files that are being visited; there may also be buffers that are not visiting files.  While several buffers may exist at one time, only one buffer is designated the @dfn{current buffer} at any time.  Most editing commands act on the contents of the current buffer.  Each buffer, including the current buffer, may or may not be displayed in any windows."
msgstr "@dfn{バッファー(buffer)}とは、編集されるテキストを含むLispオブジェクトのことです。バッファーは、visitされるファイルを保持するために使用されます。しかし、ファイルをvisitしないバッファーも存在するかもしれません。一度に複数のバッファーが存在するかもしれませんが、@dfn{カレントバッファー(current buffer)}に指定できるのは、常に1つのバッファーだけです。ほとんどの編集コマンドは、カレントバッファーのコンテンツにたいして作用します。カレントバッファーを含むすべてのバッファーは、任意のウィンドウ内に表示されるときも、表示されない場合もあります。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:36 buffers.texi.orig:37
#, no-wrap
msgid "Buffer Basics"
msgstr "Buffer Basics"

#. type: menuentry
#: buffers.texi.orig:34
msgid "What is a buffer?"
msgstr "バッファーとは?"

#. type: node
#: buffers.texi.orig:34 buffers.texi.orig:80
#, no-wrap
msgid "Current Buffer"
msgstr "Current Buffer"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Designating a buffer as current so that primitives will access its contents."
msgstr "バッファーをカレントに指定することにより、プリミティブはバッファーのコンテンツにアクセスする。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:247 buffers.texi.orig:248
#, no-wrap
msgid "Buffer Names"
msgstr "Buffer Names"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Accessing and changing buffer names."
msgstr "バッファー名にたいするアクセスと変更。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:366 buffers.texi.orig:367
#, no-wrap
msgid "Buffer File Name"
msgstr "Buffer File Name"

#. type: menuentry
#: buffers.texi.orig:34
msgid "The buffer file name indicates which file is visited."
msgstr "バッファーファイル名は、どのファイルをvisitしているかを示す。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:514 buffers.texi.orig:515
#, no-wrap
msgid "Buffer Modification"
msgstr "Buffer Modification"

#. type: menuentry
#: buffers.texi.orig:34
msgid "A buffer is @dfn{modified} if it needs to be saved."
msgstr "保存が必要なら、バッファーは@dfn{変更されている(modified)}。"

#. type: node
#: buffers.texi.orig:34 buffers.texi.orig:590
#, no-wrap
msgid "Modification Time"
msgstr "Modification Time"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Determining whether the visited file was changed \"behind Emacs's back\"."
msgstr "\"Emacsの裏\"でvisitされているファイルが変更されたかどうかを判断する。"

#. type: node
#: buffers.texi.orig:34 buffers.texi.orig:688
#, no-wrap
msgid "Read Only Buffers"
msgstr "Read Only Buffers"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Modifying text is not allowed in a read-only buffer."
msgstr "読み取り専用バッファーでのテキスト変更は許されない。"

#. type: node
#: buffers.texi.orig:34 buffers.texi.orig:762
#, no-wrap
msgid "Buffer List"
msgstr "Buffer List"

#. type: menuentry
#: buffers.texi.orig:34
msgid "How to look at all the existing buffers."
msgstr "すべての既存バッファーを閲覧する方法。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:922 buffers.texi.orig:923
#, no-wrap
msgid "Creating Buffers"
msgstr "Creating Buffers"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Functions that create buffers."
msgstr "バッファーを作成する関数。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:992 buffers.texi.orig:993
#, no-wrap
msgid "Killing Buffers"
msgstr "Killing Buffers"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Buffers exist until explicitly killed."
msgstr "明示的にkillされるまで、バッファーは存在する。"

#. type: section
#: buffers.texi.orig:34 buffers.texi.orig:1105 buffers.texi.orig:1106
#, no-wrap
msgid "Indirect Buffers"
msgstr "Indirect Buffers"

#. type: menuentry
#: buffers.texi.orig:34
msgid "An indirect buffer shares text with some other buffer."
msgstr "インダイレクトバッファーは、他のバッファーとテキストを共有する。"

#. type: node
#: buffers.texi.orig:34 buffers.texi.orig:1172
#, no-wrap
msgid "Swapping Text"
msgstr "Swapping Text"

#. type: menuentry
#: buffers.texi.orig:34
msgid "Swapping text between two buffers."
msgstr "2つのバッファー間でのテキストの交換。"

#. type: node
#: buffers.texi.orig:34 buffers.texi.orig:1217
#, no-wrap
msgid "Buffer Gap"
msgstr "Buffer Gap"

#. type: menuentry
#: buffers.texi.orig:34
msgid "The gap in the buffer."
msgstr "バッファー内のギャップ。"

#. type: ifnottex
#: buffers.texi.orig:47
msgid "A @dfn{buffer} is a Lisp object containing text to be edited.  Buffers are used to hold the contents of files that are being visited; there may also be buffers that are not visiting files.  Although several buffers normally exist, only one buffer is designated the @dfn{current buffer} at any time.  Most editing commands act on the contents of the current buffer.  Each buffer, including the current buffer, may or may not be displayed in any windows."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:54
msgid "Buffers in Emacs editing are objects that have distinct names and hold text that can be edited.  Buffers appear to Lisp programs as a special data type.  You can think of the contents of a buffer as a string that you can extend; insertions and deletions may occur in any part of the buffer.  @xref{Text}."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:61
msgid "A Lisp buffer object contains numerous pieces of information.  Some of this information is directly accessible to the programmer through variables, while other information is accessible only through special-purpose functions.  For example, the visited file name is directly accessible through a variable, while the value of point is accessible only through a primitive function."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:69
msgid "Buffer-specific information that is directly accessible is stored in @dfn{buffer-local} variable bindings, which are variable values that are effective only in a particular buffer.  This feature allows each buffer to override the values of certain variables.  Most major modes override variables such as @code{fill-column} or @code{comment-column} in this way.  For more information about buffer-local variables and functions related to them, see @ref{Buffer-Local Variables}."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:74
msgid "For functions and variables related to visiting files in buffers, see @ref{Visiting Files} and @ref{Saving Buffers}.  For functions and variables related to the display of buffers in windows, see @ref{Buffers and Windows}."
msgstr ""

#. type: defun
#: buffers.texi.orig:75
#, no-wrap
msgid "bufferp object"
msgstr ""

#. type: defun
#: buffers.texi.orig:78
msgid "This function returns @code{t} if @var{object} is a buffer, @code{nil} otherwise."
msgstr ""

#. type: section
#: buffers.texi.orig:81
#, no-wrap
msgid "The Current Buffer"
msgstr ""

#. type: cindex
#: buffers.texi.orig:82
#, no-wrap
msgid "selecting a buffer"
msgstr ""

#. type: cindex
#: buffers.texi.orig:83
#, no-wrap
msgid "changing to another buffer"
msgstr ""

#. type: cindex
#: buffers.texi.orig:84
#, no-wrap
msgid "current buffer"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:91
msgid "There are, in general, many buffers in an Emacs session.  At any time, one of them is designated the @dfn{current buffer}---the buffer in which most editing takes place.  Most of the primitives for examining or changing text operate implicitly on the current buffer (@pxref{Text})."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:97
msgid "Normally, the buffer displayed in the selected window is the current buffer, but this is not always so: a Lisp program can temporarily designate any buffer as current in order to operate on its contents, without changing what is displayed on the screen.  The most basic function for designating a current buffer is @code{set-buffer}."
msgstr ""

#. type: defun
#: buffers.texi.orig:98
#, no-wrap
msgid "current-buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:100
msgid "This function returns the current buffer."
msgstr ""

#. type: group
#: buffers.texi.orig:105
#, no-wrap
msgid ""
"(current-buffer)\n"
"     @result{} #<buffer buffers.texi>\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:109
#, no-wrap
msgid "set-buffer buffer-or-name"
msgstr ""

#. type: defun
#: buffers.texi.orig:113
msgid "This function makes @var{buffer-or-name} the current buffer.  @var{buffer-or-name} must be an existing buffer or the name of an existing buffer.  The return value is the buffer made current."
msgstr ""

#. type: defun
#: buffers.texi.orig:117
msgid "This function does not display the buffer in any window, so the user cannot necessarily see the buffer.  But Lisp programs will now operate on it."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:127
msgid "When an editing command returns to the editor command loop, Emacs automatically calls @code{set-buffer} on the buffer shown in the selected window.  This is to prevent confusion: it ensures that the buffer that the cursor is in, when Emacs reads a command, is the buffer to which that command applies (@pxref{Command Loop}).  Thus, you should not use @code{set-buffer} to switch visibly to a different buffer; for that, use the functions described in @ref{Switching Buffers}."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:134
msgid "When writing a Lisp function, do @emph{not} rely on this behavior of the command loop to restore the current buffer after an operation.  Editing commands can also be called as Lisp functions by other programs, not just from the command loop; it is convenient for the caller if the subroutine does not change which buffer is current (unless, of course, that is the subroutine's purpose)."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:138
msgid "To operate temporarily on another buffer, put the @code{set-buffer} within a @code{save-current-buffer} form.  Here, as an example, is a simplified version of the command @code{append-to-buffer}:"
msgstr ""

#. type: group
#: buffers.texi.orig:148
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append the text of the region to BUFFER.\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (save-current-buffer\n"
"      (set-buffer (get-buffer-create buffer))\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:157
msgid "Here, we bind a local variable to record the current buffer, and then @code{save-current-buffer} arranges to make it current again later.  Next, @code{set-buffer} makes the specified buffer current, and @code{insert-buffer-substring} copies the string from the original buffer to the specified (and now current) buffer."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:159
msgid "Alternatively, we can use the @code{with-current-buffer} macro:"
msgstr ""

#. type: group
#: buffers.texi.orig:168
#, no-wrap
msgid ""
"(defun append-to-buffer (buffer start end)\n"
"  \"Append the text of the region to BUFFER.\"\n"
"  (interactive \"BAppend to buffer: \\nr\")\n"
"  (let ((oldbuf (current-buffer)))\n"
"    (with-current-buffer (get-buffer-create buffer)\n"
"      (insert-buffer-substring oldbuf start end))))\n"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:176
msgid "In either case, if the buffer appended to happens to be displayed in some window, the next redisplay will show how its text has changed.  If it is not displayed in any window, you will not see the change immediately on the screen.  The command causes the buffer to become current temporarily, but does not cause it to be displayed."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:182
msgid "If you make local bindings (with @code{let} or function arguments)  for a variable that may also have buffer-local bindings, make sure that the same buffer is current at the beginning and at the end of the local binding's scope.  Otherwise you might bind it in one buffer and unbind it in another!"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:187
msgid "Do not rely on using @code{set-buffer} to change the current buffer back, because that won't do the job if a quit happens while the wrong buffer is current.  For instance, in the previous example, it would have been wrong to do this:"
msgstr ""

#. type: group
#: buffers.texi.orig:194
#, no-wrap
msgid ""
"  (let ((oldbuf (current-buffer)))\n"
"    (set-buffer (get-buffer-create buffer))\n"
"    (insert-buffer-substring oldbuf start end)\n"
"    (set-buffer oldbuf))\n"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:201
msgid "Using @code{save-current-buffer} or @code{with-current-buffer}, as we did, correctly handles quitting, errors, and @code{throw}, as well as ordinary evaluation."
msgstr ""

#. type: defspec
#: buffers.texi.orig:202
#, no-wrap
msgid "save-current-buffer body@dots{}"
msgstr ""

#. type: defspec
#: buffers.texi.orig:208
msgid "The @code{save-current-buffer} special form saves the identity of the current buffer, evaluates the @var{body} forms, and finally restores that buffer as current.  The return value is the value of the last form in @var{body}.  The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defspec
#: buffers.texi.orig:213
msgid "If the buffer that used to be current has been killed by the time of exit from @code{save-current-buffer}, then it is not made current again, of course.  Instead, whichever buffer was current just before exit remains current."
msgstr ""

#. type: defmac
#: buffers.texi.orig:215
#, no-wrap
msgid "with-current-buffer buffer-or-name body@dots{}"
msgstr ""

#. type: defmac
#: buffers.texi.orig:220
msgid "The @code{with-current-buffer} macro saves the identity of the current buffer, makes @var{buffer-or-name} current, evaluates the @var{body} forms, and finally restores the current buffer.  @var{buffer-or-name} must specify an existing buffer or the name of an existing buffer."
msgstr ""

#. type: defmac
#: buffers.texi.orig:224
msgid "The return value is the value of the last form in @var{body}.  The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defmac
#: buffers.texi.orig:226
#, no-wrap
msgid "with-temp-buffer body@dots{}"
msgstr ""

#. type: anchor{#1}
#: buffers.texi.orig:235
msgid "Definition of with-temp-buffer"
msgstr ""

#. type: defmac
#: buffers.texi.orig:235
msgid "The @code{with-temp-buffer} macro evaluates the @var{body} forms with a temporary buffer as the current buffer.  It saves the identity of the current buffer, creates a temporary buffer and makes it current, evaluates the @var{body} forms, and finally restores the previous current buffer while killing the temporary buffer.  By default, undo information (@pxref{Undo}) is not recorded in the buffer created by this macro (but @var{body} can enable that, if needed)."
msgstr ""

#. type: defmac
#: buffers.texi.orig:239
msgid "The return value is the value of the last form in @var{body}.  You can return the contents of the temporary buffer by using @code{(buffer-string)} as the last form."
msgstr ""

#. type: defmac
#: buffers.texi.orig:242
msgid "The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defmac
#: buffers.texi.orig:245
msgid "See also @code{with-temp-file} in @ref{Definition of with-temp-file,, Writing to Files}."
msgstr ""

#. type: cindex
#: buffers.texi.orig:249
#, no-wrap
msgid "buffer names"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:257
msgid "Each buffer has a unique name, which is a string.  Many of the functions that work on buffers accept either a buffer or a buffer name as an argument.  Any argument called @var{buffer-or-name} is of this sort, and an error is signaled if it is neither a string nor a buffer.  Any argument called @var{buffer} must be an actual buffer object, not a name."
msgstr ""

#. type: cindex
#: buffers.texi.orig:258
#, no-wrap
msgid "hidden buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:259
#, no-wrap
msgid "buffers without undo information"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:266
msgid "Buffers that are ephemeral and generally uninteresting to the user have names starting with a space, so that the @code{list-buffers} and @code{buffer-menu} commands don't mention them (but if such a buffer visits a file, it @strong{is} mentioned).  A name starting with space also initially disables recording undo information; see @ref{Undo}."
msgstr ""

#. type: defun
#: buffers.texi.orig:267
#, no-wrap
msgid "buffer-name &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:270
msgid "This function returns the name of @var{buffer} as a string.  @var{buffer} defaults to the current buffer."
msgstr ""

#. type: defun
#: buffers.texi.orig:273
msgid "If @code{buffer-name} returns @code{nil}, it means that @var{buffer} has been killed.  @xref{Killing Buffers}."
msgstr ""

#. type: group
#: buffers.texi.orig:278
#, no-wrap
msgid ""
"(buffer-name)\n"
"     @result{} \"buffers.texi\"\n"
msgstr ""

#. type: group
#: buffers.texi.orig:283
#, no-wrap
msgid ""
"(setq foo (get-buffer \"temp\"))\n"
"     @result{} #<buffer temp>\n"
msgstr ""

#. type: group
#: buffers.texi.orig:287
#, no-wrap
msgid ""
"(kill-buffer foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: buffers.texi.orig:291
#, no-wrap
msgid ""
"(buffer-name foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: buffers.texi.orig:295
#, no-wrap
msgid ""
"foo\n"
"     @result{} #<killed buffer>\n"
msgstr ""

#. type: deffn
#: buffers.texi.orig:299
#, no-wrap
msgid "Command rename-buffer newname &optional unique"
msgstr ""

#. type: deffn
#: buffers.texi.orig:302
msgid "This function renames the current buffer to @var{newname}.  An error is signaled if @var{newname} is not a string."
msgstr ""

#. type: deffn
#: buffers.texi.orig:309
msgid "Ordinarily, @code{rename-buffer} signals an error if @var{newname} is already in use.  However, if @var{unique} is non-@code{nil}, it modifies @var{newname} to make a name that is not in use.  Interactively, you can make @var{unique} non-@code{nil} with a numeric prefix argument.  (This is how the command @code{rename-uniquely} is implemented.)"
msgstr ""

#. type: deffn
#: buffers.texi.orig:311
msgid "This function returns the name actually given to the buffer."
msgstr ""

#. type: defun
#: buffers.texi.orig:313
#, no-wrap
msgid "get-buffer buffer-or-name"
msgstr ""

#. type: defun
#: buffers.texi.orig:319
msgid "This function returns the buffer specified by @var{buffer-or-name}.  If @var{buffer-or-name} is a string and there is no buffer with that name, the value is @code{nil}.  If @var{buffer-or-name} is a buffer, it is returned as given; that is not very useful, so the argument is usually a name.  For example:"
msgstr ""

#. type: group
#: buffers.texi.orig:324
#, no-wrap
msgid ""
"(setq b (get-buffer \"lewis\"))\n"
"     @result{} #<buffer lewis>\n"
msgstr ""

#. type: group
#: buffers.texi.orig:328
#, no-wrap
msgid ""
"(get-buffer b)\n"
"     @result{} #<buffer lewis>\n"
msgstr ""

#. type: group
#: buffers.texi.orig:332
#, no-wrap
msgid ""
"(get-buffer \"Frazzle-nots\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:336
msgid "See also the function @code{get-buffer-create} in @ref{Creating Buffers}."
msgstr ""

#. type: defun
#: buffers.texi.orig:339
#, no-wrap
msgid "generate-new-buffer-name starting-name &optional ignore"
msgstr ""

#. type: defun
#: buffers.texi.orig:345
msgid "This function returns a name that would be unique for a new buffer---but does not create the buffer.  It starts with @var{starting-name}, and produces a name not currently in use for any buffer by appending a number inside of @samp{<@dots{}>}.  It starts at 2 and keeps incrementing the number until it is not the name of an existing buffer."
msgstr ""

#. type: defun
#: buffers.texi.orig:352
msgid "If the optional second argument @var{ignore} is non-@code{nil}, it should be a string, a potential buffer name.  It means to consider that potential buffer acceptable, if it is tried, even it is the name of an existing buffer (which would normally be rejected).  Thus, if buffers named @samp{foo}, @samp{foo<2>}, @samp{foo<3>} and @samp{foo<4>} exist,"
msgstr ""

#. type: example
#: buffers.texi.orig:360
#, no-wrap
msgid ""
"(generate-new-buffer-name \"foo\")\n"
"     @result{} \"foo<5>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<3>\")\n"
"     @result{} \"foo<3>\"\n"
"(generate-new-buffer-name \"foo\" \"foo<6>\")\n"
"     @result{} \"foo<5>\"\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:364
msgid "See the related function @code{generate-new-buffer} in @ref{Creating Buffers}."
msgstr ""

#. type: cindex
#: buffers.texi.orig:368
#, no-wrap
msgid "visited file"
msgstr ""

#. type: cindex
#: buffers.texi.orig:369
#, no-wrap
msgid "buffer file name"
msgstr ""

#. type: cindex
#: buffers.texi.orig:370
#, no-wrap
msgid "file name of buffer"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:378
msgid "The @dfn{buffer file name} is the name of the file that is visited in that buffer.  When a buffer is not visiting a file, its buffer file name is @code{nil}.  Most of the time, the buffer name is the same as the nondirectory part of the buffer file name, but the buffer file name and the buffer name are distinct and can be set independently.  @xref{Visiting Files}."
msgstr ""

#. type: defun
#: buffers.texi.orig:379
#, no-wrap
msgid "buffer-file-name &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:384
msgid "This function returns the absolute file name of the file that @var{buffer} is visiting.  If @var{buffer} is not visiting any file, @code{buffer-file-name} returns @code{nil}.  If @var{buffer} is not supplied, it defaults to the current buffer."
msgstr ""

#. type: group
#: buffers.texi.orig:389
#, no-wrap
msgid ""
"(buffer-file-name (other-buffer))\n"
"     @result{} \"/usr/user/lewis/manual/files.texi\"\n"
msgstr ""

#. type: defvar
#: buffers.texi.orig:393
#, no-wrap
msgid "buffer-file-name"
msgstr ""

#. type: defvar
#: buffers.texi.orig:398
msgid "This buffer-local variable contains the name of the file being visited in the current buffer, or @code{nil} if it is not visiting a file.  It is a permanent local variable, unaffected by @code{kill-all-local-variables}."
msgstr ""

#. type: group
#: buffers.texi.orig:403
#, no-wrap
msgid ""
"buffer-file-name\n"
"     @result{} \"/usr/user/lewis/manual/buffers.texi\"\n"
msgstr ""

#. type: defvar
#: buffers.texi.orig:411
msgid "It is risky to change this variable's value without doing various other things.  Normally it is better to use @code{set-visited-file-name} (see below); some of the things done there, such as changing the buffer name, are not strictly necessary, but others are essential to avoid confusing Emacs."
msgstr ""

#. type: defvar
#: buffers.texi.orig:413
#, no-wrap
msgid "buffer-file-truename"
msgstr ""

#. type: defvar
#: buffers.texi.orig:419
msgid "This buffer-local variable holds the abbreviated truename of the file visited in the current buffer, or @code{nil} if no file is visited.  It is a permanent local, unaffected by @code{kill-all-local-variables}.  @xref{Truenames}, and @ref{abbreviate-file-name}."
msgstr ""

#. type: defvar
#: buffers.texi.orig:421
#, no-wrap
msgid "buffer-file-number"
msgstr ""

#. type: defvar
#: buffers.texi.orig:426
msgid "This buffer-local variable holds the file number and directory device number of the file visited in the current buffer, or @code{nil} if no file or a nonexistent file is visited.  It is a permanent local, unaffected by @code{kill-all-local-variables}."
msgstr ""

#. type: defvar
#: buffers.texi.orig:432
msgid "The value is normally a list of the form @code{(@var{filenum} @var{devnum})}.  This pair of numbers uniquely identifies the file among all files accessible on the system.  See the function @code{file-attributes}, in @ref{File Attributes}, for more information about them."
msgstr ""

#. type: defvar
#: buffers.texi.orig:435
msgid "If @code{buffer-file-name} is the name of a symbolic link, then both numbers refer to the recursive target."
msgstr ""

#. type: defun
#: buffers.texi.orig:437
#, no-wrap
msgid "get-file-buffer filename"
msgstr ""

#. type: defun
#: buffers.texi.orig:445
msgid "This function returns the buffer visiting file @var{filename}.  If there is no such buffer, it returns @code{nil}.  The argument @var{filename}, which must be a string, is expanded (@pxref{File Name Expansion}), then compared against the visited file names of all live buffers.  Note that the buffer's @code{buffer-file-name} must match the expansion of @var{filename} exactly.  This function will not recognize other names for the same file."
msgstr ""

#. type: group
#: buffers.texi.orig:450
#, no-wrap
msgid ""
"(get-file-buffer \"buffers.texi\")\n"
"    @result{} #<buffer buffers.texi>\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:456
msgid "In unusual circumstances, there can be more than one buffer visiting the same file name.  In such cases, this function returns the first such buffer in the buffer list."
msgstr ""

#. type: defun
#: buffers.texi.orig:458
#, no-wrap
msgid "find-buffer-visiting filename &optional predicate"
msgstr ""

#. type: defun
#: buffers.texi.orig:468
msgid "This is like @code{get-file-buffer}, except that it can return any buffer visiting the file @emph{possibly under a different name}.  That is, the buffer's @code{buffer-file-name} does not need to match the expansion of @var{filename} exactly, it only needs to refer to the same file.  If @var{predicate} is non-@code{nil}, it should be a function of one argument, a buffer visiting @var{filename}.  The buffer is only considered a suitable return value if @var{predicate} returns non-@code{nil}.  If it can not find a suitable buffer to return, @code{find-buffer-visiting} returns @code{nil}."
msgstr ""

#. type: deffn
#: buffers.texi.orig:470
#, no-wrap
msgid "Command set-visited-file-name filename &optional no-query along-with-file"
msgstr ""

#. type: deffn
#: buffers.texi.orig:475
msgid "If @var{filename} is a non-empty string, this function changes the name of the file visited in the current buffer to @var{filename}.  (If the buffer had no visited file, this gives it one.)  The @emph{next time} the buffer is saved it will go in the newly-specified file."
msgstr ""

#. type: deffn
#: buffers.texi.orig:481
msgid "This command marks the buffer as modified, since it does not (as far as Emacs knows) match the contents of @var{filename}, even if it matched the former visited file.  It also renames the buffer to correspond to the new file name, unless the new name is already in use."
msgstr ""

#. type: deffn
#: buffers.texi.orig:486
msgid "If @var{filename} is @code{nil} or the empty string, that stands for ``no visited file''.  In this case, @code{set-visited-file-name} marks the buffer as having no visited file, without changing the buffer's modified flag."
msgstr ""

#. type: deffn
#: buffers.texi.orig:494
msgid "Normally, this function asks the user for confirmation if there already is a buffer visiting @var{filename}.  If @var{no-query} is non-@code{nil}, that prevents asking this question.  If there already is a buffer visiting @var{filename}, and the user confirms or @var{no-query} is non-@code{nil}, this function makes the new buffer name unique by appending a number inside of @samp{<@dots{}>} to @var{filename}."
msgstr ""

#. type: deffn
#: buffers.texi.orig:503
msgid "If @var{along-with-file} is non-@code{nil}, that means to assume that the former visited file has been renamed to @var{filename}.  In this case, the command does not change the buffer's modified flag, nor the buffer's recorded last file modification time as reported by @code{visited-file-modtime} (@pxref{Modification Time}).  If @var{along-with-file} is @code{nil}, this function clears the recorded last file modification time, after which @code{visited-file-modtime} returns zero."
msgstr ""

#. type: deffn
#: buffers.texi.orig:506
msgid "When the function @code{set-visited-file-name} is called interactively, it prompts for @var{filename} in the minibuffer."
msgstr ""

#. type: defvar
#: buffers.texi.orig:508
#, no-wrap
msgid "list-buffers-directory"
msgstr ""

#. type: defvar
#: buffers.texi.orig:512
msgid "This buffer-local variable specifies a string to display in a buffer listing where the visited file name would go, for buffers that don't have a visited file name.  Dired buffers use this variable."
msgstr ""

#. type: cindex
#: buffers.texi.orig:516
#, no-wrap
msgid "buffer modification"
msgstr ""

#. type: cindex
#: buffers.texi.orig:517
#, no-wrap
msgid "modification flag (of buffer)"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:526
msgid "Emacs keeps a flag called the @dfn{modified flag} for each buffer, to record whether you have changed the text of the buffer.  This flag is set to @code{t} whenever you alter the contents of the buffer, and cleared to @code{nil} when you save it.  Thus, the flag shows whether there are unsaved changes.  The flag value is normally shown in the mode line (@pxref{Mode Line Variables}), and controls saving (@pxref{Saving Buffers}) and auto-saving (@pxref{Auto-Saving})."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:531
msgid "Some Lisp programs set the flag explicitly.  For example, the function @code{set-visited-file-name} sets the flag to @code{t}, because the text does not match the newly-visited file, even if it is unchanged from the file formerly visited."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:534
msgid "The functions that modify the contents of buffers are described in @ref{Text}."
msgstr ""

#. type: defun
#: buffers.texi.orig:535
#, no-wrap
msgid "buffer-modified-p &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:540
msgid "This function returns @code{t} if the buffer @var{buffer} has been modified since it was last read in from a file or saved, or @code{nil} otherwise.  If @var{buffer} is not supplied, the current buffer is tested."
msgstr ""

#. type: defun
#: buffers.texi.orig:542
#, no-wrap
msgid "set-buffer-modified-p flag"
msgstr ""

#. type: defun
#: buffers.texi.orig:545
msgid "This function marks the current buffer as modified if @var{flag} is non-@code{nil}, or as unmodified if the flag is @code{nil}."
msgstr ""

#. type: defun
#: buffers.texi.orig:549
msgid "Another effect of calling this function is to cause unconditional redisplay of the mode line for the current buffer.  In fact, the function @code{force-mode-line-update} works by doing this:"
msgstr ""

#. type: group
#: buffers.texi.orig:553
#, no-wrap
msgid "(set-buffer-modified-p (buffer-modified-p))\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:557
#, no-wrap
msgid "restore-buffer-modified-p flag"
msgstr ""

#. type: defun
#: buffers.texi.orig:560
msgid "Like @code{set-buffer-modified-p}, but does not force redisplay of mode lines."
msgstr ""

#. type: deffn
#: buffers.texi.orig:562
#, no-wrap
msgid "Command not-modified &optional arg"
msgstr ""

#. type: deffn
#: buffers.texi.orig:567
msgid "This command marks the current buffer as unmodified, and not needing to be saved.  If @var{arg} is non-@code{nil}, it marks the buffer as modified, so that it will be saved at the next suitable occasion.  Interactively, @var{arg} is the prefix argument."
msgstr ""

#. type: deffn
#: buffers.texi.orig:570
msgid "Don't use this function in programs, since it prints a message in the echo area; use @code{set-buffer-modified-p} (above) instead."
msgstr ""

#. type: defun
#: buffers.texi.orig:572
#, no-wrap
msgid "buffer-modified-tick &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:577
msgid "This function returns @var{buffer}'s modification-count.  This is a counter that increments every time the buffer is modified.  If @var{buffer} is @code{nil} (or omitted), the current buffer is used.  The counter can wrap around occasionally."
msgstr ""

#. type: defun
#: buffers.texi.orig:579
#, no-wrap
msgid "buffer-chars-modified-tick &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:588
msgid "This function returns @var{buffer}'s character-change modification-count.  Changes to text properties leave this counter unchanged; however, each time text is inserted or removed from the buffer, the counter is reset to the value that would be returned by @code{buffer-modified-tick}.  By comparing the values returned by two @code{buffer-chars-modified-tick} calls, you can tell whether a character change occurred in that buffer in between the calls.  If @var{buffer} is @code{nil} (or omitted), the current buffer is used."
msgstr ""

#. type: section
#: buffers.texi.orig:591
#, no-wrap
msgid "Buffer Modification Time"
msgstr ""

#. type: cindex
#: buffers.texi.orig:592
#, no-wrap
msgid "comparing file modification time"
msgstr ""

#. type: cindex
#: buffers.texi.orig:593
#, no-wrap
msgid "modification time of buffer"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:602
msgid "Suppose that you visit a file and make changes in its buffer, and meanwhile the file itself is changed on disk.  At this point, saving the buffer would overwrite the changes in the file.  Occasionally this may be what you want, but usually it would lose valuable information.  Emacs therefore checks the file's modification time using the functions described below before saving the file.  (@xref{File Attributes}, for how to examine a file's modification time.)"
msgstr ""

#. type: defun
#: buffers.texi.orig:603
#, no-wrap
msgid "verify-visited-file-modtime &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:609
msgid "This function compares what @var{buffer} (by default, the current-buffer) has recorded for the modification time of its visited file against the actual modification time of the file as recorded by the operating system.  The two should be the same unless some other process has written the file since Emacs visited or saved it."
msgstr ""

#. type: defun
#: buffers.texi.orig:615
msgid "The function returns @code{t} if the last actual modification time and Emacs's recorded modification time are the same, @code{nil} otherwise.  It also returns @code{t} if the buffer has no recorded last modification time, that is if @code{visited-file-modtime} would return zero."
msgstr ""

#. type: defun
#: buffers.texi.orig:622
msgid "It always returns @code{t} for buffers that are not visiting a file, even if @code{visited-file-modtime} returns a non-zero value.  For instance, it always returns @code{t} for dired buffers.  It returns @code{t} for buffers that are visiting a file that does not exist and never existed, but @code{nil} for file-visiting buffers whose file has been deleted."
msgstr ""

#. type: defun
#: buffers.texi.orig:624
#, no-wrap
msgid "clear-visited-file-modtime"
msgstr ""

#. type: defun
#: buffers.texi.orig:629
msgid "This function clears out the record of the last modification time of the file being visited by the current buffer.  As a result, the next attempt to save this buffer will not complain of a discrepancy in file modification times."
msgstr ""

#. type: defun
#: buffers.texi.orig:633
msgid "This function is called in @code{set-visited-file-name} and other exceptional places where the usual test to avoid overwriting a changed file should not be done."
msgstr ""

#. type: defun
#: buffers.texi.orig:635
#, no-wrap
msgid "visited-file-modtime"
msgstr ""

#. type: defun
#: buffers.texi.orig:641
msgid "This function returns the current buffer's recorded last file modification time, as a list of the form @code{(@var{high} @var{low} @var{microsec} @var{picosec})}.  (This is the same format that @code{file-attributes} uses to return time values; @pxref{File Attributes}.)"
msgstr ""

#. type: defun
#: buffers.texi.orig:649
msgid "If the buffer has no recorded last modification time, this function returns zero.  This case occurs, for instance, if the buffer is not visiting a file or if the time has been explicitly cleared by @code{clear-visited-file-modtime}.  Note, however, that @code{visited-file-modtime} returns a list for some non-file buffers too.  For instance, in a Dired buffer listing a directory, it returns the last modification time of that directory, as recorded by Dired."
msgstr ""

#. type: defun
#: buffers.texi.orig:651
msgid "If the buffer is not visiting a file, this function returns -1."
msgstr ""

#. type: defun
#: buffers.texi.orig:653
#, no-wrap
msgid "set-visited-file-modtime &optional time"
msgstr ""

#. type: defun
#: buffers.texi.orig:658
msgid "This function updates the buffer's record of the last modification time of the visited file, to the value specified by @var{time} if @var{time} is not @code{nil}, and otherwise to the last modification time of the visited file."
msgstr ""

#. type: defun
#: buffers.texi.orig:662
msgid "If @var{time} is neither @code{nil} nor zero, it should have the form @code{(@var{high} @var{low} @var{microsec} @var{picosec})}, the format used by @code{current-time} (@pxref{Time of Day})."
msgstr ""

#. type: defun
#: buffers.texi.orig:666
msgid "This function is useful if the buffer was not read from the file normally, or if the file itself has been changed for some known benign reason."
msgstr ""

#. type: defun
#: buffers.texi.orig:668
#, no-wrap
msgid "ask-user-about-supersession-threat filename"
msgstr ""

#. type: defun
#: buffers.texi.orig:674
msgid "This function is used to ask a user how to proceed after an attempt to modify an buffer visiting file @var{filename} when the file is newer than the buffer text.  Emacs detects this because the modification time of the file on disk is newer than the last save-time of the buffer.  This means some other program has probably altered the file."
msgstr ""

#. type: kindex
#: buffers.texi.orig:675
#, no-wrap
msgid "file-supersession"
msgstr ""

#. type: defun
#: buffers.texi.orig:680
msgid "Depending on the user's answer, the function may return normally, in which case the modification of the buffer proceeds, or it may signal a @code{file-supersession} error with data @code{(@var{filename})}, in which case the proposed buffer modification is not allowed."
msgstr ""

#. type: defun
#: buffers.texi.orig:684
msgid "This function is called automatically by Emacs on the proper occasions.  It exists so you can customize Emacs by redefining it.  See the file @file{userlock.el} for the standard definition."
msgstr ""

#. type: defun
#: buffers.texi.orig:686
msgid "See also the file locking mechanism in @ref{File Locks}."
msgstr ""

#. type: section
#: buffers.texi.orig:689
#, no-wrap
msgid "Read-Only Buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:690
#, no-wrap
msgid "read-only buffer"
msgstr ""

#. type: cindex
#: buffers.texi.orig:691
#, no-wrap
msgid "buffer, read-only"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:696
msgid "If a buffer is @dfn{read-only}, then you cannot change its contents, although you may change your view of the contents by scrolling and narrowing."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:698
msgid "Read-only buffers are used in two kinds of situations:"
msgstr ""

#. type: itemize
#: buffers.texi.orig:702
msgid "A buffer visiting a write-protected file is normally read-only."
msgstr ""

#. type: itemize
#: buffers.texi.orig:707
msgid "Here, the purpose is to inform the user that editing the buffer with the aim of saving it in the file may be futile or undesirable.  The user who wants to change the buffer text despite this can do so after clearing the read-only flag with @kbd{C-x C-q}."
msgstr ""

#. type: itemize
#: buffers.texi.orig:711
msgid "Modes such as Dired and Rmail make buffers read-only when altering the contents with the usual editing commands would probably be a mistake."
msgstr ""

#. type: itemize
#: buffers.texi.orig:715
msgid "The special commands of these modes bind @code{buffer-read-only} to @code{nil} (with @code{let}) or bind @code{inhibit-read-only} to @code{t} around the places where they themselves change the text."
msgstr ""

#. type: defvar
#: buffers.texi.orig:717
#, no-wrap
msgid "buffer-read-only"
msgstr ""

#. type: defvar
#: buffers.texi.orig:720
msgid "This buffer-local variable specifies whether the buffer is read-only.  The buffer is read-only if this variable is non-@code{nil}."
msgstr ""

#. type: defvar
#: buffers.texi.orig:722
#, no-wrap
msgid "inhibit-read-only"
msgstr ""

#. type: defvar
#: buffers.texi.orig:728
msgid "If this variable is non-@code{nil}, then read-only buffers and, depending on the actual value, some or all read-only characters may be modified.  Read-only characters in a buffer are those that have a non-@code{nil} @code{read-only} text property.  @xref{Special Properties}, for more information about text properties."
msgstr ""

#. type: defvar
#: buffers.texi.orig:733
msgid "If @code{inhibit-read-only} is @code{t}, all @code{read-only} character properties have no effect.  If @code{inhibit-read-only} is a list, then @code{read-only} character properties have no effect if they are members of the list (comparison is done with @code{eq})."
msgstr ""

#. type: deffn
#: buffers.texi.orig:735
#, no-wrap
msgid "Command read-only-mode &optional arg"
msgstr ""

#. type: deffn
#: buffers.texi.orig:741
msgid "This is the mode command for Read Only minor mode, a buffer-local minor mode.  When the mode is enabled, @code{buffer-read-only} is non-@code{nil} in the buffer; when disabled, @code{buffer-read-only} is @code{nil} in the buffer.  The calling convention is the same as for other minor mode commands (@pxref{Minor Mode Conventions})."
msgstr ""

#. type: deffn
#: buffers.texi.orig:748
msgid "This minor mode mainly serves as a wrapper for @code{buffer-read-only}; unlike most minor modes, there is no separate @code{read-only-mode} variable.  Even when Read Only mode is disabled, characters with non-@code{nil} @code{read-only} text properties remain read-only.  To temporarily ignore all read-only states, bind @code{inhibit-read-only}, as described above."
msgstr ""

#. type: deffn
#: buffers.texi.orig:754
msgid "When enabling Read Only mode, this mode command also enables View mode if the option @code{view-read-only} is non-@code{nil}.  @xref{Misc Buffer,,Miscellaneous Buffer Operations, emacs, The GNU Emacs Manual}.  When disabling Read Only mode, it disables View mode if View mode was enabled."
msgstr ""

#. type: defun
#: buffers.texi.orig:756
#, no-wrap
msgid "barf-if-buffer-read-only"
msgstr ""

#. type: defun
#: buffers.texi.orig:760
msgid "This function signals a @code{buffer-read-only} error if the current buffer is read-only.  @xref{Using Interactive}, for another way to signal an error if the current buffer is read-only."
msgstr ""

#. type: section
#: buffers.texi.orig:763
#, no-wrap
msgid "The Buffer List"
msgstr ""

#. type: cindex
#: buffers.texi.orig:764
#, no-wrap
msgid "buffer list"
msgstr ""

#. type: cindex
#: buffers.texi.orig:765
#, no-wrap
msgid "listing all buffers"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:772
msgid "The @dfn{buffer list} is a list of all live buffers.  The order of the buffers in this list is based primarily on how recently each buffer has been displayed in a window.  Several functions, notably @code{other-buffer}, use this ordering.  A buffer list displayed for the user also follows this order."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:781
msgid "Creating a buffer adds it to the end of the buffer list, and killing a buffer removes it from that list.  A buffer moves to the front of this list whenever it is chosen for display in a window (@pxref{Switching Buffers}) or a window displaying it is selected (@pxref{Selecting Windows}).  A buffer moves to the end of the list when it is buried (see @code{bury-buffer}, below).  There are no functions available to the Lisp programmer which directly manipulate the buffer list."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:789
msgid "In addition to the fundamental buffer list just described, Emacs maintains a local buffer list for each frame, in which the buffers that have been displayed (or had their windows selected) in that frame come first.  (This order is recorded in the frame's @code{buffer-list} frame parameter; see @ref{Buffer Parameters}.)  Buffers never displayed in that frame come afterward, ordered according to the fundamental buffer list."
msgstr ""

#. type: defun
#: buffers.texi.orig:790
#, no-wrap
msgid "buffer-list &optional frame"
msgstr ""

#. type: defun
#: buffers.texi.orig:794
msgid "This function returns the buffer list, including all buffers, even those whose names begin with a space.  The elements are actual buffers, not their names."
msgstr ""

#. type: defun
#: buffers.texi.orig:799
msgid "If @var{frame} is a frame, this returns @var{frame}'s local buffer list.  If @var{frame} is @code{nil} or omitted, the fundamental buffer list is used: the buffers appear in order of most recent display or selection, regardless of which frames they were displayed on."
msgstr ""

#. type: group
#: buffers.texi.orig:806
#, no-wrap
msgid ""
"(buffer-list)\n"
"     @result{} (#<buffer buffers.texi>\n"
"         #<buffer  *Minibuf-1*> #<buffer buffer.c>\n"
"         #<buffer *Help*> #<buffer TAGS>)\n"
msgstr ""

#. type: group
#: buffers.texi.orig:814
#, no-wrap
msgid ""
";; @r{Note that the name of the minibuffer}\n"
";;   @r{begins with a space!}\n"
"(mapcar (function buffer-name) (buffer-list))\n"
"    @result{} (\"buffers.texi\" \" *Minibuf-1*\"\n"
"        \"buffer.c\" \"*Help*\" \"TAGS\")\n"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:822
msgid "The list returned by @code{buffer-list} is constructed specifically; it is not an internal Emacs data structure, and modifying it has no effect on the order of buffers.  If you want to change the order of buffers in the fundamental buffer list, here is an easy way:"
msgstr ""

#. type: example
#: buffers.texi.orig:828
#, no-wrap
msgid ""
"(defun reorder-buffer-list (new-list)\n"
"  (while new-list\n"
"    (bury-buffer (car new-list))\n"
"    (setq new-list (cdr new-list))))\n"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:833
msgid "With this method, you can specify any order for the list, but there is no danger of losing a buffer or adding something that is not a valid live buffer."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:837
msgid "To change the order or value of a specific frame's buffer list, set that frame's @code{buffer-list} parameter with @code{modify-frame-parameters} (@pxref{Parameter Access})."
msgstr ""

#. type: defun
#: buffers.texi.orig:838
#, no-wrap
msgid "other-buffer &optional buffer visible-ok frame"
msgstr ""

#. type: defun
#: buffers.texi.orig:844
msgid "This function returns the first buffer in the buffer list other than @var{buffer}.  Usually, this is the buffer appearing in the most recently selected window (in frame @var{frame} or else the selected frame, @pxref{Input Focus}), aside from @var{buffer}.  Buffers whose names start with a space are not considered at all."
msgstr ""

#. type: defun
#: buffers.texi.orig:849
msgid "If @var{buffer} is not supplied (or if it is not a live buffer), then @code{other-buffer} returns the first buffer in the selected frame's local buffer list. (If @var{frame} is non-@code{nil}, it returns the first buffer in @var{frame}'s local buffer list instead.)"
msgstr ""

#. type: defun
#: buffers.texi.orig:854
msgid "If @var{frame} has a non-@code{nil} @code{buffer-predicate} parameter, then @code{other-buffer} uses that predicate to decide which buffers to consider.  It calls the predicate once for each buffer, and if the value is @code{nil}, that buffer is ignored.  @xref{Buffer Parameters}."
msgstr ""

#. type: defun
#: buffers.texi.orig:860
msgid "If @var{visible-ok} is @code{nil}, @code{other-buffer} avoids returning a buffer visible in any window on any visible frame, except as a last resort.  If @var{visible-ok} is non-@code{nil}, then it does not matter whether a buffer is displayed somewhere or not."
msgstr ""

#. type: defun
#: buffers.texi.orig:863
msgid "If no suitable buffer exists, the buffer @file{*scratch*} is returned (and created, if necessary)."
msgstr ""

#. type: defun
#: buffers.texi.orig:865
#, no-wrap
msgid "last-buffer &optional buffer visible-ok frame"
msgstr ""

#. type: defun
#: buffers.texi.orig:869
msgid "This function returns the last buffer in @var{frame}'s buffer list other than @var{buffer}.  If @var{frame} is omitted or @code{nil}, it uses the selected frame's buffer list."
msgstr ""

#. type: defun
#: buffers.texi.orig:873
msgid "The argument @var{visible-ok} is handled as with @code{other-buffer}, see above.  If no suitable buffer can be found, the buffer @file{*scratch*} is returned."
msgstr ""

#. type: deffn
#: buffers.texi.orig:875
#, no-wrap
msgid "Command bury-buffer &optional buffer-or-name"
msgstr ""

#. type: deffn
#: buffers.texi.orig:881
msgid "This command puts @var{buffer-or-name} at the end of the buffer list, without changing the order of any of the other buffers on the list.  This buffer therefore becomes the least desirable candidate for @code{other-buffer} to return.  The argument can be either a buffer itself or the name of one."
msgstr ""

#. type: deffn
#: buffers.texi.orig:888
msgid "This function operates on each frame's @code{buffer-list} parameter as well as the fundamental buffer list; therefore, the buffer that you bury will come last in the value of @code{(buffer-list @var{frame})} and in the value of @code{(buffer-list)}.  In addition, it also puts the buffer at the end of the list of buffer of the selected window (@pxref{Window History}) provided it is shown in that window."
msgstr ""

#. type: deffn
#: buffers.texi.orig:901
msgid "If @var{buffer-or-name} is @code{nil} or omitted, this means to bury the current buffer.  In addition, if the current buffer is displayed in the selected window, this makes sure that the window is either deleted or another buffer is shown in it.  More precisely, if the selected window is dedicated (@pxref{Dedicated Windows}) and there are other windows on its frame, the window is deleted.  If it is the only window on its frame and that frame is not the only frame on its terminal, the frame is ``dismissed'' by calling the function specified by @code{frame-auto-hide-function} (@pxref{Quitting Windows}).  Otherwise, it calls @code{switch-to-prev-buffer} (@pxref{Window History}) to show another buffer in that window.  If @var{buffer-or-name} is displayed in some other window, it remains displayed there."
msgstr ""

#. type: deffn
#: buffers.texi.orig:904
msgid "To replace a buffer in all the windows that display it, use @code{replace-buffer-in-windows}, @xref{Buffers and Windows}."
msgstr ""

#. type: deffn
#: buffers.texi.orig:906
#, no-wrap
msgid "Command unbury-buffer"
msgstr ""

#. type: deffn
#: buffers.texi.orig:912
msgid "This command switches to the last buffer in the local buffer list of the selected frame.  More precisely, it calls the function @code{switch-to-buffer} (@pxref{Switching Buffers}), to display the buffer returned by @code{last-buffer} (see above), in the selected window."
msgstr ""

#. type: defvar
#: buffers.texi.orig:914
#, no-wrap
msgid "buffer-list-update-hook"
msgstr ""

#. type: defvar
#: buffers.texi.orig:920
msgid "This is a normal hook run whenever the buffer list changes.  Functions (implicitly) running this hook are @code{get-buffer-create} (@pxref{Creating Buffers}), @code{rename-buffer} (@pxref{Buffer Names}), @code{kill-buffer} (@pxref{Killing Buffers}), @code{bury-buffer} (see above) and @code{select-window} (@pxref{Selecting Windows})."
msgstr ""

#. type: cindex
#: buffers.texi.orig:924
#, no-wrap
msgid "creating buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:925
#, no-wrap
msgid "buffers, creating"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:931
msgid "This section describes the two primitives for creating buffers.  @code{get-buffer-create} creates a buffer if it finds no existing buffer with the specified name; @code{generate-new-buffer} always creates a new buffer and gives it a unique name."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:936
msgid "Other functions you can use to create buffers include @code{with-output-to-temp-buffer} (@pxref{Temporary Displays}) and @code{create-file-buffer} (@pxref{Visiting Files}).  Starting a subprocess can also create a buffer (@pxref{Processes})."
msgstr ""

#. type: defun
#: buffers.texi.orig:937
#, no-wrap
msgid "get-buffer-create buffer-or-name"
msgstr ""

#. type: defun
#: buffers.texi.orig:941
msgid "This function returns a buffer named @var{buffer-or-name}.  The buffer returned does not become the current buffer---this function does not change which buffer is current."
msgstr ""

#. type: defun
#: buffers.texi.orig:947
msgid "@var{buffer-or-name} must be either a string or an existing buffer.  If it is a string and a live buffer with that name already exists, @code{get-buffer-create} returns that buffer.  If no such buffer exists, it creates a new buffer.  If @var{buffer-or-name} is a buffer instead of a string, it is returned as given, even if it is dead."
msgstr ""

#. type: group
#: buffers.texi.orig:952
#, no-wrap
msgid ""
"(get-buffer-create \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:959
msgid "The major mode for a newly created buffer is set to Fundamental mode.  (The default value of the variable @code{major-mode} is handled at a higher level; see @ref{Auto Major Mode}.)  If the name begins with a space, the buffer initially disables undo information recording (@pxref{Undo})."
msgstr ""

#. type: defun
#: buffers.texi.orig:961
#, no-wrap
msgid "generate-new-buffer name"
msgstr ""

#. type: defun
#: buffers.texi.orig:969
msgid "This function returns a newly created, empty buffer, but does not make it current.  The name of the buffer is generated by passing @var{name} to the function @code{generate-new-buffer-name} (@pxref{Buffer Names}).  Thus, if there is no buffer named @var{name}, then that is the name of the new buffer; if that name is in use, a suffix of the form @samp{<@var{n}>}, where @var{n} is an integer, is appended to @var{name}."
msgstr ""

#. type: defun
#: buffers.texi.orig:971
msgid "An error is signaled if @var{name} is not a string."
msgstr ""

#. type: group
#: buffers.texi.orig:976
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar>\n"
msgstr ""

#. type: group
#: buffers.texi.orig:980
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<2>>\n"
msgstr ""

#. type: group
#: buffers.texi.orig:984
#, no-wrap
msgid ""
"(generate-new-buffer \"bar\")\n"
"     @result{} #<buffer bar<3>>\n"
msgstr ""

#. type: defun
#: buffers.texi.orig:990
msgid "The major mode for the new buffer is set to Fundamental mode.  The default value of the variable @code{major-mode} is handled at a higher level.  @xref{Auto Major Mode}."
msgstr ""

#. type: cindex
#: buffers.texi.orig:994
#, no-wrap
msgid "killing buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:995
#, no-wrap
msgid "buffers, killing"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:999
msgid "@dfn{Killing a buffer} makes its name unknown to Emacs and makes the memory space it occupied available for other use."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1005
msgid "The buffer object for the buffer that has been killed remains in existence as long as anything refers to it, but it is specially marked so that you cannot make it current or display it.  Killed buffers retain their identity, however; if you kill two distinct buffers, they remain distinct according to @code{eq} although both are dead."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1012
msgid "If you kill a buffer that is current or displayed in a window, Emacs automatically selects or displays some other buffer instead.  This means that killing a buffer can change the current buffer.  Therefore, when you kill a buffer, you should also take the precautions associated with changing the current buffer (unless you happen to know that the buffer being killed isn't current).  @xref{Current Buffer}."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1014
msgid "If you kill a buffer that is the base buffer of one or more indirect"
msgstr ""

#. type: iftex
#: buffers.texi.orig:1016
msgid "buffers,"
msgstr ""

#. type: ifnottex
#: buffers.texi.orig:1019
msgid "buffers (@pxref{Indirect Buffers}),"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1021
msgid "the indirect buffers are automatically killed as well."
msgstr ""

#. type: cindex
#: buffers.texi.orig:1022
#, no-wrap
msgid "live buffer"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1027
msgid "The @code{buffer-name} of a buffer is @code{nil} if, and only if, the buffer is killed.  A buffer that has not been killed is called a @dfn{live} buffer.  To test whether a buffer is live or killed, use the function @code{buffer-live-p} (see below)."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1028
#, no-wrap
msgid "Command kill-buffer &optional buffer-or-name"
msgstr ""

#. type: deffn
#: buffers.texi.orig:1033
msgid "This function kills the buffer @var{buffer-or-name}, freeing all its memory for other uses or to be returned to the operating system.  If @var{buffer-or-name} is @code{nil} or omitted, it kills the current buffer."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1037
msgid "Any processes that have this buffer as the @code{process-buffer} are sent the @code{SIGHUP} (``hangup'') signal, which normally causes them to terminate.  @xref{Signals to Processes}."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1043
msgid "If the buffer is visiting a file and contains unsaved changes, @code{kill-buffer} asks the user to confirm before the buffer is killed.  It does this even if not called interactively.  To prevent the request for confirmation, clear the modified flag before calling @code{kill-buffer}.  @xref{Buffer Modification}."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1046
msgid "This function calls @code{replace-buffer-in-windows} for cleaning up all windows currently displaying the buffer to be killed."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1048
msgid "Killing a buffer that is already dead has no effect."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1052
msgid "This function returns @code{t} if it actually killed the buffer.  It returns @code{nil} if the user refuses to confirm or if @var{buffer-or-name} was already dead."
msgstr ""

#. type: smallexample
#: buffers.texi.orig:1057
#, no-wrap
msgid ""
"(kill-buffer \"foo.unchanged\")\n"
"     @result{} t\n"
"(kill-buffer \"foo.changed\")\n"
"\n"
msgstr ""

#. type: smallexample
#: buffers.texi.orig:1061
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer foo.changed modified; kill anyway? (yes or no) @kbd{yes}\n"
"---------- Buffer: Minibuffer ----------\n"
"\n"
msgstr ""

#. type: smallexample
#: buffers.texi.orig:1063
#, no-wrap
msgid "     @result{} t\n"
msgstr ""

#. type: defvar
#: buffers.texi.orig:1066
#, no-wrap
msgid "kill-buffer-query-functions"
msgstr ""

#. type: defvar
#: buffers.texi.orig:1073
msgid "Before confirming unsaved changes, @code{kill-buffer} calls the functions in the list @code{kill-buffer-query-functions}, in order of appearance, with no arguments.  The buffer being killed is the current buffer when they are called.  The idea of this feature is that these functions will ask for confirmation from the user.  If any of them returns @code{nil}, @code{kill-buffer} spares the buffer's life."
msgstr ""

#. type: defvar
#: buffers.texi.orig:1075
#, no-wrap
msgid "kill-buffer-hook"
msgstr ""

#. type: defvar
#: buffers.texi.orig:1081
msgid "This is a normal hook run by @code{kill-buffer} after asking all the questions it is going to ask, just before actually killing the buffer.  The buffer to be killed is current when the hook functions run.  @xref{Hooks}.  This variable is a permanent local, so its local binding is not cleared by changing major modes."
msgstr ""

#. type: defopt
#: buffers.texi.orig:1083
#, no-wrap
msgid "buffer-offer-save"
msgstr ""

#. type: defopt
#: buffers.texi.orig:1091
msgid "This variable, if non-@code{nil} in a particular buffer, tells @code{save-buffers-kill-emacs} and @code{save-some-buffers} (if the second optional argument to that function is @code{t}) to offer to save that buffer, just as they offer to save file-visiting buffers.  @xref{Definition of save-some-buffers}.  The variable @code{buffer-offer-save} automatically becomes buffer-local when set for any reason.  @xref{Buffer-Local Variables}."
msgstr ""

#. type: defvar
#: buffers.texi.orig:1093
#, no-wrap
msgid "buffer-save-without-query"
msgstr ""

#. type: defvar
#: buffers.texi.orig:1098
msgid "This variable, if non-@code{nil} in a particular buffer, tells @code{save-buffers-kill-emacs} and @code{save-some-buffers} to save this buffer (if it's modified) without asking the user.  The variable automatically becomes buffer-local when set for any reason."
msgstr ""

#. type: defun
#: buffers.texi.orig:1100
#, no-wrap
msgid "buffer-live-p object"
msgstr ""

#. type: defun
#: buffers.texi.orig:1103
msgid "This function returns @code{t} if @var{object} is a live buffer (a buffer which has not been killed), @code{nil} otherwise."
msgstr ""

#. type: cindex
#: buffers.texi.orig:1107
#, no-wrap
msgid "indirect buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:1108
#, no-wrap
msgid "base buffer"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1114
msgid "An @dfn{indirect buffer} shares the text of some other buffer, which is called the @dfn{base buffer} of the indirect buffer.  In some ways it is the analogue, for buffers, of a symbolic link among files.  The base buffer may not itself be an indirect buffer."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1119
msgid "The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other.  This includes the text properties as well as the characters themselves."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1126
msgid "In all other respects, the indirect buffer and its base buffer are completely separate.  They have different names, independent values of point, independent narrowing, independent markers and overlays (though inserting or deleting text in either buffer relocates the markers and overlays for both), independent major modes, and independent buffer-local variable bindings."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1130
msgid "An indirect buffer cannot visit a file, but its base buffer can.  If you try to save the indirect buffer, that actually saves the base buffer."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1134
msgid "Killing an indirect buffer has no effect on its base buffer.  Killing the base buffer effectively kills the indirect buffer in that it cannot ever again be the current buffer."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1135
#, no-wrap
msgid "Command make-indirect-buffer base-buffer name &optional clone"
msgstr ""

#. type: deffn
#: buffers.texi.orig:1140
msgid "This creates and returns an indirect buffer named @var{name} whose base buffer is @var{base-buffer}.  The argument @var{base-buffer} may be a live buffer or the name (a string) of an existing buffer.  If @var{name} is the name of an existing buffer, an error is signaled."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1146
msgid "If @var{clone} is non-@code{nil}, then the indirect buffer originally shares the ``state'' of @var{base-buffer} such as major mode, minor modes, buffer local variables and so on.  If @var{clone} is omitted or @code{nil} the indirect buffer's state is set to the default state for new buffers."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1151
msgid "If @var{base-buffer} is an indirect buffer, its base buffer is used as the base for the new buffer.  If, in addition, @var{clone} is non-@code{nil}, the initial state is copied from the actual base buffer, not from @var{base-buffer}."
msgstr ""

#. type: deffn
#: buffers.texi.orig:1153
#, no-wrap
msgid "Command clone-indirect-buffer newname display-flag &optional norecord"
msgstr ""

#. type: deffn
#: buffers.texi.orig:1158
msgid "This function creates and returns a new indirect buffer that shares the current buffer's base buffer and copies the rest of the current buffer's attributes.  (If the current buffer is not indirect, it is used as the base buffer.)"
msgstr ""

#. type: deffn
#: buffers.texi.orig:1163
msgid "If @var{display-flag} is non-@code{nil}, that means to display the new buffer by calling @code{pop-to-buffer}.  If @var{norecord} is non-@code{nil}, that means not to put the new buffer to the front of the buffer list."
msgstr ""

#. type: defun
#: buffers.texi.orig:1165
#, no-wrap
msgid "buffer-base-buffer &optional buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:1170
msgid "This function returns the base buffer of @var{buffer}, which defaults to the current buffer.  If @var{buffer} is not indirect, the value is @code{nil}.  Otherwise, the value is another buffer, which is never an indirect buffer."
msgstr ""

#. type: section
#: buffers.texi.orig:1173
#, no-wrap
msgid "Swapping Text Between Two Buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:1174
#, no-wrap
msgid "swap text between buffers"
msgstr ""

#. type: cindex
#: buffers.texi.orig:1175
#, no-wrap
msgid "virtual buffers"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1181
msgid "Specialized modes sometimes need to let the user access from the same buffer several vastly different types of text.  For example, you may need to display a summary of the buffer text, in addition to letting the user access the text itself."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1188
msgid "This could be implemented with multiple buffers (kept in sync when the user edits the text), or with narrowing (@pxref{Narrowing}).  But these alternatives might sometimes become tedious or prohibitively expensive, especially if each type of text requires expensive buffer-global operations in order to provide correct display and editing commands."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1196
msgid "Emacs provides another facility for such modes: you can quickly swap buffer text between two buffers with @code{buffer-swap-text}.  This function is very fast because it doesn't move any text, it only changes the internal data structures of the buffer object to point to a different chunk of text.  Using it, you can pretend that a group of two or more buffers are actually a single virtual buffer that holds the contents of all the individual buffers together."
msgstr ""

#. type: defun
#: buffers.texi.orig:1197
#, no-wrap
msgid "buffer-swap-text buffer"
msgstr ""

#. type: defun
#: buffers.texi.orig:1202
msgid "This function swaps the text of the current buffer and that of its argument @var{buffer}.  It signals an error if one of the two buffers is an indirect buffer (@pxref{Indirect Buffers}) or is a base buffer of an indirect buffer."
msgstr ""

#. type: defun
#: buffers.texi.orig:1208
msgid "All the buffer properties that are related to the buffer text are swapped as well: the positions of point and mark, all the markers, the overlays, the text properties, the undo list, the value of the @code{enable-multibyte-characters} flag (@pxref{Text Representations, enable-multibyte-characters}), etc."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1216
msgid "If you use @code{buffer-swap-text} on a file-visiting buffer, you should set up a hook to save the buffer's original text rather than what it was swapped with.  @code{write-region-annotate-functions} works for this purpose.  You should probably set @code{buffer-saved-size} to @minus{}2 in the buffer, so that changes in the text it is swapped with will not interfere with auto-saving."
msgstr ""

#. type: section
#: buffers.texi.orig:1218
#, no-wrap
msgid "The Buffer Gap"
msgstr ""

#. type: cindex
#: buffers.texi.orig:1219
#, no-wrap
msgid "buffer gap"
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1229
msgid "Emacs buffers are implemented using an invisible @dfn{gap} to make insertion and deletion faster.  Insertion works by filling in part of the gap, and deletion adds to the gap.  Of course, this means that the gap must first be moved to the locus of the insertion or deletion.  Emacs moves the gap only when you try to insert or delete.  This is why your first editing command in one part of a large buffer, after previously editing in another far-away part, sometimes involves a noticeable delay."
msgstr ""

#. type: Plain text
#: buffers.texi.orig:1233
msgid "This mechanism works invisibly, and Lisp code should never be affected by the gap's current location, but these functions are available for getting information about the gap status."
msgstr ""

#. type: defun
#: buffers.texi.orig:1234
#, no-wrap
msgid "gap-position"
msgstr ""

#. type: defun
#: buffers.texi.orig:1236
msgid "This function returns the current gap position in the current buffer."
msgstr ""

#. type: defun
#: buffers.texi.orig:1238
#, no-wrap
msgid "gap-size"
msgstr ""

#. type: defun
#: buffers.texi.orig:1240
msgid "This function returns the current gap size of the current buffer."
msgstr ""
