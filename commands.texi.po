# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-02-22 02:45+0900\n"
"PO-Revision-Date: 2018-02-26 16:06+0900\n"
"00:42+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: commands.texi.orig:6 commands.texi.orig:7
#, no-wrap
msgid "Command Loop"
msgstr "Command Loop"

#. type: cindex
#: commands.texi.orig:8
#, no-wrap
msgid "editor command loop"
msgstr "editor command loop"

#. type: cindex
#: commands.texi.orig:9
#, no-wrap
msgid "command loop"
msgstr "command loop"

#. type: Plain text
#: commands.texi.orig:15
msgid "When you run Emacs, it enters the @dfn{editor command loop} almost immediately.  This loop reads key sequences, executes their definitions, and displays the results.  In this chapter, we describe how these things are done, and the subroutines that allow Lisp programs to do them."
msgstr "Emacsを実行すると、ほぼ即座に@dfn{エディターコマンドループ(editor command loop)}にエンターします。このループはキーシーケンスを読み取り、それらの定義を実行して、結果を表示します。このチャプターでは、これらが行われる方法と、Lispプログラムがこれらを行えるようにするサブルーチンを説明します。"

#. type: node
#: commands.texi.orig:34 commands.texi.orig:36
#, no-wrap
msgid "Command Overview"
msgstr "Command Overview"

#. type: menuentry
#: commands.texi.orig:34
msgid "How the command loop reads commands."
msgstr "コマンドループがコマンドを読み取る方法。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:102 commands.texi.orig:103
#, no-wrap
msgid "Defining Commands"
msgstr "Defining Commands"

#. type: menuentry
#: commands.texi.orig:34
msgid "Specifying how a function should read arguments."
msgstr "関数が引数を読み取る方法を指定する。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:612 commands.texi.orig:613
#, no-wrap
msgid "Interactive Call"
msgstr "Interactive Call"

#. type: menuentry
#: commands.texi.orig:34
msgid "Calling a command, so that it will read arguments."
msgstr "引数を読み取るようにコマンドを呼び出す。"

#. type: node
#: commands.texi.orig:34 commands.texi.orig:746
#, no-wrap
msgid "Distinguish Interactive"
msgstr "Distinguish Interactive"

#. type: menuentry
#: commands.texi.orig:34
msgid "Making a command distinguish interactive calls."
msgstr "インタラクティブな呼び出しとコマンドを区別する。"

#. type: node
#: commands.texi.orig:34 commands.texi.orig:836
#, no-wrap
msgid "Command Loop Info"
msgstr "Command Loop Info"

#. type: menuentry
#: commands.texi.orig:34
msgid "Variables set by the command loop for you to examine."
msgstr "検証用にコマンドループによりセットされる変数。"

#. type: node
#: commands.texi.orig:34 commands.texi.orig:989
#, no-wrap
msgid "Adjusting Point"
msgstr "Adjusting Point"

#. type: menuentry
#: commands.texi.orig:34
msgid "Adjustment of point after a command."
msgstr "コマンドの後にポイント位置を調整する。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:1019 commands.texi.orig:1020
#, no-wrap
msgid "Input Events"
msgstr "Input Events"

#. type: menuentry
#: commands.texi.orig:34
msgid "What input looks like when you read it."
msgstr "入力を読み取るとき、入力がどのように見えるか。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:2309 commands.texi.orig:2310
#, no-wrap
msgid "Reading Input"
msgstr "Reading Input"

#. type: menuentry
#: commands.texi.orig:34
msgid "How to read input events from the keyboard or mouse."
msgstr "キーボードやマウスからの入力イベントを読み取る方法。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:2902 commands.texi.orig:2903
#, no-wrap
msgid "Special Events"
msgstr "Special Events"

#. type: menuentry
#: commands.texi.orig:34
msgid "Events processed immediately and individually."
msgstr "即座かつ個別に処理されるイベント。"

#. type: node
#: commands.texi.orig:34 commands.texi.orig:2930
#, no-wrap
msgid "Waiting"
msgstr "Waiting"

#. type: menuentry
#: commands.texi.orig:34
msgid "Waiting for user input or elapsed time."
msgstr "ユーザー入力または経過時間の待機。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:2991 commands.texi.orig:2992
#, no-wrap
msgid "Quitting"
msgstr "Quitting"

#. type: menuentry
#: commands.texi.orig:34
msgid "How @kbd{C-g} works.  How to catch or defer quitting."
msgstr "@kbd{C-g}が機能する方法。quitをcatchまたは延期する方法。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:3117 commands.texi.orig:3118
#, no-wrap
msgid "Prefix Command Arguments"
msgstr "Prefix Command Arguments"

#. type: menuentry
#: commands.texi.orig:34
msgid "How the commands to set prefix args work."
msgstr "コマンドがプレフィクス引数が機能するようにセットするための方法。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:3257 commands.texi.orig:3258
#, no-wrap
msgid "Recursive Editing"
msgstr "Recursive Editing"

#. type: menuentry
#: commands.texi.orig:34
msgid "Entering a recursive edit, and why you usually shouldn't."
msgstr "再帰編集へのエンター、なぜ通常は再帰編集を行うべきでないのか。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:3376 commands.texi.orig:3377
#, no-wrap
msgid "Disabling Commands"
msgstr "Disabling Commands"

#. type: menuentry
#: commands.texi.orig:34
msgid "How the command loop handles disabled commands."
msgstr "コマンドループが無効なコマンドを扱う方法。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:3437 commands.texi.orig:3438
#, no-wrap
msgid "Command History"
msgstr "Command History"

#. type: menuentry
#: commands.texi.orig:34
msgid "How the command history is set up, and how accessed."
msgstr "コマンドヒストリーがセットアップされる方法と、どのようにアクセスされるか。"

#. type: section
#: commands.texi.orig:34 commands.texi.orig:3480 commands.texi.orig:3481
#, no-wrap
msgid "Keyboard Macros"
msgstr "Keyboard Macros"

#. type: menuentry
#: commands.texi.orig:34
msgid "How keyboard macros are implemented."
msgstr "キーボードマクロが実装される方法。"

#. type: section
#: commands.texi.orig:37
#, no-wrap
msgid "Command Loop Overview"
msgstr "Command Loop Overview"

#. type: Plain text
#: commands.texi.orig:46
msgid "The first thing the command loop must do is read a key sequence, which is a sequence of input events that translates into a command.  It does this by calling the function @code{read-key-sequence}.  Lisp programs can also call this function (@pxref{Key Sequence Input}).  They can also read input at a lower level with @code{read-key} or @code{read-event} (@pxref{Reading One Event}), or discard pending input with @code{discard-input} (@pxref{Event Input Misc})."
msgstr "コマンドループが最初に行わなければならないのはキーシーケンスの読み取りです。キーシーケンスほコマンドに変換される入力イベントのシーケンスです。これは関数@code{read-key-sequence}を呼び出すことにより行われます。Lispプログラムもこの関数を呼び出すことができます(@ref{Key Sequence Input}を参照)。これらはより低レベルの@code{read-key}や@code{read-event}(@ref{Reading One Event})で入力を読み取ったり、@code{discard-input}(@ref{Event Input Misc}を参照)で保留中の入力を無視することもできます。"

#. type: Plain text
#: commands.texi.orig:53
msgid "The key sequence is translated into a command through the currently active keymaps.  @xref{Key Lookup}, for information on how this is done.  The result should be a keyboard macro or an interactively callable function.  If the key is @kbd{M-x}, then it reads the name of another command, which it then calls.  This is done by the command @code{execute-extended-command} (@pxref{Interactive Call})."
msgstr "キーシーケンスはカレントでアクティブなキーマップを通じてコマンドに変換されます。これが行われる方法については、@xref{Key Lookup}を参照してください。結果はキーボードマクロかインタラクティブに呼び出し可能な関数になります。キーが@kbd{M-x}の場合は、他のコマンドの名前を読み取り、それを呼び出します。これはコマンド@code{execute-extended-command}(@ref{Interactive Call}を参照)により行われます。"

#. type: Plain text
#: commands.texi.orig:56
msgid "Prior to executing the command, Emacs runs @code{undo-boundary} to create an undo boundary.  @xref{Maintaining Undo}."
msgstr "コマンドの実行に先立ち、Emacsはアンドゥ境界(undo boundary)を作成するために@code{undo-boundary}を実行します。@ref{Maintaining Undo}を参照してください。"

#. type: Plain text
#: commands.texi.orig:68
msgid "To execute a command, Emacs first reads its arguments by calling @code{command-execute} (@pxref{Interactive Call}).  For commands written in Lisp, the @code{interactive} specification says how to read the arguments.  This may use the prefix argument (@pxref{Prefix Command Arguments}) or may read with prompting in the minibuffer (@pxref{Minibuffers}).  For example, the command @code{find-file} has an @code{interactive} specification which says to read a file name using the minibuffer.  The function body of @code{find-file} does not use the minibuffer, so if you call @code{find-file} as a function from Lisp code, you must supply the file name string as an ordinary Lisp function argument."
msgstr "コマンドを実行するために、Emacsはまず@code{command-execute}を呼び出してコマンドの引数を読み取ります(@ref{Interactive Call}を参照)。Lispで記述されたコマンドについては、@code{interactive}指定で引数を読み取る方法を指定します。これはプレフィクス引数(@ref{Prefix Command Arguments}を参照)を使用したり、ミニバッファー内(@ref{Minibuffers}を参照)で確認を求めて読み取りを行うかもしれません。たとえば、コマンド@code{find-file}には@code{interactive}指定があり、これはミニバッファーを使用してファイル名を読み取ることを指定します。@code{find-file}の関数bodyはミニバッファーを使用しないので、Lispコードから関数として@code{find-file}を呼び出す場合は通常のLisp関数引数としてファイル名を文字列で与えなければなりません。"

#. type: Plain text
#: commands.texi.orig:72
msgid "If the command is a keyboard macro (i.e., a string or vector), Emacs executes it using @code{execute-kbd-macro} (@pxref{Keyboard Macros})."
msgstr "コマンドがキーボードマクロ(文字列やベクター)の場合、Emacsは@code{execute-kbd-macro}を使用してそれを実行します(@ref{Keyboard Macros}を参照)。"

#. type: defvar
#: commands.texi.orig:73
#, no-wrap
msgid "pre-command-hook"
msgstr "pre-command-hook"

#. type: defvar
#: commands.texi.orig:78
msgid "This normal hook is run by the editor command loop before it executes each command.  At that time, @code{this-command} contains the command that is about to run, and @code{last-command} describes the previous command.  @xref{Command Loop Info}."
msgstr "このノーマルフックはコマンドを実行する前に、エディターコマンドループにより実行される。その際、@code{this-command} には実行しようとするコマンドが含まれ、@code{last-command}には前のコマンドが記述される。@ref{Command Loop Info}を参照のこと。"

#. type: defvar
#: commands.texi.orig:80
#, no-wrap
msgid "post-command-hook"
msgstr "post-command-hook"

#. type: defvar
#: commands.texi.orig:86
msgid "This normal hook is run by the editor command loop after it executes each command (including commands terminated prematurely by quitting or by errors).  At that time, @code{this-command} refers to the command that just ran, and @code{last-command} refers to the command before that."
msgstr "このノーマルフックはコマンドを実行した後(quitやエラーにより早期に終了させられたコマンドを含む)に、エディターコマンドループにより実行される。その際、@code{this-command}は正に実行されたコマンドを参照し、@code{last-command}は前に実行されたコマンドを参照する。"

#. type: defvar
#: commands.texi.orig:90
msgid "This hook is also run when Emacs first enters the command loop (at which point @code{this-command} and @code{last-command} are both @code{nil})."
msgstr "このフックはEmacsが最初にコマンドループにエンターしたときにも実行される(その時点では@code{this-command}と@code{last-command}はどちらも@code{nil})。"

#. type: Plain text
#: commands.texi.orig:97
msgid "Quitting is suppressed while running @code{pre-command-hook} and @code{post-command-hook}.  If an error happens while executing one of these hooks, it does not terminate execution of the hook; instead the error is silenced and the function in which the error occurred is removed from the hook."
msgstr "@code{pre-command-hook}および@code{post-command-hook}の実行中、quitは抑制されます。これらのフックのどれか1つを実行中にエラーが発生した場合、そのエラーはフックの実行を終了させません。そのかわりにエラーは黙殺され、エラーが発生した関数はそのフックから取り除かれます。"

#. type: Plain text
#: commands.texi.orig:101
msgid "A request coming into the Emacs server (@pxref{Emacs Server,,, emacs, The GNU Emacs Manual}) runs these two hooks just as a keyboard command does."
msgstr "Emacsサーバー(@ref{Emacs Server,,, emacs, The GNU Emacs Manual}を参照)に届くリクエストは、キーボードコマンドが行うのと同じように、これらの2つのフックを実行します。"

#. type: cindex
#: commands.texi.orig:104
#, no-wrap
msgid "defining commands"
msgstr "defining commands"

#. type: cindex
#: commands.texi.orig:105
#, no-wrap
msgid "commands, defining"
msgstr "commands, defining"

#. type: cindex
#: commands.texi.orig:106
#, no-wrap
msgid "functions, making them interactive"
msgstr "functions, making them interactive"

#. type: cindex
#: commands.texi.orig:107
#, no-wrap
msgid "interactive function"
msgstr "interactive function"

#. type: Plain text
#: commands.texi.orig:118
msgid "The special form @code{interactive} turns a Lisp function into a command.  The @code{interactive} form must be located at top-level in the function body, usually as the first form in the body; this applies to both lambda expressions (@pxref{Lambda Expressions}) and @code{defun} forms (@pxref{Defining Functions}).  This form does nothing during the actual execution of the function; its presence serves as a flag, telling the Emacs command loop that the function can be called interactively.  The argument of the @code{interactive} form specifies how the arguments for an interactive call should be read."
msgstr "スペシャルフォーム@code{interactive}はLisp関数をコマンドに変えます。@code{interactive}フォームは関数ボディーのトップレベルに置かなければならず、通常はボディー内の最初のフォームとして記述されます。これはラムダ式(@ref{Lambda Expressions}を参照)と@code{defun}(@ref{Defining Functions}を参照)の両方を受け入れます。このフォームは、その関数が実際に実行される間は何も行いません。このフォームの存在はフラグとしての役割りをもち、Emacsコマンドループにたいしてその関数がインタラクティブに呼び出せることを告げます。@code{interactive}フォームの引数は、インタラクティブな呼び出しが引数を読み取る方法を指定します。"

#. type: cindex
#: commands.texi.orig:119
#, no-wrap
msgid "@code{interactive-form} property"
msgstr "@code{interactive-form} property"

#. type: Plain text
#: commands.texi.orig:124
msgid "Alternatively, an @code{interactive} form may be specified in a function symbol's @code{interactive-form} property.  A non-@code{nil} value for this property takes precedence over any @code{interactive} form in the function body itself.  This feature is seldom used."
msgstr "@code{interactive}フォームのかわりに、関数シンボルの@code{interactive-form}プロパティで指定されることもあります。このプロパティが非@code{nil}値の場合、関数ボディー内の@code{interactive}フォームより優先されます。この機能はほとんど使用されません。"

#. type: cindex
#: commands.texi.orig:125
#, no-wrap
msgid "@code{interactive-only} property"
msgstr "@code{interactive-only} property"

#. type: Plain text
#: commands.texi.orig:135
msgid "Sometimes, a function is only intended to be called interactively, never directly from Lisp.  In that case, give the function a non-@code{nil} @code{interactive-only} property.  This causes the byte compiler to warn if the command is called from Lisp.  The value of the property can be: a string, which the byte-compiler will use directly in its warning (it should end with a period, and not start with a capital, e.g. ``use @dots{} instead.''); @code{t}; any other symbol, which should be an alternative function to use in Lisp code."
msgstr "インタラクティブに呼び出されることだけを意図していて、決してLispから直接呼び出されない関数が時折あります。この場合は、その関数の@code{interactive-only}プロパティに非@code{nil}を与えます。これにより、そのコマンドがLispから呼び出された場合に、バイトコンパイラーが警告を発します。このプロパティの値には、文字列、@code{t}、または任意のシンボルを指定できます。文字列の場合、それはバイトコンパイラーによる警告内で直接使用されます(最初は大文字でなくピリオドで終端される文字列。たとえば``use @dots{} instead.'')。シンボルの場合、それはLispコード内で使用されるかわりの関数です。"

#. type: node
#: commands.texi.orig:142 commands.texi.orig:144
#, no-wrap
msgid "Using Interactive"
msgstr "Using Interactive"

#. type: menuentry
#: commands.texi.orig:142
msgid "General rules for @code{interactive}."
msgstr "@code{interactive}にたいする一般的なルール。"

#. type: node
#: commands.texi.orig:142 commands.texi.orig:306
#, no-wrap
msgid "Interactive Codes"
msgstr "Interactive Codes"

#. type: menuentry
#: commands.texi.orig:142
msgid "The standard letter-codes for reading arguments in various ways."
msgstr "さまざまな方法で引数を読み取る標準的な文字のコード。"

#. type: node
#: commands.texi.orig:142 commands.texi.orig:532
#, no-wrap
msgid "Interactive Examples"
msgstr "Interactive Examples"

#. type: menuentry
#: commands.texi.orig:142
msgid "Examples of how to read interactive arguments."
msgstr "インタラクティブ引数を読み取る方法の例。"

#. type: node
#: commands.texi.orig:142 commands.texi.orig:584
#, no-wrap
msgid "Generic Commands"
msgstr "Generic Commands"

#. type: menuentry
#: commands.texi.orig:142
msgid "Select among command alternatives."
msgstr "コマンド候補からの選択。"

#. type: subsection
#: commands.texi.orig:145
#, no-wrap
msgid "Using @code{interactive}"
msgstr "Using @code{interactive}"

#. type: cindex
#: commands.texi.orig:146
#, no-wrap
msgid "arguments, interactive entry"
msgstr "arguments, interactive entry"

#. type: cindex
#: commands.texi.orig:147
#, no-wrap
msgid "interactive spec, using"
msgstr "interactive spec, using"

#. type: Plain text
#: commands.texi.orig:152
msgid "This section describes how to write the @code{interactive} form that makes a Lisp function an interactively-callable command, and how to examine a command's @code{interactive} form."
msgstr "このセクションでは、Lisp関数をインタラクティブに呼び出し可能なコマンドにする@code{interactive}フォームの記述方法と、コマンドの@code{interactive}フォームの検証方法について説明します。"

#. type: defspec
#: commands.texi.orig:153
#, no-wrap
msgid "interactive arg-descriptor"
msgstr "interactive arg-descriptor"

#. type: defspec
#: commands.texi.orig:159
msgid "This special form declares that a function is a command, and that it may therefore be called interactively (via @kbd{M-x} or by entering a key sequence bound to it).  The argument @var{arg-descriptor} declares how to compute the arguments to the command when the command is called interactively."
msgstr "このスペシャルフォームは関数がコマンドであり、したがって(@kbd{M-x}を通じて、またはそのコマンドにバインドされたキーシーケンスのエンターすることにより)インタラクティブに呼び出されるかもしれないことを宣言する。引数@var{arg-descriptor}は、そのコマンドがインタラクティブに呼び出されたときに引数を計算する方法を宣言する。"

#. type: defspec
#: commands.texi.orig:163
msgid "A command may be called from Lisp programs like any other function, but then the caller supplies the arguments and @var{arg-descriptor} has no effect."
msgstr "コマンドは他の関数と同じようにLisp関数から呼び出されるかもしれないが、その場合呼び出し側は引数を提供し、@var{arg-descriptor}は効果をもたない。"

#. type: cindex
#: commands.texi.orig:164
#, no-wrap
msgid "@code{interactive-form}, symbol property"
msgstr "@code{interactive-form}, symbol property"

#. type: defspec
#: commands.texi.orig:173
msgid "The @code{interactive} form must be located at top-level in the function body, or in the function symbol's @code{interactive-form} property (@pxref{Symbol Properties}).  It has its effect because the command loop looks for it before calling the function (@pxref{Interactive Call}).  Once the function is called, all its body forms are executed; at this time, if the @code{interactive} form occurs within the body, the form simply returns @code{nil} without even evaluating its argument."
msgstr "@code{interactive}フォームは関数ボディー内のトップレベルに置くか、関数シンボルの@code{interactive-form}プロパティ((@ref{Symbol Properties})を参照)になければならない。これはコマンドループが関数を呼び出す前にinteractiveフォームを調べることにより効果をもつ(@ref{Interactive Call}を参照)。一度関数が呼び出されると関数ボディー内のすべてのフォームが実行される。このときボディー内に@code{interactive}フォームが出現しても、そのフォームは引数の評価さえされず、単に@code{nil}をリターンする。"

#. type: defspec
#: commands.texi.orig:181
msgid "By convention, you should put the @code{interactive} form in the function body, as the first top-level form.  If there is an @code{interactive} form in both the @code{interactive-form} symbol property and the function body, the former takes precedence.  The @code{interactive-form} symbol property can be used to add an interactive form to an existing function, or change how its arguments are processed interactively, without redefining the function."
msgstr "慣例により、@code{interactive}フォームは関数ボディー内の最初のトップレベルフォームとするべきである。@code{interactive}フォームがシンボルの@code{interactive-form}プロパティと関数ボディーの両方に存在する場合は、前者が優先される。@code{interactive-form}フォームは既存の関数にinteractiveフォームを追加したり、その関数を再定義することなく引数をインタラクティブに処理する方法を変更するために使用できる。"

#. type: Plain text
#: commands.texi.orig:184
msgid "There are three possibilities for the argument @var{arg-descriptor}:"
msgstr "引数@var{arg-descriptor}には3つの可能性があります:"

#. type: itemize
#: commands.texi.orig:190
msgid "It may be omitted or @code{nil}; then the command is called with no arguments.  This leads quickly to an error if the command requires one or more arguments."
msgstr "省略、または@code{nil}の場合、コマンドは引数なしで呼び出される。コマンドが1つ以上の引数を要求する場合は、すぐにエラーとなる。"

#. type: itemize
#: commands.texi.orig:197
msgid "It may be a string; its contents are a sequence of elements separated by newlines, one for each argument@footnote{Some elements actually supply two arguments.}.  Each element consists of a code character (@pxref{Interactive Codes}) optionally followed by a prompt (which some code characters use and some ignore).  Here is an example:"
msgstr "文字列の場合、その文字列の内容は改行で区切られた要素シーケンスであり、1つの要素が1つの引数に対応する@footnote{いくつかの要素は実際に2つの引数を提供します。}。各要素はコード文字(@ref{Interactive Codes}を参照)と、オプションでその後のプロンプト(ある文字はコード文字として使用され、コード文字としては無視されるものもある)により構成される。以下は例である:"

#. type: smallexample
#: commands.texi.orig:200
#, no-wrap
msgid "(interactive \"P\\nbFrobnicate buffer: \")\n"
msgstr "(interactive \"P\\nbFrobnicate buffer: \")\n"

#. type: itemize
#: commands.texi.orig:208
msgid "The code letter @samp{P} sets the command's first argument to the raw command prefix (@pxref{Prefix Command Arguments}).  @samp{bFrobnicate buffer: } prompts the user with @samp{Frobnicate buffer: } to enter the name of an existing buffer, which becomes the second and final argument."
msgstr "コード文字@samp{P}はそのコマンドの1つ目の引数をrawコマンドプレフィクス(@ref{Prefix Command Arguments}を参照)にセットする。@samp{bFrobnicate buffer: }は、ユーザーに@samp{Frobnicate buffer: }のプロンプトを示して既存のバッファーの名前の入力を促し、これは2つ目かつ最後の引数になる。"

#. type: itemize
#: commands.texi.orig:214
msgid "The prompt string can use @samp{%} to include previous argument values (starting with the first argument) in the prompt.  This is done using @code{format} (@pxref{Formatting Strings}).  For example, here is how you could read the name of an existing buffer followed by a new name to give to that buffer:"
msgstr "プロンプト文字列には、プロンプト内の前の引数(1つ目の引数から始まる)の値を含めるために@samp{%}を使用できる。これは@code{format}(@ref{Formatting Strings}を参照)を使用して行われる。たとえば、以下は既存のバッファーの名前を読み取り、その後にそのバッファーに与える新たな名前を読み取る例である:"

#. type: group
#: commands.texi.orig:218
#, no-wrap
msgid "(interactive \"bBuffer to rename: \\nsRename buffer %s to: \")\n"
msgstr "(interactive \"bBuffer to rename: \\nsRename buffer %s to: \")\n"

#. type: cindex
#: commands.texi.orig:221
#, no-wrap
msgid "@samp{*} in @code{interactive}"
msgstr "@samp{*} in @code{interactive}"

#. type: cindex
#: commands.texi.orig:222
#, no-wrap
msgid "read-only buffers in interactive"
msgstr "read-only buffers in interactive"

#. type: itemize
#: commands.texi.orig:225
msgid "If @samp{*} appears at the beginning of the string, then an error is signaled if the buffer is read-only."
msgstr "文字列の先頭@samp{*}がある場合、そのバッファーが読み取り専用の場合にエラーがシグナルされる。"

#. type: cindex
#: commands.texi.orig:226
#, no-wrap
msgid "@samp{@@} in @code{interactive}"
msgstr "@samp{@@} in @code{interactive}"

#. type: itemize
#: commands.texi.orig:231
msgid "If @samp{@@} appears at the beginning of the string, and if the key sequence used to invoke the command includes any mouse events, then the window associated with the first of those events is selected before the command is run."
msgstr "文字列の先頭が@samp{@@}で、そのコマンドの呼び出しに使用されたキーシーケンスに何らかのマウスイベントが含まれる場合は、そのコマンドを実行する前に、それらのうち最初のイベントに結びつくウィンドウが選択される。"

#. type: cindex
#: commands.texi.orig:232
#, no-wrap
msgid "@samp{^} in @code{interactive}"
msgstr "@samp{^} in @code{interactive}"

#. type: cindex
#: commands.texi.orig:233
#, no-wrap
msgid "shift-selection, and @code{interactive} spec"
msgstr "shift-selection, and @code{interactive} spec"

#. type: itemize
#: commands.texi.orig:242
msgid "If @samp{^} appears at the beginning of the string, and if the command was invoked through @dfn{shift-translation}, set the mark and activate the region temporarily, or extend an already active region, before the command is run.  If the command was invoked without shift-translation, and the region is temporarily active, deactivate the region before the command is run.  Shift-translation is controlled on the user level by @code{shift-select-mode}; see @ref{Shift Selection,,, emacs, The GNU Emacs Manual}."
msgstr "文字列の先頭が@samp{^}で、そのコマンドが@dfn{シフト転換(shift-translation)}を通じて呼び出された場合は、そのコマンドを実行する前に、マークをセットして一時的にリージョンをアクティブにするか、すでにアクティブなリージョンを拡張する。コマンドがシフト転換なしで呼び出されて、リージョンが一時的にアクティブな場合は、コマンドを実行する前に、そのリージョンを非アクティブにする。シフト転換は@code{shift-select-mode}により、ユーザーレベルで制御される。@ref{Shift Selection,,, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: itemize
#: commands.texi.orig:247
msgid "You can use @samp{*}, @samp{@@}, and @code{^} together; the order does not matter.  Actual reading of arguments is controlled by the rest of the prompt string (starting with the first character that is not @samp{*}, @samp{@@}, or @samp{^})."
msgstr "@samp{*}、@samp{@@}、@code{^}はともに使用でき、その場合は順序に意味はない。実際の引数の読み取りは残りのプロンプト文字列(@samp{*}、@samp{@@}、@code{^}以外の最初の文字以降)により制御される。"

#. type: itemize
#: commands.texi.orig:254
msgid "It may be a Lisp expression that is not a string; then it should be a form that is evaluated to get a list of arguments to pass to the command.  Usually this form will call various functions to read input from the user, most often through the minibuffer (@pxref{Minibuffers})  or directly from the keyboard (@pxref{Reading Input})."
msgstr "文字列ではないLisp式の場合は、そのコマンドに渡す引数リストを取得するために評価されるフォームである。このフォームは通常、ユーザーから入力を読み取るためにさまざまな関数を呼び出し、それにはほとんどの場合はミニバッファー(@ref{Minibuffers}を参照)を通じてか、キーボードから直接読み取りを行う(@ref{Reading Input}を参照)。"

#. type: itemize
#: commands.texi.orig:261
msgid "Providing point or the mark as an argument value is also common, but if you do this @emph{and} read input (whether using the minibuffer or not), be sure to get the integer values of point or the mark after reading.  The current buffer may be receiving subprocess output; if subprocess output arrives while the command is waiting for input, it could relocate point and the mark."
msgstr "引数値としてポイントやマークを提供するのも一般的だが、何かを行い@emph{かつ}(ミニバッファー使用の有無に関わらず)入力を読み取る場合は、読み取りの前にポイント値またはマーク値の整数を確実に取得しておくこと。カレントバッファーはサブプロセスの出力を受信するかもしれず、コマンドが入力を待つ間にサブプロセス出力が到着した場合、ポイントおよびマークの再配置が起こり得る。"

#. type: itemize
#: commands.texi.orig:263
msgid "Here's an example of what @emph{not} to do:"
msgstr "以下は行っては@emph{いけない}例である:"

#. type: smallexample
#: commands.texi.orig:268
#, no-wrap
msgid ""
"(interactive\n"
" (list (region-beginning) (region-end)\n"
"       (read-string \"Foo: \" nil 'my-history)))\n"
msgstr ""
"(interactive\n"
" (list (region-beginning) (region-end)\n"
"       (read-string \"Foo: \" nil 'my-history)))\n"

#. type: itemize
#: commands.texi.orig:273
msgid "Here's how to avoid the problem, by examining point and the mark after reading the keyboard input:"
msgstr "これにたいし、以下はキーボード入力を読み取った後にポイントとマークを調べることにより、上記の問題を避ける例である:"

#. type: smallexample
#: commands.texi.orig:278
#, no-wrap
msgid ""
"(interactive\n"
" (let ((string (read-string \"Foo: \" nil 'my-history)))\n"
"   (list (region-beginning) (region-end) string)))\n"
msgstr ""
"(interactive\n"
" (let ((string (read-string \"Foo: \" nil 'my-history)))\n"
"   (list (region-beginning) (region-end) string)))\n"

#. type: itemize
#: commands.texi.orig:285
msgid "@strong{Warning:} the argument values should not include any data types that can't be printed and then read.  Some facilities save @code{command-history} in a file to be read in the subsequent sessions; if a command's arguments contain a data type that prints using @samp{#<@dots{}>} syntax, those facilities won't work."
msgstr "@strong{警告:} 引数値にはプリントや読み取りが不可能なデータ型を含めるべきではない。いくつかの機能は後続のセッションに読み込ませるために@code{command-history}をファイルに保存する。コマンドの引数に@samp{#<@dots{}>}構文を使用してプリントされるデータ型が含まれる場合、それらの機能は動作しないだろう。"

#. type: itemize
#: commands.texi.orig:293
msgid "There are, however, a few exceptions: it is ok to use a limited set of expressions such as @code{(point)}, @code{(mark)}, @code{(region-beginning)}, and @code{(region-end)}, because Emacs recognizes them specially and puts the expression (rather than its value) into the command history.  To see whether the expression you wrote is one of these exceptions, run the command, then examine @code{(car command-history)}."
msgstr "しかしこれには少数の例外がある。@code{(point)}、@code{(mark)}、@code{(region-beginning)}、@code{(region-end)}などの一連の式に限定して使用するのに問題はない。なぜならEmacsはこれらを特別に認識して、コマンドヒストリー内に(値ではなく)その式を配すからである。記述した式がこれらの例外に含まれるかどうか確認するには、コマンドを実行した後に@code{(car command-history)}を調べればよい。"

#. type: cindex
#: commands.texi.orig:295
#, no-wrap
msgid "examining the @code{interactive} form"
msgstr "examining the @code{interactive} form"

#. type: defun
#: commands.texi.orig:296
#, no-wrap
msgid "interactive-form function"
msgstr "interactive-form function"

#. type: defun
#: commands.texi.orig:304
msgid "This function returns the @code{interactive} form of @var{function}.  If @var{function} is an interactively callable function (@pxref{Interactive Call}), the value is the command's @code{interactive} form @code{(interactive @var{spec})}, which specifies how to compute its arguments.  Otherwise, the value is @code{nil}.  If @var{function} is a symbol, its function definition is used."
msgstr "この関数は@var{function}の@code{interactive}フォームをリターンする。@var{function}がインタラクティブに呼び出し可能な関数(@ref{Interactive Call}を参照)の場合、値はそのコマンドの引数を計算する方法を指定する@code{interactive}フォーム(@code{(interactive @var{spec})})である。それ以外では値は@code{nil}である。@var{function}がシンボルの場合は、そのシンボルの関数定義が使用される。"

#. type: subsection
#: commands.texi.orig:307
#, no-wrap
msgid "Code Characters for @code{interactive}"
msgstr "Code Characters for @code{interactive}"

#. type: cindex
#: commands.texi.orig:308
#, no-wrap
msgid "interactive code description"
msgstr "interactive code description"

#. type: cindex
#: commands.texi.orig:309
#, no-wrap
msgid "description for interactive codes"
msgstr "description for interactive codes"

#. type: cindex
#: commands.texi.orig:310
#, no-wrap
msgid "codes, interactive, description of"
msgstr "codes, interactive, description of"

#. type: cindex
#: commands.texi.orig:311
#, no-wrap
msgid "characters for interactive codes"
msgstr "characters for interactive codes"

#. type: Plain text
#: commands.texi.orig:315
msgid "The code character descriptions below contain a number of key words, defined here as follows:"
msgstr "ここで説明されているコード文字には、以下で定義されるいくつかのキーワードが含まれています:"

#. type: item
#: commands.texi.orig:317
#, no-wrap
msgid "Completion"
msgstr "Completion"

#. type: cindex
#: commands.texi.orig:318
#, no-wrap
msgid "interactive completion"
msgstr "interactive completion"

#. type: table
#: commands.texi.orig:322
msgid "Provide completion.  @key{TAB}, @key{SPC}, and @key{RET} perform name completion because the argument is read using @code{completing-read} (@pxref{Completion}).  @kbd{?} displays a list of possible completions."
msgstr "補完を提供する。@key{TAB}、@key{SPC}、@key{RET}は@code{completing-read}(@ref{Completion}を参照)を使用して引数を読み取り、名前の補完を行う。@kbd{?}で利用可能な補完リストを表示する。"

#. type: item
#: commands.texi.orig:323
#, no-wrap
msgid "Existing"
msgstr "Existing"

#. type: table
#: commands.texi.orig:327
msgid "Require the name of an existing object.  An invalid name is not accepted; the commands to exit the minibuffer do not exit if the current input is not valid."
msgstr "既存オブジェクトの名前を要求する。無効な名前は受け付けられない。カレント入力が有効でない場合、ミニバッファーをexitするコマンドはexitしない。"

#. type: item
#: commands.texi.orig:328
#, no-wrap
msgid "Default"
msgstr "Default"

#. type: cindex
#: commands.texi.orig:329
#, no-wrap
msgid "default argument string"
msgstr "default argument string"

#. type: table
#: commands.texi.orig:332
msgid "A default value of some sort is used if the user enters no text in the minibuffer.  The default depends on the code character."
msgstr "ユーザーがテキストを何もエンターしなかった場合は、ある種のデフォルト値が使用される。デフォルトはコード文字に依存する。"

#. type: item
#: commands.texi.orig:333
#, no-wrap
msgid "No I/O"
msgstr "No I/O"

#. type: table
#: commands.texi.orig:337
msgid "This code letter computes an argument without reading any input.  Therefore, it does not use a prompt string, and any prompt string you supply is ignored."
msgstr "このコード文字は入力を読み取らずに引数を計算する。したがってプロンプト文字列を使用せず、与えられたプロンプト文字列は無視される。"

#. type: table
#: commands.texi.orig:340
msgid "Even though the code letter doesn't use a prompt string, you must follow it with a newline if it is not the last code character in the string."
msgstr "たとえこのコード文字がプロンプト文字列を使用しなくても、これが文字列内で最後のコード文字でない場合は、その後に改行を付けなければならない。"

#. type: item
#: commands.texi.orig:341
#, no-wrap
msgid "Prompt"
msgstr "Prompt"

#. type: table
#: commands.texi.orig:344
msgid "A prompt immediately follows the code character.  The prompt ends either with the end of the string or with a newline."
msgstr "コード文字の直後にプロンプトが続く。プロンプトの終端は文字列の終端、または改行。"

#. type: item
#: commands.texi.orig:345
#, no-wrap
msgid "Special"
msgstr "Special"

#. type: table
#: commands.texi.orig:349
msgid "This code character is meaningful only at the beginning of the interactive string, and it does not look for a prompt or a newline.  It is a single, isolated character."
msgstr "このコード文字はインタラクティブ文字列の先頭にあるときのみ意味があり、プロンプトおよび改行を要求しない。単一の独立した文字である。"

#. type: cindex
#: commands.texi.orig:351
#, no-wrap
msgid "reading interactive arguments"
msgstr "reading interactive arguments"

#. type: Plain text
#: commands.texi.orig:353
msgid "Here are the code character descriptions for use with @code{interactive}:"
msgstr "以下は@code{interactive}とともに使用されるコード文字です:"

#. type: item
#: commands.texi.orig:355
#, no-wrap
msgid "*"
msgstr "*"

#. type: table
#: commands.texi.orig:357
msgid "Signal an error if the current buffer is read-only.  Special."
msgstr "カレントバッファーが読み取り専用の場合はエラーをシグナルする。[Special]"

#. type: item
#: commands.texi.orig:358
#, no-wrap
msgid "@@"
msgstr "@@"

#. type: table
#: commands.texi.orig:361
msgid "Select the window mentioned in the first mouse event in the key sequence that invoked this command.  Special."
msgstr "このコマンドを呼び出したキーシーケンス内の最初のマウスイベントに関連するウィンドウを選択する。[Special]"

#. type: item
#: commands.texi.orig:362
#, no-wrap
msgid "^"
msgstr "^"

#. type: table
#: commands.texi.orig:368
msgid "If the command was invoked through shift-translation, set the mark and activate the region temporarily, or extend an already active region, before the command is run.  If the command was invoked without shift-translation, and the region is temporarily active, deactivate the region before the command is run.  Special."
msgstr "シフト転換を通じてコマンドが呼び出された場合はコマンドを実行する前に、マークをセットして一時的にリージョンをアクティブにするか、すでにリージョンがアクティブな場合はリージョンを拡張する。シフト転換を通じずにコマンドが呼び出され、リージョンが一時的にアクティブな場合は、コマンドを実行する前にそのリージョンを非アクティブにする。[Special]"

#. type: item
#: commands.texi.orig:369
#, no-wrap
msgid "a"
msgstr "a"

#. type: table
#: commands.texi.orig:372
msgid "A function name (i.e., a symbol satisfying @code{fboundp}).  Existing, Completion, Prompt."
msgstr "関数名(たとえば@code{fboundp}を満足するシンボル)。[Existing]、[Completion]、[Prompt]"

#. type: item
#: commands.texi.orig:373
#, no-wrap
msgid "b"
msgstr "b"

#. type: table
#: commands.texi.orig:377
msgid "The name of an existing buffer.  By default, uses the name of the current buffer (@pxref{Buffers}).  Existing, Completion, Default, Prompt."
msgstr ""
"既存バッファーの名前。\n"
"The name of an existing buffer.\n"
"デフォルトではカレントバッファー(@ref{Buffers}を参照)の名前を使用する。[Existing]、[Completion]、[Default]、[Prompt]"

#. type: item
#: commands.texi.orig:378
#, no-wrap
msgid "B"
msgstr "B"

#. type: table
#: commands.texi.orig:382
msgid "A buffer name.  The buffer need not exist.  By default, uses the name of a recently used buffer other than the current buffer.  Completion, Default, Prompt."
msgstr "バッファー名。そのバッファーが存在する必要はない。デフォルトではカレントバッファーではなくもっとも最近使用されたバッファーの名前を使用する。[Completion]、[Default]、[Prompt]"

#. type: item
#: commands.texi.orig:383
#, no-wrap
msgid "c"
msgstr "c"

#. type: table
#: commands.texi.orig:385
msgid "A character.  The cursor does not move into the echo area.  Prompt."
msgstr "文字。カーソルはエコーエリアに移動しない。[Prompt]"

#. type: item
#: commands.texi.orig:386
#, no-wrap
msgid "C"
msgstr "C"

#. type: table
#: commands.texi.orig:389
msgid "A command name (i.e., a symbol satisfying @code{commandp}).  Existing, Completion, Prompt."
msgstr "コマンド名(たとえば@code{commandp}を満足するシンボル)。[Existing]、[Completion]、[Prompt]"

#. type: item
#: commands.texi.orig:390
#, no-wrap
msgid "d"
msgstr "d"

#. type: cindex
#: commands.texi.orig:391
#, no-wrap
msgid "position argument"
msgstr "position argument"

#. type: table
#: commands.texi.orig:393
msgid "The position of point, as an integer (@pxref{Point}).  No I/O."
msgstr "ポイント位置の整数(@ref{Point}を参照)。[No I/O]"

#. type: item
#: commands.texi.orig:394
#, no-wrap
msgid "D"
msgstr "D"

#. type: table
#: commands.texi.orig:398
msgid "A directory name.  The default is the current default directory of the current buffer, @code{default-directory} (@pxref{File Name Expansion}).  Existing, Completion, Default, Prompt."
msgstr "ディレクトリー名。デフォルトはカレントバッファーのカレントのデフォルトディレクトリー@code{default-directory}(@ref{File Name Expansion}を参照)。[Existing]、[Completion]、[Default]、[Prompt]"

#. type: item
#: commands.texi.orig:399
#, no-wrap
msgid "e"
msgstr "e"

#. type: table
#: commands.texi.orig:403
msgid "The first or next non-keyboard event in the key sequence that invoked the command.  More precisely, @samp{e} gets events that are lists, so you can look at the data in the lists.  @xref{Input Events}.  No I/O."
msgstr "そのコマンドを呼び出したキーシーケンス内の1つ目、または2つ目の非キーボードイベント。より正確には、@samp{e}はリストとしてイベントを取得するので、リスト内のデータを調べることができる。@ref{Input Events}を参照のこと。[No I/O]"

#. type: table
#: commands.texi.orig:408
msgid "You use @samp{e} for mouse events and for special system events (@pxref{Misc Events}).  The event list that the command receives depends on the event.  @xref{Input Events}, which describes the forms of the list for each event in the corresponding subsections."
msgstr "@samp{e}はマウスイベント、および特別なシステムイベント(@ref{Misc Events}を参照)にたいして使用する。コマンドが受け取るイベントリストは、そのイベントに依存する。@ref{Input Events}ではそれぞれのイベントのリスト形式を、対応するサブセクションでそれぞれ説明しているので、参照のこと。"

#. type: table
#: commands.texi.orig:414
msgid "You can use @samp{e} more than once in a single command's interactive specification.  If the key sequence that invoked the command has @var{n} events that are lists, the @var{n}th @samp{e} provides the @var{n}th such event.  Events that are not lists, such as function keys and @acronym{ASCII} characters, do not count where @samp{e} is concerned."
msgstr "1つのコマンドのinteractive仕様の中で、@samp{e}を複数回使用できる。そのコマンドを呼び出したキーシーケンスがイベント@var{n}(リスト)をもつ場合は、@samp{e}の@var{n}番目がそのイベントを提供する。関数キーや@acronym{ASCII}文字のようなリスト以外のイベントは、@samp{e}に関連するイベントとしてカウントされない。"

#. type: item
#: commands.texi.orig:415
#, no-wrap
msgid "f"
msgstr "f"

#. type: table
#: commands.texi.orig:419
msgid "A file name of an existing file (@pxref{File Names}).  The default directory is @code{default-directory}.  Existing, Completion, Default, Prompt."
msgstr "既存ファイルのファイル名(@ref{File Names}を参照)。デフォルトのディレクトリーは@code{default-directory}。[Existing]、[Completion]、[Default]、[Prompt]"

#. type: item
#: commands.texi.orig:420
#, no-wrap
msgid "F"
msgstr "F"

#. type: table
#: commands.texi.orig:422
msgid "A file name.  The file need not exist.  Completion, Default, Prompt."
msgstr "ファイル名。ファイルが存在している必要はない。[Completion]、[Default]、[Prompt]"

#. type: item
#: commands.texi.orig:423
#, no-wrap
msgid "G"
msgstr "G"

#. type: table
#: commands.texi.orig:427
msgid "A file name.  The file need not exist.  If the user enters just a directory name, then the value is just that directory name, with no file name within the directory added.  Completion, Default, Prompt."
msgstr "ファイル名。ファイルが存在している必要はない。ユーザーがディレクトリー名だけをエンターした場合、値はそのディレクトリー名となり、そのディレクトリー名にファイル名は追加されない。[Completion]、[Default]、[Prompt]"

#. type: item
#: commands.texi.orig:428
#, no-wrap
msgid "i"
msgstr "i"

#. type: table
#: commands.texi.orig:431
msgid "An irrelevant argument.  This code always supplies @code{nil} as the argument's value.  No I/O."
msgstr "無関係な引数。このコード文字は引数値として常に@code{nil}を与える。[No I/O]"

#. type: item
#: commands.texi.orig:432
#, no-wrap
msgid "k"
msgstr "k"

#. type: table
#: commands.texi.orig:437
msgid "A key sequence (@pxref{Key Sequences}).  This keeps reading events until a command (or undefined command) is found in the current key maps.  The key sequence argument is represented as a string or vector.  The cursor does not move into the echo area.  Prompt."
msgstr "キーシーケンス(@ref{Key Sequences}を参照)。これはカレントキーマップ内でコマンド(または未定義のコマンド)が見つかるまで、イベントを読み取り続ける。キーシーケンス引数は文字列、またはベクターで表される。カーソルはエコーエリアに移動しない。[Prompt]"

#. type: table
#: commands.texi.orig:441
msgid "If @samp{k} reads a key sequence that ends with a down-event, it also reads and discards the following up-event.  You can get access to that up-event with the @samp{U} code character."
msgstr "@samp{k}が(マウスの)down-eventで終わるキーシーケンスを読み取った場合は、後続の(マウスの)up-eventも読み取り、それを捨てる。コード文字@samp{U}により、up-eventへのアクセスを得ることができる。"

#. type: table
#: commands.texi.orig:444
msgid "This kind of input is used by commands such as @code{describe-key} and @code{global-set-key}."
msgstr "この種の入力は、@code{describe-key}や@code{global-set-key}のようなコマンドにより使用される。"

#. type: item
#: commands.texi.orig:445
#, no-wrap
msgid "K"
msgstr "K"

#. type: table
#: commands.texi.orig:450
msgid "A key sequence, whose definition you intend to change.  This works like @samp{k}, except that it suppresses, for the last input event in the key sequence, the conversions that are normally used (when necessary) to convert an undefined key into a defined one."
msgstr "キーシーケンス。その定義は変更されることを意図している。これは@samp{k}と同じように機能するが、キーシーケンス内の最後の入力イベントにたいして、通常(必要なら)使用される未定義キーから定義済みキーへの変換を抑制する。"

#. type: item
#: commands.texi.orig:451
#, no-wrap
msgid "m"
msgstr "m"

#. type: cindex
#: commands.texi.orig:452
#, no-wrap
msgid "marker argument"
msgstr "marker argument"

#. type: table
#: commands.texi.orig:454
msgid "The position of the mark, as an integer.  No I/O."
msgstr "マーク位置の整数。[No I/O]"

#. type: item
#: commands.texi.orig:455
#, no-wrap
msgid "M"
msgstr "M"

#. type: table
#: commands.texi.orig:459
msgid "Arbitrary text, read in the minibuffer using the current buffer's input method, and returned as a string (@pxref{Input Methods,,, emacs, The GNU Emacs Manual}).  Prompt."
msgstr "任意のテキスト。ミニバッファー内でカレントバッファーの入力メソッド(@ref{Input Methods,,, emacs, The GNU Emacs Manual}を参照)を使用して読み取りを行い、それを文字列でリターンする。[Prompt]"

#. type: item
#: commands.texi.orig:460
#, no-wrap
msgid "n"
msgstr "n"

#. type: table
#: commands.texi.orig:464
msgid "A number, read with the minibuffer.  If the input is not a number, the user has to try again.  @samp{n} never uses the prefix argument.  Prompt."
msgstr "数字。ミニバッファーで読み取られる。入力が数字でない場合、ユーザーは再試行する必要がある。@samp{n}は決してプレフィクス引数を使用しない。[Prompt]"

#. type: item
#: commands.texi.orig:465
#, no-wrap
msgid "N"
msgstr "N"

#. type: table
#: commands.texi.orig:469
msgid "The numeric prefix argument; but if there is no prefix argument, read a number as with @kbd{n}.  The value is always a number.  @xref{Prefix Command Arguments}.  Prompt."
msgstr "数引数(numeric prefix argument)。ただしプレフィクス引数がない場合は、@kbd{n}のように数字を読み取る。値は常に数字。@ref{Prefix Command Arguments}を参照のこと。[Prompt]"

#. type: item
#: commands.texi.orig:470
#, no-wrap
msgid "p"
msgstr "p"

#. type: cindex
#: commands.texi.orig:471
#, no-wrap
msgid "numeric prefix argument usage"
msgstr "numeric prefix argument usage"

#. type: table
#: commands.texi.orig:474
msgid "The numeric prefix argument.  (Note that this @samp{p} is lower case.)  No I/O."
msgstr "数引数()これは小文字の@samp{p}であることに注意)。[No I/O]"

#. type: item
#: commands.texi.orig:475
#, no-wrap
msgid "P"
msgstr "P"

#. type: cindex
#: commands.texi.orig:476
#, no-wrap
msgid "raw prefix argument usage"
msgstr "raw prefix argument usage"

#. type: table
#: commands.texi.orig:479
msgid "The raw prefix argument.  (Note that this @samp{P} is upper case.)  No I/O."
msgstr "rawプレフィクス引数(これは大文字の@samp{P}であることに注意)。[No I/O]"

#. type: item
#: commands.texi.orig:480
#, no-wrap
msgid "r"
msgstr "r"

#. type: cindex
#: commands.texi.orig:481
#, no-wrap
msgid "region argument"
msgstr "region argument"

#. type: table
#: commands.texi.orig:485
msgid "Point and the mark, as two numeric arguments, smallest first.  This is the only code letter that specifies two successive arguments rather than one.  No I/O."
msgstr "2つの数引数(ポイントとマーク)。小さいほうが先。これは1つではなく連続する2つの引数を指定する唯一のコード文字である。[No I/O]"

#. type: item
#: commands.texi.orig:486
#, no-wrap
msgid "s"
msgstr "s"

#. type: table
#: commands.texi.orig:491
msgid "Arbitrary text, read in the minibuffer and returned as a string (@pxref{Text from Minibuffer}).  Terminate the input with either @kbd{C-j} or @key{RET}.  (@kbd{C-q} may be used to include either of these characters in the input.)  Prompt."
msgstr "任意のテキスト。ミニバッファー内で読み取りを行い文字列としてリターンする(@ref{Text from Minibuffer}を参照)。@kbd{C-j}か@key{RET}で入力を終端する(これらの文字を入力に含めるために@kbd{C-q}が使用されるかもしれない)。[Prompt]"

#. type: item
#: commands.texi.orig:492
#, no-wrap
msgid "S"
msgstr "S"

#. type: table
#: commands.texi.orig:497
msgid "An interned symbol whose name is read in the minibuffer.  Terminate the input with either @kbd{C-j} or @key{RET}.  Other characters that normally terminate a symbol (e.g., whitespace, parentheses and brackets) do not do so here.  Prompt."
msgstr "インターン済みのシンボル。名前はミニバッファー内で読み取られる。@kbd{C-j}か@key{RET}で入力を終端する。ここでは、その他の通常はシンボルを終端する文字(たとえば空白文字、丸カッコ、角カッコ)では終端されない。[Prompt]"

#. type: item
#: commands.texi.orig:498
#, no-wrap
msgid "U"
msgstr "U"

#. type: table
#: commands.texi.orig:503
msgid "A key sequence or @code{nil}.  Can be used after a @samp{k} or @samp{K} argument to get the up-event that was discarded (if any)  after @samp{k} or @samp{K} read a down-event.  If no up-event has been discarded, @samp{U} provides @code{nil} as the argument.  No I/O."
msgstr "キーシーケンス、または@code{nil}。@samp{k}(または@samp{K})が読み取った後に、(もしあれば)捨てられる(マウスの)up-eventを取得するために、引数@samp{k}(または@samp{K})の後で使用され得る。捨てられたup-eventが存在しない場合、@samp{U}は引数として@code{nil}を提供する。[No I/O]"

#. type: item
#: commands.texi.orig:504
#, no-wrap
msgid "v"
msgstr "v"

#. type: table
#: commands.texi.orig:509
msgid "A variable declared to be a user option (i.e., satisfying the predicate @code{custom-variable-p}).  This reads the variable using @code{read-variable}.  @xref{Definition of read-variable}.  Existing, Completion, Prompt."
msgstr "ユーザーオプションとして宣言された変数(たとえば述語@code{custom-variable-p}を満足する)。これは@code{read-variable}を使用して変数を読み取る。@ref{Definition of read-variable}を参照のこと。[Existing]、[Completion]、[Prompt]"

#. type: item
#: commands.texi.orig:510
#, no-wrap
msgid "x"
msgstr "x"

#. type: table
#: commands.texi.orig:514
msgid "A Lisp object, specified with its read syntax, terminated with a @kbd{C-j} or @key{RET}.  The object is not evaluated.  @xref{Object from Minibuffer}.  Prompt."
msgstr "Lispオブジェクト。そのオブジェクトの入力構文により指定され、@kbd{C-j}か@key{RET}で終端される。オブジェクトは評価されない。@ref{Object from Minibuffer}を参照のこと。[Prompt]"

#. type: item
#: commands.texi.orig:515
#, no-wrap
msgid "X"
msgstr "X"

#. type: cindex
#: commands.texi.orig:516
#, no-wrap
msgid "evaluated expression argument"
msgstr "evaluated expression argument"

#. type: table
#: commands.texi.orig:520
msgid "A Lisp form's value.  @samp{X} reads as @samp{x} does, then evaluates the form so that its value becomes the argument for the command.  Prompt."
msgstr "Lispフォームの値。@samp{X}は@samp{x}のように読み取りを行いフォームを評価して、その値がコマンドの引数になる。[Prompt]"

#. type: item
#: commands.texi.orig:521
#, no-wrap
msgid "z"
msgstr "z"

#. type: table
#: commands.texi.orig:525
msgid "A coding system name (a symbol).  If the user enters null input, the argument value is @code{nil}.  @xref{Coding Systems}.  Completion, Existing, Prompt."
msgstr "コーディングシステム名(シンボル)。ユーザーがnull入力をエンターした場合、引数値は@code{nil}になる。@ref{Coding Systems}を参照のこと。[Completion]、[Existing]、[Prompt]"

#. type: item
#: commands.texi.orig:526
#, no-wrap
msgid "Z"
msgstr "Z"

#. type: table
#: commands.texi.orig:530
msgid "A coding system name (a symbol)---but only if this command has a prefix argument.  With no prefix argument, @samp{Z} provides @code{nil} as the argument value.  Completion, Existing, Prompt."
msgstr "コマンドにプレフィクス引数がある場合はコーディングシステム名。プレフィクス引数がない場合、@samp{Z}は引数値として@code{nil}を提供する。[Completion]、[Existing]、[Prompt]"

#. type: subsection
#: commands.texi.orig:533
#, no-wrap
msgid "Examples of Using @code{interactive}"
msgstr "Examples of Using @code{interactive}"

#. type: cindex
#: commands.texi.orig:534
#, no-wrap
msgid "examples of using @code{interactive}"
msgstr "examples of using @code{interactive}"

#. type: cindex
#: commands.texi.orig:535
#, no-wrap
msgid "@code{interactive}, examples of using"
msgstr "@code{interactive}, examples of using"

#. type: Plain text
#: commands.texi.orig:538
msgid "Here are some examples of @code{interactive}:"
msgstr "以下に@code{interactive}の例をいくつか挙げます:"

#. type: group
#: commands.texi.orig:545
#, no-wrap
msgid ""
"(defun foo1 ()              ; @r{@code{foo1} takes no arguments,}\n"
"    (interactive)           ;   @r{just moves forward two words.}\n"
"    (forward-word 2))\n"
"     @result{} foo1\n"
msgstr ""
"(defun foo1 ()              ; @r{@code{foo1}は1つの引数をとり}\n"
"    (interactive)           ;   @r{単に2単語分前に移動する。}\n"
"    (forward-word 2))\n"
"     @result{} foo1\n"

#. type: group
#: commands.texi.orig:554
#, no-wrap
msgid ""
"(defun foo2 (n)             ; @r{@code{foo2} takes one argument,}\n"
"    (interactive \"^p\")      ;   @r{which is the numeric prefix.}\n"
"                            ; @r{under @code{shift-select-mode},}\n"
"                            ;   @r{will activate or extend region.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo2\n"
msgstr ""
"(defun foo2 (n)             ; @r{@code{foo2}は引数を1つとる}\n"
"    (interactive \"^p\")      ;   @r{引数は数引数}\n"
"                            ; @r{@code{shift-select-mode}では、}\n"
"                            ;   @r{リージョンをアクティブにするか、拡張する}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo2\n"

#. type: group
#: commands.texi.orig:561
#, no-wrap
msgid ""
"(defun foo3 (n)             ; @r{@code{foo3} takes one argument,}\n"
"    (interactive \"nCount:\") ;   @r{which is read with the Minibuffer.}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo3\n"
msgstr ""
"(defun foo3 (n)             ; @r{@code{foo3}は引数を1つとる}\n"
"    (interactive \"nCount:\") ;   @r{引数はミニバッファーで読み取られる}\n"
"    (forward-word (* 2 n)))\n"
"     @result{} foo3\n"

#. type: group
#: commands.texi.orig:567
#, no-wrap
msgid ""
"(defun three-b (b1 b2 b3)\n"
"  \"Select three existing buffers.\n"
"Put them into three windows, selecting the last one.\"\n"
msgstr ""
"(defun three-b (b1 b2 b3)\n"
"  \"Select three existing buffers.\n"
"Put them into three windows, selecting the last one.\"\n"

#. type: example
#: commands.texi.orig:578
#, no-wrap
msgid ""
"    (interactive \"bBuffer1:\\nbBuffer2:\\nbBuffer3:\")\n"
"    (delete-other-windows)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b1)\n"
"    (other-window 1)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b2)\n"
"    (other-window 1)\n"
"    (switch-to-buffer b3))\n"
"     @result{} three-b\n"
msgstr ""
"    (interactive \"bBuffer1:\\nbBuffer2:\\nbBuffer3:\")\n"
"    (delete-other-windows)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b1)\n"
"    (other-window 1)\n"
"    (split-window (selected-window) 8)\n"
"    (switch-to-buffer b2)\n"
"    (other-window 1)\n"
"    (switch-to-buffer b3))\n"
"     @result{} three-b\n"

#. type: group
#: commands.texi.orig:581
#, no-wrap
msgid ""
"(three-b \"*scratch*\" \"declarations.texi\" \"*mail*\")\n"
"     @result{} nil\n"
msgstr ""
"(three-b \"*scratch*\" \"declarations.texi\" \"*mail*\")\n"
"     @result{} nil\n"

#. type: subsection
#: commands.texi.orig:585
#, no-wrap
msgid "Select among Command Alternatives"
msgstr "Select among Command Alternatives"

#. type: cindex
#: commands.texi.orig:586
#, no-wrap
msgid "generic commands"
msgstr "generic commands"

#. type: cindex
#: commands.texi.orig:587
#, no-wrap
msgid "alternatives, defining"
msgstr "alternatives, defining"

#. type: Plain text
#: commands.texi.orig:593
msgid "The macro @code{define-alternatives} can be used to define @dfn{generic commands}.  These are interactive functions whose implementation can be selected from several alternatives, as a matter of user preference."
msgstr "マクロ@code{define-alternatives}は@dfn{ジェネリックコマンド(generic command)}を定義するために使用できます。これらはユーザーの選択により複数の候補から選択可能なinteractive関数の実装です。"

#. type: defmac
#: commands.texi.orig:594
#, no-wrap
msgid "define-alternatives command &rest customizations"
msgstr "define-alternatives command &rest customizations"

#. type: defmac
#: commands.texi.orig:596
msgid "Define the new command @var{command}, a symbol."
msgstr "新たなコマンド@var{command}(シンボル)を定義する。"

#. type: defmac
#: commands.texi.orig:601
msgid "When a user runs @kbd{M-x @var{command} @key{RET}} for the first time, Emacs prompts for which real form of the command to use, and records the selection by way of a custom variable.  Using a prefix argument repeats this process of choosing an alternative."
msgstr "最初にユーザーが@kbd{M-x @var{command} @key{RET}}を実行したとき、Emacsはコマンドが使用する実際のフォームにたいして確認を求め、その選択をカスタム変数として記録する。プレフィクス引数を使用すると、候補選択のプロセスを繰り返す。"

#. type: defmac
#: commands.texi.orig:605
msgid "The variable @code{@var{command}-alternatives} should contain an alist with alternative implementations of @var{command}.  Until this variable is set, @code{define-alternatives} has no effect."
msgstr "変数@code{@var{command}-alternatives}には、@var{command}の実装候補がalistで含まれる。この変数がセットされるまで、@code{define-alternatives}は効果をもたない。"

#. type: defmac
#: commands.texi.orig:610
msgid "If @var{customizations} is non-@code{nil}, it should consist of alternating @code{defcustom} keywords (typically @code{:group} and @code{:version}) and values to add to the declaration of @code{@var{command}-alternatives}."
msgstr "@var{customizations}が非@code{nil}の場合は、@code{defcustom}キーワード(典型的には@code{:group}および@code{:version})と、@code{@var{command}-alternatives}の宣言に追加する値により構成される候補である。"

#. type: cindex
#: commands.texi.orig:614
#, no-wrap
msgid "interactive call"
msgstr "interactive call"

#. type: Plain text
#: commands.texi.orig:621
msgid "After the command loop has translated a key sequence into a command, it invokes that command using the function @code{command-execute}.  If the command is a function, @code{command-execute} calls @code{call-interactively}, which reads the arguments and calls the command.  You can also call these functions yourself."
msgstr "コマンドループはキーシーケンスをコマンドに翻訳した後、関数@code{command-execute}を使用してその関数を呼び出します。そのコマンドが関数の場合、@code{command-execute}は引数を読み取りコマンドを呼び出す@code{call-interactively}を呼び出します。自分でこれらの関数を呼び出すこともできます。"

#. type: Plain text
#: commands.texi.orig:626
msgid "Note that the term ``command'', in this context, refers to an interactively callable function (or function-like object), or a keyboard macro.  It does not refer to the key sequence used to invoke a command (@pxref{Keymaps})."
msgstr "このコンテキストにおいて用語``command''はインタラクティブにコール可能な関数(または関数likeなオブジェクト)やキーボードマクロを指すことに注意してください。つまりコマンドを呼び出すキーシーケンスのことではありません(@ref{Keymaps}を参照)。"

#. type: defun
#: commands.texi.orig:627
#, no-wrap
msgid "commandp object &optional for-call-interactively"
msgstr "commandp object &optional for-call-interactively"

#. type: defun
#: commands.texi.orig:630
msgid "This function returns @code{t} if @var{object} is a command.  Otherwise, it returns @code{nil}."
msgstr "この関数は@var{object}がコマンドの場合は@code{t}、それ以外は@code{nil}をリターンする。"

#. type: defun
#: commands.texi.orig:640
msgid "Commands include strings and vectors (which are treated as keyboard macros), lambda expressions that contain a top-level @code{interactive} form (@pxref{Using Interactive}), byte-code function objects made from such lambda expressions, autoload objects that are declared as interactive (non-@code{nil} fourth argument to @code{autoload}), and some primitive functions.  Also, a symbol is considered a command if it has a non-@code{nil} @code{interactive-form} property, or if its function definition satisfies @code{commandp}."
msgstr "コマンドには文字列とベクター(キーボードマクロとして扱われる)、トップレベル@code{interactive}フォーム(@ref{Using Interactive}を参照)を含むラムダ式、そのようなラムダ式から作成されたバイトコンパイル関数オブジェクト、interactiveとして宣言(@code{autoload}の4つ目の引数が非@code{nil})されたautoloadオブジェクト、およびいくつかのプリミティブ関数が含まれる。@code{interactive-form}プロパティが非@code{nil}のシンボル、および関数定義が@code{commandp}を満足するシンボルもコマンドとされる。"

#. type: defun
#: commands.texi.orig:644
msgid "If @var{for-call-interactively} is non-@code{nil}, then @code{commandp} returns @code{t} only for objects that @code{call-interactively} could call---thus, not for keyboard macros."
msgstr "@var{for-call-interactively}が非@code{nil}の場合は、@code{call-interactively}が呼び出すことができるオブジェクトにたいしてのみ@code{commandp}は@code{t}をリターンする。したがってキーボードマクロは該当しなくなる。"

#. type: defun
#: commands.texi.orig:647
msgid "See @code{documentation} in @ref{Accessing Documentation}, for a realistic example of using @code{commandp}."
msgstr "@code{commandp}を使用する現実的な例は、@ref{Accessing Documentation}内の@code{documentation}を参照のこと。"

#. type: defun
#: commands.texi.orig:649
#, no-wrap
msgid "call-interactively command &optional record-flag keys"
msgstr "call-interactively command &optional record-flag keys"

#. type: defun
#: commands.texi.orig:653
msgid "This function calls the interactively callable function @var{command}, providing arguments according to its interactive calling specifications.  It returns whatever @var{command} returns."
msgstr "この関数はinteractive呼び出し仕様にしたがって引数を取得し、インタラクティブに呼び出し可能な関数@var{command}を呼び出す。これは@var{command}がリターンするものが何であれ、それをリターンする。"

#. type: defun
#: commands.texi.orig:655
msgid "If, for instance, you have a function with the following signature:"
msgstr "たとえば、もし以下の署名をもつ関数がある場合:"

#. type: example
#: commands.texi.orig:660
#, no-wrap
msgid ""
"(defun foo (begin end)\n"
"  (interactive \"r\")\n"
"  ...)\n"
msgstr ""
"(defun foo (begin end)\n"
"  (interactive \"r\")\n"
"  ...)\n"

#. type: defun
#: commands.texi.orig:663
msgid "then saying"
msgstr "以下を行うと"

#. type: example
#: commands.texi.orig:666
#, no-wrap
msgid "(call-interactively 'foo)\n"
msgstr "(call-interactively 'foo)\n"

#. type: defun
#: commands.texi.orig:670
msgid "will call @code{foo} with the region (@code{point} and @code{mark}) as the arguments."
msgstr "これはリージョン(@code{point}と@code{mark})を引数として@code{foo}を呼び出すだろう。"

#. type: defun
#: commands.texi.orig:677
msgid "An error is signaled if @var{command} is not a function or if it cannot be called interactively (i.e., is not a command).  Note that keyboard macros (strings and vectors) are not accepted, even though they are considered commands, because they are not functions.  If @var{command} is a symbol, then @code{call-interactively} uses its function definition."
msgstr "@var{command}が関数でない、またはインタラクティブに呼び出せない(コマンドでない)場合は、エラーをシグナルする。たとえコマンドだとしても、キーボードマクロ(文字列かベクター)は、関数ではないので、許されないことに注意。@var{command}がシンボルの場合、@code{call-interactively}はそれの関数定義を使用する。"

#. type: cindex
#: commands.texi.orig:678
#, no-wrap
msgid "record command history"
msgstr "record command history"

#. type: defun
#: commands.texi.orig:683
msgid "If @var{record-flag} is non-@code{nil}, then this command and its arguments are unconditionally added to the list @code{command-history}.  Otherwise, the command is added only if it uses the minibuffer to read an argument.  @xref{Command History}."
msgstr "@var{record-flag}が非@code{nil}の場合は、このコマンドとコマンドの引数は無条件にリスト@code{command-history}に追加される。それ以外では、引数の読み取りにミニバッファーを使用した場合のみコマンドが追加される。@ref{Command History}を参照のこと。"

#. type: defun
#: commands.texi.orig:689
msgid "The argument @var{keys}, if given, should be a vector which specifies the sequence of events to supply if the command inquires which events were used to invoke it.  If @var{keys} is omitted or @code{nil}, the default is the return value of @code{this-command-keys-vector}.  @xref{Definition of this-command-keys-vector}."
msgstr "引数@var{keys}が与えられた場合、それはコマンドを呼び出すためにどのイベントを使用するかコマンドが問い合わせた場合に与えるべき、イベントシーケンスを指定するベクターである。@var{keys}が@code{nil}、または省略された場合のデフォルトは、@code{this-command-keys-vector}のリターン値である。@ref{Definition of this-command-keys-vector}を参照のこと。"

#. type: defun
#: commands.texi.orig:691
#, no-wrap
msgid "command-execute command &optional record-flag keys special"
msgstr "command-execute command &optional record-flag keys special"

#. type: cindex
#: commands.texi.orig:692
#, no-wrap
msgid "keyboard macro execution"
msgstr "keyboard macro execution"

#. type: defun
#: commands.texi.orig:696
msgid "This function executes @var{command}.  The argument @var{command} must satisfy the @code{commandp} predicate; i.e., it must be an interactively callable function or a keyboard macro."
msgstr "この関数は@var{command}を実行する。引数@var{command}は述語@code{commandp}を満足しなければならない。つまりインタラクティブに呼び出し可能な関数かキーボードマクロでなければならない。"

#. type: defun
#: commands.texi.orig:701
msgid "A string or vector as @var{command} is executed with @code{execute-kbd-macro}.  A function is passed to @code{call-interactively} (see above), along with the @var{record-flag} and @var{keys} arguments."
msgstr "@var{command}が文字列かベクターの場合は、@code{execute-kbd-macro}により実行される。関数は@var{record-flag}および@var{keys}引数とともに@code{call-interactively}に渡される(上記参照)。"

#. type: defun
#: commands.texi.orig:707
msgid "If @var{command} is a symbol, its function definition is used in its place.  A symbol with an @code{autoload} definition counts as a command if it was declared to stand for an interactively callable function.  Such a definition is handled by loading the specified library and then rechecking the definition of the symbol."
msgstr "@var{command}がシンボルの場合、その位置にシンボルの関数定義が使用される。@code{autoload}定義のあるシンボルは、インタラクティブに呼び出し可能な関数お意味するよう宣言されている場合は、コマンドとして判断される。そのような宣言は、指定されたライブラリーのロードと、シンボル定義の再チェックにより処理される。"

#. type: defun
#: commands.texi.orig:711
msgid "The argument @var{special}, if given, means to ignore the prefix argument and not clear it.  This is used for executing special events (@pxref{Special Events})."
msgstr "引数@var{special}が与えられた場合、それはプレフィクス引数を無視して、それをクリアーしないという意味である。これはスペシャルイベント(@ref{Special Events}を参照)を実行する場合に使用される。"

#. type: deffn
#: commands.texi.orig:713
#, no-wrap
msgid "Command execute-extended-command prefix-argument"
msgstr "Command execute-extended-command prefix-argument"

#. type: cindex
#: commands.texi.orig:714
#, no-wrap
msgid "read command name"
msgstr "read command name"

#. type: deffn
#: commands.texi.orig:719
msgid "This function reads a command name from the minibuffer using @code{completing-read} (@pxref{Completion}).  Then it uses @code{command-execute} to call the specified command.  Whatever that command returns becomes the value of @code{execute-extended-command}."
msgstr "この関数は@code{completing-read}(@ref{Completion}を参照)を使用して、ミニバッファーからコマンド名を読み取る。その後、指定されたコマンドを呼び出すために@code{command-execute}を使用する。そのコマンドがリターンするのが何であれ、それが@code{execute-extended-command}の値となる。"

#. type: cindex
#: commands.texi.orig:720
#, no-wrap
msgid "execute with prefix argument"
msgstr "execute with prefix argument"

#. type: deffn
#: commands.texi.orig:725
msgid "If the command asks for a prefix argument, it receives the value @var{prefix-argument}.  If @code{execute-extended-command} is called interactively, the current raw prefix argument is used for @var{prefix-argument}, and thus passed on to whatever command is run."
msgstr "そのコマンドがプレフィクス引数を求める場合は、@var{prefix-argument}のの値を受け取る。@code{execute-extended-command}がインタラクティブに呼び出された場合は、カレントのrawプレフィクス引数が@var{prefix-argument}に使用され、それが何であれ実行するコマンドに渡される。"

#. type: kbd{#1}
#: commands.texi.orig:727
#, no-wrap
msgid "M-x"
msgstr "M-x"

#. type: deffn
#: commands.texi.orig:734
msgid "@code{execute-extended-command} is the normal definition of @kbd{M-x}, so it uses the string @w{@samp{M-x }} as a prompt.  (It would be better to take the prompt from the events used to invoke @code{execute-extended-command}, but that is painful to implement.)  A description of the value of the prefix argument, if any, also becomes part of the prompt."
msgstr "通常、@code{execute-extended-command}は@kbd{M-x}の定義なので、プロンプトとして文字列@w{@samp{M-x }}を使用する(@code{execute-extended-command}を呼び出したイベントからプロンプトを受け取るほうが良いのだろうが、実装は骨が折れる)。プレフィクス引数の値の説明が、もしあれば、それもプロンプトの一部となる。"

#. type: group
#: commands.texi.orig:742
#, no-wrap
msgid ""
"(execute-extended-command 3)\n"
"---------- Buffer: Minibuffer ----------\n"
"3 M-x forward-word RET\n"
"---------- Buffer: Minibuffer ----------\n"
"     @result{} t\n"
msgstr ""
"(execute-extended-command 3)\n"
"---------- Buffer: Minibuffer ----------\n"
"3 M-x forward-word RET\n"
"---------- Buffer: Minibuffer ----------\n"
"     @result{} t\n"

#. type: section
#: commands.texi.orig:747
#, no-wrap
msgid "Distinguish Interactive Calls"
msgstr "Distinguish Interactive Calls"

#. type: cindex
#: commands.texi.orig:748
#, no-wrap
msgid "distinguish interactive calls"
msgstr "distinguish interactive calls"

#. type: cindex
#: commands.texi.orig:749
#, no-wrap
msgid "is this call interactive"
msgstr "is this call interactive"

#. type: Plain text
#: commands.texi.orig:758
msgid "Sometimes a command should display additional visual feedback (such as an informative message in the echo area) for interactive calls only.  There are three ways to do this.  The recommended way to test whether the function was called using @code{call-interactively} is to give it an optional argument @code{print-message} and use the @code{interactive} spec to make it non-@code{nil} in interactive calls.  Here's an example:"
msgstr "interactive呼び出しのときは、コマンドが(エコーエリア内の情報メッセージなどのような)視覚的な追加フィードバックを表示すべきときがあります。これを行うためには、3つの方法があります。その関数が@code{call-interactively}を使用して呼び出されたかどうかテストするには、オプション引数@code{print-message}を与えるとともに、interactive呼び出しで非@code{nil}となるように@code{interactive}仕様を使うのが推奨される方法です。以下は例です:"

#. type: example
#: commands.texi.orig:764
#, no-wrap
msgid ""
"(defun foo (&optional print-message)\n"
"  (interactive \"p\")\n"
"  (when print-message\n"
"    (message \"foo\")))\n"
msgstr ""
"(defun foo (&optional print-message)\n"
"  (interactive \"p\")\n"
"  (when print-message\n"
"    (message \"foo\")))\n"

#. type: Plain text
#: commands.texi.orig:770
msgid "We use @code{\"p\"} because the numeric prefix argument is never @code{nil}.  Defined in this way, the function does display the message when called from a keyboard macro."
msgstr "数プレフィクス引数は決して@code{nil}にならないので、わたしたちは@code{\"p\"}を使用します。この方法で定義された関数は、キーボードマクロから呼び出されたときにメッセージを表示します。"

#. type: Plain text
#: commands.texi.orig:774
msgid "The above method with the additional argument is usually best, because it allows callers to say ``treat this call as interactive''.  But you can also do the job by testing @code{called-interactively-p}."
msgstr "追加引数による上記の手法は、呼び出し側に``この呼び出しをinteractiveとして扱うように''伝えることができるので、通常は最善です。しかし、@code{called-interactively-p}.をテストすることにより、これを行うこともできます。"

#. type: defun
#: commands.texi.orig:775
#, no-wrap
msgid "called-interactively-p kind"
msgstr "called-interactively-p kind"

#. type: defun
#: commands.texi.orig:778
msgid "This function returns @code{t} when the calling function was called using @code{call-interactively}."
msgstr "この関数は、呼び出された関数が@code{call-interactively}を使用して呼び出された場合は@code{t}をリターンする。"

#. type: defun
#: commands.texi.orig:787
msgid "The argument @var{kind} should be either the symbol @code{interactive} or the symbol @code{any}.  If it is @code{interactive}, then @code{called-interactively-p} returns @code{t} only if the call was made directly by the user---e.g., if the user typed a key sequence bound to the calling function, but @emph{not} if the user ran a keyboard macro that called the function (@pxref{Keyboard Macros}).  If @var{kind} is @code{any}, @code{called-interactively-p} returns @code{t} for any kind of interactive call, including keyboard macros."
msgstr "引数@var{kind}はシンボル@code{interactive}かシンボル@code{any}のどちらかである。これが@code{interactive}の場合、@code{called-interactively-p}はユーザーから直接呼び出しが行われたとき --- たとえば関数呼び出しにバインドされたキーシーケンスをユーザーがタイプした場合がそれに該当するが、ユーザーがその関数を呼び出すキーボードマクロ(@ref{Keyboard Macros}を参照)を実行中した場合は@emph{該当しない} --- だけ@code{t}をリターンする@var{kind}が@code{any}の場合、@code{called-interactively-p}はキーボードマクロを含む任意の種類のinteractive呼び出しにたいして@code{t}をリターンする。"

#. type: defun
#: commands.texi.orig:791
msgid "If in doubt, use @code{any}; the only known proper use of @code{interactive} is if you need to decide whether to display a helpful message while a function is running."
msgstr "疑わしい場合は@code{any}を使用すること。@code{interactive}の使用が正しいと解っているのは、関数が実行中に役に立つメッセージを表示するかどうか判断が必要な場合だけである。"

#. type: defun
#: commands.texi.orig:794
msgid "A function is never considered to be called interactively if it was called via Lisp evaluation (or with @code{apply} or @code{funcall})."
msgstr "Lisp評価(または@code{apply}や@code{funcall}))を通じて呼び出された、または場合、関数は決してインタラクティブに呼び出されたとは判断されない。"

#. type: Plain text
#: commands.texi.orig:798
msgid "Here is an example of using @code{called-interactively-p}:"
msgstr "以下は@code{called-interactively-p}を使用する例である:"

#. type: group
#: commands.texi.orig:806
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (interactive)\n"
"  (when (called-interactively-p 'any)\n"
"    (message \"Interactive!\")\n"
"    'foo-called-interactively))\n"
msgstr ""
"(defun foo ()\n"
"  (interactive)\n"
"  (when (called-interactively-p 'any)\n"
"    (message \"Interactive!\")\n"
"    'foo-called-interactively))\n"

#. type: group
#: commands.texi.orig:811
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x foo}.}\n"
"     @print{} Interactive!\n"
msgstr ""
";; @r{@kbd{M-x foo}とタイプする}\n"
"     @print{} Interactive!\n"

#. type: group
#: commands.texi.orig:816
#, no-wrap
msgid ""
"(foo)\n"
"     @result{} nil\n"
msgstr ""
"(foo)\n"
"     @result{} nil\n"

#. type: Plain text
#: commands.texi.orig:822
msgid "Here is another example that contrasts direct and indirect calls to @code{called-interactively-p}."
msgstr "以下は@code{called-interactively-p}の直接呼び出しと間接呼び出しを比較した例である。"

#. type: group
#: commands.texi.orig:828
#, no-wrap
msgid ""
"(defun bar ()\n"
"  (interactive)\n"
"  (message \"%s\" (list (foo) (called-interactively-p 'any))))\n"
msgstr ""
"(defun bar ()\n"
"  (interactive)\n"
"  (message \"%s\" (list (foo) (called-interactively-p 'any))))\n"

#. type: group
#: commands.texi.orig:833
#, no-wrap
msgid ""
";; @r{Type @kbd{M-x bar}.}\n"
"     @print{} (nil t)\n"
msgstr ""
";; @r{@kbd{M-x bar}とタイプする}\n"
"     @print{} (nil t)\n"

#. type: section
#: commands.texi.orig:837
#, no-wrap
msgid "Information from the Command Loop"
msgstr ""

#. type: cindex
#: commands.texi.orig:838
#, no-wrap
msgid "command loop variables"
msgstr ""

#. type: Plain text
#: commands.texi.orig:844
msgid "The editor command loop sets several Lisp variables to keep status records for itself and for commands that are run.  With the exception of @code{this-command} and @code{last-command} it's generally a bad idea to change any of these variables in a Lisp program."
msgstr ""

#. type: defvar
#: commands.texi.orig:845
#, no-wrap
msgid "last-command"
msgstr ""

#. type: defvar
#: commands.texi.orig:849
msgid "This variable records the name of the previous command executed by the command loop (the one before the current command).  Normally the value is a symbol with a function definition, but this is not guaranteed."
msgstr ""

#. type: defvar
#: commands.texi.orig:853
msgid "The value is copied from @code{this-command} when a command returns to the command loop, except when the command has specified a prefix argument for the following command."
msgstr ""

#. type: defvar
#: commands.texi.orig:856
msgid "This variable is always local to the current terminal and cannot be buffer-local.  @xref{Multiple Terminals}."
msgstr ""

#. type: defvar
#: commands.texi.orig:858
#, no-wrap
msgid "real-last-command"
msgstr ""

#. type: defvar
#: commands.texi.orig:861
msgid "This variable is set up by Emacs just like @code{last-command}, but never altered by Lisp programs."
msgstr ""

#. type: defvar
#: commands.texi.orig:863
#, no-wrap
msgid "last-repeatable-command"
msgstr ""

#. type: defvar
#: commands.texi.orig:867
msgid "This variable stores the most recently executed command that was not part of an input event.  This is the command @code{repeat} will try to repeat, @xref{Repeating,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defvar
#: commands.texi.orig:869
#, no-wrap
msgid "this-command"
msgstr ""

#. type: cindex
#: commands.texi.orig:870
#, no-wrap
msgid "current command"
msgstr ""

#. type: defvar
#: commands.texi.orig:874
msgid "This variable records the name of the command now being executed by the editor command loop.  Like @code{last-command}, it is normally a symbol with a function definition."
msgstr ""

#. type: defvar
#: commands.texi.orig:879
msgid "The command loop sets this variable just before running a command, and copies its value into @code{last-command} when the command finishes (unless the command specified a prefix argument for the following command)."
msgstr ""

#. type: cindex
#: commands.texi.orig:880
#, no-wrap
msgid "kill command repetition"
msgstr ""

#. type: defvar
#: commands.texi.orig:886
msgid "Some commands set this variable during their execution, as a flag for whatever command runs next.  In particular, the functions for killing text set @code{this-command} to @code{kill-region} so that any kill commands immediately following will know to append the killed text to the previous kill."
msgstr ""

#. type: Plain text
#: commands.texi.orig:893
msgid "If you do not want a particular command to be recognized as the previous command in the case where it got an error, you must code that command to prevent this.  One way is to set @code{this-command} to @code{t} at the beginning of the command, and set @code{this-command} back to its proper value at the end, like this:"
msgstr ""

#. type: example
#: commands.texi.orig:901
#, no-wrap
msgid ""
"(defun foo (args@dots{})\n"
"  (interactive @dots{})\n"
"  (let ((old-this-command this-command))\n"
"    (setq this-command t)\n"
"    @r{@dots{}do the work@dots{}}\n"
"    (setq this-command old-this-command)))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:907
msgid "We do not bind @code{this-command} with @code{let} because that would restore the old value in case of error---a feature of @code{let} which in this case does precisely what we want to avoid."
msgstr ""

#. type: defvar
#: commands.texi.orig:908
#, no-wrap
msgid "this-original-command"
msgstr ""

#. type: defvar
#: commands.texi.orig:914
msgid "This has the same value as @code{this-command} except when command remapping occurs (@pxref{Remapping Commands}).  In that case, @code{this-command} gives the command actually run (the result of remapping), and @code{this-original-command} gives the command that was specified to run but remapped into another command."
msgstr ""

#. type: defun
#: commands.texi.orig:916
#, no-wrap
msgid "this-command-keys"
msgstr ""

#. type: defun
#: commands.texi.orig:921
msgid "This function returns a string or vector containing the key sequence that invoked the present command, plus any previous commands that generated the prefix argument for this command.  Any events read by the command using @code{read-event} without a timeout get tacked on to the end."
msgstr ""

#. type: defun
#: commands.texi.orig:926
msgid "However, if the command has called @code{read-key-sequence}, it returns the last read key sequence.  @xref{Key Sequence Input}.  The value is a string if all events in the sequence were characters that fit in a string.  @xref{Input Events}."
msgstr ""

#. type: group
#: commands.texi.orig:932
#, no-wrap
msgid ""
"(this-command-keys)\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} \"^U^X^E\"\n"
msgstr ""

#. type: defun
#: commands.texi.orig:936
#, no-wrap
msgid "this-command-keys-vector"
msgstr ""

#. type: anchor{#1}
#: commands.texi.orig:941
msgid "Definition of this-command-keys-vector"
msgstr ""

#. type: defun
#: commands.texi.orig:941
msgid "Like @code{this-command-keys}, except that it always returns the events in a vector, so you don't need to deal with the complexities of storing input events in a string (@pxref{Strings of Events})."
msgstr ""

#. type: defun
#: commands.texi.orig:943
#, no-wrap
msgid "clear-this-command-keys &optional keep-record"
msgstr ""

#. type: defun
#: commands.texi.orig:950
msgid "This function empties out the table of events for @code{this-command-keys} to return.  Unless @var{keep-record} is non-@code{nil}, it also empties the records that the function @code{recent-keys} (@pxref{Recording Input}) will subsequently return.  This is useful after reading a password, to prevent the password from echoing inadvertently as part of the next command in certain cases."
msgstr ""

#. type: defvar
#: commands.texi.orig:952
#, no-wrap
msgid "last-nonmenu-event"
msgstr ""

#. type: defvar
#: commands.texi.orig:955
msgid "This variable holds the last input event read as part of a key sequence, not counting events resulting from mouse menus."
msgstr ""

#. type: defvar
#: commands.texi.orig:959
msgid "One use of this variable is for telling @code{x-popup-menu} where to pop up a menu.  It is also used internally by @code{y-or-n-p} (@pxref{Yes-or-No Queries})."
msgstr ""

#. type: defvar
#: commands.texi.orig:961
#, no-wrap
msgid "last-command-event"
msgstr ""

#. type: defvar
#: commands.texi.orig:966
msgid "This variable is set to the last input event that was read by the command loop as part of a command.  The principal use of this variable is in @code{self-insert-command}, which uses it to decide which character to insert."
msgstr ""

#. type: group
#: commands.texi.orig:972
#, no-wrap
msgid ""
"last-command-event\n"
";; @r{Now use @kbd{C-u C-x C-e} to evaluate that.}\n"
"     @result{} 5\n"
msgstr ""

#. type: defvar
#: commands.texi.orig:977
msgid "The value is 5 because that is the @acronym{ASCII} code for @kbd{C-e}."
msgstr ""

#. type: defvar
#: commands.texi.orig:979
#, no-wrap
msgid "last-event-frame"
msgstr ""

#. type: defvar
#: commands.texi.orig:985
msgid "This variable records which frame the last input event was directed to.  Usually this is the frame that was selected when the event was generated, but if that frame has redirected input focus to another frame, the value is the frame to which the event was redirected.  @xref{Input Focus}."
msgstr ""

#. type: defvar
#: commands.texi.orig:987
msgid "If the last event came from a keyboard macro, the value is @code{macro}."
msgstr ""

#. type: section
#: commands.texi.orig:990
#, no-wrap
msgid "Adjusting Point After Commands"
msgstr ""

#. type: cindex
#: commands.texi.orig:991
#, no-wrap
msgid "adjusting point"
msgstr ""

#. type: cindex
#: commands.texi.orig:992
#, no-wrap
msgid "invisible/intangible text, and point"
msgstr ""

#. type: cindex
#: commands.texi.orig:993
#, no-wrap
msgid "@code{display} property, and point display"
msgstr ""

#. type: cindex
#: commands.texi.orig:994
#, no-wrap
msgid "@code{composition} property, and point display"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1001
msgid "It is not easy to display a value of point in the middle of a sequence of text that has the @code{display}, @code{composition} or is invisible.  Therefore, after a command finishes and returns to the command loop, if point is within such a sequence, the command loop normally moves point to the edge of the sequence."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1004
msgid "A command can inhibit this feature by setting the variable @code{disable-point-adjustment}:"
msgstr ""

#. type: defvar
#: commands.texi.orig:1005
#, no-wrap
msgid "disable-point-adjustment"
msgstr ""

#. type: defvar
#: commands.texi.orig:1009
msgid "If this variable is non-@code{nil} when a command returns to the command loop, then the command loop does not check for those text properties, and does not move point out of sequences that have them."
msgstr ""

#. type: defvar
#: commands.texi.orig:1012
msgid "The command loop sets this variable to @code{nil} before each command, so if a command sets it, the effect applies only to that command."
msgstr ""

#. type: defvar
#: commands.texi.orig:1014
#, no-wrap
msgid "global-disable-point-adjustment"
msgstr ""

#. type: defvar
#: commands.texi.orig:1017
msgid "If you set this variable to a non-@code{nil} value, the feature of moving point out of these sequences is completely turned off."
msgstr ""

#. type: cindex
#: commands.texi.orig:1021
#, no-wrap
msgid "events"
msgstr ""

#. type: cindex
#: commands.texi.orig:1022
#, no-wrap
msgid "input events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1029
msgid "The Emacs command loop reads a sequence of @dfn{input events} that represent keyboard or mouse activity, or system events sent to Emacs.  The events for keyboard activity are characters or symbols; other events are always lists.  This section describes the representation and meaning of input events in detail."
msgstr ""

#. type: defun
#: commands.texi.orig:1030
#, no-wrap
msgid "eventp object"
msgstr ""

#. type: defun
#: commands.texi.orig:1033
msgid "This function returns non-@code{nil} if @var{object} is an input event or event type."
msgstr ""

#. type: defun
#: commands.texi.orig:1040
msgid "Note that any symbol might be used as an event or an event type.  @code{eventp} cannot distinguish whether a symbol is intended by Lisp code to be used as an event.  Instead, it distinguishes whether the symbol has actually been used in an event that has been read as input in the current Emacs session.  If a symbol has not yet been so used, @code{eventp} returns @code{nil}."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1062 commands.texi.orig:1063
#, no-wrap
msgid "Keyboard Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Ordinary characters--keys with symbols on them."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1195 commands.texi.orig:1196
#, no-wrap
msgid "Function Keys"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Function keys--keys with names, not symbols."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1272 commands.texi.orig:1273
#, no-wrap
msgid "Mouse Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Overview of mouse events."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1294 commands.texi.orig:1295
#, no-wrap
msgid "Click Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Pushing and releasing a mouse button."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1465 commands.texi.orig:1466
#, no-wrap
msgid "Drag Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Moving the mouse before releasing the button."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1502 commands.texi.orig:1503
#, no-wrap
msgid "Button-Down Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "A button was pushed and not yet released."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1526 commands.texi.orig:1527
#, no-wrap
msgid "Repeat Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Double and triple click (or drag, or down)."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1621 commands.texi.orig:1622
#, no-wrap
msgid "Motion Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Just moving the mouse, not pushing a button."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1646 commands.texi.orig:1647
#, no-wrap
msgid "Focus Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Moving the mouse between frames."
msgstr ""

#. type: node
#: commands.texi.orig:1060 commands.texi.orig:1681
#, no-wrap
msgid "Misc Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Other events the system can generate."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1822 commands.texi.orig:1823
#, no-wrap
msgid "Event Examples"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Examples of the lists for mouse events."
msgstr ""

#. type: subsection
#: commands.texi.orig:1060 commands.texi.orig:1872 commands.texi.orig:1873
#, no-wrap
msgid "Classifying Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Finding the modifier keys in an event symbol.  Event types."
msgstr ""

#. type: node
#: commands.texi.orig:1060 commands.texi.orig:1985
#, no-wrap
msgid "Accessing Mouse"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Functions to extract info from mouse events."
msgstr ""

#. type: node
#: commands.texi.orig:1060 commands.texi.orig:2153
#, no-wrap
msgid "Accessing Scroll"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Functions to get info from scroll bar events."
msgstr ""

#. type: node
#: commands.texi.orig:1060 commands.texi.orig:2186
#, no-wrap
msgid "Strings of Events"
msgstr ""

#. type: menuentry
#: commands.texi.orig:1060
msgid "Special considerations for putting keyboard character events in a string."
msgstr ""

#. type: cindex
#: commands.texi.orig:1064
#, no-wrap
msgid "keyboard events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1071
msgid "There are two kinds of input you can get from the keyboard: ordinary keys, and function keys.  Ordinary keys correspond to characters; the events they generate are represented in Lisp as characters.  The event type of a character event is the character itself (an integer); see @ref{Classifying Events}."
msgstr ""

#. type: cindex
#: commands.texi.orig:1072
#, no-wrap
msgid "modifier bits (of input character)"
msgstr ""

#. type: cindex
#: commands.texi.orig:1073
#, no-wrap
msgid "basic code (of input character)"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1076
msgid "An input character event consists of a @dfn{basic code} between 0 and 524287, plus any or all of these @dfn{modifier bits}:"
msgstr ""

#. type: item
#: commands.texi.orig:1078
#, no-wrap
msgid "meta"
msgstr ""

#. type: table
#: commands.texi.orig:1080 commands.texi.orig:1091 commands.texi.orig:1118
#: commands.texi.orig:1152 commands.texi.orig:1163 commands.texi.orig:1174
msgid "The"
msgstr ""

#. type: tex
#: commands.texi.orig:1082 commands.texi.orig:2239 commands.texi.orig:2259
#: commands.texi.orig:2281
#, no-wrap
msgid "@math{2^{27}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:1085 commands.texi.orig:2242 commands.texi.orig:2262
#: commands.texi.orig:2284
msgid "2**27"
msgstr ""

#. type: table
#: commands.texi.orig:1088
msgid "bit in the character code indicates a character typed with the meta key held down."
msgstr ""

#. type: item
#: commands.texi.orig:1089
#, no-wrap
msgid "control"
msgstr ""

#. type: tex
#: commands.texi.orig:1093 commands.texi.orig:1109
#, no-wrap
msgid "@math{2^{26}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:1096 commands.texi.orig:1112
msgid "2**26"
msgstr ""

#. type: table
#: commands.texi.orig:1099
msgid "bit in the character code indicates a non-@acronym{ASCII} control character."
msgstr ""

#. type: table
#: commands.texi.orig:1103
msgid "@sc{ascii} control characters such as @kbd{C-a} have special basic codes of their own, so Emacs needs no special bit to indicate them.  Thus, the code for @kbd{C-a} is just 1."
msgstr ""

#. type: table
#: commands.texi.orig:1107
msgid "But if you type a control combination not in @acronym{ASCII}, such as @kbd{%} with the control key, the numeric value you get is the code for @kbd{%} plus"
msgstr ""

#. type: table
#: commands.texi.orig:1115
msgid "(assuming the terminal supports non-@acronym{ASCII} control characters)."
msgstr ""

#. type: item
#: commands.texi.orig:1116
#, no-wrap
msgid "shift"
msgstr ""

#. type: tex
#: commands.texi.orig:1120 commands.texi.orig:1133 commands.texi.orig:1143
#, no-wrap
msgid "@math{2^{25}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:1123 commands.texi.orig:1136 commands.texi.orig:1146
msgid "2**25"
msgstr ""

#. type: table
#: commands.texi.orig:1126
msgid "bit in the character code indicates an @acronym{ASCII} control character typed with the shift key held down."
msgstr ""

#. type: table
#: commands.texi.orig:1131
msgid "For letters, the basic code itself indicates upper versus lower case; for digits and punctuation, the shift key selects an entirely different character with a different basic code.  In order to keep within the @acronym{ASCII} character set whenever possible, Emacs avoids using the"
msgstr ""

#. type: table
#: commands.texi.orig:1138
msgid "bit for those characters."
msgstr ""

#. type: table
#: commands.texi.orig:1141
msgid "However, @acronym{ASCII} provides no way to distinguish @kbd{C-A} from @kbd{C-a}, so Emacs uses the"
msgstr ""

#. type: table
#: commands.texi.orig:1149
msgid "bit in @kbd{C-A} and not in @kbd{C-a}."
msgstr ""

#. type: item
#: commands.texi.orig:1150
#, no-wrap
msgid "hyper"
msgstr ""

#. type: tex
#: commands.texi.orig:1154
#, no-wrap
msgid "@math{2^{24}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:1157
msgid "2**24"
msgstr ""

#. type: table
#: commands.texi.orig:1160
msgid "bit in the character code indicates a character typed with the hyper key held down."
msgstr ""

#. type: item
#: commands.texi.orig:1161
#, no-wrap
msgid "super"
msgstr ""

#. type: tex
#: commands.texi.orig:1165
#, no-wrap
msgid "@math{2^{23}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:1168
msgid "2**23"
msgstr ""

#. type: table
#: commands.texi.orig:1171
msgid "bit in the character code indicates a character typed with the super key held down."
msgstr ""

#. type: item
#: commands.texi.orig:1172
#, no-wrap
msgid "alt"
msgstr ""

#. type: tex
#: commands.texi.orig:1176
#, no-wrap
msgid "@math{2^{22}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:1179
msgid "2**22"
msgstr ""

#. type: table
#: commands.texi.orig:1183
msgid "bit in the character code indicates a character typed with the alt key held down.  (The key labeled @key{Alt} on most keyboards is actually treated as the meta key, not this.)"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1194
msgid "It is best to avoid mentioning specific bit numbers in your program.  To test the modifier bits of a character, use the function @code{event-modifiers} (@pxref{Classifying Events}).  When making key bindings, you can use the read syntax for characters with modifier bits (@samp{\\C-}, @samp{\\M-}, and so on).  For making key bindings with @code{define-key}, you can use lists such as @code{(control hyper ?x)} to specify the characters (@pxref{Changing Key Bindings}).  The function @code{event-convert-list} converts such a list into an event type (@pxref{Classifying Events})."
msgstr ""

#. type: cindex
#: commands.texi.orig:1198
#, no-wrap
msgid "function keys"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1204
msgid "Most keyboards also have @dfn{function keys}---keys that have names or symbols that are not characters.  Function keys are represented in Emacs Lisp as symbols; the symbol's name is the function key's label, in lower case.  For example, pressing a key labeled @key{F1} generates an input event represented by the symbol @code{f1}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1207
msgid "The event type of a function key event is the event symbol itself.  @xref{Classifying Events}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1210
msgid "Here are a few special cases in the symbol-naming convention for function keys:"
msgstr ""

#. type: item
#: commands.texi.orig:1212
#, no-wrap
msgid "@code{backspace}, @code{tab}, @code{newline}, @code{return}, @code{delete}"
msgstr ""

#. type: table
#: commands.texi.orig:1215
msgid "These keys correspond to common @acronym{ASCII} control characters that have special keys on most keyboards."
msgstr ""

#. type: table
#: commands.texi.orig:1220
msgid "In @acronym{ASCII}, @kbd{C-i} and @key{TAB} are the same character.  If the terminal can distinguish between them, Emacs conveys the distinction to Lisp programs by representing the former as the integer 9, and the latter as the symbol @code{tab}."
msgstr ""

#. type: table
#: commands.texi.orig:1227
msgid "Most of the time, it's not useful to distinguish the two.  So normally @code{local-function-key-map} (@pxref{Translation Keymaps}) is set up to map @code{tab} into 9.  Thus, a key binding for character code 9 (the character @kbd{C-i}) also applies to @code{tab}.  Likewise for the other symbols in this group.  The function @code{read-char} likewise converts these events into characters."
msgstr ""

#. type: table
#: commands.texi.orig:1231
msgid "In @acronym{ASCII}, @key{BS} is really @kbd{C-h}.  But @code{backspace} converts into the character code 127 (@key{DEL}), not into code 8 (@key{BS}).  This is what most users prefer."
msgstr ""

#. type: item
#: commands.texi.orig:1232
#, no-wrap
msgid "@code{left}, @code{up}, @code{right}, @code{down}"
msgstr ""

#. type: table
#: commands.texi.orig:1234
msgid "Cursor arrow keys"
msgstr ""

#. type: item
#: commands.texi.orig:1234
#, no-wrap
msgid "@code{kp-add}, @code{kp-decimal}, @code{kp-divide}, @dots{}"
msgstr ""

#. type: table
#: commands.texi.orig:1236
msgid "Keypad keys (to the right of the regular keyboard)."
msgstr ""

#. type: item
#: commands.texi.orig:1236
#, no-wrap
msgid "@code{kp-0}, @code{kp-1}, @dots{}"
msgstr ""

#. type: table
#: commands.texi.orig:1238
msgid "Keypad keys with digits."
msgstr ""

#. type: item
#: commands.texi.orig:1238
#, no-wrap
msgid "@code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}"
msgstr ""

#. type: table
#: commands.texi.orig:1240
msgid "Keypad PF keys."
msgstr ""

#. type: item
#: commands.texi.orig:1240
#, no-wrap
msgid "@code{kp-home}, @code{kp-left}, @code{kp-up}, @code{kp-right}, @code{kp-down}"
msgstr ""

#. type: table
#: commands.texi.orig:1243
msgid "Keypad arrow keys.  Emacs normally translates these into the corresponding non-keypad keys @code{home}, @code{left}, @dots{}"
msgstr ""

#. type: item
#: commands.texi.orig:1243
#, no-wrap
msgid "@code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-begin}, @code{kp-insert}, @code{kp-delete}"
msgstr ""

#. type: table
#: commands.texi.orig:1246
msgid "Additional keypad duplicates of keys ordinarily found elsewhere.  Emacs normally translates these into the like-named non-keypad keys."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1251
msgid "You can use the modifier keys @key{ALT}, @key{CTRL}, @key{HYPER}, @key{META}, @key{SHIFT}, and @key{SUPER} with function keys.  The way to represent them is with prefixes in the symbol name:"
msgstr ""

#. type: item
#: commands.texi.orig:1253
#, no-wrap
msgid "A-"
msgstr ""

#. type: table
#: commands.texi.orig:1255
msgid "The alt modifier."
msgstr ""

#. type: item
#: commands.texi.orig:1255
#, no-wrap
msgid "C-"
msgstr ""

#. type: table
#: commands.texi.orig:1257
msgid "The control modifier."
msgstr ""

#. type: item
#: commands.texi.orig:1257
#, no-wrap
msgid "H-"
msgstr ""

#. type: table
#: commands.texi.orig:1259
msgid "The hyper modifier."
msgstr ""

#. type: item
#: commands.texi.orig:1259
#, no-wrap
msgid "M-"
msgstr ""

#. type: table
#: commands.texi.orig:1261
msgid "The meta modifier."
msgstr ""

#. type: item
#: commands.texi.orig:1261
#, no-wrap
msgid "S-"
msgstr ""

#. type: table
#: commands.texi.orig:1263
msgid "The shift modifier."
msgstr ""

#. type: item
#: commands.texi.orig:1263
#, no-wrap
msgid "s-"
msgstr ""

#. type: table
#: commands.texi.orig:1265
msgid "The super modifier."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1271
msgid "Thus, the symbol for the key @key{F3} with @key{META} held down is @code{M-f3}.  When you use more than one prefix, we recommend you write them in alphabetical order; but the order does not matter in arguments to the key-binding lookup and modification functions."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1282
msgid "Emacs supports four kinds of mouse events: click events, drag events, button-down events, and motion events.  All mouse events are represented as lists.  The @sc{car} of the list is the event type; this says which mouse button was involved, and which modifier keys were used with it.  The event type can also distinguish double or triple button presses (@pxref{Repeat Events}).  The rest of the list elements give position and time information."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1287
msgid "For key lookup, only the event type matters: two events of the same type necessarily run the same command.  The command can access the full values of these events using the @samp{e} interactive code.  @xref{Interactive Codes}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1293
msgid "A key sequence that starts with a mouse event is read using the keymaps of the buffer in the window that the mouse was in, not the current buffer.  This does not imply that clicking in a window selects that window or its buffer---that is entirely under the control of the command binding of the key sequence."
msgstr ""

#. type: cindex
#: commands.texi.orig:1296
#, no-wrap
msgid "click event"
msgstr ""

#. type: cindex
#: commands.texi.orig:1297
#, no-wrap
msgid "mouse click event"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1302
msgid "When the user presses a mouse button and releases it at the same location, that generates a @dfn{click} event.  All mouse click event share the same format:"
msgstr ""

#. type: example
#: commands.texi.orig:1305
#, no-wrap
msgid "(@var{event-type} @var{position} @var{click-count})\n"
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1308
#, no-wrap
msgid "event-type"
msgstr ""

#. type: table
#: commands.texi.orig:1312
msgid "This is a symbol that indicates which mouse button was used.  It is one of the symbols @code{mouse-1}, @code{mouse-2}, @dots{}, where the buttons are numbered left to right."
msgstr ""

#. type: table
#: commands.texi.orig:1316
msgid "You can also use prefixes @samp{A-}, @samp{C-}, @samp{H-}, @samp{M-}, @samp{S-} and @samp{s-} for modifiers alt, control, hyper, meta, shift and super, just as you would with function keys."
msgstr ""

#. type: table
#: commands.texi.orig:1321
msgid "This symbol also serves as the event type of the event.  Key bindings describe events by their types; thus, if there is a key binding for @code{mouse-1}, that binding would apply to all events whose @var{event-type} is @code{mouse-1}."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1322
#, no-wrap
msgid "position"
msgstr ""

#. type: cindex
#: commands.texi.orig:1323
#, no-wrap
msgid "mouse position list"
msgstr ""

#. type: table
#: commands.texi.orig:1326
msgid "This is a @dfn{mouse position list} specifying where the mouse click occurred; see below for details."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1327
#, no-wrap
msgid "click-count"
msgstr ""

#. type: table
#: commands.texi.orig:1330
msgid "This is the number of rapid repeated presses so far of the same mouse button.  @xref{Repeat Events}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1338
msgid "To access the contents of a mouse position list in the @var{position} slot of a click event, you should typically use the functions documented in @ref{Accessing Mouse}.  The explicit format of the list depends on where the click occurred.  For clicks in the text area, mode line, header line, or in the fringe or marginal areas, the mouse position list has the form"
msgstr ""

#. type: example
#: commands.texi.orig:1343
#, no-wrap
msgid ""
"(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}\n"
" @var{object} @var{text-pos} (@var{col} . @var{row})\n"
" @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1347
msgid "The meanings of these list elements are as follows:"
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1349 commands.texi.orig:1434
#, no-wrap
msgid "window"
msgstr ""

#. type: table
#: commands.texi.orig:1351
msgid "The window in which the click occurred."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1352
#, no-wrap
msgid "pos-or-area"
msgstr ""

#. type: table
#: commands.texi.orig:1358
msgid "The buffer position of the character clicked on in the text area; or, if the click was outside the text area, the window area where it occurred.  It is one of the symbols @code{mode-line}, @code{header-line}, @code{vertical-line}, @code{left-margin}, @code{right-margin}, @code{left-fringe}, or @code{right-fringe}."
msgstr ""

#. type: table
#: commands.texi.orig:1363
msgid "In one special case, @var{pos-or-area} is a list containing a symbol (one of the symbols listed above) instead of just the symbol.  This happens after the imaginary prefix keys for the event are registered by Emacs.  @xref{Key Sequence Input}."
msgstr ""

#. type: item
#: commands.texi.orig:1364
#, no-wrap
msgid "@var{x}, @var{y}"
msgstr ""

#. type: table
#: commands.texi.orig:1374
msgid "The relative pixel coordinates of the click.  For clicks in the text area of a window, the coordinate origin @code{(0 . 0)} is taken to be the top left corner of the text area.  @xref{Window Sizes}.  For clicks in a mode line or header line, the coordinate origin is the top left corner of the window itself.  For fringes, margins, and the vertical border, @var{x} does not have meaningful data.  For fringes and margins, @var{y} is relative to the bottom edge of the header line.  In all cases, the @var{x} and @var{y} coordinates increase rightward and downward respectively."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1375 commands.texi.orig:1450
#, no-wrap
msgid "timestamp"
msgstr ""

#. type: table
#: commands.texi.orig:1378
msgid "The time at which the event occurred, as an integer number of milliseconds since a system-dependent initial time."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1379
#, no-wrap
msgid "object"
msgstr ""

#. type: table
#: commands.texi.orig:1383
msgid "Either @code{nil} if there is no string-type text property at the click position, or a cons cell of the form (@var{string} . @var{string-pos}) if there is one:"
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1385
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: commands.texi.orig:1387
msgid "The string which was clicked on, including any properties."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1388
#, no-wrap
msgid "string-pos"
msgstr ""

#. type: table
#: commands.texi.orig:1390
msgid "The position in the string where the click occurred."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1392
#, no-wrap
msgid "text-pos"
msgstr ""

#. type: table
#: commands.texi.orig:1397
msgid "For clicks on a marginal area or on a fringe, this is the buffer position of the first visible character in the corresponding line in the window.  For other events, it is the current buffer position in the window."
msgstr ""

#. type: item
#: commands.texi.orig:1398
#, no-wrap
msgid "@var{col}, @var{row}"
msgstr ""

#. type: table
#: commands.texi.orig:1410
msgid "These are the actual column and row coordinate numbers of the glyph under the @var{x}, @var{y} position.  If @var{x} lies beyond the last column of actual text on its line, @var{col} is reported by adding fictional extra columns that have the default character width.  Row 0 is taken to be the header line if the window has one, or the topmost row of the text area otherwise.  Column 0 is taken to be the leftmost column of the text area for clicks on a window text area, or the leftmost mode line or header line column for clicks there.  For clicks on fringes or vertical borders, these have no meaningful data.  For clicks on margins, @var{col} is measured from the left edge of the margin area and @var{row} is measured from the top of the margin area."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1411
#, no-wrap
msgid "image"
msgstr ""

#. type: table
#: commands.texi.orig:1415
msgid "This is the image object on which the click occurred.  It is either @code{nil} if there is no image at the position clicked on, or it is an image object as returned by @code{find-image} if click was in an image."
msgstr ""

#. type: item
#: commands.texi.orig:1416
#, no-wrap
msgid "@var{dx}, @var{dy}"
msgstr ""

#. type: table
#: commands.texi.orig:1421
msgid "These are the pixel coordinates of the click, relative to the top left corner of @var{object}, which is @code{(0 . 0)}.  If @var{object} is @code{nil}, the coordinates are relative to the top left corner of the character glyph clicked on."
msgstr ""

#. type: item
#: commands.texi.orig:1422
#, no-wrap
msgid "@var{width}, @var{height}"
msgstr ""

#. type: table
#: commands.texi.orig:1425
msgid "These are the pixel width and height of @var{object} or, if this is @code{nil}, those of the character glyph clicked on."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1428
msgid "For clicks on a scroll bar, @var{position} has this form:"
msgstr ""

#. type: example
#: commands.texi.orig:1431
#, no-wrap
msgid "(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} @var{part})\n"
msgstr ""

#. type: table
#: commands.texi.orig:1436
msgid "The window whose scroll bar was clicked on."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1437
#, no-wrap
msgid "area"
msgstr ""

#. type: table
#: commands.texi.orig:1439
msgid "This is the symbol @code{vertical-scroll-bar}."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1440
#, no-wrap
msgid "portion"
msgstr ""

#. type: table
#: commands.texi.orig:1444
msgid "The number of pixels from the top of the scroll bar to the click position.  On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1445
#, no-wrap
msgid "whole"
msgstr ""

#. type: table
#: commands.texi.orig:1449
msgid "The total length, in pixels, of the scroll bar.  On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr ""

#. type: table
#: commands.texi.orig:1454
msgid "The time at which the event occurred, in milliseconds.  On some toolkits, including GTK+, Emacs cannot extract this data, so the value is always @code{0}."
msgstr ""

#. type: var{#1}
#: commands.texi.orig:1455
#, no-wrap
msgid "part"
msgstr ""

#. type: table
#: commands.texi.orig:1462
msgid "The part of the scroll bar on which the click occurred.  It is one of the symbols @code{handle} (the scroll bar handle), @code{above-handle} (the area above the handle), @code{below-handle} (the area below the handle), @code{up} (the up arrow at one end of the scroll bar), or @code{down} (the down arrow at one end of the scroll bar)."
msgstr ""

#. type: cindex
#: commands.texi.orig:1467
#, no-wrap
msgid "drag event"
msgstr ""

#. type: cindex
#: commands.texi.orig:1468
#, no-wrap
msgid "mouse drag event"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1476
msgid "With Emacs, you can have a drag event without even changing your clothes.  A @dfn{drag event} happens every time the user presses a mouse button and then moves the mouse to a different character position before releasing the button.  Like all mouse events, drag events are represented in Lisp as lists.  The lists record both the starting mouse position and the final position, like this:"
msgstr ""

#. type: example
#: commands.texi.orig:1481
#, no-wrap
msgid ""
"(@var{event-type}\n"
" (@var{window1} START-POSITION)\n"
" (@var{window2} END-POSITION))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1492
msgid "For a drag event, the name of the symbol @var{event-type} contains the prefix @samp{drag-}.  For example, dragging the mouse with button 2 held down generates a @code{drag-mouse-2} event.  The second and third elements of the event give the starting and ending position of the drag, as mouse position lists (@pxref{Click Events}).  You can access the second element of any mouse event in the same way.  However, the drag event may end outside the boundaries of the frame that was initially selected.  In that case, the third element's position list contains that frame in place of a window."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1495
msgid "The @samp{drag-} prefix follows the modifier key prefixes such as @samp{C-} and @samp{M-}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1501
msgid "If @code{read-key-sequence} receives a drag event that has no key binding, and the corresponding click event does have a binding, it changes the drag event into a click event at the drag's starting position.  This means that you don't have to distinguish between click and drag events unless you want to."
msgstr ""

#. type: cindex
#: commands.texi.orig:1504
#, no-wrap
msgid "button-down event"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1509
msgid "Click and drag events happen when the user releases a mouse button.  They cannot happen earlier, because there is no way to distinguish a click from a drag until the button is released."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1517
msgid "If you want to take action as soon as a button is pressed, you need to handle @dfn{button-down} events.@footnote{Button-down is the conservative antithesis of drag.} These occur as soon as a button is pressed.  They are represented by lists that look exactly like click events (@pxref{Click Events}), except that the @var{event-type} symbol name contains the prefix @samp{down-}.  The @samp{down-} prefix follows modifier key prefixes such as @samp{C-} and @samp{M-}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1525
msgid "The function @code{read-key-sequence} ignores any button-down events that don't have command bindings; therefore, the Emacs command loop ignores them too.  This means that you need not worry about defining button-down events unless you want them to do something.  The usual reason to define a button-down event is so that you can track mouse motion (by reading motion events) until the button is released.  @xref{Motion Events}."
msgstr ""

#. type: cindex
#: commands.texi.orig:1528
#, no-wrap
msgid "repeat events"
msgstr ""

#. type: cindex
#: commands.texi.orig:1529
#, no-wrap
msgid "double-click events"
msgstr ""

#. type: cindex
#: commands.texi.orig:1530
#, no-wrap
msgid "triple-click events"
msgstr ""

#. type: cindex
#: commands.texi.orig:1531
#, no-wrap
msgid "mouse events, repeated"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1536
msgid "If you press the same mouse button more than once in quick succession without moving the mouse, Emacs generates special @dfn{repeat} mouse events for the second and subsequent presses."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1541
msgid "The most common repeat events are @dfn{double-click} events.  Emacs generates a double-click event when you click a button twice; the event happens when you release the button (as is normal for all click events)."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1549
msgid "The event type of a double-click event contains the prefix @samp{double-}.  Thus, a double click on the second mouse button with @key{meta} held down comes to the Lisp program as @code{M-double-mouse-2}.  If a double-click event has no binding, the binding of the corresponding ordinary click event is used to execute it.  Thus, you need not pay attention to the double click feature unless you really want to."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1555
msgid "When the user performs a double click, Emacs generates first an ordinary click event, and then a double-click event.  Therefore, you must design the command binding of the double click event to assume that the single-click command has already run.  It must produce the desired results of a double click, starting from the results of a single click."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1559
msgid "This is convenient, if the meaning of a double click somehow ``builds on'' the meaning of a single click---which is recommended user interface design practice for double clicks."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1566
msgid "If you click a button, then press it down again and start moving the mouse with the button held down, then you get a @dfn{double-drag} event when you ultimately release the button.  Its event type contains @samp{double-drag} instead of just @samp{drag}.  If a double-drag event has no binding, Emacs looks for an alternate binding as if the event were an ordinary drag."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1574
msgid "Before the double-click or double-drag event, Emacs generates a @dfn{double-down} event when the user presses the button down for the second time.  Its event type contains @samp{double-down} instead of just @samp{down}.  If a double-down event has no binding, Emacs looks for an alternate binding as if the event were an ordinary button-down event.  If it finds no binding that way either, the double-down event is ignored."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1579
msgid "To summarize, when you click a button and then press it again right away, Emacs generates a down event and a click event for the first click, a double-down event when you press the button again, and finally either a double-click or a double-drag event."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1586
msgid "If you click a button twice and then press it again, all in quick succession, Emacs generates a @dfn{triple-down} event, followed by either a @dfn{triple-click} or a @dfn{triple-drag}.  The event types of these events contain @samp{triple} instead of @samp{double}.  If any triple event has no binding, Emacs uses the binding that it would use for the corresponding double event."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1592
msgid "If you click a button three or more times and then press it again, the events for the presses beyond the third are all triple events.  Emacs does not have separate event types for quadruple, quintuple, etc.@: events.  However, you can look at the event list to find out precisely how many times the button was pressed."
msgstr ""

#. type: defun
#: commands.texi.orig:1593
#, no-wrap
msgid "event-click-count event"
msgstr ""

#. type: defun
#: commands.texi.orig:1599
msgid "This function returns the number of consecutive button presses that led up to @var{event}.  If @var{event} is a double-down, double-click or double-drag event, the value is 2.  If @var{event} is a triple event, the value is 3 or greater.  If @var{event} is an ordinary mouse event (not a repeat event), the value is 1."
msgstr ""

#. type: defopt
#: commands.texi.orig:1601
#, no-wrap
msgid "double-click-fuzz"
msgstr ""

#. type: defopt
#: commands.texi.orig:1607
msgid "To generate repeat events, successive mouse button presses must be at approximately the same screen position.  The value of @code{double-click-fuzz} specifies the maximum number of pixels the mouse may be moved (horizontally or vertically) between two successive clicks to make a double-click."
msgstr ""

#. type: defopt
#: commands.texi.orig:1610
msgid "This variable is also the threshold for motion of the mouse to count as a drag."
msgstr ""

#. type: defopt
#: commands.texi.orig:1612
#, no-wrap
msgid "double-click-time"
msgstr ""

#. type: defopt
#: commands.texi.orig:1619
msgid "To generate repeat events, the number of milliseconds between successive button presses must be less than the value of @code{double-click-time}.  Setting @code{double-click-time} to @code{nil} disables multi-click detection entirely.  Setting it to @code{t} removes the time limit; Emacs then detects multi-clicks by position only."
msgstr ""

#. type: cindex
#: commands.texi.orig:1623
#, no-wrap
msgid "motion event"
msgstr ""

#. type: cindex
#: commands.texi.orig:1624
#, no-wrap
msgid "mouse motion events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1629
msgid "Emacs sometimes generates @dfn{mouse motion} events to describe motion of the mouse without any button activity.  Mouse motion events are represented by lists that look like this:"
msgstr ""

#. type: example
#: commands.texi.orig:1632
#, no-wrap
msgid "(mouse-movement POSITION)\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1640
msgid "@var{position} is a mouse position list (@pxref{Click Events}), specifying the current position of the mouse cursor.  As with the end-position of a drag event, this position list may represent a location outside the boundaries of the initially selected frame, in which case the list contains that frame in place of a window."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1645
msgid "The special form @code{track-mouse} enables generation of motion events within its body.  Outside of @code{track-mouse} forms, Emacs does not generate events for mere motion of the mouse, and these events do not appear.  @xref{Mouse Tracking}."
msgstr ""

#. type: cindex
#: commands.texi.orig:1648
#, no-wrap
msgid "focus event"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1656
msgid "Window systems provide general ways for the user to control which window gets keyboard input.  This choice of window is called the @dfn{focus}.  When the user does something to switch between Emacs frames, that generates a @dfn{focus event}.  The normal definition of a focus event, in the global keymap, is to select a new frame within Emacs, as the user would expect.  @xref{Input Focus}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1658
msgid "Focus events are represented in Lisp as lists that look like this:"
msgstr ""

#. type: example
#: commands.texi.orig:1661
#, no-wrap
msgid "(switch-frame @var{new-frame})\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1665
msgid "where @var{new-frame} is the frame switched to."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1673
msgid "Some X window managers are set up so that just moving the mouse into a window is enough to set the focus there.  Usually, there is no need for a Lisp program to know about the focus change until some other kind of input arrives.  Emacs generates a focus event only when the user actually types a keyboard key or presses a mouse button in the new frame; just moving the mouse between frames does not generate a focus event."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1680
msgid "A focus event in the middle of a key sequence would garble the sequence.  So Emacs never generates a focus event in the middle of a key sequence.  If the user changes focus in the middle of a key sequence---that is, after a prefix key---then Emacs reorders the events so that the focus event comes either before or after the multi-event key sequence, and not within it."
msgstr ""

#. type: subsection
#: commands.texi.orig:1682
#, no-wrap
msgid "Miscellaneous System Events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1685
msgid "A few other event types represent occurrences within the system."
msgstr ""

#. type: cindex
#: commands.texi.orig:1687
#, no-wrap
msgid "@code{delete-frame} event"
msgstr ""

#. type: item
#: commands.texi.orig:1688
#, no-wrap
msgid "(delete-frame (@var{frame}))"
msgstr ""

#. type: table
#: commands.texi.orig:1691
msgid "This kind of event indicates that the user gave the window manager a command to delete a particular window, which happens to be an Emacs frame."
msgstr ""

#. type: table
#: commands.texi.orig:1693
msgid "The standard definition of the @code{delete-frame} event is to delete @var{frame}."
msgstr ""

#. type: cindex
#: commands.texi.orig:1694
#, no-wrap
msgid "@code{iconify-frame} event"
msgstr ""

#. type: item
#: commands.texi.orig:1695
#, no-wrap
msgid "(iconify-frame (@var{frame}))"
msgstr ""

#. type: table
#: commands.texi.orig:1701
msgid "This kind of event indicates that the user iconified @var{frame} using the window manager.  Its standard definition is @code{ignore}; since the frame has already been iconified, Emacs has no work to do.  The purpose of this event type is so that you can keep track of such events if you want to."
msgstr ""

#. type: cindex
#: commands.texi.orig:1702
#, no-wrap
msgid "@code{make-frame-visible} event"
msgstr ""

#. type: item
#: commands.texi.orig:1703
#, no-wrap
msgid "(make-frame-visible (@var{frame}))"
msgstr ""

#. type: table
#: commands.texi.orig:1707
msgid "This kind of event indicates that the user deiconified @var{frame} using the window manager.  Its standard definition is @code{ignore}; since the frame has already been made visible, Emacs has no work to do."
msgstr ""

#. type: cindex
#: commands.texi.orig:1708
#, no-wrap
msgid "@code{wheel-up} event"
msgstr ""

#. type: cindex
#: commands.texi.orig:1709
#, no-wrap
msgid "@code{wheel-down} event"
msgstr ""

#. type: item
#: commands.texi.orig:1710
#, no-wrap
msgid "(wheel-up @var{position})"
msgstr ""

#. type: itemx
#: commands.texi.orig:1711
#, no-wrap
msgid "(wheel-down @var{position})"
msgstr ""

#. type: table
#: commands.texi.orig:1716
msgid "These kinds of event are generated by moving a mouse wheel.  The @var{position} element is a mouse position list (@pxref{Click Events}), specifying the position of the mouse cursor when the event occurred."
msgstr ""

#. type: vindex
#: commands.texi.orig:1717
#, no-wrap
msgid "mouse-wheel-up-event"
msgstr ""

#. type: vindex
#: commands.texi.orig:1718
#, no-wrap
msgid "mouse-wheel-down-event"
msgstr ""

#. type: table
#: commands.texi.orig:1724
msgid "This kind of event is generated only on some kinds of systems. On some systems, @code{mouse-4} and @code{mouse-5} are used instead.  For portable code, use the variables @code{mouse-wheel-up-event} and @code{mouse-wheel-down-event} defined in @file{mwheel.el} to determine what event types to expect for the mouse wheel."
msgstr ""

#. type: cindex
#: commands.texi.orig:1725
#, no-wrap
msgid "@code{drag-n-drop} event"
msgstr ""

#. type: item
#: commands.texi.orig:1726
#, no-wrap
msgid "(drag-n-drop @var{position} @var{files})"
msgstr ""

#. type: table
#: commands.texi.orig:1730
msgid "This kind of event is generated when a group of files is selected in an application outside of Emacs, and then dragged and dropped onto an Emacs frame."
msgstr ""

#. type: table
#: commands.texi.orig:1736
msgid "The element @var{position} is a list describing the position of the event, in the same format as used in a mouse-click event (@pxref{Click Events}), and @var{files} is the list of file names that were dragged and dropped.  The usual way to handle this event is by visiting these files."
msgstr ""

#. type: table
#: commands.texi.orig:1739
msgid "This kind of event is generated, at present, only on some kinds of systems."
msgstr ""

#. type: cindex
#: commands.texi.orig:1740
#, no-wrap
msgid "@code{help-echo} event"
msgstr ""

#. type: item
#: commands.texi.orig:1741
#, no-wrap
msgid "help-echo"
msgstr ""

#. type: table
#: commands.texi.orig:1745
msgid "This kind of event is generated when a mouse pointer moves onto a portion of buffer text which has a @code{help-echo} text property.  The generated event has this form:"
msgstr ""

#. type: example
#: commands.texi.orig:1748
#, no-wrap
msgid "(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})\n"
msgstr ""

#. type: table
#: commands.texi.orig:1754
msgid "The precise meaning of the event parameters and the way these parameters are used to display the help-echo text are described in @ref{Text help-echo}."
msgstr ""

#. type: cindex
#: commands.texi.orig:1755
#, no-wrap
msgid "@code{sigusr1} event"
msgstr ""

#. type: cindex
#: commands.texi.orig:1756
#, no-wrap
msgid "@code{sigusr2} event"
msgstr ""

#. type: cindex
#: commands.texi.orig:1757
#, no-wrap
msgid "user signals"
msgstr ""

#. type: item
#: commands.texi.orig:1758
#, no-wrap
msgid "sigusr1"
msgstr ""

#. type: itemx
#: commands.texi.orig:1759
#, no-wrap
msgid "sigusr2"
msgstr ""

#. type: table
#: commands.texi.orig:1764
msgid "These events are generated when the Emacs process receives the signals @code{SIGUSR1} and @code{SIGUSR2}.  They contain no additional data because signals do not carry additional information.  They can be useful for debugging (@pxref{Error Debugging})."
msgstr ""

#. type: table
#: commands.texi.orig:1769
msgid "To catch a user signal, bind the corresponding event to an interactive command in the @code{special-event-map} (@pxref{Active Keymaps}).  The command is called with no arguments, and the specific signal event is available in @code{last-input-event}.  For example:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1774
#, no-wrap
msgid ""
"(defun sigusr-handler ()\n"
"  (interactive)\n"
"  (message \"Caught signal %S\" last-input-event))\n"
"\n"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1776
#, no-wrap
msgid "(define-key special-event-map [sigusr1] 'sigusr-handler)\n"
msgstr ""

#. type: table
#: commands.texi.orig:1779
msgid "To test the signal handler, you can make Emacs send a signal to itself:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1782
#, no-wrap
msgid "(signal-process (emacs-pid) 'sigusr1)\n"
msgstr ""

#. type: cindex
#: commands.texi.orig:1784
#, no-wrap
msgid "@code{language-change} event"
msgstr ""

#. type: item
#: commands.texi.orig:1785
#, no-wrap
msgid "language-change"
msgstr ""

#. type: table
#: commands.texi.orig:1790
msgid "This kind of event is generated on MS-Windows when the input language has changed.  This typically means that the keyboard keys will send to Emacs characters from a different language.  The generated event has this form:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1793
#, no-wrap
msgid "(language-change @var{frame} @var{codepage} @var{language-id})\n"
msgstr ""

#. type: table
#: commands.texi.orig:1805
msgid "Here @var{frame} is the frame which was current when the input language changed; @var{codepage} is the new codepage number; and @var{language-id} is the numerical ID of the new input language.  The coding-system (@pxref{Coding Systems}) that corresponds to @var{codepage} is @code{cp@var{codepage}} or @code{windows-@var{codepage}}.  To convert @var{language-id} to a string (e.g., to use it for various language-dependent features, such as @code{set-language-environment}), use the @code{w32-get-locale-info} function, like this:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1814
#, no-wrap
msgid ""
";; Get the abbreviated language name, such as \"ENU\" for English\n"
"(w32-get-locale-info language-id)\n"
";; Get the full English name of the language,\n"
";; such as \"English (United States)\"\n"
"(w32-get-locale-info language-id 4097)\n"
";; Get the full localized name of the language\n"
"(w32-get-locale-info language-id t)\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1821
msgid "If one of these events arrives in the middle of a key sequence---that is, after a prefix key---then Emacs reorders the events so that this event comes either before or after the multi-event key sequence, not within it."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1827
msgid "If the user presses and releases the left mouse button over the same location, that generates a sequence of events like this:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1831
#, no-wrap
msgid ""
"(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))\n"
"(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1836
msgid "While holding the control key down, the user might hold down the second mouse button, and drag the mouse from one line to the next.  That produces two events, as shown here:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1841
#, no-wrap
msgid ""
"(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))\n"
"(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)\n"
"                (#<window 18 on NEWS> 3510 (0 . 28) -729648))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1846
msgid "While holding down the meta and shift keys, the user might press the second mouse button on the window's mode line, and then drag the mouse into another window.  That produces a pair of events like these:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1852
#, no-wrap
msgid ""
"(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))\n"
"(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)\n"
"                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)\n"
"                   -453816))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1857
msgid "The frame with input focus might not take up the entire screen, and the user might move the mouse outside the scope of the frame. Inside the @code{track-mouse} special form, that produces an event like this:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1860
#, no-wrap
msgid "(mouse-movement (#<frame *ielm* 0x102849a30> nil (563 . 205) 532301936))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1864
msgid "To handle a SIGUSR1 signal, define an interactive function, and bind it to the @code{signal usr1} event sequence:"
msgstr ""

#. type: smallexample
#: commands.texi.orig:1870
#, no-wrap
msgid ""
"(defun usr1-handler ()\n"
"  (interactive)\n"
"  (message \"Got USR1 signal\"))\n"
"(global-set-key [signal usr1] 'usr1-handler)\n"
msgstr ""

#. type: cindex
#: commands.texi.orig:1874
#, no-wrap
msgid "event type"
msgstr ""

#. type: cindex
#: commands.texi.orig:1875
#, no-wrap
msgid "classifying events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1883
msgid "Every event has an @dfn{event type}, which classifies the event for key binding purposes.  For a keyboard event, the event type equals the event value; thus, the event type for a character is the character, and the event type for a function key symbol is the symbol itself.  For events that are lists, the event type is the symbol in the @sc{car} of the list.  Thus, the event type is always a symbol or a character."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1889
msgid "Two events of the same type are equivalent where key bindings are concerned; thus, they always run the same command.  That does not necessarily mean they do the same things, however, as some commands look at the whole event to decide what to do.  For example, some commands use the location of a mouse event to decide where in the buffer to act."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1893
msgid "Sometimes broader classifications of events are useful.  For example, you might want to ask whether an event involved the @key{META} key, regardless of which other key or mouse button was used."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1896
msgid "The functions @code{event-modifiers} and @code{event-basic-type} are provided to get such information conveniently."
msgstr ""

#. type: defun
#: commands.texi.orig:1897
#, no-wrap
msgid "event-modifiers event"
msgstr ""

#. type: defun
#: commands.texi.orig:1904
msgid "This function returns a list of the modifiers that @var{event} has.  The modifiers are symbols; they include @code{shift}, @code{control}, @code{meta}, @code{alt}, @code{hyper} and @code{super}.  In addition, the modifiers list of a mouse event symbol always contains one of @code{click}, @code{drag}, and @code{down}.  For double or triple events, it also contains @code{double} or @code{triple}."
msgstr ""

#. type: defun
#: commands.texi.orig:1910
msgid "The argument @var{event} may be an entire event object, or just an event type.  If @var{event} is a symbol that has never been used in an event that has been read as input in the current Emacs session, then @code{event-modifiers} can return @code{nil}, even when @var{event} actually has modifiers."
msgstr ""

#. type: defun
#: commands.texi.orig:1912
msgid "Here are some examples:"
msgstr ""

#. type: example
#: commands.texi.orig:1934
#, no-wrap
msgid ""
"(event-modifiers ?a)\n"
"     @result{} nil\n"
"(event-modifiers ?A)\n"
"     @result{} (shift)\n"
"(event-modifiers ?\\C-a)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-%)\n"
"     @result{} (control)\n"
"(event-modifiers ?\\C-\\S-a)\n"
"     @result{} (control shift)\n"
"(event-modifiers 'f5)\n"
"     @result{} nil\n"
"(event-modifiers 's-f5)\n"
"     @result{} (super)\n"
"(event-modifiers 'M-S-f5)\n"
"     @result{} (meta shift)\n"
"(event-modifiers 'mouse-1)\n"
"     @result{} (click)\n"
"(event-modifiers 'down-mouse-1)\n"
"     @result{} (down)\n"
msgstr ""

#. type: defun
#: commands.texi.orig:1938
msgid "The modifiers list for a click event explicitly contains @code{click}, but the event symbol name itself does not contain @samp{click}."
msgstr ""

#. type: defun
#: commands.texi.orig:1940
#, no-wrap
msgid "event-basic-type event"
msgstr ""

#. type: defun
#: commands.texi.orig:1944
msgid "This function returns the key or mouse button that @var{event} describes, with all modifiers removed.  The @var{event} argument is as in @code{event-modifiers}.  For example:"
msgstr ""

#. type: example
#: commands.texi.orig:1962
#, no-wrap
msgid ""
"(event-basic-type ?a)\n"
"     @result{} 97\n"
"(event-basic-type ?A)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-a)\n"
"     @result{} 97\n"
"(event-basic-type ?\\C-\\S-a)\n"
"     @result{} 97\n"
"(event-basic-type 'f5)\n"
"     @result{} f5\n"
"(event-basic-type 's-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'M-S-f5)\n"
"     @result{} f5\n"
"(event-basic-type 'down-mouse-1)\n"
"     @result{} mouse-1\n"
msgstr ""

#. type: defun
#: commands.texi.orig:1965
#, no-wrap
msgid "mouse-movement-p object"
msgstr ""

#. type: defun
#: commands.texi.orig:1968
msgid "This function returns non-@code{nil} if @var{object} is a mouse movement event."
msgstr ""

#. type: defun
#: commands.texi.orig:1970
#, no-wrap
msgid "event-convert-list list"
msgstr ""

#. type: defun
#: commands.texi.orig:1974
msgid "This function converts a list of modifier names and a basic event type to an event type which specifies all of them.  The basic event type must be the last element of the list.  For example,"
msgstr ""

#. type: example
#: commands.texi.orig:1982
#, no-wrap
msgid ""
"(event-convert-list '(control ?a))\n"
"     @result{} 1\n"
"(event-convert-list '(control meta ?a))\n"
"     @result{} -134217727\n"
"(event-convert-list '(control super f1))\n"
"     @result{} C-s-f1\n"
msgstr ""

#. type: subsection
#: commands.texi.orig:1986
#, no-wrap
msgid "Accessing Mouse Events"
msgstr ""

#. type: cindex
#: commands.texi.orig:1987
#, no-wrap
msgid "mouse events, data in"
msgstr ""

#. type: cindex
#: commands.texi.orig:1988
#, no-wrap
msgid "keyboard events, data in"
msgstr ""

#. type: Plain text
#: commands.texi.orig:1994
msgid "This section describes convenient functions for accessing the data in a mouse button or motion event.  Keyboard event data can be accessed using the same functions, but data elements that aren't applicable to keyboard events are zero or @code{nil}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:1997
msgid "The following two functions return a mouse position list (@pxref{Click Events}), specifying the position of a mouse event."
msgstr ""

#. type: defun
#: commands.texi.orig:1998
#, no-wrap
msgid "event-start event"
msgstr ""

#. type: defun
#: commands.texi.orig:2000
msgid "This returns the starting position of @var{event}."
msgstr ""

#. type: defun
#: commands.texi.orig:2004
msgid "If @var{event} is a click or button-down event, this returns the location of the event.  If @var{event} is a drag event, this returns the drag's starting position."
msgstr ""

#. type: defun
#: commands.texi.orig:2006
#, no-wrap
msgid "event-end event"
msgstr ""

#. type: defun
#: commands.texi.orig:2008
msgid "This returns the ending position of @var{event}."
msgstr ""

#. type: defun
#: commands.texi.orig:2013
msgid "If @var{event} is a drag event, this returns the position where the user released the mouse button.  If @var{event} is a click or button-down event, the value is actually the starting position, which is the only position such events have."
msgstr ""

#. type: defun
#: commands.texi.orig:2015
#, no-wrap
msgid "posnp object"
msgstr ""

#. type: defun
#: commands.texi.orig:2019
msgid "This function returns non-@code{nil} if @var{object} is a mouse position list, in either of the formats documented in @ref{Click Events}); and @code{nil} otherwise."
msgstr ""

#. type: cindex
#: commands.texi.orig:2021
#, no-wrap
msgid "mouse position list, accessing"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2024
msgid "These functions take a mouse position list as argument, and return various parts of it:"
msgstr ""

#. type: defun
#: commands.texi.orig:2025
#, no-wrap
msgid "posn-window position"
msgstr ""

#. type: defun
#: commands.texi.orig:2029
msgid "Return the window that @var{position} is in.  If @var{position} represents a location outside the frame where the event was initiated, return that frame instead."
msgstr ""

#. type: defun
#: commands.texi.orig:2031
#, no-wrap
msgid "posn-area position"
msgstr ""

#. type: defun
#: commands.texi.orig:2035
msgid "Return the window area recorded in @var{position}.  It returns @code{nil} when the event occurred in the text area of the window; otherwise, it is a symbol identifying the area in which the event occurred."
msgstr ""

#. type: defun
#: commands.texi.orig:2037
#, no-wrap
msgid "posn-point position"
msgstr ""

#. type: defun
#: commands.texi.orig:2042
msgid "Return the buffer position in @var{position}.  When the event occurred in the text area of the window, in a marginal area, or on a fringe, this is an integer specifying a buffer position.  Otherwise, the value is undefined."
msgstr ""

#. type: defun
#: commands.texi.orig:2044
#, no-wrap
msgid "posn-x-y position"
msgstr ""

#. type: defun
#: commands.texi.orig:2048
msgid "Return the pixel-based x and y coordinates in @var{position}, as a cons cell @code{(@var{x} . @var{y})}.  These coordinates are relative to the window given by @code{posn-window}."
msgstr ""

#. type: defun
#: commands.texi.orig:2051
msgid "This example shows how to convert the window-relative coordinates in the text area of a window into frame-relative coordinates:"
msgstr ""

#. type: example
#: commands.texi.orig:2061
#, no-wrap
msgid ""
"(defun frame-relative-coordinates (position)\n"
"  \"Return frame-relative coordinates from POSITION.\n"
"POSITION is assumed to lie in a window text area.\"\n"
"  (let* ((x-y (posn-x-y position))\n"
"         (window (posn-window position))\n"
"         (edges (window-inside-pixel-edges window)))\n"
"    (cons (+ (car x-y) (car edges))\n"
"          (+ (cdr x-y) (cadr edges)))))\n"
msgstr ""

#. type: defun
#: commands.texi.orig:2064
#, no-wrap
msgid "posn-col-row position"
msgstr ""

#. type: defun
#: commands.texi.orig:2073
msgid "This function returns a cons cell @code{(@var{col} .  @var{row})}, containing the estimated column and row corresponding to buffer position in @var{position}.  The return value is given in units of the frame's default character width and default line height (including spacing), as computed from the @var{x} and @var{y} values corresponding to @var{position}.  (So, if the actual characters have non-default sizes, the actual row and column may differ from these computed values.)"
msgstr ""

#. type: defun
#: commands.texi.orig:2077
msgid "Note that @var{row} is counted from the top of the text area.  If the window given by @var{position} possesses a header line (@pxref{Header Lines}), it is @emph{not} included in the @var{row} count."
msgstr ""

#. type: defun
#: commands.texi.orig:2079
#, no-wrap
msgid "posn-actual-col-row position"
msgstr ""

#. type: defun
#: commands.texi.orig:2086
msgid "Return the actual row and column in @var{position}, as a cons cell @code{(@var{col} . @var{row})}.  The values are the actual row and column numbers in the window given by @var{position}.  @xref{Click Events}, for details.  The function returns @code{nil} if @var{position} does not include actual position values; in that case @code{posn-col-row} can be used to get approximate values."
msgstr ""

#. type: defun
#: commands.texi.orig:2091
msgid "Note that this function doesn't account for the visual width of characters on display, like the number of visual columns taken by a tab character or an image.  If you need the coordinates in canonical character units, use @code{posn-col-row} instead."
msgstr ""

#. type: defun
#: commands.texi.orig:2093
#, no-wrap
msgid "posn-string position"
msgstr ""

#. type: defun
#: commands.texi.orig:2096
msgid "Return the string object in @var{position}, either @code{nil}, or a cons cell @code{(@var{string} . @var{string-pos})}."
msgstr ""

#. type: defun
#: commands.texi.orig:2098
#, no-wrap
msgid "posn-image position"
msgstr ""

#. type: defun
#: commands.texi.orig:2101
msgid "Return the image object in @var{position}, either @code{nil}, or an image @code{(image ...)}."
msgstr ""

#. type: defun
#: commands.texi.orig:2103
#, no-wrap
msgid "posn-object position"
msgstr ""

#. type: defun
#: commands.texi.orig:2107
msgid "Return the image or string object in @var{position}, either @code{nil}, an image @code{(image ...)}, or a cons cell @code{(@var{string} . @var{string-pos})}."
msgstr ""

#. type: defun
#: commands.texi.orig:2109
#, no-wrap
msgid "posn-object-x-y position"
msgstr ""

#. type: defun
#: commands.texi.orig:2115
msgid "Return the pixel-based x and y coordinates relative to the upper left corner of the object in @var{position} as a cons cell @code{(@var{dx} . @var{dy})}.  If the @var{position} is on buffer text, return the relative position of the buffer-text character closest to that position."
msgstr ""

#. type: defun
#: commands.texi.orig:2117
#, no-wrap
msgid "posn-object-width-height position"
msgstr ""

#. type: defun
#: commands.texi.orig:2121
msgid "Return the pixel width and height of the object in @var{position} as a cons cell @code{(@var{width} . @var{height})}.  If the @var{position} is a buffer position, return the size of the character at that position."
msgstr ""

#. type: cindex
#: commands.texi.orig:2123
#, no-wrap
msgid "timestamp of a mouse event"
msgstr ""

#. type: defun
#: commands.texi.orig:2124
#, no-wrap
msgid "posn-timestamp position"
msgstr ""

#. type: defun
#: commands.texi.orig:2127
msgid "Return the timestamp in @var{position}.  This is the time at which the event occurred, in milliseconds."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2132
msgid "These functions compute a position list given particular buffer position or screen position.  You can access the data in this position list with the functions described above."
msgstr ""

#. type: defun
#: commands.texi.orig:2133
#, no-wrap
msgid "posn-at-point &optional pos window"
msgstr ""

#. type: defun
#: commands.texi.orig:2137
msgid "This function returns a position list for position @var{pos} in @var{window}.  @var{pos} defaults to point in @var{window}; @var{window} defaults to the selected window."
msgstr ""

#. type: defun
#: commands.texi.orig:2140
msgid "@code{posn-at-point} returns @code{nil} if @var{pos} is not visible in @var{window}."
msgstr ""

#. type: defun
#: commands.texi.orig:2142
#, no-wrap
msgid "posn-at-x-y x y &optional frame-or-window whole"
msgstr ""

#. type: defun
#: commands.texi.orig:2151
msgid "This function returns position information corresponding to pixel coordinates @var{x} and @var{y} in a specified frame or window, @var{frame-or-window}, which defaults to the selected window.  The coordinates @var{x} and @var{y} are relative to the frame or window used.  If @var{whole} is @code{nil}, the coordinates are relative to the window text area, otherwise they are relative to the entire window area including scroll bars, margins and fringes."
msgstr ""

#. type: subsection
#: commands.texi.orig:2154
#, no-wrap
msgid "Accessing Scroll Bar Events"
msgstr ""

#. type: cindex
#: commands.texi.orig:2155
#, no-wrap
msgid "scroll bar events, data in"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2158
msgid "These functions are useful for decoding scroll bar events."
msgstr ""

#. type: defun
#: commands.texi.orig:2159
#, no-wrap
msgid "scroll-bar-event-ratio event"
msgstr ""

#. type: defun
#: commands.texi.orig:2164
msgid "This function returns the fractional vertical position of a scroll bar event within the scroll bar.  The value is a cons cell @code{(@var{portion} . @var{whole})} containing two integers whose ratio is the fractional position."
msgstr ""

#. type: defun
#: commands.texi.orig:2166
#, no-wrap
msgid "scroll-bar-scale ratio total"
msgstr ""

#. type: defun
#: commands.texi.orig:2171
msgid "This function multiplies (in effect) @var{ratio} by @var{total}, rounding the result to an integer.  The argument @var{ratio} is not a number, but rather a pair @code{(@var{num} . @var{denom})}---typically a value returned by @code{scroll-bar-event-ratio}."
msgstr ""

#. type: defun
#: commands.texi.orig:2174
msgid "This function is handy for scaling a position on a scroll bar into a buffer position.  Here's how to do that:"
msgstr ""

#. type: example
#: commands.texi.orig:2180
#, no-wrap
msgid ""
"(+ (point-min)\n"
"   (scroll-bar-scale\n"
"      (posn-x-y (event-start event))\n"
"      (- (point-max) (point-min))))\n"
msgstr ""

#. type: defun
#: commands.texi.orig:2184
msgid "Recall that scroll bar events have two integers forming a ratio, in place of a pair of x and y coordinates."
msgstr ""

#. type: subsection
#: commands.texi.orig:2187
#, no-wrap
msgid "Putting Keyboard Events in Strings"
msgstr ""

#. type: cindex
#: commands.texi.orig:2188
#, no-wrap
msgid "keyboard events in strings"
msgstr ""

#. type: cindex
#: commands.texi.orig:2189
#, no-wrap
msgid "strings with keyboard events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2198
msgid "In most of the places where strings are used, we conceptualize the string as containing text characters---the same kind of characters found in buffers or files.  Occasionally Lisp programs use strings that conceptually contain keyboard characters; for example, they may be key sequences or keyboard macro definitions.  However, storing keyboard characters in a string is a complex matter, for reasons of historical compatibility, and it is not always possible."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2201
msgid "We recommend that new programs avoid dealing with these complexities by not storing keyboard events in strings.  Here is how to do that:"
msgstr ""

#. type: itemize
#: commands.texi.orig:2209
msgid "Use vectors instead of strings for key sequences, when you plan to use them for anything other than as arguments to @code{lookup-key} and @code{define-key}.  For example, you can use @code{read-key-sequence-vector} instead of @code{read-key-sequence}, and @code{this-command-keys-vector} instead of @code{this-command-keys}."
msgstr ""

#. type: itemize
#: commands.texi.orig:2213
msgid "Use vectors to write key sequence constants containing meta characters, even when passing them directly to @code{define-key}."
msgstr ""

#. type: itemize
#: commands.texi.orig:2218
msgid "When you have to look at the contents of a key sequence that might be a string, use @code{listify-key-sequence} (@pxref{Event Input Misc})  first, to convert it to a list."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2224
msgid "The complexities stem from the modifier bits that keyboard input characters can include.  Aside from the Meta modifier, none of these modifier bits can be included in a string, and the Meta modifier is allowed only in special cases."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2232
msgid "The earliest GNU Emacs versions represented meta characters as codes in the range of 128 to 255.  At that time, the basic character codes ranged from 0 to 127, so all keyboard character codes did fit in a string.  Many Lisp programs used @samp{\\M-} in string constants to stand for meta characters, especially in arguments to @code{define-key} and similar functions, and key sequences and sequences of events were always represented as strings."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2237
msgid "When we added support for larger basic character codes beyond 127, and additional modifier bits, we had to change the representation of meta characters.  Now the flag that represents the Meta modifier in a character is"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2244
msgid "and such numbers cannot be included in a string."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2249
msgid "To support programs with @samp{\\M-} in string constants, there are special rules for including certain meta characters in a string.  Here are the rules for interpreting a string as a sequence of input characters:"
msgstr ""

#. type: itemize
#: commands.texi.orig:2254
msgid "If the keyboard character value is in the range of 0 to 127, it can go in the string unchanged."
msgstr ""

#. type: itemize
#: commands.texi.orig:2257
msgid "The meta variants of those characters, with codes in the range of"
msgstr ""

#. type: itemize
#: commands.texi.orig:2264
msgid "to"
msgstr ""

#. type: tex
#: commands.texi.orig:2266
#, no-wrap
msgid "@math{2^{27} + 127},\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:2269
msgid "2**27+127,"
msgstr ""

#. type: itemize
#: commands.texi.orig:2272
msgid "can also go in the string, but you must change their numeric values.  You must set the"
msgstr ""

#. type: tex
#: commands.texi.orig:2274
#, no-wrap
msgid "@math{2^{7}}\n"
msgstr ""

#. type: ifnottex
#: commands.texi.orig:2277
msgid "2**7"
msgstr ""

#. type: itemize
#: commands.texi.orig:2279
msgid "bit instead of the"
msgstr ""

#. type: itemize
#: commands.texi.orig:2287
msgid "bit, resulting in a value between 128 and 255.  Only a unibyte string can include these codes."
msgstr ""

#. type: itemize
#: commands.texi.orig:2290
msgid "Non-@acronym{ASCII} characters above 256 can be included in a multibyte string."
msgstr ""

#. type: itemize
#: commands.texi.orig:2294
msgid "Other keyboard character events cannot fit in a string.  This includes keyboard events in the range of 128 to 255."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2299
msgid "Functions such as @code{read-key-sequence} that construct strings of keyboard input characters follow these rules: they construct vectors instead of strings, when the events won't fit in a string."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2305
msgid "When you use the read syntax @samp{\\M-} in a string, it produces a code in the range of 128 to 255---the same code that you get if you modify the corresponding keyboard event to put it in the string.  Thus, meta events in strings work consistently regardless of how they get into the strings."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2308
msgid "However, most programs would do well to avoid these issues by following the recommendations at the beginning of this section."
msgstr ""

#. type: cindex
#: commands.texi.orig:2311
#, no-wrap
msgid "read input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2312
#, no-wrap
msgid "keyboard input"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2321
msgid "The editor command loop reads key sequences using the function @code{read-key-sequence}, which uses @code{read-event}.  These and other functions for event input are also available for use in Lisp programs.  See also @code{momentary-string-display} in @ref{Temporary Displays}, and @code{sit-for} in @ref{Waiting}.  @xref{Terminal Input}, for functions and variables for controlling terminal input modes and debugging terminal input."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2323
msgid "For higher-level input facilities, see @ref{Minibuffers}."
msgstr ""

#. type: subsection
#: commands.texi.orig:2331 commands.texi.orig:2333 commands.texi.orig:2334
#, no-wrap
msgid "Key Sequence Input"
msgstr ""

#. type: menuentry
#: commands.texi.orig:2331
msgid "How to read one key sequence."
msgstr ""

#. type: subsection
#: commands.texi.orig:2331 commands.texi.orig:2466 commands.texi.orig:2467
#, no-wrap
msgid "Reading One Event"
msgstr ""

#. type: menuentry
#: commands.texi.orig:2331
msgid "How to read just one event."
msgstr ""

#. type: node
#: commands.texi.orig:2331 commands.texi.orig:2608
#, no-wrap
msgid "Event Mod"
msgstr ""

#. type: menuentry
#: commands.texi.orig:2331
msgid "How Emacs modifies events as they are read."
msgstr ""

#. type: subsection
#: commands.texi.orig:2331 commands.texi.orig:2692 commands.texi.orig:2693
#, no-wrap
msgid "Invoking the Input Method"
msgstr ""

#. type: menuentry
#: commands.texi.orig:2331
msgid "How reading an event uses the input method."
msgstr ""

#. type: subsection
#: commands.texi.orig:2331 commands.texi.orig:2734 commands.texi.orig:2735
#, no-wrap
msgid "Quoted Character Input"
msgstr ""

#. type: menuentry
#: commands.texi.orig:2331
msgid "Asking the user to specify a character."
msgstr ""

#. type: node
#: commands.texi.orig:2331 commands.texi.orig:2779
#, no-wrap
msgid "Event Input Misc"
msgstr ""

#. type: menuentry
#: commands.texi.orig:2331
msgid "How to reread or throw away input events."
msgstr ""

#. type: cindex
#: commands.texi.orig:2335
#, no-wrap
msgid "key sequence input"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2340
msgid "The command loop reads input a key sequence at a time, by calling @code{read-key-sequence}.  Lisp programs can also call this function; for example, @code{describe-key} uses it to read the key to describe."
msgstr ""

#. type: defun
#: commands.texi.orig:2341
#, no-wrap
msgid "read-key-sequence prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"
msgstr ""

#. type: defun
#: commands.texi.orig:2348
msgid "This function reads a key sequence and returns it as a string or vector.  It keeps reading events until it has accumulated a complete key sequence; that is, enough to specify a non-prefix command using the currently active keymaps.  (Remember that a key sequence that starts with a mouse event is read using the keymaps of the buffer in the window that the mouse was in, not the current buffer.)"
msgstr ""

#. type: defun
#: commands.texi.orig:2354
msgid "If the events are all characters and all can fit in a string, then @code{read-key-sequence} returns a string (@pxref{Strings of Events}).  Otherwise, it returns a vector, since a vector can hold all kinds of events---characters, symbols, and lists.  The elements of the string or vector are the events in the key sequence."
msgstr ""

#. type: defun
#: commands.texi.orig:2357
msgid "Reading a key sequence includes translating the events in various ways.  @xref{Translation Keymaps}."
msgstr ""

#. type: defun
#: commands.texi.orig:2362
msgid "The argument @var{prompt} is either a string to be displayed in the echo area as a prompt, or @code{nil}, meaning not to display a prompt.  The argument @var{continue-echo}, if non-@code{nil}, means to echo this key as a continuation of the previous key."
msgstr ""

#. type: defun
#: commands.texi.orig:2368
msgid "Normally any upper case event is converted to lower case if the original event is undefined and the lower case equivalent is defined.  The argument @var{dont-downcase-last}, if non-@code{nil}, means do not convert the last event to lower case.  This is appropriate for reading a key sequence to be defined."
msgstr ""

#. type: defun
#: commands.texi.orig:2375
msgid "The argument @var{switch-frame-ok}, if non-@code{nil}, means that this function should process a @code{switch-frame} event if the user switches frames before typing anything.  If the user switches frames in the middle of a key sequence, or at the start of the sequence but @var{switch-frame-ok} is @code{nil}, then the event will be put off until after the current key sequence."
msgstr ""

#. type: defun
#: commands.texi.orig:2380
msgid "The argument @var{command-loop}, if non-@code{nil}, means that this key sequence is being read by something that will read commands one after another.  It should be @code{nil} if the caller will read just one key sequence."
msgstr ""

#. type: defun
#: commands.texi.orig:2383
msgid "In the following example, Emacs displays the prompt @samp{?} in the echo area, and then the user types @kbd{C-x C-f}."
msgstr ""

#. type: example
#: commands.texi.orig:2386
#, no-wrap
msgid ""
"(read-key-sequence \"?\")\n"
"\n"
msgstr ""

#. type: group
#: commands.texi.orig:2391
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"?@kbd{C-x C-f}\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""

#. type: group
#: commands.texi.orig:2393
#, no-wrap
msgid "     @result{} \"^X^F\"\n"
msgstr ""

#. type: defun
#: commands.texi.orig:2399
msgid "The function @code{read-key-sequence} suppresses quitting: @kbd{C-g} typed while reading with this function works like any other character, and does not set @code{quit-flag}.  @xref{Quitting}."
msgstr ""

#. type: defun
#: commands.texi.orig:2401
#, no-wrap
msgid "read-key-sequence-vector prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop"
msgstr ""

#. type: defun
#: commands.texi.orig:2405
msgid "This is like @code{read-key-sequence} except that it always returns the key sequence as a vector, never as a string.  @xref{Strings of Events}."
msgstr ""

#. type: cindex
#: commands.texi.orig:2407
#, no-wrap
msgid "upper case key sequence"
msgstr ""

#. type: cindex
#: commands.texi.orig:2408
#, no-wrap
msgid "downcasing in @code{lookup-key}"
msgstr ""

#. type: cindex
#: commands.texi.orig:2409
#, no-wrap
msgid "shift-translation"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2414
msgid "If an input character is upper-case (or has the shift modifier) and has no key binding, but its lower-case equivalent has one, then @code{read-key-sequence} converts the character to lower case.  Note that @code{lookup-key} does not perform case conversion in this way."
msgstr ""

#. type: vindex
#: commands.texi.orig:2415
#, no-wrap
msgid "this-command-keys-shift-translated"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2423
msgid "When reading input results in such a @dfn{shift-translation}, Emacs sets the variable @code{this-command-keys-shift-translated} to a non-@code{nil} value.  Lisp programs can examine this variable if they need to modify their behavior when invoked by shift-translated keys.  For example, the function @code{handle-shift-selection} examines the value of this variable to determine how to activate or deactivate the region (@pxref{The Mark, handle-shift-selection})."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2429
msgid "The function @code{read-key-sequence} also transforms some mouse events.  It converts unbound drag events into click events, and discards unbound button-down events entirely.  It also reshuffles focus events and miscellaneous window events so that they never appear in a key sequence with any other events."
msgstr ""

#. type: cindex
#: commands.texi.orig:2430
#, no-wrap
msgid "@code{header-line} prefix key"
msgstr ""

#. type: cindex
#: commands.texi.orig:2431
#, no-wrap
msgid "@code{mode-line} prefix key"
msgstr ""

#. type: cindex
#: commands.texi.orig:2432
#, no-wrap
msgid "@code{vertical-line} prefix key"
msgstr ""

#. type: cindex
#: commands.texi.orig:2433
#, no-wrap
msgid "@code{horizontal-scroll-bar} prefix key"
msgstr ""

#. type: cindex
#: commands.texi.orig:2434
#, no-wrap
msgid "@code{vertical-scroll-bar} prefix key"
msgstr ""

#. type: cindex
#: commands.texi.orig:2435
#, no-wrap
msgid "@code{menu-bar} prefix key"
msgstr ""

#. type: cindex
#: commands.texi.orig:2436
#, no-wrap
msgid "mouse events, in special parts of frame"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2448
msgid "When mouse events occur in special parts of a window, such as a mode line or a scroll bar, the event type shows nothing special---it is the same symbol that would normally represent that combination of mouse button and modifier keys.  The information about the window part is kept elsewhere in the event---in the coordinates.  But @code{read-key-sequence} translates this information into imaginary ``prefix keys'', all of which are symbols: @code{header-line}, @code{horizontal-scroll-bar}, @code{menu-bar}, @code{mode-line}, @code{vertical-line}, and @code{vertical-scroll-bar}.  You can define meanings for mouse clicks in special window parts by defining key sequences using these imaginary prefix keys."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2451
msgid "For example, if you call @code{read-key-sequence} and then click the mouse on the window's mode line, you get two events, like this:"
msgstr ""

#. type: example
#: commands.texi.orig:2458
#, no-wrap
msgid ""
"(read-key-sequence \"Click on the mode line: \")\n"
"     @result{} [mode-line\n"
"         (mouse-1\n"
"          (#<window 6 on NEWS> mode-line\n"
"           (40 . 63) 5959987))]\n"
msgstr ""

#. type: defvar
#: commands.texi.orig:2460
#, no-wrap
msgid "num-input-keys"
msgstr ""

#. type: defvar
#: commands.texi.orig:2464
msgid "This variable's value is the number of key sequences processed so far in this Emacs session.  This includes key sequences read from the terminal and key sequences read from keyboard macros being executed."
msgstr ""

#. type: cindex
#: commands.texi.orig:2468
#, no-wrap
msgid "reading a single event"
msgstr ""

#. type: cindex
#: commands.texi.orig:2469
#, no-wrap
msgid "event, reading only one"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2473
msgid "The lowest level functions for command input are @code{read-event}, @code{read-char}, and @code{read-char-exclusive}."
msgstr ""

#. type: defun
#: commands.texi.orig:2474
#, no-wrap
msgid "read-event &optional prompt inherit-input-method seconds"
msgstr ""

#. type: defun
#: commands.texi.orig:2477
msgid "This function reads and returns the next event of command input, waiting if necessary until an event is available."
msgstr ""

#. type: defun
#: commands.texi.orig:2481
msgid "The returned event may come directly from the user, or from a keyboard macro.  It is not decoded by the keyboard's input coding system (@pxref{Terminal I/O Encoding})."
msgstr ""

#. type: defun
#: commands.texi.orig:2488
msgid "If the optional argument @var{prompt} is non-@code{nil}, it should be a string to display in the echo area as a prompt.  Otherwise, @code{read-event} does not display any message to indicate it is waiting for input; instead, it prompts by echoing: it displays descriptions of the events that led to or were read by the current command.  @xref{The Echo Area}."
msgstr ""

#. type: defun
#: commands.texi.orig:2493
msgid "If @var{inherit-input-method} is non-@code{nil}, then the current input method (if any) is employed to make it possible to enter a non-@acronym{ASCII} character.  Otherwise, input method handling is disabled for reading this event."
msgstr ""

#. type: defun
#: commands.texi.orig:2497
msgid "If @code{cursor-in-echo-area} is non-@code{nil}, then @code{read-event} moves the cursor temporarily to the echo area, to the end of any message displayed there.  Otherwise @code{read-event} does not move the cursor."
msgstr ""

#. type: defun
#: commands.texi.orig:2506
msgid "If @var{seconds} is non-@code{nil}, it should be a number specifying the maximum time to wait for input, in seconds.  If no input arrives within that time, @code{read-event} stops waiting and returns @code{nil}.  A floating point @var{seconds} means to wait for a fractional number of seconds.  Some systems support only a whole number of seconds; on these systems, @var{seconds} is rounded down.  If @var{seconds} is @code{nil}, @code{read-event} waits as long as necessary for input to arrive."
msgstr ""

#. type: defun
#: commands.texi.orig:2515
msgid "If @var{seconds} is @code{nil}, Emacs is considered idle while waiting for user input to arrive.  Idle timers---those created with @code{run-with-idle-timer} (@pxref{Idle Timers})---can run during this period.  However, if @var{seconds} is non-@code{nil}, the state of idleness remains unchanged.  If Emacs is non-idle when @code{read-event} is called, it remains non-idle throughout the operation of @code{read-event}; if Emacs is idle (which can happen if the call happens inside an idle timer), it remains idle."
msgstr ""

#. type: defun
#: commands.texi.orig:2521
msgid "If @code{read-event} gets an event that is defined as a help character, then in some cases @code{read-event} processes the event directly without returning.  @xref{Help Functions}.  Certain other events, called @dfn{special events}, are also processed directly within @code{read-event} (@pxref{Special Events})."
msgstr ""

#. type: defun
#: commands.texi.orig:2524
msgid "Here is what happens if you call @code{read-event} and then press the right-arrow function key:"
msgstr ""

#. type: group
#: commands.texi.orig:2529
#, no-wrap
msgid ""
"(read-event)\n"
"     @result{} right\n"
msgstr ""

#. type: defun
#: commands.texi.orig:2533
#, no-wrap
msgid "read-char &optional prompt inherit-input-method seconds"
msgstr ""

#. type: defun
#: commands.texi.orig:2538
msgid "This function reads and returns a character of command input.  If the user generates an event which is not a character (i.e., a mouse click or function key event), @code{read-char} signals an error.  The arguments work as in @code{read-event}."
msgstr ""

#. type: defun
#: commands.texi.orig:2545
msgid "In the first example, the user types the character @kbd{1} (@acronym{ASCII} code 49).  The second example shows a keyboard macro definition that calls @code{read-char} from the minibuffer using @code{eval-expression}.  @code{read-char} reads the keyboard macro's very next character, which is @kbd{1}.  Then @code{eval-expression} displays its return value in the echo area."
msgstr ""

#. type: group
#: commands.texi.orig:2550
#, no-wrap
msgid ""
"(read-char)\n"
"     @result{} 49\n"
msgstr ""

#. type: group
#: commands.texi.orig:2556
#, no-wrap
msgid ""
";; @r{We assume here you use @kbd{M-:} to evaluate this.}\n"
"(symbol-function 'foo)\n"
"     @result{} \"^[:(read-char)^M1\"\n"
msgstr ""

#. type: group
#: commands.texi.orig:2561
#, no-wrap
msgid ""
"(execute-kbd-macro 'foo)\n"
"     @print{} 49\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: commands.texi.orig:2565
#, no-wrap
msgid "read-char-exclusive &optional prompt inherit-input-method seconds"
msgstr ""

#. type: defun
#: commands.texi.orig:2570
msgid "This function reads and returns a character of command input.  If the user generates an event which is not a character, @code{read-char-exclusive} ignores it and reads another event, until it gets a character.  The arguments work as in @code{read-event}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2573
msgid "None of the above functions suppress quitting."
msgstr ""

#. type: defvar
#: commands.texi.orig:2574
#, no-wrap
msgid "num-nonmacro-input-events"
msgstr ""

#. type: defvar
#: commands.texi.orig:2577
msgid "This variable holds the total number of input events received so far from the terminal---not counting those generated by keyboard macros."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2584
msgid "We emphasize that, unlike @code{read-key-sequence}, the functions @code{read-event}, @code{read-char}, and @code{read-char-exclusive} do not perform the translations described in @ref{Translation Keymaps}.  If you wish to read a single key taking these translations into account, use the function @code{read-key}:"
msgstr ""

#. type: defun
#: commands.texi.orig:2585
#, no-wrap
msgid "read-key &optional prompt"
msgstr ""

#. type: defun
#: commands.texi.orig:2592
msgid "This function reads a single key.  It is ``intermediate'' between @code{read-key-sequence} and @code{read-event}.  Unlike the former, it reads a single key, not a key sequence.  Unlike the latter, it does not return a raw event, but decodes and translates the user input according to @code{input-decode-map}, @code{local-function-key-map}, and @code{key-translation-map} (@pxref{Translation Keymaps})."
msgstr ""

#. type: defun
#: commands.texi.orig:2595
msgid "The argument @var{prompt} is either a string to be displayed in the echo area as a prompt, or @code{nil}, meaning not to display a prompt."
msgstr ""

#. type: defun
#: commands.texi.orig:2597
#, no-wrap
msgid "read-char-choice prompt chars &optional inhibit-quit"
msgstr ""

#. type: defun
#: commands.texi.orig:2606
msgid "This function uses @code{read-key} to read and return a single character.  It ignores any input that is not a member of @var{chars}, a list of accepted characters.  Optionally, it will also ignore keyboard-quit events while it is waiting for valid input.  If you bind @code{help-form} (@pxref{Help Functions}) to a non-@code{nil} value while calling @code{read-char-choice}, then pressing @code{help-char} causes it to evaluate @code{help-form} and display the result.  It then continues to wait for a valid input character, or keyboard-quit."
msgstr ""

#. type: subsection
#: commands.texi.orig:2609
#, no-wrap
msgid "Modifying and Translating Input Events"
msgstr ""

#. type: cindex
#: commands.texi.orig:2610
#, no-wrap
msgid "modifiers of events"
msgstr ""

#. type: cindex
#: commands.texi.orig:2611
#, no-wrap
msgid "translating input events"
msgstr ""

#. type: cindex
#: commands.texi.orig:2612
#, no-wrap
msgid "event translation"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2618
msgid "Emacs modifies every event it reads according to @code{extra-keyboard-modifiers}, then translates it through @code{keyboard-translate-table} (if applicable), before returning it from @code{read-event}."
msgstr ""

#. type: defvar
#: commands.texi.orig:2619
#, no-wrap
msgid "extra-keyboard-modifiers"
msgstr ""

#. type: defvar
#: commands.texi.orig:2631
msgid "This variable lets Lisp programs ``press'' the modifier keys on the keyboard.  The value is a character.  Only the modifiers of the character matter.  Each time the user types a keyboard key, it is altered as if those modifier keys were held down.  For instance, if you bind @code{extra-keyboard-modifiers} to @code{?\\C-\\M-a}, then all keyboard input characters typed during the scope of the binding will have the control and meta modifiers applied to them.  The character @code{?\\C-@@}, equivalent to the integer 0, does not count as a control character for this purpose, but as a character with no modifiers.  Thus, setting @code{extra-keyboard-modifiers} to zero cancels any modification."
msgstr ""

#. type: defvar
#: commands.texi.orig:2635
msgid "When using a window system, the program can ``press'' any of the modifier keys in this way.  Otherwise, only the @key{CTL} and @key{META} keys can be virtually pressed."
msgstr ""

#. type: defvar
#: commands.texi.orig:2638
msgid "Note that this variable applies only to events that really come from the keyboard, and has no effect on mouse events or any other events."
msgstr ""

#. type: defvar
#: commands.texi.orig:2640
#, no-wrap
msgid "keyboard-translate-table"
msgstr ""

#. type: defvar
#: commands.texi.orig:2646
msgid "This terminal-local variable is the translate table for keyboard characters.  It lets you reshuffle the keys on the keyboard without changing any command bindings.  Its value is normally a char-table, or else @code{nil}.  (It can also be a string or vector, but this is considered obsolete.)"
msgstr ""

#. type: defvar
#: commands.texi.orig:2651
msgid "If @code{keyboard-translate-table} is a char-table (@pxref{Char-Tables}), then each character read from the keyboard is looked up in this char-table.  If the value found there is non-@code{nil}, then it is used instead of the actual input character."
msgstr ""

#. type: defvar
#: commands.texi.orig:2656
msgid "Note that this translation is the first thing that happens to a character after it is read from the terminal.  Record-keeping features such as @code{recent-keys} and dribble files record the characters after translation."
msgstr ""

#. type: defvar
#: commands.texi.orig:2661
msgid "Note also that this translation is done before the characters are supplied to input methods (@pxref{Input Methods}).  Use @code{translation-table-for-input} (@pxref{Translation of Characters}), if you want to translate characters after input methods operate."
msgstr ""

#. type: defun
#: commands.texi.orig:2663
#, no-wrap
msgid "keyboard-translate from to"
msgstr ""

#. type: defun
#: commands.texi.orig:2667
msgid "This function modifies @code{keyboard-translate-table} to translate character code @var{from} into character code @var{to}.  It creates the keyboard translate table if necessary."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2672
msgid "Here's an example of using the @code{keyboard-translate-table} to make @kbd{C-x}, @kbd{C-c} and @kbd{C-v} perform the cut, copy and paste operations:"
msgstr ""

#. type: example
#: commands.texi.orig:2680
#, no-wrap
msgid ""
"(keyboard-translate ?\\C-x 'control-x)\n"
"(keyboard-translate ?\\C-c 'control-c)\n"
"(keyboard-translate ?\\C-v 'control-v)\n"
"(global-set-key [control-x] 'kill-region)\n"
"(global-set-key [control-c] 'kill-ring-save)\n"
"(global-set-key [control-v] 'yank)\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2688
msgid "On a graphical terminal that supports extended @acronym{ASCII} input, you can still get the standard Emacs meanings of one of those characters by typing it with the shift key.  That makes it a different character as far as keyboard translation is concerned, but it has the same usual meaning."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2691
msgid "@xref{Translation Keymaps}, for mechanisms that translate event sequences at the level of @code{read-key-sequence}."
msgstr ""

#. type: cindex
#: commands.texi.orig:2694
#, no-wrap
msgid "invoking input method"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2701
msgid "The event-reading functions invoke the current input method, if any (@pxref{Input Methods}).  If the value of @code{input-method-function} is non-@code{nil}, it should be a function; when @code{read-event} reads a printing character (including @key{SPC}) with no modifier bits, it calls that function, passing the character as an argument."
msgstr ""

#. type: defvar
#: commands.texi.orig:2702
#, no-wrap
msgid "input-method-function"
msgstr ""

#. type: defvar
#: commands.texi.orig:2705
msgid "If this is non-@code{nil}, its value specifies the current input method function."
msgstr ""

#. type: defvar
#: commands.texi.orig:2711
msgid "@strong{Warning:} don't bind this variable with @code{let}.  It is often buffer-local, and if you bind it around reading input (which is exactly when you @emph{would} bind it), switching buffers asynchronously while Emacs is waiting will cause the value to be restored in the wrong buffer."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2721
msgid "The input method function should return a list of events which should be used as input.  (If the list is @code{nil}, that means there is no input, so @code{read-event} waits for another event.)  These events are processed before the events in @code{unread-command-events} (@pxref{Event Input Misc}).  Events returned by the input method function are not passed to the input method function again, even if they are printing characters with no modifier bits."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2725
msgid "If the input method function calls @code{read-event} or @code{read-key-sequence}, it should bind @code{input-method-function} to @code{nil} first, to prevent recursion."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2733
msgid "The input method function is not called when reading the second and subsequent events of a key sequence.  Thus, these characters are not subject to input method processing.  The input method function should test the values of @code{overriding-local-map} and @code{overriding-terminal-local-map}; if either of these variables is non-@code{nil}, the input method should put its argument into a list and return that list with no further processing."
msgstr ""

#. type: cindex
#: commands.texi.orig:2736
#, no-wrap
msgid "quoted character input"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2742
msgid "You can use the function @code{read-quoted-char} to ask the user to specify a character, and allow the user to specify a control or meta character conveniently, either literally or as an octal character code.  The command @code{quoted-insert} uses this function."
msgstr ""

#. type: defun
#: commands.texi.orig:2743
#, no-wrap
msgid "read-quoted-char &optional prompt"
msgstr ""

#. type: cindex
#: commands.texi.orig:2744
#, no-wrap
msgid "octal character input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2745
#, no-wrap
msgid "control characters, reading"
msgstr ""

#. type: cindex
#: commands.texi.orig:2746
#, no-wrap
msgid "nonprinting characters, reading"
msgstr ""

#. type: defun
#: commands.texi.orig:2754
msgid "This function is like @code{read-char}, except that if the first character read is an octal digit (0--7), it reads any number of octal digits (but stopping if a non-octal digit is found), and returns the character represented by that numeric character code.  If the character that terminates the sequence of octal digits is @key{RET}, it is discarded.  Any other terminating character is used as input after this function returns."
msgstr ""

#. type: defun
#: commands.texi.orig:2757
msgid "Quitting is suppressed when the first character is read, so that the user can enter a @kbd{C-g}.  @xref{Quitting}."
msgstr ""

#. type: defun
#: commands.texi.orig:2761
msgid "If @var{prompt} is supplied, it specifies a string for prompting the user.  The prompt string is always displayed in the echo area, followed by a single @samp{-}."
msgstr ""

#. type: defun
#: commands.texi.orig:2764
msgid "In the following example, the user types in the octal number 177 (which is 127 in decimal)."
msgstr ""

#. type: example
#: commands.texi.orig:2767
#, no-wrap
msgid ""
"(read-quoted-char \"What character\")\n"
"\n"
msgstr ""

#. type: group
#: commands.texi.orig:2772
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"What character @kbd{1 7 7}-\n"
"---------- Echo Area ----------\n"
"\n"
msgstr ""

#. type: group
#: commands.texi.orig:2774
#, no-wrap
msgid "     @result{} 127\n"
msgstr ""

#. type: subsection
#: commands.texi.orig:2780
#, no-wrap
msgid "Miscellaneous Event Input Features"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2786
msgid "This section describes how to ``peek ahead'' at events without using them up, how to check for pending input, and how to discard pending input.  See also the function @code{read-passwd} (@pxref{Reading a Password})."
msgstr ""

#. type: defvar
#: commands.texi.orig:2787
#, no-wrap
msgid "unread-command-events"
msgstr ""

#. type: cindex
#: commands.texi.orig:2788
#, no-wrap
msgid "next input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2789
#, no-wrap
msgid "peeking at input"
msgstr ""

#. type: defvar
#: commands.texi.orig:2793
msgid "This variable holds a list of events waiting to be read as command input.  The events are used in the order they appear in the list, and removed one by one as they are used."
msgstr ""

#. type: defvar
#: commands.texi.orig:2798
msgid "The variable is needed because in some cases a function reads an event and then decides not to use it.  Storing the event in this variable causes it to be processed normally, by the command loop or by the functions to read command input."
msgstr ""

#. type: cindex
#: commands.texi.orig:2799
#, no-wrap
msgid "prefix argument unreading"
msgstr ""

#. type: defvar
#: commands.texi.orig:2806
msgid "For example, the function that implements numeric prefix arguments reads any number of digits.  When it finds a non-digit event, it must unread the event so that it can be read normally by the command loop.  Likewise, incremental search uses this feature to unread events with no special meaning in a search, because these events should exit the search and then execute normally."
msgstr ""

#. type: defvar
#: commands.texi.orig:2810
msgid "The reliable and easy way to extract events from a key sequence so as to put them in @code{unread-command-events} is to use @code{listify-key-sequence} (see below)."
msgstr ""

#. type: defvar
#: commands.texi.orig:2813
msgid "Normally you add events to the front of this list, so that the events most recently unread will be reread first."
msgstr ""

#. type: defvar
#: commands.texi.orig:2819
msgid "Events read from this list are not normally added to the current command's key sequence (as returned by, e.g., @code{this-command-keys}), as the events will already have been added once as they were read for the first time.  An element of the form @w{@code{(t . @var{event})}} forces @var{event} to be added to the current command's key sequence."
msgstr ""

#. type: defun
#: commands.texi.orig:2821
#, no-wrap
msgid "listify-key-sequence key"
msgstr ""

#. type: defun
#: commands.texi.orig:2824
msgid "This function converts the string or vector @var{key} to a list of individual events, which you can put in @code{unread-command-events}."
msgstr ""

#. type: defun
#: commands.texi.orig:2826
#, no-wrap
msgid "input-pending-p &optional check-timers"
msgstr ""

#. type: cindex
#: commands.texi.orig:2827
#, no-wrap
msgid "waiting for command key input"
msgstr ""

#. type: defun
#: commands.texi.orig:2832
msgid "This function determines whether any command input is currently available to be read.  It returns immediately, with value @code{t} if there is available input, @code{nil} otherwise.  On rare occasions it may return @code{t} when no input is available."
msgstr ""

#. type: defun
#: commands.texi.orig:2836
msgid "If the optional argument @var{check-timers} is non-@code{nil}, then if no input is available, Emacs runs any timers which are ready.  @xref{Timers}."
msgstr ""

#. type: defvar
#: commands.texi.orig:2838
#, no-wrap
msgid "last-input-event"
msgstr ""

#. type: defvar
#: commands.texi.orig:2841
msgid "This variable records the last terminal input event read, whether as part of a command or explicitly by a Lisp program."
msgstr ""

#. type: defvar
#: commands.texi.orig:2846
msgid "In the example below, the Lisp program reads the character @kbd{1}, @acronym{ASCII} code 49.  It becomes the value of @code{last-input-event}, while @kbd{C-e} (we assume @kbd{C-x C-e} command is used to evaluate this expression) remains the value of @code{last-command-event}."
msgstr ""

#. type: group
#: commands.texi.orig:2855
#, no-wrap
msgid ""
"(progn (print (read-char))\n"
"       (print last-command-event)\n"
"       last-input-event)\n"
"     @print{} 49\n"
"     @print{} 5\n"
"     @result{} 49\n"
msgstr ""

#. type: defmac
#: commands.texi.orig:2859
#, no-wrap
msgid "while-no-input body@dots{}"
msgstr ""

#. type: defmac
#: commands.texi.orig:2866
msgid "This construct runs the @var{body} forms and returns the value of the last one---but only if no input arrives.  If any input arrives during the execution of the @var{body} forms, it aborts them (working much like a quit).  The @code{while-no-input} form returns @code{nil} if aborted by a real quit, and returns @code{t} if aborted by arrival of other input."
msgstr ""

#. type: defmac
#: commands.texi.orig:2870
msgid "If a part of @var{body} binds @code{inhibit-quit} to non-@code{nil}, arrival of input during those parts won't cause an abort until the end of that part."
msgstr ""

#. type: defmac
#: commands.texi.orig:2874
msgid "If you want to be able to distinguish all possible values computed by @var{body} from both kinds of abort conditions, write the code like this:"
msgstr ""

#. type: example
#: commands.texi.orig:2879
#, no-wrap
msgid ""
"(while-no-input\n"
"  (list\n"
"    (progn . @var{body})))\n"
msgstr ""

#. type: defun
#: commands.texi.orig:2882
#, no-wrap
msgid "discard-input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2883
#, no-wrap
msgid "flushing input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2884
#, no-wrap
msgid "discarding input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2885
#, no-wrap
msgid "keyboard macro, terminating"
msgstr ""

#. type: defun
#: commands.texi.orig:2889
msgid "This function discards the contents of the terminal input buffer and cancels any keyboard macro that might be in the process of definition.  It returns @code{nil}."
msgstr ""

#. type: defun
#: commands.texi.orig:2894
msgid "In the following example, the user may type a number of characters right after starting the evaluation of the form.  After the @code{sleep-for} finishes sleeping, @code{discard-input} discards any characters typed during the sleep."
msgstr ""

#. type: example
#: commands.texi.orig:2899
#, no-wrap
msgid ""
"(progn (sleep-for 2)\n"
"       (discard-input))\n"
"     @result{} nil\n"
msgstr ""

#. type: cindex
#: commands.texi.orig:2905
#, no-wrap
msgid "special events"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2910
msgid "Certain @dfn{special events} are handled at a very low level---as soon as they are read.  The @code{read-event} function processes these events itself, and never returns them.  Instead, it keeps waiting for the first event that is not special and returns that one."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2918
msgid "Special events do not echo, they are never grouped into key sequences, and they never appear in the value of @code{last-command-event} or @code{(this-command-keys)}.  They do not discard a numeric argument, they cannot be unread with @code{unread-command-events}, they may not appear in a keyboard macro, and they are not recorded in a keyboard macro while you are defining one."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2922
msgid "Special events do, however, appear in @code{last-input-event} immediately after they are read, and this is the way for the event's definition to find the actual event."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2929
msgid "The events types @code{iconify-frame}, @code{make-frame-visible}, @code{delete-frame}, @code{drag-n-drop}, @code{language-change}, and user signals like @code{sigusr1} are normally handled in this way.  The keymap which defines how to handle special events---and which events are special---is in the variable @code{special-event-map} (@pxref{Active Keymaps})."
msgstr ""

#. type: section
#: commands.texi.orig:2931
#, no-wrap
msgid "Waiting for Elapsed Time or Input"
msgstr ""

#. type: cindex
#: commands.texi.orig:2932
#, no-wrap
msgid "waiting"
msgstr ""

#. type: Plain text
#: commands.texi.orig:2940
msgid "The wait functions are designed to wait for a certain amount of time to pass or until there is input.  For example, you may wish to pause in the middle of a computation to allow the user time to view the display.  @code{sit-for} pauses and updates the screen, and returns immediately if input comes in, while @code{sleep-for} pauses without updating the screen."
msgstr ""

#. type: defun
#: commands.texi.orig:2941
#, no-wrap
msgid "sit-for seconds &optional nodisp"
msgstr ""

#. type: defun
#: commands.texi.orig:2948
msgid "This function performs redisplay (provided there is no pending input from the user), then waits @var{seconds} seconds, or until input is available.  The usual purpose of @code{sit-for} is to give the user time to read text that you display.  The value is @code{t} if @code{sit-for} waited the full time with no input arriving (@pxref{Event Input Misc}).  Otherwise, the value is @code{nil}."
msgstr ""

#. type: defun
#: commands.texi.orig:2953
msgid "The argument @var{seconds} need not be an integer.  If it is floating point, @code{sit-for} waits for a fractional number of seconds.  Some systems support only a whole number of seconds; on these systems, @var{seconds} is rounded down."
msgstr ""

#. type: defun
#: commands.texi.orig:2957
msgid "The expression @code{(sit-for 0)} is equivalent to @code{(redisplay)}, i.e., it requests a redisplay, without any delay, if there is no pending input.  @xref{Forcing Redisplay}."
msgstr ""

#. type: defun
#: commands.texi.orig:2961
msgid "If @var{nodisp} is non-@code{nil}, then @code{sit-for} does not redisplay, but it still returns as soon as input is available (or when the timeout elapses)."
msgstr ""

#. type: defun
#: commands.texi.orig:2965
msgid "In batch mode (@pxref{Batch Mode}), @code{sit-for} cannot be interrupted, even by input from the standard input descriptor.  It is thus equivalent to @code{sleep-for}, which is described below."
msgstr ""

#. type: defun
#: commands.texi.orig:2969
msgid "It is also possible to call @code{sit-for} with three arguments, as @code{(sit-for @var{seconds} @var{millisec} @var{nodisp})}, but that is considered obsolete."
msgstr ""

#. type: defun
#: commands.texi.orig:2971
#, no-wrap
msgid "sleep-for seconds &optional millisec"
msgstr ""

#. type: defun
#: commands.texi.orig:2975
msgid "This function simply pauses for @var{seconds} seconds without updating the display.  It pays no attention to available input.  It returns @code{nil}."
msgstr ""

#. type: defun
#: commands.texi.orig:2980
msgid "The argument @var{seconds} need not be an integer.  If it is floating point, @code{sleep-for} waits for a fractional number of seconds.  Some systems support only a whole number of seconds; on these systems, @var{seconds} is rounded down."
msgstr ""

#. type: defun
#: commands.texi.orig:2985
msgid "The optional argument @var{millisec} specifies an additional waiting period measured in milliseconds.  This adds to the period specified by @var{seconds}.  If the system doesn't support waiting fractions of a second, you get an error if you specify nonzero @var{millisec}."
msgstr ""

#. type: defun
#: commands.texi.orig:2987
msgid "Use @code{sleep-for} when you wish to guarantee a delay."
msgstr ""

#. type: Plain text
#: commands.texi.orig:2990
msgid "@xref{Time of Day}, for functions to get the current time."
msgstr ""

#. type: kbd{#1}
#: commands.texi.orig:2993
#, no-wrap
msgid "C-g"
msgstr ""

#. type: cindex
#: commands.texi.orig:2994
#, no-wrap
msgid "quitting"
msgstr ""

#. type: cindex
#: commands.texi.orig:2995
#, no-wrap
msgid "interrupt Lisp functions"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3000
msgid "Typing @kbd{C-g} while a Lisp function is running causes Emacs to @dfn{quit} whatever it is doing.  This means that control returns to the innermost active command loop."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3008
msgid "Typing @kbd{C-g} while the command loop is waiting for keyboard input does not cause a quit; it acts as an ordinary input character.  In the simplest case, you cannot tell the difference, because @kbd{C-g} normally runs the command @code{keyboard-quit}, whose effect is to quit.  However, when @kbd{C-g} follows a prefix key, they combine to form an undefined key.  The effect is to cancel the prefix key as well as any prefix argument."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3018
msgid "In the minibuffer, @kbd{C-g} has a different definition: it aborts out of the minibuffer.  This means, in effect, that it exits the minibuffer and then quits.  (Simply quitting would return to the command loop @emph{within} the minibuffer.)  The reason why @kbd{C-g} does not quit directly when the command reader is reading input is so that its meaning can be redefined in the minibuffer in this way.  @kbd{C-g} following a prefix key is not redefined in the minibuffer, and it has its normal effect of canceling the prefix key and prefix argument.  This too would not be possible if @kbd{C-g} always quit directly."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3023
msgid "When @kbd{C-g} does directly quit, it does so by setting the variable @code{quit-flag} to @code{t}.  Emacs checks this variable at appropriate times and quits if it is not @code{nil}.  Setting @code{quit-flag} non-@code{nil} in any way thus causes a quit."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3029
msgid "At the level of C code, quitting cannot happen just anywhere; only at the special places that check @code{quit-flag}.  The reason for this is that quitting at other places might leave an inconsistency in Emacs's internal state.  Because quitting is delayed until a safe place, quitting cannot make Emacs crash."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3037
msgid "Certain functions such as @code{read-key-sequence} or @code{read-quoted-char} prevent quitting entirely even though they wait for input.  Instead of quitting, @kbd{C-g} serves as the requested input.  In the case of @code{read-key-sequence}, this serves to bring about the special behavior of @kbd{C-g} in the command loop.  In the case of @code{read-quoted-char}, this is so that @kbd{C-q} can be used to quote a @kbd{C-g}."
msgstr ""

#. type: cindex
#: commands.texi.orig:3038
#, no-wrap
msgid "preventing quitting"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3048
msgid "You can prevent quitting for a portion of a Lisp function by binding the variable @code{inhibit-quit} to a non-@code{nil} value.  Then, although @kbd{C-g} still sets @code{quit-flag} to @code{t} as usual, the usual result of this---a quit---is prevented.  Eventually, @code{inhibit-quit} will become @code{nil} again, such as when its binding is unwound at the end of a @code{let} form.  At that time, if @code{quit-flag} is still non-@code{nil}, the requested quit happens immediately.  This behavior is ideal when you wish to make sure that quitting does not happen within a ``critical section'' of the program."
msgstr ""

#. type: cindex
#: commands.texi.orig:3049
#, no-wrap
msgid "@code{read-quoted-char} quitting"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3057
msgid "In some functions (such as @code{read-quoted-char}), @kbd{C-g} is handled in a special way that does not involve quitting.  This is done by reading the input with @code{inhibit-quit} bound to @code{t}, and setting @code{quit-flag} to @code{nil} before @code{inhibit-quit} becomes @code{nil} again.  This excerpt from the definition of @code{read-quoted-char} shows how this is done; it also shows that normal quitting is permitted after the first character of input."
msgstr ""

#. type: example
#: commands.texi.orig:3070
#, no-wrap
msgid ""
"(defun read-quoted-char (&optional prompt)\n"
"  \"@dots{}@var{documentation}@dots{}\"\n"
"  (let ((message-log-max nil) done (first t) (code 0) char)\n"
"    (while (not done)\n"
"      (let ((inhibit-quit first)\n"
"            @dots{})\n"
"        (and prompt (message \"%s-\" prompt))\n"
"        (setq char (read-event))\n"
"        (if inhibit-quit (setq quit-flag nil)))\n"
"      @r{@dots{}set the variable @code{code}@dots{}})\n"
"    code))\n"
msgstr ""

#. type: defvar
#: commands.texi.orig:3072
#, no-wrap
msgid "quit-flag"
msgstr ""

#. type: defvar
#: commands.texi.orig:3076
msgid "If this variable is non-@code{nil}, then Emacs quits immediately, unless @code{inhibit-quit} is non-@code{nil}.  Typing @kbd{C-g} ordinarily sets @code{quit-flag} non-@code{nil}, regardless of @code{inhibit-quit}."
msgstr ""

#. type: defvar
#: commands.texi.orig:3078
#, no-wrap
msgid "inhibit-quit"
msgstr ""

#. type: defvar
#: commands.texi.orig:3082
msgid "This variable determines whether Emacs should quit when @code{quit-flag} is set to a value other than @code{nil}.  If @code{inhibit-quit} is non-@code{nil}, then @code{quit-flag} has no special effect."
msgstr ""

#. type: defmac
#: commands.texi.orig:3084
#, no-wrap
msgid "with-local-quit body@dots{}"
msgstr ""

#. type: defmac
#: commands.texi.orig:3090
msgid "This macro executes @var{body} forms in sequence, but allows quitting, at least locally, within @var{body} even if @code{inhibit-quit} was non-@code{nil} outside this construct.  It returns the value of the last form in @var{body}, unless exited by quitting, in which case it returns @code{nil}."
msgstr ""

#. type: defmac
#: commands.texi.orig:3101
msgid "If @code{inhibit-quit} is @code{nil} on entry to @code{with-local-quit}, it only executes the @var{body}, and setting @code{quit-flag} causes a normal quit.  However, if @code{inhibit-quit} is non-@code{nil} so that ordinary quitting is delayed, a non-@code{nil} @code{quit-flag} triggers a special kind of local quit.  This ends the execution of @var{body} and exits the @code{with-local-quit} body with @code{quit-flag} still non-@code{nil}, so that another (ordinary) quit will happen as soon as that is allowed.  If @code{quit-flag} is already non-@code{nil} at the beginning of @var{body}, the local quit happens immediately and the body doesn't execute at all."
msgstr ""

#. type: defmac
#: commands.texi.orig:3106
msgid "This macro is mainly useful in functions that can be called from timers, process filters, process sentinels, @code{pre-command-hook}, @code{post-command-hook}, and other places where @code{inhibit-quit} is normally bound to @code{t}."
msgstr ""

#. type: deffn
#: commands.texi.orig:3108
#, no-wrap
msgid "Command keyboard-quit"
msgstr ""

#. type: deffn
#: commands.texi.orig:3112
msgid "This function signals the @code{quit} condition with @code{(signal 'quit nil)}.  This is the same thing that quitting does.  (See @code{signal} in @ref{Errors}.)"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3116
msgid "You can specify a character other than @kbd{C-g} to use for quitting.  See the function @code{set-input-mode} in @ref{Input Modes}."
msgstr ""

#. type: cindex
#: commands.texi.orig:3119
#, no-wrap
msgid "prefix argument"
msgstr ""

#. type: cindex
#: commands.texi.orig:3120
#, no-wrap
msgid "raw prefix argument"
msgstr ""

#. type: cindex
#: commands.texi.orig:3121
#, no-wrap
msgid "numeric prefix argument"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3128
msgid "Most Emacs commands can use a @dfn{prefix argument}, a number specified before the command itself.  (Don't confuse prefix arguments with prefix keys.)  The prefix argument is at all times represented by a value, which may be @code{nil}, meaning there is currently no prefix argument.  Each command may use the prefix argument or ignore it."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3133
msgid "There are two representations of the prefix argument: @dfn{raw} and @dfn{numeric}.  The editor command loop uses the raw representation internally, and so do the Lisp variables that store the information, but commands can request either representation."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3135
msgid "Here are the possible values of a raw prefix argument:"
msgstr ""

#. type: itemize
#: commands.texi.orig:3141
msgid "@code{nil}, meaning there is no prefix argument.  Its numeric value is 1, but numerous commands make a distinction between @code{nil} and the integer 1."
msgstr ""

#. type: itemize
#: commands.texi.orig:3144
msgid "An integer, which stands for itself."
msgstr ""

#. type: itemize
#: commands.texi.orig:3150
msgid "A list of one element, which is an integer.  This form of prefix argument results from one or a succession of @kbd{C-u}s with no digits.  The numeric value is the integer in the list, but some commands make a distinction between such a list and an integer alone."
msgstr ""

#. type: itemize
#: commands.texi.orig:3156
msgid "The symbol @code{-}.  This indicates that @kbd{M--} or @kbd{C-u -} was typed, without following digits.  The equivalent numeric value is @minus{}1, but some commands make a distinction between the integer @minus{}1 and the symbol @code{-}."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3160
msgid "We illustrate these possibilities by calling the following function with various prefixes:"
msgstr ""

#. type: group
#: commands.texi.orig:3167
#, no-wrap
msgid ""
"(defun display-prefix (arg)\n"
"  \"Display the value of the raw prefix arg.\"\n"
"  (interactive \"P\")\n"
"  (message \"%s\" arg))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3173
msgid "Here are the results of calling @code{display-prefix} with various raw prefix arguments:"
msgstr ""

#. type: example
#: commands.texi.orig:3176
#, no-wrap
msgid ""
"        M-x display-prefix  @print{} nil\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3178
#, no-wrap
msgid ""
"C-u     M-x display-prefix  @print{} (4)\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3180
#, no-wrap
msgid ""
"C-u C-u M-x display-prefix  @print{} (16)\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3182
#, no-wrap
msgid ""
"C-u 3   M-x display-prefix  @print{} 3\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3184
#, no-wrap
msgid ""
"M-3     M-x display-prefix  @print{} 3      ; @r{(Same as @code{C-u 3}.)}\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3186
#, no-wrap
msgid ""
"C-u -   M-x display-prefix  @print{} -\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3188
#, no-wrap
msgid ""
"M--     M-x display-prefix  @print{} -      ; @r{(Same as @code{C-u -}.)}\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3190
#, no-wrap
msgid ""
"C-u - 7 M-x display-prefix  @print{} -7\n"
"\n"
msgstr ""

#. type: example
#: commands.texi.orig:3192
#, no-wrap
msgid "M-- 7   M-x display-prefix  @print{} -7     ; @r{(Same as @code{C-u -7}.)}\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3201
msgid "Emacs uses two variables to store the prefix argument: @code{prefix-arg} and @code{current-prefix-arg}.  Commands such as @code{universal-argument} that set up prefix arguments for other commands store them in @code{prefix-arg}.  In contrast, @code{current-prefix-arg} conveys the prefix argument to the current command, so setting it has no effect on the prefix arguments for future commands."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3207
msgid "Normally, commands specify which representation to use for the prefix argument, either numeric or raw, in the @code{interactive} specification.  (@xref{Using Interactive}.)  Alternatively, functions may look at the value of the prefix argument directly in the variable @code{current-prefix-arg}, but this is less clean."
msgstr ""

#. type: defun
#: commands.texi.orig:3208
#, no-wrap
msgid "prefix-numeric-value arg"
msgstr ""

#. type: defun
#: commands.texi.orig:3215
msgid "This function returns the numeric meaning of a valid raw prefix argument value, @var{arg}.  The argument may be a symbol, a number, or a list.  If it is @code{nil}, the value 1 is returned; if it is @code{-}, the value @minus{}1 is returned; if it is a number, that number is returned; if it is a list, the @sc{car} of that list (which should be a number) is returned."
msgstr ""

#. type: defvar
#: commands.texi.orig:3217
#, no-wrap
msgid "current-prefix-arg"
msgstr ""

#. type: defvar
#: commands.texi.orig:3221
msgid "This variable holds the raw prefix argument for the @emph{current} command.  Commands may examine it directly, but the usual method for accessing it is with @code{(interactive \"P\")}."
msgstr ""

#. type: defvar
#: commands.texi.orig:3223
#, no-wrap
msgid "prefix-arg"
msgstr ""

#. type: defvar
#: commands.texi.orig:3228
msgid "The value of this variable is the raw prefix argument for the @emph{next} editing command.  Commands such as @code{universal-argument} that specify prefix arguments for the following command work by setting this variable."
msgstr ""

#. type: defvar
#: commands.texi.orig:3230
#, no-wrap
msgid "last-prefix-arg"
msgstr ""

#. type: defvar
#: commands.texi.orig:3232
msgid "The raw prefix argument value used by the previous command."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3236
msgid "The following commands exist to set up prefix arguments for the following command.  Do not call them for any other reason."
msgstr ""

#. type: deffn
#: commands.texi.orig:3237
#, no-wrap
msgid "Command universal-argument"
msgstr ""

#. type: deffn
#: commands.texi.orig:3241
msgid "This command reads input and specifies a prefix argument for the following command.  Don't call this command yourself unless you know what you are doing."
msgstr ""

#. type: deffn
#: commands.texi.orig:3243
#, no-wrap
msgid "Command digit-argument arg"
msgstr ""

#. type: deffn
#: commands.texi.orig:3248
msgid "This command adds to the prefix argument for the following command.  The argument @var{arg} is the raw prefix argument as it was before this command; it is used to compute the updated prefix argument.  Don't call this command yourself unless you know what you are doing."
msgstr ""

#. type: deffn
#: commands.texi.orig:3250
#, no-wrap
msgid "Command negative-argument arg"
msgstr ""

#. type: deffn
#: commands.texi.orig:3255
msgid "This command adds to the numeric argument for the next command.  The argument @var{arg} is the raw prefix argument as it was before this command; its value is negated to form the new prefix argument.  Don't call this command yourself unless you know what you are doing."
msgstr ""

#. type: cindex
#: commands.texi.orig:3259
#, no-wrap
msgid "recursive command loop"
msgstr ""

#. type: cindex
#: commands.texi.orig:3260
#, no-wrap
msgid "recursive editing level"
msgstr ""

#. type: cindex
#: commands.texi.orig:3261
#, no-wrap
msgid "command loop, recursive"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3270
msgid "The Emacs command loop is entered automatically when Emacs starts up.  This top-level invocation of the command loop never exits; it keeps running as long as Emacs does.  Lisp programs can also invoke the command loop.  Since this makes more than one activation of the command loop, we call it @dfn{recursive editing}.  A recursive editing level has the effect of suspending whatever command invoked it and permitting the user to do arbitrary editing before resuming that command."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3277
msgid "The commands available during recursive editing are the same ones available in the top-level editing loop and defined in the keymaps.  Only a few special commands exit the recursive editing level; the others return to the recursive editing level when they finish.  (The special commands for exiting are always available, but they do nothing when recursive editing is not in progress.)"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3281
msgid "All command loops, including recursive ones, set up all-purpose error handlers so that an error in a command run from the command loop will not exit the loop."
msgstr ""

#. type: cindex
#: commands.texi.orig:3282
#, no-wrap
msgid "minibuffer input"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3289
msgid "Minibuffer input is a special kind of recursive editing.  It has a few special wrinkles, such as enabling display of the minibuffer and the minibuffer window, but fewer than you might suppose.  Certain keys behave differently in the minibuffer, but that is only because of the minibuffer's local map; if you switch windows, you get the usual Emacs commands."
msgstr ""

#. type: cindex
#: commands.texi.orig:3290
#, no-wrap
msgid "@code{throw} example"
msgstr ""

#. type: kindex
#: commands.texi.orig:3291
#, no-wrap
msgid "exit"
msgstr ""

#. type: cindex
#: commands.texi.orig:3292
#, no-wrap
msgid "exit recursive editing"
msgstr ""

#. type: cindex
#: commands.texi.orig:3293
#, no-wrap
msgid "aborting"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3304
msgid "To invoke a recursive editing level, call the function @code{recursive-edit}.  This function contains the command loop; it also contains a call to @code{catch} with tag @code{exit}, which makes it possible to exit the recursive editing level by throwing to @code{exit} (@pxref{Catch and Throw}).  If you throw a value other than @code{t}, then @code{recursive-edit} returns normally to the function that called it.  The command @kbd{C-M-c} (@code{exit-recursive-edit}) does this.  Throwing a @code{t} value causes @code{recursive-edit} to quit, so that control returns to the command loop one level up.  This is called @dfn{aborting}, and is done by @kbd{C-]} (@code{abort-recursive-edit})."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3314
msgid "Most applications should not use recursive editing, except as part of using the minibuffer.  Usually it is more convenient for the user if you change the major mode of the current buffer temporarily to a special major mode, which should have a command to go back to the previous mode.  (The @kbd{e} command in Rmail uses this technique.)  Or, if you wish to give the user different text to edit ``recursively'', create and select a new buffer in a special mode.  In this mode, define a command to complete the processing and go back to the previous buffer.  (The @kbd{m} command in Rmail does this.)"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3319
msgid "Recursive edits are useful in debugging.  You can insert a call to @code{debug} into a function definition as a sort of breakpoint, so that you can look around when the function gets there.  @code{debug} invokes a recursive edit but also provides the other features of the debugger."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3322
msgid "Recursive editing levels are also used when you type @kbd{C-r} in @code{query-replace} or use @kbd{C-x q} (@code{kbd-macro-query})."
msgstr ""

#. type: deffn
#: commands.texi.orig:3323
#, no-wrap
msgid "Command recursive-edit"
msgstr ""

#. type: cindex
#: commands.texi.orig:3324
#, no-wrap
msgid "suspend evaluation"
msgstr ""

#. type: deffn
#: commands.texi.orig:3329
msgid "This function invokes the editor command loop.  It is called automatically by the initialization of Emacs, to let the user begin editing.  When called from a Lisp program, it enters a recursive editing level."
msgstr ""

#. type: deffn
#: commands.texi.orig:3334
msgid "If the current buffer is not the same as the selected window's buffer, @code{recursive-edit} saves and restores the current buffer.  Otherwise, if you switch buffers, the buffer you switched to is current after @code{recursive-edit} returns."
msgstr ""

#. type: deffn
#: commands.texi.orig:3339
msgid "In the following example, the function @code{simple-rec} first advances point one word, then enters a recursive edit, printing out a message in the echo area.  The user can then do any editing desired, and then type @kbd{C-M-c} to exit and continue executing @code{simple-rec}."
msgstr ""

#. type: example
#: commands.texi.orig:3349
#, no-wrap
msgid ""
"(defun simple-rec ()\n"
"  (forward-word 1)\n"
"  (message \"Recursive edit in progress\")\n"
"  (recursive-edit)\n"
"  (forward-word 1))\n"
"     @result{} simple-rec\n"
"(simple-rec)\n"
"     @result{} nil\n"
msgstr ""

#. type: deffn
#: commands.texi.orig:3352
#, no-wrap
msgid "Command exit-recursive-edit"
msgstr ""

#. type: deffn
#: commands.texi.orig:3356
msgid "This function exits from the innermost recursive edit (including minibuffer input).  Its definition is effectively @code{(throw 'exit nil)}."
msgstr ""

#. type: deffn
#: commands.texi.orig:3358
#, no-wrap
msgid "Command abort-recursive-edit"
msgstr ""

#. type: deffn
#: commands.texi.orig:3363
msgid "This function aborts the command that requested the innermost recursive edit (including minibuffer input), by signaling @code{quit} after exiting the recursive edit.  Its definition is effectively @code{(throw 'exit t)}.  @xref{Quitting}."
msgstr ""

#. type: deffn
#: commands.texi.orig:3365
#, no-wrap
msgid "Command top-level"
msgstr ""

#. type: deffn
#: commands.texi.orig:3369
msgid "This function exits all recursive editing levels; it does not return a value, as it jumps completely out of any computation directly back to the main command loop."
msgstr ""

#. type: defun
#: commands.texi.orig:3371
#, no-wrap
msgid "recursion-depth"
msgstr ""

#. type: defun
#: commands.texi.orig:3374
msgid "This function returns the current depth of recursive edits.  When no recursive edit is active, it returns 0."
msgstr ""

#. type: cindex
#: commands.texi.orig:3378
#, no-wrap
msgid "disabled command"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3384
msgid "@dfn{Disabling a command} marks the command as requiring user confirmation before it can be executed.  Disabling is used for commands which might be confusing to beginning users, to prevent them from using the commands by accident."
msgstr ""

#. type: kindex
#: commands.texi.orig:3385
#, no-wrap
msgid "disabled"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3390
msgid "The low-level mechanism for disabling a command is to put a non-@code{nil} @code{disabled} property on the Lisp symbol for the command.  These properties are normally set up by the user's init file (@pxref{Init File}) with Lisp expressions such as this:"
msgstr ""

#. type: example
#: commands.texi.orig:3393
#, no-wrap
msgid "(put 'upcase-region 'disabled t)\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3398
msgid "For a few commands, these properties are present by default (you can remove them in your init file if you wish)."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3401
msgid "If the value of the @code{disabled} property is a string, the message saying the command is disabled includes that string.  For example:"
msgstr ""

#. type: example
#: commands.texi.orig:3405
#, no-wrap
msgid ""
"(put 'delete-region 'disabled\n"
"     \"Text deleted this way cannot be yanked back!\\n\")\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3411
msgid "@xref{Disabling,,, emacs, The GNU Emacs Manual}, for the details on what happens when a disabled command is invoked interactively.  Disabling a command has no effect on calling it as a function from Lisp programs."
msgstr ""

#. type: deffn
#: commands.texi.orig:3412
#, no-wrap
msgid "Command enable-command command"
msgstr ""

#. type: deffn
#: commands.texi.orig:3416
msgid "Allow @var{command} (a symbol) to be executed without special confirmation from now on, and alter the user's init file (@pxref{Init File}) so that this will apply to future sessions."
msgstr ""

#. type: deffn
#: commands.texi.orig:3418
#, no-wrap
msgid "Command disable-command command"
msgstr ""

#. type: deffn
#: commands.texi.orig:3421
msgid "Require special confirmation to execute @var{command} from now on, and alter the user's init file so that this will apply to future sessions."
msgstr ""

#. type: defvar
#: commands.texi.orig:3423
#, no-wrap
msgid "disabled-command-function"
msgstr ""

#. type: defvar
#: commands.texi.orig:3429
msgid "The value of this variable should be a function.  When the user invokes a disabled command interactively, this function is called instead of the disabled command.  It can use @code{this-command-keys} to determine what the user typed to run the command, and thus find the command itself."
msgstr ""

#. type: defvar
#: commands.texi.orig:3432
msgid "The value may also be @code{nil}.  Then all commands work normally, even disabled ones."
msgstr ""

#. type: defvar
#: commands.texi.orig:3435
msgid "By default, the value is a function that asks the user whether to proceed."
msgstr ""

#. type: cindex
#: commands.texi.orig:3439
#, no-wrap
msgid "command history"
msgstr ""

#. type: cindex
#: commands.texi.orig:3440
#, no-wrap
msgid "complex command"
msgstr ""

#. type: cindex
#: commands.texi.orig:3441
#, no-wrap
msgid "history of commands"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3451
msgid "The command loop keeps a history of the complex commands that have been executed, to make it convenient to repeat these commands.  A @dfn{complex command} is one for which the interactive argument reading uses the minibuffer.  This includes any @kbd{M-x} command, any @kbd{M-:} command, and any command whose @code{interactive} specification reads an argument from the minibuffer.  Explicit use of the minibuffer during the execution of the command itself does not cause the command to be considered complex."
msgstr ""

#. type: defvar
#: commands.texi.orig:3452
#, no-wrap
msgid "command-history"
msgstr ""

#. type: defvar
#: commands.texi.orig:3458
msgid "This variable's value is a list of recent complex commands, each represented as a form to evaluate.  It continues to accumulate all complex commands for the duration of the editing session, but when it reaches the maximum size (@pxref{Minibuffer History}), the oldest elements are deleted as new ones are added."
msgstr ""

#. type: group
#: commands.texi.orig:3466
#, no-wrap
msgid ""
"command-history\n"
"@result{} ((switch-to-buffer \"chistory.texi\")\n"
"    (describe-key \"^X^[\")\n"
"    (visit-tags-table \"~/emacs/src/\")\n"
"    (find-tag \"repeat-complex-command\"))\n"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3473
msgid "This history list is actually a special case of minibuffer history (@pxref{Minibuffer History}), with one special twist: the elements are expressions rather than strings."
msgstr ""

#. type: Plain text
#: commands.texi.orig:3479
msgid "There are a number of commands devoted to the editing and recall of previous commands.  The commands @code{repeat-complex-command}, and @code{list-command-history} are described in the user manual (@pxref{Repetition,,, emacs, The GNU Emacs Manual}).  Within the minibuffer, the usual minibuffer history commands are available."
msgstr ""

#. type: cindex
#: commands.texi.orig:3482
#, no-wrap
msgid "keyboard macros"
msgstr ""

#. type: Plain text
#: commands.texi.orig:3489
msgid "A @dfn{keyboard macro} is a canned sequence of input events that can be considered a command and made the definition of a key.  The Lisp representation of a keyboard macro is a string or vector containing the events.  Don't confuse keyboard macros with Lisp macros (@pxref{Macros})."
msgstr ""

#. type: defun
#: commands.texi.orig:3490
#, no-wrap
msgid "execute-kbd-macro kbdmacro &optional count loopfunc"
msgstr ""

#. type: defun
#: commands.texi.orig:3496
msgid "This function executes @var{kbdmacro} as a sequence of events.  If @var{kbdmacro} is a string or vector, then the events in it are executed exactly as if they had been input by the user.  The sequence is @emph{not} expected to be a single key sequence; normally a keyboard macro definition consists of several key sequences concatenated."
msgstr ""

#. type: defun
#: commands.texi.orig:3501
msgid "If @var{kbdmacro} is a symbol, then its function definition is used in place of @var{kbdmacro}.  If that is another symbol, this process repeats.  Eventually the result should be a string or vector.  If the result is not a symbol, string, or vector, an error is signaled."
msgstr ""

#. type: defun
#: commands.texi.orig:3506
msgid "The argument @var{count} is a repeat count; @var{kbdmacro} is executed that many times.  If @var{count} is omitted or @code{nil}, @var{kbdmacro} is executed once.  If it is 0, @var{kbdmacro} is executed over and over until it encounters an error or a failing search."
msgstr ""

#. type: defun
#: commands.texi.orig:3510
msgid "If @var{loopfunc} is non-@code{nil}, it is a function that is called, without arguments, prior to each iteration of the macro.  If @var{loopfunc} returns @code{nil}, then this stops execution of the macro."
msgstr ""

#. type: defun
#: commands.texi.orig:3512
msgid "@xref{Reading One Event}, for an example of using @code{execute-kbd-macro}."
msgstr ""

#. type: defvar
#: commands.texi.orig:3514
#, no-wrap
msgid "executing-kbd-macro"
msgstr ""

#. type: defvar
#: commands.texi.orig:3520
msgid "This variable contains the string or vector that defines the keyboard macro that is currently executing.  It is @code{nil} if no macro is currently executing.  A command can test this variable so as to behave differently when run from an executing macro.  Do not set this variable yourself."
msgstr ""

#. type: defvar
#: commands.texi.orig:3522
#, no-wrap
msgid "defining-kbd-macro"
msgstr ""

#. type: defvar
#: commands.texi.orig:3529
msgid "This variable is non-@code{nil} if and only if a keyboard macro is being defined.  A command can test this variable so as to behave differently while a macro is being defined.  The value is @code{append} while appending to the definition of an existing macro.  The commands @code{start-kbd-macro}, @code{kmacro-start-macro} and @code{end-kbd-macro} set this variable---do not set it yourself."
msgstr ""

#. type: defvar
#: commands.texi.orig:3532 commands.texi.orig:3540
msgid "The variable is always local to the current terminal and cannot be buffer-local.  @xref{Multiple Terminals}."
msgstr ""

#. type: defvar
#: commands.texi.orig:3534
#, no-wrap
msgid "last-kbd-macro"
msgstr ""

#. type: defvar
#: commands.texi.orig:3537
msgid "This variable is the definition of the most recently defined keyboard macro.  Its value is a string or vector, or @code{nil}."
msgstr ""

#. type: defvar
#: commands.texi.orig:3542
#, no-wrap
msgid "kbd-macro-termination-hook"
msgstr ""

#. type: defvar
#: commands.texi.orig:3546
msgid "This normal hook is run when a keyboard macro terminates, regardless of what caused it to terminate (reaching the macro end or an error which ended the macro prematurely)."
msgstr ""
