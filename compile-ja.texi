@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1994, 2001-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Byte Compilation
@chapter Byte Compilation
@cindex byte compilation
@cindex byte-code
@cindex compilation (Emacs Lisp)

  Emacs
Lispには、Lispで記述された関数を、より効率的に実行できる@dfn{バイトコード(byte-code)}と呼ばれる特別な表現に翻訳する@dfn{コンパイラー(compiler)}があります。コンパイラーはLispの関数定義をバイトコードに置き換えます。バイトコード関数が呼び出されたとき、その定義は@dfn{バイトコードインタープリター(byte-code
interpreter)}により評価されます。

  バイトコンパイルされたコードは、(本当のコンパイル済みコードのように)そのマシンのハードウェアにより直接実行されるのではなく、バイトコンパイラーにより評価されるため、バイトコードはリコンパイルしなくてもマシン間での完全な可搬性を有します。しかし、本当にコンパイルされたコードほど高速ではありません。

  一般的に、任意のバージョンのEmacsはそれ以前のバージョンのEmacsにより生成されたバイトコンパイル済みコードを実行できますが、逆は成り立ちません。

@vindex no-byte-compile
  あるLispファイルを常にコンパイルせずに実行したい場合は、以下のように@code{no-byte-compile}にバインドするファイルローカル変数を配します:

@example
;; -*-no-byte-compile: t; -*-
@end example

@menu
* Speed of Byte-Code::       バイトコンパイルによるスピードアップ例。
* Compilation Functions::    バイトコンパイル関数。
* Docs and Compilation::     ドキュメント文字列のダイナミックロード。
* Dynamic Loading::          個々の関数のダイナミックロード。
* Eval During Compile::      コンパイル時に評価されるコード。
* Compiler Errors::          コンパイラーのエラーメッセージの扱い。
* Byte-Code Objects::        バイトコンパイル済み関数に使用されるデータ型。
* Disassembly::              バイトコードの逆アセンブル; 
                               バイトコードの読み方。
@end menu

@node Speed of Byte-Code
@section Performance of Byte-Compiled Code

  バイトコンパイルされた関数はCで記述されたプリミティブ関数ほど効率的ではありませんがLispで記述されたバージョンよりは高速に実行されます。以下は例です:

@example
@group
(defun silly-loop (n)
  "Return the time, in seconds, to run N iterations of a loop."
  (let ((t1 (float-time)))
    (while (> (setq n (1- n)) 0))
    (- (float-time) t1)))
@result{} silly-loop
@end group

@group
(silly-loop 50000000)
@result{} 10.235304117202759
@end group

@group
(byte-compile 'silly-loop)
@result{} @r{[コンパイルされたコードは表示されない]}
@end group

@group
(silly-loop 50000000)
@result{} 3.705854892730713
@end group
@end example

  この例では、インタープリターによる実行には10秒を要しますが、バイトコンパイルされたコードは4秒未満です。これは典型的な結果例ですが、実際の結果はさまざまでしょう。

@node Compilation Functions
@section Byte-Compilation Functions
@cindex compilation functions

  @code{byte-compile}により、関数やマクロを個別にバイトコンパイルできます。@code{byte-compile-file}でファイル全体、@code{byte-recompile-directory}または@code{batch-byte-compile}で複数ファイルをコンパイルできます。

  バイトコンパイラーが警告、および/またはエラーメッセージを生成することもあります(詳細は@ref{Compiler
Errors}を参照)。これらのメッセージはCompilationモードが使用する@file{*Compile-Log*}と呼ばれるバッファーに記録されます。@ref{Compilation
Mode,,,emacs, The GNU Emacs Manual}を参照してください。

@cindex macro compilation
  バイトコンパイルを意図したファイル内にマクロ呼び出しを記述する際は、注意が必要です。マクロ呼び出しはコンパイル時に展開されるので、そのマクロはEmacsにロードされる必要があります(さもないとバイトコンパイラーは正しく処理しないでしょう)。これを処理する通常の方法は、必要なマクロ定義を含むファイルを@code{require}フォームで指定することです。バイトコンパイラーは通常、コンパイルするコードを評価しませんが、@code{require}フォームは指定されたライブラリーをロードすることにより特別に扱われます。誰かがコンパイルされたプログラムを@emph{実行}する際に、マクロ定義ファイルのロードを回避するには、@code{require}呼び出しの周囲に@code{eval-when-compile}を記述します(@ref{Eval
During Compile}を参照)。詳細は@ref{Compiling Macros}を参照してください。

  インライン(@code{defsubst})の関数は、これほど面倒ではありません。定義が判明する前にそのような関数呼び出しをコンパイルした場合でも、その呼び出しは低速になるだけで、正しく機能するでしょう。

@defun byte-compile symbol
この関数は@var{symbol}の関数定義をバイトコンパイルして、以前の定義をコンパイルされた定義に置き換えます。@var{symbol}の関数定義は、その関数にたいする実際のコードでなければなりません。@code{byte-compile}はインダイレクト関数を処理しません。リターン値は、@var{symbol}のコンパイルされた定義であるバイトコード関数ブジェクトです(@ref{Byte-Code
Objects}を参照)。

@example
@group
(defun factorial (integer)
  "INTEGERの階乗を計算する。"
  (if (= 1 integer) 1
    (* integer (factorial (1- integer)))))
@result{} factorial
@end group

@group
(byte-compile 'factorial)
@result{}
#[(integer)
  "^H\301U\203^H^@@\301\207\302^H\303^HS!\"\207"
  [integer 1 * factorial]
  4 "Compute factorial of INTEGER."]
@end group
@end example

@var{symbol}の定義がバイトコード関数オブジェクトの場合、@code{byte-compile}は何も行わず@code{nil}をリターンします。そのシンボルの関数セル内の(コンパイルされていない)オリジナルのコードはすでにバイトコンパイルされたコードに置き換えられているので、``シンボルの定義の再コンパイル''はしません。

@code{byte-compile}の引数として@code{lambda}式も指定できます。この場合、関数は対応するコンパイル済みコードをリターンしますが、それはどこにも格納されません。
@end defun

@deffn Command compile-defun &optional arg
このコマンドはポイントを含むdefunを読み取りそれをコンパイルして、結果を評価します。実際に関数定義であるようなdefunでこれを使用した場合は、その関数のコンパイル済みバージョンをインストールする効果があります。

@code{compile-defun}は通常、評価した結果をエコーエリアに表示しますが、@var{arg}が非@code{nil}の場合は、そのフォームをコンパイルした後にカレントバッファーに結果を挿入します。
@end deffn

@deffn Command byte-compile-file filename &optional load
この関数は@var{filename}という名前のLispコードファイルを、バイトコードのファイルにコンパイルします。出力となるファイルの名前は、サフィックス@samp{.el}を@samp{.elc}に変更することにより作成されます。@var{filename}が@samp{.el}で終了しない場合は、@samp{.elc}を@var{filename}の最後に付け足します。

コンパイルは入力ファイルから1つのフォームを逐次読み取ることにより機能します。フォームが関数またはマクロの場合は、コンパイル済みの関数またはマクロが書き込まれます。それ以外のフォームはまとめられて、まとめられたものごとにコンパイルされ、そのファイルが読まれたとき実行されるようにコンパイルされたコードが書き込まれます。入力ファイルを読み取る際、すべてのコメントは無視されます。

このコマンドはエラーのないときは@code{t}、それ以外は@code{nil}をリターンします。インタラクティブに呼び出されたときは、ファイル名の入力をもとめます。

@var{load}が非@code{nil}の場合、このコマンドはコンパイルした後にコンパイルされたファイルをロードします。インタラクティブに呼び出された場合、@var{load}はプレフィクス引数です。

@example
@group
$ ls -l push*
-rw-r--r-- 1 lewis lewis 791 Oct  5 20:31 push.el
@end group

@group
(byte-compile-file "~/emacs/push.el")
     @result{} t
@end group

@group
$ ls -l push*
-rw-r--r-- 1 lewis lewis 791 Oct  5 20:31 push.el
-rw-rw-rw- 1 lewis lewis 638 Oct  8 20:25 push.elc
@end group
@end example
@end deffn

@deffn Command byte-recompile-directory directory &optional flag force
@cindex library compilation
このコマンドは、@var{directory}(またはそのサブディレクトリー)内の、リコンパイルを要するすべての@samp{.el}ファイルをリコンパイルします。@samp{.elc}ファイルが存在し、それが@samp{.el}より古いファイルは、リコンパイルが必要です。

@samp{.el}ファイルに対応する@samp{.elc}ファイルが存在しない場合、何を行うかを@var{flag}で指定します。@code{nil}の場合、このコマンドはこれらのファイルを無視します。@var{flag}が0のときは、それらをコンパイルします。@code{nil}と0以外の場合は、それらのファイルをコンパイルするかユーザーに尋ね、同様にそれぞれのサブディレクトリーについても尋ねます。

インタラクティブに呼び出された場合、@code{byte-recompile-directory}は@var{directory}の入力を求め、@var{flag}はプレフィクス引数になります。

@var{force}が非@code{nil}の場合、このコマンドは@samp{.elc}ファイルのあるすべての@samp{.el}ファイルをリコンパイルします。

リターン値は不定です。
@end deffn

@defun batch-byte-compile &optional noforce
この関数は、コマンドラインで指定されたファイルにたいして、@code{byte-compile-file}を実行します。この関数は処理が完了するとEmacsをkillするので、Emacsのバッチ実行だけで使用しなければなりません。1つのファイルでエラーが発生しても、それにより後続のファイルにたいする処理が妨げられることはありませんが、そのファイルにたいする出力ファイルは生成されず、Emacsプロセスは0以外のステータスコードで終了します。

@var{noforce}が非@code{nil}の場合、この関数は最新の@samp{.elc}ファイルがあるファイルをリコンパイルしません。

@example
$ emacs -batch -f batch-byte-compile *.el
@end example
@end defun

@node Docs and Compilation
@section Documentation Strings and Compilation
@cindex dynamic loading of documentation

  Emacsがバイトコンパイルされたファイルから関数や変数をロードする際、通常はメモリー内にそれらのドキュメント文字列をロードしません。それぞれのドキュメント文字列は、必要なときだけバイトコンパイルされたファイルから``ダイナミック(dynamic:
動的)''にロードされます。ドキュメント文字列の処理をスキップすることにより、メモリーが節約され、ロードが高速になります。

  この機能には欠点があります。コンパイル済みのファイルを削除、移動、または(新しいバージョンのコンパイル等で)変更した場合、Emacsは前にロードされた関数や変数のドキュメント文字列にアクセスできなくなるでしょう。このような問題は通常、あなた自身がEmacsをビルドした場合に、そのLispファイルを編集、および/またはリコンパイルしたときだけ発生します。この問題は、リコンパイル後にそれぞれのファイルをリロードするだけで解決します。

  バイトコンパイルされたファイルからのドキュメント文字列のダイナミックロードは、バイトコンパイルされたファイルごとに、コンパイル時に決定されます。これはオプション@code{byte-compile-dynamic-docstrings}により、無効にできます。

@defopt byte-compile-dynamic-docstrings
これが非@code{nil}の場合、バイトコンパイラーはドキュメント文字列をダイナミックロードするようセットアップしたコンパイル済みファイルを生成します。

特定のファイルでダイナミックロード機能を無効にするには、以下のようにヘッダー行(@ref{File Variables, , Local
Variables in Files, emacs, The GNU Emacs
Manual}を参照)で、このオプションに@code{nil}をセットします。

@smallexample
-*-byte-compile-dynamic-docstrings: nil;-*-
@end smallexample

これは主に、あるファイルを変更しようとしていて、そのファイルをすでにロード済みのEmacsセッションがファイルを変更した際にも正しく機能し続けることを望む場合に有用です。
@end defopt

@cindex @samp{#@@@var{count}}
@cindex @samp{#$}
内部的には、ドキュメント文字列のダイナミックロードは、特殊なLispリーダー構成@samp{#@@@var{count}}とともにコンパイル済みファイルに書き込むことにより達成されます。この構成は、次の@var{count}文字をスキップします。さらに@samp{#$}構成も使用され、これは``このファイルの名前(文字列)''を意味します。これらの構成をLispソースファイル内で使用しないでください。これらは人間がファイルを読む際に明確であるようデザインされていません。

@node Dynamic Loading
@section Dynamic Loading of Individual Functions

@cindex dynamic loading of functions
@cindex lazy loading
  ファイルをコンパイルするとき、オプションで@dfn{ダイナミック関数ロード(dynamic function
loading)}機能(@dfn{laxyロード(lazy
loading)とも呼ばれる})を有効にできます。ダイナミック関数ロードでは、ファイルのロードでファイル内の関数定義は完全には読み込まれません。かわりに、各関数定義にはそのファイルを参照するプレースホルダーが含まれます。それぞれ関数が最初に呼び出されるときに、そのプレースホルダーを置き換えるために、ファイルから完全な定義が読み込まれます。

  ダイナミック関数ロードの利点は、ファイルのロードがより高速になることです。ユーザーが呼び出せる関数を多く含むファイルにとって、それらの関数のうち1つを使用したら、おそらく残りの関数も使用するというのでなければ、これは利点です。多くのキーボードコマンドを提供する特化したモードは、このパターンの使い方をする場合があります。ユーザーはそのモードを呼び出すかもしれませんが、使用するのはそのモードが提供するコマンドのわずか一部です。

  ダイナミックロード機能には、いくつか不利な点があります:

@itemize @bullet
@item
ロード後にコンパイル済みファイルを削除や移動した場合、Emacsはまだロードされていない残りの関数定義をロードできなくなる。

@item
(新しいバージョンのコンパイル等で)コンパイル済みファイルを変更した場合、まだロードされていない関数のロードを試みると、通常は無意味な結果となる。
@end itemize

  このような問題は、通常の状況でインストールされたEmacsファイルでは決して発生しません。しかし、あなたが変更したLispファイルでは発生し得ます。それぞれのファイルをリコンパイルしたらすぐに、新たなコンパイル済みファイルをリロードするのが、これらの問題を回避する一番簡単な方法です。

  コンパイル時に変数@code{byte-compile-dynamic}が非@code{nil}の場合、バイトコンパイラーはダイナミック関数ロード機能を使用します。ダイナミックロードが望ましいのは特定のファイルにたいしてだけなので、この変数をグローバルにセットしないでください。そのかわりに、特定のソースファイルのファイルローカル変数で、この機能を有効にしてください。たとえば、ソースファイルの最初の行に以下のテキストを記述することにより、これを行うことができます:

@example
-*-byte-compile-dynamic: t;-*-
@end example

@defvar byte-compile-dynamic
これが非@code{nil}の場合、バイトコンパイラーはダイナミック関数ロードのためにセットアップされたコンパイル済みファイルを生成します。
@end defvar

@defun fetch-bytecode function
@var{function}がバイトコード関数オブジェクトの場合、それがまだ完全にロードされていなければ、バイトコンパイル済みのファイルからの@var{function}のバイトコードのロードを完了させます。それ以外は、何も行いません。この関数は、常に@var{function}をリターンします。
@end defun

@node Eval During Compile
@section Evaluation During Compilation
@cindex eval during compilation

  これらの機能により、プログラムのコンパイル中に評価されるコードを記述できます。

@defspec eval-and-compile body@dots{}
このフォームは、それを含むコードがコンパイルされるとき、および(コンパイルされているかいないかに関わらず)実行されるときの両方で、@var{body}が評価されるようにマークします。

@var{body}を別のファイルに配し、そのファイルを@code{require}で参照すれば、同様の結果が得られます。これは@var{body}が大きいとき望ましい方法です。事実上、@code{require}は自動的に@code{eval-and-compile}され、そのパッケージはコンパイル時と実行時の両方でロードされます。

@code{autoload}も実際は@code{eval-and-compile}されます。これはコンパイル時に認識されるので、そのような関数の使用により警告``not
known to be defined''は生成されません。

ほとんどの@code{eval-and-compile}の使用は、完全に妥当であると言えます。

あるマクロがマクロの結果を構築するためのヘルパー関数をもち、そのマクロがそのパッケージにたいしてローカルと外部の両方で使用される場合には、コンパイル時と後の実行時にそのヘルパー関数を取得するために、@code{eval-and-compile}を使用すべきです。

関数がプログラム的に(@code{fset}で)定義されている場合には、それがコンパイル時、同様に実行時に行われるように使用でき、それらの関数への呼び出しはチェックされます(``not
known to be defined''の警告は抑えられます)。
@end defspec

@defspec eval-when-compile body@dots{}
このフォームは、@var{body}がコンパイル時に評価され、コンパイルされたプログラムがロードされるときは評価されないようにマークします。コンパイラーによる評価の結果は、コンパイル済みのプログラム内の定数となります。ソースファイルをコンパイルではなくロードした場合、@var{body}は通常どおり評価されます。

@cindex compile-time constant
生成するために何らかの計算が必要な定数がある場合、@code{eval-when-compile}はコンパイル時にそれを行なうことができます。たとえば、

@lisp
(defvar my-regexp
  (eval-when-compile (regexp-opt '("aaa" "aba" "abb"))))
@end lisp

@cindex macros, at compile time
他のパッケージを使用しているが、そのパッケージのマクロ(バイトコンパイラーはそれらを展開します)だけが必要な場合、それらを実行せずにコンパイル用にロードさせるために@code{eval-when-compile}を使用できます。たとえば、

@lisp
(eval-when-compile
  (require 'my-macro-package))
@end lisp

これらの事項は、マクロおよび@code{defsubst}関数がローカルに定義され、そのファイル内だけで使用されることを要求します。これらは、そのファイルのコンパイルに必要ですが、コンパイル済みファイルの実行には、ほとんどの場合必要ありません。たとえば、

@lisp
(eval-when-compile
  (unless (fboundp 'some-new-thing)
    (defmacro 'some-new-thing ()
      (compatibility code))))
@end lisp

@noindent
これは大抵他のバージョンのEmacsとの互換性にたいする保証だけのためのコードにたいして有用です。

@strong{Common Lispに関する注意:} トップレベルでは、@code{eval-when-compile}はCommon
Lispのイディオム@code{(eval-when (compile eval)
@dots{})}に類似しています。トップレベル以外では、Common
Lispのリーダーマクロ@samp{#.}(ただし解釈時を除く)が、@code{eval-when-compile}と近いことを行います。
@end defspec

@node Compiler Errors
@section Compiler Errors
@cindex compiler errors

  バイトコンパイルのエラーメッセージと警告メッセージは、@file{*Compile-Log*}という名前のバッファーにプリントされます。これらのメッセージには、問題となる箇所を示すファイル名と行番号が含まれます。これらのメッセージにたいして、コンパイラー出力を操作する通常のEmacsコマンドが使用できます。

  あるエラーがプログラムのシンタックスに由来する場合、バイトコンパイラーはエラーの正確な位置の取得に際し混乱するかもしれません。バッファー@w{@file{
*Compiler Input*}}.にスイッチするのは、これを調べ1つの方法です。(このバッファー名はスペースで始まるので、Buffer
Menuに表示されません。)このバッファーにはコンパイルされたプログラムと、バイトコンパイラーが読み取れた箇所からポイントがどれほど離れているかが含まれ、エラーの原因はその近傍にあるかもしれません。シンタックスエラーを見つけるヒントについては、@ref{Syntax
Errors}を参照してください。

  定義されていない関数や変数の使用は、バイトコンパイラーにより報告される警告のタイプとしては一般的です。そのような警告では、定義されていない関数や変数を使用した位置ではなく、そのファイルの最後の行の行番号が報告されるので、それを見つけるには手作業で検索しなければなりません。

  定義のない関数や変数の警告が間違いだと確信できる場合には、警告を抑制する方法がいくつかあります:

@itemize @bullet
@item
関数@var{func}への特定の呼び出しにたいする警告は、それを条件式で@code{fboundp}によるテストを行なうことで抑制できます:

@example
(if (fboundp '@var{func}) ...(@var{func} ...)...)
@end example

@noindent
@var{func}への呼び出しは@code{if}文の@var{then-form}内になければならず、@var{func}は@code{fboundp}呼び出し内でクォートされていなければなりません。(この機能は@code{cond}でも同様に機能します。)

@item
同じように、変数@var{variable}の特定の使用についの警告を、条件式内の@code{boundp}テストで抑制できます:

@example
(if (boundp '@var{variable}) ...@var{variable}...)
@end example

@noindent
@var{variable}への参照は@code{if}文の@var{then-form}内になければならず、@var{variable}は@code{boundp}呼び出し内でクォートされていなければなりません。

@item
コンパイラーに関数が@code{declare-function}を使用して定義されていると告げることができます。@ref{Declaring
Functions}を参照してください。

@item
同じように、その変数が初期値なしの@code{defvar}を使用して定義されているとコンパイラーに告げることができます。(これはその変数を特別な変数としてマークすることに注意してください。@ref{Defining
Variables}を参照してください。
@end itemize

  @code{with-no-warnings}構成を使用して特定の式にたいするコンパイラーのすべての任意の警告を抑制することもできます:

@c This is implemented with a defun, but conceptually it is
@c a special form.

@defspec with-no-warnings body@dots{}
実行時には〜これは@code{(progn
@var{body}...)}と等価ですが、コンパイラーは@var{body}の中で起こるいかなる事項にたいしても警告を発しません。

わたしたちは、あなたが抑制したいと意図する警告以外の警告を失わないようにするために、可能な限り小さいコード断片にたいしてこの構成を使用することを推奨します。
@end defspec

  変数@code{byte-compile-warnings}をセットすることにより、コンパイラーの警告をより詳細に制御できます。詳細は、変数のドキュメント文字列を参照してください。

@node Byte-Code Objects
@section Byte-Code Function Objects
@cindex compiled function
@cindex byte-code function
@cindex byte-code object

  バイトコンパイルされた関数は、特別なデータ型、@dfn{バイトコード関数オブジェクト(byte-code function
objects)}をもちます。関数呼び出しとしてそのようなオブジェクトが出現したとき、Emacsはそのバイトコードを実行するために、常にバイトコードインタープリターを使用します。

  内部的には、バイトコード関数オブジェクトはベクターによく似ています。バイトコード関数オブジェクトの要素には、@code{aref}を通じてアクセスできます。バイトコード関数オブジェクトのプリント表現(printed
representation)はベクターに似ていて、開き@samp{[}の前に@samp{#}が追加されます。バイト関数オブジェクトは少なくとも4つの要素をもたねばならず、要素数に上限はありません。しかし通常使用されるのは、最初の6要素です。これらは:

@table @var
@item arglist
シンボル引数のリスト。

@item byte-code
バイトコード命令を含む文字列。

@item constants
バイトコードにより参照されるLispオブジェクトのベクター。関数名と変数名に使用されるシンボルが含まれる。

@item stacksize
この関数が要するスタックの最大サイズ。

@item docstring
(もしあれば)ドキュメント文字列。それ以外は@code{nil}。ドキュメント文字列がファイルに格納されている場合、値は数字かリストかもしれない。本当のドキュメント文字列の取得には、関数@code{documentation}を使用する(@ref{Accessing
Documentation}を参照)。

@item interactive
(もしあれば)インタラクティブ仕様。文字列かLisp式。インタラクティブでない関数では@code{nil}。
@end table

以下は、バイトコード関数オブジェクトのプリント表現の例です。これはコマンド@code{backward-sexp}の定義です。

@example
#[(&optional arg)
  "^H\204^F^@@\301^P\302^H[!\207"
  [arg 1 forward-sexp]
  2
  254435
  "^p"]
@end example

  バイトコードオブジェクトを作成する原始的な方法は、@code{make-byte-code}です:

@defun make-byte-code &rest elements
この関数は@var{elements}を要素とするバイトコードオブジェクトを構築して、リターンします。
@end defun

  あなた自身が要素を収集してバイトコード関数を構築しないでください。それらが矛盾する場合、その関数の呼び出しによりEmacsがクラッシュするかもしれません。これらのオブジェクトの作成は、常にバイトコンパイラーにまかせてください。バイトコンパイラーは、要素を矛盾なく構築します(願わくば)。

@node Disassembly
@section Disassembled Byte-Code
@cindex disassembled byte-code

  人はバイトコードを記述しません。それはバイトコンパイラーの仕事です。しかし、好奇心を満たすために、わたしたちはディスアセンブラを提供しています。ディスアセンブラは、バイトコードを人間が読めるフォームに変換します。

  バイトコードインタープリターは、シンプルなスタックマシンとして実装されています。これは値を自身のスタックにpushして、計算で使用するためにそれらをpopして取り出し、おの結果を再びそのスタックにpushして戻します。バイトコード関数がリターンするときは、スタックから値をpopして取り出し、その関数の値としてリターンします。

  それに加えてスタックとバイトコード関数は、値を変数とスタックの間で転送することにより、普通のLisp変数を使用したり、バインドおよびセットすることができます。

@deffn Command disassemble object &optional buffer-or-name
このコマンドは、@var{object}にたいするディスアセンブルされたコードを表示します。インタラクティブに使用した場合、または@var{buffer-or-name}が@code{nil}か省略された場合は、@file{*Disassemble*}という名前のバッファーに出力します。@var{buffer-or-name}が非@code{nil}の場合は、バッファーもしくは既存のバッファーの名前でなければなりません。その場合は、そのバッファーのポイント位置に出力され、ポイントは出力の前に残りされます。

引数@var{object}には関数名、ラムダ式(@ref{Lambda
Expressions}を参照)、またはバイトコードオブジェクト(@ref{Byte-Code
Objects}を参照)を指定できます。ラムダ式の場合、@code{disassemble}はそれをコンパイルしてから、そのコンパイル済みコードをディスアセンブルします。
@end deffn

  以下に@code{disassemble}関数を使用した例を2つ示します。バイトコードとLispソースを関連付ける助けとなるように、説明的なコメントを追加してあります。これらのコメントは、@code{disassemble}の出力にはありません。

@example
@group
(defun factorial (integer)
  "Compute factorial of an integer."
  (if (= 1 integer) 1
    (* integer (factorial (1- integer)))))
     @result{} factorial
@end group

@group
(factorial 4)
     @result{} 24
@end group

@group
(disassemble 'factorial)
     @print{} byte-code for factorial:
 doc: Compute factorial of an integer.
 args: (integer)
@end group

@group
0   varref   integer      ; @r{@code{integer}の値を取得して}
                          ;   @r{それをスタック上にpushする。}
1   constant 1            ; @r{スタック上に1をpushする。}
@end group
@group
2   eqlsign               ; @r{2つの値をスタックからpopして取り出し、}
                          ;   @r{それらを比較して結果をスタック上にpushする。}
@end group
@group
3   goto-if-nil 1         ; @r{スタックのトップをpopしてテストする。}
                          ;   @r{@code{nil}なら1へ、それ以外はcontinue。}
6   constant 1            ; @r{スタックのトップに1をpushする。}
7   return                ; @r{スタックのトップの要素をリターンする。}
@end group
@group
8:1 varref   integer      ; @r{@code{integer}の値をスタック上にpushする。}
9   constant factorial    ; @r{@code{factorial}をスタック上にpushする。}
10  varref   integer      ; @r{@code{integer}の値をスタック上にpushする。}
11  sub1                  ; @r{@code{integer}をpopして値をデクリメントする。}
                          ;   @r{スタック上に新しい値をpushする。}
12  call     1            ; @r{スタックの最初(トップ)の要素を引数として}
                          ;   @r{関数@code{factorial}を呼び出す。}
                          ;   @r{リターン値をスタック上にpushする。}
@end group
@group
13 mult                   ; @r{スタックのトップ2要素をpopして取り出し乗じ}
                          ;   @r{結果をスタック上にpushする。}
14 return                 ; @r{スタックのトップ要素をリターンする。}
@end group
@end example

@code{silly-loop}は幾分複雑です:

@example
@group
(defun silly-loop (n)
  "Return time before and after N iterations of a loop."
  (let ((t1 (current-time-string)))
    (while (> (setq n (1- n))
              0))
    (list t1 (current-time-string))))
     @result{} silly-loop
@end group

@group
(disassemble 'silly-loop)
     @print{} byte-code for silly-loop:
 doc: Return time before and after N iterations of a loop.
 args: (n)
@end group

@group
0   constant current-time-string  ; @r{@code{current-time-string}を}
                                  ;   @r{スタック上のトップにpushする。}
@end group
@group
1   call     0            ; @r{引数なしで@code{current-time-string}を呼び出し}
                          ;   @r{結果をスタック上にpushする。}
@end group
@group
2   varbind  t1           ; @r{スタックをpopして@code{t1}にpopされた値をバインドする。}
@end group
@group
3:1 varref   n            ; @r{環境から@code{n}の値を取得して}
                          ;   @r{その値をスタック上にpushする。}
4   sub1                  ; @r{スタックのトップから1を減ずる。}
@end group
@group
5   dup                   ; @r{スタックのトップを複製する。}
                          ;   @r{たとえばスタックのトップをコピーしてスタック上にpushする。}
6   varset   n            ; @r{スタックのトップをpopして}
                          ;   @r{@code{n}をその値にバインドする。}

;; @r{(要はシーケンス@code{dup varset}はpopせずに}
;; @r{ スタックのトップを@code{n}の値にコピーする。)}
@end group

@group
7   constant 0            ; @r{スタック上に0をpushする。}
8   gtr                   ; @r{スタックのトップ2値をpopして取り出し}
                          ;   @r{@var{n}が0より大かテストし}
                          ;   @r{結果をスタック上にpushする。}
@end group
@group
9   goto-if-not-nil 1     ; @r{@code{n} > 0なら1へ}
                          ;   @r{(これはwhile-loopを継続する)}
                          ;   @r{それ以外はcontinue。}
@end group
@group
12  varref   t1           ; @r{@code{t1}の値をスタック上にpushする。}
13  constant current-time-string  ; @r{@code{current-time-string}を}
                                  ;   @r{スタックのトップにpushする。}
14  call     0            ; @r{再度@code{current-time-string}を呼び出す。}
@end group
@group
15  unbind   1            ; @r{ローカル環境の@code{t1}をアンバインドする。}
16  list2                 ; @r{スタックのトップ2要素をpopして取り出し}
                          ;   @r{それらのリストを作りスタック上にpushする。}
17  return                ; @r{スタックのトップの値をリターンする。}
@end group
@end example
