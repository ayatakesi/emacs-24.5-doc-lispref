# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-09-12 22:53+0900\n"
"PO-Revision-Date: 2017-11-23 03:54+0900\n"
"Last-Translator: Takeshi Ayanokoji <takeshi.ayanokoji@gmail.com>\n"
"Language-Team: Japanese <takeshi.ayanokoji@gmail.com>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: customize.texi.orig:5
#, no-wrap
msgid "Customization"
msgstr "Customization"

#. type: chapter
#: customize.texi.orig:6
#, no-wrap
msgid "Customization Settings"
msgstr "Customization Settings"

#. type: cindex
#: customize.texi.orig:8
#, no-wrap
msgid "customization item"
msgstr "customization item"

#. type: Plain text
#: customize.texi.orig:14
msgid ""
"Users of Emacs can customize variables and faces without writing Lisp code, "
"by using the Customize interface.  @xref{Easy Customization,,, emacs, The "
"GNU Emacs Manual}.  This chapter describes how to define @dfn{customization "
"items} that users can interact with through the Customize interface."
msgstr "Emacsのユーザーは、カスタマイズインターフェースにより、Lispコードを記述することなく。変数とフェースをカスタマイズできます。@ref{Easy Customization,,, emacs, The GNU Emacs Manual}を参照してください。このチャプターでは、カスタマイズインターフェースを通じて、ユーザーとやりとりするための、@dfn{カスタマイズアイテム（customization items）}を定義する方法を説明します。"

#. type: Plain text
#: customize.texi.orig:17
msgid ""
"Customization items include customizable variables, which are defined with "
"the"
msgstr "カスタマイズアイテムには、カスタマイズ可能変数(customizable variable:"

#. type: ifinfo
#: customize.texi.orig:19
msgid "@code{defcustom} macro (@pxref{Variable Definitions});"
msgstr "@code{defcustom}マクロで定義される。@ref{Variable Definitions}を参照してください)、"

#. type: ifnotinfo
#: customize.texi.orig:22
msgid "@code{defcustom} macro;"
msgstr "@code{defcustom}マクロで定義される。"

#. type: Plain text
#: customize.texi.orig:26
msgid ""
"customizable faces, which are defined with @code{defface} (described "
"separately in @ref{Defining Faces}); and @dfn{customization groups}, defined "
"with"
msgstr "カスタマイズ可能フェース(customizable face: @code{defface}で定義される。@ref{Defining Faces}を参照してください)、および関連するカスタマイズアイテムのグループのためのコンテナーとして働くカスタマイズグループ(customization group:"

#. type: ifinfo
#: customize.texi.orig:28
msgid "@code{defgroup} (@pxref{Group Definitions}),"
msgstr "@code{defgroup}で定義される。@ref{Group Definitions}を参照してください)"

#. type: ifnotinfo
#: customize.texi.orig:31
msgid "@code{defgroup},"
msgstr "@code{defgroup}で定義される)"

#. type: Plain text
#: customize.texi.orig:33
msgid "which act as containers for groups of related customization items."
msgstr "が含まれます。"

#. type: node
#: customize.texi.orig:42 customize.texi.orig:44
#, no-wrap
msgid "Common Keywords"
msgstr "Common Keywords"

#. type: menuentry
#: customize.texi.orig:42
msgid "Common keyword arguments for all kinds of customization declarations."
msgstr "すべての種類のカスタマイズ宣言に共通なキーワード。"

#. type: node
#: customize.texi.orig:42 customize.texi.orig:204
#, no-wrap
msgid "Group Definitions"
msgstr "Group Definitions"

#. type: menuentry
#: customize.texi.orig:42
msgid "Writing customization group definitions."
msgstr "カスタマイズグループ定義の記述。"

#. type: node
#: customize.texi.orig:42 customize.texi.orig:269
#, no-wrap
msgid "Variable Definitions"
msgstr "Variable Definitions"

#. type: menuentry
#: customize.texi.orig:42
msgid "Declaring user options."
msgstr "ユーザーオプションの宣言。"

#. type: section
#: customize.texi.orig:42 customize.texi.orig:509 customize.texi.orig:510
#, no-wrap
msgid "Customization Types"
msgstr "Customization Types"

#. type: menuentry
#: customize.texi.orig:42
msgid "Specifying the type of a user option."
msgstr "ユーザーオプションの型指定。"

#. type: section
#: customize.texi.orig:42 customize.texi.orig:1299 customize.texi.orig:1300
#, no-wrap
msgid "Applying Customizations"
msgstr "Applying Customizations"

#. type: menuentry
#: customize.texi.orig:42
msgid "Functions to apply customization settings."
msgstr "カスタマイズセッティングを適用する関数。"

#. type: section
#: customize.texi.orig:42 customize.texi.orig:1356 customize.texi.orig:1357
#, no-wrap
msgid "Custom Themes"
msgstr "Custom Themes"

#. type: menuentry
#: customize.texi.orig:42
msgid "Writing Custom themes."
msgstr "カスタムテーマの記述。"

#. type: section
#: customize.texi.orig:45
#, no-wrap
msgid "Common Item Keywords"
msgstr "Common Item Keywords"

#. type: cindex
#: customize.texi.orig:47
#, no-wrap
msgid "customization keywords"
msgstr "customization keywords"

#. type: Plain text
#: customize.texi.orig:53
msgid ""
"The customization declarations that we will describe in the next few "
"sections---@code{defcustom}, @code{defgroup}, etc.---all accept keyword "
"arguments (@pxref{Constant Variables}) for specifying various information.  "
"This section describes keywords that apply to all types of customization "
"declarations."
msgstr " 以降のセクションで説明するカスタマイズ宣言(customization declaration) --- @code{defcustom}、@code{defgroup}などはすべて、さまざまな情報を指定するためのキーワード引数(@ref{Constant Variables}を参照してください)を受け取ります。このセクションでは、カスタマイズ宣言のすべての種類に適用されるキーワードを説明します。"

#. type: Plain text
#: customize.texi.orig:58
msgid ""
"All of these keywords, except @code{:tag}, can be used more than once in a "
"given item.  Each use of the keyword has an independent effect.  The keyword "
"@code{:tag} is an exception because any given item can only display one "
"name."
msgstr "@code{:tag}以外のすべてのキーワードは、与えられたアイテムにたいして複数回使用できます。キーワードの使用はそれぞれ独立した効果をもちます。@code{:tag}は例外で、これはすべての与えられたアイテムは1つの名前だけを表示できるからです。"

#. type: item
#: customize.texi.orig:60
#, no-wrap
msgid ":tag @var{label}"
msgstr ":tag @var{label}"

#. type: kindex
#: customize.texi.orig:61
#, no-wrap
msgid "tag@r{, customization keyword}"
msgstr "tag@r{, customization keyword}"

#. type: table
#: customize.texi.orig:66
msgid ""
"Use @var{label}, a string, instead of the item's name, to label the item in "
"customization menus and buffers.  @strong{Don't use a tag which is "
"substantially different from the item's real name; that would cause "
"confusion.}"
msgstr "@var{label}を使用すると、カスタマイズメニュー(customization menu)およびカスタマイズバッファー(customization buffer)のアイテムのラベルづけに、そのアイテムの名前のかわりに指定された文字列を使用します。@strong{混乱を招くので、そのアイテムの実際の名前と、大きく異なる名前は使用しないでください}。"

#. type: kindex
#: customize.texi.orig:67
#, no-wrap
msgid "group@r{, customization keyword}"
msgstr "group@r{, customization keyword}"

#. type: item
#: customize.texi.orig:68
#, no-wrap
msgid ":group @var{group}"
msgstr ":group @var{group}"

#. type: table
#: customize.texi.orig:72
msgid ""
"Put this customization item in group @var{group}.  When you use "
"@code{:group} in a @code{defgroup}, it makes the new group a subgroup of "
"@var{group}."
msgstr "このカスタマイズアイテムを、グループ@var{group}に配します。@code{defgroup}内で@code{:group}を使用した場合、そのアイテムは新しいグループ(@code{:group}のサブグループ)になります。"

#. type: table
#: customize.texi.orig:76
msgid ""
"If you use this keyword more than once, you can put a single item into more "
"than one group.  Displaying any of those groups will show this item.  Please "
"don't overdo this, since the result would be annoying."
msgstr "このキーワードを複数回使用した場合、1つのアイテムを複数のグループに配すことができます。これらのグループのどれかを表示すると、このアイテムが表示されます。煩わしくなるので、多用しないでください。"

#. type: item
#: customize.texi.orig:77
#, no-wrap
msgid ":link @var{link-data}"
msgstr ":link @var{link-data}"

#. type: kindex
#: customize.texi.orig:78
#, no-wrap
msgid "link@r{, customization keyword}"
msgstr "link@r{, customization keyword}"

#. type: table
#: customize.texi.orig:82
msgid ""
"Include an external link after the documentation string for this item.  This "
"is a sentence containing a button that references some other documentation."
msgstr "このアイテムのドキュメント文字列の後に外部リンクを含めます。これは他のドキュメントを参照する、センテンスを含むボタンです。"

#. type: table
#: customize.texi.orig:84
msgid "There are several alternatives you can use for @var{link-data}:"
msgstr "@var{link-data}に使用できる複数の候補があります:"

#. type: item
#: customize.texi.orig:86
#, no-wrap
msgid "(custom-manual @var{info-node})"
msgstr "(custom-manual @var{info-node})"

#. type: table
#: customize.texi.orig:91
msgid ""
"Link to an Info node; @var{info-node} is a string which specifies the node "
"name, as in @code{\"(emacs)Top\"}.  The link appears as @samp{[Manual]} in "
"the customization buffer and enters the built-in Info reader on "
"@var{info-node}."
msgstr "infoノードへのリンクです。@var{info-node}は、@code{\"(emacs)Top\"}のような、ノード名を示す文字列です。このリンクはカスタマイズバッファーの@samp{[Manual]}に表示され、@var{info-node}にたいしてビルトインのinfoリーダーを起動します。"

#. type: item
#: customize.texi.orig:92
#, no-wrap
msgid "(info-link @var{info-node})"
msgstr "(info-link @var{info-node})"

#. type: table
#: customize.texi.orig:95
msgid ""
"Like @code{custom-manual} except that the link appears in the customization "
"buffer with the Info node name."
msgstr "@code{custom-manual}と同様ですが、カスタマイズバッファーには、そのinfoノード名が表示されます。"

#. type: item
#: customize.texi.orig:96
#, no-wrap
msgid "(url-link @var{url})"
msgstr "(url-link @var{url})"

#. type: table
#: customize.texi.orig:101
msgid ""
"Link to a web page; @var{url} is a string which specifies the "
"@acronym{URL}.  The link appears in the customization buffer as @var{url} "
"and invokes the WWW browser specified by @code{browse-url-browser-function}."
msgstr "ウェブページヘのリンクです。@var{url}は@acronym{URL}を指定する文字列です。カスタマイズバッファーに表示されるリンクは、@code{browse-url-browser-function}で指定されたWWWブラウザーを呼び出します。"

#. type: item
#: customize.texi.orig:102
#, no-wrap
msgid "(emacs-commentary-link @var{library})"
msgstr "(emacs-commentary-link @var{library})"

#. type: table
#: customize.texi.orig:105
msgid ""
"Link to the commentary section of a library; @var{library} is a string which "
"specifies the library name.  @xref{Library Headers}."
msgstr "ライブラリーのコメントセクション(commentary section)へのリンクです。@var{library}はライブラリー名を指定する文字列です。@ref{Library Headers}を参照してください。"

#. type: item
#: customize.texi.orig:106
#, no-wrap
msgid "(emacs-library-link @var{library})"
msgstr "(emacs-library-link @var{library})"

#. type: table
#: customize.texi.orig:109
msgid ""
"Link to an Emacs Lisp library file; @var{library} is a string which "
"specifies the library name."
msgstr "Emacs Lispライブラリーファイルへのリンクです。@var{library}はライブラリー名を指定する文字列です。"

#. type: item
#: customize.texi.orig:110
#, no-wrap
msgid "(file-link @var{file})"
msgstr "(file-link @var{file})"

#. type: table
#: customize.texi.orig:113
msgid ""
"Link to a file; @var{file} is a string which specifies the name of the file "
"to visit with @code{find-file} when the user invokes this link."
msgstr "ファイルへのリンクです。@var{file}は、ユーザーがこのリンクを呼び出したときに@code{find-file}でvisitするファイルの名前を指定する文字列です。"

#. type: item
#: customize.texi.orig:114
#, no-wrap
msgid "(function-link @var{function})"
msgstr "(function-link @var{function})"

#. type: table
#: customize.texi.orig:118
msgid ""
"Link to the documentation of a function; @var{function} is a string which "
"specifies the name of the function to describe with @code{describe-function} "
"when the user invokes this link."
msgstr "関数のドキュメントへのリンクです。@var{function}は、ユーザーがこのリンクを呼び出したときに@code{describe-function}で説明を表示する関数の名前を指定する文字列です。"

#. type: item
#: customize.texi.orig:119
#, no-wrap
msgid "(variable-link @var{variable})"
msgstr "(variable-link @var{variable})"

#. type: table
#: customize.texi.orig:123
msgid ""
"Link to the documentation of a variable; @var{variable} is a string which "
"specifies the name of the variable to describe with @code{describe-variable} "
"when the user invokes this link."
msgstr "変数のドキュメントへのリンクです。@var{variable}は、ユーザーがこのリンクを呼び出したときに@code{describe-variable}で説明を表示する変数の名前を指定する文字列です。"

#. type: item
#: customize.texi.orig:124
#, no-wrap
msgid "(custom-group-link @var{group})"
msgstr "(custom-group-link @var{group})"

#. type: table
#: customize.texi.orig:127
msgid ""
"Link to another customization group.  Invoking it creates a new "
"customization buffer for @var{group}."
msgstr "他のカスタマイズグループへのリンクです。このリンクを呼び出すことにより、@var{group}にたいする新たなカスタマイズバッファーが作成されます。"

#. type: table
#: customize.texi.orig:133
msgid ""
"You can specify the text to use in the customization buffer by adding "
"@code{:tag @var{name}} after the first element of the @var{link-data}; for "
"example, @code{(info-link :tag \"foo\" \"(emacs)Top\")} makes a link to the "
"Emacs manual which appears in the buffer as @samp{foo}."
msgstr "@var{link-data}の1つ目の要素の後に@code{:tag @var{name}}を追加することにより、カスタマイズバッファーで使用するテキストを指定できます。たとえば@code{(info-link :tag \"foo\" \"(emacs)Top\")}は、そのバッファーで@samp{foo}と表示されるEmacs manualへのリンクを作成します。"

#. type: table
#: customize.texi.orig:135
msgid "You can use this keyword more than once, to add multiple links."
msgstr "複数のリンクを追加するために、このキーワードを複数回使用することができます。"

#. type: item
#: customize.texi.orig:136
#, no-wrap
msgid ":load @var{file}"
msgstr ":load @var{file}"

#. type: kindex
#: customize.texi.orig:137
#, no-wrap
msgid "load@r{, customization keyword}"
msgstr "load@r{, customization keyword}"

#. type: table
#: customize.texi.orig:141
msgid ""
"Load file @var{file} (a string) before displaying this customization item "
"(@pxref{Loading}).  Loading is done with @code{load}, and only if the file "
"is not already loaded."
msgstr "このカスタマイズアイテムを表示する前に、ファイル@var{file}をロードします(@ref{Loading}を参照してください)。ロードは@code{load}により行われ、そのファイルがまだロードされていないときだけロードします。"

#. type: item
#: customize.texi.orig:142
#, no-wrap
msgid ":require @var{feature}"
msgstr ":require @var{feature}"

#. type: kindex
#: customize.texi.orig:143
#, no-wrap
msgid "require@r{, customization keyword}"
msgstr "require@r{, customization keyword}"

#. type: table
#: customize.texi.orig:146
msgid ""
"Execute @code{(require '@var{feature})} when your saved customizations set "
"the value of this item.  @var{feature} should be a symbol."
msgstr "保存したカスタマイズが、このアイテム値をセットするとき、@code{(require '@var{feature})}が実行されます。@var{feature}はシンボルです。"

#. type: table
#: customize.texi.orig:150
msgid ""
"The most common reason to use @code{:require} is when a variable enables a "
"feature such as a minor mode, and just setting the variable won't have any "
"effect unless the code which implements the mode is loaded."
msgstr "@code{:require}を使用するもっとも一般的な理由は、ある変数がマイナーモードのような機能を有効にするとき、そのモードを実装するコードがロードされていない場合には、変数をセットするだけでは効果がないからです。"

#. type: item
#: customize.texi.orig:151
#, no-wrap
msgid ":version @var{version}"
msgstr ":version @var{version}"

#. type: kindex
#: customize.texi.orig:152
#, no-wrap
msgid "version@r{, customization keyword}"
msgstr "version@r{, customization keyword}"

#. type: table
#: customize.texi.orig:156
msgid ""
"This keyword specifies that the item was first introduced in Emacs version "
"@var{version}, or that its default value was changed in that version.  The "
"value @var{version} must be a string."
msgstr "このキーワードは、そのアイテムが最初に導入されたEmacsバージョン@var{version}、またはそのアイテムのデフォルト値がそのバージョンで変更されたことを指定します。値@var{version}は文字列でなければなりません。"

#. type: item
#: customize.texi.orig:157
#, no-wrap
msgid ":package-version '(@var{package} . @var{version})"
msgstr ":package-version '(@var{package} . @var{version})"

#. type: kindex
#: customize.texi.orig:158
#, no-wrap
msgid "package-version@r{, customization keyword}"
msgstr "package-version@r{, customization keyword}"

#. type: table
#: customize.texi.orig:163
msgid ""
"This keyword specifies that the item was first introduced in @var{package} "
"version @var{version}, or that its meaning or default value was changed in "
"that version.  This keyword takes priority over @code{:version}."
msgstr "このキーワードは、そのアイテムが最初に導入された@var{package}のバージョン@var{version}またはアイテムの意味(またはデフォルト値)が変更されたバージョンを指定します。このキーワードは@code{:version}より優先されます。"

#. type: table
#: customize.texi.orig:169
msgid ""
"@var{package} should be the official name of the package, as a symbol (e.g., "
"@code{MH-E}).  @var{version} should be a string.  If the package "
"@var{package} is released as part of Emacs, @var{package} and @var{version} "
"should appear in the value of @code{customize-package-emacs-version-alist}."
msgstr "@var{package}にはそのパッケージの公式名をシンボルとして指定します(たとえば@code{MH-E})。@var{version}には文字列を指定します。パッケージ@var{package}がEmacsの一部としてリリースされた場合、@var{package}と@var{version}の値は、@code{customize-package-emacs-version-alist}の値に表示されるべきです。"

#. type: Plain text
#: customize.texi.orig:174
msgid ""
"Packages distributed as part of Emacs that use the @code{:package-version} "
"keyword must also update the @code{customize-package-emacs-version-alist} "
"variable."
msgstr "Emacsの一部として配布された@code{:package-version}キーワードを使用するパッケージは、@code{customize-package-emacs-version-alist}変数も更新しなければなりません。"

#. type: defvar
#: customize.texi.orig:175
#, no-wrap
msgid "customize-package-emacs-version-alist"
msgstr "customize-package-emacs-version-alist"

#. type: defvar
#: customize.texi.orig:179
msgid ""
"This alist provides a mapping for the versions of Emacs that are associated "
"with versions of a package listed in the @code{:package-version} keyword.  "
"Its elements are:"
msgstr "このalistは、Emacsのバージョンにたいして、@code{:package-version}キーワード内でリストされたパッケージのバージョンへのマッピングを提供します:"

#. type: example
#: customize.texi.orig:182
#, no-wrap
msgid "(@var{package} (@var{pversion} . @var{eversion})@dots{})\n"
msgstr "(@var{package} (@var{pversion} . @var{eversion})@dots{})\n"

#. type: defvar
#: customize.texi.orig:188
msgid ""
"For each @var{package}, which is a symbol, there are one or more elements "
"that contain a package version @var{pversion} with an associated Emacs "
"version @var{eversion}.  These versions are strings.  For example, the MH-E "
"package updates this alist with the following:"
msgstr "@var{package}(シンボル)それぞれにたいして、パッケージバージョン@var{pversion}を含む1つ以上の要素と、それに関連づけられるEmacsバージョン@var{eversion}が存在します。これらのバージョンは文字列です。たとえばMH-Eパッケージは、以下でalistを更新します:"

#. type: smallexample
#: customize.texi.orig:196
#, no-wrap
msgid ""
"(add-to-list 'customize-package-emacs-version-alist\n"
"             '(MH-E (\"6.0\" . \"22.1\") (\"6.1\" . \"22.1\") (\"7.0\" "
". \"22.1\")\n"
"                    (\"7.1\" . \"22.1\") (\"7.2\" . \"22.1\") (\"7.3\" "
". \"22.1\")\n"
"                    (\"7.4\" . \"22.1\") (\"8.0\" . \"22.1\")))\n"
msgstr ""
"(add-to-list 'customize-package-emacs-version-alist\n"
"             '(MH-E (\"6.0\" . \"22.1\") (\"6.1\" . \"22.1\") (\"7.0\" . \"22.1\")\n"
"                    (\"7.1\" . \"22.1\") (\"7.2\" . \"22.1\") (\"7.3\" . \"22.1\")\n"
"                    (\"7.4\" . \"22.1\") (\"8.0\" . \"22.1\")))\n"

#. type: defvar
#: customize.texi.orig:202
msgid ""
"The value of @var{package} needs to be unique and it needs to match the "
"@var{package} value appearing in the @code{:package-version} keyword.  Since "
"the user might see the value in an error message, a good choice is the "
"official name of the package, such as MH-E or Gnus."
msgstr "@var{package}の値は一意である必要があり、また@code{:package-version}キーワード内に現れる@var{package}の値とマッチする必要があります。おそらくユーザーはエラーメッセージからこの値を見るので、MH-EやGnusのようなパッケージの公式名を選択するのがよいでしょう。"

#. type: section
#: customize.texi.orig:205
#, no-wrap
msgid "Defining Customization Groups"
msgstr "Defining Customization Groups"

#. type: cindex
#: customize.texi.orig:206
#, no-wrap
msgid "define customization group"
msgstr "define customization group"

#. type: cindex
#: customize.texi.orig:207
#, no-wrap
msgid "customization groups, defining"
msgstr "customization groups, defining"

#. type: Plain text
#: customize.texi.orig:217
msgid ""
"Each Emacs Lisp package should have one main customization group which "
"contains all the options, faces and other groups in the package.  If the "
"package has a small number of options and faces, use just one group and put "
"everything in it.  When there are more than twenty or so options and faces, "
"then you should structure them into subgroups, and put the subgroups under "
"the package's main customization group.  It is OK to put some of the options "
"and faces in the package's main group alongside the subgroups."
msgstr "Emacs Lispパッケージはそれぞれ、1つのメインカスタマイズグループ(main customization group)をもち、それにはすべてのオプション、フェイス、そのパッケージ内の他のグルーﾌﾟが含まれるべきです。そのパッケージには少数のオプションとフェイスしかない場合は、1つのグループだけを使用して、その中にすべてを置きます。20以上のオプションやフェイスがある場合には、それらをサブグループ内に構造化して、そのサブグループをメインカスタマイズグループの下に配します。そのパッケージ内の任意のオプションまたはフェイスを、サブグループと並行してメイングループに配しても構いません。"

#. type: Plain text
#: customize.texi.orig:223
msgid ""
"The package's main or only group should be a member of one or more of the "
"standard customization groups.  (To display the full list of them, use "
"@kbd{M-x customize}.)  Choose one or more of them (but not too many), and "
"add your group to each of them using the @code{:group} keyword."
msgstr "そのパッケージのメイングループ(または唯一のグループ)は、1つ以上の標準カスタムグループ(standard customization group)のメンバーであるべきです(これらの完全なリストを表示するには、@kbd{M-x customize}を使用します)。それらの内から1つ以上(多すぎないこと)を選択して、@code{:group}を使用してあなたのグループをそれらに追加します。"

#. type: Plain text
#: customize.texi.orig:225
msgid "The way to declare new customization groups is with @code{defgroup}."
msgstr "新しいカスタマイズグループは、@code{defgroup}で宣言します。"

#. type: defmac
#: customize.texi.orig:226
#, no-wrap
msgid "defgroup group members doc [keyword value]@dots{}"
msgstr "defgroup group members doc [keyword value]@dots{}"

#. type: defmac
#: customize.texi.orig:230
msgid ""
"Declare @var{group} as a customization group containing @var{members}.  Do "
"not quote the symbol @var{group}.  The argument @var{doc} specifies the "
"documentation string for the group."
msgstr "@var{members}を含む、カスタマイズグループとして、@var{group}を宣言します。シンボル@var{group}はクォートしません。引数@var{doc}は、そのグループにたいするドキュメント文字列を指定します。"

#. type: defmac
#: customize.texi.orig:235
msgid ""
"The argument @var{members} is a list specifying an initial set of "
"customization items to be members of the group.  However, most often "
"@var{members} is @code{nil}, and you specify the group's members by using "
"the @code{:group} keyword when defining those members."
msgstr "引数@var{members}は、そのグループのメンバーとなるカスタマイズアイテムの初期セットを指定するリストです。しかしほとんどの場合は@var{members}を@code{nil}にして、メンバーを定義するときに@code{:group}キーワードを使用することにより、そのグループのメンバーを指定します。"

#. type: defmac
#: customize.texi.orig:241
msgid ""
"If you want to specify group members through @var{members}, each element "
"should have the form @code{(@var{name} @var{widget})}.  Here @var{name} is a "
"symbol, and @var{widget} is a widget type for editing that symbol.  Useful "
"widgets are @code{custom-variable} for a variable, @code{custom-face} for a "
"face, and @code{custom-group} for a group."
msgstr "@var{members}を通じてグループのメンバーを指定したい場合、各要素は@code{(@var{name} @var{widget})}という形式で指定するべきです。ここで@var{name}はシンボル、@var{widget}はそのシンボルを編集するウィジェット型(widget type)です。有用なウィジェットには、変数にたいする@code{custom-variable}、フェイスにたいする@code{custom-face}、グループにたいする@code{custom-group}があります。"

#. type: defmac
#: customize.texi.orig:245
msgid ""
"When you introduce a new group into Emacs, use the @code{:version} keyword "
"in the @code{defgroup}; then you need not use it for the individual members "
"of the group."
msgstr "Emacsに新しいグループを導入するときは、@code{defgroup}内で@code{:version}キーワードを使用します。そうすればグループの個別のメンバーに対してそれを使用する必要がなくなります。"

#. type: defmac
#: customize.texi.orig:248
msgid ""
"In addition to the common keywords (@pxref{Common Keywords}), you can also "
"use this keyword in @code{defgroup}:"
msgstr "一般的なキーワード(@ref{Common Keywords}を参照してください)に加えて、@code{defgroup}ないでは以下のキーワードも使用できます:"

#. type: item
#: customize.texi.orig:250
#, no-wrap
msgid ":prefix @var{prefix}"
msgstr ":prefix @var{prefix}"

#. type: kindex
#: customize.texi.orig:251
#, no-wrap
msgid "prefix@r{, @code{defgroup} keyword}"
msgstr "prefix@r{, @code{defgroup} keyword}"

#. type: table
#: customize.texi.orig:256
msgid ""
"If the name of an item in the group starts with @var{prefix}, and the "
"customizable variable @code{custom-unlispify-remove-prefixes} is "
"non-@code{nil}, the item's tag will omit @var{prefix}.  A group can have any "
"number of prefixes."
msgstr "グループ内のアイテムの名前が@var{prefix}で始まり、カスタマイズ変数@code{custom-unlispify-remove-prefixes}が非@code{nil}の場合、そのアイテムのタグから@var{prefix}が省略されます。グループは任意の数のプレフィクスをもつことができます。"

#. type: defopt
#: customize.texi.orig:259
#, no-wrap
msgid "custom-unlispify-remove-prefixes"
msgstr "custom-unlispify-remove-prefixes"

#. type: defopt
#: customize.texi.orig:263
msgid ""
"If this variable is non-@code{nil}, the prefixes specified by a group's "
"@code{:prefix} keyword are omitted from tag names, whenever the user "
"customizes the group."
msgstr "この変数が非@code{nil}の場合、グループの@code{:prefix}キーワードで指定されたプレフィクスは、ユーザーがグループをカスタマイズするときは常に、タグ名から省略されます。"

#. type: defopt
#: customize.texi.orig:267
msgid ""
"The default value is @code{nil}, i.e., the prefix-discarding feature is "
"disabled.  This is because discarding prefixes often leads to confusing "
"names for options and faces."
msgstr "デフォルト値は@code{nil}、つまりプレフィクス省略(prefix-discarding)の機能は無効です。これは、オプションやフェイスの名前にたいしてプレフィクスを省略するのは、混乱を招くことがあるからです。"

#. type: section
#: customize.texi.orig:270
#, no-wrap
msgid "Defining Customization Variables"
msgstr "Defining Customization Variables"

#. type: cindex
#: customize.texi.orig:271
#, no-wrap
msgid "define customization options"
msgstr "define customization options"

#. type: cindex
#: customize.texi.orig:272
#, no-wrap
msgid "customizable variables, how to define"
msgstr "customizable variables, how to define"

#. type: cindex
#: customize.texi.orig:273
#, no-wrap
msgid "user options, how to define"
msgstr "user options, how to define"

#. type: Plain text
#: customize.texi.orig:283
msgid ""
"@dfn{Customizable variables}, also called @dfn{user options}, are global "
"Lisp variables whose values can be set through the Customize interface.  "
"Unlike other global variables, which are defined with @code{defvar} "
"(@pxref{Defining Variables}), customizable variables are defined using the "
"@code{defcustom} macro.  In addition to calling @code{defvar} as a "
"subroutine, @code{defcustom} states how the variable should be displayed in "
"the Customize interface, the values it is allowed to take, etc."
msgstr "@dfn{カスタマイズ可能変数(customizable variable)}は@dfn{ユーザーオプション(user option)}とも呼ばれ、これはCustomizeインターフェースを通じてセットできるグローなるなLisp変数です。@code{defvar}(@ref{Defining Variables}を参照してください)により定義される他のグローバル変数とは異なり、カスタマイズ可能変数は@code{defcustom}マクロを使用して定義されます。サブルーチンとして@code{defvar}を呼び出すことに加え、@code{defcustom}はCustomizeインターフェースでその変数が表示される方法や、その変数がとることができる値などを明示します。"

#. type: defmac
#: customize.texi.orig:284
#, no-wrap
msgid "defcustom option standard doc [keyword value]@dots{}"
msgstr "defcustom option standard doc [keyword value]@dots{}"

#. type: defmac
#: customize.texi.orig:287
msgid ""
"This macro declares @var{option} as a user option (i.e., a customizable "
"variable).  You should not quote @var{option}."
msgstr "このマクロはユーザーオプション(またはカスタマイズ可能変数)として@var{option}を宣言します。@var{option}はクォートするべきではありません。"

#. type: defmac
#: customize.texi.orig:296
msgid ""
"The argument @var{standard} is an expression that specifies the standard "
"value for @var{option}.  Evaluating the @code{defcustom} form evaluates "
"@var{standard}, but does not necessarily bind the option to that value.  If "
"@var{option} already has a default value, it is left unchanged.  If the user "
"has already saved a customization for @var{option}, the user's customized "
"value is installed as the default value.  Otherwise, the result of "
"evaluating @var{standard} is installed as the default value."
msgstr "引数@var{standard}は、@var{option}の標準値を指定する式です。@code{defcustom}フォームの評価により、@var{standard}が評価されますが、その値にオプションをバインドする必要はありません。@var{option}がすでにデフォルト値をもつ場合、それは変更されずに残ります。ユーザーがすでに@var{option}にたいするカスタマイズを保存している場合、ユーザーによりカスタマイズされた値がデフォルト値としてインストールされます。それ以外は、@var{standard}を評価した結果がデフォルト値としてインストールされます。"

#. type: defmac
#: customize.texi.orig:301
msgid ""
"Like @code{defvar}, this macro marks @code{option} as a special variable, "
"meaning that it should always be dynamically bound.  If @var{option} is "
"already lexically bound, that lexical binding remains in effect until the "
"binding construct exits.  @xref{Variable Scoping}."
msgstr "@code{defvar}と同様、このマクロは@code{option}をスペシャル変数 --- 常にダイナミックにバインドされるべきことを意味する --- としてマークします。@var{option}がすでにレキシカルバインドをもつ場合、そのレキシカルバインドはバインディング構造を抜けるまで効果をもちます。@ref{Variable Scoping}を参照してください。"

#. type: defmac
#: customize.texi.orig:306
msgid ""
"The expression @var{standard} can be evaluated at various other times, "
"too---whenever the customization facility needs to know @var{option}'s "
"standard value.  So be sure to use an expression which is harmless to "
"evaluate at any time."
msgstr "式@var{standard}は別の様々な機会にも --- カスタマイズ機能が@var{option}の標準値を知る必要があるときは常に --- 評価される可能性があります。そのため任意回数評価しても安全な式を使用するように気をつけてください。"

#. type: defmac
#: customize.texi.orig:309
msgid "The argument @var{doc} specifies the documentation string for the variable."
msgstr "引数@var{doc}は、その変数にたいするドキュメント文字列を指定します。"

#. type: defmac
#: customize.texi.orig:313
msgid ""
"If a @code{defcustom} does not specify any @code{:group}, the last group "
"defined with @code{defgroup} in the same file will be used.  This way, most "
"@code{defcustom} do not need an explicit @code{:group}."
msgstr "@code{defcustom}が何も@code{:group}を指定しない場合、同じファイル内で@code{defgroup}により最後に定義されたグループが使用されます。この方法では、ほとんどの@code{defcustom}は明示的な@code{:group}が必要なくなります。"

#. type: defmac
#: customize.texi.orig:321
msgid ""
"When you evaluate a @code{defcustom} form with @kbd{C-M-x} in Emacs Lisp "
"mode (@code{eval-defun}), a special feature of @code{eval-defun} arranges to "
"set the variable unconditionally, without testing whether its value is "
"void.  (The same feature applies to @code{defvar}, @pxref{Defining "
"Variables}.)  Using @code{eval-defun} on a defcustom that is already defined "
"calls the @code{:set} function (see below), if there is one."
msgstr "Emacs Lispモードで@kbd{C-M-x}(@code{eval-defun})により@code{defcustom}フォームを評価するとき、@code{eval-defun}の特別な機能は、変数の値がvoidかどうかテストせず、無条件に変数をセットする段取りをします(同じ機能は@code{defvar}にも適用されます。@ref{Defining Variables}を参照してください)。すでに定義されたdefcustomで@code{eval-defun}を使用することにより、(もしあれば)@code{:set}関数が呼び出されます(以下参照)。"

#. type: defmac
#: customize.texi.orig:328
msgid ""
"If you put a @code{defcustom} in a pre-loaded Emacs Lisp file "
"(@pxref{Building Emacs}), the standard value installed at dump time might be "
"incorrect, e.g., because another variable that it depends on has not been "
"assigned the right value yet.  In that case, use "
"@code{custom-reevaluate-setting}, described below, to re-evaluate the "
"standard value after Emacs starts up."
msgstr "事前ロード( pre-loaded)されたEmacs Lispファイル(@ref{Building Emacs}を参照してください)に@code{defcustom}を配した場合、ダンプ時にインストールされた標準値は正しくない --- たとえば依存している他の変数は、まだ正しい値を割り当てられていない ---　かもしれません。この場合、Emacs起動後に標準値を再評価するために、以下で説明する@code{custom-reevaluate-setting}を使用します。"

#. type: Plain text
#: customize.texi.orig:332
msgid ""
"In addition to the keywords listed in @ref{Common Keywords}, this macro "
"accepts the following keywords:"
msgstr "@ref{Common Keywords}にリストされたキーワードに加え、このマクロには以下のキーワードを指定できます:"

#. type: item
#: customize.texi.orig:334
#, no-wrap
msgid ":type @var{type}"
msgstr ":type @var{type}"

#. type: table
#: customize.texi.orig:338
msgid ""
"Use @var{type} as the data type for this option.  It specifies which values "
"are legitimate, and how to display the value (@pxref{Customization Types})."
msgstr "このオプションのデータ型として、@var{type}を使用します。これはどんな値が適正なのか、その値をどのように表示するかを指定します(@ref{Customization Types}を参照してください)。"

#. type: item
#: customize.texi.orig:339
#, no-wrap
msgid ":options @var{value-list}"
msgstr ":options @var{value-list}"

#. type: kindex
#: customize.texi.orig:340
#, no-wrap
msgid "options@r{, @code{defcustom} keyword}"
msgstr "options@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:344
msgid ""
"Specify the list of reasonable values for use in this option.  The user is "
"not restricted to using only these values, but they are offered as "
"convenient alternatives."
msgstr "このオプションに使用する適正な値のリストを指定します。ユーザーが使用できる値はこれらの値に限定されませんが、これらは便利な候補値を提示します。"

#. type: table
#: customize.texi.orig:348
msgid ""
"This is meaningful only for certain types, currently including @code{hook}, "
"@code{plist} and @code{alist}.  See the definition of the individual types "
"for a description of how to use @code{:options}."
msgstr "これは特定の型にたいしてだけ意味をもち、現在のところ@code{hook}、@code{plist}、@code{alist}が含まれます。@code{:options}の使用法の説明は、個別の型の定義を参照してください。"

#. type: item
#: customize.texi.orig:349
#, no-wrap
msgid ":set @var{setfunction}"
msgstr ":set @var{setfunction}"

#. type: kindex
#: customize.texi.orig:350
#, no-wrap
msgid "set@r{, @code{defcustom} keyword}"
msgstr "set@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:359
msgid ""
"Specify @var{setfunction} as the way to change the value of this option when "
"using the Customize interface.  The function @var{setfunction} should take "
"two arguments, a symbol (the option name) and the new value, and should do "
"whatever is necessary to update the value properly for this option (which "
"may not mean simply setting the option as a Lisp variable); preferably, "
"though, it should not modify its value argument destructively.  The default "
"for @var{setfunction} is @code{set-default}."
msgstr "Customizeインターフェースを使用してこのオプションの値を変更する方法として、@var{setfunction}を指定します。関数@var{setfunction}は2つの引数 --- シンボル(オプション名)と新しい値 --- をとり、このオプションにたいして正しく値を更新するために必要なことは何であれ行うべきです(これはおそらくLisp変数として単にオプションをセットすることを意味しないでしょう)。望ましくは、この関数は引数の値を破壊的に変更するべきではありません。@var{setfunction}のデフォルトは、@code{set-default}です。"

#. type: table
#: customize.texi.orig:362
msgid ""
"If you specify this keyword, the variable's documentation string should "
"describe how to do the same job in hand-written Lisp code."
msgstr "このキーワードを指定した場合、その変数のドキュメント文字列には、手入力のLispコードで同じことを行う方法が記載されるべきです。"

#. type: item
#: customize.texi.orig:363
#, no-wrap
msgid ":get @var{getfunction}"
msgstr ":get @var{getfunction}"

#. type: kindex
#: customize.texi.orig:364
#, no-wrap
msgid "get@r{, @code{defcustom} keyword}"
msgstr "get@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:370
msgid ""
"Specify @var{getfunction} as the way to extract the value of this option.  "
"The function @var{getfunction} should take one argument, a symbol, and "
"should return whatever customize should use as the ``current value'' for "
"that symbol (which need not be the symbol's Lisp value).  The default is "
"@code{default-value}."
msgstr "このオプションの値を抽出する方法として、@var{getfunction}を指定します。関数@var{getfunction}は1つの引数(シンボル)をとり、カスタマイズがそのシンボル(シンボルのLisp値である必要はない)にたいする``カレント値''としてそれを使うべきかreturnするべきです。デフォルトは@code{default-value}です。"

#. type: table
#: customize.texi.orig:376
msgid ""
"You have to really understand the workings of Custom to use @code{:get} "
"correctly.  It is meant for values that are treated in Custom as variables "
"but are not actually stored in Lisp variables.  It is almost surely a "
"mistake to specify @var{getfunction} for a value that really is stored in a "
"Lisp variable."
msgstr "@code{:get}を正しく使用するためには、Customの機能を真に理解する必要があります。これは変数としてCustom内で扱われる値のためのものですが、実際にはLisp変数に格納されません。実際にLisp変数に格納されている値に@var{getfunction}を指定するのは、ほとんどは誤りです。"

#. type: item
#: customize.texi.orig:377
#, no-wrap
msgid ":initialize @var{function}"
msgstr ":initialize @var{function}"

#. type: kindex
#: customize.texi.orig:378
#, no-wrap
msgid "initialize@r{, @code{defcustom} keyword}"
msgstr "initialize@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:383
msgid ""
"@var{function} should be a function used to initialize the variable when the "
"@code{defcustom} is evaluated.  It should take two arguments, the option "
"name (a symbol) and the value.  Here are some predefined functions meant for "
"use in this way:"
msgstr "@var{function}は、@code{defcustom}が評価されるときに変数を初期化するために使用される関数であるべきです。これは2つの引数 --- オプション名(シンボル)と値をとります。この方法での使用のために事前定義された関数がいくつかあります:"

#. type: item
#: customize.texi.orig:385
#, no-wrap
msgid "custom-initialize-set"
msgstr "custom-initialize-set"

#. type: table
#: customize.texi.orig:388
msgid ""
"Use the variable's @code{:set} function to initialize the variable, but do "
"not reinitialize it if it is already non-void."
msgstr "変数の初期化に、その変数の@code{:set}関数を使用しますが、値がすでに非voidの場合、再処帰化を行いません。"

#. type: item
#: customize.texi.orig:389
#, no-wrap
msgid "custom-initialize-default"
msgstr "custom-initialize-default"

#. type: table
#: customize.texi.orig:396
msgid ""
"Like @code{custom-initialize-set}, but use the function @code{set-default} "
"to set the variable, instead of the variable's @code{:set} function.  This "
"is the usual choice for a variable whose @code{:set} function enables or "
"disables a minor mode; with this choice, defining the variable will not call "
"the minor mode function, but customizing the variable will do so."
msgstr "@code{custom-initialize-set}と同様ですが、その変数の@code{:set}のかわりに、関数@code{set-default}を使用して変数をセットします。これは変数の@code{:set}関数がマイナーモードを有効または無効にする場合の、通常の選択です。この選択により、変数の定義ではマイナーモード関数を呼び出しませんが、変数をカスタマイズしたときはマイナーモード関数を呼び出します。"

#. type: item
#: customize.texi.orig:397
#, no-wrap
msgid "custom-initialize-reset"
msgstr "custom-initialize-reset"

#. type: table
#: customize.texi.orig:402
msgid ""
"Always use the @code{:set} function to initialize the variable.  If the "
"variable is already non-void, reset it by calling the @code{:set} function "
"using the current value (returned by the @code{:get} method).  This is the "
"default @code{:initialize} function."
msgstr "変数の初期化に、常に@code{:set}関数を使用します。変数がすでに非voidの場合、(@code{:get}メソッドでreturnされる)カレント値を使用して@code{:set}関数を呼び出して変数をリセットします。これはデフォルトの@code{:initialize}関数です。"

#. type: item
#: customize.texi.orig:403
#, no-wrap
msgid "custom-initialize-changed"
msgstr "custom-initialize-changed"

#. type: table
#: customize.texi.orig:407
msgid ""
"Use the @code{:set} function to initialize the variable, if it is already "
"set or has been customized; otherwise, just use @code{set-default}."
msgstr "変数がすでにセットされている、またはカスタマイズされている場合は、変数の初期化のために@code{:set}関数を使用し、それ以外は単に@code{set-default}を使用します。"

#. type: item
#: customize.texi.orig:408
#, no-wrap
msgid "custom-initialize-safe-set"
msgstr "custom-initialize-safe-set"

#. type: itemx
#: customize.texi.orig:409
#, no-wrap
msgid "custom-initialize-safe-default"
msgstr "custom-initialize-safe-default"

#. type: table
#: customize.texi.orig:414
msgid ""
"These functions behave like @code{custom-initialize-set} "
"(@code{custom-initialize-default}, respectively), but catch errors.  If an "
"error occurs during initialization, they set the variable to @code{nil} "
"using @code{set-default}, and signal no error."
msgstr "これらのn関数は@code{custom-initialize-set}、@code{custom-initialize-default}と同様に振る舞いますが、エラーをcatchします。初期化中にエラーが発生した場合は、@code{set-default}を使用して変数を@code{nil}にセットして、エラーをシグナルしません。"

#. type: table
#: customize.texi.orig:422
msgid ""
"These functions are meant for options defined in pre-loaded files, where the "
"@var{standard} expression may signal an error because some required variable "
"or function is not yet defined.  The value normally gets updated in "
"@file{startup.el}, ignoring the value computed by @code{defcustom}.  After "
"startup, if one unsets the value and reevaluates the @code{defcustom}, the "
"@var{standard} expression can be evaluated without error."
msgstr "これらの関数は事前ロードされたファイルで定義されたオプションのためのものです(requireされた変数または関数がまだ定義されていないため、@var{standard}式はエラーをシグナルするかもしれない)。その値は通常、@file{startup.el}で更新され、@code{defcustom}により計算された値は無視されます。startup後に、その値をunsetして、@code{defcustom}を再評価すれば、エラーなしで@var{standard}は評価されます。"

#. type: item
#: customize.texi.orig:424
#, no-wrap
msgid ":risky @var{value}"
msgstr ":risky @var{value}"

#. type: kindex
#: customize.texi.orig:425
#, no-wrap
msgid "risky@r{, @code{defcustom} keyword}"
msgstr "risky@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:428
msgid ""
"Set the variable's @code{risky-local-variable} property to @var{value} "
"(@pxref{File Local Variables})."
msgstr "その変数の@code{risky-local-variable}プロパティーを@var{value}にセットします(@ref{File Local Variables}を参照してください)。"

#. type: item
#: customize.texi.orig:429
#, no-wrap
msgid ":safe @var{function}"
msgstr ":safe @var{function}"

#. type: kindex
#: customize.texi.orig:430
#, no-wrap
msgid "safe@r{, @code{defcustom} keyword}"
msgstr "safe@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:433
msgid ""
"Set the variable's @code{safe-local-variable} property to @var{function} "
"(@pxref{File Local Variables})."
msgstr "その変数の@code{safe-local-variable}プロパティーを、@var{function}にセットします(@ref{File Local Variables}を参照してください)。"

#. type: item
#: customize.texi.orig:434
#, no-wrap
msgid ":set-after @var{variables}"
msgstr ":set-after @var{variables}"

#. type: kindex
#: customize.texi.orig:435
#, no-wrap
msgid "set-after@r{, @code{defcustom} keyword}"
msgstr "set-after@r{, @code{defcustom} keyword}"

#. type: table
#: customize.texi.orig:441
msgid ""
"When setting variables according to saved customizations, make sure to set "
"the variables @var{variables} before this one; i.e., delay setting this "
"variable until after those others have been handled.  Use @code{:set-after} "
"if setting this variable won't work properly unless those other variables "
"already have their intended values."
msgstr "保存されたカスタマイズに合わせて変数をセッティングするときは、その前に変数@var{variables}確実にセット --- つまり、これら他のものが処理される後までセッティングを遅延 --- してください。これら他の変数が意図された値をもっていない場合に、この変数のセッティングが正しく機能しないときは、@code{:set-after}を使用してください。"

#. type: Plain text
#: customize.texi.orig:448
msgid ""
"It is useful to specify the @code{:require} keyword for an option that "
"``turns on'' a certain feature.  This causes Emacs to load the feature, if "
"it is not already loaded, whenever the option is set.  @xref{Common "
"Keywords}.  Here is an example, from the library @file{saveplace.el}:"
msgstr "特定の機能を``オンに切り替える''オプションにたいしては、@code{:require}キーワードを指定すると便利です。これは、その機能がまだロードされていないときは、そのオプションがセットされるとEmacsがその機能をロードするようにします。@ref{Common Keywords}を参照してください。以下はライブラリー@file{saveplace.el}の例です:"

#. type: example
#: customize.texi.orig:455
#, no-wrap
msgid ""
"(defcustom save-place nil\n"
"  \"Non-nil means automatically save place in each file...\"\n"
"  :type 'boolean\n"
"  :require 'saveplace\n"
"  :group 'save-place)\n"
msgstr ""
"(defcustom save-place nil\n"
"  \"Non-nil means automatically save place in each file...\"\n"
"  :type 'boolean\n"
"  :require 'saveplace\n"
"  :group 'save-place)\n"

#. type: Plain text
#: customize.texi.orig:465
msgid ""
"If a customization item has a type such as @code{hook} or @code{alist}, "
"which supports @code{:options}, you can add additional values to the list "
"from outside the @code{defcustom} declaration by calling "
"@code{custom-add-frequent-value}.  For example, if you define a function "
"@code{my-lisp-mode-initialization} intended to be called from "
"@code{emacs-lisp-mode-hook}, you might want to add that to the list of "
"reasonable values for @code{emacs-lisp-mode-hook}, but not by editing its "
"definition.  You can do it thus:"
msgstr "あるカスタマイズアイテムが、@code{:options}がサポートする@code{hook}や@code{alist}のような型をもつ場合は、@code{custom-add-frequent-value}を呼び出すことにより、@code{defcustom}宣言の外部から、別途値を追加できます。たとえば@code{emacs-lisp-mode-hook}から呼び出されることを意図した関数@code{my-lisp-mode-initialization}を定義する場合は、@code{emacs-lisp-mode-hook}にたいする正当な値として、その定義を編集することなく、その関数をリストに追加したいと思うかもしれません。これは以下のようにして行うことができます:"

#. type: example
#: customize.texi.orig:469
#, no-wrap
msgid ""
"(custom-add-frequent-value 'emacs-lisp-mode-hook\n"
"   'my-lisp-mode-initialization)\n"
msgstr ""
"(custom-add-frequent-value 'emacs-lisp-mode-hook\n"
"   'my-lisp-mode-initialization)\n"

#. type: defun
#: customize.texi.orig:471
#, no-wrap
msgid "custom-add-frequent-value symbol value"
msgstr "custom-add-frequent-value symbol value"

#. type: defun
#: customize.texi.orig:474
msgid ""
"For the customization option @var{symbol}, add @var{value} to the list of "
"reasonable values."
msgstr "カスタマイズオプション@var{symbol}にたいして正当な値のリストに@var{value}を追加します。"

#. type: defun
#: customize.texi.orig:477
msgid ""
"The precise effect of adding a value depends on the customization type of "
"@var{symbol}."
msgstr "追加による正確な効果は、@var{symbol}のカスタマイズ型に依存します。"

#. type: Plain text
#: customize.texi.orig:486
msgid ""
"Internally, @code{defcustom} uses the symbol property @code{standard-value} "
"to record the expression for the standard value, @code{saved-value} to "
"record the value saved by the user with the customization buffer, and "
"@code{customized-value} to record the value set by the user with the "
"customization buffer, but not saved.  @xref{Symbol Properties}.  These "
"properties are lists, the car of which is an expression that evaluates to "
"the value."
msgstr "内部的には、@code{defcustom}は、標準値にたいする式を記録するためにシンボルプロパティー@code{standard-value}を、カスタマイズバッファーでユーザーによりセットされたが保存されていない値を記録するために@code{saved-value}を使用します。@ref{Symbol Properties}を参照してください。これらのプロパティーは、carがその値を評価する式であるようなリストです。"

#. type: defun
#: customize.texi.orig:487
#, no-wrap
msgid "custom-reevaluate-setting symbol"
msgstr "custom-reevaluate-setting symbol"

#. type: defun
#: customize.texi.orig:493
msgid ""
"This function re-evaluates the standard value of @var{symbol}, which should "
"be a user option declared via @code{defcustom}.  If the variable was "
"customized, this function re-evaluates the saved value instead.  Then it "
"sets the user option to that value (using the option's @code{:set} property "
"if that is defined)."
msgstr "この関数は、@code{defcustom}を通じて宣言されたユーザーオプション@var{symbol}の標準値を再評価します。変数がカスタマイズされた場合、この関数はかわりに保存された値を再評価します。それからこの関数はユーザーオプションをその値に(もし定義されていればそのオプションの@code{:set}プロパティーを使用して)セットします。"

#. type: defun
#: customize.texi.orig:499
msgid ""
"This is useful for customizable options that are defined before their value "
"could be computed correctly.  For example, during startup Emacs calls this "
"function for some user options that were defined in pre-loaded Emacs Lisp "
"files, but whose initial values depend on information available only at "
"run-time."
msgstr "これは値が正しく計算される前に定義されたカスタマイズ可能オプションにたいして有用です。たとえばstartupの間、Emacsは事前ロードされたEmacs Lispファイルで定義されたユーザーオプションにたいしてこの関数を呼び出しますが、これらの初期値は実行時だけ利用可能な情報に依存します。"

#. type: defun
#: customize.texi.orig:501
#, no-wrap
msgid "custom-variable-p arg"
msgstr "custom-variable-p arg"

#. type: defun
#: customize.texi.orig:507
msgid ""
"This function returns non-@code{nil} if @var{arg} is a customizable "
"variable.  A customizable variable is either a variable that has a "
"@code{standard-value} or @code{custom-autoload} property (usually meaning it "
"was declared with @code{defcustom}), or an alias for another customizable "
"variable."
msgstr "この関数は、@var{arg}がカスタマイズ可能変数の場合は、非@code{nil}をreturnします。カスタマイズ可能変数とは、@code{standard-value}か@code{custom-autoload}プロパティーをもつ(通常は@code{defcustom}で宣言されたことを意味する)変数、または別のカスタマイズ可能変数にたいするエイリアスのことです。"

#. type: cindex
#: customize.texi.orig:512
#, no-wrap
msgid "customization types"
msgstr "customization types"

#. type: Plain text
#: customize.texi.orig:517
msgid ""
"When you define a user option with @code{defcustom}, you must specify its "
"@dfn{customization type}.  That is a Lisp object which describes (1)  which "
"values are legitimate and (2) how to display the value in the customization "
"buffer for editing."
msgstr "@code{defcustom}でユーザーオプションを定義するときは、ユーザーオプションの@dfn{カスタマイズ型(customization type)}を指定しなければなりません。これは、(1)値が適正か、(2)編集のためにカスタマイズバッファーで値を表示する方法、を記述するLispオブジェクトです。"

#. type: kindex
#: customize.texi.orig:518
#, no-wrap
msgid "type@r{, @code{defcustom} keyword}"
msgstr "type@r{, @code{defcustom} keyword}"

#. type: Plain text
#: customize.texi.orig:524
msgid ""
"You specify the customization type in @code{defcustom} with the @code{:type} "
"keyword.  The argument of @code{:type} is evaluated, but only once when the "
"@code{defcustom} is executed, so it isn't useful for the value to vary.  "
"Normally we use a quoted constant.  For example:"
msgstr "カスタマイズ型は、@code{defcustom}内の@code{:type}キーワードで指定します。@code{:type}の引数は評価されますが、@code{defcustom}が実行されるとき1回だけ評価されるので、さまざまな値をとる場合には有用でありません。通常はクォートされた定数を使用します。たとえば:"

#. type: example
#: customize.texi.orig:530
#, no-wrap
msgid ""
"(defcustom diff-command \"diff\"\n"
"  \"The command to use to run diff.\"\n"
"  :type '(string)\n"
"  :group 'diff)\n"
msgstr ""
"(defcustom diff-command \"diff\"\n"
"  \"The command to use to run diff.\"\n"
"  :type '(string)\n"
"  :group 'diff)\n"

#. type: Plain text
#: customize.texi.orig:537
msgid ""
"In general, a customization type is a list whose first element is a symbol, "
"one of the customization type names defined in the following sections.  "
"After this symbol come a number of arguments, depending on the symbol.  "
"Between the type symbol and its arguments, you can optionally write "
"keyword-value pairs (@pxref{Type Keywords})."
msgstr "一般的に、カスタマイズ型は、最初の要素が以降のセクションで定義されるカスタマイズ型の1つであるような、リストです。このシンボルの後にいくつかの引数があり、それはそのシンボルに依存します。型シンボルと引数の間には、オプションでkeyword-valueペアー(@ref{Type Keywords}を参照してください)を記述できます。"

#. type: Plain text
#: customize.texi.orig:543
msgid ""
"Some type symbols do not use any arguments; those are called @dfn{simple "
"types}.  For a simple type, if you do not use any keyword-value pairs, you "
"can omit the parentheses around the type symbol.  For example just "
"@code{string} as a customization type is equivalent to @code{(string)}."
msgstr "いくつかの型シンボルは引数を使用しません。これらは@dfn{シンプル型(simple types)}と呼ばれます。シンプル型にたいしては、keyword-valueペアーを使用しない場合は、型シンボルの周囲のカッコ(parentheses)を省略できます。たとえばカスタマイズ型として単に@code{string}と記述すると、それは@code{(string)}と等価です。"

#. type: Plain text
#: customize.texi.orig:546
msgid ""
"All customization types are implemented as widgets; see @ref{Top, , "
"Introduction, widget, The Emacs Widget Library}, for details."
msgstr "すべてのカスタマイズ型はウィジェットとして実装されます。詳細は、@ref{Top, , Introduction, widget, The Emacs Widget Library}を参照してください。"

#. type: subsection
#: customize.texi.orig:553 customize.texi.orig:555 customize.texi.orig:556
#, no-wrap
msgid "Simple Types"
msgstr "Simple Types"

#. type: menuentry
#: customize.texi.orig:553
msgid "Simple customization types: sexp, integer, etc."
msgstr "シンプルなカスタマイズ型(sexp、integerなど)。"

#. type: subsection
#: customize.texi.orig:553 customize.texi.orig:644 customize.texi.orig:645
#, no-wrap
msgid "Composite Types"
msgstr "Composite Types"

#. type: menuentry
#: customize.texi.orig:553
msgid "Build new types from other types or data."
msgstr "他の型やデータから新しい型を構築する。"

#. type: subsection
#: customize.texi.orig:553 customize.texi.orig:993 customize.texi.orig:994
#, no-wrap
msgid "Splicing into Lists"
msgstr "Splicing into Lists"

#. type: menuentry
#: customize.texi.orig:553
msgid "Splice elements into list with @code{:inline}."
msgstr "@code{:inline}で要素をリストに結合する。"

#. type: subsection
#: customize.texi.orig:553 customize.texi.orig:1040 customize.texi.orig:1041
#, no-wrap
msgid "Type Keywords"
msgstr "Type Keywords"

#. type: menuentry
#: customize.texi.orig:553
msgid "Keyword-argument pairs in a customization type."
msgstr "カスタマイズ型でのキーワード／引数ペアー"

#. type: subsection
#: customize.texi.orig:553 customize.texi.orig:1228 customize.texi.orig:1229
#, no-wrap
msgid "Defining New Types"
msgstr "Defining New Types"

#. type: menuentry
#: customize.texi.orig:553
msgid "Give your type a name."
msgstr "型に名前をつける。"

#. type: Plain text
#: customize.texi.orig:561
msgid ""
"This section describes all the simple customization types.  For several of "
"these customization types, the customization widget provides inline "
"completion with @kbd{C-M-i} or @kbd{M-@key{TAB}}."
msgstr "このセクションでは、すべてのシンプルデータ型を説明します。これらのカスタマイズ型のうちのいくつかにたいして、カスタマイズウィジェットは@kbd{C-M-i}または@kbd{M-@key{TAB}}による、インライン補完を提供します。"

#. type: item
#: customize.texi.orig:563
#, no-wrap
msgid "sexp"
msgstr "sexp"

#. type: table
#: customize.texi.orig:567
msgid ""
"The value may be any Lisp object that can be printed and read back.  You can "
"use @code{sexp} as a fall-back for any option, if you don't want to take the "
"time to work out a more specific type to use."
msgstr "値はプリントおよび読み込むことができる任意のLispオブジェクトです。より特化した型の使用するために時間をとりたくない場合は、任意のオプションへのフォールバックとして@code{sexp}を使用することができます。"

#. type: item
#: customize.texi.orig:568
#, no-wrap
msgid "integer"
msgstr "integer"

#. type: table
#: customize.texi.orig:570
msgid "The value must be an integer."
msgstr "値は整数でなければなりません。"

#. type: item
#: customize.texi.orig:571
#, no-wrap
msgid "number"
msgstr "number"

#. type: table
#: customize.texi.orig:573
msgid "The value must be a number (floating point or integer)."
msgstr "値は数(浮動小数点数または整数)でなければなりません。"

#. type: item
#: customize.texi.orig:574
#, no-wrap
msgid "float"
msgstr "float"

#. type: table
#: customize.texi.orig:576
msgid "The value must be floating point."
msgstr "値は浮動小数点数でなければなりません。"

#. type: item
#: customize.texi.orig:577
#, no-wrap
msgid "string"
msgstr "string"

#. type: table
#: customize.texi.orig:580
msgid ""
"The value must be a string.  The customization buffer shows the string "
"without delimiting @samp{\"} characters or @samp{\\} quotes."
msgstr "値は文字列でなければなりません。カスタマイズバッファーはその文字列を区切り文字@samp{\"}文字および@samp{\\}クォートなしで表示します。"

#. type: item
#: customize.texi.orig:581
#, no-wrap
msgid "regexp"
msgstr "regexp"

#. type: table
#: customize.texi.orig:584
msgid ""
"Like @code{string} except that the string must be a valid regular "
"expression."
msgstr "@code{string}文字と同様ですが、その文字列は有効な正規表現でなければなりません。"

#. type: item
#: customize.texi.orig:585
#, no-wrap
msgid "character"
msgstr "character"

#. type: table
#: customize.texi.orig:589
msgid ""
"The value must be a character code.  A character code is actually an "
"integer, but this type shows the value by inserting the character in the "
"buffer, rather than by showing the number."
msgstr "値は文字コードでなければなりません。文字コードは実際には整数ですが、この型は数字を表示せずに、バッファー内にその文字を挿入することにより値を表示します。"

#. type: item
#: customize.texi.orig:590
#, no-wrap
msgid "file"
msgstr "file"

#. type: table
#: customize.texi.orig:592
msgid "The value must be a file name.  The widget provides completion."
msgstr "値はファイル名でなければなりません。ウィジェットは補完を提供します。"

#. type: item
#: customize.texi.orig:593
#, no-wrap
msgid "(file :must-match t)"
msgstr "(file :must-match t)"

#. type: table
#: customize.texi.orig:596
msgid ""
"The value must be a file name for an existing file.  The widget provides "
"completion."
msgstr "値は既存のファイル名でなければなりません。ウィジェットは補完を提供します。"

#. type: item
#: customize.texi.orig:597
#, no-wrap
msgid "directory"
msgstr "directory"

#. type: table
#: customize.texi.orig:599
msgid "The value must be a directory name.  The widget provides completion."
msgstr "値はディレクトリー名でなければなりません。ウィジェットは補完を提供します。"

#. type: item
#: customize.texi.orig:600
#, no-wrap
msgid "hook"
msgstr "hook"

#. type: table
#: customize.texi.orig:605
msgid ""
"The value must be a list of functions.  This customization type is used for "
"hook variables.  You can use the @code{:options} keyword in a hook "
"variable's @code{defcustom} to specify a list of functions recommended for "
"use in the hook; @xref{Variable Definitions}."
msgstr "値は関数のリストでなければなりません。このカスタマイズ型はフック変数にたいして使用されます。フック内での使用を推奨される関数のリストを指定するために、フック変数の@code{defcustom}内で@code{:options}キーワードを使用できます。@ref{Variable Definitions}を参照してください。"

#. type: item
#: customize.texi.orig:606
#, no-wrap
msgid "symbol"
msgstr "symbol"

#. type: table
#: customize.texi.orig:609
msgid ""
"The value must be a symbol.  It appears in the customization buffer as the "
"symbol name.  The widget provides completion."
msgstr "値はシンボルでなければなりません。これはカスタマイズバッファー内でシンボル名として表示されます。ウィジェットは補完を提供します。"

#. type: item
#: customize.texi.orig:610
#, no-wrap
msgid "function"
msgstr "function"

#. type: table
#: customize.texi.orig:613
msgid ""
"The value must be either a lambda expression or a function name.  The widget "
"provides completion for function names."
msgstr "値はラムダ式か関数名でなければなりません。ウィジェットは関数名にたいする補完を提供します。"

#. type: item
#: customize.texi.orig:614
#, no-wrap
msgid "variable"
msgstr "variable"

#. type: table
#: customize.texi.orig:616
msgid "The value must be a variable name.  The widget provides completion."
msgstr "値は変数名でなければなりません。ウィジェットは補完を提供します。"

#. type: item
#: customize.texi.orig:617
#, no-wrap
msgid "face"
msgstr "face"

#. type: table
#: customize.texi.orig:620
msgid ""
"The value must be a symbol which is a face name.  The widget provides "
"completion."
msgstr "値はフェイス名のシンボルでなければなりません。ウィジェットは補完を提供します。"

#. type: item
#: customize.texi.orig:621
#, no-wrap
msgid "boolean"
msgstr "boolean"

#. type: table
#: customize.texi.orig:627
msgid ""
"The value is boolean---either @code{nil} or @code{t}.  Note that by using "
"@code{choice} and @code{const} together (see the next section), you can "
"specify that the value must be @code{nil} or @code{t}, but also specify the "
"text to describe each value in a way that fits the specific meaning of the "
"alternative."
msgstr "値は真偽値 --- @code{nil}か@code{t}です。@code{choice}と@code{const}を合わせて使用(次のセクションを参照)することにより、値が@code{nil}か@code{t}でなければならず、それぞれの値に固有の意味に適合する説明テキストを指定することもできます。"

#. type: item
#: customize.texi.orig:628
#, no-wrap
msgid "key-sequence"
msgstr "key-sequence"

#. type: table
#: customize.texi.orig:632
msgid ""
"The value is a key sequence.  The customization buffer shows the key "
"sequence using the same syntax as the @kbd{kbd} function.  @xref{Key "
"Sequences}."
msgstr "値はキーシーケンスです。カスタマイズバッファーは、@kbd{kbd}関数と同じ構文うぃ使用して、キーシーケンスを表示します。@ref{Key Sequences}を参照してください。"

#. type: item
#: customize.texi.orig:633
#, no-wrap
msgid "coding-system"
msgstr "coding-system"

#. type: table
#: customize.texi.orig:636
msgid ""
"The value must be a coding-system name, and you can do completion with "
"@kbd{M-@key{TAB}}."
msgstr "値はコーディングシステム名でなければならず、@kbd{M-@key{TAB}}で保管することができます。"

#. type: item
#: customize.texi.orig:637
#, no-wrap
msgid "color"
msgstr "color"

#. type: table
#: customize.texi.orig:642
msgid ""
"The value must be a valid color name.  The widget provides completion for "
"color names, as well as a sample and a button for selecting a color name "
"from a list of color names shown in a @file{*Colors*} buffer."
msgstr "値は有効なカラー名でなければなりません。ウィジェットはカラー名にたいする補完と、同様に@file{*Colors*}バッファーに表示されるカラーサンプルとカラー名のリストからカラー名を選択するボタンを提供します。"

#. type: cindex
#: customize.texi.orig:646
#, no-wrap
msgid "composite types (customization)"
msgstr "composite types (customization)"

#. type: Plain text
#: customize.texi.orig:652
msgid ""
"When none of the simple types is appropriate, you can use composite types, "
"which build new types from other types or from specified data.  The "
"specified types or data are called the @dfn{arguments} of the composite "
"type.  The composite type normally looks like this:"
msgstr "適切なシンプル型がないときは、複合型(composite types)を使うことができます。複合型は特定のデータによる他の型から、新しい型を構築します。指定された型またはデータは、その複合型の@dfn{引数(argument)}と呼ばれます。複合型は通常、以下のようなものです:"

#. type: example
#: customize.texi.orig:655
#, no-wrap
msgid "(@var{constructor} @var{arguments}@dots{})\n"
msgstr "(@var{constructor} @var{arguments}@dots{})\n"

#. type: Plain text
#: customize.texi.orig:660
msgid "but you can also add keyword-value pairs before the arguments, like this:"
msgstr "しかし、以下のように引数の前にkeyword-valueペアーを追加することもできます。"

#. type: example
#: customize.texi.orig:663
#, no-wrap
msgid ""
"(@var{constructor} @r{@{}@var{keyword} @var{value}@r{@}}@dots{} "
"@var{arguments}@dots{})\n"
msgstr "(@var{constructor} @r{@{}@var{keyword} @var{value}@r{@}}@dots{} @var{arguments}@dots{})\n"

#. type: Plain text
#: customize.texi.orig:667
msgid ""
"Here is a table of constructors and how to use them to write composite "
"types:"
msgstr "以下のテーブルに、はコンストラクター(constructor)と、複合型を記述するためにそれらを使用する方法を示します:"

#. type: item
#: customize.texi.orig:669
#, no-wrap
msgid "(cons @var{car-type} @var{cdr-type})"
msgstr "(cons @var{car-type} @var{cdr-type})"

#. type: table
#: customize.texi.orig:674
msgid ""
"The value must be a cons cell, its @sc{car} must fit @var{car-type}, and its "
"@sc{cdr} must fit @var{cdr-type}.  For example, @code{(cons string symbol)} "
"is a customization type which matches values such as @code{(\"foo\" . foo)}."
msgstr "値はコンスセルでなければならず、@sc{car}は@var{car-type}、@sc{cdr}は@var{cdr-type}に適合していなければなりません。たとえば、@code{(cons string symbol)}は、@code{(\"foo\" . foo)}のような値にマッチするデータ型です。"

#. type: table
#: customize.texi.orig:677
msgid ""
"In the customization buffer, the @sc{car} and @sc{cdr} are displayed and "
"edited separately, each according to their specified type."
msgstr "カスタマイズバッファーでは、@sc{car}と@sc{cdr}は、それぞれ特定のデータ型に応じて、別々に表示・編集されます。"

#. type: item
#: customize.texi.orig:678
#, no-wrap
msgid "(list @var{element-types}@dots{})"
msgstr "(list @var{element-types}@dots{})"

#. type: table
#: customize.texi.orig:682
msgid ""
"The value must be a list with exactly as many elements as the "
"@var{element-types} given; and each element must fit the corresponding "
"@var{element-type}."
msgstr "値は、@var{element-types}で与えられる要素と数が正確に一致するリストでなければならず、リストの各要素はそれぞれ対応する@var{element-type}に適合しなければなりません。"

#. type: table
#: customize.texi.orig:686
msgid ""
"For example, @code{(list integer string function)} describes a list of three "
"elements; the first element must be an integer, the second a string, and the "
"third a function."
msgstr "たとえば、@code{(list integer string function)}は、３つの要素のリストを示し、１つ目の要素は整数、２つ目の要素は文字列、３つ目の要素は関数です。"

#. type: table
#: customize.texi.orig:689
msgid ""
"In the customization buffer, each element is displayed and edited "
"separately, according to the type specified for it."
msgstr "カスタマイズバッファーでは、各要素は、それぞれ特定のデータ型に応じて、別々に表示・編集されます。"

#. type: item
#: customize.texi.orig:690
#, no-wrap
msgid "(group @var{element-types}@dots{})"
msgstr "(group @var{element-types}@dots{})"

#. type: table
#: customize.texi.orig:694
msgid ""
"This works like @code{list} except for the formatting of text in the Custom "
"buffer.  @code{list} labels each element value with its tag; @code{group} "
"does not."
msgstr "これは@code{list}と似ていますが、Customバッファー内でのテキストのフォーマットが異なります。@code{list}は各要素の値を、そのタグでラベルづけしますが、@code{group}はそれを行いません。"

#. type: item
#: customize.texi.orig:695
#, no-wrap
msgid "(vector @var{element-types}@dots{})"
msgstr "(vector @var{element-types}@dots{})"

#. type: table
#: customize.texi.orig:698
msgid ""
"Like @code{list} except that the value must be a vector instead of a list.  "
"The elements work the same as in @code{list}."
msgstr "これは@code{list}と似ていますが、リストではなくベクターでなければなりません。各要素は@code{list}の場合と同様に機能します。"

#. type: item
#: customize.texi.orig:699
#, no-wrap
msgid "(alist :key-type @var{key-type} :value-type @var{value-type})"
msgstr "(alist :key-type @var{key-type} :value-type @var{value-type})"

#. type: table
#: customize.texi.orig:705
msgid ""
"The value must be a list of cons-cells, the @sc{car} of each cell "
"representing a key of customization type @var{key-type}, and the @sc{cdr} of "
"the same cell representing a value of customization type @var{value-type}.  "
"The user can add and delete key/value pairs, and edit both the key and the "
"value of each pair."
msgstr "値はコンスセルのリストでなければならず、各セルの@sc{car}はカスタマイズ型@var{key-type}のキーを表し、同じセルの@sc{cdr}はカスタマイズ型@var{value-type}の値を表します。ユーザーはkey/valueペアーの追加や削除ができ、各ペアのキーと値の両方を編集することができます。"

#. type: table
#: customize.texi.orig:708
msgid "If omitted, @var{key-type} and @var{value-type} default to @code{sexp}."
msgstr "省略された場合、@var{key-type}と@var{value-type}のデフォルトは、@code{sexp}です。"

#. type: table
#: customize.texi.orig:716
msgid ""
"The user can add any key matching the specified key type, but you can give "
"some keys a preferential treatment by specifying them with the "
"@code{:options} (see @ref{Variable Definitions}).  The specified keys will "
"always be shown in the customize buffer (together with a suitable value), "
"with a checkbox to include or exclude or disable the key/value pair from the "
"alist.  The user will not be able to edit the keys specified by the "
"@code{:options} keyword argument."
msgstr "ユーザーは指定されたkey-typeにマッチする任意のキーを追加できますが、@code{:options}(@ref{Variable Definitions}を参照してください)で指定することにより、あるキーを優先的に扱うことができます。指定されたキーは、(適切な値とともに)常にカスタマイズバッファーに表示されます。また、alistにkey/valueを含める、除外する、または無効にするかを指定するチェックボックスも一緒に表示されます。ユーザーは@code{:options}キーワード引数により指定された値は、変更できません。"

#. type: table
#: customize.texi.orig:720
msgid ""
"The argument to the @code{:options} keywords should be a list of "
"specifications for reasonable keys in the alist.  Ordinarily, they are "
"simply atoms, which stand for themselves.  For example:"
msgstr "@code{:options}キーワードにたいする引数は、alist内の適切なキーにたいする仕様のリストであるべきです。これらは通常、単純なアトムであり、それらは自身をを意味します。たとえば:"

#. type: example
#: customize.texi.orig:723
#, no-wrap
msgid ":options '(\"foo\" \"bar\" \"baz\")\n"
msgstr ":options '(\"foo\" \"bar\" \"baz\")\n"

#. type: table
#: customize.texi.orig:728
msgid ""
"specifies that there are three ``known'' keys, namely @code{\"foo\"}, "
"@code{\"bar\"} and @code{\"baz\"}, which will always be shown first."
msgstr "これは、名前が@code{\"foo\"}、@code{\"bar\"}、@code{\"baz\"}の、３つの``既知''のキーがあることを指定し、それらは常に最初に表示されます。"

#. type: table
#: customize.texi.orig:734
msgid ""
"You may want to restrict the value type for specific keys, for example, the "
"value associated with the @code{\"bar\"} key can only be an integer.  You "
"can specify this by using a list instead of an atom in the list.  The first "
"element will specify the key, like before, while the second element will "
"specify the value type.  For example:"
msgstr "たとえば@code{\"bar\"}キーに対応する値を整数だけにするというように、特定のキーに対して値の型を制限したいときがあるかもしれません。これはリスト内でアトムのかわりにリストを使用することにより、指定することができます。前述のように、１つ目の要素はそのキーを指定し、２つ目の要素は値の型を指定します。たとえば:"

#. type: example
#: customize.texi.orig:737
#, no-wrap
msgid ":options '(\"foo\" (\"bar\" integer) \"baz\")\n"
msgstr ":options '(\"foo\" (\"bar\" integer) \"baz\")\n"

#. type: table
#: customize.texi.orig:746
msgid ""
"Finally, you may want to change how the key is presented.  By default, the "
"key is simply shown as a @code{const}, since the user cannot change the "
"special keys specified with the @code{:options} keyword.  However, you may "
"want to use a more specialized type for presenting the key, like "
"@code{function-item} if you know it is a symbol with a function binding.  "
"This is done by using a customization type specification instead of a symbol "
"for the key."
msgstr "最後に、キーが表示される方法を変更したいときもあるかもしれません。デフォルトでは、@code{:options}キーワードで指定された特別なキーはユーザーが変更できないので、キーは単に@code{const}として表示されます。しかし、たとえばそれが関数バインディングをもつシンボルだと知っている場合は@code{function-item}といったように、あるキーの表示のために、より特化した型を使用したいと思うかもしれません。これは、キーに対してシンボルを使うかわりに、カスタマイズ型指定を使用することにより、行うことができます。"

#. type: example
#: customize.texi.orig:751
#, no-wrap
msgid ""
":options '(\"foo\"\n"
"           ((function-item some-function) integer)\n"
"           \"baz\")\n"
msgstr ""
":options '(\"foo\"\n"
"           ((function-item some-function) integer)\n"
"           \"baz\")\n"

#. type: table
#: customize.texi.orig:755
msgid ""
"Many alists use lists with two elements, instead of cons cells.  For "
"example,"
msgstr "多くのalistは、コンスセルのかわりに２要素のリストを使用します。たとえば、"

#. type: example
#: customize.texi.orig:760
#, no-wrap
msgid ""
"(defcustom list-alist\n"
"  '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\")\n"
msgstr ""
"(defcustom cons-alist\n"
"  '((\"foo\" . 1) (\"bar\" . 2) (\"baz\" . 3))\n"
"  \"Each element is a cons-cell (KEY . VALUE).\")\n"

#. type: table
#: customize.texi.orig:764
msgid "instead of"
msgstr "のかわりに以下を使用します"

#. type: example
#: customize.texi.orig:769
#, no-wrap
msgid ""
"(defcustom cons-alist\n"
"  '((\"foo\" . 1) (\"bar\" . 2) (\"baz\" . 3))\n"
"  \"Each element is a cons-cell (KEY . VALUE).\")\n"
msgstr ""
"(defcustom list-alist\n"
"  '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\")\n"

#. type: table
#: customize.texi.orig:775
msgid ""
"Because of the way lists are implemented on top of cons cells, you can treat "
"@code{list-alist} in the example above as a cons cell alist, where the value "
"type is a list with a single element containing the real value."
msgstr "リストはコンスセルの最上位に実装されているため、上記の@code{list-alist}を、コンスセルのalist(value-typeが実際の値を含む１要素のリストであるような)として扱うことができます。"

#. type: example
#: customize.texi.orig:780
#, no-wrap
msgid ""
"(defcustom list-alist '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\"\n"
"  :type '(alist :value-type (group integer)))\n"
msgstr ""
"(defcustom list-alist '((\"foo\" 1) (\"bar\" 2) (\"baz\" 3))\n"
"  \"Each element is a list of the form (KEY VALUE).\"\n"
"  :type '(alist :value-type (group integer)))\n"

#. type: table
#: customize.texi.orig:784
msgid ""
"The @code{group} widget is used here instead of @code{list} only because the "
"formatting is better suited for the purpose."
msgstr "@code{list}のかわりに@code{group}を使用するのは、その目的に適したフォーマットのためだけです。"

#. type: table
#: customize.texi.orig:787
msgid ""
"Similarly, you can have alists with more values associated with each key, "
"using variations of this trick:"
msgstr "同様に、以下のようなトリックの類を用いることにより、より多くの値が各キー連づけられたalistを得ることができます:"

#. type: example
#: customize.texi.orig:795
#, no-wrap
msgid ""
"(defcustom person-data '((\"brian\"  50 t)\n"
"                         (\"dorith\" 55 nil)\n"
"                         (\"ken\"    52 t))\n"
"  \"Alist of basic info about people.\n"
"Each element has the form (NAME AGE MALE-FLAG).\"\n"
"  :type '(alist :value-type (group integer boolean)))\n"
msgstr ""
"(defcustom person-data '((\"brian\"  50 t)\n"
"                         (\"dorith\" 55 nil)\n"
"                         (\"ken\"    52 t))\n"
"  \"Alist of basic info about people.\n"
"Each element has the form (NAME AGE MALE-FLAG).\"\n"
"  :type '(alist :value-type (group integer boolean)))\n"

#. type: item
#: customize.texi.orig:797
#, no-wrap
msgid "(plist :key-type @var{key-type} :value-type @var{value-type})"
msgstr "(plist :key-type @var{key-type} :value-type @var{value-type})"

#. type: table
#: customize.texi.orig:802
msgid ""
"This customization type is similar to @code{alist} (see above), except that "
"(i) the information is stored as a property list, (@pxref{Property Lists}), "
"and (ii) @var{key-type}, if omitted, defaults to @code{symbol} rather than "
"@code{sexp}."
msgstr "このカスタマイズ型は@code{alist}(上位参照)と似ていますが、(1)情報がプロパティーリスト(@ref{Property Lists}を参照してください)に格納され、(2)@var{key-type}が省略された場合、デフォルトは@code{sexp}ではなく、@code{symbol}になります。"

#. type: item
#: customize.texi.orig:803
#, no-wrap
msgid "(choice @var{alternative-types}@dots{})"
msgstr "(choice @var{alternative-types}@dots{})"

#. type: table
#: customize.texi.orig:806
msgid ""
"The value must fit one of @var{alternative-types}.  For example, "
"@code{(choice integer string)} allows either an integer or a string."
msgstr "値は@var{alternative-types}のうちの1つに適合しなければなりません。たとえば、@code{(choice integer string)}では整数か文字列が許されます。"

#. type: table
#: customize.texi.orig:810
msgid ""
"In the customization buffer, the user selects an alternative using a menu, "
"and can then edit the value in the usual way for that alternative."
msgstr "カスタマイズバッファーでは、ユーザーはメニューを使用して候補を選択して、それらの候補にたいして通常の方法で値を編集できます。"

#. type: table
#: customize.texi.orig:816
msgid ""
"Normally the strings in this menu are determined automatically from the "
"choices; however, you can specify different strings for the menu by "
"including the @code{:tag} keyword in the alternatives.  For example, if an "
"integer stands for a number of spaces, while a string is text to use "
"verbatim, you might write the customization type this way,"
msgstr "通常この選択からメニューの文字列が自動的に決定されます。しかし候補の中に@code{:tag}キーワードを含めることにより、メニューにたいして異なる文字列を指定できます。たとえば、空白の数を意味する整数と、その通りに使用したいテキストにたいする文字列の場合は、以下のような方法でカスタマイズ型を記述したいかもしれません"

#. type: example
#: customize.texi.orig:820
#, no-wrap
msgid ""
"(choice (integer :tag \"Number of spaces\")\n"
"        (string :tag \"Literal text\"))\n"
msgstr ""
"(choice (integer :tag \"Number of spaces\")\n"
"        (string :tag \"Literal text\"))\n"

#. type: table
#: customize.texi.orig:824
msgid "so that the menu offers @samp{Number of spaces} and @samp{Literal text}."
msgstr "この場合メニューは、@samp{Number of spaces}と@samp{Literal text}を提示します。"

#. type: table
#: customize.texi.orig:828
msgid ""
"In any alternative for which @code{nil} is not a valid value, other than a "
"@code{const}, you should specify a valid default for that alternative using "
"the @code{:value} keyword.  @xref{Type Keywords}."
msgstr "@code{const}以外の@code{nil}が有効な値ではない候補には、@code{:value}キーワードを使用して、有効なデフォルト値を指定するべきです。@ref{Type Keywords}を参照してください。"

#. type: table
#: customize.texi.orig:833
msgid ""
"If some values are covered by more than one of the alternatives, customize "
"will choose the first alternative that the value fits.  This means you "
"should always list the most specific types first, and the most general "
"last.  Here's an example of proper usage:"
msgstr "複数の候補によりいくつかの値が提供される場合、カスタマイズは適合する値をもつ最初の候補を選択します。これは常に、もっとも特有な型を最初に、もっとも一般的な型を最後にリストすべきことを意味します。以下は適切な使い方の例です:"

#. type: example
#: customize.texi.orig:837
#, no-wrap
msgid ""
"(choice (const :tag \"Off\" nil)\n"
"        symbol (sexp :tag \"Other\"))\n"
msgstr ""
"(choice (const :tag \"Off\" nil)\n"
"        symbol (sexp :tag \"Other\"))\n"

#. type: table
#: customize.texi.orig:842
msgid ""
"This way, the special value @code{nil} is not treated like other symbols, "
"and symbols are not treated like other Lisp expressions."
msgstr "この使い方では、特別な値@code{nil}はその他のシンボルとは別に扱われ、シンボルは他のLisp式とは別に扱われます。"

#. type: item
#: customize.texi.orig:843
#, no-wrap
msgid "(radio @var{element-types}@dots{})"
msgstr "(radio @var{element-types}@dots{})"

#. type: table
#: customize.texi.orig:849
msgid ""
"This is similar to @code{choice}, except that the choices are displayed "
"using `radio buttons' rather than a menu.  This has the advantage of "
"displaying documentation for the choices when applicable and so is often a "
"good choice for a choice between constant functions (@code{function-item} "
"customization types)."
msgstr "これは@code{choice}と似ていますが、選択はメニューではなく、`ラジオボタン'で表示されます。これは該当する選択にたいしてドキュメントが表示できる利点があるので、関数定数(@code{function-item}カスタマイズ型)の選択に適す場合があります。"

#. type: item
#: customize.texi.orig:850
#, no-wrap
msgid "(const @var{value})"
msgstr "(const @var{value})"

#. type: table
#: customize.texi.orig:852
msgid "The value must be @var{value}---nothing else is allowed."
msgstr "値は@var{value}でなければならず、他は許されません。"

#. type: table
#: customize.texi.orig:856
msgid ""
"The main use of @code{const} is inside of @code{choice}.  For example, "
"@code{(choice integer (const nil))} allows either an integer or @code{nil}."
msgstr "@code{const}は主に@code{choice}の中で使用されます。たとえば、@code{(choice integer (const nil))}では、整数か@code{nil}が選択できます。"

#. type: table
#: customize.texi.orig:859
msgid ""
"@code{:tag} is often used with @code{const}, inside of @code{choice}.  For "
"example,"
msgstr "@code{choice}の中では、@code{:tag}とともに@code{const}が使用される場合があります。たとえば、"

#. type: example
#: customize.texi.orig:864
#, no-wrap
msgid ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (const :tag \"Ask\" foo))\n"
msgstr ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (const :tag \"Ask\" foo))\n"

#. type: table
#: customize.texi.orig:869
msgid ""
"describes a variable for which @code{t} means yes, @code{nil} means no, and "
"@code{foo} means ``ask''."
msgstr "これは@code{t}がyes、@code{nil}がno、@code{foo}が``ask''を意味することを示します。"

#. type: item
#: customize.texi.orig:870
#, no-wrap
msgid "(other @var{value})"
msgstr "(other @var{value})"

#. type: table
#: customize.texi.orig:873
msgid ""
"This alternative can match any Lisp value, but if the user chooses this "
"alternative, that selects the value @var{value}."
msgstr "この候補は任意のLisp値にマッチできますが、ユーザーがこの候補を選択した場合は、値@var{value}が選択されます。"

#. type: table
#: customize.texi.orig:876
msgid ""
"The main use of @code{other} is as the last element of @code{choice}.  For "
"example,"
msgstr "@code{other}は主に@code{choice}の最後の要素に使用されます。たとえば、"

#. type: example
#: customize.texi.orig:881
#, no-wrap
msgid ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (other :tag \"Ask\" foo))\n"
msgstr ""
"(choice (const :tag \"Yes\" t)\n"
"        (const :tag \"No\" nil)\n"
"        (other :tag \"Ask\" foo))\n"

#. type: table
#: customize.texi.orig:889
msgid ""
"describes a variable for which @code{t} means yes, @code{nil} means no, and "
"anything else means ``ask''.  If the user chooses @samp{Ask} from the menu "
"of alternatives, that specifies the value @code{foo}; but any other value "
"(not @code{t}, @code{nil} or @code{foo}) displays as @samp{Ask}, just like "
"@code{foo}."
msgstr "これは@code{t}がyes、@code{nil}がno、それ以外は``ask''を意味することを示します。ユーザーが候補メニューから@samp{Ask}を選択した場合は、値@code{foo}が指定されます。しかし、その他の値(@code{t}、@code{nil}、@code{foo}を除く)では、@code{foo}と同様に@samp{Ask}が表示されます。"

#. type: item
#: customize.texi.orig:890
#, no-wrap
msgid "(function-item @var{function})"
msgstr "(function-item @var{function})"

#. type: table
#: customize.texi.orig:895
msgid ""
"Like @code{const}, but used for values which are functions.  This displays "
"the documentation string as well as the function name.  The documentation "
"string is either the one you specify with @code{:doc}, or @var{function}'s "
"own documentation string."
msgstr "@code{const}と同様ですが、値が関数のときに使用されます。これはドキュメント文字列も関数名と同じように表示します。ドキュメント文字列は、@code{:doc}で指定した文字列か、@var{function}自身のドキュメント文字列です。"

#. type: item
#: customize.texi.orig:896
#, no-wrap
msgid "(variable-item @var{variable})"
msgstr "(variable-item @var{variable})"

#. type: table
#: customize.texi.orig:901
msgid ""
"Like @code{const}, but used for values which are variable names.  This "
"displays the documentation string as well as the variable name.  The "
"documentation string is either the one you specify with @code{:doc}, or "
"@var{variable}'s own documentation string."
msgstr "@code{const}と同様ですが、値が変数名のときに使用されます。これはドキュメント文字列も変数名と同じように表示します。ドキュメント文字列は、@code{:doc}で指定した文字列か、@var{variable}自身のドキュメント文字列です。"

#. type: item
#: customize.texi.orig:902
#, no-wrap
msgid "(set @var{types}@dots{})"
msgstr "(set @var{types}@dots{})"

#. type: table
#: customize.texi.orig:905
msgid ""
"The value must be a list, and each element of the list must match one of the "
"@var{types} specified."
msgstr "値はリストでなければならず、指定された@var{types}の1つにマッチしなければなりません。"

#. type: table
#: customize.texi.orig:913
msgid ""
"This appears in the customization buffer as a checklist, so that each of "
"@var{types} may have either one corresponding element or none.  It is not "
"possible to specify two different elements that match the same one of "
"@var{types}.  For example, @code{(set integer symbol)} allows one integer "
"and/or one symbol in the list; it does not allow multiple integers or "
"multiple symbols.  As a result, it is rare to use nonspecific types such as "
"@code{integer} in a @code{set}."
msgstr "これはカスタマイズバッファーではチェックリストとして表示されるので、@var{types}はそれぞれ対応する要素を1つ、あるいは要素をもちません。同じ1つの@var{types}にマッチするような、異なる2つの要素を指定することはできません。たとえば、@code{(set integer symbol)}は、リスト内で1つの整数、および/または1つのシンボルが許され、複数の整数や複数のシンボルは許されません。結果として、@code{set}内で@code{integer}のような特定的ではない型を使用するのは稀です。"

#. type: table
#: customize.texi.orig:916
msgid ""
"Most often, the @var{types} in a @code{set} are @code{const} types, as shown "
"here:"
msgstr "以下のように、@code{const}型は@code{set}内の@var{types}でよく使用されます:"

#. type: example
#: customize.texi.orig:919
#, no-wrap
msgid "(set (const :bold) (const :italic))\n"
msgstr "(set (const :bold) (const :italic))\n"

#. type: table
#: customize.texi.orig:922
msgid "Sometimes they describe possible elements in an alist:"
msgstr "alist内で利用できる要素を示すために使用されることもあります:"

#. type: example
#: customize.texi.orig:926
#, no-wrap
msgid ""
"(set (cons :tag \"Height\" (const height) integer)\n"
"     (cons :tag \"Width\" (const width) integer))\n"
msgstr ""
"(set (cons :tag \"Height\" (const height) integer)\n"
"     (cons :tag \"Width\" (const width) integer))\n"

#. type: table
#: customize.texi.orig:931
msgid ""
"That lets the user specify a height value optionally and a width value "
"optionally."
msgstr "これによりユーザーにオプションでheightとwidthの値を指定させることができます。"

#. type: item
#: customize.texi.orig:932
#, no-wrap
msgid "(repeat @var{element-type})"
msgstr "(repeat @var{element-type})"

#. type: table
#: customize.texi.orig:937
msgid ""
"The value must be a list and each element of the list must fit the type "
"@var{element-type}.  This appears in the customization buffer as a list of "
"elements, with @samp{[INS]} and @samp{[DEL]} buttons for adding more "
"elements or removing elements."
msgstr "値はリストでなければならず、リストの各要素は型@var{element-type}に適合しなければなりません。カスタマイズバッファーでは要素のリストとして表示され、@samp{[INS]}および@samp{[DEL]}ボタンにより、要素の追加や削除が行われます。"

#. type: item
#: customize.texi.orig:938
#, no-wrap
msgid "(restricted-sexp :match-alternatives @var{criteria})"
msgstr "(restricted-sexp :match-alternatives @var{criteria})"

#. type: table
#: customize.texi.orig:943
msgid ""
"This is the most general composite type construct.  The value may be any "
"Lisp object that satisfies one of @var{criteria}.  @var{criteria} should be "
"a list, and each element should be one of these possibilities:"
msgstr "これはもっとも汎用的な複合型の構築方法です。値は@var{criteria}を満足する任意のLispオブジェクトです。@var{criteria}はリストで、リストの各要素は以下のうちの1つを満たす必要があります:"

#. type: itemize
#: customize.texi.orig:950
msgid ""
"A predicate---that is, a function of one argument that has no side effects, "
"and returns either @code{nil} or non-@code{nil} according to the argument.  "
"Using a predicate in the list says that objects for which the predicate "
"returns non-@code{nil} are acceptable."
msgstr "述語 --- つまり、副作用をもたず引数は1つ、その引数に応じて@code{nil}か非@code{nil}のどちらかをリターンする関数。リスト内での述語の使用により、その述語が非@code{nil}をリターンするようなオブジェクトが許されることを意味する。"

#. type: itemize
#: customize.texi.orig:954
msgid ""
"A quoted constant---that is, @code{'@var{object}}.  This sort of element in "
"the list says that @var{object} itself is an acceptable value."
msgstr "クォートされた定数 --- つまり、@code{'@var{object}}。リスト内でこの要素は、@var{object}自身が容認される値であることを示す。"

#. type: table
#: customize.texi.orig:957
msgid "For example,"
msgstr "たとえば、"

#. type: example
#: customize.texi.orig:961
#, no-wrap
msgid ""
"(restricted-sexp :match-alternatives\n"
"                 (integerp 't 'nil))\n"
msgstr ""
"(restricted-sexp :match-alternatives\n"
"                 (integerp 't 'nil))\n"

#. type: table
#: customize.texi.orig:965
msgid "allows integers, @code{t} and @code{nil} as legitimate values."
msgstr "これは整数、@code{t}、@code{nil}を正当な値として受け入れます。"

#. type: table
#: customize.texi.orig:968
msgid ""
"The customization buffer shows all legitimate values using their read "
"syntax, and the user edits them textually."
msgstr "カスタマイズバッファーは適切な値をそれらの入力構文ですべて表示し、ユーザーはこれらをテキストとして編集できます。"

#. type: Plain text
#: customize.texi.orig:972
msgid ""
"Here is a table of the keywords you can use in keyword-value pairs in a "
"composite type:"
msgstr "以下は複合型でキーワード/値ペアーとして使用できるキーワードのテーブルです:"

#. type: item
#: customize.texi.orig:974 customize.texi.orig:1127
#, no-wrap
msgid ":tag @var{tag}"
msgstr ":tag @var{tag}"

#. type: table
#: customize.texi.orig:978
msgid ""
"Use @var{tag} as the name of this alternative, for user communication "
"purposes.  This is useful for a type that appears inside of a @code{choice}."
msgstr "@var{tag}は、ユーザーとのコミュニケーションのために、その候補の名前として使用される。@code{choice}内に出現する型にたいして有用。"

#. type: item
#: customize.texi.orig:979
#, no-wrap
msgid ":match-alternatives @var{criteria}"
msgstr ":match-alternatives @var{criteria}"

#. type: kindex
#: customize.texi.orig:980
#, no-wrap
msgid "match-alternatives@r{, customization keyword}"
msgstr "match-alternatives@r{, customization keyword}"

#. type: table
#: customize.texi.orig:983
msgid ""
"Use @var{criteria} to match possible values.  This is used only in "
"@code{restricted-sexp}."
msgstr "@var{criteria}は可能な値とのマッチに使用される。これは@code{restricted-sexp}内でのみ有用。"

#. type: item
#: customize.texi.orig:984
#, no-wrap
msgid ":args @var{argument-list}"
msgstr ":args @var{argument-list}"

#. type: kindex
#: customize.texi.orig:985
#, no-wrap
msgid "args@r{, customization keyword}"
msgstr "args@r{, customization keyword}"

#. type: table
#: customize.texi.orig:991
msgid ""
"Use the elements of @var{argument-list} as the arguments of the type "
"construct.  For instance, @code{(const :args (foo))} is equivalent to "
"@code{(const foo)}.  You rarely need to write @code{:args} explicitly, "
"because normally the arguments are recognized automatically as whatever "
"follows the last keyword-value pair."
msgstr "型構築の引数として@var{argument-list}の要素を使用します。たとえば、@code{(const :args (foo))}は@code{(const foo)}と等価です。明示的に@code{:args}とく記述する必要があるのは稀です。なぜなら、最後のキーワード/値ペアーの後に続くものは何であれ、引数として認識されるからです。"

#. type: Plain text
#: customize.texi.orig:1001
msgid ""
"The @code{:inline} feature lets you splice a variable number of elements "
"into the middle of a @code{list} or @code{vector} customization type.  You "
"use it by adding @code{:inline t} to a type specification which is contained "
"in a @code{list} or @code{vector} specification."
msgstr "@code{:inline}機能により、可変個の要素を、カスタマイズ型の@code{list}や@code{vector}の途中にスプライス(splice: 継ぎ足す)することができます。@code{list}や@code{vector}記述を含む型にたいして@code{:inline t}を追加することによりこれを使用します。"

#. type: Plain text
#: customize.texi.orig:1009
msgid ""
"Normally, each entry in a @code{list} or @code{vector} type specification "
"describes a single element type.  But when an entry contains @code{:inline "
"t}, the value it matches is merged directly into the containing sequence.  "
"For example, if the entry matches a list with three elements, those become "
"three elements of the overall sequence.  This is analogous to @samp{,@@} in "
"a backquote construct (@pxref{Backquote})."
msgstr "通常@code{list}や@code{vector}型の仕様は、単一の要素型を表します。しかしエントリーが@code{:inline t}を含む場合、マッチする値は、その含まれたシーケンスに直接マージされます。たとえば、エントリーが3要素のリストにマッチする場合、全体が3要素のシーケンスになります。これはバッククォート構文(@ref{Backquote}を参照)の@samp{,@@}に類似しています。"

#. type: Plain text
#: customize.texi.orig:1013
msgid ""
"For example, to specify a list whose first element must be @code{baz} and "
"whose remaining arguments should be zero or more of @code{foo} and "
"@code{bar}, use this customization type:"
msgstr "たとえば、最初の要素が@code{baz}で、残りの引数は0個以上の@code{foo}か@code{bar}でなければならないリストを指定する場合は、以下のカスタマイズ型を使用します:"

#. type: example
#: customize.texi.orig:1016
#, no-wrap
msgid "(list (const baz) (set :inline t (const foo) (const bar)))\n"
msgstr "(list (const baz) (set :inline t (const foo) (const bar)))\n"

#. type: Plain text
#: customize.texi.orig:1021
msgid ""
"This matches values such as @code{(baz)}, @code{(baz foo)}, @code{(baz bar)} "
"and @code{(baz foo bar)}."
msgstr "これは @code{(baz)}、@code{(baz foo)}、@code{(baz bar)}、@code{(baz foo bar)}のような値にマッチします。"

#. type: Plain text
#: customize.texi.orig:1027
msgid ""
"When the element-type is a @code{choice}, you use @code{:inline} not in the "
"@code{choice} itself, but in (some of) the alternatives of the "
"@code{choice}.  For example, to match a list which must start with a file "
"name, followed either by the symbol @code{t} or two strings, use this "
"customization type:"
msgstr "要素の型が@code{choice}の場合は、@code{choice}自身の中で@code{:inline}を使用せずに、@code{choice}の候補(の一部)の中で使用します。たとえば、最初がファイル名で開始され、その後にシンボル@code{t}か2つの文字列を続けなければならないリストにマッチさせるには、以下のカスタマイズ型を使用します:"

#. type: example
#: customize.texi.orig:1032
#, no-wrap
msgid ""
"(list file\n"
"      (choice (const t)\n"
"              (list :inline t string string)))\n"
msgstr ""
"(list file\n"
"      (choice (const t)\n"
"              (list :inline t string string)))\n"

#. type: Plain text
#: customize.texi.orig:1039
msgid ""
"If the user chooses the first alternative in the choice, then the overall "
"list has two elements and the second element is @code{t}.  If the user "
"chooses the second alternative, then the overall list has three elements and "
"the second and third must be strings."
msgstr "選択においてユーザーが選択肢の1つ目を選んだ場合、リスト全体が2つの要素をもち、2つ目の要素は@code{t}になります。ユーザーが2つ目の候補を選んだ場合、リスト全体が3つの要素をもち、2つ目と3つ目の要素は文字列でなければなりません。"

#. type: Plain text
#: customize.texi.orig:1046
msgid ""
"You can specify keyword-argument pairs in a customization type after the "
"type name symbol.  Here are the keywords you can use, and their meanings:"
msgstr "カスタマイズ型内の型名シンボルの後にキーワード/引数ペアーを指定できます。以下は使用できるキーワードと、それらの意味です:"

#. type: item
#: customize.texi.orig:1048
#, no-wrap
msgid ":value @var{default}"
msgstr ":value @var{default}"

#. type: table
#: customize.texi.orig:1050
msgid "Provide a default value."
msgstr "デフォルト値を提供する。"

#. type: table
#: customize.texi.orig:1053
msgid ""
"If @code{nil} is not a valid value for the alternative, then it is essential "
"to specify a valid default with @code{:value}."
msgstr ""

#. type: table
#: customize.texi.orig:1058
msgid ""
"If you use this for a type that appears as an alternative inside of "
"@code{choice}; it specifies the default value to use, at first, if and when "
"the user selects this alternative with the menu in the customization buffer."
msgstr ""

#. type: table
#: customize.texi.orig:1061
msgid ""
"Of course, if the actual value of the option fits this alternative, it will "
"appear showing the actual value, not @var{default}."
msgstr ""

#. type: item
#: customize.texi.orig:1062
#, no-wrap
msgid ":format @var{format-string}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1063
#, no-wrap
msgid "format@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1067
msgid ""
"This string will be inserted in the buffer to represent the value "
"corresponding to the type.  The following @samp{%} escapes are available for "
"use in @var{format-string}:"
msgstr ""

#. type: item
#: customize.texi.orig:1069
#, no-wrap
msgid "%[@var{button}%]"
msgstr ""

#. type: table
#: customize.texi.orig:1074
msgid ""
"Display the text @var{button} marked as a button.  The @code{:action} "
"attribute specifies what the button will do if the user invokes it; its "
"value is a function which takes two arguments---the widget which the button "
"appears in, and the event."
msgstr ""

#. type: table
#: customize.texi.orig:1077
msgid "There is no way to specify two different buttons with different actions."
msgstr ""

#. type: item
#: customize.texi.orig:1078
#, no-wrap
msgid "%@{@var{sample}%@}"
msgstr ""

#. type: table
#: customize.texi.orig:1080
msgid "Show @var{sample} in a special face specified by @code{:sample-face}."
msgstr ""

#. type: item
#: customize.texi.orig:1081
#, no-wrap
msgid "%v"
msgstr ""

#. type: table
#: customize.texi.orig:1084
msgid ""
"Substitute the item's value.  How the value is represented depends on the "
"kind of item, and (for variables) on the customization type."
msgstr ""

#. type: item
#: customize.texi.orig:1085
#, no-wrap
msgid "%d"
msgstr ""

#. type: table
#: customize.texi.orig:1087
msgid "Substitute the item's documentation string."
msgstr ""

#. type: item
#: customize.texi.orig:1088
#, no-wrap
msgid "%h"
msgstr ""

#. type: table
#: customize.texi.orig:1091
msgid ""
"Like @samp{%d}, but if the documentation string is more than one line, add a "
"button to control whether to show all of it or just the first line."
msgstr ""

#. type: item
#: customize.texi.orig:1092
#, no-wrap
msgid "%t"
msgstr ""

#. type: table
#: customize.texi.orig:1095
msgid "Substitute the tag here.  You specify the tag with the @code{:tag} keyword."
msgstr ""

#. type: item
#: customize.texi.orig:1096
#, no-wrap
msgid "%%"
msgstr ""

#. type: table
#: customize.texi.orig:1098
msgid "Display a literal @samp{%}."
msgstr ""

#. type: item
#: customize.texi.orig:1100
#, no-wrap
msgid ":action @var{action}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1101
#, no-wrap
msgid "action@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1103
msgid "Perform @var{action} if the user clicks on a button."
msgstr ""

#. type: item
#: customize.texi.orig:1104
#, no-wrap
msgid ":button-face @var{face}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1105
#, no-wrap
msgid "button-face@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1108
msgid ""
"Use the face @var{face} (a face name or a list of face names) for button "
"text displayed with @samp{%[@dots{}%]}."
msgstr ""

#. type: item
#: customize.texi.orig:1109
#, no-wrap
msgid ":button-prefix @var{prefix}"
msgstr ""

#. type: itemx
#: customize.texi.orig:1110
#, no-wrap
msgid ":button-suffix @var{suffix}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1111
#, no-wrap
msgid "button-prefix@r{, customization keyword}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1112
#, no-wrap
msgid "button-suffix@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1115
msgid "These specify the text to display before and after a button.  Each can be:"
msgstr ""

#. type: code{#1}
#: customize.texi.orig:1117
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: customize.texi.orig:1119
msgid "No text is inserted."
msgstr ""

#. type: item
#: customize.texi.orig:1120
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: customize.texi.orig:1122
msgid "The string is inserted literally."
msgstr ""

#. type: item
#: customize.texi.orig:1123
#, no-wrap
msgid "a symbol"
msgstr ""

#. type: table
#: customize.texi.orig:1125
msgid "The symbol's value is used."
msgstr ""

#. type: table
#: customize.texi.orig:1130
msgid ""
"Use @var{tag} (a string) as the tag for the value (or part of the value)  "
"that corresponds to this type."
msgstr ""

#. type: item
#: customize.texi.orig:1131
#, no-wrap
msgid ":doc @var{doc}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1132
#, no-wrap
msgid "doc@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1137
msgid ""
"Use @var{doc} as the documentation string for this value (or part of the "
"value) that corresponds to this type.  In order for this to work, you must "
"specify a value for @code{:format}, and use @samp{%d} or @samp{%h} in that "
"value."
msgstr ""

#. type: table
#: customize.texi.orig:1141
msgid ""
"The usual reason to specify a documentation string for a type is to provide "
"more information about the meanings of alternatives inside a @code{:choice} "
"type or the parts of some other composite type."
msgstr ""

#. type: item
#: customize.texi.orig:1142
#, no-wrap
msgid ":help-echo @var{motion-doc}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1143
#, no-wrap
msgid "help-echo@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1150
msgid ""
"When you move to this item with @code{widget-forward} or "
"@code{widget-backward}, it will display the string @var{motion-doc} in the "
"echo area.  In addition, @var{motion-doc} is used as the mouse "
"@code{help-echo} string and may actually be a function or form evaluated to "
"yield a help string.  If it is a function, it is called with one argument, "
"the widget."
msgstr ""

#. type: item
#: customize.texi.orig:1151
#, no-wrap
msgid ":match @var{function}"
msgstr ""

#. type: kindex
#: customize.texi.orig:1152
#, no-wrap
msgid "match@r{, customization keyword}"
msgstr ""

#. type: table
#: customize.texi.orig:1157
msgid ""
"Specify how to decide whether a value matches the type.  The corresponding "
"value, @var{function}, should be a function that accepts two arguments, a "
"widget and a value; it should return non-@code{nil} if the value is "
"acceptable."
msgstr ""

#. type: item
#: customize.texi.orig:1158
#, no-wrap
msgid ":validate @var{function}"
msgstr ""

#. type: table
#: customize.texi.orig:1164
msgid ""
"Specify a validation function for input.  @var{function} takes a widget as "
"an argument, and should return @code{nil} if the widget's current value is "
"valid for the widget.  Otherwise, it should return the widget containing the "
"invalid data, and set that widget's @code{:error} property to a string "
"explaining the error."
msgstr ""

#. type: item
#: customize.texi.orig:1166
#, no-wrap
msgid ":indent @var{columns}"
msgstr ""

#. type: item
#: customize.texi.orig:1172
#, no-wrap
msgid ":offset @var{extra}"
msgstr ""

#. type: item
#: customize.texi.orig:1177
#, no-wrap
msgid ":extra-offset @var{n}"
msgstr ""

#. type: item
#: customize.texi.orig:1181
#, no-wrap
msgid ":notify @var{function}"
msgstr ""

#. type: item
#: customize.texi.orig:1187
#, no-wrap
msgid ":menu-tag @var{tag-string}"
msgstr ""

#. type: item
#: customize.texi.orig:1191
#, no-wrap
msgid ":menu-tag-get"
msgstr ""

#. type: item
#: customize.texi.orig:1197
#, no-wrap
msgid ":tab-order"
msgstr ""

#. type: enumerate
#: customize.texi.orig:1205
#, no-wrap
msgid ""
"Widgets with tabbing order @code{-1} are ignored.\n"
"\n"
msgstr ""

#. type: enumerate
#: customize.texi.orig:1210
#, no-wrap
msgid ""
"(Unimplemented) When on a widget with tabbing order @var{n}, go to the\n"
"next widget in the buffer with tabbing order @var{n+1} or @code{nil},\n"
"whichever comes first.\n"
"\n"
msgstr ""

#. type: enumerate
#: customize.texi.orig:1214
#, no-wrap
msgid ""
"When on a widget with no tabbing order specified, go to the next widget\n"
"in the buffer with a positive tabbing order, or @code{nil}\n"
msgstr ""

#. type: item
#: customize.texi.orig:1216
#, no-wrap
msgid ":parent"
msgstr ""

#. type: item
#: customize.texi.orig:1220
#, no-wrap
msgid ":sibling-args"
msgstr ""

#. type: cindex
#: customize.texi.orig:1230
#, no-wrap
msgid "customization types, define new"
msgstr ""

#. type: cindex
#: customize.texi.orig:1231
#, no-wrap
msgid "define new customization types"
msgstr ""

#. type: Plain text
#: customize.texi.orig:1241
msgid ""
"In the previous sections we have described how to construct elaborate type "
"specifications for @code{defcustom}.  In some cases you may want to give "
"such a type specification a name.  The obvious case is when you are using "
"the same type for many user options: rather than repeat the specification "
"for each option, you can give the type specification a name, and use that "
"name each @code{defcustom}.  The other case is when a user option's value is "
"a recursive data structure.  To make it possible for a datatype to refer to "
"itself, it needs to have a name."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1248
msgid ""
"Since custom types are implemented as widgets, the way to define a new "
"customize type is to define a new widget.  We are not going to describe the "
"widget interface here in details, see @ref{Top, , Introduction, widget, The "
"Emacs Widget Library}, for that.  Instead we are going to demonstrate the "
"minimal functionality needed for defining new customize types by a simple "
"example."
msgstr ""

#. type: example
#: customize.texi.orig:1259
#, no-wrap
msgid ""
"(define-widget 'binary-tree-of-string 'lazy\n"
"  \"A binary tree made of cons-cells and strings.\"\n"
"  :offset 4\n"
"  :tag \"Node\"\n"
"  :type '(choice (string :tag \"Leaf\" :value \"\")\n"
"                 (cons :tag \"Interior\"\n"
"                       :value (\"\" . \"\")\n"
"                       binary-tree-of-string\n"
"                       binary-tree-of-string)))\n"
"\n"
msgstr ""

#. type: example
#: customize.texi.orig:1263
#, no-wrap
msgid ""
"(defcustom foo-bar \"\"\n"
"  \"Sample variable holding a binary tree of strings.\"\n"
"  :type 'binary-tree-of-string)\n"
msgstr ""

#. type: Plain text
#: customize.texi.orig:1276
msgid ""
"The function to define a new widget is called @code{define-widget}.  The "
"first argument is the symbol we want to make a new widget type.  The second "
"argument is a symbol representing an existing widget, the new widget is "
"going to be defined in terms of difference from the existing widget.  For "
"the purpose of defining new customization types, the @code{lazy} widget is "
"perfect, because it accepts a @code{:type} keyword argument with the same "
"syntax as the keyword argument to @code{defcustom} with the same name.  The "
"third argument is a documentation string for the new widget.  You will be "
"able to see that string with the @kbd{M-x widget-browse @key{RET} "
"binary-tree-of-string @key{RET}} command."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1287
msgid ""
"After these mandatory arguments follow the keyword arguments.  The most "
"important is @code{:type}, which describes the data type we want to match "
"with this widget.  Here a @code{binary-tree-of-string} is described as being "
"either a string, or a cons-cell whose car and cdr are themselves both "
"@code{binary-tree-of-string}.  Note the reference to the widget type we are "
"currently in the process of defining.  The @code{:tag} attribute is a string "
"to name the widget in the user interface, and the @code{:offset} argument is "
"there to ensure that child nodes are indented four spaces relative to the "
"parent node, making the tree structure apparent in the customization buffer."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1290
msgid ""
"The @code{defcustom} shows how the new widget can be used as an ordinary "
"customization type."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1298
msgid ""
"The reason for the name @code{lazy} is that the other composite widgets "
"convert their inferior widgets to internal form when the widget is "
"instantiated in a buffer.  This conversion is recursive, so the inferior "
"widgets will convert @emph{their} inferior widgets.  If the data structure "
"is itself recursive, this conversion is an infinite recursion.  The "
"@code{lazy} widget prevents the recursion: it convert its @code{:type} "
"argument only when needed."
msgstr ""

#. type: cindex
#: customize.texi.orig:1301
#, no-wrap
msgid "applying customizations"
msgstr ""

#. type: Plain text
#: customize.texi.orig:1309
msgid ""
"The following functions are responsible for installing the user's "
"customization settings for variables and faces, respectively.  When the user "
"invokes @samp{Save for future sessions} in the Customize interface, that "
"takes effect by writing a @code{custom-set-variables} and/or a "
"@code{custom-set-faces} form into the custom file, to be evaluated the next "
"time Emacs starts."
msgstr ""

#. type: defun
#: customize.texi.orig:1310
#, no-wrap
msgid "custom-set-variables &rest args"
msgstr ""

#. type: defun
#: customize.texi.orig:1313
msgid ""
"This function installs the variable customizations specified by @var{args}.  "
"Each argument in @var{args} should have the form"
msgstr ""

#. type: example
#: customize.texi.orig:1316 customize.texi.orig:1403
#, no-wrap
msgid "(@var{var} @var{expression} [@var{now} [@var{request} [@var{comment}]]])\n"
msgstr ""

#. type: defun
#: customize.texi.orig:1321
msgid ""
"@var{var} is a variable name (a symbol), and @var{expression} is an "
"expression which evaluates to the desired customized value."
msgstr ""

#. type: defun
#: customize.texi.orig:1329
msgid ""
"If the @code{defcustom} form for @var{var} has been evaluated prior to this "
"@code{custom-set-variables} call, @var{expression} is immediately evaluated, "
"and the variable's value is set to the result.  Otherwise, @var{expression} "
"is stored into the variable's @code{saved-value} property, to be evaluated "
"when the relevant @code{defcustom} is called (usually when the library "
"defining that variable is loaded into Emacs)."
msgstr ""

#. type: defun
#: customize.texi.orig:1336
msgid ""
"The @var{now}, @var{request}, and @var{comment} entries are for internal use "
"only, and may be omitted.  @var{now}, if non-@code{nil}, means to set the "
"variable's value now, even if the variable's @code{defcustom} form has not "
"been evaluated.  @var{request} is a list of features to be loaded "
"immediately (@pxref{Named Features}).  @var{comment} is a string describing "
"the customization."
msgstr ""

#. type: defun
#: customize.texi.orig:1338
#, no-wrap
msgid "custom-set-faces &rest args"
msgstr ""

#. type: defun
#: customize.texi.orig:1341
msgid ""
"This function installs the face customizations specified by @var{args}.  "
"Each argument in @var{args} should have the form"
msgstr ""

#. type: example
#: customize.texi.orig:1344 customize.texi.orig:1417
#, no-wrap
msgid "(@var{face} @var{spec} [@var{now} [@var{comment}]])\n"
msgstr ""

#. type: defun
#: customize.texi.orig:1349
msgid ""
"@var{face} is a face name (a symbol), and @var{spec} is the customized face "
"specification for that face (@pxref{Defining Faces})."
msgstr ""

#. type: defun
#: customize.texi.orig:1354
msgid ""
"The @var{now} and @var{comment} entries are for internal use only, and may "
"be omitted.  @var{now}, if non-@code{nil}, means to install the face "
"specification now, even if the @code{defface} form has not been evaluated.  "
"@var{comment} is a string describing the customization."
msgstr ""

#. type: cindex
#: customize.texi.orig:1359
#, no-wrap
msgid "custom themes"
msgstr ""

#. type: Plain text
#: customize.texi.orig:1367
msgid ""
"@dfn{Custom themes} are collections of settings that can be enabled or "
"disabled as a unit.  @xref{Custom Themes,,, emacs, The GNU Emacs Manual}.  "
"Each Custom theme is defined by an Emacs Lisp source file, which should "
"follow the conventions described in this section.  (Instead of writing a "
"Custom theme by hand, you can also create one using a Customize-like "
"interface; @pxref{Creating Custom Themes,,, emacs, The GNU Emacs Manual}.)"
msgstr ""

#. type: Plain text
#: customize.texi.orig:1372
msgid ""
"A Custom theme file should be named @file{@var{foo}-theme.el}, where "
"@var{foo} is the theme name.  The first Lisp form in the file should be a "
"call to @code{deftheme}, and the last form should be a call to "
"@code{provide-theme}."
msgstr ""

#. type: defmac
#: customize.texi.orig:1373
#, no-wrap
msgid "deftheme theme &optional doc"
msgstr ""

#. type: defmac
#: customize.texi.orig:1379
msgid ""
"This macro declares @var{theme} (a symbol) as the name of a Custom theme.  "
"The optional argument @var{doc} should be a string describing the theme; "
"this is the description shown when the user invokes the "
"@code{describe-theme} command or types @kbd{?} in the @samp{*Custom Themes*} "
"buffer."
msgstr ""

#. type: defmac
#: customize.texi.orig:1384
msgid ""
"Two special theme names are disallowed (using them causes an error): "
"@code{user} is a ``dummy'' theme that stores the user's direct customization "
"settings, and @code{changed} is a ``dummy'' theme that stores changes made "
"outside of the Customize system."
msgstr ""

#. type: defmac
#: customize.texi.orig:1386
#, no-wrap
msgid "provide-theme theme"
msgstr ""

#. type: defmac
#: customize.texi.orig:1389
msgid ""
"This macro declares that the theme named @var{theme} has been fully "
"specified."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1395
msgid ""
"In between @code{deftheme} and @code{provide-theme} are Lisp forms "
"specifying the theme settings: usually a call to "
"@code{custom-theme-set-variables} and/or a call to "
"@code{custom-theme-set-faces}."
msgstr ""

#. type: defun
#: customize.texi.orig:1396
#, no-wrap
msgid "custom-theme-set-variables theme &rest args"
msgstr ""

#. type: defun
#: customize.texi.orig:1400
msgid ""
"This function specifies the Custom theme @var{theme}'s variable settings.  "
"@var{theme} should be a symbol.  Each argument in @var{args} should be a "
"list of the form"
msgstr ""

#. type: defun
#: customize.texi.orig:1408
msgid ""
"where the list entries have the same meanings as in "
"@code{custom-set-variables}.  @xref{Applying Customizations}."
msgstr ""

#. type: defun
#: customize.texi.orig:1410
#, no-wrap
msgid "custom-theme-set-faces theme &rest args"
msgstr ""

#. type: defun
#: customize.texi.orig:1414
msgid ""
"This function specifies the Custom theme @var{theme}'s face settings.  "
"@var{theme} should be a symbol.  Each argument in @var{args} should be a "
"list of the form"
msgstr ""

#. type: defun
#: customize.texi.orig:1422
msgid ""
"where the list entries have the same meanings as in "
"@code{custom-set-faces}.  @xref{Applying Customizations}."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1429
msgid ""
"In theory, a theme file can also contain other Lisp forms, which would be "
"evaluated when loading the theme, but that is ``bad form''.  To protect "
"against loading themes containing malicious code, Emacs displays the source "
"file and asks for confirmation from the user before loading any non-built-in "
"theme for the first time."
msgstr ""

#. type: Plain text
#: customize.texi.orig:1432
msgid ""
"The following functions are useful for programmatically enabling and "
"disabling themes:"
msgstr ""

#. type: defun
#: customize.texi.orig:1433
#, no-wrap
msgid "custom-theme-p theme"
msgstr ""

#. type: defun
#: customize.texi.orig:1438
msgid ""
"This function return a non-@code{nil} value if @var{theme} (a symbol)  is "
"the name of a Custom theme (i.e., a Custom theme which has been loaded into "
"Emacs, whether or not the theme is enabled).  Otherwise, it returns "
"@code{nil}."
msgstr ""

#. type: defvar
#: customize.texi.orig:1440
#, no-wrap
msgid "custom-known-themes"
msgstr ""

#. type: defvar
#: customize.texi.orig:1449
msgid ""
"The value of this variable is a list of themes loaded into Emacs.  Each "
"theme is represented by a Lisp symbol (the theme name).  The default value "
"of this variable is a list containing two ``dummy'' themes: @code{(user "
"changed)}.  The @code{changed} theme stores settings made before any Custom "
"themes are applied (e.g., variables set outside of Customize).  The "
"@code{user} theme stores settings the user has customized and saved.  Any "
"additional themes declared with the @code{deftheme} macro are added to the "
"front of this list."
msgstr ""

#. type: deffn
#: customize.texi.orig:1451
#, no-wrap
msgid "Command load-theme theme &optional no-confirm no-enable"
msgstr ""

#. type: deffn
#: customize.texi.orig:1460
msgid ""
"This function loads the Custom theme named @var{theme} from its source file, "
"looking for the source file in the directories specified by the variable "
"@code{custom-theme-load-path}.  @xref{Custom Themes,,, emacs, The GNU Emacs "
"Manual}.  It also @dfn{enables} the theme (unless the optional argument "
"@var{no-enable} is non-@code{nil}), causing its variable and face settings "
"to take effect.  It prompts the user for confirmation before loading the "
"theme, unless the optional argument @var{no-confirm} is non-@code{nil}."
msgstr ""

#. type: deffn
#: customize.texi.orig:1462
#, no-wrap
msgid "Command enable-theme theme"
msgstr ""

#. type: deffn
#: customize.texi.orig:1465
msgid ""
"This function enables the Custom theme named @var{theme}.  It signals an "
"error if no such theme has been loaded."
msgstr ""

#. type: deffn
#: customize.texi.orig:1467
#, no-wrap
msgid "Command disable-theme theme"
msgstr ""

#. type: deffn
#: customize.texi.orig:1471
msgid ""
"This function disables the Custom theme named @var{theme}.  The theme "
"remains loaded, so that a subsequent call to @code{enable-theme} will "
"re-enable it."
msgstr ""
