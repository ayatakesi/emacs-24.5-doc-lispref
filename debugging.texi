@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1994, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Debugging
@chapter Debugging Lisp Programs
@cindex debugging lisp programs

  Emacs Lispプログラム内の問題を見つけて詳細に調べる方法が、いくつかあります。

@itemize @bullet
@item
プログラム実行中に問題が発生した場合は、Lisp評価機能をサスペンドするためにビルトインのEmacs
Lispデバッガを使用して、評価機能の内部状態の調査および/または変更を行なうことができます。

@item
Emacs Lispにたいするソースレベルデバッガの、Edebugを使用できます。

@item
文法的な問題によりLispがプログラムを読むことさえできない場合は、Lisp編集コマンドを使用して該当箇所を見つけることができます。

@item
バイトコンパイラーがプログラムをコンパイルするとき、コンパイラーにより生成されるエラーメッセージと警告メッセージを調べることができます。@ref{Compiler
Errors}を参照してください。

@item
Testcoverパッケージを使用してプログラムのテストカバレッジを行なえます。

@item
ERTパッケージを使用して、プログラムにたいするリグレッションテストを記述できます。@ref{Top,the ERT manual,, ert,
ERT: Emacs Lisp Regression Testing}を参照してください。

@item
プログラムをプロファイルして、プログラムをより効果的にするためのヒントを取得できます。
@end itemize

  入出力の問題をデバックする便利なその他のツールに、ドリブルファイル(dribble file: @ref{Terminal
Input}を参照)と、@code{open-termscript}関数(@ref{Terminal Output})があります。

@menu
* Debugger::                 Emacs 
                               Lisp評価機能にたいするデバッガ。
* Edebug::                   Emacs Lispソースレベルデバッガ。
* Syntax Errors::            シンタックスエラーを見つける方法。
* Test Coverage::            プログラムのすべての分岐を確実にテストする。
* Profiling::                あなたのコードが使用するリソースの計測。
@end menu

@node Debugger
@section The Lisp Debugger
@cindex debugger for Emacs Lisp
@cindex Lisp debugger
@cindex break

  普通の@dfn{Lispデバッガ}は、フォーム評価のサスペンド機能を提供します。評価がサスペンド(一般的には@dfn{break}の状態として知られる)されている間、実行時スタックを調べたり、ローカル変数やグローバル変数の値を調べたり変更することができます。breakは再帰編集(recursive
edit)なので、Emacsの通常の編集機能が利用可能です。デバッガにエンターするようにプログラムを実行することさえ可能です。@ref{Recursive
Editing}を参照してください。

@menu
* Error Debugging::          エラー発生時にデバッガにエンターする。
* Infinite Loops::           exitしないプログラムの停止デバッグ。
* Function Debugging::       特定の関数が呼び出されたときにデバッガにエンターする。
* Explicit Debug::           プログラム内の特定箇所でデバッガにエンターする。
* Using Debugger::           デバッガが行なうこと: 
                               そこで何を目にするか。
* Debugger Commands::        デバッガで使用するコマンド。
* Invoking the Debugger::    関数@code{debug}の呼び出し方。
* Internals of Debugger::    デバッガのサブルーチン、およびグローバル変数。
@end menu

@node Error Debugging
@subsection Entering the Debugger on an Error
@cindex error debugging
@cindex debugging errors

  デバッガに入る一番重要なタイミングは、Lispエラーが発生したときです。デバッガでは、エラーの直接原因を調査できます。

  しかしデバッガへのエンターは、エラーによる通常の結末ではありません。多くのコマンドは不適切に呼び出されたときにLispエラーをシグナルするので、通常の編集の間にこれが発生するたびデバッガにエンターするのは、とても不便でしょう。したがって、エラーの際にデバッガにエンターしたい場合は、変数@code{debug-on-error}に非@code{nil}をセットします。(コマンド@code{toggle-debug-on-error}は、これを簡単に行う方法を提供します。)

@defopt debug-on-error
この変数はエラーがシグナルされ、それがハンドルされていないときに、デバッガが呼び出されるかどうかを決定します。@code{debug-on-error}が@code{t}の場合は、@code{debug-ignored-errors}(以下を参照)にリストされているエラーを除く、すべての種類のエラーがデバッガを呼び出します。@code{nil}の場合は、デバッガを呼び出しません。

値にはエラー条件(@ref{Signaling
Errors}を参照)のリストも指定できます。その場合、このリスト内のエラー条件だけにより、デバッガが呼び出されます(@code{debug-ignored-errors}にもリストされているエラー条件は除外されます)。たとえば、@code{debug-on-error}をリスト@code{(void-variable)}にセットした場合には、値をもたない変数に関するエラーにたいしてだけデバッガが呼び出されます。

@code{eval-expression-debug-on-error}がこの変数をオーバーライドする場合がいくつかあることに注意してください(以下を参照)。

この変数が非@code{nil}のとき、Emacsはプロセスフィルター関数と番兵(sentinel)の周囲にエラーハンドラーを作成しません。したがって、これらの関数内でのエラーは、デバッガを呼び出します。@ref{Processes}を参照してください。
@end defopt

@defopt debug-ignored-errors
この変数は、@code{debug-on-error}の値に関わらず、デバッガにエンターすべきでないエラーを指定します。変数の値はエラー条件のシンボル、および/または正規表現のリストです。エラーがこれら条件シンボルのいずれか、またはエラーメッセージが正規表現のいずれかにマッチする場合、そのエラーはデバッガにエンターしません。

この変数の通常の値には@code{user-error}と、同様に編集中にしばしば発生するがLispプログラムのバグによるものはほとんどない、いくつかのエラーが含まれます。しかし、``ほとんどない''は``絶対ない''ではありません。あなたのプログラムがこのリストにマッチするエラーにより機能しない場合は、そのエラーをデバッグするために、このリストの変更を試みるのもよいでしょう。通常は@code{debug-ignored-errors}を@code{nil}にセットしておくのが、もっとも簡単な方法です。
@end defopt

@defopt eval-expression-debug-on-error
この変数が非@code{nil}値(デフォルト)の場合は、コマンド@code{eval-expression}の実行により、一時的に@code{debug-on-error}が@code{t}がバインドされます。@ref{Lisp
Eval,, Evaluating Emacs-Lisp Expressions, emacs, The GNU Emacs
Manual}を参照してください。

@code{eval-expression-debug-on-error}が@code{nil}の場合は、@code{eval-expression}の間も@code{debug-on-error}の値は変更されません。
@end defopt

@defvar debug-on-signal
@code{condition-case}によりキャッチされたエラーは通常、決してデバッガを呼び出しません。@code{condition-case}は、デバッガがそのエラーをハンドルする前に、エラーをハンドルする機会を得ます。

@code{debug-on-signal}を非@code{nil}値に変更した場合は、@code{condition-case}の存在如何に関わらず、すべてのエラーにおいてデバッガが最初に機会を得ます。(デバッガを呼び出すためには、依然としてそのエラーが@code{debug-on-error}と@code{debug-ignored-errors}で指定された条件を満たさなければなりません。)

@strong{警告:}
この変数を非@code{nil}にセットすると、芳しくない効果があるかもしれません。Emacsのさまざまな部分で処理の通常の過程としてエラーがキャッチされており、そのエラーが発生したことに気づかないことさえあるかもしれません。@code{condition-case}でラップされたコードをデバッグする必要がある場合は、@code{condition-case-unless-debug}(@pxref{Handling
Errors}を参照)の使用を考慮してください。
@end defvar

@defopt debug-on-event
@code{debug-on-event}をスペシャルイベント(@ref{Special
Events}を参照)にセットした場合は、Emacsは@code{special-event-map}をバイパスして、このイベントを受け取ると即座にデバッガへのエンターを試みます。現在のところサポートされる値は、シグナル@code{SIGUSR1}および@code{SIGUSR2}に対応する値だけです(これがデフォルトです)。これは@code{inhibit-quit}がセットされていて、それ以外はEmacsが応答しない場合に有用かもしれません。
@end defopt

@cindex message, finding what causes a particular message
@defvar debug-on-message
@code{debug-on-message}に正規表現をセットした場合には、それにマッチするメッセージがエコーエリアに表示されると、Emacsはデバッガにエンターします。たとえば、これは特定のメッセージの原因を探すのに有用かもしれません。
@end defvar

  initファイルロード中に発生したエラーをデバッグするには、オプション@samp{--debug-init}を使用します。これはinitファイルロードの間に@code{debug-on-error}を@code{t}にバインドして、通常はinitファイル内のエラーをキャッチする@code{condition-case}をバイパスします。

@node Infinite Loops
@subsection Debugging Infinite Loops
@cindex infinite loops
@cindex loops, infinite
@cindex quitting from infinite loop
@cindex stopping an infinite loop

  プログラムが無限にループしてリターンできないとき、最初の問題はそのループをいかに停止するかです。ほとんどのオペレーティングシステムでは、(@dfn{quit}させる)@kbd{C-g}でこれを行うことができます。@ref{Quitting}を参照してください。

  普通のquitでは、なぜそのプログラムがループしたかについての情報は与えられません。変数@code{debug-on-quit}に非@code{nil}をセットすることにより、より多くの情報を得ることができます。無限ループの途中でデバッガを実行すれば、デバッガからステップコマンドで先へ進むことができます。ループ全体をステップで追えば、問題を解決するために十分な情報が得られるでしょう。

  @kbd{C-g}によるquitはエラーとは判断されないので、@kbd{C-g}のハンドルに@code{debug-on-error}は効果がありません。同じように、@code{debug-on-quit}はエラーにたいして効果がありません。

@defopt debug-on-quit
この変数は、@code{quit}がシグナルされ、それがハンドルされていないときに、デバッガを呼び出すかどうかを決定します。@code{debug-on-quit}が非@code{nil}の場合は、quit(つまり@kbd{C-g}をタイプ)したときは常にデバッガが呼び出されます。@code{debug-on-quit}が@code{nil}(デフォルト)の場合は、quitしてもデバッガは呼び出されません。
@end defopt

@node Function Debugging
@subsection Entering the Debugger on a Function Call
@cindex function call debugging
@cindex debugging specific functions

  プログラムの途中で発生する問題を調べるための有用なテクニックの1つは、特定の関数が呼び出されたときデバッガにエンターする方法です。問題が発生した関数にこれを行い、その関数をステップで追ったり、問題箇所の少し手前の関数呼び出しでこれを行い、その関数をステップオーバーしてその後をステップで追うことができます。

@deffn Command debug-on-entry function-name
この関数は、@var{function-name}が呼び出されるたびにデバッガの呼び出しを要求します。

Lispコードで定義された任意の関数およびマクロは、インタープリターに解釈されたコードかコンパイル済みのコードかに関わらず、エントリーにbreakをセットできます。その関数がコマンドの場合は、Lispから呼び出されたときと、インタラクティブに呼び出されたとき、デバッガにエンターします。(たとえばCで記述された)プリミティブ関数にも、この方法で@code{debug-on-entry}をセットできますが、そのプリミティブがLispコードから呼び出されたときだけ効果があります。@code{debug-on-entry}はスペシャルフォームにはセットできません。

@code{debug-on-entry}がインタラクティブに呼び出されたときは、ミニバッファーで@var{function-name}の入力を求めます。その関数がすでにエントリーでデバッガを呼び出すようにセットアップされていた場合、@code{debug-on-entry}は何も行いません。@code{debug-on-entry}は常に@var{function-name}をリターンします。

以下は、この関数の使い方を説明するための例です:

@example
@group
(defun fact (n)
  (if (zerop n) 1
      (* n (fact (1- n)))))
     @result{} fact
@end group
@group
(debug-on-entry 'fact)
     @result{} fact
@end group
@group
(fact 3)
@end group

@group
------ Buffer: *Backtrace* ------
Debugger entered--entering a function:
* fact(3)
  eval((fact 3))
  eval-last-sexp-1(nil)
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
------ Buffer: *Backtrace* ------
@end group

@end example
@end deffn

@deffn Command cancel-debug-on-entry &optional function-name
この関数は@var{function-name}にたいする@code{debug-on-entry}の効果をアンドゥします。インタラクティブに呼び出されたときは、ミニバッファーで@var{function-name}の入力を求めます。@var{function-name}が省略された、あるいは@code{nil}の場合は、すべての関数にたいするbreak-on-entryをキャンセルします。エントリー時にbreakするようセットアップされていない関数に@code{cancel-debug-on-entry}を呼び出したときは、何も行いません。
@end deffn

@node Explicit Debug
@subsection Explicit Entry to the Debugger
@cindex debugger, explicit entry
@cindex force entry to debugger

  プログラム内の特定箇所に式@code{(debug)}を記述することにより、その箇所でデバッガが呼び出されるようにできます。これを行うにはソースファイルをvisitして、適切な箇所にテキスト@samp{(debug)}を挿入し、@kbd{C-M-x}(Lispモードでの@code{eval-defun}にたいするキーバインド)をタイプします。@strong{警告:}
一時的なデバッグ目的のためにこれを行なう場合は、ファイルを保存する前に確実にアンドゥしてください!

  @samp{(debug)}を挿入する箇所は、追加フォームが評価されることができ、その値を無視することができる箇所でなければなりません。(@samp{(debug)}の値が無視されない場合が、プログラムの実行が変更されてしまうでしょう!)
一般的にもっとも適した箇所は、@code{progn}または暗黙的な@code{progn}(@ref{Sequencing}を参照)の内部です。

  デバッグ命令を配したいソースコード中の正確な箇所がわからないが、特定のメッセージが表示されたときにバックトレースを表示したい場合は、意図するメッセージにマッチする正規表現を@code{debug-on-message}にセットできます。

@node Using Debugger
@subsection Using the Debugger

  デバッガにエンターすると、その前に選択されていたウィンドウを1つのウィンドウに表示し、他のウィンドウに@file{*Backtrace*}という名前のバッファーを表示します。backtraceバッファーには、現在実行されているLisp関数の各レベルが1行ずつ含まれます。このバッファーの先頭は、デバッガが呼び出された理由を説明するメッセージ(デバッガがエラーにより呼び出された場合はエラーメッセージや関連するデータなど)です。

@vindex debugger-bury-or-kill
  backtraceバッファーは読み取り専用で、文字キーにデバッガコマンドが定義されたDebuggerモードという特別なメジャーモードを使用します。通常のEmacs編集コマンドが利用できます。したがって、エラー時に編集されていたバッファーを調べるためにウィンドウを切り替えたり、バッファーを切り替えやファイルのvisit、その他一連の編集処理を行なうことができます。しかしデバッガは再帰編集レベル(@ref{Recursive
Editing}を参照)にあり、編集が終わったらそれはbacktraceバッファーに戻って、(@kbd{q}コマンドで)デバッガをexitできます。デバッガをexitすることにより、再帰編集を抜け出し、backtraceバッファーはバリー(bury:
覆い隠す)されます。(変数@code{debugger-bury-or-killw}をセットすることにより、backtraceバッファーで@kbd{q}コマンドが何を行うかをカスタマイズできます。たとえば、バッファーをバリーせずにkillしたい場合は、この変数を@code{kill}にセットします。他の値については、変数のドキュメントを調べてください。)

  デバッガにエンターしたとき、@code{eval-expression-debug-on-error}に一致するように変数@code{debug-on-error}が一時的にセットされます。変数@code{eval-expression-debug-on-error}が非@code{nil}の場合、@code{debug-on-error}は一時的に@code{t}にセットされます。これは、デバッグセッション行っている間にさらにエラーが発生すると、(デフォルトでは)他のbacktraceがトリガーされることを意味します。これが望ましくない場合は、@code{debugger-mode-hook}内で@code{eval-expression-debug-on-error}を@code{nil}にセットするか、@code{debug-on-error}を@code{nil}にセットすることができます。

@cindex current stack frame
  backtraceバッファーは、実行されている関数と、その関数の引数の値を示します。しのフレームを示す行にポイントを移動して、スタックフレームを指定することもできます。(スタックフレームとは、Lispインタープリターがある関数への特定の呼び出しを記録する場所のことです。)
行ポイントがオンのフレームが、@dfn{カレントフレーム(current
frame)}となります。デバッガコマンドのいくつかは、カレントフレームを処理します。ある行がスター(star)で始まる場合は、そのフレームをexitすることにより再びデバッガが呼び出されることを意味します。これは関数のリターン値を調べるとき有用です。

  関数名にアンダーラインが引かれている場合は、デバッガがその関数のソースコードも位置を知っていることを意味します。その名前をマウスでクリックするか、そこに移動して@key{RET}をタイプして、ソースコードをvisitできます。

  デバッガはデバッガ自身のスタックフレーム数を想定するため、バイトコンパイルされて実行されなければなりません。デバッガがインタープリターに解釈されて実行されているとき、これらの想定は正しくなくなります。

@node Debugger Commands
@subsection Debugger Commands
@cindex debugger command list

  (Debuggerモードの)debuggerバッファーでは、通常のEmacsコマンドに加えて、特別なコマンドが提供されます。デバッガでもっとも重要な使い方をするのは、制御フローを見ることができるコードをステップ実行するコマンドです。デバッガはインタープリターにより解釈された制御構造のステップ実行はできますが、バイトコンパイル済みの関数ではできません。バイトコンパイル済み関数をステップ実行したい場合は、同じ関数の解釈された定義に置き換えてください。(これを行なうには、その関数のソースをvisitして、関数の定義で@kbd{C-M-x}とタイプしてください。)
プリミティブ関数のステップ実行にLispデバッガは使用できません。

@c FIXME: Add @findex for the following commands?  --xfq
  以下はDebuggerモードのコマンドのリストです:

@table @kbd
@item c
デバッガをexitして、実行を継続する。これはあたかもデバッガにエンターしなかったかのように(デバッガ内で行った変数値やデータ構造の変更などの副作用は除外される)、プログラムの実行を再開する。

@item d
実行を継続するが、次にLisp関数が何か呼び出されたときはデバッガにエンターする。これにより、ある式の下位の式をステップ実行して、下位の式が計算する値や、行うことを確認できる。

デバッガにエンターした関数呼び出しにたいして、この方法で作成されたスタックフレームには自動的にフラグがつくので、そのフレームをexitすると再びデバッガが呼び出されます。このフラグは、@kbd{u}コマンドを使用してキャンセルできます。

@item b
カレントフレームにフラグをつけるので、そのフレームをexitするときデバッガにエンターする。この方法でフラグがつけられたフレームは、backtraceバッファーでスターのマークがつく。

@item u
カレントフレームをexitしたとき、デバッガにエンターしてはならない。これは、そのフレームの@kbd{b}コマンドをキャンセルする。目に見える効果としては、backtraceバッファーの行からスターが削除される。

@item j
@kbd{b}と同じようにカレントフレームにフラグをつける。その後、@kbd{c}のように実行を継続するが、@code{debug-on-entry}によりセットアップされたすべての関数にたいするbreak-on-entryを一時的に無効にする。

@item e
ミニバッファーのLisp式を読み取り、(関連するlexical環境が適切なら)評価して、エコーエリアに値をプリントする。デバッガは特定の重要な変数とバッファーを処理の一部としてを変更する。@kbd{e}は一時的にデバッガの外部からそれらの値をリストアするので、それらを調べて変更できる。これによりデバッガはより透過的になる。対照的に、デバッガ内で@kbd{M-:}は特別なことを行わず、デバッガ内での変数の値を表示する。

@item R
@kbd{e}と同様だが、バッファー@file{*Debugger-record*}内の評価の結果も保存する。

@item q
デバッグされているプログラムを終了し、Emacsコマンド実行のトップレベルにリターンする。

@kbd{C-g}によりデバッガにエンターしたが、実際はデバッグではなくquitしたいときは、@kbd{q}コマンドを使用する。

@item r
デバッガから値をリターンする。ミニバッファーで式を読み取り、それを評価することにより、値が計算される。

@kbd{d}コマンドは、(@kbd{b}によるリクエスト、または@kbd{d}によるそのフレームへのエンターによる)Lisp呼び出しフレームからのexitでデバッガが呼び出されたときに有用です。@kbd{r}コマンドで指定された値は、そのフレームの値として使用されます。これは、@code{debug}を呼び出して、そのリターン値を使用するときも有用です。それ以外は、@kbd{r}は@kbd{c}と同じ効果をもｙい、指定されたリターン値は問題になりません。

エラーによりデバッガにエンターしたときは、@kbd{r}コマンドは使用できません。

@item l
呼び出されたときにデバッガを呼び出す関数をリストします。これは、@code{debug-on-entry}によりエントリー時にbreakするようセットされた関数のリストです。

@item v
カレントスタックフレームのローカル変数の表示を切り替えます。
@end table

@node Invoking the Debugger
@subsection Invoking the Debugger
@cindex invoking lisp debugger

  以下では、デバッガを呼び出すために使用される関数@code{debug}の完全な詳細を説明します。

@deffn Command debug &rest debugger-args
この関数は、デバッガにエンターします。この関数は@file{*Backtrace*}(デバッガへの2回目以降の再帰エントリーでは@file{*Backtrace*<2>、...})という名前のバッファーにバッファーを切り替えて、Lisp関数呼び出しについての情報を書き込みます。それから再帰編集にエンターして、Debuggerモードでbacktraceバッファーを表示します。

Debuggerモードのコマンド@kbd{c}、@kbd{d}、@kbd{j}、@kbd{r}は再帰編集をexitします。その後、@code{debug}は以前のバッファーに戻って、@code{debug}を呼び出したものが何であれ、そこにリターンします。これは関数@code{debug}が呼び出し元にリターン可能な唯一の方法です。

@var{debugger-args}を使用すると、@code{debug}は@file{*Backtrace*}の最上部に残りの引数を表示するもで、ユーザーがそれらを確認できます。以下で説明する場合を除き、これは、これらの引数を使用する@emph{唯一}の方法です。

しかし@code{debug}への1つ目の引数にたいする値は、特別な意味をもちます。(これらの値は通常、@code{debug}を呼び出すプログラマーではなく、Emacs内部でのみ使用されます。)
以下はこれら特別な値のテーブルです:

@table @code
@item lambda
@cindex @code{lambda} in debug
1つ目の引数ga@code{lambda}の場合、それは@code{debug-on-next-call}が非@code{nil}のときに関数にエントリーしたことにより@code{debug}が呼び出されたことを意味する。デバッガはバッファーのトップのテキスト行に@samp{Debugger
entered--entering a function:}と表示する。

@item debug
1つ目の引数が@code{debug}の場合、それはエントリー時にデバッグされるようにセットされた関数にエントリーしたことにより@code{debug}が呼び出されたことを意味する。デバッガは@code{lambda}のときと同様、@samp{Debugger
entered--entering a
function:}を表示します。これはその関数のスタックフレームもマークするので、exit時にデバッガが呼び出される。

@item t
1つ目の引数が@code{t}の場合、それは@code{debug-on-next-call}が非@code{nil}のときに関数呼び出しの評価により@code{debug}が呼び出されたことを示す。デバッガはバッファーのトップの行に@samp{Debugger
entered--beginning evaluation of function call form:}と表示する。

@item exit
1つ目の引数が@code{exit}のときは、exit時にデバッガを呼び出すよう以前にマークされたスタックフレームをexitしたことを示す。この場合は、@code{debug}に与えられた2つ目の引数が、そのフレームからリターンされた値になる。デバッガはバッファーのトップの行に@samp{Debugger
entered--returning value:}とリターンされた値を表示する。

@item error
@cindex @code{error} in debug
1つ目の引数が@code{error}のときは、ハンドルされていないエラーまたは@code{quit}がシグナルされてデバッガにエンターした場合で、デバッガは@samp{Debugger
entered--Lisp error:}とその後にシグナルされたエラーおよび@code{signal}への引数を表示して、それを示す。たとえば、

@example
@group
(let ((debug-on-error t))
  (/ 1 0))
@end group

@group
------ Buffer: *Backtrace* ------
Debugger entered--Lisp error: (arith-error)
  /(1 0)
...
------ Buffer: *Backtrace* ------
@end group
@end example

エラーがシグナルされた場合はおそらく、変数@code{debug-on-error}は非@code{nil}で、@code{quit}がシグナルされた場合はおそらく、変数@code{debug-on-quit}は非@code{nil}である。

@item nil
明示的にデバッガにエンターしたいときは、@var{debugger-args}の1つ目の引数に@code{nil}を使用する。残りの@var{debugger-args}は、バッファーのトップの行にプリントされる。メッセージ
--- たとえば@code{debug}が呼び出された条件を思い出すためのリマインダー --- の表示にこの機能を使用できる。
@end table
@end deffn

@node Internals of Debugger
@subsection Internals of the Debugger

  このセクションでは、デバッガ内部で使用される関数と変数について説明します。

@defvar debugger
この関数の値は、デバッガを呼び出す関数呼び出しです。値には任意個の引数をとる関数、より具体的には関数の名前でなければなりません。この関数は何らかのデバッガを呼び出すべきです。この変数のデフォルト値は@code{debug}です。

関数にたいしてLispが渡す1つ目の引数は、その関数がなぜ呼び出されたかを示します。引数の慣習は、@code{debug}(@ref{Invoking
the Debugger})に詳解されています。
@end defvar

@deffn Command backtrace
@cindex run time stack
@cindex call stack
この関数は現在アクティブなLisp関数呼び出しのトレースをプリントします。この関数は@code{debug}が@file{*Backtrace*}バッファーに書き込む内容を得るために使用されます。どの関数呼び出しがアクティブか判断するためにスタックにアクセスしなければならないので、この関数はCで記述されています。リターン値は、常に@code{nil}です。

以下の例では、Lisp式で明示的に@code{backtrace}を呼び出しています。これはストリーム@code{standard-output}(この場合はバッファー@samp{backtrace-output})にbacktraceをプリントします。

backtraceの各行は、1つの関数呼び出しを表します。関数の引数が既知の場合は行に値が表示され、まだ計算中の場合は行にその旨が示されます。スペシャルフォームの引数は無視されます。

@smallexample
@group
(with-output-to-temp-buffer "backtrace-output"
  (let ((var 1))
    (save-excursion
      (setq var (eval '(progn
                         (1+ var)
                         (list 'testing (backtrace))))))))

     @result{} (testing nil)
@end group

@group
----------- Buffer: backtrace-output ------------
  backtrace()
  (list ...computing arguments...)
@end group
  (progn ...)
  eval((progn (1+ var) (list (quote testing) (backtrace))))
  (setq ...)
  (save-excursion ...)
  (let ...)
  (with-output-to-temp-buffer ...)
  eval((with-output-to-temp-buffer ...))
  eval-last-sexp-1(nil)
@group
  eval-last-sexp(nil)
  call-interactively(eval-last-sexp)
----------- Buffer: backtrace-output ------------
@end group
@end smallexample
@end deffn

@defvar debug-on-next-call
@cindex @code{eval}, and debugging
@cindex @code{apply}, and debugging
@cindex @code{funcall}, and debugging
この変数が非@code{nil}の場合、それは次の@code{eval}、@code{apply}、@code{funcall}の前にデバッガを呼び出すよう指定します。デバッガへのエンターにより、@code{debug-on-next-call}は@code{nil}にセットされます。

デバッガの@kbd{d}コマンドは、この変数をセットすることにより機能します。
@end defvar

@defun backtrace-debug level flag
この関数は、そのスタックフレームの@var{level}下位のスタックフレームのdebug-on-exitフラグに@var{flag}に応じた値をセットします。@var{flag}が非@code{nil}の場合は、後にそのフレームをexitするときデバッガにエンターします。そのフレームを通じた非ローカルexitでも、デバッガにエンターします。

この関数は、デバッガだけに使用されます。
@end defun

@defvar command-debug-status
この変数はカレントのインタラクティブコマンドのデバッグ状態を記録します。コマンドがインタラクティブに呼び出されるたびに、この変数は@code{nil}にバインドされます。デバッガは、同じコマンドが呼び出されたときのデバッガ呼び出しに情報を残すために、この変数をセットできます。

普通のグローバル変数ではなくこの変数を使用する利点は、そのデータが後続のコマンド呼び出しに決して引き継がれないことです。
@end defvar

@defun backtrace-frame frame-number
関数@code{backtrace-frame}は、Lispデバッガ内での使用を意図しています。これは、@var{frame-number}レベル下位のスタックフレームで、何の評価が行われているかに関する情報をリターンします。

そのフレームがまだ引数を評価していない場合、またはそのフレームがスペシャルフォームの場合、値は@code{(nil @var{function}
@var{arg-forms}@dots{})}です。

そのフレームが引数を評価して関数をすでに呼び出した場合、リターン値は@code{(t @var{function}
@var{arg-values}@dots{})}です。

リターン値の@var{function}は何であれ評価されたリストの@sc{car}として提供されます。マクロ呼び出しの場合は@code{lambda}式になります。その関数に@code{&rest}引数がある場合は、リスト@var{arg-values}の末尾に表されます。

@var{frame-number}が範囲外の場合、@code{backtrace-frame}は@code{nil}をリターンします。
@end defun

@include edebug.texi

@node Syntax Errors
@section Debugging Invalid Lisp Syntax
@cindex debugging invalid Lisp syntax

  Lispリーダーは無効な構文(invalid
syntax)について報告はしますが、実際の問題箇所は報告しません。たとえば、ある式を評価中のエラー``End of file during
parsing(パース中にファイル終端に達した)''は、開カッコまたは開角カッコ(open parenthese or open square
bracket)が多いことを示しています。Lispリーダーはこの不一致をファイル終端で検出しましたが、本来閉カッコがあるべき箇所を解決することはできません。同様に、``Invalid
read syntax:
")"(無効なread構文:)")"''は開カッコの欠落を示していますが、欠落しているカッコが属すべき場所は告げません。ならば、どうやって変更すべき箇所を探せばよいのでしょうか?

  問題が単なるカッコの不一致でない場合の便利なテクニックは、各defunの先頭で@kbd{C-M-e}とタイプして、そのdefunの最後と思われる箇所に移動するか確認する方法です。もし移動しなければ、問題はそのdefunの内部にあります。

@cindex unbalanced parentheses
@cindex parenthesis mismatch, debugging
  マッチしないカッコがLispにおいてもっとも一般的な構文エラーなので、これらのケースにたいしてさらにアドバイスすることができます。(Show
Parenモードを有効にしてコードにポイントを移動するだけで、カッコの不一致を探しやすくなるでしょう。)

@menu
* Excess Open::              誤った開カッコと閉カッコを探す方法。
* Excess Close::             誤った閉カッコと開カッコを探す方法。
@end menu

@node Excess Open
@subsection Excess Open Parentheses
@cindex excess open parentheses

  カッコがマッチしないdefunを探すのが、最初のステップです。過剰な開カッコが存在する場合は、ファイルの終端に移動して@kbd{C-u
C-M-u}とタイプします。これにより、カッコがマッチしない最初のdefunの先頭に移動するでしょう。

  何が間違っているのか正確に判断するのが次のステップです。これを確実に行なうには、そのプログラムを詳しく調べる以外に方法はありませんが、カッコがあるべき箇所を探すのに、既存のインデントが手掛かりになることが多々あります。@kbd{C-M-q}で再インデントして何が移動されるか確認するのが、この手掛かりを使用するもっとも簡単な方法です。@strong{しかし、行うのはちょっと待ってください!}
まず続きを読んでからにしましょう。

  これを行なう前に、defunに十分な閉カッコがあるか確認します。十分な閉カッコがない場合、@kbd{C-M-q}がエラーとなるか、そのdefunからファイル終端までの残りすべてが再インデントされます。その場合はdefunの最後に移動して、そこに閉カッコを挿入します。そのdefunのカッコの釣り合いがとれるまでは、defunの最後に移動するのに@kbd{C-M-e}は使用できません(失敗するでしょう)。

  これでdefunの先頭に移動して@kbd{C-M-q}とタイプすることができます。通常は、一定のポイントからその関数の最後までのすべての行が、右へとシフトされるでしょう。これはおそらくそのポイント付近で閉カッコが欠落しているか、不要な開カッコがあります。(しかし、これを真実と仮定せず、コードを詳しく調べてください。)
不一致箇所が見つけたら、元のインデントはおそらく意図されたカッコに適しているはずなので、@kbd{C-_}で@kbd{C-M-q}をアンドゥしてください。

  問題をfixできたと思った後に、再度@kbd{C-M-q}を使用します。実際に元のインデントが意図したカッコのネストに適合していて、足りないカッコを追加していたら、@kbd{C-M-q}は何も変更しないはずです。

@node Excess Close
@subsection Excess Close Parentheses
@cindex excess close parentheses

  To deal with an excess close parenthesis, first go to the beginning of the
file, then type @kbd{C-u -1 C-M-u} to find the end of the first unbalanced
defun.

  Then find the actual matching close parenthesis by typing @kbd{C-M-f} at the
beginning of that defun.  This will leave you somewhere short of the place
where the defun ought to end.  It is possible that you will find a spurious
close parenthesis in that vicinity.

  If you don't see a problem at that point, the next thing to do is to type
@kbd{C-M-q} at the beginning of the defun.  A range of lines will probably
shift left; if so, the missing open parenthesis or spurious close
parenthesis is probably near the first of those lines.  (However, don't
assume this is true; study the code to make sure.)  Once you have found the
discrepancy, undo the @kbd{C-M-q} with @kbd{C-_}, since the old indentation
is probably appropriate to the intended parentheses.

  After you think you have fixed the problem, use @kbd{C-M-q} again.  If the
old indentation actually fits the intended nesting of parentheses, and you
have put back those parentheses, @kbd{C-M-q} should not change anything.

@node Test Coverage
@section Test Coverage
@cindex coverage testing

@findex testcover-start
@findex testcover-mark-all
@findex testcover-next-mark
  You can do coverage testing for a file of Lisp code by loading the
@code{testcover} library and using the command @kbd{M-x testcover-start
@key{RET} @var{file} @key{RET}} to instrument the code.  Then test your code
by calling it one or more times.  Then use the command @kbd{M-x
testcover-mark-all} to display colored highlights on the code to show where
coverage is insufficient.  The command @kbd{M-x testcover-next-mark} will
move point forward to the next highlighted spot.

  Normally, a red highlight indicates the form was never completely evaluated;
a brown highlight means it always evaluated to the same value (meaning there
has been little testing of what is done with the result).  However, the red
highlight is skipped for forms that can't possibly complete their
evaluation, such as @code{error}.  The brown highlight is skipped for forms
that are expected to always evaluate to the same value, such as @code{(setq
x 14)}.

  For difficult cases, you can add do-nothing macros to your code to give
advice to the test coverage tool.

@defmac 1value form
Evaluate @var{form} and return its value, but inform coverage testing that
@var{form}'s value should always be the same.
@end defmac

@defmac noreturn form
Evaluate @var{form}, informing coverage testing that @var{form} should never
return.  If it ever does return, you get a run-time error.
@end defmac

  Edebug also has a coverage testing feature (@pxref{Coverage Testing}).
These features partly duplicate each other, and it would be cleaner to
combine them.


@node Profiling
@section Profiling
@cindex profiling
@cindex measuring resource usage
@cindex memory usage

If your program is working correctly, but you want to make it run more
quickly or efficiently, the first thing to do is @dfn{profile} your code so
that you know how it is using resources.  If you find that one particular
function is responsible for a significant portion of the runtime, you can
start looking for ways to optimize that piece.

Emacs has built-in support for this.  To begin profiling, type @kbd{M-x
profiler-start}.  You can choose to profile by processor usage, memory
usage, or both.  After doing some work, type @kbd{M-x profiler-report} to
display a summary buffer for each resource that you chose to profile.  The
names of the report buffers include the times at which the reports were
generated, so you can generate another report later on without erasing
previous results.  When you have finished profiling, type @kbd{M-x
profiler-stop} (there is a small overhead associated with profiling).

The profiler report buffer shows, on each line, a function that was called,
followed by how much resource (processor or memory) it used in absolute and
percentage times since profiling started.  If a given line has a @samp{+}
symbol at the left-hand side, you can expand that line by typing @key{RET},
in order to see the function(s) called by the higher-level function.
Pressing @key{RET} again will collapse back to the original state.

Press @kbd{j} or @kbd{mouse-2} to jump to the definition of a function.
Press @kbd{d} to view a function's documentation.  You can save a profile to
a file using @kbd{C-x C-w}.  You can compare two profiles using @kbd{=}.

@c FIXME reversed calltree?

@cindex @file{elp.el}
@cindex timing programs
The @file{elp} library offers an alternative approach.  See the file
@file{elp.el} for instructions.

@cindex @file{benchmark.el}
@cindex benchmarking
You can check the speed of individual Emacs Lisp forms using the
@file{benchmark} library.  See the functions @code{benchmark-run} and
@code{benchmark-run-compiled} in @file{benchmark.el}.

@c Not worth putting in the printed manual.
@ifnottex
@cindex --enable-profiling option of configure
To profile Emacs at the level of its C code, you can build it using the
@option{--enable-profiling} option of @command{configure}.  When Emacs
exits, it generates a file @file{gmon.out} that you can examine using the
@command{gprof} utility.  This feature is mainly useful for debugging
Emacs.  It actually stops the Lisp-level @kbd{M-x profiler-@dots{}} commands
described above from working.
@end ifnottex
