@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Display
@chapter Emacs Display

  このチャプターでは、Emacsによるユーザーへのプレゼンテーションである、表示に関連する機能のいくつかを説明します。

@menu
* Refresh Screen::           スクリーン上にあるすべてのもののクリアーと再描画。
* Forcing Redisplay::        再描画の強制。
* Truncation::               長いテキストの折り畳みと折り返し。
* The Echo Area::            スクリーン最下部へのメッセージ表示。
* Warnings::                 ユーザーへの警告メッセージの表示。
* Invisible Text::           バッファーのテキストの一部を隠す。
* Selective Display::        バッファーのテキストの一部を隠す(旧来の方式)。
* Temporary Displays::       自動的に消える表示。
* Overlays::                 オーバーレイを使用したバッファーの一部のハイライト。
* Size of Displayed Text::   表示されたテキストの大きさ。
* Line Height::              行の高さの制御。
* Faces::                    テキスト文字のグラフィカルスタイル(フォント、カラー等)を定義するフェイス。
* Fringes::                  ウィンドウフリンジの制御。
* Scroll Bars::              垂直スクロールバーの制御。
* Window Dividers::          ウィンドウを視覚的に区別する。
* Display Property::         特別な表示機能の有効化。
* Images::                   Emacsバッファー内でのイメージ表示。
* Buttons::                  Emacsバッファー内へのイメージ表示クリック可能ボタン追加。
* Abstract Display::         オブジェクトコレクション用のEmacsウィジェット。
* Blinking::                 Emacsがマッチする開カッコを表示する方法。
* Character Display::        Emacsがマッチする個々の文字を表示する方法。
* Beeping::                  ユーザーへの可聴シグナル。
* Window Systems::           どのウィンドウシステムが使用されているか。
* Bidirectional Display::    アラビア語やペルシア語のような、双方向スクリプトの表示。
@end menu

@node Refresh Screen
@section Refreshing the Screen
@cindex refresh the screen
@cindex screen refresh

  関数@code{redraw-frame}は、与えられたフレーム(@ref{Frames}を参照)のコンテンツ全体にたいして、クリアーおよび再描画を行います。これはスクリーンが壊れている(corrupted)場合に有用です。

@defun redraw-frame frame
この関数は、フレーム@var{frame}のクリアーと再描画を行う。
@end defun

  更に強力なのが@code{redraw-display}です:

@deffn Command redraw-display
この関数は、すべての可視なフレームのクリアーと再描画を行う。
@end deffn

  Emacsでは、ユーザー入力は再描画より優先されます。入力が可能なときにこれらの関数を呼び出すと、これらはすぐに再描画はしませんが、要求された再描画はやがて、すべての入力処理後に行われます。

  テキスト端末では、Emacsのサスペントと再開により、通常はスクリーンのリフレッシュも行われます。Emacsのようなディスプレイ指向のプログラムと、通常のシーケンシャル表示のプログラムで、コンテンツを区別して記録する端末エミュレーターがいくつかあります。そのような端末を使用する場合は、おそらく再開時の再表示を抑制したいでしょう。

@defopt no-redraw-on-reenter
@cindex suspend (cf. @code{no-redraw-on-reenter})
@cindex resume (cf. @code{no-redraw-on-reenter})
この変数は、Emacsがサスペンドおよび再開された後に、スクリーン全体を再描画するかどうかを制御する。非@code{nil}なら再描画は不要、@code{nil}なら再描画が必要であることを意味する。デフォルトは@code{nil}。
@end defopt

@node Forcing Redisplay
@section Forcing Redisplay
@cindex forcing redisplay

  Emacsは入力の待機時は常に、再表示を試みます。以下の関数により、実際に入力を待機することなく、Lispコードの中から、即座に再表示を試みることを要求できます。

@defun redisplay &optional force
この関数は、即座に再表示を試みる。オプション引数@var{force}が非@code{nil}なら、入力が保留中に横取りされるかわりに、強制的に再表示が行われる。

この関数は実際に再表示が試行されたなら@code{t}、それ以外は@code{nil}をリターンする。@code{t}という値は、再表示の試行が完了したことを意味しない。新たに到着した入力に横取りされた可能性がある。
@end defun

@defvar pre-redisplay-function
再表示の直前に実行される関数。これは、再表示されるウィンドウセットを単一の引数として呼び出される。
@end defvar

  @code{redisplay}が即座に再表示を試みたとしても、Emacsがフレーム(複数可)のどの部分を再表示するか決定する方法を変更するわけではありません。それとは対照的に、以下の関数は特定のウィンドウを(あたかもコンテンツが完全に変更されたかのように)、保留中の再表示処理に追加します。しかし再描画を即座には試みません。

@defun force-window-update &optional object
この関数は、Emacsが次に再表示を行う際にいくつか、あるいはすべてのウィンドウが更新されるよう強制する。@var{object}がウィンドウならそのウィンドウ、バッファーまたはバッファー名ならそのバッファーを表示するすべてのウィンドウ、@code{nil}(または省略)の場合はすべてのウィンドウが更新される。

この関数は、即座に再表示を行わない。再表示はEmacsが入力を待機時、または関数@code{redisplay}呼び出し時に行われる。
@end defun

@node Truncation
@section Truncation
@cindex line wrapping
@cindex line truncation
@cindex continuation lines
@cindex @samp{$} in display
@cindex @samp{\} in display

  テキスト行がウィンドウ右端を超過する際、Emacsはその行を@dfn{継続(continue)}させる(次のスクリーン行へ``wrap''、すなわち折り返す)か、あるいはその行を@dfn{切り詰める(truncate)}て表示(その行をスクリーン行の1行に制限)することができます。長いテキスト行を表示するために使用される追加のスクリーン行は、@dfn{継続(continuation)}行と呼ばれます。継続はフィルとは異なります。継続はバッファーのコンテンツ内ではなくスクリーン上でのみ発生し、単語境界ではなく正確に右マージンで行をブレークします。@ref{Filling}を参照してください。

   グラフィカルなディスプレイでは、切り詰めと継続はウィンドウフリンジ内の小さな矢印イメージで示されます(@ref{Fringes}を参照)。テキスト端末では、切り詰めはそのウィンドウの最右列の@samp{$}、``折り返し''は最右列の@samp{\}で示されます(ディスプレイテーブルにより、これを行うための代替え文字を指定できる。@ref{Display
Tables}を参照されたい)。

@defopt truncate-lines
このバッファーローカル変数が非@code{nil}なら、ウィンドウ右端を超過する行は切り詰められ、それ以外なら継続される。特別な例外として、@dfn{部分幅(partial-width)}ウィンドウ(フレーム全体の幅を占有しないウィンドウ)では、変数@code{truncate-partial-width-windows}が優先される。
@end defopt

@defopt truncate-partial-width-windows
@cindex partial-width windows
この変数は、@dfn{部分幅(partial-width)}ウィンドウ内の、行の切り詰めを制御する。部分幅ウィンドウとは、フレーム全体の幅を占有しないウィンドウである(@ref{Splitting
Windows}を参照)。値が@code{nil}なら、行の切り詰めは変数@code{truncate-lines}(上記参照)により決定される。値が整数@var{n}の場合は、部分幅ウィンドウの列数が@var{n}より小さければ、@code{truncate-lines}の値とは無関係に行は切り詰められ、部分幅ウィンドウの列数が@var{n}以上なら、行の切り詰めは@code{truncate-lines}により決定される。それ以外の非@code{nil}値では、@code{truncate-lines}の値とは無関係にすべての部分幅ウィンドウで行は切り詰められる。
@end defopt

  ウィンドウ内で水平スクロール(@ref{Horizontal Scrolling}を参照)を使用中は、切り詰めが強制されます。

@defvar wrap-prefix
このバッファーローカル変数が非@code{nil}なら、それはEmacsが各継続行の先頭に表示する、@dfn{折り返しプレフィックス(wrap
prefix)}を定義する(行を切り詰めている場合、@code{wrap-prefix}は使用されない)。この値は文字列、イメージ(@ref{Other
Display
Specs}を参照)、またはディスプレイプロパティ@code{:width}や@code{:align-to}で指定されるような、伸長された空白文字を指定できる(@ref{Specified
Space}を参照)。値はテキストプロパティ@code{display}と同じ方法で解釈される。@ref{Display
Property}を参照のこと。

折り返しプレフィックスは、テキストプロパティまたはオーバーレイプロパティ@code{wrap-prefix}を使用することにより、テキストのリージョンにたいして指定することもできる。これは@code{wrap-prefix}変数より優先される。@ref{Special
Properties}を参照のこと。
@end defvar

@defvar line-prefix
このバッファーローカル変数が非@code{nil}なら、それはEmacsがすべての非継続行の先頭に表示する、@dfn{行プレフィックス(line
prefix)}を定義する。この値は文字列、イメージ(@ref{Other Display
Specs}を参照)、またはディスプレイプロパティ@code{:width}や@code{:align-to}で指定されるような、伸長された空白文字を指定できる(@ref{Specified
Space}を参照)。値はテキストプロパティ@code{display}と同じ方法で解釈される。@ref{Display
Property}を参照のこと。

行プレフィックスは、テキストプロパティまたはオーバーレイプロパティ@code{line-prefix}を使用することにより、テキストのリージョンにたいして指定することもできる。これは@code{line-prefix}変数より優先される。@ref{Special
Properties}を参照のこと。
@end defvar

@ignore
  If your buffer contains only very short lines, you might find it
advisable to set @code{cache-long-scans} to @code{nil}.

@defvar cache-long-scans
If this variable is non-@code{nil} (the default), various indentation
and motion functions, and Emacs redisplay, cache the results of
scanning the buffer, and consult the cache to avoid rescanning regions
of the buffer unless they are modified.

Turning off the cache speeds up processing of short lines somewhat.

This variable is automatically buffer-local in every buffer.
@end defvar
@end ignore

@node The Echo Area
@section The Echo Area
@cindex error display
@cindex echo area

@c FIXME: Why not use @xref{Minibuffers} directly?  --xfq
  @dfn{エコーエリア(echo
area)}はエラーメッセージ(@ref{Errors})や、@code{message}プリミティブで作成されたメッセージの表示、およびキーストロークをエコーするために使用されます。(アクティブ時には)ミニバッファーがスクリーン上のエコーエリアと同じ場所に表示されるという事実にも関わらず、エコーエリアはミニバッファーと同じではありません。@ref{Minibuffer,,
The Minibuffer, emacs, The GNU Emacs Manual}を参照してください。

  このセクションに記述された関数とは別に、出力ストリームとして@code{t}を指定することにより、エコーエリアにLispオブジェクトをプリントできます。@ref{Output
Streams}を参照してください。

@menu
* Displaying Messages::      エコーエリア内に明示的にテキストを表示する。
* Progress::                 長時間の処理の進行状況をユーザーに知らせる。
* Logging Messages::         ユーザー用にログされるエコーエリアメッセージ。
* Echo Area Customization::  エコーエリアの制御。
@end menu

@node Displaying Messages
@subsection Displaying Messages in the Echo Area
@cindex display message in echo area

  このセクションでは、エコーエリア内にメッセージを表示する、標準的な関数を説明します。

@defun message format-string &rest arguments
この関数は、エコーエリア内にメッセージを表示する。@code{format}関数(@ref{Formatting
Strings}を参照)の場合と同様、@var{format-string}はフォーマット文字列、@var{arguments}はそのフォーマット仕様にたいするオブジェクトである。フォーマットされた結果文字列は、エコーエリア内に表示される。それに@code{face}テキストプロパティが含まれる場合、指定されたフェイスにより表示される(@ref{Faces}を参照)。この文字列は@file{*Messages*}バッファーにも追加されるが、テキストプロパティは含まれない(@ref{Logging
Messages}を参照)。

バッチモードでは、後に改行が付加されたメッセージが、標準エラーストリームにプリントされる。

@var{format-string}が@code{nil}か空文字列なら、@code{message}はエコーエリアをクリアーする。エコーエリアが自動的に拡張されていたら、これにより通常のサイズに復元される。ミニバッファーがアクティブなら、これによりスクリーン上に即座にミニバッファーのコンテンツが復元される。

@example
@group
(message "Minibuffer depth is %d."
         (minibuffer-depth))
 @print{} Minibuffer depth is 0.
@result{} "Minibuffer depth is 0."
@end group

@group
---------- Echo Area ----------
Minibuffer depth is 0.
---------- Echo Area ----------
@end group
@end example

エコーエリアやポップバッファー内に、自動的にメッセージを表示するには、そのサイズに応じて@code{display-message-or-buffer}(以下参照)を使用する。
@end defun

@defmac with-temp-message message &rest body
この構成は@var{body}実行の間、エコーエリア内にメッセージを一時的に表示する。これは@var{message}を表示して@var{body}を実行し、それからエコーエリアの前のコンテンツをリストアするとともに、bodyの最後のフォームの値をリターンする。
@end defmac

@defun message-or-box format-string &rest arguments
この関数は@code{message}と同様にメッセージを表示するが、エコーエリアではなくダイアログボックスにメッセージを表示するかもしれない。この関数があるコマンド内からマウスを使用して呼び出された場合
--- より正確には@code{last-nonmenu-event}(@ref{Command Loop
Info}を参照)が@code{nil}かリストなら、そのメッセージの表示にダイアログボックスまたはポップアップメニューを使用する。それ以外の場合は、エコーエリアを使用する(これは@code{y-or-n-p}が同様の決定を行う際に使用する条件と同じである。@ref{Yes-or-No
Queries}を参照されたい)。

呼び出しの前後で@code{last-nonmenu-event}を適切な値にバインドすることにより、エコーエリアでのマウスの使用を強制できる。
@end defun

@defun message-box format-string &rest arguments
@anchor{message-box}
この関数は@code{message}と同様にメッセージを表示するが、利用可能なら常にダイアログボックス(かポップアップメニュー)を使用する。端末がサポートしないために、ダイアログボックスまたはポップアップメニューが使用できなければ、@code{message-box}は@code{message}と同様にエコーエリアを使用する。
@end defun

@defun display-message-or-buffer message &optional buffer-name not-this-window frame
この関数はメッセージ@var{message}を表示する。@var{message}は文字列かバッファーを指定できる。これが@code{max-mini-window-height}で定義されるエコーエリアの最大高さより小さければ、@code{message}を使用してエコーエリアに表示される。それ以外なら、メッセージを表示するために@code{display-buffer}はポップアップバッファーを使用する。

エコーエリアに表示したメッセージ、またはポップアップバッファー使用時はその表示に使用したウィンドウをリターンする。

@var{message}が文字列なら、オプション引数@var{buffer-name}はポップアップバッファー使用時にメッセージ表示に使用するバッファー名(デフォルトは@file{*Message*})である。@var{message}が文字列でエコーエリアに表示されてる場合は、いずれにせよコンテンツをバッファーに挿入するかどうかは指定されない。

オプション引数@var{not-this-window}と@var{frame}は、@code{display-buffer}の場合と同様に、バッファーが表示されている場合のみ使用される。
@end defun

@defun current-message
この関数は、エコーエリア内にカレントで表示されているメッセージ、またはそれが存在しなければ@code{nil}をリターンする。
@end defun

@node Progress
@subsection Reporting Operation Progress
@cindex progress reporting

  処理の完了まで暫く時間を要するかもしれない際は、その進行状況についてユーザーに通知するべきです。これによりユーザーが残り時間を予測するとともに、Emacsがhungしているのではなく、処理中であえうことが明確に確認できます。@dfn{プログレスリポーター(progress
reporter: 進行状況リポーター)}を使用するのが、これを行う便利な方法です。

  以下は、何も有用なことを行わない、実行可能な例です:

@smallexample
(let ((progress-reporter
       (make-progress-reporter "Collecting mana for Emacs..."
                               0  500)))
  (dotimes (k 500)
    (sit-for 0.01)
    (progress-reporter-update progress-reporter k))
  (progress-reporter-done progress-reporter))
@end smallexample

@defun make-progress-reporter message &optional min-value max-value current-value min-change min-time
この関数は、以下に挙げる他の関数として使用されるであろう、プログレスリポーターオブジェクトを作成して、リターンする。これはプログレスリポーターを高速にするように、可能なかぎり多くのデータを事前に計算するというアイデアが元である。

この後にこのプログレスリポーターを使用する際は、進行状況のパーセンテージを後に付加して@var{message}が表示されるだろう。@var{message}は、単なる文字列として扱われる。たとえばファイル名に依存させる必要があるなら、この関数の呼び出し前に、@code{format}を使えばよい。

引数@var{min-value}と@var{max-value}は、その処理の開始と終了を意味する数値であること。たとえばバッファーを``スキャン''する処理なら、これらをそれぞれ@code{point-min}と@code{point-max}にセットするべきだろう。@var{max-value}は@var{min-value}より大であること。

かわりに、@var{min-value}と@var{max-value}を@code{nil}にセットすることができる。この場合、プログレスリポーターは進行状況のパーセンテージを報告しない。かわりにプログレスリポーターを更新するたびに刻み(notch)を回転する``スピナー(spinner)''を表示する。

@var{min-value}と@var{max-value}が数値なら、進行状況の初期の数値を与える引数@var{current-value}を与えることができる。省略時のデフォルトは@var{min-value}。

残りの引数は、エコーエリアの更新レートを制御する。プログレスリポーターは次のメッセージを表示する前に、その処理が少なくとも@var{min-change}パーセントより多く完了するまで待機する。デフォルトは1パーセント。@var{min-time}は連続するプリントの間に空ける最小時間をミリ秒単位で指定する(いくつかのオペレーティングシステムでは、プログレスリポーターは秒の少数部をさまざまな制度で処理するかもしれない)。

この関数は@code{progress-reporter-update}を呼び出すた、最初のメッセージは即座にプリントされる。
@end defun

@defun progress-reporter-update reporter &optional value
この関数は、操作の進行状況報告に関する、主要な機能を担う。これは@var{reporter}のメッセージと、その後に@var{value}により決定された進行状況のパーセンテージを表示する。パーセンテージが0、または引数@var{min-change}と@var{min-time}に比べて十分0に近ければ、出力は省略される。

@var{reporter}は、@code{make-progress-reporter}呼び出しがリターンした結果でなければならない。@var{value}は処理のカレント状況を指定し、@code{make-progress-reporter}に渡された@var{min-value}と@var{max-value}の間(両端を含む)でなければならない。たとえばバッファーのスキャンにおいては、@var{value}は@code{point}び呼び出し結果であるべきだろう。

この関数は@code{make-progress-reporter}に渡された@var{min-change}と@var{min-time}にしたがい、毎回の呼び出しで新たなメッセージを出力しない。したがってこれは非常に高速であり、通常はこれを呼び出す回数を減らすことを試みるべきではない。結果として生じるオーバーヘッドは、あなたの努力をほぼ否定するだろう。
@end defun

@defun progress-reporter-force-update reporter &optional value new-message
この関数は@code{progress-reporter-update}と同様だが、これは無条件にメッセージをエコーエリアにプリントする点が異なる。

最初の2つの引数は、@code{progress-reporter-update}の場合と同じ意味をもつ。オプションの@var{new-message}で、@var{reporter}のメッセージを変更できる。この関数は常にエコーエリアを更新するので、そのような変更は即座にユーザーに示されるだろう。
@end defun

@defun progress-reporter-done reporter
この関数は、処理の完了時に呼び出されるべきである。これはエコーエリア内に、単語``done''が付加された@var{reporter}のメッセージを表示する。

あなたは@code{progress-reporter-update}に``100%''とプリントさせようとせず、常にこの関数を呼び出すべきである。まず、この関数は決してそれをプリントしないだろうし、これが発生しないために多くの正当な理由がある。次に``done''はより自明である。
@end defun

@defmac dotimes-with-progress-reporter (var count [result]) message body@dots{}
これは@code{dotimes}と同じ方法で機能するが、上述の関数を使用してループ進行状況(loop
progress)の報告も行う、便利なマクロである。これにより、タイプ量を幾分節約できる。

以下の方法でこのマクロを使用することにより、このセクション冒頭の例を書き換えることができる:

@example
(dotimes-with-progress-reporter
    (k 500)
    "Collecting some mana for Emacs..."
  (sit-for 0.01))
@end example
@end defmac

@node Logging Messages
@subsection Logging Messages in @file{*Messages*}
@cindex logging echo-area messages

  エコーエリア内に表示されるほとんどすべてのメッセージは、ユーザーが後で参照できるように、@file{*Messages*}バッファー内にも記録されます。これには@code{message}により出力されたメッセージも含まれます。デフォルトではこのバッファーは読み取り専用で、メジャーモード@code{messages-buffer-mode}を使用します。ユーザーによる@file{*Messages*}バッファーのkillを妨げるものは何もありませんが、次回のメッセージ表示でバッファーは再作成されます。@file{*Messages*}バッファーに直接アクセスする必要があり、それが確実に存在するようにしたいLispコードはすべて、関数@code{messages-buffer}を使用するべきです。

@defun messages-buffer
この関数は、@file{*Messages*}バッファーをリターンする。バッファーが存在しなければ作成して、そのバッファーを@code{messages-buffer-mode}に切り替える。
@end defun

@defopt message-log-max
この変数は、@file{*Messages*}バッファー内に保持するべき行数を指定する。値@code{t}は保持すべき行数に制限がないことを意味し、値@code{nil}はメッセージのロギングを完全に無効にする。以下は、メッセージを表示して、それがロギングされることを防ぐ例である:

@example
(let (message-log-max)
  (message @dots{}))
@end example
@end defopt

  @file{*Messages*}にたいするユーザーの利便性を向上させるために、ロギング機能は連続する同じメッセージを結合します。さらに、2つのケースのために連続する関連メッセージの結合も行います。2つのケースとは、応答を後にともなう質問(question
followed by answer)と、一連のプログレスメッセージ(series of progress messages)です。

  ``応答を後にともなう質問(question followed by an
answer)''とは、@code{y-or-n-p}により生成されるような、これは1つ目が@samp{@var{question}}、2つ目が@samp{@var{question}...@var{answer}}のような、2つのメッセージです。1つ目のメッセージには、2つ目のメッセージ以上の追加の情報は伝えないので、2つ目のメッセージをロギングして、1つ目のメッセージは破棄します。

  ``一連のプログレスメッセージ(series of progress
messages)''とは、@code{make-progress-reporter}が生成するような、連続するメッセージを意味します。これらは@samp{@var{base}...@var{how-far}}のような形式をもち、@var{how-far}は毎回異なりますが、@var{base}は常に同じです。このシリーズ内の各メッセージのロギングでは、そのメッセージが前のメッセージと連続していれば、前のメッセージを破棄します。

  関数@code{make-progress-reporter}および@code{y-or-n-p}は、メッセージログ結合機能をアクティブにするために、何ら特別なことを行う必要はありません。これは@samp{...}で終わる共通のプレフィックスを共有する、連続する2つのメッセージをログする際は、常にこの処理を行います。

@node Echo Area Customization
@subsection Echo Area Customization
@cindex echo area customization

  以下の変数は、エコーエリアが機能する方法の詳細を制御します。

@defvar cursor-in-echo-area
この変数は、エコーエリア内にメッセージ表示時に、カーソルを表示する場所を制御する。これが非@code{nil}なら、カーソルはメッセージの終端に表示される。それ以外なら、カーソルはエコーエリア内ではなく、ポイント位置に表示される。

この値は、通常は@code{nil}である。Lispプログラムは短時間の間、これを@code{t}にバインドする。
@end defvar

@defvar echo-area-clear-hook
このノーマルフックは@code{(message nil)}、または別の何らかの理由によりエコーエリアが作成されると、常に実行される。
@end defvar

@defopt echo-keystrokes
この変数は、コマンド文字をエコーする前に、どれだけの時間を待機するかを決定する。この値は数字でなければならず、エコー前に待機する秒数を指定する。ユーザーが(@kbd{C-x}のような)プレフィックスキーをタイプしてから、継続してタイプを継続するのをこの秒数遅延した場合、エコーエリア内にそのプレフィックスキーがエコーされる(あるキーシーケンスで一度エコーが開始されると、同一のキーシーケンス内の後続するすべての文字は、即座にエコーされる)。

値が0なら、コマンド入力はエコーされない。
@end defopt

@defvar message-truncate-lines
通常、長いメッセージの表示により、そのメッセージ全体を表示するために、エコーエリアはリサイズされる。しかし変数@code{message-truncate-lines}が非@code{nil}なら、エコーエリアをリサイズせず、エコーエリアに収まるようメッセージは切り詰められる。
@end defvar

  ミニバッファーウィンドウのリサイズの最大高さを指定する変数@code{max-mini-window-height}は、エコーエリアにも適用される(エコーエリアは真にミニバッファーウィンドウの特殊な使い方である。@ref{Minibuffer
Misc}を参照されたい)。

@node Warnings
@section Reporting Warnings
@cindex warnings

  @dfn{警告(warnings)}とは、プログラムがユーザーにたいして問題の可能性を知らせるが、実行は継続するための機能です。

@menu
* Warning Basics::           警告の概念と、それらを報告するための関数。
* Warning Variables::        プログラムが警告をカスタマイズするためにバインドする変数。
* Warning Options::          ユーザーが警告の表示を制御するためにセットする変数。
* Delayed Warnings::         コマンド終了まで警告を延期する。
@end menu

@node Warning Basics
@subsection Warning Basics
@cindex severity level

  すべての警告は、ユーザーに問題を説明するためのテキストのメッセージと、@dfn{重大レベル(severity
level)}をもっています。重大レベルはシンボルです。以下は可能性のある重大レベルとその意味を、重大度の降順でリストしたものです:

@table @code
@item :emergency
直ちに対処しなければ、Emacs処理が間もなく深刻に害される問題。
@item :error
本質的に悪いデータまたは状況のリポート。
@item :warning
本質的に悪くはないが、可能性のある問題を励起する恐れのあるデータまたは状況のリポート。
@item :debug
デバッグ中なら有用かもしれない情報のリポート。
@end table

  あなたのプログラムが無効な入力データに遭遇した際には、@code{error}呼び出しによるLispエラーのシグナルするか、または重大度@code{:error}の警告をリポートすることができます。Lispエラーのシグナルはもっとも簡単に行えることですが、それはプログラムが処理を継続できないことを意味します。間違ったデータでも処理を継続するための方法を実装するために、そのトラブルを受け取めたい場合には、その問題をユーザーに知らせるために、重大度@code{:error}の警告をリポートするのが正しい方法です。たとえばEmacs
Lispバイトコンパイラーはこの方法によりエラーを報告して、他の関数のコンパイルを継続できます(プログラムがLispエラーをシグナルして、それを@code{condition-case}でhandleしたなら、ユーザーがそのエラーを確認することはないだろう。これは警告としてリポートすることにより、ユーザーにメッセージを示すことができる)。

@c FIXME: Why use "(bytecomp)" instead of "'bytecomp" or simply
@c "bytecomp" here?  The parens are part of warning-type-format but
@c not part of the warning type. --xfq
@cindex warning type
  クラス分けのために、それぞれの警告には@dfn{警告タイプ(warning
type)}があります。このタイプはシンボルのリストです。最初のシンボルは、そのプログラムのユーザーオプションとして使用する、カスタムグループであるべきです。たとえばバイトコンパイラーの警告は、警告タイプ@code{(bytecomp)}を使用します。もし望むなら、このリスト内で更にシンボルを使用することにより、警告をサブカテゴリー化することもできます。

@defun display-warning type message &optional level buffer-name
この関数はメッセージとして@var{message}、警告タイプとして@var{type}を使用して、警告をリポートする。@var{level}は重大レベルであること。デフォルトは@code{:warning}。

@var{buffer-name}が非@code{nil}なら、それは警告をロギングするためのバッファー名を指定する。デフォルトは@file{*Warnings*}。
@end defun

@defun lwarn type level message &rest args
この関数は、@file{*Warnings*}バッファー内のメッセージとして@code{(format @var{message}
@var{args}...)}の値を使用して、、警告をリポートする。他の点では、これは@code{display-warning}と同じである。
@end defun

@defun warn message &rest args
この関数はメッセージとして@code{(format @var{message}
@var{args}...)}の値、タイプとして@code{(emacs)}、重大レベルとして@code{:warning}を使用して、警告をリポートする。これは互換性のためだけに存在する。固有な警告タイプを指定するべきであり、この関数の使用は推奨しない。
@end defun

@node Warning Variables
@subsection Warning Variables
@cindex warning variables

  プログラムは、このセクション内で説明する変数をバインドすることにより、警告が表示される方法をカスタマイズできます。

@defvar warning-levels
このリストは、警告の重大レベルの意味と、重大度の順序を定義する。それぞれの要素は1つの重大レベルを定義し、それらは重大度の降順で配置される。

各要素は@code{(@var{level} @var{string}
@var{function})}という形式をもち、@var{level}はその要素が定義する重大レベルである。@var{string}はそのレベルのテキストによる説明である。@var{string}は警告タイプ情報の配置箇所の指定に@samp{%s}を使用するか、さもなくばその情報を含まぬよう@samp{%s}を省略できる。

オプションの@var{function}が非@code{nil}なら、これはユーザーの注目を得るために引数なしで呼び出される関数であること。

通常は、この変数の値を変更するべきではない。
@end defvar

@defvar warning-prefix-function
値が非@code{nil}なら、それは警告用にプレフィックスを生成する関数であること。プログラムは、この変数を適切な関数にバインドできる。@code{display-warning}はwarningsバッファーがカレントの状態でこの関数を呼び出し、関数はそのバッファーにテキストを挿入できる。そのテキストが、警告メッセージの先頭になる。

この関数は重大レベル、および@code{warning-levels}内でのその重大レベルのエントリーという、2つの引数で呼び出される。これは、エントリーとして使用するためのリストをリターンするべきである(この値は@code{warning-levels}の実際のメンバーである必要はない)。この値を構築することにより、関数はその警告の重大レベルを変更したり、与えられた重大レベルにたいして異なる処理を指定することができる。

この変数の値が@code{nil}なら、呼び出される関数は存在しない。
@end defvar

@defvar warning-series
プログラムは、次の警告がシリーズの開始であることを告げるために、この変数を@code{t}にバインドできる。複数の警告がシリーズを形成するということは、それぞれの警告にたいしてポイントが維持されるよう移動して、最後の警告にポイントが表示されるのではなく、そのシリーズの最初の警告にポイントを残すことを意味する。このシリーズは、そのローカルバインドが非バインドされて、@code{warning-series}が再び@code{nil}になったときに終了する。

この値は、関数定義をもつシンボルでもよい。これは、次の警告によりwarningsバッファーがカレントの状態で、引数なしでその関数が呼び出されることを除き、@code{t}と等価である。この関数は、その警告シリーズのヘッダーの役目をもつであろうテキストを挿入できる。

あるシリーズが開始されると、その値はwarningsバッファー内でシリーズ開始となるバッファー位置を指すマーカーとなる。

この変数の通常の値は@code{nil}で、これはそれぞれの警告を個別に処理することを意味する。
@end defvar

@defvar warning-fill-prefix
この変数が非@code{nil}なら、それは各警告テキストのフィルに使用する、フィルプレフィックスを指定する。
@end defvar

@defvar warning-type-format
この変数は、警告メッセージ内の警告タイプを表示するための、フォーマットを指定する。この方法でフォーマットされたタイプは、@code{warning-levels}内のエントリー内の文字列制御下にあるメッセージに含まれることになる。デフォルト値は@code{"
(%s)"}。これを@code{""}にバインドすると、警告タイプはまったく表示されなくなる。
@end defvar

@node Warning Options
@subsection Warning Options
@cindex warning options

  以下の変数は、何が発生したときにLispプログラムが警告をリポートするかを、ユーザーが制御するために使用されます。

@defopt warning-minimum-level
このユーザーオプションは、ユーザーにたいして即座に表示されるべき、最小の重大レベルを指定する。デフォルトは@code{:warning}で、これは@code{:debug}警告を除くすべての警告が即座に表示されることを意味する。
@end defopt

@defopt warning-minimum-log-level
このユーザーオプションは、warningsバッファー内にログされるべき、最小の重大レベルを指定する。デフォルトは@code{:warning}で、これは@code{:debug}警告を除くすべての警告がログされることを意味する。
@end defopt

@defopt warning-suppress-types
このリストは、ユーザーにたいしてどの警告タイプを即座に表示するべきではないかを指定する。このリスト内の各要素は、シンボルのリストであること。それの要素が警告タイプ内の最初の要素にマッチしたら、その警告は即座に表示されない。
@end defopt

@defopt warning-suppress-log-types
このリストは、ユーザーにたいしてどの警告タイプがwarningsバッファーにログされるべきではないかを指定する。このリスト内の各要素は、シンボルのリストであること。それの要素が警告タイプ内の最初の数要素にマッチしたら、その警告はログされない。
@end defopt

@node Delayed Warnings
@subsection Delayed Warnings
@cindex delayed warnings

コマンド実行中には警告の表示を避けて、コマンドの終わりでのみ警告を表示したいことがあるかもしれません。これは、変数@code{delayed-warnings-list}により行うことができます。

@defvar delayed-warnings-list
この変数の値は、カレントのコマンド完了後に表示される警告のリストである。各要素は以下のようなリストでなければならない:

@smallexample
(@var{type} @var{message} [@var{level} [@var{buffer-name}]])
@end smallexample

@noindent
これらは、は@code{display-warning}の引数リストと同じ形式、同じ意味である(@ref{Warning
Basics}を参照)。@code{post-command-hook}(@ref{Command
Overview}を参照)の実行直後、Emacsのコマンドループはこの変数で指定されたすべての警告を表示してから、変数を@code{nil}にリセットする。
@end defvar

  遅延警告メカニズムをよりカスタマイズする必要があるプログラムは、変数@code{delayed-warnings-hook}を変更することができます:

@defvar delayed-warnings-hook
これは遅延警告を処理して表示するために、@code{post-command-hook}の後にEmacsコマンドループが実行する、ノーマルフックである。

デフォルト値は、2つの関数からなるリストである:

@smallexample
(collapse-delayed-warnings display-delayed-warnings)
@end smallexample

@findex collapse-delayed-warnings
@findex display-delayed-warnings
@noindent
関数@code{collapse-delayed-warnings}は、@code{delayed-warnings-list}から重複するエントリーを削除する。関数@code{display-delayed-warnings}は、@code{delayed-warnings-list}内の各要素にたいして順次@code{display-warning}を呼び出してから、@code{delayed-warnings-list}を@code{nil}にセットする。
@end defvar

@node Invisible Text
@section Invisible Text

@cindex invisible text
@code{invisible}プロパティにより、スクリーン上に表示されないように、文字を@dfn{不可視(invisible)}にすることができます。これはテキストプロパティ(@ref{Text
Properties}を参照)、またはオーバーレイプロパティ(@ref{Overlays}を参照)のいずれかで行うことができます。カーソル移動も、これらの文字を部分的に無視します。あるコマンドの後に、不可視テキスト範囲内にポイントがあることをコマンドループが検知した場合、コマンドループはポイントをそのテキストの別サイドへ再配置します。

もっともシンプルなケースでは、非@code{nil}の@code{invisible}プロパティにより、文字は不可視になります。これがデフォルトのケースであり、もし@code{buffer-invisibility-spec}のデフォルト値を変更したくない場合は、これが@code{invisible}プロパティを機能させる方法です。自身で@code{buffer-invisibility-spec}をセットする予定がなければ、@code{invisible}プロパティの値として、通常は@code{t}を使用するべきです。

より一般的には、どの@code{invisible}の値がテキストを不可視にするかを制御するために、変数@code{buffer-invisibility-spec}を使用できます。テキストにたいして異なる@code{invisible}の値を与えることにより、事前に別のサブセットへテキストをクラス分けした後に、@code{buffer-invisibility-spec}の値を変更して、さまざまなサブセットを可視または不可視にすることができます。

特にデータベース内のエントリーのリストを表示するプログラム内では、@code{buffer-invisibility-spec}による可視性の制御は有用です。これにより、データベース内の一部だけを閲覧するフィルターコマンドを、簡便に実装することが可能になります。この変数をセットするのは非常に高速で、バッファー内のすべてのテキストにたいしてプロパティが変更されたかスキャンするより、はるかに高速です。

@defvar buffer-invisibility-spec
この変数は、どの種類の@code{invisible}プロパティが、実際に文字を不可視にするかを指定する。この変数はセットすることにより、バッファーローカルになる。

@table @asis
@item @code{t}
@code{invisible}プロパティが非@code{nil}なら、その文字は不可視になる。これがデフォルトである。

@item リスト
このリスト内の各要素は、不可視性の条件を指定する。ある文字の@code{invisible}プロパティがこれらの条件のいずれかに適合したら、その文字は不可視になる。このリストは2種類の要素をもつことができる:

@table @code
@item @var{atom}
@code{invisible}プロパティの値が@var{atom}、または@var{atom}をメンバーにもつリストなら、その文字は不可視になる。比較は@code{eq}により行われる。

@item (@var{atom} . t)
@code{invisible}プロパティの値が@var{atom}、または@var{atom}をメンバーにもつリストなら、その文字は不可視になる。比較は@code{eq}により行われる。さらに、そのような文字シーケンスは省略記号(ellipsis)として表示される。
@end table
@end table
@end defvar

  特に@code{buffer-invisibility-spec}への要素の追加と削除のために、2つの関数が提供されています。

@defun add-to-invisibility-spec element
この関数は、@code{buffer-invisibility-spec}に要素@var{element}を追加する。@code{buffer-invisibility-spec}が@code{t}なら、これはリスト@code{(t)}に変更され、@code{invisible}プロパティが@code{t}のテキストは不可視のまま留まる。
@end defun

@defun remove-from-invisibility-spec element
この関数は、@code{buffer-invisibility-spec}から要素@var{element}を削除する。リスト内に@var{element}がなければ、何も行わない。
@end defun

  @code{buffer-invisibility-spec}を使用するための規約として、メジャーモードは@code{buffer-invisibility-spec}の要素、および@code{invisible}プロパティの値として、自身のモード名を使用することになっている。

@example
;; @r{省略記号を表示したければ:}
(add-to-invisibility-spec '(my-symbol . t))
;; @r{表示したくなければ:}
(add-to-invisibility-spec 'my-symbol)

(overlay-put (make-overlay beginning end)
             'invisible 'my-symbol)

;; @r{不可視状態が終わったら:}
(remove-from-invisibility-spec '(my-symbol . t))
;; @r{または各々を:}
(remove-from-invisibility-spec 'my-symbol)
@end example

  以下の関数を使用することにより、不可視性をチェックできます:

@defun invisible-p pos-or-prop
@var{pos-or-prop}がマーカーか数字の場合、その位置のテキストが不可視なら、この関数は非@code{nil}をリターンする。

@var{pos-or-prop}が別の類のLispオブジェクトなら、テキストプロパティまたはオーバーレイプロパティとして可能な値を意味すると解釈される。この場合、@code{buffer-invisibility-spec}のカレント値にもとづき、もしその値がテキストを不可視とするようなら、この関数は非@code{nil}をリターンする。
@end defun

@vindex line-move-ignore-invisible
  通常、テキストを操作したりポイントを移動する関数は、そのテキストが不可視かどうかに注意を払わず、可視および不可視のテキストを同様に処理します。@code{next-line}や@code{previous-line}のようなユーザーレベルの行移動関数は、@code{line-move-ignore-invisible}が非@code{nil}(デフォルト)なら、不可視な改行を無視します。これらの関数は不可視な改行がそのバッファーに存在しないかのように振る舞いますが、これはそう振る舞うよう、明示的にプログラムされているからです。

  あるコマンドが、不可視テキストの境界内側のポイントで終了した場合、メイン編集ループはその不可視テキストの両端のうちのいずれかにポイントを再配置します。そのコマンドの移動関数の全体的な方向と同じになるように、Emacsが再配置の方向は決定します。これに疑問がある場合には、挿入された文字が@code{invisible}プロパティを継承しないような位置を優先してください。加えて、そのテキストが省略記号で置換されず、コマンドが不可視テキスト内への移動のみを行う場合、ポイントを1文字余計に移動して、目に見えるようカーソルを移動することにより、そのコマンドの移動を反映するよう試みます。

  したがって,コマンドが(通常のstickinessをもつ)不可視範囲に、後方へとポイントを移動した場合、Emacsはポイントをその範囲の先頭へと、後方に移動します。コマンドが不可視範囲へ前方にポイントを移動した場合には、Emacsは不可視テキストの前にある最初の可視文字へと、前方にポイントを移動して、その後さらに前方へ1文字余計に移動します。

  これら不可視テキスト中間で終了するポイントにたいするこれらの@dfn{調整(adjustments)}は、@code{disable-point-adjustment}を非@code{nil}にセットすることにより無効にできます。@ref{Adjusting
Point}を参照してください。

  インクリメンタル検索はマッチが不可視テキストを含む場合は、一時的および/または永続的に不可視オーバーレイを可視にすることができます。これを有効にするためには、そのオーバーレイが非@code{nil}の@code{isearch-open-invisible}プロパティをもつ必要があります。プロパティの値は、そのオーバーレイを引数として呼び出される関数であるべきです。その関数は、オーバーレイを永続的に可視にする必要があります。これは検索からのexit時にマッチがそのオーバーレイに重なるときに使用されます。

  検索の間、そのようなオーバーレイのinvisible、およびintangibleプロパティを一時的に変更することにより、オーバーレイは一時的に可視にされます。特定のオーバーレイにたいして、異なる方法でこれを行いたいなら、それを@code{isearch-open-invisible-temporary}プロパティ(関数)に与えてください。その関数は2つの引数により呼び出されます。1つ目はそのオーバーレイ、2つ目は@code{nil}ならオーバーレイを可視に、@code{t}なら再び不可視にします。

@node Selective Display
@section Selective Display
@c @cindex selective display   Duplicates selective-display

  @dfn{選択的表示(selective display)}とは、スクリーン上で特定の行を隠蔽する、関連する機能ペアーを指します。

@cindex explicit selective display
  1つ目の変種は明示的な選択的表示で、これはLispプログラム内で使用するようにデザインされています。これはテキスト変更により、どの行を隠すかを制御します。この種の隠蔽は現在では時代遅れです。かわりに@code{invisible}プロパティで同じ効果を得ることができます(@ref{Invisible
Text}を参照)。

  2つ目の変種は、インデントにもとづいて隠す行の選択を自動的に行います。この変種は、ユーザーレベルの機能としてデザインされています。

  選択的表示を明示的に制御する方法では、改行(control-j)を復帰(control-m)に置換します。以前は行末に改行があった行は、これにより隠蔽されます。厳密に言うと、改行だけが行を分離できるので、これはもはや一時的には行ではなく、前の行の一部です。

  選択的表示は編集コマンドに直接影響を与えません。たとえば@kbd{C-f}(@code{forward-char})は、隠蔽された行へ気軽にポイントを移動します。しかし復帰文字による改行文字の置換は、いくつかの編集コマンドに影響を与えます。たとえば@code{next-line}は改行だけを検索するため、隠蔽された行をスキップします。選択的表示を使用するモードは、改行を考慮するコマンドを定義したり、テキストのどの部分を隠すか制御することもできます。

  選択的表示されたバッファーをファイルに書き込む際には、control-mはすべて改行として出力されます。これはファイル内のテキストを読み取る際には、すべて問題なく隠蔽されずに表示されることを意味します。選択的表示は、Emacs内でだけ見られる効果です。

@defvar selective-display
このバッファーローカル変数は、選択的表示を有効にする。これは行、または行の一部を隠すことができることを意味する。

@itemize @bullet
@item
@code{selective-display}の値が@code{t}なら、文字control-mが隠蔽されたテキストの開始をマークする。control-mと、それに後続する行の残りは表示されない。これは明示的な選択的表示である。

@item
@code{selective-display}の値が正の整数なら、それより多くの列によるインデントで始まる行は表示されない。
@end itemize

バッファーの一部が隠蔽されている際は、垂直移動コマンドはあたかもその部分を存在しないかのように処理して、1回の@code{next-line}コマンドで任意の行数の隠蔽された行をスキップできる。しかし(@code{forward-char}のような)文字移動コマンドは隠蔽された部分をスキップせず、(注意すれば)隠蔽された部分にたいしてテキストの挿入と削除が可能である。

以下の例では、@code{selective-display}の値の変更による、バッファー@code{foo}の@emph{外観表示}を示す。このバッファーの@emph{コンテンツ}は変更されない。

@example
@group
(setq selective-display nil)
     @result{} nil

---------- Buffer: foo ----------
1 on this column
 2on this column
  3n this column
  3n this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group

@group
(setq selective-display 2)
     @result{} 2

---------- Buffer: foo ----------
1 on this column
 2on this column
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example
@end defvar

@defopt selective-display-ellipses
このバッファーローカル変数が非@code{nil}なら、Emacsは隠蔽されたテキストを後にともなう行の終端に、@samp{@dots{}}を表示する。この例は、前の例からの継続である。

@example
@group
(setq selective-display-ellipses t)
     @result{} t

---------- Buffer: foo ----------
1 on this column
 2on this column ...
 2on this column
1 on this column
---------- Buffer: foo ----------
@end group
@end example

省略記号(@samp{@dots{}})にたいして他のテキストを代替えするために、ディスプレイテーブルを使用できる。@ref{Display
Tables}を参照のこと。
@end defopt

@node Temporary Displays
@section Temporary Displays
@cindex temporary display
@cindex temporary buffer display

  一時的表示(temporary
display)は、出力をバッファーに配して、それを編集用ではなく閲覧用としてユーザーに示すために、Lispプログラムにより使用されます。多くのヘルプコマンドは、この機能を使用します。

@defmac with-output-to-temp-buffer buffer-name body@dots{}
この関数は、@var{buffer-name}という名前のバッファー(必要なら最初に作成される)にプリントされた任意の出力が挿入されるようアレンジ、さらにバッファーをHelpモードにして、@var{body}内のフォームを実行する(類似する以下のフォーム@code{with-temp-buffer-window}を参照されたい)。最後に、そのバッファーはいずれかのウィンドウに表示されるが、そのウィンドウは選択されない。

@var{body}内のフォームが出力バッファーのメジャーモードを変更しないため、実行の最後においても依然としてHelpモードにあるなら、@code{with-output-to-temp-buffer}は最後にそのバッファーを読み取り専用するとともに、クリック可能なクロスリファレンスとなるよう、関数名と変数名のスキャンも行う。特にドキュメント文字列内のハイパーリンク上アイテムに関する詳細は、@ref{Docstring
hyperlinks, , Tips for Documentation Strings}を参照のこと。

文字列@var{buffer-name}は一時的なバッファーを指定し、これはあらかじめ存在する必要はない。引数はバッファーではなく文字列でなければならない。そのバッファーは最初に消去され(確認なし)、@code{with-output-to-temp-buffer}のexit後は未変更(unmodified)とマークされる。

@code{with-output-to-temp-buffer}は@code{standard-output}を一時的バッファーにバインドして、@var{body}内のフォームを評価する。@var{body}内のLisp出力関数を使用した出力のデフォルト出力先は、そのバッファーになる(しかしスクリーン表示、エコーエリア内のメッセージは、一般的な世界の感覚では``出力''であるものの、影響は受けない)。@ref{Output
Functions}を参照のこと。

この構成の振る舞いをカスタマイズするために利用できるフックがいくつかあり、それらは以下にリストしてある。

リターン値は、@var{body}内の最後のフォームの値である。

@example
@group
---------- Buffer: foo ----------
 This is the contents of foo.
---------- Buffer: foo ----------
@end group

@group
(with-output-to-temp-buffer "foo"
    (print 20)
    (print standard-output))
@result{} #<buffer foo>

---------- Buffer: foo ----------

20

#<buffer foo>

---------- Buffer: foo ----------
@end group
@end example
@end defmac

@defopt temp-buffer-show-function
この変数が非@code{nil}なら、@code{with-output-to-temp-buffer}はヘルプバッファーを表示する処理を行うために、その関数を呼び出す。この関数は、表示すべきバッファーという、1つの引数を受け取る。

@code{with-output-to-temp-buffer}が通常行うように、@code{save-selected-window}内部や選択されたウィンドウ内で、バッファーか選択された状態で、@code{temp-buffer-show-hook}を実行するのは、この関数にとってよいアイデアである。
@end defopt

@defvar temp-buffer-setup-hook
このノーマルフックは、@var{body}を評価する前に、@code{with-output-to-temp-buffer}により実行される。フック実行時は、一時的バッファーがカレントになる。このフックは通常、そのバッファーをHelpモードにするための関数にセットアップされる。
@end defvar

@defvar temp-buffer-show-hook
このノーマルフックは、一時的バッファー表示後に、@code{with-output-to-temp-buffer}により実行される。フック実行時は一時的バッファーがカレントになり、それが表示されているウィンドウが選択される。
@end defvar

@defmac with-temp-buffer-window buffer-or-name action quit-function body@dots{}
このマクロは@code{with-output-to-temp-buffer}と類似している。@code{with-output-to-temp-buffer}構成同様、これはプリントされる任意の出力が@var{buffer-or-name}という名前のバッファーに挿入されるようにアレンジして@var{body}を実行し、そのバッファーをいぜれかのウィンドウに表示する。しかし@code{with-output-to-temp-buffer}とは異なり、このマクロはそのバッファーを自動的にHelpモードに切り替えない。

@code{with-output-to-temp-buffer}と同様、これは@var{buffer-or-name}で指定されるバッファーを、@var{body}実行時カレントにしない。
@findex with-current-buffer-window
@var{body}を実行するために、そのバッファーをカレントにする点以外は等価なマクロ@code{with-current-buffer-window}を使用できる。

引数@var{buffer-or-name}は、一時的バッファーを指定する。これはバッファー(既存でなければならない)、または文字列を指定でき、文字列の場合は必要ならその名前のバッファーが作成される。そのバッファーは@code{with-temp-buffer-window}のexit時、未変更かる読み取り専用とマークされる。

このマクロは@code{temp-buffer-show-function}を呼び出さない。かわりにそのバッファーを表示するために、@var{action}引数を@code{display-buffer}に渡す。

引数@var{quit-function}が指定されていなければ、@var{body}内の最後のフォームの値がリターンされる。指定されている場合、それはそのバッファーを表示するウィンドウと、@var{body}の結果という、2つの引数で呼び出される。その場合、最終的なリターン値は何であれ@var{quit-function}がリターンした値となる。

@vindex temp-buffer-window-setup-hook
@vindex temp-buffer-window-show-hook
このマクロは、@code{with-output-to-temp-buffer}により実行される類似フックのかわりに、ノーマルフック@code{temp-buffer-window-setup-hook}と@code{temp-buffer-window-show-hook}使用する。
@end defmac

@defun momentary-string-display string position &optional char message
この関数は、カレントバッファー内の@var{position}に、@var{string}を瞬間表示(momentarily
display)する。これはundoリストや、そのバッファーの変更状態(modification status)に影響を与えない。

瞬間表示は、次の入力イベントまで留まる。次の入力イベントが@var{char}なら、@code{momentary-string-display}はそれを無視してリターンする。それ以外なら、そのイベントは後続の入力として使用するためにバッファーされる。つまり@var{char}とタイプすると、表示からその文字列を単に削除して、@var{char}ではない(たとえば)@kbd{C-f}とタイプすると表示からその文字列を削除して、後で(おそらく)ポイントを前方へ移動するだろう。引数@var{char}のデフォルトはスペース。

@code{momentary-string-display}のリターン値に意味はない。

文字列@var{string}がコントロール文字を含まなければ、@code{before-string}プロパティでオーバーレイを作成(してその後削除)することで、より一般的に同じことを行うことができる。@ref{Overlay
Properties}を参照のこと。

@var{message}gが非@code{nil}なら、バッファー内に@var{string}が表示されている間は、エコーエリアにそれが表示される。@code{nil}ならデフォルトは、継続するためには@var{char}をタイプするよう告げるメッセージである。

以下の例ではポイントは最初、2行目の先頭に置かれている:

@example
@group
---------- Buffer: foo ----------
This is the contents of foo.
@point{}Second line.
---------- Buffer: foo ----------
@end group

@group
(momentary-string-display
  "**** Important Message! ****"
  (point) ?\r
  "Type RET when done reading")
@result{} t
@end group

@group
---------- Buffer: foo ----------
This is the contents of foo.
**** Important Message! ****Second line.
---------- Buffer: foo ----------

---------- Echo Area ----------
Type RET when done reading
---------- Echo Area ----------
@end group
@end example
@end defun

@node Overlays
@section Overlays
@cindex overlays
@c FIXME: mention intervals in this section?

プレゼンテーション機能として、バッファーのテキストのスクリーン上の見栄えを変更するために、@dfn{オーバーレイ(overlay)}を使用できます。オーバーレイとは、個々のバッファーに属するオブジェクトであり、指定された開始と終了をもっています。確認したりセットすることができるプロパティももっています。それらはオーバーレイをもつテキストの表示に影響を与えます。

@cindex scalability of overlays
オーバーレイの視覚的効果は、対応するテキストプロパティと同様です(@ref{Text
Properties}を参照)。しかし実装が異なるため、オーバーレイは一般的にスケーラブルではありません(処理数に応じて、バッファー内のオーバーレイ数に比例した時間を要する)。バッファー内の多数の部分の視覚的外観に効果を及ぼす必要がある場合は、テキストプロパティの使用を推奨します。

オーバーレイは、その開始と終了を記録するために、マーカーを使用します。したがってバッファーのテキスト編集では、すべてのオーバーレイがそのテキストに留まるように、開始と終了が調整されます。オーバーレイ作成時には、オーバーレイ先頭、同様に終端にテキストが挿入された場合に、それがオーバーレイの内側あるいは外側であるべきかを指定できます。

@menu
* Managing Overlays::        オーバーレイの作成と変更。
* Overlay Properties::       プロパティ読み取りおよびセットの方法。どのプロパティがスクリーン表示に何を行うか。
* Finding Overlays::         オーバーレイにたいする検索。
@end menu

@node Managing Overlays
@subsection Managing Overlays
@cindex managing overlays
@cindex overlays, managing

  このセクションでは、オーバーレイの作成、削除、移動、およびそれらのコンテンツを調べる関数を説明します。オーバーレイはバッファーのコンテンツの一部ではないので、その変更はバッファーのundoリストに記録されません。

@defun overlayp object
この関数は、@var{object}がオーバーレイなら@code{t}をリターンする。
@end defun

@defun make-overlay start end &optional buffer front-advance rear-advance
この関数は@var{buffer}に属し、@var{start}から@var{end}の範囲のオーバーレイを作成してリターンする。@var{start}と@var{end}はいずれもバッファーの位置を指定しなければならず、整数またはマーカーを指定できる。@var{buffer}が省略された場合、そのオーバーレイはカレントバッファーに作成される。

引数@var{front-advance}と@var{rear-advance}はそれぞれ、オーバーレイの開始と終了にたいするマーカーの挿入タイプを指定する。@ref{Marker
Insertion
Types}を参照のこと。どちらも@code{nil}(デフォルト)なら、そのオーバーレイは先頭に挿入された任意のテキストを含むように拡張されるが、終端に挿入されたテキストにたいしては拡張されない。@var{front-advance}が非@code{nil}なら、オーバーレイの先頭に挿入されたテキストは、オーバーレイから除外される。@var{rear-advance}が非@code{nil}なら、オーバーレイの終端に挿入されたテキストは、オーバーレイに含まれる。
@end defun

@defun overlay-start overlay
この関数は、@var{overlay}が開始する位置を整数でリターンする。
@end defun

@defun overlay-end overlay
この関数は、@var{overlay}が終了する位置を整数でリターンする。
@end defun

@defun overlay-buffer overlay
この関数は、@var{overlay}が所属するバッファーをリターンする。@var{overlay}が削除されていれば@code{nil}をリターンする。
@end defun

@defun delete-overlay overlay
この関数は@var{overlay}を削除する。そのオーバーレイはLispオブジェクトとして存在し続け、そのプロパティリストは変更されないが、バッファーへの所属と表示にたいするすべての効果は失う。

削除済みオーバーレイが、永続的に非接続という訳ではない。@code{move-overlay}を呼び出すことにより、バッファー内の位置を与えることができる。
@end defun

@defun move-overlay overlay start end &optional buffer
この関数は@var{overlay}を@var{buffer}に移動して、その境界を@var{start}と@var{end}に配する。@var{start}と@var{end}の引数はいずれもバッファーの位置を指定しなければならず、整数またはマーカーを指定できる。

@var{buffer}が省略された場合、@var{overlay}はすでに関連付けられている同じバッファーに留まる。さらに@var{overlay}が削除されていたら、それをカレントバッファーに所属させる。

リターン値は@var{overlay}。

これはオーバーレイの両端位置を変更する、唯一有効な方法である。手作業でオーバーレイ内のマーカーの変更を試みてはならない。それにより他の重要なデータ構造の更新が失敗して、いくつかのオーバーレイが``失われる''可能性がある。
@end defun

@defun remove-overlays &optional start end name value
この関数は、プロパティ@var{name}が値@var{value}をもつ、@var{start}と@var{end}の間のすべてのオーバーレイを削除する。これによりオーバーレイの両端位置が変更されたり、分割される可能がある。

@var{name}が省略または@code{nil}なら、それは指定されたリージョン内のすべてのオーバーレイを削除することを意味する。@var{start}および/または@var{end}が省略または@code{nil}なら、それぞれバッファーの先頭と終端を意味する。したがって@code{(remove-overlays)}は、カレントバッファー内のすべてのオーバーレイを削除する。
@end defun

@defun copy-overlay overlay
この関数は@var{overlay}のコピーをリターンする。このコピーは@var{overlay}と同じ両端位置とプロパティをもつ。しかしオーバーレイの開始と終了にたいするマーカー挿入タイプは、デフォルト値にセットされる(@ref{Marker
Insertion Types}を参照)。
@end defun

  以下にいくつか例を示します:

@example
;; @r{オーバーレイの作成}
(setq foo (make-overlay 1 10))
     @result{} #<overlay from 1 to 10 in display.texi>
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 10
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{後でチェックできるようプロパティ付与}
(overlay-put foo 'happy t)
     @result{} t
;; @r{プロパティが付与されたか検証}
(overlay-get foo 'happy)
     @result{} t
;; @r{オーバーレイを移動}
(move-overlay foo 5 20)
     @result{} #<overlay from 5 to 20 in display.texi>
(overlay-start foo)
     @result{} 5
(overlay-end foo)
     @result{} 20
;; @r{オーバーレイを削除}
(delete-overlay foo)
     @result{} nil
;; @r{削除されたか検証}
foo
     @result{} #<overlay in no buffer>
;; @r{削除済みオーバーレイは位置をもたない}
(overlay-start foo)
     @result{} nil
(overlay-end foo)
     @result{} nil
(overlay-buffer foo)
     @result{} nil
;; @r{オーバーレイの削除取り消し}
(move-overlay foo 1 20)
     @result{} #<overlay from 1 to 20 in display.texi>
;; @r{結果の検証}
(overlay-start foo)
     @result{} 1
(overlay-end foo)
     @result{} 20
(overlay-buffer foo)
     @result{} #<buffer display.texi>
;; @r{オーバーレイの移動と削除では、オーバーレイのプロパティは変更されない}
(overlay-get foo 'happy)
     @result{} t
@end example

  Emacsはそれぞれのバッファーのオーバーレイを、任意の``中心位置(center
position)''で分割される、2つのリストに格納します。一方のリストはバッファーの中心位置から後方へ拡張され、もう一方は中心位置から前方へと拡張されます。中心位置は、バッファーの任意の位置をとることができます。

@defun overlay-recenter pos
この関数は、カレントバッファーのオーバーレイを、位置@var{pos}の周辺に再センタリングする。これにより位置@var{pos}近傍のオーバーレイの照合は高速になるが、@var{pos}から離れた位置にたいしては低速になる。
@end defun

  バッファーを前方にスキャンしてオーバーレイを作成するループは、最初に@code{(overlay-recenter
(point-max))}を行うことにより高速になる可能性があります。

@node Overlay Properties
@subsection Overlay Properties
@cindex overlay properties

  オーバーレイプロパティは、文字が表示される方法をどちらのソースからも取得できるという点において、テキストプロパティと似ています。しかしほとんどの観点で、両者は異なります。これらの比較は@ref{Text
Properties}を参照してください。

  テキストプロパティは、そのテキストの一部として考えることができます。オーバーレイとそのプロパティは、特にテキストの一部としてはみなされません。したがって、さまざまなバッファーや文字列の間でテキストをコピーすると、テキストプロパティは保持されますが、オーバーレイを保持しようとは試みません。バッファーのテキストプロパティの変更は、そのバッファーを変更済みとマークしますが、オーバーレイの移動やプロパティの変更は違います。テキストプロパティの変更とは異なり、オーバーレイプロパティの変更は、バッファーのundoリストに記録されません。

  複数のオーバーレイが同じ文字にたいしてプロパティ値を指定できるので、Emacsは各オーバーレイにたいして優先度の指定を促します。2つのオーバーレイが同じ値の優先度をもち、一方が他方にネストされている場合には、内側のオーバーレイが外側のオーバーレイより高い優先度をもちます。いずれのオーバーレイも他方をネストしない場合には、どちらのオーバーレイが優先されるかについて予測するべきではありません。

  以下の関数は、オーバーレイのプロパティの読み取りとセットを行います:

@defun overlay-get overlay prop
この関数は、@var{overlay}内に記録されたプロパティ@var{prop}の値をリターンする。そのプロパティにたいして@var{overlay}が何も値を記録していないが、シンボルであるような@code{category}プロパティをもつ場合は、そのシンボルの@var{prop}プロパティが使用される。それ以外なら値は@code{nil}。
@end defun

@defun overlay-put overlay prop value
この関数は、@var{overlay}内に記録されたプロパティ@var{prop}の値に、@var{value}をセットする。リターン値は@var{value}。
@end defun

@defun overlay-properties overlay
これは、@var{overlay}のプロパティリストのコピーをリターンする。
@end defun

  与えられた文字にたいしてテキストプロパティとオーバーレイプロパティの両方をチェックする関数@code{get-char-property}も参照してください。@ref{Examining
Properties}を参照してください。

  多くのオーバーレイプロパティには特別な意味があります。以下はそれらのテーブルです:

@table @code
@item priority
@kindex priority @r{(overlay property)}
このプロパティの値は、そのオーバーレイの優先度を決定する。優先度にたいして値を指定したければ、@code{nil}(か0)、または正の整数を使用すること。それ以外のすべての値にたいして、動作は未定義である。

2つ以上のオーバーレイが同じ文字をカバーし、いずれもが同じプロパティを指定する場合には、優先度が重要になる。他より@code{priority}の値が大きいほうが他をオーバーライドする。@code{face}プロパティにたいしては、より高い優先度のオーバーレイの値は、他の値を完全にはオーバーライドしない。かわりにより低い優先度の@code{face}プロパティのface属性を、高い優先度のface属性がオーバーライドする。

現在のところ、すべてのオーバーレイはテキストプロパティより優先される。

Emacsは内部的なオーバーレイのいくつかにたいして、非数値の優先度を使用することがあるので、(自分が作成したオーバーレイでない場合は)オーバーレイ優先度の算術演算を試みないよう注意すること。オーバーレイを優先度順に配す必要があるなら、@code{overlays-at}の@var{sorted}引数を使用すること。@ref{Finding
Overlays}を参照されたい。

@item window
@kindex window @r{(overlay property)}
@code{window}プロパティが非@code{nil}なら、そのオーバーレイはそのウィンドウだけに適用される。

@item category
@kindex category @r{(overlay property)}
オーバーレイが@code{category}プロパティをもつなら、それをそのオーバーレイの@dfn{カテゴリー(category)}と呼ぶ。これはシンボルであること。そのシンボルのプロパティは、そのオーバーレイのプロパティにたいしてデフォルトの役割を果たす。

@item face
@kindex face @r{(overlay property)}
このプロパティはテキストの外観を制御する(@ref{Faces}を参照)。プロパティの値は以下のいずれか:

@itemize @bullet
@item
フェイス名(シンボルか文字列)。

@item
anonymousフェイス: @code{(@var{keyword} @var{value}
@dots{})}という形式のプロパティリストで、@var{keyword}はフェイス属性名、@var{value}はその属性の値。

@item
フェイスのリスト。リストの要素はそれぞれフェイス名か、anonymousフェイスのいずれかであること。これはリストされた各フェイスの属性を集約するフェイスを指定する。このリスト内で先に出現するフェイスが、より高い優先度をもつ。

@item
@code{(foreground-color . @var{color-name})}または@code{(background-color
. @var{color-name})}という形式のコンスセル。これは@code{(:foreground
@var{color-name})}や@code{(:background
@var{color-name})}と同様、フォアグラウンドとバックグラウンドのカラーを指定する。この形式は後方互換性のためだけにサポートされており、避けるべきである。
@end itemize

@item mouse-face
@kindex mouse-face @r{(overlay property)}
このプロパティは、マウスがオーバーレイ範囲内にあるとき、@code{face}のかわりに使用される。しかしEmacsは、このプロパティのテキストのサイズを変更する、すべてのフェイス属性(@code{:height}、@code{:weight}、@code{:slant})を無視する。これらの属性は、ハイライトされていないテキストでは、常に同一である。

@item display
@kindex display @r{(overlay property)}
このプロパティは、テキストが表示される方法を変更する、さまざまな機能をアクティブにする。たとえばこれは、テキストの外観を縦長(taller)や横長(shorter)にしたり、高く(higher)したり低く(lower)したり、イメージで置き換える。@ref{Display
Property}を参照のこと。

@item help-echo
@kindex help-echo @r{(overlay property)}
あるオーバーレイが@code{help-echo}プロパティをもつなら、そのオーバーレイ内のテキスト上にマウスを移動した際、Emacsはエコーエリアまたはツールチップウィンドウにヘルプ文字列を表示する。詳細は@ref{Text
help-echo}を参照のこと。

@item field
@kindex field @r{(overlay property)}
@c Copied from Special Properties.
同じ@code{field}プロパティをもつ連続する文字は、@emph{フィールド(field)}を形成する。@code{forward-word}や@code{beginning-of-line}を含むいくつかの移動関数は、フィールド境界で移動を停止する。@ref{Fields}を参照のこと。

@item modification-hooks
@kindex modification-hooks @r{(overlay property)}
このプロパティの値は、オーバーレイ内の任意の文字の変更、またはオーバーレイの厳密に内側にテキストが挿入された場合に呼び出される、関数のリストである。

このフックの関数は、各変更の前後両方で呼び出される。これらの関数が受け取った情報を保存し、呼び出し間で記録を比較すれば、バッファー内のテキストでどのような変更が行われたかを、正確に判断できる。

変更前に呼び出された際、各関数はオーバーレイ、@code{nil}、変更されたテキスト範囲の開始と終了という、4つの引数を受け取る。

変更後に呼び出された際、各関数はオーバーレイ、@code{t}、変更されたテキスト範囲の開始と終了、およびその範囲により置き換えられた変更前のテキスト長という、5つの引数を受け取る(変更前の長さは、挿入では0、削除では削除された文字数であり、変更後の先頭と終端が等しくなる)。

これらの関数がバッファーを変更する場合は、これらのフックを呼び出す内部的メカニズムの混乱を避けるために、それを行う前後で@code{inhibit-modification-hooks}を@code{t}にバインドすること。

テキストプロパティも@code{modification-hooks}プロパティをサポートするが、詳細は幾分か異なる(@ref{Special
Properties}を参照)。

@item insert-in-front-hooks
@kindex insert-in-front-hooks @r{(overlay property)}
このプロパティの値は、オーバーレイ先頭へのテキスト挿入前後に呼び出される、関数のリストである。呼び出し方は、@code{modification-hooks}の関数と同様。

@item insert-behind-hooks
@kindex insert-behind-hooks @r{(overlay property)}
このプロパティの値は、オーバーレイ終端へのテキスト挿入前後に呼び出される、関数のリストである。呼び出し方は、@code{modification-hooks}の関数と同様。

@item invisible
@kindex invisible @r{(overlay property)}
@code{invisible}プロパティにより、オーバーレイ内のテキストを不可視似出来る。これはそのテキストが、スクリーン上に表示されないことを意味する。詳細は、@xref{Invisible
Text}を下さいのこと。

@item intangible
@kindex intangible @r{(overlay property)}
オーバーレイの@code{intangible}プロパティは、正に@code{intangible}テキストプロパティと同様に機能する。詳細は@xref{Special
Properties}を参照のこと。

@item isearch-open-invisible
このプロパティは、インクリメンタル検索にたいして、最後のマッチがそのオーバーレイに重なる場合に、不可視なオーバーレイを永続的に可視にする方法を告げる。@ref{Invisible
Text}を参照のこと。

@item isearch-open-invisible-temporary
このプロパティは、インクリメンタル検索にたいして、検索の間に、不可視なオーバーレイを一時的に可視にする方法を告げる。@ref{Invisible
Text}を参照のこと。

@item before-string
@kindex before-string @r{(overlay property)}
このプロパティの値は、オーバーレイ先頭に表示するために追加する文字列である。この文字列は、いかなる意味においてもバッファー内には表れず、スクリーン上にのみ表れる。

@item after-string
@kindex after-string @r{(overlay property)}
このプロパティの値は、オーバーレイ終端に表示するために追加する文字列である。この文字列は、いかなる意味においてもバッファー内には表れず、スクリーン上にのみ表れる。

@item line-prefix
このプロパティは、表示時にそれぞれの非継続行の後に追加する、表示仕様(display
spec)を指定する。@ref{Truncation}を参照のこと。

@item wrap-prefix
このプロパティは、表示時にそれぞれの継続行の前に追加する、表示仕様(display spec)を指定する。@ref{Truncation}を参照のこと。

@item evaporate
@kindex evaporate @r{(overlay property)}
このプロパティが非@code{nil}の場合は、そのオーバーレイが空(長さが0)になったら、自動的に削除される。空のオーバーレイにたいして非@code{nil}の@code{evaporate}プロパティを与えた場合は、即座に削除される。

@item keymap
@cindex keymap of character (and overlays)
@kindex keymap @r{(overlay property)}
このプロパティがから@code{nil}なら、それはそのテキスト範囲にたいしてキーマップを指定する。このキーマップは、ポイントの後の文字がそのオーバーレイ内にあるときに使用され、他のほとんどのキーマップより優先される。@ref{Active
Keymaps}を参照のこと。

@item local-map
@kindex local-map @r{(overlay property)}
@code{local-map}プロパティは@code{keymap}プロパティと同様だが、既存のキーマップに付け加えるのではなく、バッファーのローカルマップを置き換える点が異なる。これは、そのキーマップがマイナーモードキーマップより低い優先度をもつことも意味する。
@end table

@code{keymap}と@code{local-map}プロパティは、@code{before-string}、@code{after-string}、@code{display}プロパティにより表示された文字列には影響しません。これはポイントがその文字列上にない場合の、マウスクリックや、その文字列に関する他のマウスイベントにのみ関係があります。その文字列に特別なマウスイベントをバインドするには、そのイベントを@code{keymap}か@code{local-map}プロパティに割り当てます。@ref{Special
Properties}を参照してください。

@node Finding Overlays
@subsection Searching for Overlays
@cindex searching for overlays
@cindex overlays, searching for

@defun overlays-at pos &optional sorted
この関数は、カレントバッファー内の位置@var{pos}にある文字をカバーする、すべてオーバーレイのリストをリターンする。@var{sorted}が非@code{nil}ならリストは優先度降順、それ以外なら特定の順にはソートされない。オーバーレイが@var{pos}、またはそれより前から始まり、かつ@var{pos}の後で終わる場合、位置@var{pos}はオーバーレイに含まれる。

使い方を説明するために、ポイント位置の文字にたいして、プロパティ@var{prop}を指定するオーバーレイのリストをリターンするLisp関数である:

@smallexample
(defun find-overlays-specifying (prop)
  (let ((overlays (overlays-at (point)))
        found)
    (while overlays
      (let ((overlay (car overlays)))
        (if (overlay-get overlay prop)
            (setq found (cons overlay found))))
      (setq overlays (cdr overlays)))
    found))
@end smallexample
@end defun

@defun overlays-in beg end
この関数は、@var{beg}から@var{end}のリージョンと重複(overlap)する、オーバーレイのリストをリターンする。``重複''とは、少なくとも1つの文字がそのオーバーレイに含まれ、かつ指定されたリージョンにも含まれることを意味する。しかし、空のオーバーレイが@var{beg}、厳密に言うと@var{beg}と@var{end}にある場合、または@var{end}がバッファーの終端を示す場合は、その空のオーバーレイも結果に含まれる。
@end defun

@defun next-overlay-change pos
この関数は@var{pos}の後にあるオーバーレイの、開始または終了となるバッファー位置をリターンする。それが存在しなければ@code{(point-max)}をリターンする。
@end defun

@defun previous-overlay-change pos
この関数は@var{pos}の前にあるオーバーレイの、開始または終了となるバッファー位置をリターンする。それが存在しなければ@code{(point-min)}をリターンする。
@end defun

  以下に例として、プリミティブ関数@code{next-single-char-property-change}(@ref{Property
Search}を参照)の、単純化(かつ非効率的な)したバージョンを示します。これは位置@var{pos}から前方へ、与えられたプロパティ@code{prop}にたいして、オーバーレイプロパティまたはテキストプロパティのいずれかの値が変化した、次の位置を検索します。

@smallexample
(defun next-single-char-property-change (position prop)
  (save-excursion
    (goto-char position)
    (let ((propval (get-char-property (point) prop)))
      (while (and (not (eobp))
                  (eq (get-char-property (point) prop) propval))
        (goto-char (min (next-overlay-change (point))
                        (next-single-property-change (point) prop)))))
    (point)))
@end smallexample

@node Size of Displayed Text
@section Size of Displayed Text
@cindex size of text on display
@cindex character width on display

すべての文字が同じ幅をもつ訳ではないので、以下の関数により文字の幅をチェックできます。関連する関数については、@ref{Primitive
Indent}と@ref{Screen Lines}を参照してください。

@defun char-width char
この関数は、文字@var{char}がカレントバッファーに表示された場合(つまりそのバッファーのディスプレイテーブルがあれば、それを考慮に入れる。@ref{Display
Tables}を参照されたい)の幅を、列数でリターンする。タブ文字の幅は、通常は@code{tab-width}である(@ref{Usual
Display}を参照)。
@end defun

@defun string-width string
この関数は、文字列@var{string}がカレントバッファー、および選択されたウィンドウに表示された場合の幅を、列数でリターンする。
@end defun

@defun truncate-string-to-width string width &optional start-column padding ellipsis
この関数は@var{string}の一部を、列数@var{width}にフィット新たな文字列としてリターンする。

@var{string}が@var{width}に満たない場合、その文字列終端が結果の終端となる。@var{string}内の1つの複数列文字が、列@var{width}を超えて跨がる場合、その文字は結果に含まれない。つまり結果は@var{width}より短くなるかもしれないが、それを超えることはできない。

オプション引数@var{start-column}は、開始列を指定する。これが非@code{nil}なら、その文字列の最初の@var{start-column}列は、値から省かれる。@var{string}内の1つの複数列文字が、列@var{start-column}を超えて跨がる場合、その文字は結果に含まれない。

オプション引数@var{padding}が非@code{nil}なら、結果となる文字列の幅を正確に@var{width}列に拡張するために、パディング文字が追加される。結果文字列が@var{width}より短ければ、結果文字列の終端にパディング文字が使用される。@var{string}内の1つの複数列文字が列@var{start-column}を跨ぐ場合は、先頭にもパディング文字が使用される。

@var{ellipsis}が非@code{nil}なら、それは@var{string}の表示幅が@var{ellipsis}の表示幅以下でなければ、@var{width}を超えてしまう場合に、@var{string}の終端(任意のパディングを含む)を置き換える文字列であること。@var{ellipsis}が非@code{nil}、かつ文字列以外なら、それは@code{"..."}を意味する。

@example
(truncate-string-to-width "\tab\t" 12 4)
     @result{} "ab"
(truncate-string-to-width "\tab\t" 12 4 ?\s)
     @result{} "    ab  "
@end example
@end defun

以下の関数は、あるテキストが与えられたウィンドウに表示されたときのサイズを、ピクセル単位でリターンします。この関数は、テキストを含むためにウィンドウを十分大きくするために、@code{fit-window-to-buffer}(@ref{Resizing
Windows}を参照)と@code{fit-frame-to-buffer}(@ref{Size and
Position}を参照)により使用されます。

@defun window-text-pixel-size &optional window from to x-limit y-limit mode-and-header-line
この関数は、@var{window}のバッファーのテキストサイズを、ピクセル単位でリターンする。@var{window}は生きたウィンドウでなければならず、デフォルトは選択されたウィンドウ。リターン値は、任意のテキスト行の最大ピクセル幅と、すべてのテキスト行の最大ピクセル高さのコンスである。

オプション引数@var{from}が非@code{nil}なら、それは考慮すべき最初のテキスト位置を指定し、デフォルトはそのバッファーのアクセス可能な最小の位置である。@var{from}が@code{t}なら、それは改行文字ではない、アクセス可能な最小位置を使用する。オプション引数@var{to}が非@code{nil}なら、それは考慮すべき最後のテキスト位置を指定し、デフォルトはそのバッファーのアクセス可能な最大の位置である。@var{to}が@code{t}なら、それは改行文字ではない、アクセス可能な最大位置を使用する。

オプション引数@var{x-limit}が非@code{nil}なら、それはリターンされ得る、最大ピクセル幅を指定する。@var{x-limit}が@code{nil}または省略された場合には、@var{window}のbody(@ref{Window
Sizes}を参照)のピクセル幅を使用する。これは、呼び出し側が@var{window}の幅の変更を意図しない場合に有用である。それ以外なら、呼び出し側はここで想定される@var{window}のbodyの、最大幅を指定するべきである。X座標を超えるテキストの@var{x-limit}は無視される。長い行の幅の計算には多くの時間を要する可能性があるので、特にいずれにせよ切り詰められるであろう長い行を含むバッファーの場合には、必要に応じて、この引数の値を小さくすることは、よいアイデアである。

オプション引数@var{y-limit}が非@code{nil}なら、それはリターンされ得る、最大ピクセル高さを指定する。Y座標を超えるテキストの@var{y-limit}は無視される。大きなバッファーのピクセル高さの計算には多くの時間を要する可能性があるので、特に呼び出し側がバッファーのサイズを知らない場合、この変数の指定は合理的である。

オプション引数@var{mode-and-header-line}が@code{nil}または省略された場合は、リターン値に@var{window}のモードラインとヘッダーラインの高さを含めないことを意味する。これがシンボル@code{mode-line}または@code{header-line}のいずれかなら、それらが存在する場合は、リターン値にそのラインの高さだけを含める。これが@code{t}なら、存在する場合は両方の高さをリターン値に含める。
@end defun


@node Line Height
@section Line Height
@cindex line height
@cindex height of a line

  各ディスプレイ行のトータル高さは、その行のコンテンツ高さに、そのディスプレイ上部または下部にオプションで追加される垂直行スペーシングを加えて構成されます。

  行のコンテンツ高さは、もしあれば最後の改行を含む、そのディスプレイ行の文字またはイメージの最大高さです(継続されるディスプレイ行には最後の改行が含まれない)。特にこれより大きい高さを指定しなければ、これがデフォルトの行高さになります(一般的には、これはデフォルトのフレームフォント高さに等しい)。

  より大きい行高さを明示的に指定するためにはディスプレイ行の絶対高さ、または垂直スペースを指定することによる、複数の方法が存在します。しかし何を指定したかに関わらず、実際の行高さがデフォルトの高さより小さくなることはありません。

@kindex line-height @r{(text property)}
  改行は、その改行で終わるディスプレイ行のトータル高さを制御する、テキストプロパティまたはオーバーレイプロパティ@code{line-height}をもつことができます。

  プロパティの値が@code{t}なら、改行文字はその行の表示高さにたいして効果をもたず、可視なコンテンツだけが高さを決定します。これはイメージ間に追加のブランク領域をもたない、小さなイメージ(またはイメージスライス)にたいして有用です。

  プロパティの値が@code{(@var{height}
@var{total})}という形式のリストなら、これはディスプレイ行の@emph{下部}に余分なスペースを追加します。最初にEmacsは、その行の@emph{上部}の余分なスペースを制御するための高さspecとして、@var{height}を使用します。それから行のトータル高さを@var{total}にするために、行の@emph{下部}に必要なスペースを追加します。この場合、行のスペーシングを指定する他の方法は無視されます。

@cindex height spec
  他の種類のプロパティ値は高さspec(height
spec)です。これは行の高さを指定する数値に変換されます。高さspecを記述するためには複数の方法があります。以下はそれらが数値に変換される方法です:

@table @code
@item @var{integer}
高さspecが正の整数なら、高さの値はその整数。
@item @var{float}
高さspecが浮動小数点数@var{float}なら、高さ数値はそのフレームのデフォルト行高さの@var{float}倍。
@item (@var{face} . @var{ratio})
高さspecがこのフォーマットのコンスなら、高さ数値はフェイス@var{face}の高さの@var{ratio}倍。@var{ratio}には任意の型の数値を指定でき、@code{nil}は1のratioを意味する。@var{face}が@code{t}なら、カレントフェイスを参照する。
@item (nil . @var{ratio})
高さspecがこのフォーマットのコンスなら、高さ数値はその行のコンテンツ高さの@var{ratio}倍。
@end table

  したがって、任意の有効な種々の高さspecにより、ピクセル単位で高さが決定されます。行のコンテンツ高さがこれより小さければ、Emacsは指定されたトータル高さになるよう、余分な垂直スペースを行の上部に追加します。

  @code{line-height}プロパティを指定しない場合、その行の高さは行のコンテンツ高さとに行スペーシングを追加して構成されます。Emacsの異なるさまざまな部分のテキストにたいして、行スペーシングを指定する複数の方法が存在します。

  グラフィカルなディスプレイでは、フレームパラメーター@code{line-spacing}(@ref{Layout
Parameters}を参照)を使用することにより、フレーム内のすべての行にたいして行スペーシングを指定できます。しかし@code{line-spacing}のデフォルト値が非@code{nil}なら、それはそのフレームのフレームパラメーター@code{line-spacing}をオーバーライドします。整数は行の下部に配するピクセル数を指定します。浮動小数点数はフレームのデフォルト行高さに相対的にスペーシングを指定します。

@vindex line-spacing
  バッファーローカル変数@code{line-spacing}を通じて、バッファー内のすべての行の行スペーシングを指定できます。整数は行の下部に配するピクセル数を指定します。浮動小数点数はデフォルトフレーム行高さに相対的にスペーシングを指定します。これは、そのフレームにたいして指定された行スペーシングをオーバーライドします。

@kindex line-spacing @r{(text property)}
  最後に改行は、改行で終わるディスプレイ行にたいして、デフォルトフレーム行スペーシングおよびバッファーローカル変数@code{line-spacing}をオーバーライドする、テキストプロパティまたはオーバーレイプロパティ@code{line-spacing}をもつことができます。

  種々の方法により、これらのメカニズムは各行のスペーシングにたいするLisp値を指定します。値は高さspecで、これは上述したLisp値に変換されます。しかしこの場合高さ数値は行高さではなく行スペーシングを指定します。

  テキスト端末では、行スペーシングは変更できません。

@node Faces
@section Faces
@cindex faces

  @dfn{フェイス(face)}とはフォント、フォアグラウンドカラー、バックグラウンドカラー、オプションのアンダーライン等のテキストを表示するための、グラフィカルな属性のコレクションのことです。フェイスはEmacsがバッファー内、同様にモードラインのようなフレームの他の部分で、テキストを表示する方法を制御します。

@cindex anonymous face
  フェイスを表現する1つの方法として、@code{(:foreground "red" :weight
bold)}のような属性のプロパティリストがあります。このようなリストは、@dfn{anonymousフェイス(anonymous
face)}と呼ばれます。たとえば@code{face}テキストプロパティとしてanonymousフェイスを割り当てることができ、Emacsは指定された属性でテキストを表示するでしょう。@ref{Special
Properties}を参照してください。

@cindex face name
  より一般的には、フェイスは@dfn{フェイス名(face
name)}を通じて参照されます。これはフェイス属性のセットに関連付けられたLispシンボル@footnote{後方互換のため、フェイス名の指定に文字列も使用できます。これは同名のLispシンボルと等価です。}。です。名前つきフェイスは@code{defface}マクロを使用して定義できます(@ref{Defining
Faces}を参照)。Emacsにはいくつかの標準名前つきフェイスが同梱されています(@ref{Basic Faces}を参照)。

  Emacsの多くの箇所で名前つきフェイスが要求され、anonymousフェイスは受け入れられません。これらには@ref{Attribute
Functions}に記述される関数、および変数@code{font-lock-keywords}(@ref{Search-based
Fontification}を参照)が含まれます。特に明記しないかぎり、名前つきフェイスの参照だけに用語@dfn{フェイス}を使用することとします。

@defun facep object
この関数は@var{object}が名前つきフェイス(フェイス名の役目をもつLispシンボルまたは文字列)なら、非@code{nil}をリターンする。それ以外なら@code{nil}をリターンする。
@end defun

@menu
* Face Attributes::          フェイスとは?
* Defining Faces::           フェイスを定義する方法。
* Attribute Functions::      フェイス属性の確認およびセットを行う関数。
* Displaying Faces::         ある文字にたいして指定されたフェイスをEmacsが組み合わせる方法。
* Face Remapping::           フェイスを別の定義にリマップする。
* Face Functions::           フェイスの定義、および確認する方法。
* Auto Faces::               自動的にフェイスを割り当てるフック。
* Basic Faces::              デフォルトで定義されるフェイス。
* Font Selection::           あるフェイスに最適なフォントを見つける。
* Font Lookup::              利用可能なフォント名とそれらの情報の照会。
* Fontsets::                 フォントセット、それは文字セットの範囲を処理するフォントコレクションである。
* Low-Level Font::           文字表示フォントのLisp表現。
@end menu

@node Face Attributes
@subsection Face Attributes
@cindex face attributes

  @dfn{フェイス属性(Face
attributes)}は、フェイスの視覚的外観を決定します。以下はすべてのフェイス属性と、それらの可能な値と効果に関するテーブルです。

  以下の値とは別に、各フェイス属性は値@code{unspecified}をもつことができます。この特殊な値は、フェイスがその属性を直接指定しないことを意味します。@code{unspecified}属性は、Emacsにかわりに親フェイス(以下の@code{:inherit}属性の記述を参照)を参照すること、それに失敗した場合は基礎フェイス(@ref{Displaying
Faces}を参照)を参照することを指示します。@code{default}フェイスはすべての属性を指定しなければなりません。

  これらの属性のいくつかは、特定の種類のディスプレイにおいてのみ意味があります。ディスプレイが特定の属性を処理できなければ、その属性は無視されます。

@table @code
@item :family
フォントファミリーまたはフォントセット(文字列)。フォントファミリーに関する詳細は、@xref{Fonts,,, emacs, The GNU
Emacs
Manual}を参照のこと。関数@code{font-family-list}(以下参照)は、利用可能なファミリー名のリストをリターンする。フォントセットに関する情報は、@ref{Fontsets}を参照されたい。

@item :foundry
@code{:family}属性により指定されるフォントファミリーにたいする@dfn{フォントfoundry(font
foundry)}(文字列)。@ref{Fonts,,, emacs, The GNU Emacs Manual}を参照のこと。

@item :width
相対的な文字幅。これはシンボル@code{ultra-condensed}、@code{extra-condensed}、@code{condensed}、@code{semi-condensed}、@code{normal}、@code{semi-expanded}、@code{expanded}、@code{extra-expanded}、@code{ultra-expanded}のいずれかであること。

@item :height
フォントの高さ。もっともシンプルなケースでは1/10ポイントを単位とする整数。

値には@dfn{基礎フェイス(underlying
face)}にたいして相対的に高さを指定する浮動小数点数、または関数も指定できる(@ref{Displaying
Faces}を参照)。浮動小数点数は基礎フェイスの高さをスケーリングする量を指定する。関数値は基礎フェイスの高さを単一の引数として呼び出され、新たなフェイスの高さをリターンする。関数が整数を引数として渡された場合には、整数をリターンしなければならない。

デフォルトフェイスの高さは、整数を使用して指定しなければならない。浮動小数点数および関数は受け入れられない。

@item :weight
フォントのweight。(太字から細字順に)シンボル@code{ultra-bold}、@code{extra-bold}、@code{bold}、@code{semi-bold}、@code{normal}、@code{semi-light}、@code{light}、@code{extra-light}、@code{ultra-light}のいずれか。可変輝度テキストをサポートするテキスト端末では、normalより大なweightはより高輝度、小なweightはより低輝度で表示される。

@cindex italic text
@item :slant
フォントのslant。シンボル@code{italic}、@code{oblique}、@code{normal}、@code{reverse-italic}、@code{reverse-oblique}のいずれか。可変輝度テキストをサポートするテキスト端末では、slantされたテキストはhalf-brightで表示される。

@item :foreground
フォアグラウンドカラー(文字列)。値にはシステム定義済みカラー、または16進カラー仕様を指定できる。@ref{Color
Names}を参照のこと。白黒ディスプレイでは、特定のグレー色調が点描パターンで実装されている。

@item :distant-foreground
代替えのフォアグラウンドカラー(文字列)。これは@code{:foreground}と似ているが、使用されるであろうフォアグラウンドカラーが、バックグラウンドカラーに近いときのみフォアグラウンドカラーとして使用される点が異なる。これはたとえばテキストをマーク時(リージョンフェイス)に有用である。そのテキストが、リージョンフェイスとして可視なフォアグラウンドをもつ場合は、そのフォアグラウンドが使用される。フォアグラウンドがリージョンフェイスのバックグラウンドに近ければ、テキストを可読にするために@code{:distant-foreground}が使用される。

@item :background
バックグラウンドカラー(文字列)。値にはシステム定義済みカラー、または16進カラー仕様を指定できる。@ref{Color Names}を参照のこと。

@cindex underlined text
@item :underline
文字にアンダーラインを引くべきか否かと、その方法。@code{:underline}属性として可能な値は以下のとおり:

@table @asis
@item @code{nil}
アンダーラインを引かない。

@item @code{t}
そのフェイスのフォアグラウンドカラーでアンダーラインを引く。

@item @var{color}
文字列@var{color}で指定されたカラーでアンダーラインを引く。

@item @code{(:color @var{color} :style @var{style})}
@var{color}は文字列、またはそのフェイスのフォアグラウンドカラーを意味するシンボル@code{foreground-color}。属性@code{:color}の省略は、そのフェイスのフォアグラウンドカラーの使用を意味する。@var{style}には直線を意味する@code{line}、または波線を意味する@code{wave}いずれかのシンボルであること。属性@code{:style}の省略は直線を意味する。
@end table

@cindex overlined text
@item :overline
文字にオーバーラインを引くべきか否かと、そのカラー。値が@code{t}なら、そのフェイスのフォアグラウンドカラーを使用してオーバーラインを引く。値が文字列なら、そのカラーを使用してオーバーラインを引く。値@code{nil}はオーバーラインを引かないことを意味する。

@cindex strike-through text
@item :strike-through
文字に取り消し線を引くべきか否かと、そのカラー。値は@code{:overline}で使用される値と同じ。

@cindex 2D box
@cindex 3D box
@item :box
文字周囲に枠(box)を描画するか否か、そのカラー、枠線の幅、3D外観。以下は@code{:box}の可能な値と意味である:

@table @asis
@item @code{nil}
枠を描画しない。

@item @code{t}
幅1の枠線、フォアグラウンドカラーで枠を描画する。

@item @var{color}
幅1の枠線、カラー@var{color}で枠を描画する。

@item @code{(:line-width @var{width} :color @var{color} :style @var{style})}
この方法では、枠のすべての形相を明示的に指定できる。値@var{width}は描画する線の幅を指定し、デフォルトは1。負の幅@var{-n}は、基礎テキストのスペースを占有する線幅@var{n}を意味し、文字の高さまたは幅を避けることができる。

値@var{color}は描画するカラーを指定する。シンプルな枠線ではフェイスのフォアグラウンドカラー、3D枠線ではフェイスのバックグラウンドカラーがデフォルト。

値@var{style}は3D枠線を描画するか否かを指定する。@code{released-button}なら、枠は押下された3Dボタンのような外観、@code{pressed-button}なら押下されていない3Dボタンのような外観、@code{nil}または省略された場合は2D枠線が使用される。
@end table

@item :inverse-video
文字が反転表示されて表示されるべきか否か。値は@code{t}(反転表示する)、または@code{nil}(反転表示しない)であること。

@item :stipple
バックグラウンドの点描(ビットマップ)。

値には文字列を指定でき、それは外部形式Xビットマップデータを含むファイルの名前であること。ファイルは変数@code{x-bitmap-file-path}にリストされるディレクトリー内で検索される。

かわりに@code{(@var{width} @var{height}
@var{data})}という形式のリストにより、ビットマップで直接値を指定できる。ここで@var{width}と@var{height}はピクセル単位によるサイズ、@var{data}は行単位でビットマップのrawビットを含む文字列。各行は文字列内で連続する@math{(@var{width}
+ 7) / 8}バイトを占める(最善の結果を得るためにはユニバイト文字列であるべき)。これは各行が常に少なくとも、1バイト全体を占めることを意味する。

値が@code{nil}なら、点描パターンを使用しないことを意味する。

これは特定のグレー色調を処理するために自動的に使用されるので、通常はstipple属性のセットは必要ない。

@item :font
そのフェイスの表示に使用されるフォント。値はフォントオブジェクトであること。フォントオブジェクト、フォントスペース、フォントエンティティーに関する情報は、@ref{Low-Level
Font}を参照のこと。

@code{set-face-attribute}(@ref{Attribute
Functions}を参照)を使用してこの属性を指定する際にはフォントspec、フォントエンティティー、または文字列を与えることもできる。Emacsはそのような値を適切なフォントオブジェクトに変換して、実際の属性値としてそのフォントオブジェクトを格納する。文字列を指定する場合、その文字列のコンテンツはフォント名であること(@ref{Fonts,,,
emacs, The GNU Emacs
Manual}を参照)。フォント名がワイルドカードを含むXLFDなら、Emacsはそれらのワイルドカードに最初にマッチするフォントを選択する。この属性の指定により、@code{:family}、@code{:foundry}、@code{:width}、@code{:height}、@code{:weight}、@code{:slant}の属性値も変更される。

@cindex inheritance, for faces
@item :inherit
属性を継承するフェイス名、またはフェイス名のリスト。継承フェイス由来の属性は、基礎フェイスより高い優先度で、基礎フェイスの場合と同じような方法でマージされる(@ref{Displaying
Faces}を参照)。フェイスのリストが使用された場合、リスト内先頭側フェイスの属性が末尾側フェイスの属性をオーバーライドする。
@end table

@defun font-family-list &optional frame
この関数は、利用可能なフォントファミリー名のリストをリターンする。オプション引数@var{frame}はそのテキストが表示されるフレームを指定する。これが@code{nil}なら選択されたフレームが使用される。
@end defun

@defopt underline-minimum-offset
この変数は、アンダーラインが引かれたテキスト表示時に、ベースラインとアンダーライン間の最小距離を、ピクセル単位で指定する。
@end defopt

@defopt x-bitmap-file-path
この変数は@code{:stipple}属性のビットマップファイルを検索する、ディレクトリーのリストを指定する。
@end defopt

@defun bitmap-spec-p object
これは@var{object}が、@code{:stipple}(上記参照)での使用に適す有効なビットマップ仕様なら@code{t}、それ以外なら@code{nil}をリターンする。
@end defun

@node Defining Faces
@subsection Defining Faces
@cindex defining faces

@cindex face spec
  フェイスを定義する通常の方法は、@code{defface}マクロを通じて定義する方法です。このマクロはフェイス名(シンボル)を、デフォルトの@dfn{フェイスspec(face
spec)}と関連付けます。フェイスspecは、任意の与えられた端末上でフェイスがどの属性をもつべきかを指定する構成です。たとえばあるフェイスspecは、高カラー端末ではあるフォアグラウンドカラーを指定し、低カラー端末では異なるフォアグラウンドカラーを指定するかもしれません。

  値がフェイス名であるような変数を作りたがる人がいます。ほとんどの場合、これは必要ありません。通常手順は、@code{defface}でフェイスを定義して、その名前を直接使用することです。

@defmac defface face spec doc [keyword value]@dots{}
このマクロは、@var{spec}によりデフォルトフェイスspecが与えられるような、名前つきフェイスとして@var{face}を宣言する。シンボル@var{face}はクォートせず、@samp{-face}で終わらないこと(冗長であろう)。引数@var{doc}は、そのフェイスにたいするドキュメント文字列。追加の@var{keyword}引数は、@code{defgroup}および@code{defcustom}の場合と同じ意味をもつ(@ref{Common
Keywords}を参照)。

If @var{face} already has a default face spec, this macro does nothing.

デフォルトフェイスspecは、何もカスタマイゼーション(@ref{Customization}を参照)の効果がないときに、@var{face}の外観を決定する。@var{face}が、(Customテーマやinitファイルから読み込んだカスタマイズにより)すでにカスタマイズ済みなら、その外観はデフォルトフェイスspecの@var{spec}をオーバーライドする、カスタムフェイスspecにより決定される。しかしその後カスタマイゼーションが削除されたなら、@var{face}の外観は再びそのデフォルトフェイスspecにより決定されるだろう。

例外として、Emacs
Lispモードで@kbd{C-M-x}(@code{eval-defun})から@code{defface}を評価した場合は、@code{eval-defun}の特別な機能により、@code{defface}が何を指示するかをフェイスが正確に反映するように、そのフェイス上の任意のカスタムフェイスをオーバーライドする。

@var{spec}引数は、異なる種別の端末上でそのフェイスがどのような外観で表示されるべきかを示す、@dfn{フェイスspec}である。これは各要素が以下の形式であるようなalistであること

@example
(@var{display} . @var{plist})
@end example

@noindent
@var{display}は端末のクラス(以下参照)を指定する。@var{plist}は、そのような端末上でフェイスがどのような外観かを指定する、フェイス属性とその値からなるプロパティリストであること。後方互換性のために、@code{(@var{display}
@var{plist})}のように要素を記述することもできる。

@var{spec}の要素の@var{display}の部分は、その要素がマッチする端末を決定する。与えられた端末にたいして複数の要素がマッチした場合は、最初にマッチした要素がその端末にたいして使用される。@var{display}には以下の3つが可能:

@table @asis
@item @code{default}
@var{spec}のこの要素は、どの端末にもマッチしない。かわりにすべての端末に適用されるデフォルトを指定する。この要素が仕様された場合は、@var{spec}の最初の要素でなければならない。この後の要素はこれらのデフォルトの一部、またはすべてをオーバーライドできる。

@item @code{t}
@var{spec}のこの要素は、すべての端末にマッチする。したがって@var{spec}の後続要素が使用されることはない。通常@code{t}は、@var{spec}の最後(または唯一)の要素として使用される。

@item リスト
@var{display}がリストなら、各要素は@code{(@var{characteristic}
@var{value}@dots{})}という形式をもつこと。ここで@var{characteristic}は端末をクラス分けする方法、@var{value}は@var{display}に適用されるべき可能なクラス分類である。@var{characteristic}で利用可能な値は:

@table @code
@item type
その端末が使用するウィンドウシステムの種類で@code{graphic}(任意のグラフィック対応ディスプレイ)、@code{x}、@code{pc}(MS-DOSコンソール)、@code{w32}
(MS Windows 9X/NT/2K/XP)、または@code{tty}(グラフィック非対応ディスプレイ)のいずれか。@ref{Window
Systems, window-system}を参照のこと。

@item class
その端末がサポートするカラーの種類で、@code{color}、@code{grayscale}、または@code{mono}のいずれか。

@item background
バックグラウンドの種類で@code{light}か@code{dark}のいずれか。

@item min-colors
その端末がサポートするべき最小カラー数を表す整数。端末の@code{display-color-cells}の値が少なくとも指定された整数なら、その端末にマッチする。

@item supports
その端末が@var{value}@dots{}で与えられたフェイス属性を表示可能か否か(@ref{Face
Attributes}を参照)。このテストがどのように行われるかについてのより正確な情報は、@ref{Display Face Attribute
Testing}を参照のこと。
@end table

与えられた@var{characteristic}にたいして、@var{display}の要素が複数の@var{value}を指定する場合は、いずれの値も許容され得る。@var{display}が複数の要素をもつ場合、各要素は異なる@var{characteristic}を指定すること。その端末の@emph{それぞれ}のcharacteristicは、@var{display}内で指定された値のいずれか1つとマッチしなければならない。
@end table
@end defmac

  たとえば以下は、標準フェイス@code{highlight}の定義です:

@example
(defface highlight
  '((((class color) (min-colors 88) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 88) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 16) (background light))
     :background "darkseagreen2")
    (((class color) (min-colors 16) (background dark))
     :background "darkolivegreen")
    (((class color) (min-colors 8))
     :background "green" :foreground "black")
    (t :inverse-video t))
  "Basic face for highlighting."
  :group 'basic-faces)
@end example

  内部的には、Emacsはフェイスのシンボルプロパティ@code{face-defface-spec}内にそれぞれのフェイスのデフォルトspecを格納します(@ref{Symbol
Properties}を参照)。@code{saved-face}プロパティは、カスタマイゼーションバッファーを使用してユーザーが保存した、任意のフェイスspecを格納します。@code{customized-face}プロパティは、カレントセッションにたいしてカスタマイズされた保存されていないフェイスspecを格納します。そして@code{theme-face}プロパティは、そのフェイスにたいするアクティブなカスタマイゼーションセッティングと、フェイスspecをもつCustomテーマを関連付けるalistです。そのフェイスのドキュメント文字列は、@code{face-documentation}プロパティ内に格納されます。

  通常フェイスは@code{defface}を使用して1回だけ宣言され、その外観にたいするそれ以上の変更はCustomizeフレームワーク(Customizeユーザーインターフェース、または@code{custom-set-faces}関数を通じて。@ref{Applying
Customizations}を参照されたい)、またはフェイスリマッピング(@ref{Face
Remapping}を参照)により行われます。Lispから触接フェイスspec変更を要する稀な機会では、@code{face-spec-set}関数を使用できます。

@defun face-spec-set face spec &optional spec-type
この関数は、@code{face}にたいするフェイスspecとして、@var{spec}を適用する。@var{spec}は、上述した@code{defface}にたいするフェイスspecであること。

この関数は、もしそれが既存のものでなければ、有効なフェイス名として@var{face}を定義して、既存フレームのその属性を(再)計算することも行う。

@cindex override spec @r{(for a face)}
引数@var{spec-type}は、どのspecをセットするべきかを決定する。これが@code{nil}または@code{face-override-spec}なら、この関数は@dfn{オーバーライドspec(override
spec)}をセットする。これは@var{face}上の他のすべてのフェイスspecをオーバーライドする。@code{customized-face}または@code{saved-face}なら、この関数はカスタマイズされたspec、または保存されたカスタムspecをセットする。@code{face-defface-spec}なら、この関数はデフォルトフェイスspec(@code{defface}によりセットされるものと同一)をセットする。@code{reset}なら、この関数は@var{face}からすべてのカスタマイゼーションspecとオーバーライドspecをクリアーする(この場合、@var{spec}の値は無視される)。@var{spec-type}にたいする他のすべての値は、内部的な使用のために予約済みである。
@end defun

@node Attribute Functions
@subsection Face Attribute Functions
@cindex face attributes, access and modification

  このセクションでは、名前つきフェイスの属性に直接アクセスしたり、変更する関数を説明します。

@defun face-attribute face attribute &optional frame inherit
この関数は、@var{frame}上の@var{face}にたいする、属性@var{attribute}の値をリターンする。

@var{frame}が@code{nil}なら、それは選択されたフレームを意味する(@ref{Input
Focus}を参照)。@var{frame}が@code{t}なら、この関数は新たに作成されるフレームにたいする、指定された属性の値をリターンする(これは下記の@code{set-face-attribute}を使用して何らかの値を指定していなければ、通常は@code{unspecified}である)。

@var{inherit}が@code{nil}なら、@var{face}により定義される属性だけが考慮されるので、リターンされる値は@code{unspecified}、または相対的な値かもしれない。@var{inherit}が非@code{nil}なら、@var{face}の@var{attribute}の定義が、@code{:inherit}属性で指定されたフェイスとマージされる。しかしリターンされる値は依然として@code{unspecified}、または相対的な値かもしれない。@var{inherit}がフェイス、またはフェイスのリストなら、指定された絶対的な値になるまで、結果はそのフェイス(1つ以上)と更にマージされる。

リターン値が指定されていて、かつ絶対的であることを保証するためには、@var{inherit}にたいして@code{default}の値を使用すること。(常に完全に指定される)@code{default}フェイスとマージすることにより、すべての未指定または相対的な値は解決されるだろう。

たとえば

@example
(face-attribute 'bold :weight)
     @result{} bold
@end example
@end defun

@c FIXME: Add an index for "relative face attribute", maybe here?  --xfq
@defun face-attribute-relative-p attribute value
この関数は@var{value}がフェイス属性@var{attribute}の値として使用された際に相対的なら、非@code{nil}をリターンする。This
function returns non- if , when used as the value of the face attribute , is
relative.これはフェイスリスト内の後続のフェイス、または継承した他のフェイスが由来となる、任意の値で完全にオーバーライドするのではなく、変更されるであろうことを意味する。

すべての属性にたいして、@code{unspecified}は相対的な値である。@code{:height}にたいしては、浮動小数点数と関数値も相対的である。

たとえば:

@example
(face-attribute-relative-p :height 2.0)
     @result{} t
@end example
@end defun

@defun face-all-attributes face &optional frame
この関数は、@var{face}の属性のalistをリターンする。結果の要素は、@w{@code{(@var{attr-name}
.
@var{attr-value})}}という形式の、名前/値ペアーである。オプション引数@var{frame}は、リターンするべき@var{face}の定義をもつフレームを指定する。省略または@code{nil}なら、リターン値には新たに作成されるフレームにたいする、@var{face}のデフォルト属性が記述される。
@end defun

@defun merge-face-attribute attribute value1 value2
@var{value1}がフェイス属性@var{attribute}にたいして相対的な値なら、基礎的な値@var{value2}とマージしてリターンする。それ以外の場合、@var{value1}がフェイス属性@var{attribute}にたいして絶対的な値なら、@var{value1}を変更せずにリターンする。
@end defun

  通常、Emacsは各フレームのフェイス属性を自動的に計算するために、各フェイスのフェイスspecを使用します(@ref{Defining
Faces}を参照)。関数@code{set-face-attribute}は、特定またはすべてのフレームのフェイスに直接属性を割り当てることにより、この計算をオーバーライドできます。この関数は主として、内部的な使用を意図したものです。

@defun set-face-attribute face frame &rest arguments
この関数は、@var{frame}にたいする@var{face}の1つ以上の属性をセットする。この方法で指定された属性は、@var{face}に属するフェイスspec(1つ以上)をオーバーライドする。

余分の引数@var{arguments}は、セットするべき属性と、それらの値を指定する。これらは、(@code{:family}や@code{:underline}のような)属性名と、値が交互になるよう構成されていること。すなわち、

@example
(set-face-attribute 'foo nil :weight 'bold :slant 'italic)
@end example

@noindent
これは属性@code{:weight}を@code{bold}、.属性@code{:slant}を@code{italic}にセットする。


@var{frame}が@code{t}なら、この関数は新たに作成されるフレームにたいする、デフォルト属性をセットする。@var{frame}が@code{nil}なら、この関数はすべての既存フレーム、同様に新たに作成されるフレームにたいして、その属性をセットする。
@end defun

  以下のコマンドと関数は主として、古いバージョンのEmacsにたいする互換性のために提供されます。これらは@code{set-face-attribute}を呼び出すことにより機能します。これらの@var{frame}引数にたいする値@code{t}と@code{nil}は、@code{set-face-attribute}および@code{face-attribute}の場合と同様に処理されます。コマンドがインタラクティブに呼び出された場合は、ミニバッファーを使用して引数を読み取ります。

@deffn Command set-face-foreground face color &optional frame
@deffnx Command set-face-background face color &optional frame
これらはそれぞれ@var{face}の@code{:foreground}属性、または@code{:background}属性に@var{color}をセットする。
@end deffn

@deffn Command set-face-stipple face pattern &optional frame
これは@var{face}の@code{:stipple}属性に、@var{pattern}をセットする。
@end deffn

@deffn Command set-face-font face font &optional frame
これは@var{face}の@code{:font}属性に、@var{font}をセットする。
@end deffn

@defun set-face-bold face bold-p &optional frame
これは@var{face}の@code{:weight}属性にたいして、@var{bold-p}が@code{nil}なら@var{normal}、それ以外なら@var{bold}をセットする。
@end defun

@defun set-face-italic face italic-p &optional frame
これは@var{face}の@code{:slant}属性にたいして、@var{italic-p}が@code{nil}なら@var{normal}、それ以外なら@var{italic}をセットする。
@end defun

@defun set-face-underline face underline &optional frame
これは@var{face}の@code{:underline}属性に、@var{underline}をセットする。
@end defun

@defun set-face-inverse-video face inverse-video-p &optional frame
これは@var{face}の@code{:inverse-video}属性に、@var{inverse-video-p}をセットする。
@end defun

@deffn Command invert-face face &optional frame
これはフェイス@var{face}のフォアグラウンドカラーとバックグラウンドカラーを交換する。
@end deffn

  以下は、フェイスの属性を調べる関数です。これらは主として、古いバージョンのEmacsとの互換性のために提供されます。これらにたいして@var{frame}を指定しなければ選択されたフレームを、@code{t}なら新たなフレームにたいするデフォルトデータを参照します。フェイスがその属性にたいして何の値も定義していなければ、@code{unspecified}がリターンされます。@var{inherit}が@code{nil}なら、そのフェイスにより直接定義された属性だけがリターンされます。@var{inherit}が非@code{nil}なら、そのフェイスの@code{:inherit}属性により指定される任意のフェイスを、@var{inherit}がフェイスまたはフェイスのリストなら、指定された属性が見つかるまで、それらも考慮されます。リターンされる値が常に指定された値であることを保証するためには、@var{inherit}にたいして値@code{default}を使用してください。

@defun face-font face &optional frame
この関数は、フェイス@var{face}のフォント名をリターンする。
@end defun

@defun face-foreground face &optional frame inherit
@defunx face-background face &optional frame inherit
これらの関数はそれぞれ、フェイス@var{face}のフォアグラウンドカラーまたはバックグラウンドカラーを、文字列としてリターンする。
@end defun

@defun face-stipple face &optional frame inherit
この関数は、フェイス@var{face}のバックグラウンド点描パターンの名前、もしなければ@code{nil}をリターンする。
@end defun

@defun face-bold-p face &optional frame inherit
この関数は@var{face}の@code{:weight}属性がnormalよりbold寄り(@code{semi-bold}、@code{bold}、
@code{extra-bold}、@code{ultra-bold}のいずれか)なら、非@code{nil}、それ以外なら@code{nil}をリターンする。
@end defun

@defun face-italic-p face &optional frame inherit
この関数は、@var{face}の@code{:slant}属性が@code{italic}か@code{oblique}なら非@code{nil}、それ以外なら@code{nil}をリターンする。
@end defun

@defun face-underline-p face &optional frame inherit
この関数は、フェイス@var{face}が非@code{nil}の@code{:underline}属性を指定する場合は、非@code{nil}をリターンする。
@end defun

@defun face-inverse-video-p face &optional frame inherit
この関数は、フェイス@var{face}が非@code{nil}の@code{:inverse-video}属性を指定する場合は、非@code{nil}をリターンする。
@end defun

@node Displaying Faces
@subsection Displaying Faces
@cindex displaying faces
@cindex face merging

  Emacsが与えられたテキスト断片を表示する際、そのテキストの視覚的外観は異なるソースから描画されるフェイスにより決定されるかもしれません。これら種々のソースが、特定の文字にいたいして複数のフェイスを指定する場合、Emacsはそれらのさまざまなフェイスの属性をマージします。以下に、Emacsがフェイスをマージする順序を優先度順に記します:

@itemize @bullet
@item
そのテキストが特別なグリフで構成される場合、そのグリフは特定のフェイスを指定できる。@ref{Glyphs}を参照のこと。

@item
アクティブなリージョンにテキストがある場合、Emacsは@code{region}フェイスを使用してそれをハイライトする。@ref{Standard
Faces,,, emacs, The GNU Emacs Manual}を参照のこと。

@item
非@code{nil}の@code{face}属性をもつオーバーレイにテキストがある場合、Emacsはそのプロパティにより指定されるフェイス(1つ以上)を適用する。そのオーバーレイが@code{mouse-face}プロパティをもち、マウスがそのオーバーレイに``十分に近い''場合、Emacsはかわりに@code{mouse-face}で指定されるフェイスまたはフェイス属性を適用する。@ref{Overlay
Properties}を参照のこと。

1つの文字を複数のオーバーレイがカバーする場合は、高優先度のオーバーレイが低優先度のオーバーレイをオーバーライドする。@ref{Overlays}を参照のこと。

@item
そのテキストが@code{face}または@code{mouse-face}プロパティを含む場合、Emacsは指定されたフェイスおよびフェイス属性を適用する。@ref{Special
Properties}を参照のこと(これはFont Lockモードのフェイス適用方法である。@ref{Font Lock Mode}を参照されたい)。

@item
そのテキストが選択されたウィンドウのモードラインにある場合、Emacsは@code{mode-line}フェイスを適用する。選択されていないウィンドウのモードラインでは、Emacsは@code{mode-line-inactive}フェイスを使用する。ヘッダーラインにたいしては、Emacsは@code{header-line}フェイスを適用する。

@item
先行ステップの間に、与えられた属性が指定されなければ、Emacsは@code{default}フェイスの属性を適用する。
@end itemize

  各ステージにおいて、フェイスが有効な@code{:inherit}属性をもつ場合、Emacsは値@code{unspecified}をもつすべての属性が、親フェイス(1つ以上)由来で描画される、対応する値をもつものとして扱います。@ref{Face
Attributes}を参照してください。親フェイスでも、属性がunspecifiedのままかもしれないことに注意してください。その場合には、フェイスマージの次レベルでも、その属性はunspecifiedのままです。

@node Face Remapping
@subsection Face Remapping
@cindex face remapping

  変数@code{face-remapping-alist}は、あるフェイスの外観のバッファーローカル、またはグローバルな変更にたいして使用されます。たとえばこれは、@code{text-scale-adjust}コマンド(@ref{Text
Scale,,, emacs, The GNU Emacs Manual}を参照)の実装に使用されています。

@defvar face-remapping-alist
この変数の値は、要素が@code{(@var{face}
.
@var{remapping})}という形式をもつalistである。これによりEmacsは、フェイス@var{face}をもつ任意のテキストを、通常の@var{face}の定義ではなく、@var{remapping}で表示する。

@var{remapping}には、テキストプロパティ@code{face}にたいして適切な任意のフェイスspec、すなわちフェイス(フェイス名または属性/値ペアーのプロパティリスト)、またはフェイスのリストのいずれかを指定できる。詳細は、@ref{Special
Properties}の@code{face}テキストプロパティの記述を参照のこと。@var{remapping}はリマップされるフェイスにたいる、完全な仕様としての役目をもつ。これは通常の@var{face}を変更せずに置き換える。

@code{face-remapping-alist}がバッファーローカルなら、そのローカル値はそのバッファーでのみ効果をもつ。

注意:
フェイスのリマッピングは再帰的ではない。@var{remapping}が同じフェイス名@var{face}を参照する場合、直接または@var{remapping}内の他の何らかのフェイスの@code{:inherit}属性を通じて、その参照は@var{face}の通常の定義を使用する。たとえば@code{mode-line}フェイスが、@code{face-remapping-alist}内の以下のエントリーでリマップされる場合:

@example
(mode-line italic mode-line)
@end example

@noindent
@code{mode-line}フェイスの新たな定義は@code{italic}フェイス、および(リマップされていない)@emph{通常}の@code{mode-line}フェイスの定義から継承される。
@end defvar

@cindex relative remapping, faces
@cindex base remapping, faces
  以下の関数は、@code{face-remapping-alist}にたいする高レベルなインターフェースを実装します。ほとんどのLispコードは、リマッピングが他の場所に適用されてしまうのを避けるために、@code{face-remapping-alist}を直接セットするのではなく、これらの関数を使用するべきです。これらの関数はバッファーローカルなリマッピングを意図しており、すべてが副作用として@code{face-remapping-alist}をバッファーローカルにします。これらは、以下の形式の@code{face-remapping-alist}エントリーを管理します

@example
  (@var{face} @var{relative-spec-1} @var{relative-spec-2} @var{...} @var{base-spec})
@end example

@noindent
上述したように、@var{relative-spec-N}と@var{base-spec}はそれぞれ、フェイス名または属性/値ペアーのプロパティリストです。@dfn{相対的リマッピング(relative
remapping)}エントリー@var{relative-spec-N}はそれぞれ、@code{face-remap-add-relative}および@code{face-remap-remove-relative}関数により管理されます。これらはテキストサイズ変更のような、単純な変更を意図しています。@dfn{ベースリマッピング(base
remapping)}エントリー@var{base-spec}は最低の優先度をもち、@code{face-remap-set-base}および@code{face-remap-reset-base}関数により管理されます。これは、メジャーモードが制御下のバッファーでフェイスをリマップするために用いることを意図しています。

@defun face-remap-add-relative face &rest specs
この関数は、カレントバッファー内のフェイス@var{face}にたいして、相対的リマッピングとして、@var{specs}内にフェイスspecを追加する。残りの引数@var{specs}はフェイス名のリスト、または属性/値ペアーのプロパティリストという、いずれかの形式であること。

リターン値は、``cookie''としての役目をもつLispオブジェクトである。後でそのリマッピングの削除を要する場合は、引数として@code{face-remap-remove-relative}にこのオブジェクトを渡すことができる。

@example
;; `escape-glyph'フェイスを`highlight'と`italic'
;; の組み合わせにリマップ:
(face-remap-add-relative 'escape-glyph 'highlight 'italic)

;; `default'フェイスのサイズを50%増加:
(face-remap-add-relative 'default :height 1.5)
@end example
@end defun

@defun face-remap-remove-relative cookie
この関数は、以前@code{face-remap-add-relative}で追加された相対的リマッピングを削除する。@var{cookie}は、そのリマッピングが追加されたときに、@code{face-remap-add-relative}がリターンしたLispオブジェクトであること。
@end defun

@defun face-remap-set-base face &rest specs
この関数は、カレントバッファー内の@var{face}のベースリマッピングを、@var{specs}にセットする。@var{specs}が空なら、@code{face-remap-reset-base}(以下参照)を呼び出したように、デフォルトベースリマッピングがリストアされる。これは単一の値@code{nil}を含む@var{specs}とは異なることに注意。これは逆の結果をもたらす(@var{face}のグローバル定義は無視される)。

これは、グローバルなフェイス定義を継承した、デフォルトの@var{base-spec}を上書きするので、必要ならそのような継承を追加するのは呼び出し側の責任である。
@end defun

@defun face-remap-reset-base face
この関数は、@var{face}のベースリマッピングに、@var{face}のグローバル定義から継承した、デフォルト値にセットする。
@end defun

@node Face Functions
@subsection Functions for Working with Faces

  以下はフェイスを作成および処理するための、追加の関数です。

@defun face-list
この関数は、すべての定義済みフェイス名のリストをリターンする。
@end defun

@defun face-id face
この関数は、フェイス@var{face}の@dfn{フェイス番号(face
number)}をリターンする。これはEmacs内の低レベルで、フェイスを一意に識別する番号である。フェイス番号によるフェイス参照を要するのは稀である。
@end defun

@defun face-documentation face
この関数は、フェイス@var{face}のドキュメント文字列、それが指定されていなければ@code{nil}をリターンする。
@end defun

@defun face-equal face1 face2 &optional frame
これは、フェイス@var{face1}とフェイス@var{face2}が、表示にたいして同じ属性をもつなら@code{t}をリターンする。
@end defun

@defun face-differs-from-default-p face &optional frame
これはフェイス@var{face}の表示がデフォルトフェイスと異なるなら、非@code{nil}をリターンする。
@end defun

@cindex face alias
@cindex alias, for faces
@dfn{フェイスエイリアス(face
alias)}は、あるフェイスにたいして等価な名前を提供します。エイリアスシンボルの@code{face-alias}プロパティに対象となるフェイス名を与えることにより、フェイスエイリアスを定義できます。以下の例では、@code{mode-line}フェイスにたいするエイリアスとして、@code{modeline}を作成します。

@example
(put 'modeline 'face-alias 'mode-line)
@end example

@defmac define-obsolete-face-alias obsolete-face current-face when
このマクロは、@var{current-face}のエイリアスとして@code{obsolete-face}を定義するとともに、将来に削除されるかもしれないことを示すためにobsolete(時代遅れ)とマークする。@var{when}は、@code{obsolete-face}がobsoleteになる時期を示す文字列(通常はバージョン番号文字列)であること。
@end defmac

@node Auto Faces
@subsection Automatic Face Assignment
@cindex automatic face assignment
@cindex faces, automatic choice

  以下のフックは、バッファー内のテキストに自動的にフェイスを割り当てるために使用されます。これはJit-Lockモードの実装の一部であり、Font-Lockにより使用されます。

@defvar fontification-functions
この変数は、再表示を行う直前に、Emacsの再表示により呼び出される関数のリストを保持する。これらはFont
Lockが有効でないときでも呼び出される。Font
Lockモードが有効なら、この変数は通常は単一の関数@code{jit-lock-function}だけを保持する。

関数は、バッファー位置@var{pos}を単一の引数として、リストされた順に呼び出される。これらは、カレントバッファー内の@var{pos}で開始されるテキストにたいして、集合的にフェイスの割り当てを試みるべきである。

関数は@code{face}プロパティをセットするおとにより、割り当てるフェイスを記録すること。またフェイスを割り当てたすべてのテキストに、非@code{nil}の@code{fontified}プロパティも追加するべきである。このプロパティは再表示に、そのテキストにたいしてそのフェイスがすでに割り当て済みであることを告げる。

@var{pos}の後の文字がすでに非@code{nil}の@code{fontified}プロパティをもつが、フォント表示化を要さない場合に、何も行わない関数を追加するのは、おそらくよいアイデアである。ある関数が、前の関数による割り当てをオーバーライドする場合には、実際に問題となるのは最後の関数終了後のプロパティである。

効率化のために、通常は各呼び出しにおいて400から600前後の文字にフェイスを割り当てるように、これらの関数を記述することを推奨する。
@end defvar

@node Basic Faces
@subsection Basic Faces
@cindex basic faces

テキストにたいしてEmacs
Lispプログラムが何らかのフェイス割り当てを要する場合は、完全に新たなフェイスを定義するより、特定の既存フェイス、またはそれらを継承したフェイスを使用するほうが、よいアイデアである場合がしばしばあります。Emacsに特定の外観を与えるために別のユーザーが基本フェイス(basic
face)をカスタマイズしていても、この方法なら追加のカスタマイズなしでプログラムは``適合''することでしょう。

  以下にEmacsが定義する基本フェイスのいくつかをリストしました。これらに加えて、ハイライトがFont
Lockモードによりまだ処理されていなかったり、いくつかのFont Lockフェイスが使用されていなければ、構文的ハイライトのために、Font
Lockフェイスを使うようにしたいと思うかもしれません。@ref{Faces for Font Lock}を参照してください。

@table @code
@item default
属性がすべて指定されたデフォルトフェイス。他のすべてのフェイスは、暗にこのフェイスを継承する。未指定(unspecified)な任意の属性は、このフェイスの属性をデフォルトとする(@ref{Face
Attributes}を参照)。

@item bold
@itemx italic
@itemx bold-italic
@itemx underline
@itemx fixed-pitch
@itemx variable-pitch
これらは、名前に示されるような属性をもち(@code{bold}はboldの@code{:weight}属性をもつ)、それ以外のすべての属性は未指定である(そのため@code{default}により与えられる)。

@item shadow
テキストの``淡色表示(dimmed
out)''用。たとえばこれは、ミニバッファー内で無視されるファイル名部分に使用される(@ref{Minibuffer File,,
Minibuffers for File Names, emacs, The GNU Emacs Manual}を参照)。

@item link
@itemx link-visited
ユーザーを別のバッファーや``位置''へと送る、クリック可能テキストボタン用。

@item highlight
一時的に強調するべきテキスト範囲用。たとえば一般的に、カーソルのハイライトには@code{mouse-face}プロパティが割り当てられる(@ref{Special
Properties}を参照)。

@item match
検索コマンドによりマッチしたテキスト用。

@item error
@itemx warning
@itemx success
エラー、警告、成功に関するテキスト用。たとえば@file{*Compilation*}内のメッセージにたいして使用される。
@end table

@node Font Selection
@subsection Font Selection
@cindex font selection
@cindex selecting a font

  Emacsがグラフィカルなディスプレイ上で文字を描画可能になる前に、まずその文字にたいする@dfn{フォント(font)}を選択しなければなりません@footnote{このコンテキストでは、用語@dfn{font}はFont
Lock(@ref{Font Lock Mode}を参照)にたいして何も行いません。}。@ref{Fonts,,, emacs, The GNU
Emacs
Manual}を参照してください。通常、Emacsはその文字に割り当てられたフェイス、特にフェイス属性@code{:family}、@code{:weight}、@code{:slant}、@code{:width}(@ref{Face
Attributes}を参照)にもとづいて、自動的にフォントを選択します。フォントの選択は、表示される文字にも依存します。表示できるのは文字セットが限定されているフォントもいくつかあります。利用可能なフォントがこの要件を完全に満たさない場合、Emacsは@dfn{もっとも近いフォント(closest
matching font)}を探します。このセクション内の変数は、Emacsがこの選択を行う方法を制御します。

@defopt face-font-family-alternatives
あるfamilyが指定されたが存在しない場合、この変数は試みるべき代替えのフォントファミリーを指定する。各要素は以下の形式をもつ:

@example
(@var{family} @var{alternate-families}@dots{})
@end example

@var{family}が指定されたが利用できなければ、Emacsは@var{alternate-families}で与えられるファミリーで存在するものが見つかるまで、1つずつファミリーを試みる。
@end defopt

@defopt face-font-selection-order
希望するすべてのフェイス属性(@code{:width}、@code{:height}、@code{:weight}、@code{:slant})に完全にマッチするフォントが存在しない場合、この変数はもっとも近いフォントの選択時に考慮すべき、これらの属性の順序を指定する。値はこれらの属性シンボルを重要度降順で含むリストであること。デフォルトは@code{(:width
:height :weight :slant)}。

フォント選択はまず、このリスト内の最初の属性にたいして利用可能な最適マッチを探す。その後、この方法で最適なフォントの中から、2つ目の属性にたいして最適なマッチを検索、...のように選択を行う。

属性@code{:weight}および@code{:width}は、@code{normal}を中心とする範囲のような、シンボリック値をもつ。より極端(@code{normal}から離れた)なマッチは、より極端ではない(@code{normal}に近い)マッチより、幾分優先される。これは、可能なかぎり非normalなフェイスが、normalなフェイスとは対照的になることを保証するようにデザインされている。

この変数が違いを生むケースの例は、デフォルトフォントに等価なイタリックがない場合である。デフォルトの順では、@code{italic}フェイスは、デフォルトのフォントに類似した非イタリックのフォントを使用するだろう。しかし@code{:height}の前に@code{:slant}を置くと、@code{italic}フェイスはたとえheightが同じでなくとも、イタリックフォントを使用するだろう。
@end defopt

@defopt face-font-registry-alternatives
この変数は、registryが指定されたがそれが存在しない場合に試みるべき、代替えのフォントレジストリーを指定する。各要素は以下の形式をもつ:

@example
(@var{registry} @var{alternate-registries}@dots{})
@end example

@var{registry}が指定されたが利用できなければ、Emacsは@var{alternate-registries}内で存在するレジストリーが見つかるまで、他のレジストリーを1つずつ試みる。
@end defopt

@cindex scalable fonts
  Emacsがスケーラブルフォントを使用するようにできますが、デフォルトではそれらを使用しないようになっています。

@defopt scalable-fonts-allowed
この変数は、どのスケーラブルフォントを使用するかを制御する。値@code{nil}(デフォルト)は、スケーラブルフォントを使用しないことを意味する。@code{t}はそのテキストにたいして適切と思われる、任意のスケーラブルフォントを使用することを意味する。

それ以外なら、値は正規表現のリストであること。その場合、名前がこのリスト内の正規表現にマッチする、任意のスケーラブルフォントの使用が有効になる。たとえば、

@example
(setq scalable-fonts-allowed '("iso10646-1$"))
@end example

@noindent
これは、レジストリーが@code{iso10646-1}のようなスケーラブルフォントの使用を可能にする。
@end defopt

@defvar face-font-rescale-alist
この変数は、特定のフォントにたいするスケーリングを指定する。値は、以下の形式の要素をもつリストであること

@example
(@var{fontname-regexp} . @var{scale-factor})
@end example

使用しようとするフォントの名前が@var{fontname-regexp}にマッチする場合、これはファクター@var{scale-factor}に対応した、同様な大きさのフォントの選択を指示する。特定のフォントが提示する通常のheightやwidthが大きい、または小さい場合に、フォントサイズを正規化するためにこの機能を使用できるだろう。
@end defvar

@node Font Lookup
@subsection Looking Up Fonts
@cindex font lookup
@cindex looking up fonts

@defun x-list-fonts name &optional reference-face frame maximum width
この関数は、@var{name}にマッチする利用可能なフォント名のリストをリターンする。@var{name}はFontconfig、GTK、またはXLFDのいずれかのフォーマットによるフォント名を含む文字列であること(@ref{Fonts,,,
emacs, The GNU Emacs
Manual}を参照)。XLFD文字列では、ワイルドカード文字が使用できる。@samp{*}文字は任意の部分文字列、@samp{?}は任意の単一文字にマッチする。フォント名のマッチングでは、大文字小文字の違いは無視される。

オプション引数@var{reference-face}および@var{frame}が指定された場合は、リターンされるリストにはその時点でフレーム@var{frame}上での@var{reference-face}(フェイス名)と同じサイズのフォントだけが含まれる。

オプション引数@var{maximum}は、リターンされるフォント数の制限をセットする。これが非@code{nil}なら、リターン値は最初にマッチした@var{maximum}個のフォントの後が切り捨てられる。@var{maximum}に小さい値を指定すれば、そのパターンに多くのフォントがマッチするような場合に、この関数をより高速にできる。

オプション引数@var{width}は、希望するフォントの幅を指定する。これが非@code{nil}なら、この関数は文字の幅(平均)が、@var{reference-face}の@var{width}倍の幅であるようなフォントだけをリターンする。
@end defun

@defun x-family-fonts &optional family frame
この関数は、@var{frame}上のファミリー@var{family}にたいして利用可能なフォントを記述するリストをリターンする。@var{family}が省略または@code{nil}なら、このリストはすべてのファミリーに適用され、すなわち利用可能なすべてのフォントを含む。それ以外なら、@var{family}は文字列であること。これにはワイルドカード@samp{?}と@samp{*}を含めることができる。

このリストは、@var{frame}のあるディスプレイを記述する。@var{frame}が省略または@code{nil}なら、これは選択されたフレームのディスプレイに適用される(@ref{Input
Focus}を参照)。

このリスト内の各要素は、以下の形式のベクターであること:

@example
[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}
 @var{fixed-p} @var{full} @var{registry-and-encoding}]
@end example

最初の5つの要素はフェイス属性に対応する。あるフェイスにたいしてこれらの属性を指定した場合は、このフォントが使用されるだろう。

最後の3つの要素は、そのフォントに関する追加の情報を与える。そのフォントが固定ピッチ(fixed-pitch)でなければ、@var{fixed-p}は非@code{nil}である。@var{full}はそのフォントのフルネーム、@var{registry-and-encoding}はそのフォントのレジストリーとエンコーディングを与える。
@end defun

@node Fontsets
@subsection Fontsets
@cindex fontset

  @dfn{フォントセット(fontset)}とは、それぞれが文字コードの範囲に割り当てられる、フォントのリストのことです。個々のフォントでは、Emacsがサポートする文字の全範囲を表示できませんが、フォントセットであれば表示することができます。フォントのようにフォントセットは名前をもつことができ、フレームやフェイスにたいして``フォント''を指定する際、フォント名としてフォントセット名を使用できます。以下は、Lispプログラム制御下でのフォントセット定義に関する情報です。

@defun create-fontset-from-fontset-spec fontset-spec &optional style-variant-p noerror
この関数は、仕様文字列@var{fontset-spec}に応じて、新たなフォントセットを定義する。この文字列は以下のような形式であること:

@smallexample
@var{fontpattern}, @r{[}@var{charset}:@var{font}@r{]@dots{}}
@end smallexample

@noindent
カンマの前後の空白文字は無視される。

この文字列の最初の部分@var{fontpattern}は、最後の2つのフィールドが@samp{fontset-@var{alias}}であることを除外して、標準Xフォント名形式をもつこと。

新たなフォントセットはlong名とshort名という、2つの名前をもつ。long名は、それ全体が@var{fontpattern}であり、short名は@samp{fontset-@var{alias}}である。いずれの名前でもこのフォントセットを参照できる。同じ名前がすでに存在するフォントセットでは、@var{noerror}が@code{nil}ならエラーがシグナルされ、@var{noerror}が非@code{nil}ならこの関数は何も行わない。

オプション引数@var{style-variant-p}が非@code{nil}なら、そのフォントセットのbold、italic、およびbold-italicも同様に作成するよう指示する。これらの変種フォントセットはshort名をもたず、bold、および/またはitalicを示すように@var{fontpattern}を変更して作成したlong名だけをもつ。

仕様文字列は、そのフォントセット内でどのフォントを使用するかも宣言する。詳細は以下を参照。
@end defun

  構成@samp{@var{charset}:@var{font}}は、ある特定の文字セットにたいして、(このフォントセット内の)どのフォントを使用するかを指定します。ここで@var{charset}は文字セットの名前、@var{font}はその文字セットにたいして使用するフォントです。仕様文字列内で、この構成を任意の回数使用できます。

  明示的に指定しなかった残りの文字セットにたいして、Emacsは@var{fontpattern}にもとづきフォントを選択します。これは@samp{fontset-@var{alias}}を、その文字セットを命名する値に置き換えます。文字セット@acronym{ASCII}にたいしては、@samp{fontset-@var{alias}}は@samp{ISO8859-1}に置き換えられます。

  加えて、後続の複数フィールドがワイルドカードなら、Emacsはそれらを1つのワイルドカードにまとめます。これは自動スケールフォント(auto-scaled
fonts)の使用を防ぐためです。フォントを大きくスケーリングすることにより作成されたフォントは編集に使用できず、小さくスケーリングされたフォントは、それ自身のサイズがより小さいフォントを使用する(Emacsが行う方法)ほうがよいので、有用ではありません。

  つまり、以下のような@var{fontpattern}なら

@example
-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
@end example

@noindent
@acronym{ASCII}にたいするフォントspecは、以下のようになるでしょう:

@example
-*-fixed-medium-r-normal-*-24-*-ISO8859-1
@end example

@noindent
また、Chinese GB2312文字にたいするフォントspecは、以下のようになるでしょう:

@example
-*-fixed-medium-r-normal-*-24-*-gb2312*-*
@end example

  上記のフォントspecにマッチするChineseフォントをもっていないかもしれません。ほとんどのXディストリビューションには、@var{family}フィールドに@samp{song
ti}か@samp{fangsong
ti}をもつChineseフォントだけが含まれます。そのような場合には、以下のように@samp{Fontset-@var{n}}を指定できます:

@smallexample
Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\
        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*
@end smallexample

@noindent
この場合、Chinese
GB2312以外のすべての文にたいするフォントspecは@var{family}フィールドに@samp{fixed}をもち、Chinese
GB2312にたいするフォントspecは@var{family}フィールドにワイルドカード@samp{*}をもちます。

@defun set-fontset-font name character font-spec &optional frame add
この関数は、文字@var{character}にたいして、@var{font-spec}のフォントマッチングを使用するよう、既存のフォントセット@var{name}を変更する。

@var{name}が@code{nil}なら、この関数は@var{frame}のフォントセット、@var{frame}が@code{nil}なら選択されたフレームのフォントセットを変更する。

@var{name}が@code{t}なら、この関数はshort名が@samp{fontset-default}であるような、デフォルトフォントセットを変更する。

@var{character}には@code{(@var{from}
.
@var{to})}のようなコンスを指定できる。ここで@var{from}と@var{to}は文字コードポイントである。この場合、範囲@var{from}から@var{to}(両端を含む)までのすべての文字にたいして、@var{font-spec}を使用する。

@var{character}には文字セットも指定できる。この場合は、その文字セット内のすべての文字にたいして、@var{font-spec}を使用する。

@var{character}にはスクリプト名も指定できる。この場合は、その文字セット内のすべての文字にたいして、@var{font-spec}を使用する。

@var{font-spec}にはコンス@code{(@var{family}
.
@var{registry})}を指定できる。ここで@var{family}はフォントのファミリー名(先頭にfoundry名が含まれるかもしれない)、@var{registry}はフォントのレジストリー名(末尾にエンコーディング名が含まれるかもしれない)である。

@var{font-spec}には、フォント名文字列も指定できる。

オプション引数@var{add}が非@code{nil}なら、以前セットされたフォントspecに@var{font-spec}を追加する方法を指定する。@code{prepend}なら@var{font-spec}は先頭に、@code{append}なら@var{font-spec}は末尾に追加される。デフォルトでは、@var{font-spec}は以前のセッティングをオーバーライドする。

たとえば、以下は文字セット@code{japanese-jisx0208}に属するすえての文字にたいして、ファミリー名が@samp{Kochi
Gothic}であるようなフォントを使用するように、デフォルトフォントセットを変更する。

@smallexample
(set-fontset-font t 'japanese-jisx0208
                  (font-spec :family "Kochi Gothic"))
@end smallexample
@end defun

@defun char-displayable-p char
この関数は、Emacsが@var{char}を表示できるべきなら、@code{t}をリターンする。より正確には、選択されたフレームのフォントセットが、@var{char}が属する文字セットを表示するためのフォントをもつ場合は、@code{t}をリターンする。

フォントセットは、文字単位でフォントを指定できる。フォントセットがこれを行う場合、この関数の値は正確ではないかもしれない。
@end defun

@node Low-Level Font
@subsection Low-Level Font Representation
@cindex font property

  通常は、フォントを直接扱う必要はありません。これを行う必要がある場合には、このセクションでその方法を説明します。

  Emacs Lispでは、フォントは@dfn{フォントオブジェクト(font objects)}、@dfn{フォントspec(font
specs)}、@dfn{フォントエンティティー(font entities)}という、3つの異なるLispオブジェクトを使用して表現されます。

@defun fontp object &optional type
@var{object}がフォントオブジェクト、フォントspec、フォントエンティティーなら@code{t}、それ以外なら@code{nil}をリターンする。

オプション引数@var{type}が非@code{nil}なら、チェックするLispオブジェクトの正確なタイプを決定する。この場合、@var{type}は@code{font-object}、@code{font-spec}、@code{font-entity}のいずれかであること。
@end defun

@cindex font object
  フォントオブジェクトは、Emacsが@dfn{オープンした}フォントを表します。Lispでフォントオブジェクトは変更できませんが、調べることはできます。

@defun font-at position &optional window string
ウィンドウ@var{window}内の位置@var{position}にある文字を表示するために使用されている、フォントオブジェクトをリターンする。@var{window}が@code{nil}の場合のデフォルトは、選択されたウィンドウである。@var{string}が@code{nil}なら、@var{position}はカレントバッファー内の位置を指定する。それ以外なら、@var{string}は文字列で、@var{position}はその文字列内での位置を指定すること。
@end defun

@cindex font spec
  フォントspecは、フォントを探すために使用できる仕様セットを含むLispオブジェクトです。フォントspec内の仕様にたいして、1つ以上のフォントがマッチすることができます。

@defun font-spec &rest arguments
@var{arguments}内の仕様を使用して、新たなフォントspecをリターンする。これは@code{property}-@code{value}のペアーであること。可能な仕様は以下のとおり:

@table @code
@item :name
XLFD、Fontconfig、GTKいずれかのフォーマットによるフォント名(文字列)。@ref{Fonts,,, emacs, The GNU
Emacs Manual}を参照のこと。

@item :family
@itemx :foundry
@itemx :weight
@itemx :slant
@itemx :width
これらは、同名のフェイス属性と同じ意味をもつ。@ref{Face Attributes}を参照のこと。

@item :size
フォントサイズ。非負の整数はピクセル単位、浮動小数点数ならポイントサイズを指定する。

@item :adstyle
@samp{sans}のように、そのフォントにたいするタイポグラフィックスタイル(typographic
style)の追加情報。値は文字列またはシンボルであること。

@cindex font registry
@item :registry
@samp{iso8859-1}のような、フォントの文字セットレジストリーとエンコーディング。値は文字列またはシンボルであること。

@item :script
そのフォントがサポートしなければならないスクリプト(シンボル)。

@item :otf
@cindex OpenType font
Emacsが@samp{libotf}サポートつきでコンパイルされている場合、そのフォントはそれらのOpenType機能をサポートする、OpenTypeフォントでなければならない。値は以下の形式のリストでなければならない

@smallexample
@code{(@var{script-tag} @var{langsys-tag} @var{gsub} @var{gpos})}
@end smallexample

ここで@var{script-tag}はOpenTypeスクリプトタグシンボル、@var{langsys-tag}はOpenType言語システムタグシンボル(@code{nil}ならデフォルト言語システムを使用)、@code{gsub}はOpenType
GSUB機能タグシンボル(何も要求されない場合は@code{nil})、@code{gpos}はOpenType
GPOS機能タグシンボルのリスト(何も要求されない場合は@code{nil})である。@code{gsub}または@code{gpos}がリストなら、そのリスト内の@code{nil}要素は、そのフォントが残りすべてのタグシンボルにマッチしてはならないことを意味する。@code{gpos}は省略することができる。
@end table
@end defun

@defun font-put font-spec property value
フォントspec @var{font-spec}内のプロパティ@var{property}に、@var{value}をセットする。
@end defun

@cindex font entity
  フォントエンティティーは、オープンする必要がないフォントへの参照です。フォントオブジェクトとフォントspecの中間的な性質をもち、フォントspecとは異なり、フォントオブジェクトと同様、単一かつ特定のフォントを参照します。フォントオブジェクトとは異なり、フォントエンティティーの作成では、そのフォントのコンテンツはコンピューターへのメモリーにロードされません。Emacsは、スケーラブルフォントを参照するために単一のフォントエンティティーから、複数の異なるサイズのフォントオブジェクトをオープンするかもしれません。

@defun find-font font-spec &optional frame
この関数は、フレーム@var{frame}上のフォントspec
@var{font-spec}にもっともマッチするフォントエンティティーをリターンする。@var{frame}が@code{nil}の場合のデフォルトは、選択されたフレームである。
@end defun

@defun list-fonts font-spec &optional frame num prefer
この関数は、フォントspec @var{font-spec}にマッチする、すべてのフォントエンティティーのリストをリターンする。

オプション引数@var{frame}が非@code{nil}なら、そのフォントが表示されるフレームを指定する。オプション引数@var{num}が非@code{nil}なら、それはリターンされるリストの最大長を指定する整数だること。オプション引数@var{prefer}が非@code{nil}なら、それはリターンされるリスト順を制御するために使用する、別のフォントspecであること。リターンされるフォントspecはそのフォントspecに``もっとも近い''降順にソートされて格納される。
@end defun

  @code{:font}属性の値としてフォントspec、フォントエンティティー、フォント名文字列を渡して@code{set-face-attribute}を呼び出すと、Emacsは表示に利用できるもっとも``マッチする''フォントをオープンします。そして。そのフェイスにたいする@code{:font}属性の実際の値として、対応するフォントオブジェクトを格納します。

  以下の関数は、フォントに関する情報を取得するために使用できます。これらの関数の@var{font}引数にはフォントオブジェクト、フォントエンティティー、またはフォントspecを指定できます。

@defun font-get font property
この関数は、@var{font}にたいするフォントプロパティ@var{property}の値をリターンする。

@var{font}がフォントspecで、そのフォントspecが@var{property}を指定しなければ、リターン値は@code{nil}である。@var{font}がフォントオブジェクト、またはフォントエンティティーなら、@var{:script}プロパティにたいする値は、そのフォントがサポートするスクリプトのリストかもしれない。
@end defun

@defun font-face-attributes font &optional frame
この関数は、@var{font}に対応するフェイス属性のリストをリターンする。オプション引数@var{frame}は、そのフォントが表示されるフレームを指定する。これが@code{nil}なら、選択されたフレームが使用される。リターン値は以下の形式である

@smallexample
(:family @var{family} :height @var{height} :weight @var{weight}
   :slant @var{slant} :width @var{width})
@end smallexample

ここで@var{family}、@var{height}、@var{weight}、@var{slant}、@var{width}の値は、フェイス属性の値である。@var{font}により指定されない場合いくつかのキー/属性ペアーは、このリストから省略されるかもしれない。
@end defun

@defun font-xlfd-name font &optional fold-wildcards
この関数は、@var{font}にマッチするXLFD((X Logical Font
Descriptor))を文字列としてリターンする。XLFDに関する情報は、@ref{Fonts,,, emacs, The GNU Emacs
Manual}を参照のこと。その名前がXLFD(最大255文字を含むことが可能)にたいして長すぎる場合、この関数は@code{nil}をリターンする。

オプション引数@var{fold-wildcards}が非@code{nil}なら、連続するワイルドカードは1つにまとめられる。
@end defun

@node Fringes
@section Fringes
@cindex fringes

  グラフィカルなディスプレイでは、Emacsは各ウィンドウの隣に@dfn{フリンジ(fringes)}を描画します。これは切り詰め(truncation)、継続(continuation)、水平スクロールを示すビットマップを表示できる、側面の細い垂直ストリップです。

@menu
* Fringe Size/Pos::          ウィンドウフリンジを置く場所を指定する。
* Fringe Indicators::        ウィンドウフリンジ内にインジケーターアイコンを表示する。
* Fringe Cursors::           右フリンジ内にカーソルを表示する。
* Fringe Bitmaps::           フリンジインジケーターにたいしてビットマップを指定する。
* Customizing Bitmaps::      フリンジ内で使用する独自ビットマップの指定。
* Overlay Arrow::            位置を示す矢印の表示。
@end menu

@node Fringe Size/Pos
@subsection Fringe Size and Position

  以下のバッファーローカル変数は、そのバッファーを表示するウィンドウのフリンジの位置と幅を制御します。

@defvar fringes-outside-margins
フリンジは通常、ディスプレイマージンとウィンドウテキストの間に表示される。この値が非@code{nil}なら、フリンジはディスプレイマージンの外側に表示される。@ref{Display
Margins}を参照のこと。
@end defvar

@defvar left-fringe-width
この変数が非@code{nil}なら、それは左フリンジの幅をピクセル単位で指定する。値@code{nil}は、そのウィンドウのフレームの左フリンジ幅を使用することを意味する。
@end defvar

@defvar right-fringe-width
この変数が非@code{nil}なら、それは右フリンジの幅をピクセル単位で指定する。値@code{nil}は、そのウィンドウのフレームの右フリンジ幅を使用することを意味する。
@end defvar

  これらの変数にたいして値を指定しないすべてのバッファーは、フレームパラメーター@code{left-fringe}および@code{right-fringe}で指定された値を使用します(@ref{Layout
Parameters}を参照)。

  上記の変数は、サブルーチンとして@code{set-window-fringes}を呼び出す、関数@code{set-window-buffer}(@ref{Buffers
and
Windows}を参照)を通じて実際に効果をもちます。これらの変数のいずれかを変更しても、影響を受ける各ウィンドウで@code{set-window-buffer}を呼び出さなければ、そのバッファーを表示する既存のウィンドウのフリンジ表示は更新されません。個別のウィンドウでのフリンジ表示を制御するために、@code{set-window-fringes}を使用することもできます。

@defun set-window-fringes window left &optional right outside-margins
この関数は、ウィンドウ@var{window}のフリンジ幅をセットする。@var{window}が@code{nil}なら、選択されたウィンドウが使用される。

引数@var{left}は左フリンジ、同様に@var{right}は右フリンジにたいして、ピクセル単位で幅を指定する。いずれかにたいする値@code{nil}は、デフォルトの幅を意味する。@var{outside-margins}が非@code{nil}なら、フリンジをディスプレイマージンの外側に表示することを指定する。
@end defun

@defun window-fringes &optional window
この関数は、ウィンドウ@var{window}のフリンジに関する情報をリターンする。@var{window}が省略または@code{nil}なら、選択されたウィンドウが使用される。値は@code{(@var{left-width}
@var{right-width} @var{outside-margins})}の形式をもつ。
@end defun


@node Fringe Indicators
@subsection Fringe Indicators
@cindex fringe indicators
@cindex indicators, fringe

  @dfn{フリンジインジケーター(Fringe
indicators)}は、行の切り詰めや継続、バッファー境界などを示す、ウィンドウフリンジ内に表示される小さいアイコンのことです。

@defopt indicate-empty-lines
@cindex fringes, and empty line indication
@cindex empty lines, indicating
これが非@code{nil}なら、Emacsはグラフィカルなディスプレイ上で、バッファー終端にある空行それぞれにたいして、フリンジ内に特別なグリフを表示する。@ref{Fringes}を参照のこと。この変数はすべてのバッファーにおいて、自動的にバッファーローカルになる。
@end defopt

@defopt indicate-buffer-boundaries
@cindex buffer boundaries, indicating
このバッファーローカル変数は、ウィンドウフリンジ内でバッファー境界とウィンドウのスクロールを示す方法を制御する。

Emacsはバッファー境界(そのバッファーの最初の行と最後の行)がスクリーン上に表示された際、それを三角アイコン(angle
icon)で示すことができる。加えて、スクリーンより上にテキストが存在する場合は上矢印(up-arrow)、スクリーンの下にテキストが存在する場合は下矢印(down-arrow)をフリンジ内に表示して、それを示すことができる。

基本的な値として3つの値がある:

@table @asis
@item @code{nil}
これらのフリンジアイコンを何も表示しない。
@item @code{left}
左フリンジに三角アイコンと矢印を表示する。
@item @code{right}
右フリンジに三角アイコンと矢印を表示する。
@item その他の非alist
左フリンジに三角アイコンを表示して、矢印を表示しない。
@end table

値がそれ以外なら、どのフリンジインジケーターをどこに表示するかを指定する、alistであること。alistの各要素は、@code{(@var{indicator}
.
@var{position})}のような形式をもつ。ここで@var{indicator}は@code{top}、@code{bottom}、@code{up}、@code{down}、または@code{t}(指定されていないすべてのアイコンをカバーする)のいずれかであり、@var{position}は@code{left}、@code{right}、または@code{nil}のいずれかである。

たとえば@code{((top . left) (t . right))}は左フリンジにtop angleビットマップを、右フリンジにbottom
angleビットマップと両arrowビットマップを配置する。左フリンジにangleビットマップを表示してarrowビットマップを表示しないようにするには、@code{((top
.  left) (bottom . left))}を使用する。
@end defopt

@defvar fringe-indicator-alist
このバッファーローカル変数は、論理的ロジカルフリンジインジケーターから、ウィンドウフリンジ内に実際に表示されるビットマップへのマッピングを指定する。値は@code{(@var{indicator}
.
@var{bitmaps})}のような要素をもつalistである。ここで@var{indicator}は論理的インジケータータイプ、@var{bitmaps}はそのインジケーターに使用するフリンジビットマップを指定する。

  @var{indicator}はそれぞれ、以下のシンボルのいずれかであること:

@table @asis
@item @code{truncation}, @code{continuation}.
行の切り詰めと継続に使用される。

@item @code{up}, @code{down}, @code{top}, @code{bottom}, @code{top-bottom}
@code{indicate-buffer-boundaries}が非@code{nil}の際に使用される。@code{up}および@code{down}は、そのウィンドウ端より上または下にあるバッファー境界を示す。@code{top}および@code{bottom}はバッファーの最上端または最下端のテキスト行を示す。@code{top-bottom}はバッファー内にテキスト行1行だけが存在することを示す。

@item @code{empty-line}
@code{indicate-empty-lines}が非@code{nil}の際に、空行を示すために使用される。

@item @code{overlay-arrow}
@c Is this used anywhere?
@c @item Unknown bitmap indicator:
@c @code{unknown}.
オーバーレイ矢印に使用される(@ref{Overlay Arrow}を参照)。
@end table

  各@var{bitmaps}の値には、シンボルのリスト@code{(@var{left} @var{right} [@var{left1}
@var{right1}])}を指定できる。シンボル@var{left}と@var{right}は、特定のインジケーターにたいして左、および/または右フリンジに表示するビットマップを指定する。@var{left1}と@var{right1}は、インジケーター@code{bottom}と@code{top-bottom}に固有であり、最後の改行をもたない最後のテキスト行を示すために使用される。かわりに、@var{bitmaps}に左フリンジと右フリンジの両方で使用される、単一のシンボルを指定することもできる。

  標準のビットマップシンボルのリストと、自身で定義する方法については、@ref{Fringe
Bitmaps}を参照のこと。加えて、@code{nil}は空ビットマップ(表示されないインジケーター)を表す。

  @code{fringe-indicator-alist}がバッファーローカルな値をもち、論理的インジケーターにたいしてビットマップが定義されていない、またはビットマップが@code{t}ならば、@code{fringe-indicator-alist}のデフォルト値から、対応する値が使用される。
@end defvar

@node Fringe Cursors
@subsection Fringe Cursors
@cindex fringe cursors
@cindex cursor, fringe

  ある行がウィンドウと正確に同じ幅なとき、2行を使用するかわりにEmacsは右フリンジ内にカーソルを表示します。フリンジ内のカーソルを表すために使用されるビットマップの違いは、カレントバッファーのカーソルタイプに依存します。

@defopt overflow-newline-into-fringe
これが非@code{nil}なら、ウィンドウと正確に同じ幅の(最後の改行文字に継続されない)行は、継続されない。ポイントが行端に達した際は、かわりにカーソルは右フリンジに表示される。
@end defopt

@defvar fringe-cursor-alist
この変数は、論理的カーソルタイプから、右フリンジ内に実際に表示されるフリンジビットマップへのマッピングを指定する。値は、各要素が@code{(@var{cursor-type}
.
@var{bitmap})}のような形式をもつようなalistである。ここで@var{bitmap}は使用するフリンジビットマップ、@var{cursor-type}は表示するカーソルタイプである。

@var{cursor-type}はそれぞれ@code{box}、@code{hollow}、@code{bar}、@code{hbar}、@code{hollow-small}のいずれかであること。最初の4つはフレームパラメーター@code{cursor-type}の場合と同じ意味をもつ(@ref{Cursor
Parameters}を参照)。@code{hollow-small}タイプは、特定のディスプレイ行にたいして通常の@code{hollow-rectangle}が高すぎる際に、@code{hollow}のかわりに使用される。

@var{bitmap}はそれぞれ、その論理的カーソルタイプにたいして表示される、フリンジビットマップを指定するシンボルであること。
@iftex
詳細は次のサブセクションを参照のこと。
@end iftex
@ifnottex
詳細は、@ref{Fringe Bitmaps}を参照のこと。
@end ifnottex

@c FIXME: I can't find the fringes-indicator-alist variable.  Maybe
@c it should be fringe-indicator-alist or fringe-cursor-alist?  --xfq
@code{fringe-cursor-alist}がバッファーローカルな値をもち、カーソルタイプにたいして定義されたビットマップが存在しなければ、@code{fringes-indicator-alist}のデフォルト値の、対応する値が使用される。
@end defvar

@node Fringe Bitmaps
@subsection Fringe Bitmaps
@cindex fringe bitmaps
@cindex bitmaps, fringe

  @dfn{フリンジビットマップ(fringe
bitmaps)}は、行の切り詰めや継続、バッファー境界、オーバーレイ矢印等にたいする論理的フリンジインジケーターを表現する、実際のビットマップです。それぞれのビットマップはシンボルにより表されます。
@iftex
これらのシンボルは、前のサブセクションで説明した変数@code{fringe-indicator-alist}と@code{fringe-cursor-alist}により参照されます。
@end iftex
@ifnottex
これらのシンボルは、フリンジインジケーターからビットマップへのマッピングを行う変数@code{fringe-indicator-alist}(@ref{Fringe
Indicators}を参照)、およびフリンジカーソルからビットマップへのマッピングを行う変数@code{fringe-cursor-alist}(@ref{Fringe
Cursors}を参照)により参照されます。
@end ifnottex

  Lispプログラムも、その行内に出現する文字の1つに@code{display}プロパティを使用することにより、左フリンジまたは右フリンジ内に、ビットマップを直接表示することができます。そのような表示指定は、以下の形式をもちます

@example
(@var{fringe} @var{bitmap} [@var{face}])
@end example

@noindent
@var{fringe}は、@code{left-fringe}か@code{right-fringe}いずれかのシンボルです。@var{bitmap}は表示するビットマップを識別するシンボルです。オプションの@var{face}は、そのフォアグラウンドカラーをビットマップの表示に使用するフェイスの名前です。このフェイスは、自動的に@code{fringe}フェイスにマージされます。

  以下はEmacsが定義する、標準的なフリンジビットマップと、(@code{fringe-indicator-alist}および@code{fringe-cursor-alist}を通じて)Emacs内で現在それらが使用される方法のリストです。

@table @asis
@item @code{left-arrow}, @code{right-arrow}
切り詰められた行を示すために使用される。

@item @code{left-curly-arrow}, @code{right-curly-arrow}
継続された行を示すために使用される。

@item @code{right-triangle}, @code{left-triangle}
前者はオーバーレイ矢印により使用され、後者は使用されない。

@item @code{up-arrow}, @code{down-arrow}, @code{top-left-angle} @code{top-right-angle}
@itemx @code{bottom-left-angle}, @code{bottom-right-angle}
@itemx @code{top-right-angle}, @code{top-left-angle}
@itemx @code{left-bracket}, @code{right-bracket}, @code{top-right-angle}, @code{top-left-angle}
バッファー境界を示すために使用される。

@item @code{filled-rectangle}, @code{hollow-rectangle}
@itemx @code{filled-square}, @code{hollow-square}
@itemx @code{vertical-bar}, @code{horizontal-bar}
フリンジカーソルの異なるタイプにたいして使用される。

@item @code{empty-line}, @code{exclamation-mark}, @code{question-mark}, @code{exclamation-mark}
Emacsの中核機能では使用されない。
@end table

@noindent
次のサブセクションでは、フリンジビットマップを独自に定義する方法を説明します。

@defun fringe-bitmaps-at-pos &optional pos window
この関数は、、ウィンドウ@var{window}内の位置@var{pos}を含むディスプレイ行の、フリンジビットマップをリターンする。リターン値は@code{(@var{left}
@var{right}
@var{ov})}という形式をもつ。ここで@var{left}は左フリンジ内のフリンジビットマップにたいするシンボル(ビットマップなしなら@code{nil})、@var{right}は同様に右フリンジにたいして、@var{ov}が非@code{nil}なら左ふりんじ
にオーバーレイ矢印が存在することを意味する。

@var{window}内で@var{pos}が可視でなければ、値は@code{nil}となる。@var{window}が@code{nil}なら、それは選択されたウィンドウを意味する。@var{pos}が@code{nil}なら、それは@var{window}内のポイントの値を意味する。
@end defun

@node Customizing Bitmaps
@subsection Customizing Fringe Bitmaps
@cindex fringe bitmaps, customizing

@defun define-fringe-bitmap bitmap bits &optional height width align
この関数は、シンボル@var{bitmap}を新たなフリンジビットマップとして定義、またはその名前の既存のビットマップを置き換える。

引数@var{bits}は、使用するイメージを指定する。これは、各要素(整数)が対応するビットマップの1行を指定する、文字列または整数ベクターであること。整数の各ビットはそのビットマップの1ピクセルに対応し、低位ビットはそのビットマップの最右ピクセルに対応する。

高さは通常、@var{bits}の長さである。しかし非@code{nil}の@var{height}により、異なる高さを指定できる。幅は通常は8だが、非@code{nil}の@var{width}により、異なる幅を指定できる。widthは、1から16の整数でなければならない。

引数@var{align}は、そのビットマップが使用される行範囲に相対的な、ビットマップの位置を指定する。デフォルトは、そのビットマップの中央である。指定できる値は@code{top}、@code{center}、@code{bottom}。

@var{align}引数にはリスト@code{(@var{align}
@var{periodic})}も指定でき、@var{align}は上述のように解釈される。@var{periodic}が非@code{nil}なら、それは@code{bits}内の行が指定される高さに達するのに十分な回数繰り返されるべきであることを指定する。
@end defun

@defun destroy-fringe-bitmap bitmap
この関数は、@var{bitmap}により識別されるフリンジビットマップを破棄する。@var{bitmap}が標準フリンジビットマップを識別する場合は、それを完全に消去するかわりに、実際はそのビットマップの標準定義をリストアする。
@end defun

@defun set-fringe-bitmap-face bitmap &optional face
これはフリンジビットマップ@var{bitmap}にたいするフェイスに、@var{face}をセットする。@var{face}が@code{nil}なら、@code{fringe}フェイスを選択する。ビットマップのフェイスは、それを描画するカラーを制御する。

@var{face}は@code{fringe}にマージされるため、通常@var{face}はフォアグラウンドカラーだけを指定すること。
@end defun

@node Overlay Arrow
@subsection The Overlay Arrow
@c @cindex overlay arrow  Duplicates variable names

  @dfn{オーバーレイ矢印(overlay
arrow)}は、バッファー内の特定の行にたいして、ユーザーに注意を促すために有用です。たとえば、デバッガーでのインターフェースに使用されるモードでは、オーバーレイ矢印は実行されているコード行を示します。この機能は@dfn{オーバーレイ(overlays)}にたいして、何も行いません(@ref{Overlays}を参照)。

@defvar overlay-arrow-string
この変数は、特定の行にたいして注意を喚起するために表示する文字列、または矢印機能が使用されていなければ@code{nil}を保持する。グラフィカルなディスプレイでは、この文字列のコンテンツは無視され、かわりにフリンジ領域からディスプレイ領域左側にグリフが表示される。
@end defvar

@defvar overlay-arrow-position
この変数は、オーバーレイ矢印を表示する箇所を示すマーカーを保持する。これは行の先頭となるポイントであること。非グラフィカルなディスプレイでは、その行の先頭に矢印テキストが表示され、矢印テキストが表示されないときに表示されるべきテキストがオーバーレイされる。その矢印は通常は短く、行は普通はインデントで開始されるので、通常は上書きが問題となることはない。

@c !!! overlay-arrow-position: but the overlay string may remain in the display
@c of some other buffer until an update is required.  This should be fixed
@c now.  Is it?
オーバーレイ矢印の文字列は、そのバッファーの@code{overlay-arrow-position}の値が、そのバッファー内を指す場合は、与えられた任意のバッファーで表示される。したがって、@code{overlay-arrow-position}のバッファーローカルなバインディングを作成することにより、複数のオーバーレイ矢印の表示が可能である。しかしこれを達成するためには、@code{overlay-arrow-variable-list}を使用するほうが、通常はより明快である。
@end defvar

  @code{before-string}プロパティをもつオーバーレイを作成することにより、同様のことを行うことができます。@ref{Overlay
Properties}を参照してください。

  変数@code{overlay-arrow-variable-list}を通じて、複数のオーバーレイ矢印を定義できます。

@defvar overlay-arrow-variable-list
この変数の値は、それぞれがオーバーレイ矢印の位置を指定する、変数のリストである。変数@code{overlay-arrow-position}はこのリスト上にあるため、通常の意味をもつ。
@end defvar

このリスト上の各変数は、対応するオーバーレイ矢印位置に表示するための、オーバーレイ矢印文字列を指定する@code{overlay-arrow-string}プロパティ(テキスト端末用)、およびフリンジビットマップを指定する@code{overlay-arrow-bitmap}プロパティ(グラフィカル端末用)をもつことができます。これらのプロパティがセットされていなければ、デフォルトのフリンジインジケーター@code{overlay-arrow-string}と@code{overlay-arrow}が使用されます。

@node Scroll Bars
@section Scroll Bars
@cindex scroll bars

通常、フレームパラメーター@code{vertical-scroll-bars}はそのフレーム内のウィンドウが垂直スクロールバーをもつべきかと、それらが左か右のいずれかに配置されるべきかを制御します。フレームパラメーター@code{scroll-bar-width}は、それらの幅を指定します(@code{nil}はデフォルトを意味する)。@ref{Layout
Parameters}を参照してください。

@defun frame-current-scroll-bars &optional frame
この関数は、フレーム@var{frame}のスクロールバータイプのセッティングを報告する。値はコンスセル@code{(@var{vertical-type}
.@:
@var{horizontal-type})}である。ここで@var{vertical-type}は@code{left}、@code{right}、または@code{nil}(スクロールバーなしを意味する)のいずれかである。@var{horizontal-type}は水平スクロールバータイプの指定を意図しているが、これはまだ実装されていないので常に@code{nil}である。
@end defun

@vindex vertical-scroll-bar
  変数@code{vertical-scroll-bar}をセットすることにより、特定のバッファーにたいして、スクロールバーを有効または無効にできます。この変数はセット時に、自動的にバッファーローカルになります。可能な値は@code{left}、@code{right}、そのフレームのデフォルトの使用を意味する@code{t}、スクロールバーなしの@code{nil}のいずれかです。

  個々のウィンドウにたいして、これを制御することもできます。特定のウィンドウにたいして何を行うか指定するためには、関数@code{set-window-scroll-bars}を呼び出します:

@defun set-window-scroll-bars window width &optional vertical-type horizontal-type
この関数は、ウィンドウ@var{window}にたいして、スクロールバーの幅とタイプをセットする。

@var{width}はピクセル単位でスクロールバーの幅を指定する(@code{nil}はそのフレームにたいして指定された幅の使用を意味する)。@var{vertical-type}は、垂直スクロールバーをもつかどうか、もつ場合はその位置を指定する。可能な値は@code{left}、@code{right}、および@code{nil}で、これはフレームパラメーター@code{vertical-scroll-bars}の値と同様である。

引数@var{horizontal-type}は水平スクロールバーをもつべきかと、その位置を指定するが、まだ実装されていないため効果はない。@var{window}が@code{nil}なら、選択されたウィンドウが使用される。
@end defun

@defun window-scroll-bars &optional window
@var{window}に指定されたスクロールバーの幅とタイプを報告する。@var{window}が省略または@code{nil}なら、選択されたウィンドウが使用される。値は、@code{(@var{width}
@var{cols} @var{vertical-type}
@var{horizontal-type})}という形式のリストである。値@var{width}は、幅にたいして指定された値である(@code{nil}かもしれない)。@var{cols}は、スクロールバーが実際に占有する列数である。

@var{horizontal-type}は実際には無意味である。
@end defun

@defun window-scroll-bar-width &optional window
この関数は、@var{window}の垂直スクロールバーの幅をピクセル単位でリターンする。@var{window}は生きたウィンドウでなければならず、デフォルトは選択されたウィンドウである。
@end defun

あるウィンドウにたいして@code{set-window-scroll-bars}によりこれらの値を指定しない場合は、表示されるバッファーのバッファーローカル変数@code{scroll-bar-mode}と@code{scroll-bar-width}が、そのウィンドウの垂直スクロールバーを制御します。@code{set-window-buffer}は、これらの変数を調べる関数です。あるウィンドウですでに可視なバッファーでこれらを変更した場合は、すでに表示されているのと同じバッファーを指定して@code{set-window-buffer}を呼び出すことにより、そのウィンドウに新たな値を記録させることができます。

@defopt scroll-bar-mode
この変数はすべてのバッファーにおいて常にバッファーローカルであり、そのバッファーを表示するウィンドウにスクロールバーを配すべきかと、その場所を制御する。可能な値は、スクロールバーなしの@code{nil}、左にスクロールバーを配置する@code{left}、右にスクロールバーを配置する@code{right}のいずれかである。
@end defopt

@defun window-current-scroll-bars &optional window
この関数は、ウィンドウ@var{window}にたいするスクロールバータイプを報告する。@var{window}が省略または@code{nil}なら、選択されたウィンドウが使用される。値はコンスセル@code{(@var{vertical-type}
.@:
@var{horizontal-type})}である。@code{window-scroll-bars}とは異なり、フレームのデフォルトと@code{scroll-bar-mode}を考慮して、実際に使用されているスクロールバータイプを報告する。
@end defun

@defvar scroll-bar-width
この変数はすべてのバッファーにおいて常にローカルであり、そのバッファーのスクロールバーをピクセル単位で量った幅を指定する。値@code{nil}は、そのフレームにより指定された値の使用を意味する。
@end defvar

@node Window Dividers
@section Window Dividers
@cindex window dividers
@cindex right dividers
@cindex bottom dividers

ウィンドウディバイダーとは、フレームのウィンドウ間に描画されるバーのことです。``右(right)''ディバイダーは、あるウィンドウと、その右に隣接する任意のウィンドウの間に描画されます。その幅(厚さ)は、フレームパラメーター@code{right-divider-width}で指定されます。``下(bottom)''ディバイダーは、あるウィンドウと、その下に隣接するウィンドウ、またはエコーエリアとの間に描画されます。その幅は、フレームパラメーター@code{bottom-divider-width}で指定されます。いずれの場合も、幅に0を指定すると、そのようなディバイダーを描画しないことを意味します。@ref{Layout
Parameters}を参照してください。

   技術的には、右ディバイダーはそれの左にあるウィンドウに``所属''し、その幅がそのウィンドウのトータル幅に寄与することを意味します。下ディバイダーは上にあるウィンドウに``所属''し、その幅がそのウィンドウのトータル高さに寄与することを意味します。@ref{Window
Sizes}を参照してください。あるウィンドウが右ディバイダーと左ディバイダーの両方をもつ場合、下ディバイダーが``優勢''になります。これは、右ディバイダーが下ディバイダーの上で終端されるのに比べて、下ディバイダーはそのウィンドウの完全なトータル幅で描画されることを意味します。

   ディバイダーはマウスでドラッグでき、それゆえマウスで隣接するウィンドウのサイズを調整するために有用です。これらはスクロールバーやモードラインが表示されていないときに、隣接するウィンドウを視覚的に分離する役目もあります。以下の3つのフェイスにより、ディバイダーの外観をカスタマイズできます:

@table @code
@item window-divider
ディバイダーの幅が3ピクセル未満のときは、このフェイスのフォアグラウンドカラーで塗りつぶしで描画される。これより広いディバイダーでは、最初と最後のピクセルを除く、内部にたいしてのみこのフェイスが使用される。

@item window-divider-first-pixel
これは少なくとも幅が3ピクセルあるディバイダーの、最初のピクセルを描画するために使用される。塗りつぶし(solid)の外観を得るためには、@code{window-divider}フェイスに使用されるのと同じ値をセットすること。

@item window-divider-last-pixel
これは少なくとも幅が3ピクセルあるディバイダーの、最後のピクセルを描画するために使用される。塗りつぶし(solid)の外観を得るためには、@code{window-divider}フェイスに使用されるのと同じ値をセットすること。
@end table

以下の2つの関数により、特定のウィンドウのディバイダーのサイズを取得できます。

@defun window-right-divider-width &optional window
@var{window}の右ディバイダーの幅(厚さ)を、ピクセル単位でリターンする。@var{window}は生きたウィンドウでなければならず、デフォルトは選択されたウィンドウである。最右ウィンドウにたいするリターン値は、常に0である。
@end defun

@defun window-bottom-divider-width &optional window
@var{window}の下ディバイダーの幅(厚さ)を、ピクセル単位でリターンする。@var{window}は生きたウィンドウでなければならず、デフォルトは選択されたウィンドウである。ミニバッファーウィンドウ、またはミニバッファーがないフレームの最下ウィンドウにたいするリターン値は、常に0である。
@end defun


@node Display Property
@section The @code{display} Property
@cindex display specification
@kindex display @r{(text property)}

  テキストプロパティ(またはオーバーレイプロパティ)@code{display}は、テキストへのイメージ挿入、およびテキスト表示のその他の事相を制御します。@code{display}プロパティの値は、ディスプレイ仕様、または複数のディスプレイ仕様を含むリストかベクターであるべきです。同じ@code{display}プロパティ値内のディスプレイ仕様は、一般的にはそれらがカバーするテキストにたいして並行して適用されます。

  複数のソース(オーバーレイ、および/またはテキストプロパティ)が@code{display}プロパティにたいして値を指定しますが、1つの値だけが効果をもち、これは@code{get-char-property}のルールにしたがいます。@ref{Examining
Properties}を参照してください。

  このセクションの残りの部分では、複数の種類のディスプレイ仕様と、それらの意味を説明します。

@menu
* Replacing Specs::          テキストを置換するディスプレイspec。
* Specified Space::          指定された幅に1つのスペースを表示する。
* Pixel Specification::      ピクセル単位でスペースの幅または高さを指定する。
* Other Display Specs::      イメージの表示。高さ、スペーシング、その他のテキストプロパティの調整。
* Display Margins::          メインテキスト側面へのテキストまたはイメージの表示。
@end menu

@node Replacing Specs
@subsection Display Specs That Replace The Text
@cindex replacing display specs

  ある種のディスプレイ仕様は、そのプロパティをもつテキストのかわりに表示する何かを指定します。これらは@dfn{置換(replacing)}ディスプレイ仕様と呼ばれます。Emacsはユーザーにたいして、この方法で置換されたバッファーテキストの中間への対話的なポイント移動を許していません。

  ディスプレイ仕様のリストに1つ以上の置換ディスプレイ仕様が含まれる場合は、最初の置換ディスプレイ仕様が残りをオーバーライドします。置換ディスプレイ仕様は、他のほとんどのディスプレイ仕様は置換を許容しないので、それらとは無関係です。

  置換ディスプレイ仕様では、``そのプロパティをもつテキスト''とは、@code{display}プロパティとして同一のLispオブジェクトをもつ、連続したすべての文字を意味します。これらの文字は単一の単位として置換されます。@code{display}プロパティに異なるLispオブジェクト(@code{eq}ではないオブジェクト)をもつ2つの文字は、個別に処理されます。

  以下は、この要点を示すための例です。文字列が置換ディスプレイ仕様としての役割をもち、指定された文字列のプロパティをもつテキストを置換します(@ref{Other
Display Specs}を参照)。以下の関数を考えてみてください:

@smallexample
(defun foo ()
  (dotimes (i 5)
    (let ((string (concat "A"))
          (start (+ i i (point-min))))
      (put-text-property start (1+ start) 'display string)
      (put-text-property start (+ 2 start) 'display string))))
@end smallexample

@noindent
この関数は、バッファー内の最初の10文字それぞれにたいして、文字列@code{"A"}であるような@code{display}プロパティを与えますが、これらはすべて同じ文字列オブジェクトを取得しません。最初の2文字は同じ文字列オブジェクトなので、1つの@samp{A}に置換されます。2つの別々の@code{put-text-property}呼び出しでそのディスプレイプロパティが割り当てられたという事実は、無関係です。同様に次の2文字は2つ目の文字列(@code{concat}により新たに作成された文字列オブジェクト)を取得するので、1つの@samp{A}で置換され、...となります。したがって、10文字は5つのAで表示されます。

@node Specified Space
@subsection Specified Spaces
@cindex spaces, specified height or width
@cindex variable-width spaces

  指定された幅、および/または高さのスペースを表示するためには、@code{(space
.
@var{props})}という形式のディスプレイ仕様を使用します。このプロパティを、1つ以上の連続する文字にputすることができます。これら@emph{すべて}の文字のかわりに、指定された高さと幅のスペースが表示されます。以下は、スペースのウェイトを指定するために、@var{props}内で使用できるプロパティです:

@table @code
@item :width @var{width}
@var{width}が数字なら、それはスペースの幅が通常の文字幅の@var{width}倍であるべきかを指定する。@var{width}は@dfn{ピクセル幅(pixel
width)}仕様でも可(@ref{Pixel Specification}を参照)。

@item :relative-width @var{factor}
同じ@code{display}プロパティをもつ連続する文字グループ内の最初の文字から計算される、範囲の幅を指定する。スペースの幅は、@var{factor}を乗じたその文字の幅。

@item :align-to @var{hpos}
スペースが@var{hpos}に達するほど、十分に広くあるべきことを指定する。@var{hpos}が数字なら、それは通常の文字幅の単位で量られる。@var{hpos}は@dfn{ピクセル幅(pixel
width)}仕様でも可(@ref{Pixel Specification}を参照)。
@end table

  上記プロパティのいずれか1つのみを使用するべきです。以下のプロパティで、スペースの高さも指定できます:

@table @code
@item :height @var{height}
スペースの高さを指定する。@var{height}が数字なら、それはスペースの高さが通常の文字高さの@var{height}倍であるべきことを指定する。@var{height}は@dfn{ピクセル高さ仕様(pixel
height)}でも可(@ref{Pixel Specification}を参照)。

@item :relative-height @var{factor}
このディスプレイ仕様をもつテキストの通常の高さに@var{factor}を乗じることにより、スペースの高さを指定する。

@item :ascent @var{ascent}
@var{ascent}の値が非負の100以下の数字なら、スペースの高さの@var{ascent}パーセントをスペースのアセント(ascent:
上方)、すなわちベースラインより上の部分とみなす。@dfn{ピクセルアセント(pixel
ascent)}仕様により、アセントをピクセル単位で指定することも可(@ref{Pixel Specification}を参照)。

@end table

  @code{:height}と@code{:relative-height}を両方一緒に使用しないでください。

  @code{:width}と@code{:align-to}プロパティは非グラフィック端末でサポートされますが、このセクションのその他のスペースプロパティはサポートされません。

  スペースプロパティは、双方向テキスト表示の並べ替えのために、パラグラフ区切りとして扱われます。詳細は、@ref{Bidirectional
Display}を参照してください。

@node Pixel Specification
@subsection Pixel Specification for Spaces
@cindex spaces, pixel specification

  プロパティ@code{:width}、@code{:align-to}、@code{:height}、@code{:ascent}の値は再表示の間に評価される、特別な種類の式です。その評価の結果は、ピクセルの絶対数として使用されます。

  以下の式がサポートされています:

@smallexample
@group
  @var{expr} ::= @var{num} | (@var{num}) | @var{unit} | @var{elem} | @var{pos} | @var{image} | @var{form}
  @var{num}  ::= @var{integer} | @var{float} | @var{symbol}
  @var{unit} ::= in | mm | cm | width | height
@end group
@group
  @var{elem} ::= left-fringe | right-fringe | left-margin | right-margin
        |  scroll-bar | text
  @var{pos}  ::= left | center | right
  @var{form} ::= (@var{num} . @var{expr}) | (@var{op} @var{expr} ...)
  @var{op}   ::= + | -
@end group
@end smallexample

  フォーム@var{num}は、デフォルトフレームフォントの高さか幅を、フォーム@code{(@var{num})}は絶対ピクセル数を指定します。@var{num}がシンボル@var{symbol}なら、それのバッファーローカルな変数バインディングが使用されます。

  単位@code{in}、@code{mm}、@code{cm}はそれぞれインチ、ミリメートル、センチメートルごとのピクセル数を指定します。単位@code{width}と@code{height}はそれぞれ、カレントフェイスのデフォルトの幅と高さに対応します。イメージ仕様@code{image}は、そのイメージの幅、または高さに対応します。

  要素@code{left-fringe}、@code{right-fringe}、@code{left-margin}、@code{right-margin}、@code{scroll-bar}、@code{text}は、そのウィンドウの対応する領域の幅を指定します。

  位置@code{left}、@code{center}、@code{right}はテキストエリアの左端、中央、右端から相対的に位置を指定するために、@code{:align-to}とともに使用できます。

  (@code{text}を除く)上記ウィンドウ要素は、与えられたエリアの左端から相対的に位置を指定するために、@code{:align-to}とともに使用することもできます。
Any of the above window elements (except ) can also be used with  to specify
that the position is relative to the left edge of the given area.
(最初に出現するこれらシンボルのいずれかにより)相対的位置にたいするベースオフセットが一度セットがされると、残りのシンボルは指定されたエリアの幅として解釈されます。たとえば左マージンの中央に位置揃えするには、以下のようにします

@example
:align-to (+ left-margin (0.5 . left-margin))
@end example

  位置揃えにたいしてベースオフセットが何も指定されなければ、テキストエリア左端にたいして常に相対的になります。たとえばヘッダーライン内の@samp{:align-to
0}は、テキストエリアの最初のテキスト行に位置揃えします。

  @code{(@var{num}
. @var{expr})}という形式の値は、@var{num}と@var{expr}により生成される値を意味します。たとえば@code{(2
. in)}は2インチの幅、@code{(0.5 .  @var{image})}は指定されたイメージの幅(または高さ)の半分を指定します。

  フォーム@code{(+ @var{expr} ...)}は、式の値を合計します。フォーム@code{(- @var{expr}
...)}は式の値を否定または減算します。

@node Other Display Specs
@subsection Other Display Specifications

  以下は、@code{display}テキストプロパティ内で使用できる、その他のディスプレイ仕様です。

@table @code
@item @var{string}
このプロパティをもつテキストのかわりに、@var{string}を表示する。

再帰的なディスプレイ仕様はサポートされない。つまり@var{string}の@code{display}プロパティがあっても、それは使用されない。

@item (image . @var{image-props})
この種のディスプレイ仕様は、イメージディスクリプタである(@ref{Images}を参照)。ディスプレイ仕様として使用時は、そのディスプレイ仕様をもつテキストのかわりに表示するイメージを意味する。

@item (slice @var{x} @var{y} @var{width} @var{height})
この仕様は@code{image}とともに、表示するイメージの@dfn{スライス(slice:
イメージの特定の領域)}を指定する。要素@var{y}と@var{x}は、そのイメージ内での左上隅を指定し、@var{width}と@var{height}はそのスライスの幅と高さを指定する。整数はピクセル数、0.0から1.0までの浮動小数点数はイメージ全体の幅または高さの割合を意味する。A
floating-point number in the range 0.0--1.0 stands for that fraction of the
width or height of the entire image.

@item ((margin nil) @var{string})
この形式のディスプレイ仕様は、このディスプレイ仕様をもつテキストのかわりに、そのテキストと同じ位置に表示する@var{string}を意味する。これは単に@var{string}を使用するのと同じだが、マージン表示(@ref{Display
Margins}を参照)の特殊なケースとして行われる点が異なる。

@item (left-fringe @var{bitmap} @r{[}@var{face}@r{]})
@itemx (right-fringe @var{bitmap} @r{[}@var{face}@r{]})
テキスト行の任意の文字がこのディスプレイ仕様をもつ場合は、その文字のかわりにその行の左または右フリンジに表示する@var{bitmap}を指定する。オプションの@var{face}は、そのビットマップにたいして使用するカラーを指定する。詳細は@ref{Fringe
Bitmaps}を参照のこと。

@item (space-width @var{factor})
このディスプレイ仕様は、この仕様をもつテキスト内のすべてのスペース文字に効果を及ぼす。これらすべてのスペースは、通常の幅の@var{factor}倍の幅で表示される。要素@var{factor}は整数か浮動小数点数であること。スペース以外の文字は影響を受けない。特に、これはタブ文字に影響を与えない。

@item (height @var{height})
このディスプレイ仕様は、テキストを高く(taller)、または低く(shorter)する。@var{height}には以下を指定できる:

@table @asis
@item @code{(+ @var{n})}
@c FIXME: Add an index for "step"?  --xfq
これは、@var{n}ステップ大きいフォントの使用を意味する。``ステップ''は利用可能なフォントのセットから定義される。具体的に``ステップ''は、このテキストに指定されたheight以外のすべての属性にマッチする。適切なフォントの各サイズは、別のステップとして利用可能とみなされる。@var{n}は整数であること。

@item @code{(- @var{n})}
これは@var{n}ステップ小さいフォントの使用を意味する。

@item @var{factor}(数値)
数値@var{factor}は、デフォルトフォントの@var{factor}倍高いフォントの使用を意味する。

@item @var{function}(シンボル)
高さを計算する関数。この関数はカレントの高さを引数として呼び出され、使用する新たな高さをリターンすること。

@item @var{form}(上記以外)
@var{height}の値が上記のいずれにもマッチしなければ、それはフォームである。Emacsは@code{height}をカレントで指定されたフォントの高さにバインドして、新たな高さを取得するために、そのフォームを評価する。
@end table

@item (raise @var{factor})
この種のディスプレイ仕様は、その行のベースラインに相対的に、テキストを上(raise)、または下(lower)に指定する。

@var{factor}は、影響を受けるテキストの高さにたいする乗数として解釈される数値でなければならない。これが正なら、その文字を上に、負なら下に表示することを意味する。

そのテキストが@code{height}ディスプレイ仕様ももつ場合、それは上または下に表示する量には影響を与えない。上または下に表示する量は、そのテキストにたいして使用されるフェイスにもとづく。
@end table

@c We put all the `@code{(when ...)}' on one line to encourage
@c makeinfo's end-of-sentence heuristics to DTRT.  Previously, the dot
@c was at eol; the info file ended up w/ two spaces rendered after it.
  任意のディスプレイ仕様にたいして、条件を作成できます。これを行うには、@code{(when @var{condition}
.
@var{spec})}という形式の別リスト内にパッケージします。この場合、仕様@var{spec}は@var{condition}が非@code{nil}値に評価されたときだけ適用されます。この評価の間、@code{object}は条件つき@code{display}プロパティをもつ文字列、またはバッファーにバインドされます。@code{position}と@code{buffer-position}はそれぞれ@code{object}内の位置、および@code{display}プロパティが見つかったバッファー位置にバインドされます。@code{object}が文字列の際は、両者の位置は異なるかもしれません。

@node Display Margins
@subsection Displaying in the Margins
@cindex display margins
@cindex margins, display

  バッファーはその左側と右側に、@dfn{ディスプレイマージン(display
margins)}と呼ばれる、ブランクエリアをもつことができます。それらのエリア内には、通常はテキストが出現することはありませんが、@code{display}プロパティを使用して、ディスプレイマージン内に何かを配置することができます。現在のところ、マージン内のテキストやイメージをマウスセンシティブにする方法はありません。

  マージン内に何かを表示するには、テキストの@code{display}プロパティのマージン表示仕様(margin display
specification)で、それを指定します。これは、配置したテキストが表示されないことを意味する、置換表示仕様です。マージン表示は表示されますが、そのテキストは表示されません。

  マージン表示仕様とは@code{((margin right-margin) @var{spec})}や@code{((margin
left-margin)
@var{spec})}のようなものです。ここで@var{spec}は、マージン内に何を表示するかを告げる、別の表示仕様です。典型的にはこれは表示するテキスト文字列、またはイメージディスクリプタです。

  特定のバッファーテキストに@emph{関連する}マージンに何かを表示するためには、そのテキストに@code{before-string}プロパティを付して、そのコンテンツとしてマージン表示仕様をputします。

  ディスプレイマージンが何かを表示可能になる前に、それらに非0の幅を与えなければなりません。これを行う通常の方法は、以下の変数をセットする方法です:

@defvar left-margin-width
この変数は左マージンの幅を、文字セル(別名は``列'')単位で指定する。これは、すべてのバッファーでバッファーローカルである。値@code{nil}は、左マージンエリアなしを意味する。
@end defvar

@defvar right-margin-width
この変数は右マージンの幅を、文字セル単位で指定する。これは、すべてのバッファーでバッファーローカルである。値@code{nil}は、右マージンエリアなしを意味する。
@end defvar

  これらの変数をセットしても、そのウィンドウには即座には反映されません。これらの変数は、そのウィンドウ内に新たなバッファーを表示する際にチェックされます。したがって、@code{set-window-buffer}を呼び出すことにより、変更を反映することができます。

  マージン幅を即座にセットすることもできます。

@defun set-window-margins window left &optional right
この関数は、ウィンドウ@var{window}のマージン幅を、文字セル単位で指定する。引数@var{left}は左マージン、@var{right}は右マージン(デフォルトは@code{0})を制御する。
@end defun

@defun window-margins &optional window
この関数は、@var{window}の左マージンと右マージンの幅を、@w{@code{(@var{left}
.
@var{right})}}という形式のコンスセルでリターンする。2つのマージンエリアのいずれか一方が存在しなければ、その幅は@code{nil}としてリターンされる。2つのマージンがどちらも存在しない場合、この関数は@code{(nil)}をリターンする。@var{window}が@code{nil}なら、選択されたウィンドウが使用される。
@end defun

@node Images
@section Images
@cindex images in buffers

  Emacsバッファー内にイメージを表示するためには、最初にイメージディスクリプタを作成して、それを表示されるテキストの@code{display}プロパティ(@ref{Display
Property}を参照)内のディスプレイ指定子として使用しなければなりません。

  Emacsはグラフィカルな端末で実行時は、通常はイメージの表示が可能です。テキスト端末、イメージサポートを欠く特定のグラフ^ィカル端末、またはイメージサポートなしでコンパイルされたEmacsでは、イメージは表示できません。原則イメージが表示可能か判断するためには、関数@code{display-images-p}を使用できます(@ref{Display
Feature Testing}を参照)。

@menu
* Image Formats::            サポートされるイメージフォーマット。
* Image Descriptors::        @code{:display}内で使用されるイメージの指定方法。
* XBM Images::               XBMフォーマット用の特別な機能。
* XPM Images::               XPMフォーマット用の特別な機能。
* PostScript Images::        PostScriptフォーマット用の特別な機能。
* ImageMagick Images::       ImageMagickを通じて利用できる特別な機能。
* Other Image Types::        サポートされるその他さまざまなフォーマット。
* Defining Images::          後で使用するためにイメージを定義する便利な方法。
* Showing Images::           一度定義されたイメージを表示するための便利な方法。
* Multi-Frame Images::       1つ以上のフレームを含むイメージ。
* Image Cache::              イメージ表示の内部的メカニズム。
@end menu

@node Image Formats
@subsection Image Formats
@cindex image formats
@cindex image types

  Emacsは、いくつかの異なるフォーマットのイメージを表示できます。これらのイメージフォーマットのいくつかは、特定のサポートライブラリーがインストールされている場合のみサポートされます。いくつかのプラットフォームでは、Emacsはオンデマンドでサポートライブラリーをロードできます。そのような場合には、それらの動的ライブラリーにたいする既知の名前セットを変更するために、変数@code{dynamic-library-alist}を使用できます。@ref{Dynamic
Libraries}を参照してください。

  サポートされるイメージフォーマット(と要求されるサポートライブラリー)にはPBMとXBM(サポートライブラリーに依存せず常に利用可能)、XPM(@code{libXpm})、GIF
(@code{libgif}または@code{libungif})、PostScript(@code{gs})、JPEG(@code{libjpeg})、TIFF(@code{libtiff})、PNG(@code{libpng})、SVG
(@code{librsvg})が含まれます。

  これらのイメージフォーマットはそれぞれ、@dfn{イメージタイプシンボル(image type
symbol)}に関連付けられます。上記のフォーマットにたいするシンボルは順に@code{pbm}、@code{xbm}、@code{xpm}、@code{gif}、@code{postscript}、@code{jpeg}、@code{tiff}、@code{png}、@code{svg}になります。

  さらにImageMagick(@code{libMagickWand})のサポートつきでEmacsをビルドした場合には、EmacsはImageMagickが表示可能なイメージフォーマットを表示できます。@ref{ImageMagick
Images}を参照してください。ImageMagickを通じて表示されるすべてのイメージは、タイプシンボル@code{imagemagick}をもちます。

@defvar image-types
この変数はカレント構成で潜在的にサポートされるイメージフォーマットにたいする、タイプシンボルのリストを含む。

``潜在的''とは、Emacsがそのイメージタイプを知っていることを意味しており、実際に使用可能である必要はない(たとえば動的ライブラリーが利用できないせいかもしれない)。どのイメージタイプが実際に利用できるか知るためには、@code{image-type-available-p}を使用すること。
@end defvar

@defun image-type-available-p type
この関数は、タイプ@var{type}のイメージのロードおよび表示が可能なら非@code{nil}をリターンする。@var{type}はイメージタイプシンボルであること。

サポートライブラリーが静的にリンクされたイメージタイプにたいして、この関数は常に@code{t}をリターンする。サポートライブラリーが動的にロードされるイメージタイプにたいしては、そのライブラリーがロード可能なら@code{t}、それ以外なら@code{nil}をリターンする。
@end defun

@node Image Descriptors
@subsection Image Descriptors
@cindex image descriptor

  @dfn{イメージディスクリプタ(image
descriptor)}とは、イメージにたいする基礎的なデータと、それを表示する方法を指定するリストです。これは通常、オーバーレイプロパティまたはテキストプロパティ@code{display}(@ref{Other
Display Specs}を参照)の値を通じて使用されますが、バッファーにイメージを挿入する便利なヘルパー関数については、@ref{Showing
Images}を参照してください。

  イメージディスクリプタはそれぞれ@code{(image
.
@var{props})}という形式をもちます。ここで@var{props}はキーワードシンボルと値のペアーからなるプロパティリストで、少なくともそのイメージタイプを指定するペアー@code{:type
@var{type}}を含みます。

  以下は、すべてのイメージタイプにたいして意味のあるプロパティのリストです(以降のサブセクションで説明するように、特定のイメージタイプにたいしてのみ意味があるプロパティも存在する):

@table @code
@item :type @var{type}
イメージタイプ。
@ifnottex
@ref{Image Formats}を参照のこと。
@end ifnottex
すべてのイメージディスクリプタは。このプロパティを含まなければならない。

@item :file @var{file}
これは、ファイル@var{file}からイメージをロードすることを意味する。@var{file}が絶対ファイル名でなければ、それは@code{data-directory}内で展開される。

@item :data @var{data}
これは、rawイメージデータを指定する。すべてのイメージディスクリプタは、@code{:data}か@code{:file}のいずれかをもたなければならないが、両方もつことはできない。

ほとんどのイメージタイプにたいして、@code{:data}プロパティの値はイメージデータを含む、文字列であること。いくつかのイメージタイプは、@code{:data}をサポートしない。それ以外のイメージタイプにたいしては、@code{:data}単独では不十分であり、@code{:data}とともに他のイメージプロパティを使用する必要がある。詳細は、以下のサブセクションを参照のこと。

@item :margin @var{margin}
これは、そのイメージ周囲に余分なマージンとして、何ピクセル追加するかを指定する。値@var{margin}は非負の数値、またはそのような数値のペアー@code{(@var{x}
.
@var{y})}でなければならない。ペアーの場合、@var{x}は水平方向に追加するピクセル数、@var{y}は垂直方向に追加するピクセル数を指定する。@code{:margin}が指定されない場合のデフォルトは0。

@item :ascent @var{ascent}
これは、イメージのアセント(ベースラインの上の部分)に使用する、そのイメージの高さの分量を指定する。値@var{ascent}は、から100の数値、またはシンボル@code{center}でなければならない。

@var{ascent}が数値なら、アセントに使用するイメージの高さのパーセンテージであること。

@var{ascent}が@code{center}なら、そのイメージにたいしてテキストプロパティおよびオーバーレイプロパティにより指定される方法で、センターライン(そのイメージ位置にテキストを描画する際の垂直方向のセンターライン)の垂直方向中心にイメージが配置される。

このプロパティが省略された場合のデフォルトは500。

@item :relief @var{relief}
これは、イメージ注意にシャドー矩形を追加する。値@var{relief}は、シャドーライン幅をピクセルで指定する。@var{relief}が負ならボタンを押下した状態、それ以外はボタンを押下していない状態のイメージでシャドーを描画する。

@item :conversion @var{algorithm}
これは、イメージを表示する前に適用するべき、変換アルゴリズムを指定する。値@var{algorithm}は、どのアルゴリズムかを指定する。

@table @code
@item laplace
@itemx emboss
カラーの大きい差異を強調して小さな差異を不鮮明にする、ラプラスエッジ検出アルゴリズム(Laplace edge detection
algorithm)を指定する。``無効''なボタンのイメージ表示に、これが役立つと考える人もいます。

@item (edge-detection :matrix @var{matrix} :color-adjust @var{adjust})
@cindex edge detection, images
一般的なエッジ検出アルゴリズムを指定する。@var{matrix}は数値からなる9要素のリスト、またはベクターでなければならない。変換されたイメージ内の位置@math{x/y}にあるピクセルは、その位置周辺にある元のピクセルから計算される。@var{matrix}は、@math{x/y}に近接する各ピクセルにたいして、そのピクセルが変換先ピクセルに影響するファクター(factor:
要因)を指定する。以下のように、要素@math{0}は@math{x-1/y-1}にあるピクセルのファクター、要素@math{1}は@math{x/y-1}にあるピクセルにたいするファクター、...を指定する。
@iftex
@tex
$$\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \cr
   x-1/y  &   x/y &    x+1/y \cr
   x-1/y+1&   x/y+1 &  x+1/y+1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (x-1/y-1  x/y-1  x+1/y-1
   x-1/y    x/y    x+1/y
   x-1/y+1  x/y+1  x+1/y+1)
@end display
@end ifnottex

結果のピクセルは、周辺ピクセルのRGB値を合計したカラーを指定されたファクターで乗じ、その合計をファクター絶対値の合計で除した色強度から計算される。

ラプラスエッジ検出は、現在のところは以下のマトリクス
@iftex
@tex
$$\pmatrix{1 & 0 & 0 \cr
   0&  0 &  0 \cr
   0 & 0 & -1 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  (1  0  0
   0  0  0
   0  0 -1)
@end display
@end ifnottex

エンボスエッジ検出(Emboss edge-detection)は以下のマトリクスを使用する
@iftex
@tex
$$\pmatrix{ 2 & -1 &  0 \cr
   -1 &  0 &  1 \cr
    0  & 1 & -2 \cr}$$
@end tex
@end iftex
@ifnottex
@display
  ( 2 -1  0
   -1  0  1
    0  1 -2)
@end display
@end ifnottex

@item disabled
イメージが``無効(disabled)''に見えるよう変換することを指定する。
@end table

@item :mask @var{mask}
@var{mask}が@code{heuristic}か@code{(heuristic
@var{bg})}なら、フレームのバックグラウンドがイメージ背後に見えるよう、そのイメージのクリッピングマスクを構築する。@var{bg}が未指定または@code{t}なら、イメージ4隅に最頻するカラーをそのイメージのバックグラウンドカラーとみなしてバックグラウンドカラーを決定する。それ以外なら@var{bg}は、そのイメージのバックグラウンドとみなすべきカラーを指定するリスト@code{(@var{red}
@var{green} @var{blue})}でなければならない。

@var{mask}が@code{nil}なら、イメージがマスクをもつ場合はマスクを削除する。マスクを含むフォーマットのイメージは、@code{:mask
nil}を指定することにより削除される可能性がある。

@item :pointer @var{shape}
これはマウスポインターがそのイメージ上にある際の、ポインターシェイプを指定する。利用可能なポインターシェイプについては、@ref{Pointer
Shape}を参照のこと。

@item :map @var{map}
@cindex image maps
これは、そのイメージに@dfn{ホットスポット(hot spots)}のイメージマップを関連付ける。

イメージマップは、各要素が@code{(@var{area} @var{id}
@var{plist})}という形式をもつalistである。@var{area}はにはrectangle(矩形)、circle(円)、またはpolygon(ポリゴン、多角形)のいずれかを指定する。

rectangleは、矩形エリアの左上隅と右下隅のピクセル座標を指定するコンス@code{(rect . ((@var{x0} . @var{y0})
. (@var{x1} . @var{y1})))}である。

circleは、円の中心と半径を指定するコンス@code{(circle . ((@var{x0} . @var{y0})
. @var{r}))}である。@var{r}は整数または浮動小数点数。

polygonは、各ペアーが多角形の1つの頂点を記述するコンス@code{(poly . [@var{x0} @var{y0} @var{x1}
@var{y1} ...])}である。

マウスポインターがホットスポット上にある際は、そのホットスポットの@var{plist}が参照される。これが@code{help-echo}プロパティを含むならそのホットスポットのツールチップを指定し、@code{pointer}プロパティを含む場合はマウスカーソルがホットスポット上にあるときのマウスカーソルのシェイプを指定する。利用可能なポインターシェイプについては、@ref{Pointer
Shape}を参照のこと。

マウスポインターがホットスポット上にあるときにマウスをクリックしたときのイベントは、ホットスポットの@var{id}とマウスイベントを組み合わせて構成される。たとえば、ホットスポットの@var{id}が@code{area4}なら、@code{[area4
mouse-1]}となる。
@end table

@defun image-mask-p spec &optional frame
この関数は、イメージ@var{spec}がマスクビットマップをもつなら、@code{t}をリターンする。@var{frame}はそのイメージが表示されるフレームである。@var{frame}が@code{nil}または省略された場合は、選択されたフレームが使用される(@ref{Input
Focus}を参照)。
@end defun

@node XBM Images
@subsection XBM Images
@cindex XBM

  XBMフォーマットを使用するには、イメージタイプとして@code{xbm}を指定します。このイメージフォーマットは外部ライブラリーを要求せず、このタイプのイメージは常にサポートされます。

  @code{xbm}イメージタイプにたいして、追加のイメージプロパティがサポートされます:

@table @code
@item :foreground @var{foreground}
値@var{foreground}はそのイメージのフォアグラウンドカラーを指定する文字列、またはデフォルトカラーを指定する@code{nil}であること。このカラーはXBM内の1の各ピクセルに使用される。デフォルトは、そのフレームのフォアグラウンドカラーである。

@item :background @var{background}
値@var{background}はそのイメージのバックグラウンドカラーを指定する文字列、またはデフォルトカラーを指定する@code{nil}であること。このカラーはXBM内の0の各ピクセルに使用される。デフォルトは、そのフレームのバックグラウンドカラーである。
@end table

  外部ファイルのかわりに、Emacs内のデータを指定してXBMイメージを指定するには、以下の3つのプロパティを使用する:

@table @code
@item :data @var{data}
値@var{data}は、そのイメージのコンテンツを指定する。@var{data}として使用できる、3つのフォーマットが存在する:

@itemize @bullet
@item
それぞれがイメージの1ラインを指定するような、文字列ベクターまたはboolベクター。@code{:height}と@code{:width}を指定する。

@item
文字列なら、XBMファイルが含むのと同じバイトシーケンスを含む。この場合は@code{:height}と@code{:width}を指定してはならない。これらを省略することが、そのデータがXBMファイルのフォーマットをもつことを示すからである。イメージの高さと幅は、ファイルのコンテンツにより指定される。

@item
イメージのビット(もしかしたら終端の使用されない余分なビットを含む)を含む文字列、またはboolベクター。少なくとも@var{width} *
@code{height}ビットを含むこと。この場合は、その文字列がXBMファイル全体ではなく、単にビットだけを含むことを示すとともに、そのイメージのサイズを指定するために、@code{:height}と@code{:width}を指定しなければならない。
@end itemize

@item :width @var{width}
値@var{width}は、ピクセル単位でイメージの幅を指定する。

@item :height @var{height}
値@var{height}は、ピクセル単位でイメージの高さを指定する。
@end table

@node XPM Images
@subsection XPM Images
@cindex XPM

  XPMフォーマットを使用するには、イメージタイプに@code{xpm}を指定します。@code{xpm}イメージタイプでは、追加のプロパティ@code{:color-symbols}にも意味があります。

@table @code
@item :color-symbols @var{symbols}
値@var{symbols}は、要素が@code{(@var{name}
.
@var{color})}という形式をもつようなalistであること。各要素において、@var{name}はイメージファイル内に出現するカラー名、@var{color}はそのカラー名の実際の表示に使用するカラーを指定する。
@end table

@node PostScript Images
@subsection PostScript Images
@cindex postscript images

  あるイメージにたいしてPostScriptを使用するには、イメージタイプ@code{postscript}を指定します。これは、Ghostscriptがインストールされている場合のみ機能します。常に以下の3つのプロパティを使用しなければなりません:

@table @code
@item :pt-width @var{width}
値@var{width}はポイント(1/72インチ)単位で測ったイメージの幅を指定する。@var{width}は整数でなければならない。

@item :pt-height @var{height}
値@var{height}はポイント(1/72インチ)単位で測ったイメージの高さを指定する。@var{height}は整数でなければならない。

@item :bounding-box @var{box}
値@var{box}は、4つの整数からなるリストかベクターでなければならない。これらの整数は、PostScriptファイルの@samp{BoundingBox}に類似した、PostScriptイメージのバウンディングボックスを指定する。

@example
%%BoundingBox: 22 171 567 738
@end example
@end table

@node ImageMagick Images
@subsection ImageMagick Images
@cindex ImageMagick images
@cindex images, support for more formats

  ImageMagickのサポートつきでEmacsをビルドした場合には、多くくのイメージフォーマットをロードするために、ImageMagickライブラリーを使用できます(@ref{File
Conveniences,,, emacs, The GNU Emacs
Manual}を参照)。ImageMagickを通じてロードしたイメージのイメージタイプシンボルは、基礎となる実際のイメージフォーマットとは無関係に、@code{imagemagick}になります。

@defun imagemagick-types
この関数は、カレントのImageMagickインストールによりサポートされる、イメージファイル拡張子のリストをリターンする。リストの各要素は、@file{.bmp}イメージは@code{BMP}のように、イメージタイプにたいして内部的なImageMagick名を表すシンボルである。
@end defun

@defopt imagemagick-enabled-types
この変数の値は、EmacsがImageMagickを使用してレンダリングを試みるかもしれない、ImageMagickイメージタイプのリストである。リストの各要素は、@code{imagemagick-types}がリターンするリスト内のシンボルのいずれか、または等価な文字列である。もしくは値@code{t}はImageMagickにたいして利用できるすべてのイメージタイプを有効にする。この変数の値とは関係なく、@code{imagemagick-types-inhibit}(以下参照)が優先される。
@end defopt

@defopt imagemagick-types-inhibit
この変数の値は、@code{imagemagick-enabled-types}の値とは無関係に、ImageMagickを使用して決してレンダリングされることのない、ImageMagickイメージタイプのリストである。値@code{t}は、ImageMagickを完全に無効にする。
@end defopt

@defvar image-format-suffixes
この変数は、イメージタイプをファイル名拡張子にマッピングするalistである。Emacsは、ImageMagickライブラリーにイメージのタイプに関するヒントを与えるために、この変数と@code{:format}イメージプロパティ(以下参照)を組み合わせて使用する。各要素は@code{(@var{type}
@var{extension})}という形式をもち、@var{type}はイメージのcontent-typeを指定するシンボル、@var{extension}は関連付けられるファイル名拡張子を指定する文字列である。
@end defvar

  ImageMagickによりロードされたイメージは、追加で以下のイメージディスクリプタプロパティをサポートします:

@table @code
@item :background @var{background}
@var{background}が非@code{nil}なら、カラーを指定する文字列であること。これはイメージが透明度をサポートする場合に、そのイメージのバックグラウンドカラーとして使用される。値が@code{nil}の場合のデフォルトは、そのフレームのバックグラウンドカラー。

@item :width @var{width}, :height @var{height}
キーワード@code{:width}と@code{:height}は、イメージのスケーリングに使用される。いずれか一方のみが指定された場合には、アスペクト比を保つために、もう一方は算出される。両方が指定された場合には、アスペクト比は保たれないかもしれない。

@item :max-width @var{max-width}, :max-height @var{max-height}
キーワード@code{:max-width}と@code{:max-height}は、イメージのサイズがこれらの値を超過した場合のスケーリングに使用される。@code{:width}がセットされた場合には@code{max-width}より優先され、@code{:height}がセットされた場合には@code{max-height}より優先されるだろうが、それ以外ではこれらのキーワードを望むように混交できる。@code{:max-width}と@code{:max-height}は常に、アスペクト比を保つであろう。

@item :format @var{type}
値@var{type}は、@code{image-format-suffixes}で見られるような、イメージのタイプを指定するシンボルであること。これはイメージが関連付けられたファイル名をもたない際に、そのイメージタイプを検出する助けとなるヒントをImageMagickに提供する。

@item :rotation @var{angle}
回転角度を度数で指定する。

@item :index @var{frame}
@c Doesn't work: http://debbugs.gnu.org/7978
@ref{Multi-Frame Images}を参照のこと。
@end table

@node Other Image Types
@subsection Other Image Types
@cindex PBM

  PBMイメージには、イメージタイプ@code{pbm}を指定します。カラー、グレースケール、およびモノクロのイメージがサポートされます。モノクロのPBMイメージにたいしては、2つの追加イメージプロパティがサポートされます。

@table @code
@item :foreground @var{foreground}
値@var{foreground}は、そのイメージのフォアグラウンドカラーを指定する文字列、またはデフォルトカラーなら@code{nil}であること。このカラーは、そのPBM内の1であるようなピクセルすべてに使用される。デフォルトは、フレームのフォアグラウンドカラー。

@item :background @var{background}
値@var{background}は、そのイメージのバックグラウンドカラーを指定する文字列、またはデフォルトカラーなら@code{nil}であること。このカラーは、そのPBM内の0であるようなピクセルすべてに使用される。デフォルトは、フレームのバックグラウンドカラー。
@end table

@noindent
Emacsがサポート可能な、残りのイメージタイプは以下のとおり:

@table @asis
@item GIF
イメージタイプ@code{gif}。@code{:index}プロパティをサポートする。@ref{Multi-Frame Images}を参照のこと。

@item JPEG
イメージタイプ@code{jpeg}。

@item PNG
イメージタイプ@code{png}。

@item SVG
イメージタイプ@code{svg}。

@item TIFF
イメージタイプ@code{tiff}。@code{:index}プロパティをサポートする。@ref{Multi-Frame Images}を参照のこと。
@end table

@node Defining Images
@subsection Defining Images
@cindex define image

  関数@code{create-image}、@code{defimage}、@code{find-image}はイメージディスクリプタを作成するための便利な手段を提供します。

@defun create-image file-or-data &optional type data-p &rest props
この関数は、@var{file-or-data}内のデータを使用するイメージディスクリプタを作成してリターンする。@var{file-or-data}はファイル名、またはイメージデータを含む文字列を指定できる。前者の場合@var{data-p}は@code{nil}、後者なら非@code{nil}であること。

オプション引数@var{type}は、イメージタイプを指定するシンボルである。@var{type}が省略または@code{nil}なら、@code{create-image}はファイル先頭の数バイト、またはファイル名からイメージタイプの判断を試みる。

残りの引数@var{props}は追加のイメージプロパティを指定する。たとえば、

@c ':heuristic-mask' is not documented?
@example
(create-image "foo.xpm" 'xpm nil :heuristic-mask t)
@end example

このタイプのイメージがサポートされていなければ、この関数は@code{nil}、それ以外ならイメージディスクリプタをリターンする。
@end defun

@defmac defimage symbol specs &optional doc
このマクロは、イメージマクロとして@var{symbol}を定義する。引数@var{specs}は、そのイメージの表示方法を指定するリストである。3つ目の引数@var{doc}は、オプションのドキュメント文字列である。

@var{specs}内の各要素はプロパティリストの形式をもち、それぞれが少なくとも@code{:type}プロパティと、@code{:file}か@code{:data}いずれかのプロパティをもつべきである。@code{:type}の値はイメージタイプを指定するシンボル、@code{:file}の値はイメージをロードするファイル、@code{:data}の値は実際のイメージデータを含む文字列であること。以下は例である:

@example
(defimage test-image
  ((:type xpm :file "~/test1.xpm")
   (:type xbm :file "~/test1.xbm")))
@end example

@code{defimage}はそれが使用可能か、つまりそのタイプがサポートされているかとファイルが存在するかを確認するために、各要素を1つずつテストする。最初に使用可能な引数が、@var{symbol}内に格納するイメージディスクリプタを作成するために使用される。

機能する候補がなければ、@var{symbol}は@code{nil}として定義される。
@end defmac

@defun find-image specs
この関数は、イメージ仕様@var{specs}のリストの1つを満足するイメージを探す、便利な手段を提供する。

@var{specs}内の各仕様は、イメージタイプに応じた内容のプロパティリストである。すべての仕様は少なくとも@code{:type
@var{type}}、および@w{@code{:file @var{file}}}か@w{@code{:data
@var{data}}}いずれかのプロパティを含まなければならない。ここで@var{type}は@code{xbm}のようにイメージタイプを指定するシンボル、@var{file}はイメージをロードするファイル、@var{data}は実際のイメージデータを含む文字列である。このリスト内で@var{type}がサポートされていて、かつ@var{file}が存在する最初の仕様は、リターンされるイメージ仕様の構築に使用される。満足する仕様がなければ、@code{nil}がリターンされる。

イメージは、@code{image-load-path}内で検索される。
@end defun

@defvar image-load-path
この変数の値は、イメージファイルを検索する場所のリストである。要素が文字列、または値が文字列であるような変数シンボルなら、その文字列は検索を行うディレクトリーとされる。値がリストであるような変数シンボルの場合、それは検索を行うディレクトリーのリストとされる。

デフォルトでは@code{data-directory}で指定されたディレクトリーのサブディレクトリー@file{images}、次に@code{data-directory}で指定されたディレクトリー、最後に@code{load-path}で指定されたディレクトリー内を検索する。サブディレクトリーは自動的には検索に含まれないので、イメージファイルをサブディレクトリー内に配置した場合は、サブディレクトリー名を明示的に与える必要がある。たとえば@code{data-directory}内でイメージ@file{images/foo/bar.xpm}を見つけるには、以下のようにそのイメージを指定すること:

@example
(defimage foo-image '((:type xpm :file "foo/bar.xpm")))
@end example
@end defvar

@defun image-load-path-for-library library image &optional path no-error
この関数は、Lispパッケージ@var{library}により使用されるイメージにたいして、適切な検索パスをリターンする。

この関数はまず@code{image-load-path}(@file{@code{data-directory}/images}を除外)を使用し、次に@code{load-path}の後に@var{library}にとって適切なパス(ライブラリーファイル自身にたいする相対パス@file{../../etc/images}と@file{../etc/images}を含む)を補い、最後に@file{@code{data-directory}/images}から@var{image}を検索する。

その後にこの関数は、先頭に@var{image}が見つかったディレクトリー、その後に@code{load-path}の値が続く、ディレクトリーのリストをリターンする。@var{path}が与えられた場合は、それを@code{load-path}のかわりに使用する。

@var{no-error}が非@code{nil}で、かつ適切なパスが見つからない場合に、エラーをシグナルしない。かわりに前記のディレクトリーリストをリターンするが、イメージのディレクトリーの箇所に@code{nil}が出現する点が異なる。

以下は@code{image-load-path-for-library}の使用例である:

@example
(defvar image-load-path) ; shush compiler
(let* ((load-path (image-load-path-for-library
                    "mh-e" "mh-logo.xpm"))
       (image-load-path (cons (car load-path)
                              image-load-path)))
  (mh-tool-bar-folder-buttons-init))
@end example
@end defun

@node Showing Images
@subsection Showing Images
@cindex show image

  自分で@code{display}プロパティをセットアップすることでイメージディスクリプタを使用できますが、このセクションの関数を使用するほうがより簡単です。

@defun insert-image image &optional string area slice
この関数は、カレントバッファーのポイント位置に@var{image}を挿入する。@var{image}は、イメージディスクリプタであること。これは@code{create-image}によりリターンされた値、または@code{defimage}で定義されたシンボルの値かもしれない。引数@var{string}は、イメージを保持するためにバッファー内に配すテキストを指定する。これが省略または@code{nil}なら、@code{insert-image}はデフォルトで@code{"
"}を使用する。

引数@var{area}は、マージン内にイメージを置くかどうかを指定する。これが@code{left-margin}なら左マージンにイメージが表示され、@code{right-margin}なら右マージンを指定する。@var{area}が@code{nil}または省略された場合、イメージはバッファーのテキスト内のポイント位置に表示される。

引数@var{slice}は、挿入するイメージのスライスを指定する。@var{slice}が@code{nil}または省略された場合は、そのイメージ全体が挿入される。それ以外では、@var{slice}がリスト@code{(@var{x}
@var{y} @var{width}
@var{height})}なら@var{x}と@var{y}は位置、@var{width}と@var{height}は挿入するイメージの領域を指定する。整数値はピクセル単位。0.0から1.0までの浮動小数点数は、イメージ全体の幅または高さにたいする割合を指定する。

内部的には、この関数はバッファー内に@var{string}を挿入して、@var{image}を指定する@code{display}プロパティにそれを渡す。@ref{Display
Property}を参照のこと。
@end defun

@cindex slice, image
@cindex image slice
@defun insert-sliced-image image &optional string area rows cols
この関数は@code{insert-image}と同様、カレントバッファー内に@var{image}を挿入するが、イメージを@var{rows}✕@var{cols}の同一サイズのスライスに分割する。

イメージが``スライス''されて挿入されると、Emacsは各スライスを個別のイメージとして表示して、(巨大な)イメージを表示するバッファーのページングの際、イメージ全体を上下にジャンプするのではなく、より直感的な上下スクロールが可能になる。
@end defun

@defun put-image image pos &optional string area
この関数は、カレントバッファー内の@var{pos}の前に、イメージ@var{image}を配置する。引数@var{pos}は整数、またはマーカーであること。これは、イメージが表示されるべきバッファー位置を指定する。引数@var{string}は、代替として表示されるべきデフォルトのイメージを保持するテキストであること。

引数@var{image}はイメージディスクリプタでなければならず、それは@code{create-image}がリターンされたか、あるいは@code{defimage}により格納されたイメージディスクリプタかもしれない。

引数@var{area}は、マージン内にイメージを置くかどうかを指定する。これが@code{left-margin}なら左マージンにイメージが表示され、@code{right-margin}なら右マージンを指定する。@var{area}が@code{nil}または省略された場合、イメージはバッファーのテキスト内のポイント位置に表示される。

内部的には、この関数はオーバーレイを作成して、値がそのイメージであるような@code{display}プロパティをもつテキストを含む、@code{before-string}プロパティをそのオーバーレイに与えている(なんと!)。
@end defun

@defun remove-images start end &optional buffer
この関数は、@var{buffer}の位置@var{start}と@var{end}の間のイメージを削除する。@var{buffer}が省略または@code{nil}なら、カレントバッファーからイメージを削除する。

これは@code{put-image}が行う方法で@var{buffer}に配置されたイメージだけを削除し、@code{insert-image}や他の方法で挿入されたイメージは削除しない。
@end defun

@defun image-size spec &optional pixels frame
@cindex size of image
この関数は、ペアー@w{@code{(@var{width}
.
@var{height})}}として、イメージのサイズをリターンする。@var{spec}はイメージ仕様である。@var{pixels}が非@code{nil}ならピクセル単位、それ以外ならcanonicalな文字単位(そのフレームのデフォルトフォントの幅/高さの割合)で量ったサイズをリターンする。@var{frame}は、イメージが表示されるフレームである。@var{frame}が@code{nil}または省略された場合は、選択されたフレームを使用する(@ref{Input
Focus}を参照)。
@end defun

@defvar max-image-size
この変数は、Emacsがロードするイメージの最大サイズを定義するために使用される。Emacsはこの制限より大きいイメージのロード(と表示)を拒絶するだろう。

値が整数なら、それはピクセル単位で量ったイメージの最大の高さと幅を、直接指定する。浮動小数点数なら、そのフレームの高さおよび幅にたいする比率として、イメージの最大の高さと幅を指定する。値が数値でなければ、イメージサイズにたいする明示的な制限は存在しない。

この変数の目的は、意図せずEmacsに不当に大きなイメージがロードされるとを防ぐことである。これは、イメージの初回ロード時だけ効果がある。イメージが一度イメージキャッシュに置かれると、その後@code{max-image-size}の値が変更されても、そのイメージは常に表示可能である(@ref{Image
Cache}を参照)。
@end defvar

@node Multi-Frame Images
@subsection Multi-Frame Images
@cindex multi-frame images

@cindex animation
@cindex image animation
@cindex image frames
複数のイメージを含むことができるイメージファイルがいくつかあります。わたしたちはこのような場合、イメージ内に複数の``フレーム''があると表現しています。現在のところ、EmacsはGIF、TIFF、およびDJVMのような特定のImageMagickフォーマットにたいして、複数フレームをサポートします。

フレームは、複数の``ページ''を表現するため(通常は、たとえばマルチフレームTIFFの場合)、あるいはアニメーションを作成するため(通常はマルチフレームGIFファイルの場合)に使用できます。

マルチフレームイメージは、表示されるフレームを指定する整数値(0から数える)が値であるような、プロパティ@code{:index}をもっています。

@defun image-multi-frame-p image
この関数は、@var{image}が2つ以上のフレームを含む場合は、非@code{nil}をリターンする。実際のリターン値はコンス@code{(@var{nimages}
.
@var{delay})}で、@var{nimages}はフレーム数、@var{delay}はフレーム間の遅延秒数、イメージが遅延を指定しない場合は@code{nil}である。通常、アニメーションを意図されたイメージはフレームの遅延を指定し、複数ページとして扱われることを意図したイメージは指定しない。
@end defun

@defun image-current-frame image
この関数は@var{image}にたいして、0から数えたカレントフレーム番号のインデックスをリターンする。
@end defun

@defun image-show-frame image n &optional nocheck
この関数は、@var{image}をフレーム番号@var{n}とスイッチする。@var{nocheck}が@code{nil}なら、有効範囲外のフレーム番号を範囲終端に置き換える。@var{image}が指定された番号のフレームを含まなければ、イメージは中貫きの四角(hollow
box)で表示される。
@end defun

@defun image-animate image &optional index limit
この関数は、@var{image}をアニメーション表示する。オプションの整数@var{index}は、開始するフレームを指定する(デフォルトは0)。オプション引数@var{limit}は、アニメーションの長さを制御する。これが省略または@code{nil}なら、アニメーション回数は1回、@code{t}なら永久にループ表示する。数値なら、その秒数後にアニメーションは停止する。
@end defun

@vindex image-minimum-frame-delay
@vindex image-default-frame-delay
@noindent
アニメーションはタイマーにより処理されます。Emacsは最小のフレーム遅延を0.01秒(@code{image-minimum-frame-delay})とすることに注意してください。そのイメージ自身が遅延を指定しなければ、Emacsは@code{image-default-frame-delay}を使用します。

@defun image-animate-timer image
この関数は、もし存在すれば@var{image}のアニメーションに責任をもつタイマーをリターンする。
@end defun


@node Image Cache
@subsection Image Cache
@cindex image cache

  Emacsはイメージをより効果的に再表示できるように、イメージをキャッシュします。Emacsがイメージを表示する際、既存のイメージ仕様が望む仕様と@code{equal}なイメージキャッシュを検索します。マッチが見つかったら、そのイメージはキャッシュから表示され、それ以外ではイメージは通常のようにロードされます。

@defun image-flush spec &optional frame
この関数は、フレーム@var{frame}のイメージキャッシュから、仕様@var{spec}のイメージを削除する。イメージ仕様の比較には、@code{equal}を使用する。@var{frame}が@code{nil}の場合のデフォルトは選択されたフレーム。@var{frame}が@code{t}なら、そのイメージはすべての既存フレームでフラッシュされる。

Emacsのカレント実装では、各グラフィカル端末はイメージキャッシュを処理して、それはその端末上のすべてのフレームにより共有される(@ref{Multiple
Terminals}を参照)。つまりあるフレームでイメージをリフレッシュすると、同一端末上の他のすべてのフレームでもリフレッシュされる。
@end defun

  @code{image-flush}の1つの用途は、Emacsにイメージファイルの変更を伝えることです。イメージ仕様が@code{:file}プロパティを含む場合、そのイメージの初回表示時にそのファイルコンテンツにもとづいて、イメージがキャッシュされます。たとえその後にファイルが変更されても、Emacsはそのイメージの古いバージョンを表示し続けます。@code{image-flush}を呼び出すことによりそのイメージはキャッシュからフラッシュされ、そのイメージの表示が次回必要になった際に、Emacsにファイルの再読み込みを強制します。

  @code{image-flush}の他の用途は、メモリー節約です。Lispプログラムで@code{image-cache-eviction-delay}(以下参照)より遥かに短い期間に多数の一時イメージを作成する場合には、Emacsが自動的に行うことを待たずに、自身で使用されていないイメージのフラッシュを選択できます。

@defun clear-image-cache &optional filter
この関数は、イメージキャッシュ内に格納されたすべてのイメージを削除して、イメージキャッシュをクリアーする。@var{filter}が省略または@code{nil}なら、選択されたフレームにたいしてキャッシュをクリアーする。@var{filter}がフレームなら、そのフレームにたいしてキャッシュをクリアーする。@var{filter}が@code{t}なら、すべてのイメージキャッシュをクリアーする。それ以外なら、@var{filter}はファイル名として解釈され、すべてのイメージキャッシュからそのファイル名に関連付けられたすべてのイメージを削除する。
@end defun

イメージキャッシュ内のイメージが指定された期間内に表示されなければ、Emacsはそれをキャッシュから削除して、割り当てられたメモリーを解放します。

@defvar image-cache-eviction-delay
この変数は、表示されることなくイメージがキャッシュ内に残留できる秒数を指定する。あるイメージがこの秒数の間に表示されなければ、Emacsはそれをイメージキャッシュから削除する。

ある状況下では、もしキャッシュ内のイメージ数が大きくなり過ぎた場合には、実際の立ち退き遅延(eviction delay)はこれより短くなり得る。

値が@code{nil}なら、明示的にキャッシュをクリアーした場合を除き、Emacsはキャッシュからイメージを削除しない。このモードはデバッグ時に有用かもしれない。
@end defvar

@node Buttons
@section Buttons
@cindex buttons in buffers
@cindex clickable buttons in buffers

  The Button package defines functions for inserting and manipulating
@dfn{buttons} that can be activated with the mouse or via keyboard
commands.  These buttons are typically used for various kinds of hyperlinks.

  A button is essentially a set of text or overlay properties, attached to a
stretch of text in a buffer.  These properties are called @dfn{button
properties}.  One of these properties, the @dfn{action property}, specifies
a function which is called when the user invokes the button using the
keyboard or the mouse.  The action function may examine the button and use
its other properties as desired.

  In some ways, the Button package duplicates the functionality in the Widget
package.  @xref{Top, , Introduction, widget, The Emacs Widget Library}.  The
advantage of the Button package is that it is faster, smaller, and simpler
to program.  From the point of view of the user, the interfaces produced by
the two packages are very similar.

@menu
* Button Properties::        Button properties with special meanings.
* Button Types::             Defining common properties for classes of 
                               buttons.
* Making Buttons::           Adding buttons to Emacs buffers.
* Manipulating Buttons::     Getting and setting properties of buttons.
* Button Buffer Commands::   Buffer-wide commands and bindings for buttons.
@end menu

@node Button Properties
@subsection Button Properties
@cindex button properties

  Each button has an associated list of properties defining its appearance and
behavior, and other arbitrary properties may be used for application
specific purposes.  The following properties have special meaning to the
Button package:

@table @code
@item action
@kindex action @r{(button property)}
The function to call when the user invokes the button, which is passed the
single argument @var{button}.  By default this is @code{ignore}, which does
nothing.

@item mouse-action
@kindex mouse-action @r{(button property)}
This is similar to @code{action}, and when present, will be used instead of
@code{action} for button invocations resulting from mouse-clicks (instead of
the user hitting @key{RET}).  If not present, mouse-clicks use @code{action}
instead.

@item face
@kindex face @r{(button property)}
This is an Emacs face controlling how buttons of this type are displayed; by
default this is the @code{button} face.

@item mouse-face
@kindex mouse-face @r{(button property)}
This is an additional face which controls appearance during mouse-overs
(merged with the usual button face); by default this is the usual Emacs
@code{highlight} face.

@item keymap
@kindex keymap @r{(button property)}
The button's keymap, defining bindings active within the button region.  By
default this is the usual button region keymap, stored in the variable
@code{button-map}, which defines @key{RET} and @key{mouse-2} to invoke the
button.

@item type
@kindex type @r{(button property)}
The button type.  @xref{Button Types}.

@item help-echo
@kindex help-index @r{(button property)}
A string displayed by the Emacs tool-tip help system; by default,
@code{"mouse-2, RET: Push this button"}.

@item follow-link
@kindex follow-link @r{(button property)}
The follow-link property, defining how a @key{Mouse-1} click behaves on this
button, @xref{Clickable Text}.

@item button
@kindex button @r{(button property)}
All buttons have a non-@code{nil} @code{button} property, which may be
useful in finding regions of text that comprise buttons (which is what the
standard button functions do).
@end table

  There are other properties defined for the regions of text in a button, but
these are not generally interesting for typical uses.

@node Button Types
@subsection Button Types
@cindex button types

  Every button has a @dfn{button type}, which defines default values for the
button's properties.  Button types are arranged in a hierarchy, with
specialized types inheriting from more general types, so that it's easy to
define special-purpose types of buttons for specific tasks.

@defun define-button-type name &rest properties
Define a `button type' called @var{name} (a symbol).  The remaining
arguments form a sequence of @var{property value} pairs, specifying default
property values for buttons with this type (a button's type may be set by
giving it a @code{type} property when creating the button, using the
@code{:type} keyword argument).

In addition, the keyword argument @code{:supertype} may be used to specify a
button-type from which @var{name} inherits its default property values.
Note that this inheritance happens only when @var{name} is defined;
subsequent changes to a supertype are not reflected in its subtypes.
@end defun

  Using @code{define-button-type} to define default properties for buttons is
not necessary---buttons without any specified type use the built-in
button-type @code{button}---but it is encouraged, since doing so usually
makes the resulting code clearer and more efficient.

@node Making Buttons
@subsection Making Buttons
@cindex making buttons

  Buttons are associated with a region of text, using an overlay or text
properties to hold button-specific information, all of which are initialized
from the button's type (which defaults to the built-in button type
@code{button}).  Like all Emacs text, the appearance of the button is
governed by the @code{face} property; by default (via the @code{face}
property inherited from the @code{button} button-type)  this is a simple
underline, like a typical web-page link.

  For convenience, there are two sorts of button-creation functions, those
that add button properties to an existing region of a buffer, called
@code{make-...button}, and those that also insert the button text, called
@code{insert-...button}.

  The button-creation functions all take the @code{&rest} argument
@var{properties}, which should be a sequence of @var{property value} pairs,
specifying properties to add to the button; see @ref{Button Properties}.  In
addition, the keyword argument @code{:type} may be used to specify a
button-type from which to inherit other properties; see @ref{Button Types}.
Any properties not explicitly specified during creation will be inherited
from the button's type (if the type defines such a property).

  The following functions add a button using an overlay (@pxref{Overlays}) to
hold the button properties:

@defun make-button beg end &rest properties
This makes a button from @var{beg} to @var{end} in the current buffer, and
returns it.
@end defun

@defun insert-button label &rest properties
This insert a button with the label @var{label} at point, and returns it.
@end defun

  The following functions are similar, but using text properties (@pxref{Text
Properties}) to hold the button properties.  Such buttons do not add markers
to the buffer, so editing in the buffer does not slow down if there is an
extremely large numbers of buttons.  However, if there is an existing face
text property on the text (e.g., a face assigned by Font Lock mode), the
button face may not be visible.  Both of these functions return the starting
position of the new button.

@defun make-text-button beg end &rest properties
This makes a button from @var{beg} to @var{end} in the current buffer, using
text properties.
@end defun

@defun insert-text-button label &rest properties
This inserts a button with the label @var{label} at point, using text
properties.
@end defun

@node Manipulating Buttons
@subsection Manipulating Buttons
@cindex manipulating buttons

These are functions for getting and setting properties of buttons.  Often
these are used by a button's invocation function to determine what to do.

Where a @var{button} parameter is specified, it means an object referring to
a specific button, either an overlay (for overlay buttons), or a
buffer-position or marker (for text property buttons).  Such an object is
passed as the first argument to a button's invocation function when it is
invoked.

@defun button-start button
Return the position at which @var{button} starts.
@end defun

@defun button-end button
Return the position at which @var{button} ends.
@end defun

@defun button-get button prop
Get the property of button @var{button} named @var{prop}.
@end defun

@defun button-put button prop val
Set @var{button}'s @var{prop} property to @var{val}.
@end defun

@defun button-activate button &optional use-mouse-action
Call @var{button}'s @code{action} property (i.e., invoke the function that
is the value of that property, passing it the single argument
@var{button}).  If @var{use-mouse-action} is non-@code{nil}, try to invoke
the button's @code{mouse-action} property instead of @code{action}; if the
button has no @code{mouse-action} property, use @code{action} as normal.
@end defun

@defun button-label button
Return @var{button}'s text label.
@end defun

@defun button-type button
Return @var{button}'s button-type.
@end defun

@defun button-has-type-p button type
Return @code{t} if @var{button} has button-type @var{type}, or one of
@var{type}'s subtypes.
@end defun

@defun button-at pos
Return the button at position @var{pos} in the current buffer, or
@code{nil}.  If the button at @var{pos} is a text property button, the
return value is a marker pointing to @var{pos}.
@end defun

@defun button-type-put type prop val
Set the button-type @var{type}'s @var{prop} property to @var{val}.
@end defun

@defun button-type-get type prop
Get the property of button-type @var{type} named @var{prop}.
@end defun

@defun button-type-subtype-p type supertype
Return @code{t} if button-type @var{type} is a subtype of @var{supertype}.
@end defun

@node Button Buffer Commands
@subsection Button Buffer Commands
@cindex button buffer commands

These are commands and functions for locating and operating on buttons in an
Emacs buffer.

@code{push-button} is the command that a user uses to actually `push' a
button, and is bound by default in the button itself to @key{RET} and to
@key{mouse-2} using a local keymap in the button's overlay or text
properties.  Commands that are useful outside the buttons itself, such as
@code{forward-button} and @code{backward-button} are additionally available
in the keymap stored in @code{button-buffer-map}; a mode which uses buttons
may want to use @code{button-buffer-map} as a parent keymap for its keymap.

If the button has a non-@code{nil} @code{follow-link} property, and
@code{mouse-1-click-follows-link} is set, a quick @key{Mouse-1} click will
also activate the @code{push-button} command.  @xref{Clickable Text}.

@deffn Command push-button &optional pos use-mouse-action
Perform the action specified by a button at location @var{pos}.  @var{pos}
may be either a buffer position or a mouse-event.  If @var{use-mouse-action}
is non-@code{nil}, or @var{pos} is a mouse-event (@pxref{Mouse Events}), try
to invoke the button's @code{mouse-action} property instead of
@code{action}; if the button has no @code{mouse-action} property, use
@code{action} as normal.  @var{pos} defaults to point, except when
@code{push-button} is invoked interactively as the result of a mouse-event,
in which case, the mouse event's position is used.  If there's no button at
@var{pos}, do nothing and return @code{nil}, otherwise return @code{t}.
@end deffn

@deffn Command forward-button n &optional wrap display-message
Move to the @var{n}th next button, or @var{n}th previous button if @var{n}
is negative.  If @var{n} is zero, move to the start of any button at point.
If @var{wrap} is non-@code{nil}, moving past either end of the buffer
continues from the other end.  If @var{display-message} is non-@code{nil},
the button's help-echo string is displayed.  Any button with a
non-@code{nil} @code{skip} property is skipped over.  Returns the button
found.
@end deffn

@deffn Command backward-button n &optional wrap display-message
Move to the @var{n}th previous button, or @var{n}th next button if @var{n}
is negative.  If @var{n} is zero, move to the start of any button at point.
If @var{wrap} is non-@code{nil}, moving past either end of the buffer
continues from the other end.  If @var{display-message} is non-@code{nil},
the button's help-echo string is displayed.  Any button with a
non-@code{nil} @code{skip} property is skipped over.  Returns the button
found.
@end deffn

@defun next-button pos &optional count-current
@defunx previous-button pos &optional count-current
Return the next button after (for @code{next-button}) or before (for
@code{previous-button}) position @var{pos} in the current buffer.  If
@var{count-current} is non-@code{nil}, count any button at @var{pos} in the
search, instead of starting at the next button.
@end defun

@node Abstract Display
@section Abstract Display
@cindex ewoc
@cindex display, abstract
@cindex display, arbitrary objects
@cindex model/view/controller
@cindex view part, model/view/controller

  The Ewoc package constructs buffer text that represents a structure of Lisp
objects, and updates the text to follow changes in that structure.  This is
like the ``view'' component in the ``model/view/controller'' design
paradigm.  Ewoc means ``Emacs's Widget for Object Collections''.

  An @dfn{ewoc} is a structure that organizes information required to
construct buffer text that represents certain Lisp data.  The buffer text of
the ewoc has three parts, in order: first, fixed @dfn{header} text; next,
textual descriptions of a series of data elements (Lisp objects that you
specify); and last, fixed @dfn{footer} text.  Specifically, an ewoc contains
information on:

@itemize @bullet
@item
The buffer which its text is generated in.

@item
The text's start position in the buffer.

@item
The header and footer strings.

@item
@cindex node, ewoc
@c or "@cindex node, abstract display"?
A doubly-linked chain of @dfn{nodes}, each of which contains:

@itemize
@item
A @dfn{data element}, a single Lisp object.

@item
Links to the preceding and following nodes in the chain.
@end itemize

@item
A @dfn{pretty-printer} function which is responsible for inserting the
textual representation of a data element value into the current buffer.
@end itemize

  Typically, you define an ewoc with @code{ewoc-create}, and then pass the
resulting ewoc structure to other functions in the Ewoc package to build
nodes within it, and display it in the buffer.  Once it is displayed in the
buffer, other functions determine the correspondence between buffer
positions and nodes, move point from one node's textual representation to
another, and so forth.  @xref{Abstract Display Functions}.

@cindex encapsulation, ewoc
@c or "@cindex encapsulation, abstract display"?
  A node @dfn{encapsulates} a data element much the way a variable holds a
value.  Normally, encapsulation occurs as a part of adding a node to the
ewoc.  You can retrieve the data element value and place a new value in its
place, like so:

@lisp
(ewoc-data @var{node})
@result{} value

(ewoc-set-data @var{node} @var{new-value})
@result{} @var{new-value}
@end lisp

@noindent
You can also use, as the data element value, a Lisp object (list or vector)
that is a container for the ``real'' value, or an index into some other
structure.  The example (@pxref{Abstract Display Example})  uses the latter
approach.

  When the data changes, you will want to update the text in the buffer.  You
can update all nodes by calling @code{ewoc-refresh}, or just specific nodes
using @code{ewoc-invalidate}, or all nodes satisfying a predicate using
@code{ewoc-map}.  Alternatively, you can delete invalid nodes using
@code{ewoc-delete} or @code{ewoc-filter}, and add new nodes in their place.
Deleting a node from an ewoc deletes its associated textual description from
buffer, as well.

@menu
* Abstract Display Functions::  Functions in the Ewoc package.
* Abstract Display Example::  Example of using Ewoc.
@end menu

@node Abstract Display Functions
@subsection Abstract Display Functions

  In this subsection, @var{ewoc} and @var{node} stand for the structures
described above (@pxref{Abstract Display}), while @var{data} stands for an
arbitrary Lisp object used as a data element.

@defun ewoc-create pretty-printer &optional header footer nosep
This constructs and returns a new ewoc, with no nodes (and thus no data
elements).  @var{pretty-printer} should be a function that takes one
argument, a data element of the sort you plan to use in this ewoc, and
inserts its textual description at point using @code{insert} (and never
@code{insert-before-markers}, because that would interfere with the Ewoc
package's internal mechanisms).

Normally, a newline is automatically inserted after the header, the footer
and every node's textual description.  If @var{nosep} is non-@code{nil}, no
newline is inserted.  This may be useful for displaying an entire ewoc on a
single line, for example, or for making nodes ``invisible'' by arranging for
@var{pretty-printer} to do nothing for those nodes.

An ewoc maintains its text in the buffer that is current when you create it,
so switch to the intended buffer before calling @code{ewoc-create}.
@end defun

@defun ewoc-buffer ewoc
This returns the buffer where @var{ewoc} maintains its text.
@end defun

@defun ewoc-get-hf ewoc
This returns a cons cell @code{(@var{header} . @var{footer})} made from
@var{ewoc}'s header and footer.
@end defun

@defun ewoc-set-hf ewoc header footer
This sets the header and footer of @var{ewoc} to the strings @var{header}
and @var{footer}, respectively.
@end defun

@defun ewoc-enter-first ewoc data
@defunx ewoc-enter-last ewoc data
These add a new node encapsulating @var{data}, putting it, respectively, at
the beginning or end of @var{ewoc}'s chain of nodes.
@end defun

@defun ewoc-enter-before ewoc node data
@defunx ewoc-enter-after ewoc node data
These add a new node encapsulating @var{data}, adding it to @var{ewoc}
before or after @var{node}, respectively.
@end defun

@defun ewoc-prev ewoc node
@defunx ewoc-next ewoc node
These return, respectively, the previous node and the next node of
@var{node} in @var{ewoc}.
@end defun

@defun ewoc-nth ewoc n
This returns the node in @var{ewoc} found at zero-based index @var{n}.  A
negative @var{n} means count from the end.  @code{ewoc-nth} returns
@code{nil} if @var{n} is out of range.
@end defun

@defun ewoc-data node
This extracts the data encapsulated by @var{node} and returns it.
@end defun

@defun ewoc-set-data node data
This sets the data encapsulated by @var{node} to @var{data}.
@end defun

@defun ewoc-locate ewoc &optional pos guess
This determines the node in @var{ewoc} which contains point (or @var{pos} if
specified), and returns that node.  If @var{ewoc} has no nodes, it returns
@code{nil}.  If @var{pos} is before the first node, it returns the first
node; if @var{pos} is after the last node, it returns the last node.  The
optional third arg @var{guess} should be a node that is likely to be near
@var{pos}; this doesn't alter the result, but makes the function run faster.
@end defun

@defun ewoc-location node
This returns the start position of @var{node}.
@end defun

@defun ewoc-goto-prev ewoc arg
@defunx ewoc-goto-next ewoc arg
These move point to the previous or next, respectively, @var{arg}th node in
@var{ewoc}.  @code{ewoc-goto-prev} does not move if it is already at the
first node or if @var{ewoc} is empty, whereas @code{ewoc-goto-next} moves
past the last node, returning @code{nil}.  Excepting this special case,
these functions return the node moved to.
@end defun

@defun ewoc-goto-node ewoc node
This moves point to the start of @var{node} in @var{ewoc}.
@end defun

@defun ewoc-refresh ewoc
This function regenerates the text of @var{ewoc}.  It works by deleting the
text between the header and the footer, i.e., all the data elements'
representations, and then calling the pretty-printer function for each node,
one by one, in order.
@end defun

@defun ewoc-invalidate ewoc &rest nodes
This is similar to @code{ewoc-refresh}, except that only @var{nodes} in
@var{ewoc} are updated instead of the entire set.
@end defun

@defun ewoc-delete ewoc &rest nodes
This deletes each node in @var{nodes} from @var{ewoc}.
@end defun

@defun ewoc-filter ewoc predicate &rest args
This calls @var{predicate} for each data element in @var{ewoc} and deletes
those nodes for which @var{predicate} returns @code{nil}.  Any @var{args}
are passed to @var{predicate}.
@end defun

@defun ewoc-collect ewoc predicate &rest args
This calls @var{predicate} for each data element in @var{ewoc} and returns a
list of those elements for which @var{predicate} returns non-@code{nil}.
The elements in the list are ordered as in the buffer.  Any @var{args} are
passed to @var{predicate}.
@end defun

@defun ewoc-map map-function ewoc &rest args
This calls @var{map-function} for each data element in @var{ewoc} and
updates those nodes for which @var{map-function} returns non-@code{nil}.
Any @var{args} are passed to @var{map-function}.
@end defun

@node Abstract Display Example
@subsection Abstract Display Example

  Here is a simple example using functions of the ewoc package to implement a
``color components display'', an area in a buffer that represents a vector
of three integers (itself representing a 24-bit RGB value) in various ways.

@example
(setq colorcomp-ewoc nil
      colorcomp-data nil
      colorcomp-mode-map nil
      colorcomp-labels ["Red" "Green" "Blue"])

(defun colorcomp-pp (data)
  (if data
      (let ((comp (aref colorcomp-data data)))
        (insert (aref colorcomp-labels data) "\t: #x"
                (format "%02X" comp) " "
                (make-string (ash comp -2) ?#) "\n"))
    (let ((cstr (format "#%02X%02X%02X"
                        (aref colorcomp-data 0)
                        (aref colorcomp-data 1)
                        (aref colorcomp-data 2)))
          (samp " (sample text) "))
      (insert "Color\t: "
              (propertize samp 'face
                          `(foreground-color . ,cstr))
              (propertize samp 'face
                          `(background-color . ,cstr))
              "\n"))))

(defun colorcomp (color)
  "Allow fiddling with COLOR in a new buffer.
The buffer is in Color Components mode."
  (interactive "sColor (name or #RGB or #RRGGBB): ")
  (when (string= "" color)
    (setq color "green"))
  (unless (color-values color)
    (error "No such color: %S" color))
  (switch-to-buffer
   (generate-new-buffer (format "originally: %s" color)))
  (kill-all-local-variables)
  (setq major-mode 'colorcomp-mode
        mode-name "Color Components")
  (use-local-map colorcomp-mode-map)
  (erase-buffer)
  (buffer-disable-undo)
  (let ((data (apply 'vector (mapcar (lambda (n) (ash n -8))
                                     (color-values color))))
        (ewoc (ewoc-create 'colorcomp-pp
                           "\nColor Components\n\n"
                           (substitute-command-keys
                            "\n\\@{colorcomp-mode-map@}"))))
    (set (make-local-variable 'colorcomp-data) data)
    (set (make-local-variable 'colorcomp-ewoc) ewoc)
    (ewoc-enter-last ewoc 0)
    (ewoc-enter-last ewoc 1)
    (ewoc-enter-last ewoc 2)
    (ewoc-enter-last ewoc nil)))
@end example

@cindex controller part, model/view/controller
  This example can be extended to be a ``color selection widget'' (in other
words, the controller part of the ``model/view/controller'' design paradigm)
by defining commands to modify @code{colorcomp-data} and to ``finish'' the
selection process, and a keymap to tie it all together conveniently.

@smallexample
(defun colorcomp-mod (index limit delta)
  (let ((cur (aref colorcomp-data index)))
    (unless (= limit cur)
      (aset colorcomp-data index (+ cur delta)))
    (ewoc-invalidate
     colorcomp-ewoc
     (ewoc-nth colorcomp-ewoc index)
     (ewoc-nth colorcomp-ewoc -1))))

(defun colorcomp-R-more () (interactive) (colorcomp-mod 0 255 1))
(defun colorcomp-G-more () (interactive) (colorcomp-mod 1 255 1))
(defun colorcomp-B-more () (interactive) (colorcomp-mod 2 255 1))
(defun colorcomp-R-less () (interactive) (colorcomp-mod 0 0 -1))
(defun colorcomp-G-less () (interactive) (colorcomp-mod 1 0 -1))
(defun colorcomp-B-less () (interactive) (colorcomp-mod 2 0 -1))

(defun colorcomp-copy-as-kill-and-exit ()
  "Copy the color components into the kill ring and kill the buffer.
The string is formatted #RRGGBB (hash followed by six hex digits)."
  (interactive)
  (kill-new (format "#%02X%02X%02X"
                    (aref colorcomp-data 0)
                    (aref colorcomp-data 1)
                    (aref colorcomp-data 2)))
  (kill-buffer nil))

(setq colorcomp-mode-map
      (let ((m (make-sparse-keymap)))
        (suppress-keymap m)
        (define-key m "i" 'colorcomp-R-less)
        (define-key m "o" 'colorcomp-R-more)
        (define-key m "k" 'colorcomp-G-less)
        (define-key m "l" 'colorcomp-G-more)
        (define-key m "," 'colorcomp-B-less)
        (define-key m "." 'colorcomp-B-more)
        (define-key m " " 'colorcomp-copy-as-kill-and-exit)
        m))
@end smallexample

Note that we never modify the data in each node, which is fixed when the
ewoc is created to be either @code{nil} or an index into the vector
@code{colorcomp-data}, the actual color components.

@node Blinking
@section Blinking Parentheses
@cindex parenthesis matching
@cindex blinking parentheses
@cindex balancing parentheses

  This section describes the mechanism by which Emacs shows a matching open
parenthesis when the user inserts a close parenthesis.

@defvar blink-paren-function
The value of this variable should be a function (of no arguments) to be
called whenever a character with close parenthesis syntax is inserted.  The
value of @code{blink-paren-function} may be @code{nil}, in which case
nothing is done.
@end defvar

@defopt blink-matching-paren
If this variable is @code{nil}, then @code{blink-matching-open} does
nothing.
@end defopt

@defopt blink-matching-paren-distance
This variable specifies the maximum distance to scan for a matching
parenthesis before giving up.
@end defopt

@defopt blink-matching-delay
This variable specifies the number of seconds to keep indicating the
matching parenthesis.  A fraction of a second often gives good results, but
the default is 1, which works on all systems.
@end defopt

@deffn Command blink-matching-open
This function is the default value of @code{blink-paren-function}.  It
assumes that point follows a character with close parenthesis syntax and
applies the appropriate effect momentarily to the matching opening
character.  If that character is not already on the screen, it displays the
character's context in the echo area.  To avoid long delays, this function
does not search farther than @code{blink-matching-paren-distance}
characters.

Here is an example of calling this function explicitly.

@smallexample
@group
(defun interactive-blink-matching-open ()
  "Indicate momentarily the start of parenthesized sexp before point."
  (interactive)
@end group
@group
  (let ((blink-matching-paren-distance
         (buffer-size))
        (blink-matching-paren t))
    (blink-matching-open)))
@end group
@end smallexample
@end deffn

@node Character Display
@section Character Display

  This section describes how characters are actually displayed by Emacs.
Typically, a character is displayed as a @dfn{glyph} (a graphical symbol
which occupies one character position on the screen), whose appearance
corresponds to the character itself.  For example, the character @samp{a}
(character code 97) is displayed as @samp{a}.  Some characters, however, are
displayed specially.  For example, the formfeed character (character code
12) is usually displayed as a sequence of two glyphs, @samp{^L}, while the
newline character (character code 10) starts a new screen line.

  You can modify how each character is displayed by defining a @dfn{display
table}, which maps each character code into a sequence of glyphs.
@xref{Display Tables}.

@menu
* Usual Display::            The usual conventions for displaying 
                               characters.
* Display Tables::           What a display table consists of.
* Active Display Table::     How Emacs selects a display table to use.
* Glyphs::                   How to define a glyph, and what glyphs mean.
* Glyphless Chars::          How glyphless characters are drawn.
@end menu

@node Usual Display
@subsection Usual Display Conventions

  Here are the conventions for displaying each character code (in the absence
of a display table, which can override these
@iftex
conventions).
@end iftex
@ifnottex
conventions; @pxref{Display Tables}).
@end ifnottex

@cindex printable ASCII characters
@itemize @bullet
@item
The @dfn{printable @acronym{ASCII} characters}, character codes 32 through
126 (consisting of numerals, English letters, and symbols like @samp{#}) are
displayed literally.

@item
The tab character (character code 9) displays as whitespace stretching up to
the next tab stop column.  @xref{Text Display,,, emacs, The GNU Emacs
Manual}.  The variable @code{tab-width} controls the number of spaces per
tab stop (see below).

@item
The newline character (character code 10) has a special effect: it ends the
preceding line and starts a new line.

@cindex ASCII control characters
@item
The non-printable @dfn{@acronym{ASCII} control characters}---character codes
0 through 31, as well as the @key{DEL} character (character code
127)---display in one of two ways according to the variable
@code{ctl-arrow}.  If this variable is non-@code{nil} (the default), these
characters are displayed as sequences of two glyphs, where the first glyph
is @samp{^} (a display table can specify a glyph to use instead of
@samp{^}); e.g., the @key{DEL} character is displayed as @samp{^?}.

If @code{ctl-arrow} is @code{nil}, these characters are displayed as octal
escapes (see below).

This rule also applies to carriage return (character code 13), if that
character appears in the buffer.  But carriage returns usually do not appear
in buffer text; they are eliminated as part of end-of-line conversion
(@pxref{Coding System Basics}).

@cindex octal escapes
@item
@dfn{Raw bytes} are non-@acronym{ASCII} characters with codes 128 through
255 (@pxref{Text Representations}).  These characters display as @dfn{octal
escapes}: sequences of four glyphs, where the first glyph is the
@acronym{ASCII} code for @samp{\}, and the others are digit characters
representing the character code in octal.  (A display table can specify a
glyph to use instead of @samp{\}.)

@item
Each non-@acronym{ASCII} character with code above 255 is displayed
literally, if the terminal supports it.  If the terminal does not support
it, the character is said to be @dfn{glyphless}, and it is usually displayed
using a placeholder glyph.  For example, if a graphical terminal has no font
for a character, Emacs usually displays a box containing the character code
in hexadecimal.  @xref{Glyphless Chars}.
@end itemize

  The above display conventions apply even when there is a display table, for
any character whose entry in the active display table is @code{nil}.  Thus,
when you set up a display table, you need only specify the characters for
which you want special behavior.

  The following variables affect how certain characters are displayed on the
screen.  Since they change the number of columns the characters occupy, they
also affect the indentation functions.  They also affect how the mode line
is displayed; if you want to force redisplay of the mode line using the new
values, call the function @code{force-mode-line-update} (@pxref{Mode Line
Format}).

@defopt ctl-arrow
@cindex control characters in display
This buffer-local variable controls how control characters are displayed.
If it is non-@code{nil}, they are displayed as a caret followed by the
character: @samp{^A}.  If it is @code{nil}, they are displayed as octal
escapes: a backslash followed by three octal digits, as in @samp{\001}.
@end defopt

@defopt tab-width
The value of this buffer-local variable is the spacing between tab stops
used for displaying tab characters in Emacs buffers.  The value is in units
of columns, and the default is 8.  Note that this feature is completely
independent of the user-settable tab stops used by the command
@code{tab-to-tab-stop}.  @xref{Indent Tabs}.
@end defopt

@node Display Tables
@subsection Display Tables

@cindex display table
  A display table is a special-purpose char-table (@pxref{Char-Tables}), with
@code{display-table} as its subtype, which is used to override the usual
character display conventions.  This section describes how to make, inspect,
and assign elements to a display table object.

@defun make-display-table
This creates and returns a display table.  The table initially has
@code{nil} in all elements.
@end defun

  The ordinary elements of the display table are indexed by character codes;
the element at index @var{c} says how to display the character code
@var{c}.  The value should be @code{nil} (which means to display the
character @var{c} according to the usual display conventions; @pxref{Usual
Display}), or a vector of glyph codes (which means to display the character
@var{c} as those glyphs; @pxref{Glyphs}).

  @strong{Warning:} if you use the display table to change the display of
newline characters, the whole buffer will be displayed as one long ``line''.

  The display table also has six ``extra slots'' which serve special
purposes.  Here is a table of their meanings; @code{nil} in any slot means
to use the default for that slot, as stated below.

@table @asis
@item 0
The glyph for the end of a truncated screen line (the default for this is
@samp{$}).  @xref{Glyphs}.  On graphical terminals, Emacs uses arrows in the
fringes to indicate truncation, so the display table has no effect.

@item 1
The glyph for the end of a continued line (the default is @samp{\}).  On
graphical terminals, Emacs uses curved arrows in the fringes to indicate
continuation, so the display table has no effect.

@item 2
The glyph for indicating a character displayed as an octal character code
(the default is @samp{\}).

@item 3
The glyph for indicating a control character (the default is @samp{^}).

@item 4
A vector of glyphs for indicating the presence of invisible lines (the
default is @samp{...}).  @xref{Selective Display}.

@item 5
The glyph used to draw the border between side-by-side windows (the default
is @samp{|}).  @xref{Splitting Windows}.  This takes effect only when there
are no scroll bars; if scroll bars are supported and in use, a scroll bar
separates the two windows.
@end table

  For example, here is how to construct a display table that mimics the effect
of setting @code{ctl-arrow} to a non-@code{nil} value (@pxref{Glyphs}, for
the function @code{make-glyph-code}):

@example
(setq disptab (make-display-table))
(dotimes (i 32)
  (or (= i ?\t)
      (= i ?\n)
      (aset disptab i
            (vector (make-glyph-code ?^ 'escape-glyph)
                    (make-glyph-code (+ i 64) 'escape-glyph)))))
(aset disptab 127
      (vector (make-glyph-code ?^ 'escape-glyph)
              (make-glyph-code ?? 'escape-glyph)))))
@end example

@defun display-table-slot display-table slot
This function returns the value of the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to 5
inclusive, or a slot name (symbol).  Valid symbols are @code{truncation},
@code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and
@code{vertical-border}.
@end defun

@defun set-display-table-slot display-table slot value
This function stores @var{value} in the extra slot @var{slot} of
@var{display-table}.  The argument @var{slot} may be a number from 0 to 5
inclusive, or a slot name (symbol).  Valid symbols are @code{truncation},
@code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and
@code{vertical-border}.
@end defun

@defun describe-display-table display-table
This function displays a description of the display table
@var{display-table} in a help buffer.
@end defun

@deffn Command describe-current-display-table
This command displays a description of the current display table in a help
buffer.
@end deffn

@node Active Display Table
@subsection Active Display Table
@cindex active display table

  Each window can specify a display table, and so can each buffer.  The
window's display table, if there is one, takes precedence over the buffer's
display table.  If neither exists, Emacs tries to use the standard display
table; if that is @code{nil}, Emacs uses the usual character display
conventions (@pxref{Usual Display}).

  Note that display tables affect how the mode line is displayed, so if you
want to force redisplay of the mode line using a new display table, call
@code{force-mode-line-update} (@pxref{Mode Line Format}).

@defun window-display-table &optional window
This function returns @var{window}'s display table, or @code{nil} if there
is none.  The default for @var{window} is the selected window.
@end defun

@defun set-window-display-table window table
This function sets the display table of @var{window} to @var{table}.  The
argument @var{table} should be either a display table or @code{nil}.
@end defun

@defvar buffer-display-table
This variable is automatically buffer-local in all buffers; its value
specifies the buffer's display table.  If it is @code{nil}, there is no
buffer display table.
@end defvar

@defvar standard-display-table
The value of this variable is the standard display table, which is used when
Emacs is displaying a buffer in a window with neither a window display table
nor a buffer display table defined.  Its default is @code{nil}.
@end defvar

The @file{disp-table} library defines several functions for changing the
standard display table.

@node Glyphs
@subsection Glyphs
@cindex glyph

@cindex glyph code
  A @dfn{glyph} is a graphical symbol which occupies a single character
position on the screen.  Each glyph is represented in Lisp as a @dfn{glyph
code}, which specifies a character and optionally a face to display it in
(@pxref{Faces}).  The main use of glyph codes is as the entries of display
tables (@pxref{Display Tables}).  The following functions are used to
manipulate glyph codes:

@defun make-glyph-code char &optional face
This function returns a glyph code representing char @var{char} with face
@var{face}.  If @var{face} is omitted or @code{nil}, the glyph uses the
default face; in that case, the glyph code is an integer.  If @var{face} is
non-@code{nil}, the glyph code is not necessarily an integer object.
@end defun

@defun glyph-char glyph
This function returns the character of glyph code @var{glyph}.
@end defun

@defun glyph-face glyph
This function returns face of glyph code @var{glyph}, or @code{nil} if
@var{glyph} uses the default face.
@end defun

@ifnottex
  You can set up a @dfn{glyph table} to change how glyph codes are actually
displayed on text terminals.  This feature is semi-obsolete; use
@code{glyphless-char-display} instead (@pxref{Glyphless Chars}).

@defvar glyph-table
The value of this variable, if non-@code{nil}, is the current glyph table.
It takes effect only on character terminals; on graphical displays, all
glyphs are displayed literally.  The glyph table should be a vector whose
@var{g}th element specifies how to display glyph code @var{g}, where @var{g}
is the glyph code for a glyph whose face is unspecified.  Each element
should be one of the following:

@table @asis
@item @code{nil}
Display this glyph literally.

@item a string
Display this glyph by sending the specified string to the terminal.

@item a glyph code
Display the specified glyph code instead.
@end table

Any integer glyph code greater than or equal to the length of the glyph
table is displayed literally.
@end defvar
@end ifnottex

@node Glyphless Chars
@subsection Glyphless Character Display
@cindex glyphless characters

  @dfn{Glyphless characters} are characters which are displayed in a special
way, e.g., as a box containing a hexadecimal code, instead of being
displayed literally.  These include characters which are explicitly defined
to be glyphless, as well as characters for which there is no available font
(on a graphical display), and characters which cannot be encoded by the
terminal's coding system (on a text terminal).

@defvar glyphless-char-display
The value of this variable is a char-table which defines glyphless
characters and how they are displayed.  Each entry must be one of the
following display methods:

@table @asis
@item @code{nil}
Display the character in the usual way.

@item @code{zero-width}
Don't display the character.

@item @code{thin-space}
Display a thin space, 1-pixel wide on graphical displays, or 1-character
wide on text terminals.

@item @code{empty-box}
Display an empty box.

@item @code{hex-code}
Display a box containing the Unicode codepoint of the character, in
hexadecimal notation.

@item an @acronym{ASCII} string
Display a box containing that string.

@item a cons cell @code{(@var{graphical} . @var{text})}
Display with @var{graphical} on graphical displays, and with @var{text} on
text terminals.  Both @var{graphical} and @var{text} must be one of the
display methods described above.
@end table

@noindent
The @code{thin-space}, @code{empty-box}, @code{hex-code}, and
@acronym{ASCII} string display methods are drawn with the
@code{glyphless-char} face.

The char-table has one extra slot, which determines how to display any
character that cannot be displayed with any available font, or cannot be
encoded by the terminal's coding system.  Its value should be one of the
above display methods, except @code{zero-width} or a cons cell.

If a character has a non-@code{nil} entry in an active display table, the
display table takes effect; in this case, Emacs does not consult
@code{glyphless-char-display} at all.
@end defvar

@defopt glyphless-char-display-control
This user option provides a convenient way to set
@code{glyphless-char-display} for groups of similar characters.  Do not set
its value directly from Lisp code; the value takes effect only via a custom
@code{:set} function (@pxref{Variable Definitions}), which updates
@code{glyphless-char-display}.

Its value should be an alist of elements @code{(@var{group}
. @var{method})}, where @var{group} is a symbol specifying a group of
characters, and @var{method} is a symbol specifying how to display them.

@var{group} should be one of the following:

@table @code
@item c0-control
@acronym{ASCII} control characters @code{U+0000} to @code{U+001F}, excluding
the newline and tab characters (normally displayed as escape sequences like
@samp{^A}; @pxref{Text Display,, How Text Is Displayed, emacs, The GNU Emacs
Manual}).

@item c1-control
Non-@acronym{ASCII}, non-printing characters @code{U+0080} to @code{U+009F}
(normally displayed as octal escape sequences like @samp{\230}).

@item format-control
Characters of Unicode General Category `Cf', such as @samp{U+200E}
(Left-to-Right Mark), but excluding characters that have graphic images,
such as @samp{U+00AD} (Soft Hyphen).

@item no-font
Characters for there is no suitable font, or which cannot be encoded by the
terminal's coding system.
@end table

@c FIXME: this can also be `acronym', but that's not currently
@c completely implemented; it applies only to the format-control
@c group, and only works if the acronym is in `char-acronym-table'.
The @var{method} symbol should be one of @code{zero-width},
@code{thin-space}, @code{empty-box}, or @code{hex-code}.  These have the
same meanings as in @code{glyphless-char-display}, above.
@end defopt

@node Beeping
@section Beeping
@cindex bell

  This section describes how to make Emacs ring the bell (or blink the screen)
to attract the user's attention.  Be conservative about how often you do
this; frequent bells can become irritating.  Also be careful not to use just
beeping when signaling an error is more appropriate (@pxref{Errors}).

@defun ding &optional do-not-terminate
@cindex keyboard macro termination
This function beeps, or flashes the screen (see @code{visible-bell} below).
It also terminates any keyboard macro currently executing unless
@var{do-not-terminate} is non-@code{nil}.
@end defun

@defun beep &optional do-not-terminate
This is a synonym for @code{ding}.
@end defun

@defopt visible-bell
This variable determines whether Emacs should flash the screen to represent
a bell.  Non-@code{nil} means yes, @code{nil} means no.  This is effective
on graphical displays, and on text terminals provided the terminal's Termcap
entry defines the visible bell capability (@samp{vb}).
@end defopt

@defvar ring-bell-function
If this is non-@code{nil}, it specifies how Emacs should ``ring the bell''.
Its value should be a function of no arguments.  If this is non-@code{nil},
it takes precedence over the @code{visible-bell} variable.
@end defvar

@node Window Systems
@section Window Systems

  Emacs works with several window systems, most notably the X Window System.
Both Emacs and X use the term ``window'', but use it differently.  An Emacs
frame is a single window as far as X is concerned; the individual Emacs
windows are not known to X at all.

@defvar window-system
This terminal-local variable tells Lisp programs what window system Emacs is
using for displaying the frame.  The possible values are

@table @code
@item x
@cindex X Window System
Emacs is displaying the frame using X.
@item w32
Emacs is displaying the frame using native MS-Windows GUI.
@item ns
Emacs is displaying the frame using the Nextstep interface (used on GNUstep
and Mac OS X).
@item pc
Emacs is displaying the frame using MS-DOS direct screen writes.
@item nil
Emacs is displaying the frame on a character-based terminal.
@end table
@end defvar

@defvar initial-window-system
This variable holds the value of @code{window-system} used for the first
frame created by Emacs during startup.  (When Emacs is invoked with the
@option{--daemon} option, it does not create any initial frames, so
@code{initial-window-system} is @code{nil}.  @xref{Initial Options, daemon,,
emacs, The GNU Emacs Manual}.)
@end defvar

@defun window-system &optional frame
This function returns a symbol whose name tells what window system is used
for displaying @var{frame} (which defaults to the currently selected
frame).  The list of possible symbols it returns is the same one documented
for the variable @code{window-system} above.
@end defun

  Do @emph{not} use @code{window-system} and @code{initial-window-system} as
predicates or boolean flag variables, if you want to write code that works
differently on text terminals and graphic displays.  That is because
@code{window-system} is not a good indicator of Emacs capabilities on a
given display type.  Instead, use @code{display-graphic-p} or any of the
other @code{display-*-p} predicates described in @ref{Display Feature
Testing}.

@node Bidirectional Display
@section Bidirectional Display
@cindex bidirectional display
@cindex right-to-left text

  Emacs can display text written in scripts, such as Arabic, Farsi, and
Hebrew, whose natural ordering for horizontal text display runs from right
to left.  Furthermore, segments of Latin script and digits embedded in
right-to-left text are displayed left-to-right, while segments of
right-to-left script embedded in left-to-right text (e.g., Arabic or Hebrew
text in comments or strings in a program source file) are appropriately
displayed right-to-left.  We call such mixtures of left-to-right and
right-to-left text @dfn{bidirectional text}.  This section describes the
facilities and options for editing and displaying bidirectional text.

@cindex logical order
@cindex reading order
@cindex visual order
@cindex unicode bidirectional algorithm
@cindex UBA
@cindex bidirectional reordering
@cindex reordering, of bidirectional text
  Text is stored in Emacs buffers and strings in @dfn{logical} (or
@dfn{reading}) order, i.e., the order in which a human would read each
character.  In right-to-left and bidirectional text, the order in which
characters are displayed on the screen (called @dfn{visual order}) is not
the same as logical order; the characters' screen positions do not increase
monotonically with string or buffer position.  In performing this
@dfn{bidirectional reordering}, Emacs follows the Unicode Bidirectional
Algorithm (a.k.a.@: @acronym{UBA}), which is described in Annex #9 of the
Unicode standard (@url{http://www.unicode.org/reports/tr9/}).  Emacs
currently provides a ``Non-isolate Bidirectionality'' class implementation
of the @acronym{UBA}: it does not yet support the isolate directional
formatting characters introduced with Unicode Standard v6.3.0.

@defvar bidi-display-reordering
If the value of this buffer-local variable is non-@code{nil} (the default),
Emacs performs bidirectional reordering for display.  The reordering affects
buffer text, as well as display strings and overlay strings from text and
overlay properties in the buffer (@pxref{Overlay Properties}, and
@pxref{Display Property}).  If the value is @code{nil}, Emacs does not
perform bidirectional reordering in the buffer.

The default value of @code{bidi-display-reordering} controls the reordering
of strings which are not directly supplied by a buffer, including the text
displayed in mode lines (@pxref{Mode Line Format})  and header lines
(@pxref{Header Lines}).
@end defvar

@cindex unibyte buffers, and bidi reordering
  Emacs never reorders the text of a unibyte buffer, even if
@code{bidi-display-reordering} is non-@code{nil} in the buffer.  This is
because unibyte buffers contain raw bytes, not characters, and thus lack the
directionality properties required for reordering.  Therefore, to test
whether text in a buffer will be reordered for display, it is not enough to
test the value of @code{bidi-display-reordering} alone.  The correct test is
this:

@example
 (if (and enable-multibyte-characters
          bidi-display-reordering)
     ;; Buffer is being reordered for display
   )
@end example

  However, unibyte display and overlay strings @emph{are} reordered if their
parent buffer is reordered.  This is because plain-@sc{ascii} strings are
stored by Emacs as unibyte strings.  If a unibyte display or overlay string
includes non-@sc{ascii} characters, these characters are assumed to have
left-to-right direction.

@cindex display properties, and bidi reordering of text
  Text covered by @code{display} text properties, by overlays with
@code{display} properties whose value is a string, and by any other
properties that replace buffer text, is treated as a single unit when it is
reordered for display.  That is, the entire chunk of text covered by these
properties is reordered together.  Moreover, the bidirectional properties of
the characters in such a chunk of text are ignored, and Emacs reorders them
as if they were replaced with a single character @code{U+FFFC}, known as the
@dfn{Object Replacement Character}.  This means that placing a display
property over a portion of text may change the way that the surrounding text
is reordered for display.  To prevent this unexpected effect, always place
such properties on text whose directionality is identical with text that
surrounds it.

@cindex base direction of a paragraph
  Each paragraph of bidirectional text has a @dfn{base direction}, either
right-to-left or left-to-right.  Left-to-right paragraphs are displayed
beginning at the left margin of the window, and are truncated or continued
when the text reaches the right margin.  Right-to-left paragraphs are
displayed beginning at the right margin, and are continued or truncated at
the left margin.

  By default, Emacs determines the base direction of each paragraph by looking
at the text at its beginning.  The precise method of determining the base
direction is specified by the @acronym{UBA}; in a nutshell, the first
character in a paragraph that has an explicit directionality determines the
base direction of the paragraph.  However, sometimes a buffer may need to
force a certain base direction for its paragraphs.  For example, buffers
containing program source code should force all paragraphs to be displayed
left-to-right.  You can use following variable to do this:

@defvar bidi-paragraph-direction
If the value of this buffer-local variable is the symbol
@code{right-to-left} or @code{left-to-right}, all paragraphs in the buffer
are assumed to have that specified direction.  Any other value is equivalent
to @code{nil} (the default), which means to determine the base direction of
each paragraph from its contents.

@cindex @code{prog-mode}, and @code{bidi-paragraph-direction}
Modes for program source code should set this to @code{left-to-right}.  Prog
mode does this by default, so modes derived from Prog mode do not need to
set this explicitly (@pxref{Basic Major Modes}).
@end defvar

@defun current-bidi-paragraph-direction &optional buffer
This function returns the paragraph direction at point in the named
@var{buffer}.  The returned value is a symbol, either @code{left-to-right}
or @code{right-to-left}.  If @var{buffer} is omitted or @code{nil}, it
defaults to the current buffer.  If the buffer-local value of the variable
@code{bidi-paragraph-direction} is non-@code{nil}, the returned value will
be identical to that value; otherwise, the returned value reflects the
paragraph direction determined dynamically by Emacs.  For buffers whose
value of @code{bidi-display-reordering} is @code{nil} as well as unibyte
buffers, this function always returns @code{left-to-right}.
@end defun

@cindex visual-order cursor motion
  Sometimes there's a need to move point in strict visual order, either to the
left or to the right of its current screen position.  Emacs provides a
primitive to do that.

@defun move-point-visually direction
This function moves point of the currently selected window to the buffer
position that appears immediately to the right or to the left of point on
the screen.  If @var{direction} is positive, point will move one screen
position to the right, otherwise it will move one screen position to the
left.  Note that, depending on the surrounding bidirectional context, this
could potentially move point many buffer positions away.  If invoked at the
end of a screen line, the function moves point to the rightmost or leftmost
screen position of the next or previous screen line, as appropriate for the
value of @var{direction}.

The function returns the new buffer position as its value.
@end defun

@cindex layout on display, and bidirectional text
@cindex jumbled display of bidirectional text
@cindex concatenating bidirectional strings
  Bidirectional reordering can have surprising and unpleasant effects when two
strings with bidirectional content are juxtaposed in a buffer, or otherwise
programmatically concatenated into a string of text.  A typical problematic
case is when a buffer consists of sequences of text ``fields'' separated by
whitespace or punctuation characters, like Buffer Menu mode or Rmail Summary
Mode.  Because the punctuation characters used as separators have @dfn{weak
directionality}, they take on the directionality of surrounding text.  As
result, a numeric field that follows a field with bidirectional content can
be displayed @emph{to the left} of the preceding field, messing up the
expected layout.  There are several ways to avoid this problem:

@itemize @minus
@item
Append the special character @code{U+200E}, LEFT-TO-RIGHT MARK, or
@acronym{LRM}, to the end of each field that may have bidirectional content,
or prepend it to the beginning of the following field.  The function
@code{bidi-string-mark-left-to-right}, described below, comes in handy for
this purpose.  (In a right-to-left paragraph, use @code{U+200F},
RIGHT-TO-LEFT MARK, or @acronym{RLM}, instead.)  This is one of the
solutions recommended by the UBA.

@item
Include the tab character in the field separator.  The tab character plays
the role of @dfn{segment separator} in bidirectional reordering, causing the
text on either side to be reordered separately.

@cindex @code{space} display spec, and bidirectional text
@item
Separate fields with a @code{display} property or overlay with a property
value of the form @code{(space . PROPS)} (@pxref{Specified Space}).  Emacs
treats this display specification as a @dfn{paragraph separator}, and
reorders the text on either side separately.
@end itemize

@defun bidi-string-mark-left-to-right string
This function returns its argument @var{string}, possibly modified, such
that the result can be safely concatenated with another string, or
juxtaposed with another string in a buffer, without disrupting the relative
layout of this string and the next one on display.  If the string returned
by this function is displayed as part of a left-to-right paragraph, it will
always appear on display to the left of the text that follows it.  The
function works by examining the characters of its argument, and if any of
those characters could cause reordering on display, the function appends the
@acronym{LRM} character to the string.  The appended @acronym{LRM} character
is made invisible by giving it an @code{invisible} text property of @code{t}
(@pxref{Invisible Text}).
@end defun

  The reordering algorithm uses the bidirectional properties of the characters
stored as their @code{bidi-class} property (@pxref{Character Properties}).
Lisp programs can change these properties by calling the
@code{put-char-code-property} function.  However, doing this requires a
thorough understanding of the @acronym{UBA}, and is therefore not
recommended.  Any changes to the bidirectional properties of a character
have global effect: they affect all Emacs frames and windows.

  Similarly, the @code{mirroring} property is used to display the appropriate
mirrored character in the reordered text.  Lisp programs can affect the
mirrored display by changing this property.  Again, any such changes affect
all of Emacs display.
