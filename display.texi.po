# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-03-07 14:36+0900\n"
"PO-Revision-Date: 2019-03-12 17:36+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: display.texi.orig:5
#, no-wrap
msgid "Display"
msgstr "Display"

#. type: chapter
#: display.texi.orig:6
#, no-wrap
msgid "Emacs Display"
msgstr "Emacs Display"

#. type: Plain text
#: display.texi.orig:10
msgid "This chapter describes a number of features related to the display that Emacs presents to the user."
msgstr "このチャプターでは、Emacsによるユーザーへのプレゼンテーションである、表示に関連する機能のいくつかを説明します。"

#. type: node
#: display.texi.orig:38 display.texi.orig:40
#, no-wrap
msgid "Refresh Screen"
msgstr "Refresh Screen"

#. type: menuentry
#: display.texi.orig:38
msgid "Clearing the screen and redrawing everything on it."
msgstr "スクリーン上にあるすべてのもののクリアーと再描画。"

#. type: section
#: display.texi.orig:38 display.texi.orig:78 display.texi.orig:79
#, no-wrap
msgid "Forcing Redisplay"
msgstr "Forcing Redisplay"

#. type: menuentry
#: display.texi.orig:38
msgid "Forcing redisplay."
msgstr "再描画の強制。"

#. type: section
#: display.texi.orig:38 display.texi.orig:120 display.texi.orig:121
#, no-wrap
msgid "Truncation"
msgstr "Truncation"

#. type: menuentry
#: display.texi.orig:38
msgid "Folding or wrapping long text lines."
msgstr "長いテキストの折り畳みと折り返し。"

#. type: section
#: display.texi.orig:38 display.texi.orig:216 display.texi.orig:217
#, no-wrap
msgid "The Echo Area"
msgstr "The Echo Area"

#. type: menuentry
#: display.texi.orig:38
msgid "Displaying messages at the bottom of the screen."
msgstr "スクリーン最下部へのメッセージ表示。"

#. type: node
#: display.texi.orig:38 display.texi.orig:557
#, no-wrap
msgid "Warnings"
msgstr "Warnings"

#. type: menuentry
#: display.texi.orig:38
msgid "Displaying warning messages for the user."
msgstr "ユーザーへの警告メッセージの表示。"

#. type: section
#: display.texi.orig:38 display.texi.orig:800 display.texi.orig:801
#, no-wrap
msgid "Invisible Text"
msgstr "Invisible Text"

#. type: menuentry
#: display.texi.orig:38
msgid "Hiding part of the buffer text."
msgstr "バッファーのテキストの一部を隠す。"

#. type: section
#: display.texi.orig:38 display.texi.orig:958 display.texi.orig:959
#, no-wrap
msgid "Selective Display"
msgstr "Selective Display"

#. type: menuentry
#: display.texi.orig:38
msgid "Hiding part of the buffer text (the old way)."
msgstr "バッファーのテキストの一部を隠す(旧来の方式)。"

#. type: section
#: display.texi.orig:38 display.texi.orig:1076 display.texi.orig:1077
#, no-wrap
msgid "Temporary Displays"
msgstr "Temporary Displays"

#. type: menuentry
#: display.texi.orig:38
msgid "Displays that go away automatically."
msgstr "自動的に消える表示。"

#. type: section
#: display.texi.orig:38 display.texi.orig:1257 display.texi.orig:1258
#, no-wrap
msgid "Overlays"
msgstr "Overlays"

#. type: menuentry
#: display.texi.orig:38
msgid "Use overlays to highlight parts of the buffer."
msgstr "オーバーレイを使用したバッファーの一部のハイライト。"

#. type: section
#: display.texi.orig:38 display.texi.orig:1773 display.texi.orig:1774
#, no-wrap
msgid "Size of Displayed Text"
msgstr "Size of Displayed Text"

#. type: menuentry
#: display.texi.orig:38
msgid "How large displayed text is."
msgstr "表示されたテキストの大きさ。"

#. type: section
#: display.texi.orig:38 display.texi.orig:1881 display.texi.orig:1882
#, no-wrap
msgid "Line Height"
msgstr "Line Height"

#. type: menuentry
#: display.texi.orig:38
msgid "Controlling the height of lines."
msgstr "行の高さの制御。"

#. type: section
#: display.texi.orig:38 display.texi.orig:1979 display.texi.orig:1980
#, no-wrap
msgid "Faces"
msgstr "Faces"

#. type: menuentry
#: display.texi.orig:38
msgid "A face defines a graphics style for text characters: font, colors, etc."
msgstr "テキスト文字のグラフィカルスタイル(フォント、カラー等)を定義するフェイス。"

#. type: section
#: display.texi.orig:38 display.texi.orig:3452 display.texi.orig:3453
#, no-wrap
msgid "Fringes"
msgstr "Fringes"

#. type: menuentry
#: display.texi.orig:38
msgid "Controlling window fringes."
msgstr "ウィンドウフリンジの制御。"

#. type: section
#: display.texi.orig:38 display.texi.orig:3868 display.texi.orig:3869
#, no-wrap
msgid "Scroll Bars"
msgstr "Scroll Bars"

#. type: menuentry
#: display.texi.orig:38
msgid "Controlling vertical scroll bars."
msgstr "垂直スクロールバーの制御。"

#. type: section
#: display.texi.orig:38 display.texi.orig:3964 display.texi.orig:3965
#, no-wrap
msgid "Window Dividers"
msgstr "Window Dividers"

#. type: menuentry
#: display.texi.orig:38
msgid "Separating windows visually."
msgstr "ウィンドウを視覚的に区別する。"

#. type: node
#: display.texi.orig:38 display.texi.orig:4028
#, no-wrap
msgid "Display Property"
msgstr "Display Property"

#. type: menuentry
#: display.texi.orig:38
msgid "Enabling special display features."
msgstr "特別な表示機能の有効化。"

#. type: section
#: display.texi.orig:38 display.texi.orig:4417 display.texi.orig:4418
#, no-wrap
msgid "Images"
msgstr "Images"

#. type: menuentry
#: display.texi.orig:38
msgid "Displaying images in Emacs buffers."
msgstr "Emacsバッファー内でのイメージ表示。"

#. type: section
#: display.texi.orig:38 display.texi.orig:5299 display.texi.orig:5300
#, no-wrap
msgid "Buttons"
msgstr "Buttons"

#. type: menuentry
#: display.texi.orig:38
msgid "Adding clickable buttons to Emacs buffers."
msgstr "Emacsバッファー内へのイメージ表示クリック可能ボタン追加。"

#. type: section
#: display.texi.orig:38 display.texi.orig:5615 display.texi.orig:5616
#, no-wrap
msgid "Abstract Display"
msgstr "Abstract Display"

#. type: menuentry
#: display.texi.orig:38
msgid "Emacs's Widget for Object Collections."
msgstr "オブジェクトコレクション用のEmacsウィジェット。"

#. type: node
#: display.texi.orig:38 display.texi.orig:5955
#, no-wrap
msgid "Blinking"
msgstr "Blinking"

#. type: menuentry
#: display.texi.orig:38
msgid "How Emacs shows the matching open parenthesis."
msgstr "Emacsがマッチする開カッコを表示する方法。"

#. type: section
#: display.texi.orig:38 display.texi.orig:6013 display.texi.orig:6014
#, no-wrap
msgid "Character Display"
msgstr "Character Display"

#. type: menuentry
#: display.texi.orig:38
msgid "How Emacs displays individual characters."
msgstr "Emacsがマッチする個々の文字を表示する方法。"

#. type: section
#: display.texi.orig:38 display.texi.orig:6439 display.texi.orig:6440
#, no-wrap
msgid "Beeping"
msgstr "Beeping"

#. type: menuentry
#: display.texi.orig:38
msgid "Audible signal to the user."
msgstr "ユーザーへの可聴シグナル。"

#. type: section
#: display.texi.orig:38 display.texi.orig:6475 display.texi.orig:6476
#, no-wrap
msgid "Window Systems"
msgstr "Window Systems"

#. type: menuentry
#: display.texi.orig:38
msgid "Which window system is being used."
msgstr "どのウィンドウシステムが使用されているか。"

#. type: section
#: display.texi.orig:38 display.texi.orig:6526 display.texi.orig:6527
#, no-wrap
msgid "Bidirectional Display"
msgstr "Bidirectional Display"

#. type: menuentry
#: display.texi.orig:38
msgid "Display of bidirectional scripts, such as Arabic and Farsi."
msgstr "アラビア語やペルシア語のような、双方向スクリプトの表示。"

#. type: section
#: display.texi.orig:41
#, no-wrap
msgid "Refreshing the Screen"
msgstr "Refreshing the Screen"

#. type: cindex
#: display.texi.orig:42
#, no-wrap
msgid "refresh the screen"
msgstr "refresh the screen"

#. type: cindex
#: display.texi.orig:43
#, no-wrap
msgid "screen refresh"
msgstr "screen refresh"

#. type: Plain text
#: display.texi.orig:48
msgid "The function @code{redraw-frame} clears and redisplays the entire contents of a given frame (@pxref{Frames}).  This is useful if the screen is corrupted."
msgstr "関数@code{redraw-frame}は、与えられたフレーム(@ref{Frames}を参照)のコンテンツ全体にたいして、クリアーおよび再描画を行います。これはスクリーンが壊れている(corrupted)場合に有用です。"

#. type: defun
#: display.texi.orig:49
#, no-wrap
msgid "redraw-frame frame"
msgstr "redraw-frame frame"

#. type: defun
#: display.texi.orig:51
msgid "This function clears and redisplays frame @var{frame}."
msgstr "この関数は、フレーム@var{frame}のクリアーと再描画を行う。"

#. type: Plain text
#: display.texi.orig:54
msgid "Even more powerful is @code{redraw-display}:"
msgstr "更に強力なのが@code{redraw-display}です:"

#. type: deffn
#: display.texi.orig:55
#, no-wrap
msgid "Command redraw-display"
msgstr "Command redraw-display"

#. type: deffn
#: display.texi.orig:57
msgid "This function clears and redisplays all visible frames."
msgstr "この関数は、すべての可視なフレームのクリアーと再描画を行う。"

#. type: Plain text
#: display.texi.orig:63
msgid "In Emacs, processing user input takes priority over redisplay.  If you call these functions when input is available, they don't redisplay immediately, but the requested redisplay does happen eventually---after all the input has been processed."
msgstr "Emacsでは、ユーザー入力は再描画より優先されます。入力が可能なときにこれらの関数を呼び出すと、これらはすぐに再描画はしませんが、要求された再描画はやがて、すべての入力処理後に行われます。"

#. type: Plain text
#: display.texi.orig:69
msgid "On text terminals, suspending and resuming Emacs normally also refreshes the screen.  Some terminal emulators record separate contents for display-oriented programs such as Emacs and for ordinary sequential display.  If you are using such a terminal, you might want to inhibit the redisplay on resumption."
msgstr "テキスト端末では、Emacsのサスペントと再開により、通常はスクリーンのリフレッシュも行われます。Emacsのようなディスプレイ指向のプログラムと、通常のシーケンシャル表示のプログラムで、コンテンツを区別して記録する端末エミュレーターがいくつかあります。そのような端末を使用する場合は、おそらく再開時の再表示を抑制したいでしょう。"

#. type: defopt
#: display.texi.orig:70
#, no-wrap
msgid "no-redraw-on-reenter"
msgstr "no-redraw-on-reenter"

#. type: cindex
#: display.texi.orig:71
#, no-wrap
msgid "suspend (cf. @code{no-redraw-on-reenter})"
msgstr "suspend (cf. @code{no-redraw-on-reenter})"

#. type: cindex
#: display.texi.orig:72
#, no-wrap
msgid "resume (cf. @code{no-redraw-on-reenter})"
msgstr "resume (cf. @code{no-redraw-on-reenter})"

#. type: defopt
#: display.texi.orig:76
msgid "This variable controls whether Emacs redraws the entire screen after it has been suspended and resumed.  Non-@code{nil} means there is no need to redraw, @code{nil} means redrawing is needed.  The default is @code{nil}."
msgstr "この変数は、Emacsがサスペンドおよび再開された後に、スクリーン全体を再描画するかどうかを制御する。非@code{nil}なら再描画は不要、@code{nil}なら再描画が必要であることを意味する。デフォルトは@code{nil}。"

#. type: cindex
#: display.texi.orig:80
#, no-wrap
msgid "forcing redisplay"
msgstr "forcing redisplay"

#. type: Plain text
#: display.texi.orig:86
msgid "Emacs normally tries to redisplay the screen whenever it waits for input.  With the following function, you can request an immediate attempt to redisplay, in the middle of Lisp code, without actually waiting for input."
msgstr "Emacsは入力の待機時は常に、再表示を試みます。以下の関数により、実際に入力を待機することなく、Lispコードの中から、即座に再表示を試みることを要求できます。"

#. type: defun
#: display.texi.orig:87
#, no-wrap
msgid "redisplay &optional force"
msgstr "redisplay &optional force"

#. type: defun
#: display.texi.orig:91
msgid "This function tries immediately to redisplay.  The optional argument @var{force}, if non-@code{nil}, forces the redisplay to be performed, instead of being preempted if input is pending."
msgstr "この関数は、即座に再表示を試みる。オプション引数@var{force}が非@code{nil}なら、入力が保留中に横取りされるかわりに、強制的に再表示が行われる。"

#. type: defun
#: display.texi.orig:96
msgid "The function returns @code{t} if it actually tried to redisplay, and @code{nil} otherwise.  A value of @code{t} does not mean that redisplay proceeded to completion; it could have been preempted by newly arriving input."
msgstr "この関数は実際に再表示が試行されたなら@code{t}、それ以外は@code{nil}をリターンする。@code{t}という値は、再表示の試行が完了したことを意味しない。新たに到着した入力に横取りされた可能性がある。"

#. type: defvar
#: display.texi.orig:98
#, no-wrap
msgid "pre-redisplay-function"
msgstr "pre-redisplay-function"

#. type: defvar
#: display.texi.orig:101
msgid "A function run just before redisplay.  It is called with one argument, the set of windows to redisplay."
msgstr "再表示の直前に実行される関数。これは、再表示されるウィンドウセットを単一の引数として呼び出される。"

#. type: Plain text
#: display.texi.orig:108
msgid "Although @code{redisplay} tries immediately to redisplay, it does not change how Emacs decides which parts of its frame(s) to redisplay.  By contrast, the following function adds certain windows to the pending redisplay work (as if their contents had completely changed), but does not immediately try to perform redisplay."
msgstr "@code{redisplay}が即座に再表示を試みたとしても、Emacsがフレーム(複数可)のどの部分を再表示するか決定する方法を変更するわけではありません。それとは対照的に、以下の関数は特定のウィンドウを(あたかもコンテンツが完全に変更されたかのように)、保留中の再表示処理に追加します。しかし再描画を即座には試みません。"

#. type: defun
#: display.texi.orig:109
#, no-wrap
msgid "force-window-update &optional object"
msgstr "force-window-update &optional object"

#. type: defun
#: display.texi.orig:115
msgid "This function forces some or all windows to be updated the next time Emacs does a redisplay.  If @var{object} is a window, that window is to be updated.  If @var{object} is a buffer or buffer name, all windows displaying that buffer are to be updated.  If @var{object} is @code{nil} (or omitted), all windows are to be updated."
msgstr "この関数は、Emacsが次に再表示を行う際にいくつか、あるいはすべてのウィンドウが更新されるよう強制する。@var{object}がウィンドウならそのウィンドウ、バッファーまたはバッファー名ならそのバッファーを表示するすべてのウィンドウ、@code{nil}(または省略)の場合はすべてのウィンドウが更新される。"

#. type: defun
#: display.texi.orig:118
msgid "This function does not do a redisplay immediately; Emacs does that as it waits for input, or when the function @code{redisplay} is called."
msgstr "この関数は、即座に再表示を行わない。再表示はEmacsが入力を待機時、または関数@code{redisplay}呼び出し時に行われる。"

#. type: cindex
#: display.texi.orig:122
#, no-wrap
msgid "line wrapping"
msgstr "line wrapping"

#. type: cindex
#: display.texi.orig:123
#, no-wrap
msgid "line truncation"
msgstr "line truncation"

#. type: cindex
#: display.texi.orig:124
#, no-wrap
msgid "continuation lines"
msgstr "continuation lines"

#. type: cindex
#: display.texi.orig:125
#, no-wrap
msgid "@samp{$} in display"
msgstr "@samp{$} in display"

#. type: cindex
#: display.texi.orig:126
#, no-wrap
msgid "@samp{\\} in display"
msgstr "@samp{\\} in display"

#. type: Plain text
#: display.texi.orig:136
msgid "When a line of text extends beyond the right edge of a window, Emacs can @dfn{continue} the line (make it ``wrap'' to the next screen line), or @dfn{truncate} the line (limit it to one screen line).  The additional screen lines used to display a long text line are called @dfn{continuation} lines.  Continuation is not the same as filling; continuation happens on the screen only, not in the buffer contents, and it breaks a line precisely at the right margin, not at a word boundary.  @xref{Filling}."
msgstr "テキスト行がウィンドウ右端を超過する際、Emacsはその行を@dfn{継続(continue)}させる(次のスクリーン行へ``wrap''、すなわち折り返す)か、あるいはその行を@dfn{切り詰める(truncate)}て表示(その行をスクリーン行の1行に制限)することができます。長いテキスト行を表示するために使用される追加のスクリーン行は、@dfn{継続(continuation)}行と呼ばれます。継続はフィルとは異なります。継続はバッファーのコンテンツ内ではなくスクリーン上でのみ発生し、単語境界ではなく正確に右マージンで行をブレークします。@ref{Filling}を参照してください。"

#. type: Plain text
#: display.texi.orig:143
msgid "On a graphical display, tiny arrow images in the window fringes indicate truncated and continued lines (@pxref{Fringes}).  On a text terminal, a @samp{$} in the rightmost column of the window indicates truncation; a @samp{\\} on the rightmost column indicates a line that ``wraps''.  (The display table can specify alternate characters to use for this; @pxref{Display Tables})."
msgstr "グラフィカルなディスプレイでは、切り詰めと継続はウィンドウフリンジ内の小さな矢印イメージで示されます(@ref{Fringes}を参照)。テキスト端末では、切り詰めはそのウィンドウの最右列の@samp{$}、``折り返し''は最右列の@samp{\\}で示されます(ディスプレイテーブルにより、これを行うための代替え文字を指定できる。@ref{Display Tables}を参照されたい)。"

#. type: defopt
#: display.texi.orig:144
#, no-wrap
msgid "truncate-lines"
msgstr "truncate-lines"

#. type: defopt
#: display.texi.orig:151
msgid "If this buffer-local variable is non-@code{nil}, lines that extend beyond the right edge of the window are truncated; otherwise, they are continued.  As a special exception, the variable @code{truncate-partial-width-windows} takes precedence in @dfn{partial-width} windows (i.e., windows that do not occupy the entire frame width)."
msgstr "このバッファーローカル変数が非@code{nil}なら、ウィンドウ右端を超過する行は切り詰められ、それ以外なら継続される。特別な例外として、@dfn{部分幅(partial-width)}ウィンドウ(フレーム全体の幅を占有しないウィンドウ)では、変数@code{truncate-partial-width-windows}が優先される。"

#. type: defopt
#: display.texi.orig:153
#, no-wrap
msgid "truncate-partial-width-windows"
msgstr "truncate-partial-width-windows"

#. type: cindex
#: display.texi.orig:154
#, no-wrap
msgid "partial-width windows"
msgstr "partial-width windows"

#. type: defopt
#: display.texi.orig:166
msgid "This variable controls line truncation in @dfn{partial-width} windows.  A partial-width window is one that does not occupy the entire frame width (@pxref{Splitting Windows}).  If the value is @code{nil}, line truncation is determined by the variable @code{truncate-lines} (see above).  If the value is an integer @var{n}, lines are truncated if the partial-width window has fewer than @var{n} columns, regardless of the value of @code{truncate-lines}; if the partial-width window has @var{n} or more columns, line truncation is determined by @code{truncate-lines}.  For any other non-@code{nil} value, lines are truncated in every partial-width window, regardless of the value of @code{truncate-lines}."
msgstr "この変数は、@dfn{部分幅(partial-width)}ウィンドウ内の、行の切り詰めを制御する。部分幅ウィンドウとは、フレーム全体の幅を占有しないウィンドウである(@ref{Splitting Windows}を参照)。値が@code{nil}なら、行の切り詰めは変数@code{truncate-lines}(上記参照)により決定される。値が整数@var{n}の場合は、部分幅ウィンドウの列数が@var{n}より小さければ、@code{truncate-lines}の値とは無関係に行は切り詰められ、部分幅ウィンドウの列数が@var{n}以上なら、行の切り詰めは@code{truncate-lines}により決定される。それ以外の非@code{nil}値では、@code{truncate-lines}の値とは無関係にすべての部分幅ウィンドウで行は切り詰められる。"

#. type: Plain text
#: display.texi.orig:170
msgid "When horizontal scrolling (@pxref{Horizontal Scrolling}) is in use in a window, that forces truncation."
msgstr "ウィンドウ内で水平スクロール(@ref{Horizontal Scrolling}を参照)を使用中は、切り詰めが強制されます。"

#. type: item
#: display.texi.orig:171 display.texi.orig:1671
#, no-wrap
msgid "wrap-prefix"
msgstr "wrap-prefix"

#. type: defvar
#: display.texi.orig:180
msgid "If this buffer-local variable is non-@code{nil}, it defines a @dfn{wrap prefix} which Emacs displays at the start of every continuation line.  (If lines are truncated, @code{wrap-prefix} is never used.)  Its value may be a string or an image (@pxref{Other Display Specs}), or a stretch of whitespace such as specified by the @code{:width} or @code{:align-to} display properties (@pxref{Specified Space}).  The value is interpreted in the same way as a @code{display} text property.  @xref{Display Property}."
msgstr "このバッファーローカル変数が非@code{nil}なら、それはEmacsが各継続行の先頭に表示する、@dfn{折り返しプレフィックス(wrap prefix)}を定義する(行を切り詰めている場合、@code{wrap-prefix}は使用されない)。この値は文字列、イメージ(@ref{Other Display Specs}を参照)、またはディスプレイプロパティ@code{:width}や@code{:align-to}で指定されるような、伸長された空白文字を指定できる(@ref{Specified Space}を参照)。値はテキストプロパティ@code{display}と同じ方法で解釈される。@ref{Display Property}を参照のこと。"

#. type: defvar
#: display.texi.orig:184
msgid "A wrap prefix may also be specified for regions of text, using the @code{wrap-prefix} text or overlay property.  This takes precedence over the @code{wrap-prefix} variable.  @xref{Special Properties}."
msgstr "折り返しプレフィックスは、テキストプロパティまたはオーバーレイプロパティ@code{wrap-prefix}を使用することにより、テキストのリージョンにたいして指定することもできる。これは@code{wrap-prefix}変数より優先される。@ref{Special Properties}を参照のこと。"

#. type: item
#: display.texi.orig:186 display.texi.orig:1667
#, no-wrap
msgid "line-prefix"
msgstr "line-prefix"

#. type: defvar
#: display.texi.orig:194
msgid "If this buffer-local variable is non-@code{nil}, it defines a @dfn{line prefix} which Emacs displays at the start of every non-continuation line.  Its value may be a string or an image (@pxref{Other Display Specs}), or a stretch of whitespace such as specified by the @code{:width} or @code{:align-to} display properties (@pxref{Specified Space}).  The value is interpreted in the same way as a @code{display} text property.  @xref{Display Property}."
msgstr "このバッファーローカル変数が非@code{nil}なら、それはEmacsがすべての非継続行の先頭に表示する、@dfn{行プレフィックス(line prefix)}を定義する。この値は文字列、イメージ(@ref{Other Display Specs}を参照)、またはディスプレイプロパティ@code{:width}や@code{:align-to}で指定されるような、伸長された空白文字を指定できる(@ref{Specified Space}を参照)。値はテキストプロパティ@code{display}と同じ方法で解釈される。@ref{Display Property}を参照のこと。"

#. type: defvar
#: display.texi.orig:198
msgid "A line prefix may also be specified for regions of text using the @code{line-prefix} text or overlay property.  This takes precedence over the @code{line-prefix} variable.  @xref{Special Properties}."
msgstr "行プレフィックスは、テキストプロパティまたはオーバーレイプロパティ@code{line-prefix}を使用することにより、テキストのリージョンにたいして指定することもできる。これは@code{line-prefix}変数より優先される。@ref{Special Properties}を参照のこと。"

#. type: defvar
#: display.texi.orig:204
#, no-wrap
msgid "cache-long-scans"
msgstr "cache-long-scans"

#. type: defvar
#: display.texi.orig:209
#, no-wrap
msgid ""
"If this variable is non-@code{nil} (the default), various indentation\n"
"and motion functions, and Emacs redisplay, cache the results of\n"
"scanning the buffer, and consult the cache to avoid rescanning regions\n"
"of the buffer unless they are modified.\n"
"\n"
msgstr ""
"If this variable is non-@code{nil} (the default), various indentation\n"
"and motion functions, and Emacs redisplay, cache the results of\n"
"scanning the buffer, and consult the cache to avoid rescanning regions\n"
"of the buffer unless they are modified.\n"
"\n"

#. type: defvar
#: display.texi.orig:211
#, no-wrap
msgid ""
"Turning off the cache speeds up processing of short lines somewhat.\n"
"\n"
msgstr "Turning off the cache speeds up processing of short lines somewhat.\n\n"

#. type: defvar
#: display.texi.orig:213
#, no-wrap
msgid "This variable is automatically buffer-local in every buffer.\n"
msgstr "This variable is automatically buffer-local in every buffer.\n"

#. type: cindex
#: display.texi.orig:218
#, no-wrap
msgid "error display"
msgstr "error display"

#. type: cindex
#: display.texi.orig:219
#, no-wrap
msgid "echo area"
msgstr "echo area"

#. type: Plain text
#: display.texi.orig:228
msgid "The @dfn{echo area} is used for displaying error messages (@pxref{Errors}), for messages made with the @code{message} primitive, and for echoing keystrokes.  It is not the same as the minibuffer, despite the fact that the minibuffer appears (when active) in the same place on the screen as the echo area.  @xref{Minibuffer,, The Minibuffer, emacs, The GNU Emacs Manual}."
msgstr "@dfn{エコーエリア(echo area)}はエラーメッセージ(@ref{Errors})や、@code{message}プリミティブで作成されたメッセージの表示、およびキーストロークをエコーするために使用されます。(アクティブ時には)ミニバッファーがスクリーン上のエコーエリアと同じ場所に表示されるという事実にも関わらず、エコーエリアはミニバッファーと同じではありません。@ref{Minibuffer,, The Minibuffer, emacs, The GNU Emacs Manual}を参照してください。"

#. type: Plain text
#: display.texi.orig:232
msgid "Apart from the functions documented in this section, you can print Lisp objects to the echo area by specifying @code{t} as the output stream.  @xref{Output Streams}."
msgstr "このセクションに記述された関数とは別に、出力ストリームとして@code{t}を指定することにより、エコーエリアにLispオブジェクトをプリントできます。@ref{Output Streams}を参照してください。"

#. type: node
#: display.texi.orig:238 display.texi.orig:240
#, no-wrap
msgid "Displaying Messages"
msgstr "Displaying Messages"

#. type: menuentry
#: display.texi.orig:238
msgid "Explicitly displaying text in the echo area."
msgstr "エコーエリア内に明示的にテキストを表示する。"

#. type: node
#: display.texi.orig:238 display.texi.orig:340
#, no-wrap
msgid "Progress"
msgstr "Progress"

#. type: menuentry
#: display.texi.orig:238
msgid "Informing user about progress of a long operation."
msgstr "長時間の処理の進行状況をユーザーに知らせる。"

#. type: node
#: display.texi.orig:238 display.texi.orig:459
#, no-wrap
msgid "Logging Messages"
msgstr "Logging Messages"

#. type: menuentry
#: display.texi.orig:238
msgid "Echo area messages are logged for the user."
msgstr "ユーザー用にログされるエコーエリアメッセージ。"

#. type: subsection
#: display.texi.orig:238 display.texi.orig:512 display.texi.orig:513
#, no-wrap
msgid "Echo Area Customization"
msgstr "Echo Area Customization"

#. type: menuentry
#: display.texi.orig:238
msgid "Controlling the echo area."
msgstr "エコーエリアの制御。"

#. type: subsection
#: display.texi.orig:241
#, no-wrap
msgid "Displaying Messages in the Echo Area"
msgstr "Displaying Messages in the Echo Area"

#. type: cindex
#: display.texi.orig:242
#, no-wrap
msgid "display message in echo area"
msgstr "display message in echo area"

#. type: Plain text
#: display.texi.orig:246
msgid "This section describes the standard functions for displaying messages in the echo area."
msgstr "このセクションでは、エコーエリア内にメッセージを表示する、標準的な関数を説明します。"

#. type: defun
#: display.texi.orig:247
#, no-wrap
msgid "message format-string &rest arguments"
msgstr "message format-string &rest arguments"

#. type: defun
#: display.texi.orig:256
msgid "This function displays a message in the echo area.  @var{format-string} is a format string, and @var{arguments} are the objects for its format specifications, like in the @code{format} function (@pxref{Formatting Strings}).  The resulting formatted string is displayed in the echo area; if it contains @code{face} text properties, it is displayed with the specified faces (@pxref{Faces}).  The string is also added to the @file{*Messages*} buffer, but without text properties (@pxref{Logging Messages})."
msgstr "この関数は、エコーエリア内にメッセージを表示する。@code{format}関数(@ref{Formatting Strings}を参照)の場合と同様、@var{format-string}はフォーマット文字列、@var{arguments}はそのフォーマット仕様にたいするオブジェクトである。フォーマットされた結果文字列は、エコーエリア内に表示される。それに@code{face}テキストプロパティが含まれる場合、指定されたフェイスにより表示される(@ref{Faces}を参照)。この文字列は@file{*Messages*}バッファーにも追加されるが、テキストプロパティは含まれない(@ref{Logging Messages}を参照)。"

#. type: defun
#: display.texi.orig:259
msgid "In batch mode, the message is printed to the standard error stream, followed by a newline."
msgstr "バッチモードでは、後に改行が付加されたメッセージが、標準エラーストリームにプリントされる。"

#. type: defun
#: display.texi.orig:265
msgid "If @var{format-string} is @code{nil} or the empty string, @code{message} clears the echo area; if the echo area has been expanded automatically, this brings it back to its normal size.  If the minibuffer is active, this brings the minibuffer contents back onto the screen immediately."
msgstr "@var{format-string}が@code{nil}か空文字列なら、@code{message}はエコーエリアをクリアーする。エコーエリアが自動的に拡張されていたら、これにより通常のサイズに復元される。ミニバッファーがアクティブなら、これによりスクリーン上に即座にミニバッファーのコンテンツが復元される。"

#. type: group
#: display.texi.orig:272
#, no-wrap
msgid ""
"(message \"Minibuffer depth is %d.\"\n"
"         (minibuffer-depth))\n"
" @print{} Minibuffer depth is 0.\n"
"@result{} \"Minibuffer depth is 0.\"\n"
msgstr ""
"(message \"Minibuffer depth is %d.\"\n"
"         (minibuffer-depth))\n"
" @print{} Minibuffer depth is 0.\n"
"@result{} \"Minibuffer depth is 0.\"\n"

#. type: group
#: display.texi.orig:278
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Minibuffer depth is 0.\n"
"---------- Echo Area ----------\n"
msgstr ""
"---------- Echo Area ----------\n"
"Minibuffer depth is 0.\n"
"---------- Echo Area ----------\n"

#. type: defun
#: display.texi.orig:283
msgid "To automatically display a message in the echo area or in a pop-buffer, depending on its size, use @code{display-message-or-buffer} (see below)."
msgstr "エコーエリアやポップバッファー内に、自動的にメッセージを表示するには、そのサイズに応じて@code{display-message-or-buffer}(以下参照)を使用する。"

#. type: defmac
#: display.texi.orig:285
#, no-wrap
msgid "with-temp-message message &rest body"
msgstr "with-temp-message message &rest body"

#. type: defmac
#: display.texi.orig:290
msgid "This construct displays a message in the echo area temporarily, during the execution of @var{body}.  It displays @var{message}, executes @var{body}, then returns the value of the last body form while restoring the previous echo area contents."
msgstr "この構成は@var{body}実行の間、エコーエリア内にメッセージを一時的に表示する。これは@var{message}を表示して@var{body}を実行し、それからエコーエリアの前のコンテンツをリストアするとともに、bodyの最後のフォームの値をリターンする。"

#. type: defun
#: display.texi.orig:292
#, no-wrap
msgid "message-or-box format-string &rest arguments"
msgstr "message-or-box format-string &rest arguments"

#. type: defun
#: display.texi.orig:301
msgid "This function displays a message like @code{message}, but may display it in a dialog box instead of the echo area.  If this function is called in a command that was invoked using the mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command Loop Info}) is either @code{nil} or a list---then it uses a dialog box or pop-up menu to display the message.  Otherwise, it uses the echo area.  (This is the same criterion that @code{y-or-n-p} uses to make a similar decision; see @ref{Yes-or-No Queries}.)"
msgstr "この関数は@code{message}と同様にメッセージを表示するが、エコーエリアではなくダイアログボックスにメッセージを表示するかもしれない。この関数があるコマンド内からマウスを使用して呼び出された場合 --- より正確には@code{last-nonmenu-event}(@ref{Command Loop Info}を参照)が@code{nil}かリストなら、そのメッセージの表示にダイアログボックスまたはポップアップメニューを使用する。それ以外の場合は、エコーエリアを使用する(これは@code{y-or-n-p}が同様の決定を行う際に使用する条件と同じである。@ref{Yes-or-No Queries}を参照されたい)。"

#. type: defun
#: display.texi.orig:304
msgid "You can force use of the mouse or of the echo area by binding @code{last-nonmenu-event} to a suitable value around the call."
msgstr "呼び出しの前後で@code{last-nonmenu-event}を適切な値にバインドすることにより、エコーエリアでのマウスの使用を強制できる。"

#. type: defun
#: display.texi.orig:306
#, no-wrap
msgid "message-box format-string &rest arguments"
msgstr "message-box format-string &rest arguments"

#. type: anchor{#1}
#: display.texi.orig:313
msgid "message-box"
msgstr "message-box"

#. type: defun
#: display.texi.orig:313
msgid "This function displays a message like @code{message}, but uses a dialog box (or a pop-up menu) whenever that is possible.  If it is impossible to use a dialog box or pop-up menu, because the terminal does not support them, then @code{message-box} uses the echo area, like @code{message}."
msgstr "この関数は@code{message}と同様にメッセージを表示するが、利用可能なら常にダイアログボックス(かポップアップメニュー)を使用する。端末がサポートしないために、ダイアログボックスまたはポップアップメニューが使用できなければ、@code{message-box}は@code{message}と同様にエコーエリアを使用する。"

#. type: defun
#: display.texi.orig:315
#, no-wrap
msgid "display-message-or-buffer message &optional buffer-name not-this-window frame"
msgstr "display-message-or-buffer message &optional buffer-name not-this-window frame"

#. type: defun
#: display.texi.orig:321
msgid "This function displays the message @var{message}, which may be either a string or a buffer.  If it is shorter than the maximum height of the echo area, as defined by @code{max-mini-window-height}, it is displayed in the echo area, using @code{message}.  Otherwise, @code{display-buffer} is used to show it in a pop-up buffer."
msgstr "この関数はメッセージ@var{message}を表示する。@var{message}は文字列かバッファーを指定できる。これが@code{max-mini-window-height}で定義されるエコーエリアの最大高さより小さければ、@code{message}を使用してエコーエリアに表示される。それ以外なら、メッセージを表示するために@code{display-buffer}はポップアップバッファーを使用する。"

#. type: defun
#: display.texi.orig:324
msgid "Returns either the string shown in the echo area, or when a pop-up buffer is used, the window used to display it."
msgstr "エコーエリアに表示したメッセージ、またはポップアップバッファー使用時はその表示に使用したウィンドウをリターンする。"

#. type: defun
#: display.texi.orig:330
msgid "If @var{message} is a string, then the optional argument @var{buffer-name} is the name of the buffer used to display it when a pop-up buffer is used, defaulting to @file{*Message*}.  In the case where @var{message} is a string and displayed in the echo area, it is not specified whether the contents are inserted into the buffer anyway."
msgstr "@var{message}が文字列なら、オプション引数@var{buffer-name}はポップアップバッファー使用時にメッセージ表示に使用するバッファー名(デフォルトは@file{*Message*})である。@var{message}が文字列でエコーエリアに表示されてる場合は、いずれにせよコンテンツをバッファーに挿入するかどうかは指定されない。"

#. type: defun
#: display.texi.orig:333
msgid "The optional arguments @var{not-this-window} and @var{frame} are as for @code{display-buffer}, and only used if a buffer is displayed."
msgstr "オプション引数@var{not-this-window}と@var{frame}は、@code{display-buffer}の場合と同様に、バッファーが表示されている場合のみ使用される。"

#. type: defun
#: display.texi.orig:335
#, no-wrap
msgid "current-message"
msgstr "current-message"

#. type: defun
#: display.texi.orig:338
msgid "This function returns the message currently being displayed in the echo area, or @code{nil} if there is none."
msgstr "この関数は、エコーエリア内にカレントで表示されているメッセージ、またはそれが存在しなければ@code{nil}をリターンする。"

#. type: subsection
#: display.texi.orig:341
#, no-wrap
msgid "Reporting Operation Progress"
msgstr "Reporting Operation Progress"

#. type: cindex
#: display.texi.orig:342
#, no-wrap
msgid "progress reporting"
msgstr "progress reporting"

#. type: Plain text
#: display.texi.orig:348
msgid "When an operation can take a while to finish, you should inform the user about the progress it makes.  This way the user can estimate remaining time and clearly see that Emacs is busy working, not hung.  A convenient way to do this is to use a @dfn{progress reporter}."
msgstr "処理の完了まで暫く時間を要するかもしれない際は、その進行状況についてユーザーに通知するべきです。これによりユーザーが残り時間を予測するとともに、Emacsがhungしているのではなく、処理中であえうことが明確に確認できます。@dfn{プログレスリポーター(progress reporter: 進行状況リポーター)}を使用するのが、これを行う便利な方法です。"

#. type: Plain text
#: display.texi.orig:350
msgid "Here is a working example that does nothing useful:"
msgstr "以下は、何も有用なことを行わない、実行可能な例です:"

#. type: smallexample
#: display.texi.orig:359
#, no-wrap
msgid ""
"(let ((progress-reporter\n"
"       (make-progress-reporter \"Collecting mana for Emacs...\"\n"
"                               0  500)))\n"
"  (dotimes (k 500)\n"
"    (sit-for 0.01)\n"
"    (progress-reporter-update progress-reporter k))\n"
"  (progress-reporter-done progress-reporter))\n"
msgstr ""
"(let ((progress-reporter\n"
"       (make-progress-reporter \"Collecting mana for Emacs...\"\n"
"                               0  500)))\n"
"  (dotimes (k 500)\n"
"    (sit-for 0.01)\n"
"    (progress-reporter-update progress-reporter k))\n"
"  (progress-reporter-done progress-reporter))\n"

#. type: defun
#: display.texi.orig:361
#, no-wrap
msgid "make-progress-reporter message &optional min-value max-value current-value min-change min-time"
msgstr "make-progress-reporter message &optional min-value max-value current-value min-change min-time"

#. type: defun
#: display.texi.orig:366
msgid "This function creates and returns a progress reporter object, which you will use as an argument for the other functions listed below.  The idea is to precompute as much data as possible to make progress reporting very fast."
msgstr "この関数は、以下に挙げる他の関数として使用されるであろう、プログレスリポーターオブジェクトを作成して、リターンする。これはプログレスリポーターを高速にするように、可能なかぎり多くのデータを事前に計算するというアイデアが元である。"

#. type: defun
#: display.texi.orig:372
msgid "When this progress reporter is subsequently used, it will display @var{message} in the echo area, followed by progress percentage.  @var{message} is treated as a simple string.  If you need it to depend on a filename, for instance, use @code{format} before calling this function."
msgstr "この後にこのプログレスリポーターを使用する際は、進行状況のパーセンテージを後に付加して@var{message}が表示されるだろう。@var{message}は、単なる文字列として扱われる。たとえばファイル名に依存させる必要があるなら、この関数の呼び出し前に、@code{format}を使えばよい。"

#. type: defun
#: display.texi.orig:378
msgid "The arguments @var{min-value} and @var{max-value} should be numbers standing for the starting and final states of the operation.  For instance, an operation that ``scans'' a buffer should set these to the results of @code{point-min} and @code{point-max} correspondingly.  @var{max-value} should be greater than @var{min-value}."
msgstr "引数@var{min-value}と@var{max-value}は、その処理の開始と終了を意味する数値であること。たとえばバッファーを``スキャン''する処理なら、これらをそれぞれ@code{point-min}と@code{point-max}にセットするべきだろう。@var{max-value}は@var{min-value}より大であること。"

#. type: defun
#: display.texi.orig:383
msgid "Alternatively, you can set @var{min-value} and @var{max-value} to @code{nil}.  In that case, the progress reporter does not report process percentages; it instead displays a ``spinner'' that rotates a notch each time you update the progress reporter."
msgstr "かわりに、@var{min-value}と@var{max-value}を@code{nil}にセットすることができる。この場合、プログレスリポーターは進行状況のパーセンテージを報告しない。かわりにプログレスリポーターを更新するたびに刻み(notch)を回転する``スピナー(spinner)''を表示する。"

#. type: defun
#: display.texi.orig:387
msgid "If @var{min-value} and @var{max-value} are numbers, you can give the argument @var{current-value} a numerical value specifying the initial progress; if omitted, this defaults to @var{min-value}."
msgstr "@var{min-value}と@var{max-value}が数値なら、進行状況の初期の数値を与える引数@var{current-value}を与えることができる。省略時のデフォルトは@var{min-value}。"

#. type: defun
#: display.texi.orig:395
msgid "The remaining arguments control the rate of echo area updates.  The progress reporter will wait for at least @var{min-change} more percents of the operation to be completed before printing next message; the default is one percent.  @var{min-time} specifies the minimum time in seconds to pass between successive prints; the default is 0.2 seconds.  (On some operating systems, the progress reporter may handle fractions of seconds with varying precision)."
msgstr "残りの引数は、エコーエリアの更新レートを制御する。プログレスリポーターは次のメッセージを表示する前に、その処理が少なくとも@var{min-change}パーセントより多く完了するまで待機する。デフォルトは1パーセント。@var{min-time}は連続するプリントの間に空ける最小時間をミリ秒単位で指定する(いくつかのオペレーティングシステムでは、プログレスリポーターは秒の少数部をさまざまな制度で処理するかもしれない)。"

#. type: defun
#: display.texi.orig:398
msgid "This function calls @code{progress-reporter-update}, so the first message is printed immediately."
msgstr "この関数は@code{progress-reporter-update}を呼び出すた、最初のメッセージは即座にプリントされる。"

#. type: defun
#: display.texi.orig:400
#, no-wrap
msgid "progress-reporter-update reporter &optional value"
msgstr "progress-reporter-update reporter &optional value"

#. type: defun
#: display.texi.orig:406
msgid "This function does the main work of reporting progress of your operation.  It displays the message of @var{reporter}, followed by progress percentage determined by @var{value}.  If percentage is zero, or close enough according to the @var{min-change} and @var{min-time} arguments, then it is omitted from the output."
msgstr "この関数は、操作の進行状況報告に関する、主要な機能を担う。これは@var{reporter}のメッセージと、その後に@var{value}により決定された進行状況のパーセンテージを表示する。パーセンテージが0、または引数@var{min-change}と@var{min-time}に比べて十分0に近ければ、出力は省略される。"

#. type: defun
#: display.texi.orig:413
msgid "@var{reporter} must be the result of a call to @code{make-progress-reporter}.  @var{value} specifies the current state of your operation and must be between @var{min-value} and @var{max-value} (inclusive) as passed to @code{make-progress-reporter}.  For instance, if you scan a buffer, then @var{value} should be the result of a call to @code{point}."
msgstr "@var{reporter}は、@code{make-progress-reporter}呼び出しがリターンした結果でなければならない。@var{value}は処理のカレント状況を指定し、@code{make-progress-reporter}に渡された@var{min-value}と@var{max-value}の間(両端を含む)でなければならない。たとえばバッファーのスキャンにおいては、@var{value}は@code{point}び呼び出し結果であるべきだろう。"

#. type: defun
#: display.texi.orig:419
msgid "This function respects @var{min-change} and @var{min-time} as passed to @code{make-progress-reporter} and so does not output new messages on every invocation.  It is thus very fast and normally you should not try to reduce the number of calls to it: resulting overhead will most likely negate your effort."
msgstr "この関数は@code{make-progress-reporter}に渡された@var{min-change}と@var{min-time}にしたがい、毎回の呼び出しで新たなメッセージを出力しない。したがってこれは非常に高速であり、通常はこれを呼び出す回数を減らすことを試みるべきではない。結果として生じるオーバーヘッドは、あなたの努力をほぼ否定するだろう。"

#. type: defun
#: display.texi.orig:421
#, no-wrap
msgid "progress-reporter-force-update reporter &optional value new-message"
msgstr "progress-reporter-force-update reporter &optional value new-message"

#. type: defun
#: display.texi.orig:424
msgid "This function is similar to @code{progress-reporter-update} except that it prints a message in the echo area unconditionally."
msgstr "この関数は@code{progress-reporter-update}と同様だが、これは無条件にメッセージをエコーエリアにプリントする点が異なる。"

#. type: defun
#: display.texi.orig:430
msgid "The first two arguments have the same meaning as for @code{progress-reporter-update}.  Optional @var{new-message} allows you to change the message of the @var{reporter}.  Since this function always updates the echo area, such a change will be immediately presented to the user."
msgstr "最初の2つの引数は、@code{progress-reporter-update}の場合と同じ意味をもつ。オプションの@var{new-message}で、@var{reporter}のメッセージを変更できる。この関数は常にエコーエリアを更新するので、そのような変更は即座にユーザーに示されるだろう。"

#. type: defun
#: display.texi.orig:432
#, no-wrap
msgid "progress-reporter-done reporter"
msgstr "progress-reporter-done reporter"

#. type: defun
#: display.texi.orig:436
msgid "This function should be called when the operation is finished.  It prints the message of @var{reporter} followed by word ``done'' in the echo area."
msgstr "この関数は、処理の完了時に呼び出されるべきである。これはエコーエリア内に、単語``done''が付加された@var{reporter}のメッセージを表示する。"

#. type: defun
#: display.texi.orig:441
msgid "You should always call this function and not hope for @code{progress-reporter-update} to print ``100%''.  Firstly, it may never print it, there are many good reasons for this not to happen.  Secondly, ``done'' is more explicit."
msgstr "あなたは@code{progress-reporter-update}に``100%''とプリントさせようとせず、常にこの関数を呼び出すべきである。まず、この関数は決してそれをプリントしないだろうし、これが発生しないために多くの正当な理由がある。次に``done''はより自明である。"

#. type: defmac
#: display.texi.orig:443
#, no-wrap
msgid "dotimes-with-progress-reporter (var count [result]) message body@dots{}"
msgstr "dotimes-with-progress-reporter (var count [result]) message body@dots{}"

#. type: defmac
#: display.texi.orig:447
msgid "This is a convenience macro that works the same way as @code{dotimes} does, but also reports loop progress using the functions described above.  It allows you to save some typing."
msgstr "これは@code{dotimes}と同じ方法で機能するが、上述の関数を使用してループ進行状況(loop progress)の報告も行う、便利なマクロである。これにより、タイプ量を幾分節約できる。"

#. type: defmac
#: display.texi.orig:450
msgid "You can rewrite the example in the beginning of this node using this macro this way:"
msgstr "以下の方法でこのマクロを使用することにより、このセクション冒頭の例を書き換えることができる:"

#. type: example
#: display.texi.orig:456
#, no-wrap
msgid ""
"(dotimes-with-progress-reporter\n"
"    (k 500)\n"
"    \"Collecting some mana for Emacs...\"\n"
"  (sit-for 0.01))\n"
msgstr ""
"(dotimes-with-progress-reporter\n"
"    (k 500)\n"
"    \"Collecting some mana for Emacs...\"\n"
"  (sit-for 0.01))\n"

#. type: subsection
#: display.texi.orig:460
#, no-wrap
msgid "Logging Messages in @file{*Messages*}"
msgstr "Logging Messages in @file{*Messages*}"

#. type: cindex
#: display.texi.orig:461
#, no-wrap
msgid "logging echo-area messages"
msgstr "logging echo-area messages"

#. type: Plain text
#: display.texi.orig:472
msgid "Almost all the messages displayed in the echo area are also recorded in the @file{*Messages*} buffer so that the user can refer back to them.  This includes all the messages that are output with @code{message}.  By default, this buffer is read-only and uses the major mode @code{messages-buffer-mode}.  Nothing prevents the user from killing the @file{*Messages*} buffer, but the next display of a message recreates it.  Any Lisp code that needs to access the @file{*Messages*} buffer directly and wants to ensure that it exists should use the function @code{messages-buffer}."
msgstr "エコーエリア内に表示されるほとんどすべてのメッセージは、ユーザーが後で参照できるように、@file{*Messages*}バッファー内にも記録されます。これには@code{message}により出力されたメッセージも含まれます。デフォルトではこのバッファーは読み取り専用で、メジャーモード@code{messages-buffer-mode}を使用します。ユーザーによる@file{*Messages*}バッファーのkillを妨げるものは何もありませんが、次回のメッセージ表示でバッファーは再作成されます。@file{*Messages*}バッファーに直接アクセスする必要があり、それが確実に存在するようにしたいLispコードはすべて、関数@code{messages-buffer}を使用するべきです。"

#. type: defun
#: display.texi.orig:473
#, no-wrap
msgid "messages-buffer"
msgstr "messages-buffer"

#. type: defun
#: display.texi.orig:476
msgid "This function returns the @file{*Messages*} buffer.  If it does not exist, it creates it, and switches it to @code{messages-buffer-mode}."
msgstr "この関数は、@file{*Messages*}バッファーをリターンする。バッファーが存在しなければ作成して、そのバッファーを@code{messages-buffer-mode}に切り替える。"

#. type: defopt
#: display.texi.orig:478
#, no-wrap
msgid "message-log-max"
msgstr "message-log-max"

#. type: defopt
#: display.texi.orig:483
msgid "This variable specifies how many lines to keep in the @file{*Messages*} buffer.  The value @code{t} means there is no limit on how many lines to keep.  The value @code{nil} disables message logging entirely.  Here's how to display a message and prevent it from being logged:"
msgstr "この変数は、@file{*Messages*}バッファー内に保持するべき行数を指定する。値@code{t}は保持すべき行数に制限がないことを意味し、値@code{nil}はメッセージのロギングを完全に無効にする。以下は、メッセージを表示して、それがロギングされることを防ぐ例である:"

#. type: example
#: display.texi.orig:487
#, no-wrap
msgid ""
"(let (message-log-max)\n"
"  (message @dots{}))\n"
msgstr ""
"(let (message-log-max)\n"
"  (message @dots{}))\n"

#. type: Plain text
#: display.texi.orig:494
msgid "To make @file{*Messages*} more convenient for the user, the logging facility combines successive identical messages.  It also combines successive related messages for the sake of two cases: question followed by answer, and a series of progress messages."
msgstr "@file{*Messages*}にたいするユーザーの利便性を向上させるために、ロギング機能は連続する同じメッセージを結合します。さらに、2つのケースのために連続する関連メッセージの結合も行います。2つのケースとは、応答を後にともなう質問(question followed by answer)と、一連のプログレスメッセージ(series of progress messages)です。"

#. type: Plain text
#: display.texi.orig:500
msgid "A ``question followed by an answer'' means two messages like the ones produced by @code{y-or-n-p}: the first is @samp{@var{question}}, and the second is @samp{@var{question}...@var{answer}}.  The first message conveys no additional information beyond what's in the second, so logging the second message discards the first from the log."
msgstr "``応答を後にともなう質問(question followed by an answer)''とは、@code{y-or-n-p}により生成されるような、これは1つ目が@samp{@var{question}}、2つ目が@samp{@var{question}...@var{answer}}のような、2つのメッセージです。1つ目のメッセージには、2つ目のメッセージ以上の追加の情報は伝えないので、2つ目のメッセージをロギングして、1つ目のメッセージは破棄します。"

#. type: Plain text
#: display.texi.orig:506
msgid "A ``series of progress messages'' means successive messages like those produced by @code{make-progress-reporter}.  They have the form @samp{@var{base}...@var{how-far}}, where @var{base} is the same each time, while @var{how-far} varies.  Logging each message in the series discards the previous one, provided they are consecutive."
msgstr "``一連のプログレスメッセージ(series of progress messages)''とは、@code{make-progress-reporter}が生成するような、連続するメッセージを意味します。これらは@samp{@var{base}...@var{how-far}}のような形式をもち、@var{how-far}は毎回異なりますが、@var{base}は常に同じです。このシリーズ内の各メッセージのロギングでは、そのメッセージが前のメッセージと連続していれば、前のメッセージを破棄します。"

#. type: Plain text
#: display.texi.orig:511
msgid "The functions @code{make-progress-reporter} and @code{y-or-n-p} don't have to do anything special to activate the message log combination feature.  It operates whenever two consecutive messages are logged that share a common prefix ending in @samp{...}."
msgstr "関数@code{make-progress-reporter}および@code{y-or-n-p}は、メッセージログ結合機能をアクティブにするために、何ら特別なことを行う必要はありません。これは@samp{...}で終わる共通のプレフィックスを共有する、連続する2つのメッセージをログする際は、常にこの処理を行います。"

#. type: cindex
#: display.texi.orig:514
#, no-wrap
msgid "echo area customization"
msgstr "echo area customization"

#. type: Plain text
#: display.texi.orig:517
msgid "These variables control details of how the echo area works."
msgstr "以下の変数は、エコーエリアが機能する方法の詳細を制御します。"

#. type: defvar
#: display.texi.orig:518
#, no-wrap
msgid "cursor-in-echo-area"
msgstr "cursor-in-echo-area"

#. type: defvar
#: display.texi.orig:523
msgid "This variable controls where the cursor appears when a message is displayed in the echo area.  If it is non-@code{nil}, then the cursor appears at the end of the message.  Otherwise, the cursor appears at point---not in the echo area at all."
msgstr "この変数は、エコーエリア内にメッセージ表示時に、カーソルを表示する場所を制御する。これが非@code{nil}なら、カーソルはメッセージの終端に表示される。それ以外なら、カーソルはエコーエリア内ではなく、ポイント位置に表示される。"

#. type: defvar
#: display.texi.orig:526
msgid "The value is normally @code{nil}; Lisp programs bind it to @code{t} for brief periods of time."
msgstr "この値は、通常は@code{nil}である。Lispプログラムは短時間の間、これを@code{t}にバインドする。"

#. type: defvar
#: display.texi.orig:528
#, no-wrap
msgid "echo-area-clear-hook"
msgstr "echo-area-clear-hook"

#. type: defvar
#: display.texi.orig:531
msgid "This normal hook is run whenever the echo area is cleared---either by @code{(message nil)} or for any other reason."
msgstr "このノーマルフックは@code{(message nil)}、または別の何らかの理由によりエコーエリアが作成されると、常に実行される。"

#. type: defopt
#: display.texi.orig:533
#, no-wrap
msgid "echo-keystrokes"
msgstr "echo-keystrokes"

#. type: defopt
#: display.texi.orig:541
msgid "This variable determines how much time should elapse before command characters echo.  Its value must be a number, and specifies the number of seconds to wait before echoing.  If the user types a prefix key (such as @kbd{C-x}) and then delays this many seconds before continuing, the prefix key is echoed in the echo area.  (Once echoing begins in a key sequence, all subsequent characters in the same key sequence are echoed immediately.)"
msgstr "この変数は、コマンド文字をエコーする前に、どれだけの時間を待機するかを決定する。この値は数字でなければならず、エコー前に待機する秒数を指定する。ユーザーが(@kbd{C-x}のような)プレフィックスキーをタイプしてから、継続してタイプを継続するのをこの秒数遅延した場合、エコーエリア内にそのプレフィックスキーがエコーされる(あるキーシーケンスで一度エコーが開始されると、同一のキーシーケンス内の後続するすべての文字は、即座にエコーされる)。"

#. type: defopt
#: display.texi.orig:543
msgid "If the value is zero, then command input is not echoed."
msgstr "値が0なら、コマンド入力はエコーされない。"

#. type: defvar
#: display.texi.orig:545
#, no-wrap
msgid "message-truncate-lines"
msgstr "message-truncate-lines"

#. type: defvar
#: display.texi.orig:550
msgid "Normally, displaying a long message resizes the echo area to display the entire message.  But if the variable @code{message-truncate-lines} is non-@code{nil}, the echo area does not resize, and the message is truncated to fit it."
msgstr "通常、長いメッセージの表示により、そのメッセージ全体を表示するために、エコーエリアはリサイズされる。しかし変数@code{message-truncate-lines}が非@code{nil}なら、エコーエリアをリサイズせず、エコーエリアに収まるようメッセージは切り詰められる。"

#. type: Plain text
#: display.texi.orig:556
msgid "The variable @code{max-mini-window-height}, which specifies the maximum height for resizing minibuffer windows, also applies to the echo area (which is really a special use of the minibuffer window; @pxref{Minibuffer Misc})."
msgstr "ミニバッファーウィンドウのリサイズの最大高さを指定する変数@code{max-mini-window-height}は、エコーエリアにも適用される(エコーエリアは真にミニバッファーウィンドウの特殊な使い方である。@ref{Minibuffer Misc}を参照されたい)。"

#. type: section
#: display.texi.orig:558
#, no-wrap
msgid "Reporting Warnings"
msgstr "Reporting Warnings"

#. type: cindex
#: display.texi.orig:559
#, no-wrap
msgid "warnings"
msgstr "warnings"

#. type: Plain text
#: display.texi.orig:563
msgid "@dfn{Warnings} are a facility for a program to inform the user of a possible problem, but continue running."
msgstr "@dfn{警告(warnings)}とは、プログラムがユーザーにたいして問題の可能性を知らせるが、実行は継続するための機能です。"

#. type: subsection
#: display.texi.orig:569 display.texi.orig:571 display.texi.orig:572
#, no-wrap
msgid "Warning Basics"
msgstr "Warning Basics"

#. type: menuentry
#: display.texi.orig:569
msgid "Warnings concepts and functions to report them."
msgstr "警告の概念と、それらを報告するための関数。"

#. type: subsection
#: display.texi.orig:569 display.texi.orig:640 display.texi.orig:641
#, no-wrap
msgid "Warning Variables"
msgstr "Warning Variables"

#. type: menuentry
#: display.texi.orig:569
msgid "Variables programs bind to customize their warnings."
msgstr "プログラムが警告をカスタマイズするためにバインドする変数。"

#. type: subsection
#: display.texi.orig:569 display.texi.orig:718 display.texi.orig:719
#, no-wrap
msgid "Warning Options"
msgstr "Warning Options"

#. type: menuentry
#: display.texi.orig:569
msgid "Variables users set to control display of warnings."
msgstr "ユーザーが警告の表示を制御するためにセットする変数。"

#. type: subsection
#: display.texi.orig:569 display.texi.orig:752 display.texi.orig:753
#, no-wrap
msgid "Delayed Warnings"
msgstr "Delayed Warnings"

#. type: menuentry
#: display.texi.orig:569
msgid "Deferring a warning until the end of a command."
msgstr "コマンド終了まで警告を延期する。"

#. type: cindex
#: display.texi.orig:573
#, no-wrap
msgid "severity level"
msgstr "severity level"

#. type: Plain text
#: display.texi.orig:579
msgid "Every warning has a textual message, which explains the problem for the user, and a @dfn{severity level} which is a symbol.  Here are the possible severity levels, in order of decreasing severity, and their meanings:"
msgstr "すべての警告は、ユーザーに問題を説明するためのテキストのメッセージと、@dfn{重大レベル(severity level)}をもっています。重大レベルはシンボルです。以下は可能性のある重大レベルとその意味を、重大度の降順でリストしたものです:"

#. type: item
#: display.texi.orig:581
#, no-wrap
msgid ":emergency"
msgstr ":emergency"

#. type: table
#: display.texi.orig:584
msgid "A problem that will seriously impair Emacs operation soon if you do not attend to it promptly."
msgstr "直ちに対処しなければ、Emacs処理が間もなく深刻に害される問題。"

#. type: item
#: display.texi.orig:584
#, no-wrap
msgid ":error"
msgstr ":error"

#. type: table
#: display.texi.orig:586
msgid "A report of data or circumstances that are inherently wrong."
msgstr "本質的に悪いデータまたは状況のリポート。"

#. type: item
#: display.texi.orig:586
#, no-wrap
msgid ":warning"
msgstr ":warning"

#. type: table
#: display.texi.orig:589
msgid "A report of data or circumstances that are not inherently wrong, but raise suspicion of a possible problem."
msgstr "本質的に悪くはないが、可能性のある問題を励起する恐れのあるデータまたは状況のリポート。"

#. type: item
#: display.texi.orig:589
#, no-wrap
msgid ":debug"
msgstr ":debug"

#. type: table
#: display.texi.orig:591
msgid "A report of information that may be useful if you are debugging."
msgstr "デバッグ中なら有用かもしれない情報のリポート。"

#. type: Plain text
#: display.texi.orig:605
msgid "When your program encounters invalid input data, it can either signal a Lisp error by calling @code{error} or @code{signal} or report a warning with severity @code{:error}.  Signaling a Lisp error is the easiest thing to do, but it means the program cannot continue processing.  If you want to take the trouble to implement a way to continue processing despite the bad data, then reporting a warning of severity @code{:error} is the right way to inform the user of the problem.  For instance, the Emacs Lisp byte compiler can report an error that way and continue compiling other functions.  (If the program signals a Lisp error and then handles it with @code{condition-case}, the user won't see the error message; it could show the message to the user by reporting it as a warning.)"
msgstr "あなたのプログラムが無効な入力データに遭遇した際には、@code{error}呼び出しによるLispエラーのシグナルするか、または重大度@code{:error}の警告をリポートすることができます。Lispエラーのシグナルはもっとも簡単に行えることですが、それはプログラムが処理を継続できないことを意味します。間違ったデータでも処理を継続するための方法を実装するために、そのトラブルを受け取めたい場合には、その問題をユーザーに知らせるために、重大度@code{:error}の警告をリポートするのが正しい方法です。たとえばEmacs Lispバイトコンパイラーはこの方法によりエラーを報告して、他の関数のコンパイルを継続できます(プログラムがLispエラーをシグナルして、それを@code{condition-case}でhandleしたなら、ユーザーがそのエラーを確認することはないだろう。これは警告としてリポートすることにより、ユーザーにメッセージを示すことができる)。"

#. type: cindex
#: display.texi.orig:609
#, no-wrap
msgid "warning type"
msgstr "warning type"

#. type: Plain text
#: display.texi.orig:616
msgid "Each warning has a @dfn{warning type} to classify it.  The type is a list of symbols.  The first symbol should be the custom group that you use for the program's user options.  For example, byte compiler warnings use the warning type @code{(bytecomp)}.  You can also subcategorize the warnings, if you wish, by using more symbols in the list."
msgstr "クラス分けのために、それぞれの警告には@dfn{警告タイプ(warning type)}があります。このタイプはシンボルのリストです。最初のシンボルは、そのプログラムのユーザーオプションとして使用する、カスタムグループであるべきです。たとえばバイトコンパイラーの警告は、警告タイプ@code{(bytecomp)}を使用します。もし望むなら、このリスト内で更にシンボルを使用することにより、警告をサブカテゴリー化することもできます。"

#. type: defun
#: display.texi.orig:617
#, no-wrap
msgid "display-warning type message &optional level buffer-name"
msgstr "display-warning type message &optional level buffer-name"

#. type: defun
#: display.texi.orig:621
msgid "This function reports a warning, using @var{message} as the message and @var{type} as the warning type.  @var{level} should be the severity level, with @code{:warning} being the default."
msgstr "この関数はメッセージとして@var{message}、警告タイプとして@var{type}を使用して、警告をリポートする。@var{level}は重大レベルであること。デフォルトは@code{:warning}。"

#. type: defun
#: display.texi.orig:624
msgid "@var{buffer-name}, if non-@code{nil}, specifies the name of the buffer for logging the warning.  By default, it is @file{*Warnings*}."
msgstr "@var{buffer-name}が非@code{nil}なら、それは警告をロギングするためのバッファー名を指定する。デフォルトは@file{*Warnings*}。"

#. type: defun
#: display.texi.orig:626
#, no-wrap
msgid "lwarn type level message &rest args"
msgstr "lwarn type level message &rest args"

#. type: defun
#: display.texi.orig:630
msgid "This function reports a warning using the value of @code{(format @var{message} @var{args}...)} as the message in the @file{*Warnings*} buffer.  In other respects it is equivalent to @code{display-warning}."
msgstr "この関数は、@file{*Warnings*}バッファー内のメッセージとして@code{(format @var{message} @var{args}...)}の値を使用して、、警告をリポートする。他の点では、これは@code{display-warning}と同じである。"

#. type: defun
#: display.texi.orig:632
#, no-wrap
msgid "warn message &rest args"
msgstr "warn message &rest args"

#. type: defun
#: display.texi.orig:638
msgid "This function reports a warning using the value of @code{(format @var{message} @var{args}...)} as the message, @code{(emacs)} as the type, and @code{:warning} as the severity level.  It exists for compatibility only; we recommend not using it, because you should specify a specific warning type."
msgstr "この関数はメッセージとして@code{(format @var{message} @var{args}...)}の値、タイプとして@code{(emacs)}、重大レベルとして@code{:warning}を使用して、警告をリポートする。これは互換性のためだけに存在する。固有な警告タイプを指定するべきであり、この関数の使用は推奨しない。"

#. type: cindex
#: display.texi.orig:642
#, no-wrap
msgid "warning variables"
msgstr "warning variables"

#. type: Plain text
#: display.texi.orig:646
msgid "Programs can customize how their warnings appear by binding the variables described in this section."
msgstr "プログラムは、このセクション内で説明する変数をバインドすることにより、警告が表示される方法をカスタマイズできます。"

#. type: defvar
#: display.texi.orig:647
#, no-wrap
msgid "warning-levels"
msgstr "warning-levels"

#. type: defvar
#: display.texi.orig:651
msgid "This list defines the meaning and severity order of the warning severity levels.  Each element defines one severity level, and they are arranged in order of decreasing severity."
msgstr "このリストは、警告の重大レベルの意味と、重大度の順序を定義する。それぞれの要素は1つの重大レベルを定義し、それらは重大度の降順で配置される。"

#. type: defvar
#: display.texi.orig:658
msgid "Each element has the form @code{(@var{level} @var{string} @var{function})}, where @var{level} is the severity level it defines.  @var{string} specifies the textual description of this level.  @var{string} should use @samp{%s} to specify where to put the warning type information, or it can omit the @samp{%s} so as not to include that information."
msgstr "各要素は@code{(@var{level} @var{string} @var{function})}という形式をもち、@var{level}はその要素が定義する重大レベルである。@var{string}はそのレベルのテキストによる説明である。@var{string}は警告タイプ情報の配置箇所の指定に@samp{%s}を使用するか、さもなくばその情報を含まぬよう@samp{%s}を省略できる。"

#. type: defvar
#: display.texi.orig:661
msgid "The optional @var{function}, if non-@code{nil}, is a function to call with no arguments, to get the user's attention."
msgstr "オプションの@var{function}が非@code{nil}なら、これはユーザーの注目を得るために引数なしで呼び出される関数であること。"

#. type: defvar
#: display.texi.orig:663
msgid "Normally you should not change the value of this variable."
msgstr "通常は、この変数の値を変更するべきではない。"

#. type: defvar
#: display.texi.orig:665
#, no-wrap
msgid "warning-prefix-function"
msgstr "warning-prefix-function"

#. type: defvar
#: display.texi.orig:671
msgid "If non-@code{nil}, the value is a function to generate prefix text for warnings.  Programs can bind the variable to a suitable function.  @code{display-warning} calls this function with the warnings buffer current, and the function can insert text in it.  That text becomes the beginning of the warning message."
msgstr "値が非@code{nil}なら、それは警告用にプレフィックスを生成する関数であること。プログラムは、この変数を適切な関数にバインドできる。@code{display-warning}はwarningsバッファーがカレントの状態でこの関数を呼び出し、関数はそのバッファーにテキストを挿入できる。そのテキストが、警告メッセージの先頭になる。"

#. type: defvar
#: display.texi.orig:678
msgid "The function is called with two arguments, the severity level and its entry in @code{warning-levels}.  It should return a list to use as the entry (this value need not be an actual member of @code{warning-levels}).  By constructing this value, the function can change the severity of the warning, or specify different handling for a given severity level."
msgstr "この関数は重大レベル、および@code{warning-levels}内でのその重大レベルのエントリーという、2つの引数で呼び出される。これは、エントリーとして使用するためのリストをリターンするべきである(この値は@code{warning-levels}の実際のメンバーである必要はない)。この値を構築することにより、関数はその警告の重大レベルを変更したり、与えられた重大レベルにたいして異なる処理を指定することができる。"

#. type: defvar
#: display.texi.orig:681
msgid "If the variable's value is @code{nil} then there is no function to call."
msgstr "この変数の値が@code{nil}なら、呼び出される関数は存在しない。"

#. type: defvar
#: display.texi.orig:683
#, no-wrap
msgid "warning-series"
msgstr "warning-series"

#. type: defvar
#: display.texi.orig:690
msgid "Programs can bind this variable to @code{t} to say that the next warning should begin a series.  When several warnings form a series, that means to leave point on the first warning of the series, rather than keep moving it for each warning so that it appears on the last one.  The series ends when the local binding is unbound and @code{warning-series} becomes @code{nil} again."
msgstr "プログラムは、次の警告がシリーズの開始であることを告げるために、この変数を@code{t}にバインドできる。複数の警告がシリーズを形成するということは、それぞれの警告にたいしてポイントが維持されるよう移動して、最後の警告にポイントが表示されるのではなく、そのシリーズの最初の警告にポイントを残すことを意味する。このシリーズは、そのローカルバインドが非バインドされて、@code{warning-series}が再び@code{nil}になったときに終了する。"

#. type: defvar
#: display.texi.orig:696
msgid "The value can also be a symbol with a function definition.  That is equivalent to @code{t}, except that the next warning will also call the function with no arguments with the warnings buffer current.  The function can insert text which will serve as a header for the series of warnings."
msgstr "この値は、関数定義をもつシンボルでもよい。これは、次の警告によりwarningsバッファーがカレントの状態で、引数なしでその関数が呼び出されることを除き、@code{t}と等価である。この関数は、その警告シリーズのヘッダーの役目をもつであろうテキストを挿入できる。"

#. type: defvar
#: display.texi.orig:699
msgid "Once a series has begun, the value is a marker which points to the buffer position in the warnings buffer of the start of the series."
msgstr "あるシリーズが開始されると、その値はwarningsバッファー内でシリーズ開始となるバッファー位置を指すマーカーとなる。"

#. type: defvar
#: display.texi.orig:702
msgid "The variable's normal value is @code{nil}, which means to handle each warning separately."
msgstr "この変数の通常の値は@code{nil}で、これはそれぞれの警告を個別に処理することを意味する。"

#. type: defvar
#: display.texi.orig:704
#, no-wrap
msgid "warning-fill-prefix"
msgstr "warning-fill-prefix"

#. type: defvar
#: display.texi.orig:707
msgid "When this variable is non-@code{nil}, it specifies a fill prefix to use for filling each warning's text."
msgstr "この変数が非@code{nil}なら、それは各警告テキストのフィルに使用する、フィルプレフィックスを指定する。"

#. type: defvar
#: display.texi.orig:709
#, no-wrap
msgid "warning-type-format"
msgstr "warning-type-format"

#. type: defvar
#: display.texi.orig:716
msgid "This variable specifies the format for displaying the warning type in the warning message.  The result of formatting the type this way gets included in the message under the control of the string in the entry in @code{warning-levels}.  The default value is @code{\" (%s)\"}.  If you bind it to @code{\"\"} then the warning type won't appear at all."
msgstr "この変数は、警告メッセージ内の警告タイプを表示するための、フォーマットを指定する。この方法でフォーマットされたタイプは、@code{warning-levels}内のエントリー内の文字列制御下にあるメッセージに含まれることになる。デフォルト値は@code{\" (%s)\"}。これを@code{\"\"}にバインドすると、警告タイプはまったく表示されなくなる。"

#. type: cindex
#: display.texi.orig:720
#, no-wrap
msgid "warning options"
msgstr "warning options"

#. type: Plain text
#: display.texi.orig:724
msgid "These variables are used by users to control what happens when a Lisp program reports a warning."
msgstr "以下の変数は、何が発生したときにLispプログラムが警告をリポートするかを、ユーザーが制御するために使用されます。"

#. type: defopt
#: display.texi.orig:725
#, no-wrap
msgid "warning-minimum-level"
msgstr "warning-minimum-level"

#. type: defopt
#: display.texi.orig:730
msgid "This user option specifies the minimum severity level that should be shown immediately to the user.  The default is @code{:warning}, which means to immediately display all warnings except @code{:debug} warnings."
msgstr "このユーザーオプションは、ユーザーにたいして即座に表示されるべき、最小の重大レベルを指定する。デフォルトは@code{:warning}で、これは@code{:debug}警告を除くすべての警告が即座に表示されることを意味する。"

#. type: defopt
#: display.texi.orig:732
#, no-wrap
msgid "warning-minimum-log-level"
msgstr "warning-minimum-log-level"

#. type: defopt
#: display.texi.orig:736
msgid "This user option specifies the minimum severity level that should be logged in the warnings buffer.  The default is @code{:warning}, which means to log all warnings except @code{:debug} warnings."
msgstr "このユーザーオプションは、warningsバッファー内にログされるべき、最小の重大レベルを指定する。デフォルトは@code{:warning}で、これは@code{:debug}警告を除くすべての警告がログされることを意味する。"

#. type: defopt
#: display.texi.orig:738
#, no-wrap
msgid "warning-suppress-types"
msgstr "warning-suppress-types"

#. type: defopt
#: display.texi.orig:743
msgid "This list specifies which warning types should not be displayed immediately for the user.  Each element of the list should be a list of symbols.  If its elements match the first elements in a warning type, then that warning is not displayed immediately."
msgstr "このリストは、ユーザーにたいしてどの警告タイプを即座に表示するべきではないかを指定する。このリスト内の各要素は、シンボルのリストであること。それの要素が警告タイプ内の最初の要素にマッチしたら、その警告は即座に表示されない。"

#. type: defopt
#: display.texi.orig:745
#, no-wrap
msgid "warning-suppress-log-types"
msgstr "warning-suppress-log-types"

#. type: defopt
#: display.texi.orig:750
msgid "This list specifies which warning types should not be logged in the warnings buffer.  Each element of the list should be a list of symbols.  If it matches the first few elements in a warning type, then that warning is not logged."
msgstr "このリストは、ユーザーにたいしてどの警告タイプがwarningsバッファーにログされるべきではないかを指定する。このリスト内の各要素は、シンボルのリストであること。それの要素が警告タイプ内の最初の数要素にマッチしたら、その警告はログされない。"

#. type: cindex
#: display.texi.orig:754
#, no-wrap
msgid "delayed warnings"
msgstr "delayed warnings"

#. type: Plain text
#: display.texi.orig:759
msgid "Sometimes, you may wish to avoid showing a warning while a command is running, and only show it only after the end of the command.  You can use the variable @code{delayed-warnings-list} for this."
msgstr "コマンド実行中には警告の表示を避けて、コマンドの終わりでのみ警告を表示したいことがあるかもしれません。これは、変数@code{delayed-warnings-list}により行うことができます。"

#. type: defvar
#: display.texi.orig:760
#, no-wrap
msgid "delayed-warnings-list"
msgstr "delayed-warnings-list"

#. type: defvar
#: display.texi.orig:763
msgid "The value of this variable is a list of warnings to be displayed after the current command has finished.  Each element must be a list"
msgstr "この変数の値は、カレントのコマンド完了後に表示される警告のリストである。各要素は以下のようなリストでなければならない:"

#. type: smallexample
#: display.texi.orig:766
#, no-wrap
msgid "(@var{type} @var{message} [@var{level} [@var{buffer-name}]])\n"
msgstr "(@var{type} @var{message} [@var{level} [@var{buffer-name}]])\n"

#. type: defvar
#: display.texi.orig:774
msgid "with the same form, and the same meanings, as the argument list of @code{display-warning} (@pxref{Warning Basics}).  Immediately after running @code{post-command-hook} (@pxref{Command Overview}), the Emacs command loop displays all the warnings specified by this variable, then resets it to @code{nil}."
msgstr "これらは、は@code{display-warning}の引数リストと同じ形式、同じ意味である(@ref{Warning Basics}を参照)。@code{post-command-hook}(@ref{Command Overview}を参照)の実行直後、Emacsのコマンドループはこの変数で指定されたすべての警告を表示してから、変数を@code{nil}にリセットする。"

#. type: Plain text
#: display.texi.orig:778
msgid "Programs which need to further customize the delayed warnings mechanism can change the variable @code{delayed-warnings-hook}:"
msgstr "遅延警告メカニズムをよりカスタマイズする必要があるプログラムは、変数@code{delayed-warnings-hook}を変更することができます:"

#. type: defvar
#: display.texi.orig:779
#, no-wrap
msgid "delayed-warnings-hook"
msgstr "delayed-warnings-hook"

#. type: defvar
#: display.texi.orig:783
msgid "This is a normal hook which is run by the Emacs command loop, after @code{post-command-hook}, in order to to process and display delayed warnings."
msgstr "これは遅延警告を処理して表示するために、@code{post-command-hook}の後にEmacsコマンドループが実行する、ノーマルフックである。"

#. type: defvar
#: display.texi.orig:785
msgid "Its default value is a list of two functions:"
msgstr "デフォルト値は、2つの関数からなるリストである:"

#. type: smallexample
#: display.texi.orig:788
#, no-wrap
msgid "(collapse-delayed-warnings display-delayed-warnings)\n"
msgstr "(collapse-delayed-warnings display-delayed-warnings)\n"

#. type: findex
#: display.texi.orig:790
#, no-wrap
msgid "collapse-delayed-warnings"
msgstr "collapse-delayed-warnings"

#. type: findex
#: display.texi.orig:791
#, no-wrap
msgid "display-delayed-warnings"
msgstr "display-delayed-warnings"

#. type: defvar
#: display.texi.orig:798
msgid "The function @code{collapse-delayed-warnings} removes repeated entries from @code{delayed-warnings-list}.  The function @code{display-delayed-warnings} calls @code{display-warning} on each of the entries in @code{delayed-warnings-list}, in turn, and then sets @code{delayed-warnings-list} to @code{nil}."
msgstr "関数@code{collapse-delayed-warnings}は、@code{delayed-warnings-list}から重複するエントリーを削除する。関数@code{display-delayed-warnings}は、@code{delayed-warnings-list}内の各要素にたいして順次@code{display-warning}を呼び出してから、@code{delayed-warnings-list}を@code{nil}にセットする。"

#. type: cindex
#: display.texi.orig:803
#, no-wrap
msgid "invisible text"
msgstr ""

#. type: Plain text
#: display.texi.orig:811
msgid "You can make characters @dfn{invisible}, so that they do not appear on the screen, with the @code{invisible} property.  This can be either a text property (@pxref{Text Properties}) or an overlay property (@pxref{Overlays}).  Cursor motion also partly ignores these characters; if the command loop finds that point is inside a range of invisible text after a command, it relocates point to the other side of the text."
msgstr ""

#. type: Plain text
#: display.texi.orig:818
msgid "In the simplest case, any non-@code{nil} @code{invisible} property makes a character invisible.  This is the default case---if you don't alter the default value of @code{buffer-invisibility-spec}, this is how the @code{invisible} property works.  You should normally use @code{t} as the value of the @code{invisible} property if you don't plan to set @code{buffer-invisibility-spec} yourself."
msgstr ""

#. type: Plain text
#: display.texi.orig:825
msgid "More generally, you can use the variable @code{buffer-invisibility-spec} to control which values of the @code{invisible} property make text invisible.  This permits you to classify the text into different subsets in advance, by giving them different @code{invisible} values, and subsequently make various subsets visible or invisible by changing the value of @code{buffer-invisibility-spec}."
msgstr ""

#. type: Plain text
#: display.texi.orig:832
msgid "Controlling visibility with @code{buffer-invisibility-spec} is especially useful in a program to display the list of entries in a database.  It permits the implementation of convenient filtering commands to view just a part of the entries in the database.  Setting this variable is very fast, much faster than scanning all the text in the buffer looking for properties to change."
msgstr ""

#. type: defvar
#: display.texi.orig:833
#, no-wrap
msgid "buffer-invisibility-spec"
msgstr ""

#. type: defvar
#: display.texi.orig:837
msgid "This variable specifies which kinds of @code{invisible} properties actually make a character invisible.  Setting this variable makes it buffer-local."
msgstr ""

#. type: code{#1}
#: display.texi.orig:839 display.texi.orig:2131 display.texi.orig:2169
#: display.texi.orig:2334
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: display.texi.orig:842
msgid "A character is invisible if its @code{invisible} property is non-@code{nil}.  This is the default."
msgstr ""

#. type: item
#: display.texi.orig:843 display.texi.orig:2339
#, no-wrap
msgid "a list"
msgstr ""

#. type: table
#: display.texi.orig:847
msgid "Each element of the list specifies a criterion for invisibility; if a character's @code{invisible} property fits any one of these criteria, the character is invisible.  The list can have two kinds of elements:"
msgstr ""

#. type: var{#1}
#: display.texi.orig:849
#, no-wrap
msgid "atom"
msgstr ""

#. type: table
#: display.texi.orig:853
msgid "A character is invisible if its @code{invisible} property value is @var{atom} or if it is a list with @var{atom} as a member; comparison is done with @code{eq}."
msgstr ""

#. type: item
#: display.texi.orig:854
#, no-wrap
msgid "(@var{atom} . t)"
msgstr ""

#. type: table
#: display.texi.orig:859
msgid "A character is invisible if its @code{invisible} property value is @var{atom} or if it is a list with @var{atom} as a member; comparison is done with @code{eq}.  Moreover, a sequence of such characters displays as an ellipsis."
msgstr ""

#. type: Plain text
#: display.texi.orig:865
msgid "Two functions are specifically provided for adding elements to @code{buffer-invisibility-spec} and removing elements from it."
msgstr ""

#. type: defun
#: display.texi.orig:866
#, no-wrap
msgid "add-to-invisibility-spec element"
msgstr ""

#. type: defun
#: display.texi.orig:871
msgid "This function adds the element @var{element} to @code{buffer-invisibility-spec}.  If @code{buffer-invisibility-spec} was @code{t}, it changes to a list, @code{(t)}, so that text whose @code{invisible} property is @code{t} remains invisible."
msgstr ""

#. type: defun
#: display.texi.orig:873
#, no-wrap
msgid "remove-from-invisibility-spec element"
msgstr ""

#. type: defun
#: display.texi.orig:877
msgid "This removes the element @var{element} from @code{buffer-invisibility-spec}.  This does nothing if @var{element} is not in the list."
msgstr ""

#. type: Plain text
#: display.texi.orig:883
msgid "A convention for use of @code{buffer-invisibility-spec} is that a major mode should use the mode's own name as an element of @code{buffer-invisibility-spec} and as the value of the @code{invisible} property:"
msgstr ""

#. type: example
#: display.texi.orig:889
#, no-wrap
msgid ""
";; @r{If you want to display an ellipsis:}\n"
"(add-to-invisibility-spec '(my-symbol . t))\n"
";; @r{If you don't want ellipsis:}\n"
"(add-to-invisibility-spec 'my-symbol)\n"
"\n"
msgstr ""

#. type: example
#: display.texi.orig:892
#, no-wrap
msgid ""
"(overlay-put (make-overlay beginning end)\n"
"             'invisible 'my-symbol)\n"
"\n"
msgstr ""

#. type: example
#: display.texi.orig:897
#, no-wrap
msgid ""
";; @r{When done with the invisibility:}\n"
"(remove-from-invisibility-spec '(my-symbol . t))\n"
";; @r{Or respectively:}\n"
"(remove-from-invisibility-spec 'my-symbol)\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:900
msgid "You can check for invisibility using the following function:"
msgstr ""

#. type: defun
#: display.texi.orig:901
#, no-wrap
msgid "invisible-p pos-or-prop"
msgstr ""

#. type: defun
#: display.texi.orig:904
msgid "If @var{pos-or-prop} is a marker or number, this function returns a non-@code{nil} value if the text at that position is invisible."
msgstr ""

#. type: defun
#: display.texi.orig:910
msgid "If @var{pos-or-prop} is any other kind of Lisp object, that is taken to mean a possible value of the @code{invisible} text or overlay property.  In that case, this function returns a non-@code{nil} value if that value would cause text to become invisible, based on the current value of @code{buffer-invisibility-spec}."
msgstr ""

#. type: vindex
#: display.texi.orig:912
#, no-wrap
msgid "line-move-ignore-invisible"
msgstr ""

#. type: Plain text
#: display.texi.orig:920
msgid "Ordinarily, functions that operate on text or move point do not care whether the text is invisible, they process invisible characters and visible characters alike.  The user-level line motion commands, such as @code{next-line}, @code{previous-line}, ignore invisible newlines if @code{line-move-ignore-invisible} is non-@code{nil} (the default), i.e., behave like these invisible newlines didn't exist in the buffer, but only because they are explicitly programmed to do so."
msgstr ""

#. type: Plain text
#: display.texi.orig:931
msgid "If a command ends with point inside or at the boundary of invisible text, the main editing loop relocates point to one of the two ends of the invisible text.  Emacs chooses the direction of relocation so that it is the same as the overall movement direction of the command; if in doubt, it prefers a position where an inserted char would not inherit the @code{invisible} property.  Additionally, if the text is not replaced by an ellipsis and the command only moved within the invisible text, then point is moved one extra character so as to try and reflect the command's movement by a visible movement of the cursor."
msgstr ""

#. type: Plain text
#: display.texi.orig:937
msgid "Thus, if the command moved point back to an invisible range (with the usual stickiness), Emacs moves point back to the beginning of that range.  If the command moved point forward into an invisible range, Emacs moves point forward to the first visible character that follows the invisible text and then forward one more character."
msgstr ""

#. type: Plain text
#: display.texi.orig:941
msgid "These @dfn{adjustments} of point that ended up in the middle of invisible text can be disabled by setting @code{disable-point-adjustment} to a non-@code{nil} value.  @xref{Adjusting Point}."
msgstr ""

#. type: Plain text
#: display.texi.orig:949
msgid "Incremental search can make invisible overlays visible temporarily and/or permanently when a match includes invisible text.  To enable this, the overlay should have a non-@code{nil} @code{isearch-open-invisible} property.  The property value should be a function to be called with the overlay as an argument.  This function should make the overlay visible permanently; it is used when the match overlaps the overlay on exit from the search."
msgstr ""

#. type: Plain text
#: display.texi.orig:957
msgid "During the search, such overlays are made temporarily visible by temporarily modifying their invisible and intangible properties.  If you want this to be done differently for a certain overlay, give it an @code{isearch-open-invisible-temporary} property which is a function.  The function is called with two arguments: the first is the overlay, and the second is @code{nil} to make the overlay visible, or @code{t} to make it invisible again."
msgstr ""

#. type: Plain text
#: display.texi.orig:964
msgid "@dfn{Selective display} refers to a pair of related features for hiding certain lines on the screen."
msgstr ""

#. type: cindex
#: display.texi.orig:965
#, no-wrap
msgid "explicit selective display"
msgstr ""

#. type: Plain text
#: display.texi.orig:970
msgid "The first variant, explicit selective display, was designed for use in a Lisp program: it controls which lines are hidden by altering the text.  This kind of hiding is now obsolete; instead you can get the same effect with the @code{invisible} property (@pxref{Invisible Text})."
msgstr ""

#. type: Plain text
#: display.texi.orig:974
msgid "In the second variant, the choice of lines to hide is made automatically based on indentation.  This variant is designed to be a user-level feature."
msgstr ""

#. type: Plain text
#: display.texi.orig:980
msgid "The way you control explicit selective display is by replacing a newline (control-j) with a carriage return (control-m).  The text that was formerly a line following that newline is now hidden.  Strictly speaking, it is temporarily no longer a line at all, since only newlines can separate lines; it is now part of the previous line."
msgstr ""

#. type: Plain text
#: display.texi.orig:989
msgid "Selective display does not directly affect editing commands.  For example, @kbd{C-f} (@code{forward-char}) moves point unhesitatingly into hidden text.  However, the replacement of newline characters with carriage return characters affects some editing commands.  For example, @code{next-line} skips hidden lines, since it searches only for newlines.  Modes that use selective display can also define commands that take account of the newlines, or that control which parts of the text are hidden."
msgstr ""

#. type: Plain text
#: display.texi.orig:994
msgid "When you write a selectively displayed buffer into a file, all the control-m's are output as newlines.  This means that when you next read in the file, it looks OK, with nothing hidden.  The selective display effect is seen only within Emacs."
msgstr ""

#. type: defvar
#: display.texi.orig:995
#, no-wrap
msgid "selective-display"
msgstr ""

#. type: defvar
#: display.texi.orig:998
msgid "This buffer-local variable enables selective display.  This means that lines, or portions of lines, may be made hidden."
msgstr ""

#. type: itemize
#: display.texi.orig:1005
msgid "If the value of @code{selective-display} is @code{t}, then the character control-m marks the start of hidden text; the control-m, and the rest of the line following it, are not displayed.  This is explicit selective display."
msgstr ""

#. type: itemize
#: display.texi.orig:1010
msgid "If the value of @code{selective-display} is a positive integer, then lines that start with more than that many columns of indentation are not displayed."
msgstr ""

#. type: defvar
#: display.texi.orig:1018
msgid "When some portion of a buffer is hidden, the vertical movement commands operate as if that portion did not exist, allowing a single @code{next-line} command to skip any number of hidden lines.  However, character movement commands (such as @code{forward-char}) do not skip the hidden portion, and it is possible (if tricky) to insert or delete text in an hidden portion."
msgstr ""

#. type: defvar
#: display.texi.orig:1023
msgid "In the examples below, we show the @emph{display appearance} of the buffer @code{foo}, which changes with the value of @code{selective-display}.  The @emph{contents} of the buffer do not change."
msgstr ""

#. type: group
#: display.texi.orig:1028
#, no-wrap
msgid ""
"(setq selective-display nil)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1037
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column\n"
"  3n this column\n"
"  3n this column\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: display.texi.orig:1042
#, no-wrap
msgid ""
"(setq selective-display 2)\n"
"     @result{} 2\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1049
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defopt
#: display.texi.orig:1053
#, no-wrap
msgid "selective-display-ellipses"
msgstr ""

#. type: defopt
#: display.texi.orig:1057
msgid "If this buffer-local variable is non-@code{nil}, then Emacs displays @samp{@dots{}} at the end of a line that is followed by hidden text.  This example is a continuation of the previous one."
msgstr ""

#. type: group
#: display.texi.orig:1062
#, no-wrap
msgid ""
"(setq selective-display-ellipses t)\n"
"     @result{} t\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1069
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"1 on this column\n"
" 2on this column ...\n"
" 2on this column\n"
"1 on this column\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defopt
#: display.texi.orig:1074
msgid "You can use a display table to substitute other text for the ellipsis (@samp{@dots{}}).  @xref{Display Tables}."
msgstr ""

#. type: cindex
#: display.texi.orig:1078
#, no-wrap
msgid "temporary display"
msgstr ""

#. type: cindex
#: display.texi.orig:1079
#, no-wrap
msgid "temporary buffer display"
msgstr ""

#. type: Plain text
#: display.texi.orig:1084
msgid "Temporary displays are used by Lisp programs to put output into a buffer and then present it to the user for perusal rather than for editing.  Many help commands use this feature."
msgstr ""

#. type: defmac
#: display.texi.orig:1085
#, no-wrap
msgid "with-output-to-temp-buffer buffer-name body@dots{}"
msgstr ""

#. type: defmac
#: display.texi.orig:1091
msgid "This function executes the forms in @var{body} while arranging to insert any output they print into the buffer named @var{buffer-name}, which is first created if necessary, and put into Help mode.  (See the similar form @code{with-temp-buffer-window} below.)  Finally, the buffer is displayed in some window, but that window is not selected."
msgstr ""

#. type: defmac
#: display.texi.orig:1099
msgid "If the forms in @var{body} do not change the major mode in the output buffer, so that it is still Help mode at the end of their execution, then @code{with-output-to-temp-buffer} makes this buffer read-only at the end, and also scans it for function and variable names to make them into clickable cross-references.  @xref{Docstring hyperlinks, , Tips for Documentation Strings}, in particular the item on hyperlinks in documentation strings, for more details."
msgstr ""

#. type: defmac
#: display.texi.orig:1104
msgid "The string @var{buffer-name} specifies the temporary buffer, which need not already exist.  The argument must be a string, not a buffer.  The buffer is erased initially (with no questions asked), and it is marked as unmodified after @code{with-output-to-temp-buffer} exits."
msgstr ""

#. type: defmac
#: display.texi.orig:1111
msgid "@code{with-output-to-temp-buffer} binds @code{standard-output} to the temporary buffer, then it evaluates the forms in @var{body}.  Output using the Lisp output functions within @var{body} goes by default to that buffer (but screen display and messages in the echo area, although they are ``output'' in the general sense of the word, are not affected).  @xref{Output Functions}."
msgstr ""

#. type: defmac
#: display.texi.orig:1114
msgid "Several hooks are available for customizing the behavior of this construct; they are listed below."
msgstr ""

#. type: defmac
#: display.texi.orig:1116
msgid "The value of the last form in @var{body} is returned."
msgstr ""

#. type: group
#: display.texi.orig:1122
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
" This is the contents of foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: display.texi.orig:1129
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"foo\"\n"
"    (print 20)\n"
"    (print standard-output))\n"
"@result{} #<buffer foo>\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1131
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1133
#, no-wrap
msgid ""
"20\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1135
#, no-wrap
msgid ""
"#<buffer foo>\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1137
#, no-wrap
msgid "---------- Buffer: foo ----------\n"
msgstr ""

#. type: defopt
#: display.texi.orig:1141
#, no-wrap
msgid "temp-buffer-show-function"
msgstr ""

#. type: defopt
#: display.texi.orig:1145
msgid "If this variable is non-@code{nil}, @code{with-output-to-temp-buffer} calls it as a function to do the job of displaying a help buffer.  The function gets one argument, which is the buffer it should display."
msgstr ""

#. type: defopt
#: display.texi.orig:1150
msgid "It is a good idea for this function to run @code{temp-buffer-show-hook} just as @code{with-output-to-temp-buffer} normally would, inside of @code{save-selected-window} and with the chosen window and buffer selected."
msgstr ""

#. type: defvar
#: display.texi.orig:1152
#, no-wrap
msgid "temp-buffer-setup-hook"
msgstr ""

#. type: defvar
#: display.texi.orig:1157
msgid "This normal hook is run by @code{with-output-to-temp-buffer} before evaluating @var{body}.  When the hook runs, the temporary buffer is current.  This hook is normally set up with a function to put the buffer in Help mode."
msgstr ""

#. type: defvar
#: display.texi.orig:1159
#, no-wrap
msgid "temp-buffer-show-hook"
msgstr ""

#. type: defvar
#: display.texi.orig:1163
msgid "This normal hook is run by @code{with-output-to-temp-buffer} after displaying the temporary buffer.  When the hook runs, the temporary buffer is current, and the window it was displayed in is selected."
msgstr ""

#. type: defmac
#: display.texi.orig:1165
#, no-wrap
msgid "with-temp-buffer-window buffer-or-name action quit-function body@dots{}"
msgstr ""

#. type: defmac
#: display.texi.orig:1171
msgid "This macro is similar to @code{with-output-to-temp-buffer}.  Like that construct, it executes @var{body} while arranging to insert any output it prints into the buffer named @var{buffer-or-name} and displays that buffer in some window.  Unlike @code{with-output-to-temp-buffer}, however, it does not automatically switch that buffer to Help mode."
msgstr ""

#. type: defmac
#: display.texi.orig:1174
msgid "Like @code{with-output-to-temp-buffer} it neither makes the buffer specified by @var{buffer-or-name} current when executing @var{body}."
msgstr ""

#. type: findex
#: display.texi.orig:1174
#, no-wrap
msgid "with-current-buffer-window"
msgstr ""

#. type: defmac
#: display.texi.orig:1177
msgid "The otherwise identical macro @code{with-current-buffer-window} can be used to execute @var{body} with that buffer current."
msgstr ""

#. type: defmac
#: display.texi.orig:1183
msgid "The argument @var{buffer-or-name} specifies the temporary buffer.  It can be either a buffer, which must already exist, or a string, in which case a buffer of that name is created, if necessary.  The buffer is marked as unmodified and read-only when @code{with-temp-buffer-window} exits."
msgstr ""

#. type: defmac
#: display.texi.orig:1187
msgid "This macro does not call @code{temp-buffer-show-function}.  Rather, it passes the @var{action} argument to @code{display-buffer} in order to display the buffer."
msgstr ""

#. type: defmac
#: display.texi.orig:1193
msgid "The value of the last form in @var{body} is returned, unless the argument @var{quit-function} is specified.  In that case, it is called with two arguments: the window showing the buffer and the result of @var{body}.  The final return value is then whatever @var{quit-function} returns."
msgstr ""

#. type: vindex
#: display.texi.orig:1194
#, no-wrap
msgid "temp-buffer-window-setup-hook"
msgstr ""

#. type: vindex
#: display.texi.orig:1195
#, no-wrap
msgid "temp-buffer-window-show-hook"
msgstr ""

#. type: defmac
#: display.texi.orig:1199
msgid "This macro uses the normal hooks @code{temp-buffer-window-setup-hook} and @code{temp-buffer-window-show-hook} in place of the analogous hooks run by @code{with-output-to-temp-buffer}."
msgstr ""

#. type: defun
#: display.texi.orig:1201
#, no-wrap
msgid "momentary-string-display string position &optional char message"
msgstr ""

#. type: defun
#: display.texi.orig:1205
msgid "This function momentarily displays @var{string} in the current buffer at @var{position}.  It has no effect on the undo list or on the buffer's modification status."
msgstr ""

#. type: defun
#: display.texi.orig:1213
msgid "The momentary display remains until the next input event.  If the next input event is @var{char}, @code{momentary-string-display} ignores it and returns.  Otherwise, that event remains buffered for subsequent use as input.  Thus, typing @var{char} will simply remove the string from the display, while typing (say) @kbd{C-f} will remove the string from the display and later (presumably) move point forward.  The argument @var{char} is a space by default."
msgstr ""

#. type: defun
#: display.texi.orig:1215
msgid "The return value of @code{momentary-string-display} is not meaningful."
msgstr ""

#. type: defun
#: display.texi.orig:1220
msgid "If the string @var{string} does not contain control characters, you can do the same job in a more general way by creating (and then subsequently deleting) an overlay with a @code{before-string} property.  @xref{Overlay Properties}."
msgstr ""

#. type: defun
#: display.texi.orig:1224
msgid "If @var{message} is non-@code{nil}, it is displayed in the echo area while @var{string} is displayed in the buffer.  If it is @code{nil}, a default message says to type @var{char} to continue."
msgstr ""

#. type: defun
#: display.texi.orig:1227
msgid "In this example, point is initially located at the beginning of the second line:"
msgstr ""

#. type: group
#: display.texi.orig:1234
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"@point{}Second line.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: display.texi.orig:1242
#, no-wrap
msgid ""
"(momentary-string-display\n"
"  \"**** Important Message! ****\"\n"
"  (point) ?\\r\n"
"  \"Type RET when done reading\")\n"
"@result{} t\n"
msgstr ""

#. type: group
#: display.texi.orig:1249
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo.\n"
"**** Important Message! ****Second line.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""

#. type: group
#: display.texi.orig:1253
#, no-wrap
msgid ""
"---------- Echo Area ----------\n"
"Type RET when done reading\n"
"---------- Echo Area ----------\n"
msgstr ""

#. type: cindex
#: display.texi.orig:1259
#, no-wrap
msgid "overlays"
msgstr ""

#. type: Plain text
#: display.texi.orig:1267
msgid "You can use @dfn{overlays} to alter the appearance of a buffer's text on the screen, for the sake of presentation features.  An overlay is an object that belongs to a particular buffer, and has a specified beginning and end.  It also has properties that you can examine and set; these affect the display of the text within the overlay."
msgstr ""

#. type: cindex
#: display.texi.orig:1268
#, no-wrap
msgid "scalability of overlays"
msgstr ""

#. type: Plain text
#: display.texi.orig:1275
msgid "The visual effect of an overlay is the same as of the corresponding text property (@pxref{Text Properties}).  However, due to a different implementation, overlays generally don't scale well (many operations take a time that is proportional to the number of overlays in the buffer).  If you need to affect the visual appearance of many portions in the buffer, we recommend using text properties."
msgstr ""

#. type: Plain text
#: display.texi.orig:1281
msgid "An overlay uses markers to record its beginning and end; thus, editing the text of the buffer adjusts the beginning and end of each overlay so that it stays with the text.  When you create the overlay, you can specify whether text inserted at the beginning should be inside the overlay or outside, and likewise for the end of the overlay."
msgstr ""

#. type: subsection
#: display.texi.orig:1287 display.texi.orig:1289 display.texi.orig:1290
#, no-wrap
msgid "Managing Overlays"
msgstr ""

#. type: menuentry
#: display.texi.orig:1287
msgid "Creating and moving overlays."
msgstr ""

#. type: subsection
#: display.texi.orig:1287 display.texi.orig:1451 display.texi.orig:1452
#, no-wrap
msgid "Overlay Properties"
msgstr ""

#. type: menuentry
#: display.texi.orig:1287
msgid "How to read and set properties.  What properties do to the screen display."
msgstr ""

#. type: node
#: display.texi.orig:1287 display.texi.orig:1704
#, no-wrap
msgid "Finding Overlays"
msgstr ""

#. type: menuentry
#: display.texi.orig:1287
msgid "Searching for overlays."
msgstr ""

#. type: cindex
#: display.texi.orig:1291
#, no-wrap
msgid "managing overlays"
msgstr ""

#. type: cindex
#: display.texi.orig:1292
#, no-wrap
msgid "overlays, managing"
msgstr ""

#. type: Plain text
#: display.texi.orig:1298
msgid "This section describes the functions to create, delete and move overlays, and to examine their contents.  Overlay changes are not recorded in the buffer's undo list, since the overlays are not part of the buffer's contents."
msgstr ""

#. type: defun
#: display.texi.orig:1299
#, no-wrap
msgid "overlayp object"
msgstr ""

#. type: defun
#: display.texi.orig:1301
msgid "This function returns @code{t} if @var{object} is an overlay."
msgstr ""

#. type: defun
#: display.texi.orig:1303
#, no-wrap
msgid "make-overlay start end &optional buffer front-advance rear-advance"
msgstr ""

#. type: defun
#: display.texi.orig:1309
msgid "This function creates and returns an overlay that belongs to @var{buffer} and ranges from @var{start} to @var{end}.  Both @var{start} and @var{end} must specify buffer positions; they may be integers or markers.  If @var{buffer} is omitted, the overlay is created in the current buffer."
msgstr ""

#. type: defun
#: display.texi.orig:1319
msgid "The arguments @var{front-advance} and @var{rear-advance} specify the marker insertion type for the start of the overlay and for the end of the overlay, respectively.  @xref{Marker Insertion Types}.  If they are both @code{nil}, the default, then the overlay extends to include any text inserted at the beginning, but not text inserted at the end.  If @var{front-advance} is non-@code{nil}, text inserted at the beginning of the overlay is excluded from the overlay.  If @var{rear-advance} is non-@code{nil}, text inserted at the end of the overlay is included in the overlay."
msgstr ""

#. type: defun
#: display.texi.orig:1321
#, no-wrap
msgid "overlay-start overlay"
msgstr ""

#. type: defun
#: display.texi.orig:1324
msgid "This function returns the position at which @var{overlay} starts, as an integer."
msgstr ""

#. type: defun
#: display.texi.orig:1326
#, no-wrap
msgid "overlay-end overlay"
msgstr ""

#. type: defun
#: display.texi.orig:1329
msgid "This function returns the position at which @var{overlay} ends, as an integer."
msgstr ""

#. type: defun
#: display.texi.orig:1331
#, no-wrap
msgid "overlay-buffer overlay"
msgstr ""

#. type: defun
#: display.texi.orig:1334
msgid "This function returns the buffer that @var{overlay} belongs to.  It returns @code{nil} if @var{overlay} has been deleted."
msgstr ""

#. type: defun
#: display.texi.orig:1336
#, no-wrap
msgid "delete-overlay overlay"
msgstr ""

#. type: defun
#: display.texi.orig:1341
msgid "This function deletes @var{overlay}.  The overlay continues to exist as a Lisp object, and its property list is unchanged, but it ceases to be attached to the buffer it belonged to, and ceases to have any effect on display."
msgstr ""

#. type: defun
#: display.texi.orig:1344
msgid "A deleted overlay is not permanently disconnected.  You can give it a position in a buffer again by calling @code{move-overlay}."
msgstr ""

#. type: defun
#: display.texi.orig:1346
#, no-wrap
msgid "move-overlay overlay start end &optional buffer"
msgstr ""

#. type: defun
#: display.texi.orig:1350
msgid "This function moves @var{overlay} to @var{buffer}, and places its bounds at @var{start} and @var{end}.  Both arguments @var{start} and @var{end} must specify buffer positions; they may be integers or markers."
msgstr ""

#. type: defun
#: display.texi.orig:1354
msgid "If @var{buffer} is omitted, @var{overlay} stays in the same buffer it was already associated with; if @var{overlay} was deleted, it goes into the current buffer."
msgstr ""

#. type: defun
#: display.texi.orig:1356
msgid "The return value is @var{overlay}."
msgstr ""

#. type: defun
#: display.texi.orig:1361
msgid "This is the only valid way to change the endpoints of an overlay.  Do not try modifying the markers in the overlay by hand, as that fails to update other vital data structures and can cause some overlays to be ``lost''."
msgstr ""

#. type: defun
#: display.texi.orig:1363
#, no-wrap
msgid "remove-overlays &optional start end name value"
msgstr ""

#. type: defun
#: display.texi.orig:1367
msgid "This function removes all the overlays between @var{start} and @var{end} whose property @var{name} has the value @var{value}.  It can move the endpoints of the overlays in the region, or split them."
msgstr ""

#. type: defun
#: display.texi.orig:1373
msgid "If @var{name} is omitted or @code{nil}, it means to delete all overlays in the specified region.  If @var{start} and/or @var{end} are omitted or @code{nil}, that means the beginning and end of the buffer respectively.  Therefore, @code{(remove-overlays)} removes all the overlays in the current buffer."
msgstr ""

#. type: defun
#: display.texi.orig:1375
#, no-wrap
msgid "copy-overlay overlay"
msgstr ""

#. type: defun
#: display.texi.orig:1381
msgid "This function returns a copy of @var{overlay}.  The copy has the same endpoints and properties as @var{overlay}.  However, the marker insertion type for the start of the overlay and for the end of the overlay are set to their default values (@pxref{Marker Insertion Types})."
msgstr ""

#. type: Plain text
#: display.texi.orig:1384
msgid "Here are some examples:"
msgstr ""

#. type: example
#: display.texi.orig:1434
#, no-wrap
msgid ""
";; @r{Create an overlay.}\n"
"(setq foo (make-overlay 1 10))\n"
"     @result{} #<overlay from 1 to 10 in display.texi>\n"
"(overlay-start foo)\n"
"     @result{} 1\n"
"(overlay-end foo)\n"
"     @result{} 10\n"
"(overlay-buffer foo)\n"
"     @result{} #<buffer display.texi>\n"
";; @r{Give it a property we can check later.}\n"
"(overlay-put foo 'happy t)\n"
"     @result{} t\n"
";; @r{Verify the property is present.}\n"
"(overlay-get foo 'happy)\n"
"     @result{} t\n"
";; @r{Move the overlay.}\n"
"(move-overlay foo 5 20)\n"
"     @result{} #<overlay from 5 to 20 in display.texi>\n"
"(overlay-start foo)\n"
"     @result{} 5\n"
"(overlay-end foo)\n"
"     @result{} 20\n"
";; @r{Delete the overlay.}\n"
"(delete-overlay foo)\n"
"     @result{} nil\n"
";; @r{Verify it is deleted.}\n"
"foo\n"
"     @result{} #<overlay in no buffer>\n"
";; @r{A deleted overlay has no position.}\n"
"(overlay-start foo)\n"
"     @result{} nil\n"
"(overlay-end foo)\n"
"     @result{} nil\n"
"(overlay-buffer foo)\n"
"     @result{} nil\n"
";; @r{Undelete the overlay.}\n"
"(move-overlay foo 1 20)\n"
"     @result{} #<overlay from 1 to 20 in display.texi>\n"
";; @r{Verify the results.}\n"
"(overlay-start foo)\n"
"     @result{} 1\n"
"(overlay-end foo)\n"
"     @result{} 20\n"
"(overlay-buffer foo)\n"
"     @result{} #<buffer display.texi>\n"
";; @r{Moving and deleting the overlay does not change its properties.}\n"
"(overlay-get foo 'happy)\n"
"     @result{} t\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:1441
msgid "Emacs stores the overlays of each buffer in two lists, divided around an arbitrary ``center position''.  One list extends backwards through the buffer from that center position, and the other extends forwards from that center position.  The center position can be anywhere in the buffer."
msgstr ""

#. type: defun
#: display.texi.orig:1442
#, no-wrap
msgid "overlay-recenter pos"
msgstr ""

#. type: defun
#: display.texi.orig:1446
msgid "This function recenters the overlays of the current buffer around position @var{pos}.  That makes overlay lookup faster for positions near @var{pos}, but slower for positions far away from @var{pos}."
msgstr ""

#. type: Plain text
#: display.texi.orig:1450
msgid "A loop that scans the buffer forwards, creating overlays, can run faster if you do @code{(overlay-recenter (point-max))} first."
msgstr ""

#. type: cindex
#: display.texi.orig:1453
#, no-wrap
msgid "overlay properties"
msgstr ""

#. type: Plain text
#: display.texi.orig:1458
msgid "Overlay properties are like text properties in that the properties that alter how a character is displayed can come from either source.  But in most respects they are different.  @xref{Text Properties}, for comparison."
msgstr ""

#. type: Plain text
#: display.texi.orig:1467
msgid "Text properties are considered a part of the text; overlays and their properties are specifically considered not to be part of the text.  Thus, copying text between various buffers and strings preserves text properties, but does not try to preserve overlays.  Changing a buffer's text properties marks the buffer as modified, while moving an overlay or changing its properties does not.  Unlike text property changes, overlay property changes are not recorded in the buffer's undo list."
msgstr ""

#. type: Plain text
#: display.texi.orig:1474
msgid "Since more than one overlay can specify a property value for the same character, Emacs lets you specify a priority value of each overlay.  In case two overlays have the same priority value, and one is nested in the other, then the inner one will have priority over the outer one.  If neither is nested in the other then you should not make assumptions about which overlay will prevail."
msgstr ""

#. type: Plain text
#: display.texi.orig:1476
msgid "These functions read and set the properties of an overlay:"
msgstr ""

#. type: defun
#: display.texi.orig:1477
#, no-wrap
msgid "overlay-get overlay prop"
msgstr ""

#. type: defun
#: display.texi.orig:1483
msgid "This function returns the value of property @var{prop} recorded in @var{overlay}, if any.  If @var{overlay} does not record any value for that property, but it does have a @code{category} property which is a symbol, that symbol's @var{prop} property is used.  Otherwise, the value is @code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:1485
#, no-wrap
msgid "overlay-put overlay prop value"
msgstr ""

#. type: defun
#: display.texi.orig:1488
msgid "This function sets the value of property @var{prop} recorded in @var{overlay} to @var{value}.  It returns @var{value}."
msgstr ""

#. type: defun
#: display.texi.orig:1490
#, no-wrap
msgid "overlay-properties overlay"
msgstr ""

#. type: defun
#: display.texi.orig:1492
msgid "This returns a copy of the property list of @var{overlay}."
msgstr ""

#. type: Plain text
#: display.texi.orig:1497
msgid "See also the function @code{get-char-property} which checks both overlay properties and text properties for a given character.  @xref{Examining Properties}."
msgstr ""

#. type: Plain text
#: display.texi.orig:1500
msgid "Many overlay properties have special meanings; here is a table of them:"
msgstr ""

#. type: item
#: display.texi.orig:1502
#, no-wrap
msgid "priority"
msgstr ""

#. type: kindex
#: display.texi.orig:1503
#, no-wrap
msgid "priority @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1507
msgid "This property's value determines the priority of the overlay.  If you want to specify a priority value, use either @code{nil} (or zero), or a positive integer.  Any other value has undefined behavior."
msgstr ""

#. type: table
#: display.texi.orig:1515
msgid "The priority matters when two or more overlays cover the same character and both specify the same property; the one whose @code{priority} value is larger overrides the other.  For the @code{face} property, the higher priority overlay's value does not completely override the other value; instead, its face attributes override the face attributes of the lower priority @code{face} property."
msgstr ""

#. type: table
#: display.texi.orig:1517
msgid "Currently, all overlays take priority over text properties."
msgstr ""

#. type: table
#: display.texi.orig:1523
msgid "Note that Emacs sometimes uses non-numeric priority values for some of its internal overlays, so do not try to do arithmetic on the priority of an overlay (unless it is one that you created).  If you need to put overlays in priority order, use the @var{sorted} argument of @code{overlays-at}.  @xref{Finding Overlays}."
msgstr ""

#. type: item
#: display.texi.orig:1524
#, no-wrap
msgid "window"
msgstr ""

#. type: kindex
#: display.texi.orig:1525
#, no-wrap
msgid "window @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1528
msgid "If the @code{window} property is non-@code{nil}, then the overlay applies only on that window."
msgstr ""

#. type: item
#: display.texi.orig:1529
#, no-wrap
msgid "category"
msgstr ""

#. type: kindex
#: display.texi.orig:1530
#, no-wrap
msgid "category @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1534
msgid "If an overlay has a @code{category} property, we call it the @dfn{category} of the overlay.  It should be a symbol.  The properties of the symbol serve as defaults for the properties of the overlay."
msgstr ""

#. type: item
#: display.texi.orig:1535 display.texi.orig:5354
#, no-wrap
msgid "face"
msgstr ""

#. type: kindex
#: display.texi.orig:1536
#, no-wrap
msgid "face @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1539
msgid "This property controls the appearance of the text (@pxref{Faces}).  The value of the property can be the following:"
msgstr ""

#. type: itemize
#: display.texi.orig:1543
msgid "A face name (a symbol or string)."
msgstr ""

#. type: itemize
#: display.texi.orig:1548
msgid "An anonymous face: a property list of the form @code{(@var{keyword} @var{value} @dots{})}, where each @var{keyword} is a face attribute name and @var{value} is a value for that attribute."
msgstr ""

#. type: itemize
#: display.texi.orig:1554
msgid "A list of faces.  Each list element should be either a face name or an anonymous face.  This specifies a face which is an aggregate of the attributes of each of the listed faces.  Faces occurring earlier in the list have higher priority."
msgstr ""

#. type: itemize
#: display.texi.orig:1562
msgid "A cons cell of the form @code{(foreground-color . @var{color-name})} or @code{(background-color . @var{color-name})}.  This specifies the foreground or background color, similar to @code{(:foreground @var{color-name})} or @code{(:background @var{color-name})}.  This form is supported for backward compatibility only, and should be avoided."
msgstr ""

#. type: item
#: display.texi.orig:1564 display.texi.orig:5359
#, no-wrap
msgid "mouse-face"
msgstr ""

#. type: kindex
#: display.texi.orig:1565
#, no-wrap
msgid "mouse-face @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1571
msgid "This property is used instead of @code{face} when the mouse is within the range of the overlay.  However, Emacs ignores all face attributes from this property that alter the text size (e.g., @code{:height}, @code{:weight}, and @code{:slant}).  Those attributes are always the same as in the unhighlighted text."
msgstr ""

#. type: item
#: display.texi.orig:1572
#, no-wrap
msgid "display"
msgstr ""

#. type: kindex
#: display.texi.orig:1573
#, no-wrap
msgid "display @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1578
msgid "This property activates various features that change the way text is displayed.  For example, it can make text appear taller or shorter, higher or lower, wider or narrower, or replaced with an image.  @xref{Display Property}."
msgstr ""

#. type: item
#: display.texi.orig:1579 display.texi.orig:5376
#, no-wrap
msgid "help-echo"
msgstr ""

#. type: kindex
#: display.texi.orig:1580
#, no-wrap
msgid "help-echo @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1585
msgid "If an overlay has a @code{help-echo} property, then when you move the mouse onto the text in the overlay, Emacs displays a help string in the echo area, or in the tooltip window.  For details see @ref{Text help-echo}."
msgstr ""

#. type: item
#: display.texi.orig:1586
#, no-wrap
msgid "field"
msgstr ""

#. type: kindex
#: display.texi.orig:1587
#, no-wrap
msgid "field @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1593
msgid "Consecutive characters with the same @code{field} property constitute a @emph{field}.  Some motion functions including @code{forward-word} and @code{beginning-of-line} stop moving at a field boundary.  @xref{Fields}."
msgstr ""

#. type: item
#: display.texi.orig:1594
#, no-wrap
msgid "modification-hooks"
msgstr ""

#. type: kindex
#: display.texi.orig:1595
#, no-wrap
msgid "modification-hooks @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1599
msgid "This property's value is a list of functions to be called if any character within the overlay is changed or if text is inserted strictly within the overlay."
msgstr ""

#. type: table
#: display.texi.orig:1604
msgid "The hook functions are called both before and after each change.  If the functions save the information they receive, and compare notes between calls, they can determine exactly what change has been made in the buffer text."
msgstr ""

#. type: table
#: display.texi.orig:1608
msgid "When called before a change, each function receives four arguments: the overlay, @code{nil}, and the beginning and end of the text range to be modified."
msgstr ""

#. type: table
#: display.texi.orig:1615
msgid "When called after a change, each function receives five arguments: the overlay, @code{t}, the beginning and end of the text range just modified, and the length of the pre-change text replaced by that range.  (For an insertion, the pre-change length is zero; for a deletion, that length is the number of characters deleted, and the post-change beginning and end are equal.)"
msgstr ""

#. type: table
#: display.texi.orig:1619
msgid "If these functions modify the buffer, they should bind @code{inhibit-modification-hooks} to @code{t} around doing so, to avoid confusing the internal mechanism that calls these hooks."
msgstr ""

#. type: table
#: display.texi.orig:1622
msgid "Text properties also support the @code{modification-hooks} property, but the details are somewhat different (@pxref{Special Properties})."
msgstr ""

#. type: item
#: display.texi.orig:1623
#, no-wrap
msgid "insert-in-front-hooks"
msgstr ""

#. type: kindex
#: display.texi.orig:1624
#, no-wrap
msgid "insert-in-front-hooks @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1628
msgid "This property's value is a list of functions to be called before and after inserting text right at the beginning of the overlay.  The calling conventions are the same as for the @code{modification-hooks} functions."
msgstr ""

#. type: item
#: display.texi.orig:1629
#, no-wrap
msgid "insert-behind-hooks"
msgstr ""

#. type: kindex
#: display.texi.orig:1630
#, no-wrap
msgid "insert-behind-hooks @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1634
msgid "This property's value is a list of functions to be called before and after inserting text right at the end of the overlay.  The calling conventions are the same as for the @code{modification-hooks} functions."
msgstr ""

#. type: item
#: display.texi.orig:1635
#, no-wrap
msgid "invisible"
msgstr ""

#. type: kindex
#: display.texi.orig:1636
#, no-wrap
msgid "invisible @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1640
msgid "The @code{invisible} property can make the text in the overlay invisible, which means that it does not appear on the screen.  @xref{Invisible Text}, for details."
msgstr ""

#. type: item
#: display.texi.orig:1641
#, no-wrap
msgid "intangible"
msgstr ""

#. type: kindex
#: display.texi.orig:1642
#, no-wrap
msgid "intangible @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1645
msgid "The @code{intangible} property on an overlay works just like the @code{intangible} text property.  @xref{Special Properties}, for details."
msgstr ""

#. type: item
#: display.texi.orig:1646
#, no-wrap
msgid "isearch-open-invisible"
msgstr ""

#. type: table
#: display.texi.orig:1650
msgid "This property tells incremental search how to make an invisible overlay visible, permanently, if the final match overlaps it.  @xref{Invisible Text}."
msgstr ""

#. type: item
#: display.texi.orig:1651
#, no-wrap
msgid "isearch-open-invisible-temporary"
msgstr ""

#. type: table
#: display.texi.orig:1654
msgid "This property tells incremental search how to make an invisible overlay visible, temporarily, during the search.  @xref{Invisible Text}."
msgstr ""

#. type: item
#: display.texi.orig:1655
#, no-wrap
msgid "before-string"
msgstr ""

#. type: kindex
#: display.texi.orig:1656
#, no-wrap
msgid "before-string @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1660
msgid "This property's value is a string to add to the display at the beginning of the overlay.  The string does not appear in the buffer in any sense---only on the screen."
msgstr ""

#. type: item
#: display.texi.orig:1661
#, no-wrap
msgid "after-string"
msgstr ""

#. type: kindex
#: display.texi.orig:1662
#, no-wrap
msgid "after-string @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1666
msgid "This property's value is a string to add to the display at the end of the overlay.  The string does not appear in the buffer in any sense---only on the screen."
msgstr ""

#. type: table
#: display.texi.orig:1670
msgid "This property specifies a display spec to prepend to each non-continuation line at display-time.  @xref{Truncation}."
msgstr ""

#. type: table
#: display.texi.orig:1674
msgid "This property specifies a display spec to prepend to each continuation line at display-time.  @xref{Truncation}."
msgstr ""

#. type: item
#: display.texi.orig:1675
#, no-wrap
msgid "evaporate"
msgstr ""

#. type: kindex
#: display.texi.orig:1676
#, no-wrap
msgid "evaporate @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1681
msgid "If this property is non-@code{nil}, the overlay is deleted automatically if it becomes empty (i.e., if its length becomes zero).  If you give an empty overlay a non-@code{nil} @code{evaporate} property, that deletes it immediately."
msgstr ""

#. type: item
#: display.texi.orig:1682 display.texi.orig:5365
#, no-wrap
msgid "keymap"
msgstr ""

#. type: cindex
#: display.texi.orig:1683
#, no-wrap
msgid "keymap of character (and overlays)"
msgstr ""

#. type: kindex
#: display.texi.orig:1684
#, no-wrap
msgid "keymap @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1688
msgid "If this property is non-@code{nil}, it specifies a keymap for a portion of the text.  This keymap is used when the character after point is within the overlay, and takes precedence over most other keymaps.  @xref{Active Keymaps}."
msgstr ""

#. type: item
#: display.texi.orig:1689
#, no-wrap
msgid "local-map"
msgstr ""

#. type: kindex
#: display.texi.orig:1690
#, no-wrap
msgid "local-map @r{(overlay property)}"
msgstr ""

#. type: table
#: display.texi.orig:1694
msgid "The @code{local-map} property is similar to @code{keymap} but replaces the buffer's local map rather than augmenting existing keymaps.  This also means it has lower precedence than minor mode keymaps."
msgstr ""

#. type: Plain text
#: display.texi.orig:1703
msgid "The @code{keymap} and @code{local-map} properties do not affect a string displayed by the @code{before-string}, @code{after-string}, or @code{display} properties.  This is only relevant for mouse clicks and other mouse events that fall on the string, since point is never on the string.  To bind special mouse events for the string, assign it a @code{keymap} or @code{local-map} text property.  @xref{Special Properties}."
msgstr ""

#. type: subsection
#: display.texi.orig:1705
#, no-wrap
msgid "Searching for Overlays"
msgstr ""

#. type: cindex
#: display.texi.orig:1706
#, no-wrap
msgid "searching for overlays"
msgstr ""

#. type: cindex
#: display.texi.orig:1707
#, no-wrap
msgid "overlays, searching for"
msgstr ""

#. type: defun
#: display.texi.orig:1709
#, no-wrap
msgid "overlays-at pos &optional sorted"
msgstr ""

#. type: defun
#: display.texi.orig:1715
msgid "This function returns a list of all the overlays that cover the character at position @var{pos} in the current buffer.  If @var{sorted} is non-@code{nil}, the list is in decreasing order of priority, otherwise it is in no particular order.  An overlay contains position @var{pos} if it begins at or before @var{pos}, and ends after @var{pos}."
msgstr ""

#. type: defun
#: display.texi.orig:1718
msgid "To illustrate usage, here is a Lisp function that returns a list of the overlays that specify property @var{prop} for the character at point:"
msgstr ""

#. type: smallexample
#: display.texi.orig:1729
#, no-wrap
msgid ""
"(defun find-overlays-specifying (prop)\n"
"  (let ((overlays (overlays-at (point)))\n"
"        found)\n"
"    (while overlays\n"
"      (let ((overlay (car overlays)))\n"
"        (if (overlay-get overlay prop)\n"
"            (setq found (cons overlay found))))\n"
"      (setq overlays (cdr overlays)))\n"
"    found))\n"
msgstr ""

#. type: defun
#: display.texi.orig:1732
#, no-wrap
msgid "overlays-in beg end"
msgstr ""

#. type: defun
#: display.texi.orig:1740
msgid "This function returns a list of the overlays that overlap the region @var{beg} through @var{end}.  ``Overlap'' means that at least one character is contained within the overlay and also contained within the specified region; however, empty overlays are included in the result if they are located at @var{beg}, strictly between @var{beg} and @var{end}, or at @var{end} when @var{end} denotes the position at the end of the buffer."
msgstr ""

#. type: defun
#: display.texi.orig:1742
#, no-wrap
msgid "next-overlay-change pos"
msgstr ""

#. type: defun
#: display.texi.orig:1746
msgid "This function returns the buffer position of the next beginning or end of an overlay, after @var{pos}.  If there is none, it returns @code{(point-max)}."
msgstr ""

#. type: defun
#: display.texi.orig:1748
#, no-wrap
msgid "previous-overlay-change pos"
msgstr ""

#. type: defun
#: display.texi.orig:1752
msgid "This function returns the buffer position of the previous beginning or end of an overlay, before @var{pos}.  If there is none, it returns @code{(point-min)}."
msgstr ""

#. type: Plain text
#: display.texi.orig:1760
msgid "As an example, here's a simplified (and inefficient) version of the primitive function @code{next-single-char-property-change} (@pxref{Property Search}).  It searches forward from position @var{pos} for the next position where the value of a given property @code{prop}, as obtained from either overlays or text properties, changes."
msgstr ""

#. type: smallexample
#: display.texi.orig:1771
#, no-wrap
msgid ""
"(defun next-single-char-property-change (position prop)\n"
"  (save-excursion\n"
"    (goto-char position)\n"
"    (let ((propval (get-char-property (point) prop)))\n"
"      (while (and (not (eobp))\n"
"                  (eq (get-char-property (point) prop) propval))\n"
"        (goto-char (min (next-overlay-change (point))\n"
"                        (next-single-property-change (point) prop)))))\n"
"    (point)))\n"
msgstr ""

#. type: cindex
#: display.texi.orig:1775
#, no-wrap
msgid "size of text on display"
msgstr ""

#. type: cindex
#: display.texi.orig:1776
#, no-wrap
msgid "character width on display"
msgstr ""

#. type: Plain text
#: display.texi.orig:1781
msgid "Since not all characters have the same width, these functions let you check the width of a character.  @xref{Primitive Indent}, and @ref{Screen Lines}, for related functions."
msgstr ""

#. type: defun
#: display.texi.orig:1782
#, no-wrap
msgid "char-width char"
msgstr ""

#. type: defun
#: display.texi.orig:1788
msgid "This function returns the width in columns of the character @var{char}, if it were displayed in the current buffer (i.e., taking into account the buffer's display table, if any; @pxref{Display Tables}).  The width of a tab character is usually @code{tab-width} (@pxref{Usual Display})."
msgstr ""

#. type: defun
#: display.texi.orig:1790
#, no-wrap
msgid "string-width string"
msgstr ""

#. type: defun
#: display.texi.orig:1793
msgid "This function returns the width in columns of the string @var{string}, if it were displayed in the current buffer and the selected window."
msgstr ""

#. type: defun
#: display.texi.orig:1795
#, no-wrap
msgid "truncate-string-to-width string width &optional start-column padding ellipsis"
msgstr ""

#. type: defun
#: display.texi.orig:1798
msgid "This function returns the part of @var{string} that fits within @var{width} columns, as a new string."
msgstr ""

#. type: defun
#: display.texi.orig:1804
msgid "If @var{string} does not reach @var{width}, then the result ends where @var{string} ends.  If one multi-column character in @var{string} extends across the column @var{width}, that character is not included in the result.  Thus, the result can fall short of @var{width} but cannot go beyond it."
msgstr ""

#. type: defun
#: display.texi.orig:1810
msgid "The optional argument @var{start-column} specifies the starting column.  If this is non-@code{nil}, then the first @var{start-column} columns of the string are omitted from the value.  If one multi-column character in @var{string} extends across the column @var{start-column}, that character is not included."
msgstr ""

#. type: defun
#: display.texi.orig:1817
msgid "The optional argument @var{padding}, if non-@code{nil}, is a padding character added at the beginning and end of the result string, to extend it to exactly @var{width} columns.  The padding character is used at the end of the result if it falls short of @var{width}.  It is also used at the beginning of the result if one multi-column character in @var{string} extends across the column @var{start-column}."
msgstr ""

#. type: defun
#: display.texi.orig:1824
msgid "If @var{ellipsis} is non-@code{nil}, it should be a string which will replace the end of @var{string} (including any padding) if it extends beyond @var{width}, unless the display width of @var{string} is equal to or less than the display width of @var{ellipsis}.  If @var{ellipsis} is non-@code{nil} and not a string, it stands for @code{\"...\"}."
msgstr ""

#. type: example
#: display.texi.orig:1830
#, no-wrap
msgid ""
"(truncate-string-to-width \"\\tab\\t\" 12 4)\n"
"     @result{} \"ab\"\n"
"(truncate-string-to-width \"\\tab\\t\" 12 4 ?\\s)\n"
"     @result{} \"    ab  \"\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:1838
msgid "The following function returns the size in pixels of text as if it were displayed in a given window.  This function is used by @code{fit-window-to-buffer} (@pxref{Resizing Windows}) and @code{fit-frame-to-buffer} (@pxref{Size and Position}) to make a window exactly as large as the text it contains."
msgstr ""

#. type: defun
#: display.texi.orig:1839
#, no-wrap
msgid "window-text-pixel-size &optional window from to x-limit y-limit mode-and-header-line"
msgstr ""

#. type: defun
#: display.texi.orig:1844
msgid "This function returns the size of the text of @var{window}'s buffer in pixels.  @var{window} must be a live window and defaults to the selected one.  The return value is a cons of the maximum pixel-width of any text line and the maximum pixel-height of all text lines."
msgstr ""

#. type: defun
#: display.texi.orig:1853
msgid "The optional argument @var{from}, if non-@code{nil}, specifies the first text position to consider and defaults to the minimum accessible position of the buffer.  If @var{from} is @code{t}, it uses the minimum accessible position that is not a newline character.  The optional argument @var{to}, if non-@code{nil}, specifies the last text position to consider and defaults to the maximum accessible position of the buffer.  If @var{to} is @code{t}, it uses the maximum accessible position that is not a newline character."
msgstr ""

#. type: defun
#: display.texi.orig:1864
msgid "The optional argument @var{x-limit}, if non-@code{nil}, specifies the maximum pixel-width that can be returned.  @var{x-limit} @code{nil} or omitted, means to use the pixel-width of @var{window}'s body (@pxref{Window Sizes}); this is useful when the caller does not intend to change the width of @var{window}.  Otherwise, the caller should specify here the maximum width @var{window}'s body may assume.  Text whose x-coordinate is beyond @var{x-limit} is ignored.  Since calculating the width of long lines can take some time, it's always a good idea to make this argument as small as needed; in particular, if the buffer might contain long lines that will be truncated anyway."
msgstr ""

#. type: defun
#: display.texi.orig:1871
msgid "The optional argument @var{y-limit}, if non-@code{nil}, specifies the maximum pixel-height that can be returned.  Text lines whose y-coordinate is beyond @var{y-limit} are ignored.  Since calculating the pixel-height of a large buffer can take some time, it makes sense to specify this argument; in particular, if the caller does not know the size of the buffer."
msgstr ""

#. type: defun
#: display.texi.orig:1878
msgid "The optional argument @var{mode-and-header-line} @code{nil} or omitted means to not include the height of the mode- or header-line of @var{window} in the return value.  If it is either the symbol @code{mode-line} or @code{header-line}, include only the height of that line, if present, in the return value.  If it is @code{t}, include the height of both, if present, in the return value."
msgstr ""

#. type: cindex
#: display.texi.orig:1883
#, no-wrap
msgid "line height"
msgstr ""

#. type: cindex
#: display.texi.orig:1884
#, no-wrap
msgid "height of a line"
msgstr ""

#. type: Plain text
#: display.texi.orig:1889
msgid "The total height of each display line consists of the height of the contents of the line, plus optional additional vertical line spacing above or below the display line."
msgstr ""

#. type: Plain text
#: display.texi.orig:1896
msgid "The height of the line contents is the maximum height of any character or image on that display line, including the final newline if there is one.  (A display line that is continued doesn't include a final newline.)  That is the default line height, if you do nothing to specify a greater height.  (In the most common case, this equals the height of the default frame font.)"
msgstr ""

#. type: Plain text
#: display.texi.orig:1901
msgid "There are several ways to explicitly specify a larger line height, either by specifying an absolute height for the display line, or by specifying vertical space.  However, no matter what you specify, the actual line height can never be less than the default."
msgstr ""

#. type: kindex
#: display.texi.orig:1902
#, no-wrap
msgid "line-height @r{(text property)}"
msgstr ""

#. type: Plain text
#: display.texi.orig:1906
msgid "A newline can have a @code{line-height} text or overlay property that controls the total height of the display line ending in that newline."
msgstr ""

#. type: Plain text
#: display.texi.orig:1911
msgid "If the property value is @code{t}, the newline character has no effect on the displayed height of the line---the visible contents alone determine the height.  This is useful for tiling small images (or image slices) without adding blank areas between the images."
msgstr ""

#. type: Plain text
#: display.texi.orig:1918
msgid "If the property value is a list of the form @code{(@var{height} @var{total})}, that adds extra space @emph{below} the display line.  First Emacs uses @var{height} as a height spec to control extra space @emph{above} the line; then it adds enough space @emph{below} the line to bring the total line height up to @var{total}.  In this case, the other ways to specify the line spacing are ignored."
msgstr ""

#. type: cindex
#: display.texi.orig:1919
#, no-wrap
msgid "height spec"
msgstr ""

#. type: Plain text
#: display.texi.orig:1923
msgid "Any other kind of property value is a height spec, which translates into a number---the specified line height.  There are several ways to write a height spec; here's how each of them translates into a number:"
msgstr ""

#. type: var{#1}
#: display.texi.orig:1925
#, no-wrap
msgid "integer"
msgstr ""

#. type: table
#: display.texi.orig:1927
msgid "If the height spec is a positive integer, the height value is that integer."
msgstr ""

#. type: var{#1}
#: display.texi.orig:1927
#, no-wrap
msgid "float"
msgstr ""

#. type: table
#: display.texi.orig:1930
msgid "If the height spec is a float, @var{float}, the numeric height value is @var{float} times the frame's default line height."
msgstr ""

#. type: item
#: display.texi.orig:1930
#, no-wrap
msgid "(@var{face} . @var{ratio})"
msgstr ""

#. type: table
#: display.texi.orig:1935
msgid "If the height spec is a cons of the format shown, the numeric height is @var{ratio} times the height of face @var{face}.  @var{ratio} can be any type of number, or @code{nil} which means a ratio of 1.  If @var{face} is @code{t}, it refers to the current face."
msgstr ""

#. type: item
#: display.texi.orig:1935
#, no-wrap
msgid "(nil . @var{ratio})"
msgstr ""

#. type: table
#: display.texi.orig:1938
msgid "If the height spec is a cons of the format shown, the numeric height is @var{ratio} times the height of the contents of the line."
msgstr ""

#. type: Plain text
#: display.texi.orig:1944
msgid "Thus, any valid height spec determines the height in pixels, one way or another.  If the line contents' height is less than that, Emacs adds extra vertical space above the line to achieve the specified total height."
msgstr ""

#. type: Plain text
#: display.texi.orig:1949
msgid "If you don't specify the @code{line-height} property, the line's height consists of the contents' height plus the line spacing.  There are several ways to specify the line spacing for different parts of Emacs text."
msgstr ""

#. type: Plain text
#: display.texi.orig:1957
msgid "On graphical terminals, you can specify the line spacing for all lines in a frame, using the @code{line-spacing} frame parameter (@pxref{Layout Parameters}).  However, if the default value of @code{line-spacing} is non-@code{nil}, it overrides the frame's @code{line-spacing} parameter.  An integer specifies the number of pixels put below lines.  A floating-point number specifies the spacing relative to the frame's default line height."
msgstr ""

#. type: vindex
#: display.texi.orig:1958
#, no-wrap
msgid "line-spacing"
msgstr ""

#. type: Plain text
#: display.texi.orig:1964
msgid "You can specify the line spacing for all lines in a buffer via the buffer-local @code{line-spacing} variable.  An integer specifies the number of pixels put below lines.  A floating-point number specifies the spacing relative to the default frame line height.  This overrides line spacings specified for the frame."
msgstr ""

#. type: kindex
#: display.texi.orig:1965
#, no-wrap
msgid "line-spacing @r{(text property)}"
msgstr ""

#. type: Plain text
#: display.texi.orig:1970
msgid "Finally, a newline can have a @code{line-spacing} text or overlay property that overrides the default frame line spacing and the buffer local @code{line-spacing} variable, for the display line ending in that newline."
msgstr ""

#. type: Plain text
#: display.texi.orig:1976
msgid "One way or another, these mechanisms specify a Lisp value for the spacing of each line.  The value is a height spec, and it translates into a Lisp value as described above.  However, in this case the numeric height value specifies the line spacing, rather than the line height."
msgstr ""

#. type: Plain text
#: display.texi.orig:1978
msgid "On text terminals, the line spacing cannot be altered."
msgstr ""

#. type: cindex
#: display.texi.orig:1981
#, no-wrap
msgid "faces"
msgstr ""

#. type: Plain text
#: display.texi.orig:1987
msgid "A @dfn{face} is a collection of graphical attributes for displaying text: font, foreground color, background color, optional underlining, etc.  Faces control how Emacs displays text in buffers, as well as other parts of the frame such as the mode line."
msgstr ""

#. type: cindex
#: display.texi.orig:1988
#, no-wrap
msgid "anonymous face"
msgstr ""

#. type: Plain text
#: display.texi.orig:1995
msgid "One way to represent a face is as a property list of attributes, like @code{(:foreground \"red\" :weight bold)}.  Such a list is called an @dfn{anonymous face}.  For example, you can assign an anonymous face as the value of the @code{face} text property, and Emacs will display the underlying text with the specified attributes.  @xref{Special Properties}."
msgstr ""

#. type: cindex
#: display.texi.orig:1996
#, no-wrap
msgid "face name"
msgstr ""

#. type: Plain text
#: display.texi.orig:2003
msgid "More commonly, a face is referred to via a @dfn{face name}: a Lisp symbol associated with a set of face attributes@footnote{For backward compatibility, you can also use a string to specify a face name; that is equivalent to a Lisp symbol with the same name.}.  Named faces are defined using the @code{defface} macro (@pxref{Defining Faces}).  Emacs comes with several standard named faces (@pxref{Basic Faces})."
msgstr ""

#. type: Plain text
#: display.texi.orig:2009
msgid "Many parts of Emacs required named faces, and do not accept anonymous faces.  These include the functions documented in @ref{Attribute Functions}, and the variable @code{font-lock-keywords} (@pxref{Search-based Fontification}).  Unless otherwise stated, we will use the term @dfn{face} to refer only to named faces."
msgstr ""

#. type: defun
#: display.texi.orig:2010
#, no-wrap
msgid "facep object"
msgstr ""

#. type: defun
#: display.texi.orig:2014
msgid "This function returns a non-@code{nil} value if @var{object} is a named face: a Lisp symbol or string which serves as a face name.  Otherwise, it returns @code{nil}."
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:2033 display.texi.orig:2034
#, no-wrap
msgid "Face Attributes"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "What is in a face?"
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:2265 display.texi.orig:2266
#, no-wrap
msgid "Defining Faces"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "How to define a face."
msgstr ""

#. type: node
#: display.texi.orig:2031 display.texi.orig:2440
#, no-wrap
msgid "Attribute Functions"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Functions to examine and set face attributes."
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:2642 display.texi.orig:2643
#, no-wrap
msgid "Displaying Faces"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "How Emacs combines the faces specified for a character."
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:2699 display.texi.orig:2700
#, no-wrap
msgid "Face Remapping"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Remapping faces to alternative definitions."
msgstr ""

#. type: node
#: display.texi.orig:2031 display.texi.orig:2813
#, no-wrap
msgid "Face Functions"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "How to define and examine faces."
msgstr ""

#. type: node
#: display.texi.orig:2031 display.texi.orig:2862
#, no-wrap
msgid "Auto Faces"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Hook for automatic face assignment."
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:2897 display.texi.orig:2898
#, no-wrap
msgid "Basic Faces"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Faces that are defined by default."
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:2954 display.texi.orig:2955
#, no-wrap
msgid "Font Selection"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Finding the best available font for a face."
msgstr ""

#. type: node
#: display.texi.orig:2031 display.texi.orig:3064
#, no-wrap
msgid "Font Lookup"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Looking up the names of available fonts and information about them."
msgstr ""

#. type: subsection
#: display.texi.orig:2031 display.texi.orig:3123 display.texi.orig:3124
#, no-wrap
msgid "Fontsets"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "A fontset is a collection of fonts that handle a range of character sets."
msgstr ""

#. type: node
#: display.texi.orig:2031 display.texi.orig:3274
#, no-wrap
msgid "Low-Level Font"
msgstr ""

#. type: menuentry
#: display.texi.orig:2031
msgid "Lisp representation for character display fonts."
msgstr ""

#. type: cindex
#: display.texi.orig:2035
#, no-wrap
msgid "face attributes"
msgstr ""

#. type: Plain text
#: display.texi.orig:2040
msgid "@dfn{Face attributes} determine the visual appearance of a face.  The following table lists all the face attributes, their possible values, and their effects."
msgstr ""

#. type: Plain text
#: display.texi.orig:2048
msgid "Apart from the values given below, each face attribute can have the value @code{unspecified}.  This special value means that the face doesn't specify that attribute directly.  An @code{unspecified} attribute tells Emacs to refer instead to a parent face (see the description @code{:inherit} attribute below); or, failing that, to an underlying face (@pxref{Displaying Faces}).  The @code{default} face must specify all attributes."
msgstr ""

#. type: Plain text
#: display.texi.orig:2052
msgid "Some of these attributes are meaningful only on certain kinds of displays.  If your display cannot handle a certain attribute, the attribute is ignored."
msgstr ""

#. type: item
#: display.texi.orig:2054 display.texi.orig:3324
#, no-wrap
msgid ":family"
msgstr ""

#. type: table
#: display.texi.orig:2059
msgid "Font family or fontset (a string).  @xref{Fonts,,, emacs, The GNU Emacs Manual}, for more information about font families.  The function @code{font-family-list} (see below) returns a list of available family names.  @xref{Fontsets}, for information about fontsets."
msgstr ""

#. type: itemx
#: display.texi.orig:2060 display.texi.orig:3325
#, no-wrap
msgid ":foundry"
msgstr ""

#. type: table
#: display.texi.orig:2064
msgid "The name of the @dfn{font foundry} for the font family specified by the @code{:family} attribute (a string).  @xref{Fonts,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: itemx
#: display.texi.orig:2065 display.texi.orig:3328
#, no-wrap
msgid ":width"
msgstr ""

#. type: table
#: display.texi.orig:2070
msgid "Relative character width.  This should be one of the symbols @code{ultra-condensed}, @code{extra-condensed}, @code{condensed}, @code{semi-condensed}, @code{normal}, @code{semi-expanded}, @code{expanded}, @code{extra-expanded}, or @code{ultra-expanded}."
msgstr ""

#. type: item
#: display.texi.orig:2071
#, no-wrap
msgid ":height"
msgstr ""

#. type: table
#: display.texi.orig:2074
msgid "The height of the font.  In the simplest case, this is an integer in units of 1/10 point."
msgstr ""

#. type: table
#: display.texi.orig:2083
msgid "The value can also be floating point or a function, which specifies the height relative to an @dfn{underlying face} (@pxref{Displaying Faces}).  A floating-point value specifies the amount by which to scale the height of the underlying face.  A function value is called with one argument, the height of the underlying face, and returns the height of the new face.  If the function is passed an integer argument, it must return an integer."
msgstr ""

#. type: table
#: display.texi.orig:2086
msgid "The height of the default face must be specified using an integer; floating point and function values are not allowed."
msgstr ""

#. type: itemx
#: display.texi.orig:2087 display.texi.orig:3326
#, no-wrap
msgid ":weight"
msgstr ""

#. type: table
#: display.texi.orig:2095
msgid "Font weight---one of the symbols (from densest to faintest)  @code{ultra-bold}, @code{extra-bold}, @code{bold}, @code{semi-bold}, @code{normal}, @code{semi-light}, @code{light}, @code{extra-light}, or @code{ultra-light}.  On text terminals which support variable-brightness text, any weight greater than normal is displayed as extra bright, and any weight less than normal is displayed as half-bright."
msgstr ""

#. type: cindex
#: display.texi.orig:2096
#, no-wrap
msgid "italic text"
msgstr ""

#. type: itemx
#: display.texi.orig:2097 display.texi.orig:3327
#, no-wrap
msgid ":slant"
msgstr ""

#. type: table
#: display.texi.orig:2102
msgid "Font slant---one of the symbols @code{italic}, @code{oblique}, @code{normal}, @code{reverse-italic}, or @code{reverse-oblique}.  On text terminals that support variable-brightness text, slanted text is displayed as half-bright."
msgstr ""

#. type: item
#: display.texi.orig:2103
#, no-wrap
msgid ":foreground"
msgstr ""

#. type: table
#: display.texi.orig:2108
msgid "Foreground color, a string.  The value can be a system-defined color name, or a hexadecimal color specification.  @xref{Color Names}.  On black-and-white displays, certain shades of gray are implemented by stipple patterns."
msgstr ""

#. type: item
#: display.texi.orig:2109
#, no-wrap
msgid ":distant-foreground"
msgstr ""

#. type: table
#: display.texi.orig:2117
msgid "Alternative foreground color, a string.  This is like @code{:foreground} but the color is only used as a foreground when the background color is near to the foreground that would have been used.  This is useful for example when marking text (i.e. the region face).  If the text has a foreground that is visible with the region face, that foreground is used.  If the foreground is near the region face background, @code{:distant-foreground} is used instead so the text is readable."
msgstr ""

#. type: item
#: display.texi.orig:2118
#, no-wrap
msgid ":background"
msgstr ""

#. type: table
#: display.texi.orig:2121
msgid "Background color, a string.  The value can be a system-defined color name, or a hexadecimal color specification.  @xref{Color Names}."
msgstr ""

#. type: cindex
#: display.texi.orig:2122
#, no-wrap
msgid "underlined text"
msgstr ""

#. type: item
#: display.texi.orig:2123
#, no-wrap
msgid ":underline"
msgstr ""

#. type: table
#: display.texi.orig:2126
msgid "Whether or not characters should be underlined, and in what way.  The possible values of the @code{:underline} attribute are:"
msgstr ""

#. type: item
#: display.texi.orig:2128 display.texi.orig:2166 display.texi.orig:3556
#: display.texi.orig:6321 display.texi.orig:6354 display.texi.orig:6498
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: display.texi.orig:2130
msgid "Don't underline."
msgstr ""

#. type: table
#: display.texi.orig:2133
msgid "Underline with the foreground color of the face."
msgstr ""

#. type: var{#1}
#: display.texi.orig:2134 display.texi.orig:2172
#, no-wrap
msgid "color"
msgstr ""

#. type: table
#: display.texi.orig:2136
msgid "Underline in color @var{color}, a string specifying a color."
msgstr ""

#. type: code{#1}
#: display.texi.orig:2137
#, no-wrap
msgid "(:color @var{color} :style @var{style})"
msgstr ""

#. type: table
#: display.texi.orig:2144
msgid "@var{color} is either a string, or the symbol @code{foreground-color}, meaning the foreground color of the face.  Omitting the attribute @code{:color} means to use the foreground color of the face.  @var{style} should be a symbol @code{line} or @code{wave}, meaning to use a straight or wavy line.  Omitting the attribute @code{:style} means to use a straight line."
msgstr ""

#. type: cindex
#: display.texi.orig:2146
#, no-wrap
msgid "overlined text"
msgstr ""

#. type: item
#: display.texi.orig:2147
#, no-wrap
msgid ":overline"
msgstr ""

#. type: table
#: display.texi.orig:2152
msgid "Whether or not characters should be overlined, and in what color.  If the value is @code{t}, overlining uses the foreground color of the face.  If the value is a string, overlining uses that color.  The value @code{nil} means do not overline."
msgstr ""

#. type: cindex
#: display.texi.orig:2153
#, no-wrap
msgid "strike-through text"
msgstr ""

#. type: item
#: display.texi.orig:2154
#, no-wrap
msgid ":strike-through"
msgstr ""

#. type: table
#: display.texi.orig:2157
msgid "Whether or not characters should be strike-through, and in what color.  The value is used like that of @code{:overline}."
msgstr ""

#. type: cindex
#: display.texi.orig:2158
#, no-wrap
msgid "2D box"
msgstr ""

#. type: cindex
#: display.texi.orig:2159
#, no-wrap
msgid "3D box"
msgstr ""

#. type: item
#: display.texi.orig:2160
#, no-wrap
msgid ":box"
msgstr ""

#. type: table
#: display.texi.orig:2164
msgid "Whether or not a box should be drawn around characters, its color, the width of the box lines, and 3D appearance.  Here are the possible values of the @code{:box} attribute, and what they mean:"
msgstr ""

#. type: table
#: display.texi.orig:2168
msgid "Don't draw a box."
msgstr ""

#. type: table
#: display.texi.orig:2171
msgid "Draw a box with lines of width 1, in the foreground color."
msgstr ""

#. type: table
#: display.texi.orig:2174
msgid "Draw a box with lines of width 1, in color @var{color}."
msgstr ""

#. type: code{#1}
#: display.texi.orig:2175
#, no-wrap
msgid "(:line-width @var{width} :color @var{color} :style @var{style})"
msgstr ""

#. type: table
#: display.texi.orig:2181
msgid "This way you can explicitly specify all aspects of the box.  The value @var{width} specifies the width of the lines to draw; it defaults to 1.  A negative width @var{-n} means to draw a line of width @var{n} that occupies the space of the underlying text, thus avoiding any increase in the character height or width."
msgstr ""

#. type: table
#: display.texi.orig:2185
msgid "The value @var{color} specifies the color to draw with.  The default is the foreground color of the face for simple boxes, and the background color of the face for 3D boxes."
msgstr ""

#. type: table
#: display.texi.orig:2191
msgid "The value @var{style} specifies whether to draw a 3D box.  If it is @code{released-button}, the box looks like a 3D button that is not being pressed.  If it is @code{pressed-button}, the box looks like a 3D button that is being pressed.  If it is @code{nil} or omitted, a plain 2D box is used."
msgstr ""

#. type: item
#: display.texi.orig:2193
#, no-wrap
msgid ":inverse-video"
msgstr ""

#. type: table
#: display.texi.orig:2196
msgid "Whether or not characters should be displayed in inverse video.  The value should be @code{t} (yes) or @code{nil} (no)."
msgstr ""

#. type: item
#: display.texi.orig:2197
#, no-wrap
msgid ":stipple"
msgstr ""

#. type: table
#: display.texi.orig:2199
msgid "The background stipple, a bitmap."
msgstr ""

#. type: table
#: display.texi.orig:2203
msgid "The value can be a string; that should be the name of a file containing external-format X bitmap data.  The file is found in the directories listed in the variable @code{x-bitmap-file-path}."
msgstr ""

#. type: table
#: display.texi.orig:2211
msgid "Alternatively, the value can specify the bitmap directly, with a list of the form @code{(@var{width} @var{height} @var{data})}.  Here, @var{width} and @var{height} specify the size in pixels, and @var{data} is a string containing the raw bits of the bitmap, row by row.  Each row occupies @math{(@var{width} + 7) / 8} consecutive bytes in the string (which should be a unibyte string for best results).  This means that each row always occupies at least one whole byte."
msgstr ""

#. type: table
#: display.texi.orig:2213
msgid "If the value is @code{nil}, that means use no stipple pattern."
msgstr ""

#. type: table
#: display.texi.orig:2216
msgid "Normally you do not need to set the stipple attribute, because it is used automatically to handle certain shades of gray."
msgstr ""

#. type: item
#: display.texi.orig:2217
#, no-wrap
msgid ":font"
msgstr ""

#. type: table
#: display.texi.orig:2221
msgid "The font used to display the face.  Its value should be a font object.  @xref{Low-Level Font}, for information about font objects, font specs, and font entities."
msgstr ""

#. type: table
#: display.texi.orig:2232
msgid "When specifying this attribute using @code{set-face-attribute} (@pxref{Attribute Functions}), you may also supply a font spec, a font entity, or a string.  Emacs converts such values to an appropriate font object, and stores that font object as the actual attribute value.  If you specify a string, the contents of the string should be a font name (@pxref{Fonts,,, emacs, The GNU Emacs Manual}); if the font name is an XLFD containing wildcards, Emacs chooses the first font matching those wildcards.  Specifying this attribute also changes the values of the @code{:family}, @code{:foundry}, @code{:width}, @code{:height}, @code{:weight}, and @code{:slant} attributes."
msgstr ""

#. type: cindex
#: display.texi.orig:2233
#, no-wrap
msgid "inheritance, for faces"
msgstr ""

#. type: item
#: display.texi.orig:2234
#, no-wrap
msgid ":inherit"
msgstr ""

#. type: table
#: display.texi.orig:2241
msgid "The name of a face from which to inherit attributes, or a list of face names.  Attributes from inherited faces are merged into the face like an underlying face would be, with higher priority than underlying faces (@pxref{Displaying Faces}).  If a list of faces is used, attributes from faces earlier in the list override those from later faces."
msgstr ""

#. type: defun
#: display.texi.orig:2243
#, no-wrap
msgid "font-family-list &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2247
msgid "This function returns a list of available font family names.  The optional argument @var{frame} specifies the frame on which the text is to be displayed; if it is @code{nil}, the selected frame is used."
msgstr ""

#. type: defopt
#: display.texi.orig:2249
#, no-wrap
msgid "underline-minimum-offset"
msgstr ""

#. type: defopt
#: display.texi.orig:2252
msgid "This variable specifies the minimum distance between the baseline and the underline, in pixels, when displaying underlined text."
msgstr ""

#. type: defopt
#: display.texi.orig:2254
#, no-wrap
msgid "x-bitmap-file-path"
msgstr ""

#. type: defopt
#: display.texi.orig:2257
msgid "This variable specifies a list of directories for searching for bitmap files, for the @code{:stipple} attribute."
msgstr ""

#. type: defun
#: display.texi.orig:2259
#, no-wrap
msgid "bitmap-spec-p object"
msgstr ""

#. type: defun
#: display.texi.orig:2263
msgid "This returns @code{t} if @var{object} is a valid bitmap specification, suitable for use with @code{:stipple} (see above).  It returns @code{nil} otherwise."
msgstr ""

#. type: cindex
#: display.texi.orig:2267
#, no-wrap
msgid "defining faces"
msgstr ""

#. type: cindex
#: display.texi.orig:2269
#, no-wrap
msgid "face spec"
msgstr ""

#. type: Plain text
#: display.texi.orig:2276
msgid "The usual way to define a face is through the @code{defface} macro.  This macro associates a face name (a symbol) with a default @dfn{face spec}.  A face spec is a construct which specifies what attributes a face should have on any given terminal; for example, a face spec might specify one foreground color on high-color terminals, and a different foreground color on low-color terminals."
msgstr ""

#. type: Plain text
#: display.texi.orig:2281
msgid "People are sometimes tempted to create a variable whose value is a face name.  In the vast majority of cases, this is not necessary; the usual procedure is to define a face with @code{defface}, and then use its name directly."
msgstr ""

#. type: defmac
#: display.texi.orig:2282
#, no-wrap
msgid "defface face spec doc [keyword value]@dots{}"
msgstr ""

#. type: defmac
#: display.texi.orig:2289
msgid "This macro declares @var{face} as a named face whose default face spec is given by @var{spec}.  You should not quote the symbol @var{face}, and it should not end in @samp{-face} (that would be redundant).  The argument @var{doc} is a documentation string for the face.  The additional @var{keyword} arguments have the same meanings as in @code{defgroup} and @code{defcustom} (@pxref{Common Keywords})."
msgstr ""

#. type: defmac
#: display.texi.orig:2292
msgid "If @var{face} already has a default face spec, this macro does nothing."
msgstr ""

#. type: defmac
#: display.texi.orig:2301
msgid "The default face spec determines @var{face}'s appearance when no customizations are in effect (@pxref{Customization}).  If @var{face} has already been customized (via Custom themes or via customizations read from the init file), its appearance is determined by the custom face spec(s), which override the default face spec @var{spec}.  However, if the customizations are subsequently removed, the appearance of @var{face} will again be determined by its default face spec."
msgstr ""

#. type: defmac
#: display.texi.orig:2306
msgid "As an exception, if you evaluate a @code{defface} form with @kbd{C-M-x} in Emacs Lisp mode (@code{eval-defun}), a special feature of @code{eval-defun} overrides any custom face specs on the face, causing the face to reflect exactly what the @code{defface} says."
msgstr ""

#. type: defmac
#: display.texi.orig:2310
msgid "The @var{spec} argument is a @dfn{face spec}, which states how the face should appear on different kinds of terminals.  It should be an alist whose elements each have the form"
msgstr ""

#. type: example
#: display.texi.orig:2313
#, no-wrap
msgid "(@var{display} . @var{plist})\n"
msgstr ""

#. type: defmac
#: display.texi.orig:2320
msgid "@var{display} specifies a class of terminals (see below).  @var{plist} is a property list of face attributes and their values, specifying how the face appears on such terminals.  For backward compatibility, you can also write an element as @code{(@var{display} @var{plist})}."
msgstr ""

#. type: defmac
#: display.texi.orig:2326
msgid "The @var{display} part of an element of @var{spec} determines which terminals the element matches.  If more than one element of @var{spec} matches a given terminal, the first element that matches is the one used for that terminal.  There are three possibilities for @var{display}:"
msgstr ""

#. type: item
#: display.texi.orig:2328 display.texi.orig:2914
#, no-wrap
msgid "default"
msgstr ""

#. type: table
#: display.texi.orig:2333
msgid "This element of @var{spec} doesn't match any terminal; instead, it specifies defaults that apply to all terminals.  This element, if used, must be the first element of @var{spec}.  Each of the following elements can override any or all of these defaults."
msgstr ""

#. type: table
#: display.texi.orig:2338
msgid "This element of @var{spec} matches all terminals.  Therefore, any subsequent elements of @var{spec} are never used.  Normally @code{t} is used in the last (or only) element of @var{spec}."
msgstr ""

#. type: table
#: display.texi.orig:2345
msgid "If @var{display} is a list, each element should have the form @code{(@var{characteristic} @var{value}@dots{})}.  Here @var{characteristic} specifies a way of classifying terminals, and the @var{value}s are possible classifications which @var{display} should apply to.  Here are the possible values of @var{characteristic}:"
msgstr ""

#. type: item
#: display.texi.orig:2347 display.texi.orig:5372
#, no-wrap
msgid "type"
msgstr ""

#. type: table
#: display.texi.orig:2352
msgid "The kind of window system the terminal uses---either @code{graphic} (any graphics-capable display), @code{x}, @code{pc} (for the MS-DOS console), @code{w32} (for MS Windows 9X/NT/2K/XP), or @code{tty} (a non-graphics-capable display).  @xref{Window Systems, window-system}."
msgstr ""

#. type: item
#: display.texi.orig:2353
#, no-wrap
msgid "class"
msgstr ""

#. type: table
#: display.texi.orig:2356
msgid "What kinds of colors the terminal supports---either @code{color}, @code{grayscale}, or @code{mono}."
msgstr ""

#. type: item
#: display.texi.orig:2357
#, no-wrap
msgid "background"
msgstr ""

#. type: table
#: display.texi.orig:2359
msgid "The kind of background---either @code{light} or @code{dark}."
msgstr ""

#. type: item
#: display.texi.orig:2360
#, no-wrap
msgid "min-colors"
msgstr ""

#. type: table
#: display.texi.orig:2364
msgid "An integer that represents the minimum number of colors the terminal should support.  This matches a terminal if its @code{display-color-cells} value is at least the specified integer."
msgstr ""

#. type: item
#: display.texi.orig:2365
#, no-wrap
msgid "supports"
msgstr ""

#. type: table
#: display.texi.orig:2370
msgid "Whether or not the terminal can display the face attributes given in @var{value}@dots{} (@pxref{Face Attributes}).  @xref{Display Face Attribute Testing}, for more information on exactly how this testing is done."
msgstr ""

#. type: table
#: display.texi.orig:2378
msgid "If an element of @var{display} specifies more than one @var{value} for a given @var{characteristic}, any of those values is acceptable.  If @var{display} has more than one element, each element should specify a different @var{characteristic}; then @emph{each} characteristic of the terminal must match one of the @var{value}s specified for it in @var{display}."
msgstr ""

#. type: Plain text
#: display.texi.orig:2383
msgid "For example, here's the definition of the standard face @code{highlight}:"
msgstr ""

#. type: example
#: display.texi.orig:2399
#, no-wrap
msgid ""
"(defface highlight\n"
"  '((((class color) (min-colors 88) (background light))\n"
"     :background \"darkseagreen2\")\n"
"    (((class color) (min-colors 88) (background dark))\n"
"     :background \"darkolivegreen\")\n"
"    (((class color) (min-colors 16) (background light))\n"
"     :background \"darkseagreen2\")\n"
"    (((class color) (min-colors 16) (background dark))\n"
"     :background \"darkolivegreen\")\n"
"    (((class color) (min-colors 8))\n"
"     :background \"green\" :foreground \"black\")\n"
"    (t :inverse-video t))\n"
"  \"Basic face for highlighting.\"\n"
"  :group 'basic-faces)\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:2410
msgid "Internally, Emacs stores each face's default spec in its @code{face-defface-spec} symbol property (@pxref{Symbol Properties}).  The @code{saved-face} property stores any face spec saved by the user using the customization buffer; the @code{customized-face} property stores the face spec customized for the current session, but not saved; and the @code{theme-face} property stores an alist associating the active customization settings and Custom themes with the face specs for that face.  The face's documentation string is stored in the @code{face-documentation} property."
msgstr ""

#. type: Plain text
#: display.texi.orig:2418
msgid "Normally, a face is declared just once, using @code{defface}, and any further changes to its appearance are applied using the Customize framework (e.g., via the Customize user interface or via the @code{custom-set-faces} function; @pxref{Applying Customizations}), or by face remapping (@pxref{Face Remapping}).  In the rare event that you need to change a face spec directly from Lisp, you can use the @code{face-spec-set} function."
msgstr ""

#. type: defun
#: display.texi.orig:2419
#, no-wrap
msgid "face-spec-set face spec &optional spec-type"
msgstr ""

#. type: defun
#: display.texi.orig:2423
msgid "This function applies @var{spec} as a face spec for @code{face}.  @var{spec} should be a face spec, as described in the above documentation for @code{defface}."
msgstr ""

#. type: defun
#: display.texi.orig:2426
msgid "This function also defines @var{face} as a valid face name if it is not already one, and (re)calculates its attributes on existing frames."
msgstr ""

#. type: cindex
#: display.texi.orig:2427
#, no-wrap
msgid "override spec @r{(for a face)}"
msgstr ""

#. type: defun
#: display.texi.orig:2438
msgid "The argument @var{spec-type} determines which spec to set.  If it is @code{nil} or @code{face-override-spec}, this function sets the @dfn{override spec}, which overrides over all other face specs on @var{face}.  If it is @code{customized-face} or @code{saved-face}, this function sets the customized spec or the saved custom spec.  If it is @code{face-defface-spec}, this function sets the default face spec (the same one set by @code{defface}).  If it is @code{reset}, this function clears out all customization specs and override specs from @var{face} (in this case, the value of @var{spec} is ignored).  Any other value of @var{spec-type} is reserved for internal use."
msgstr ""

#. type: subsection
#: display.texi.orig:2441
#, no-wrap
msgid "Face Attribute Functions"
msgstr ""

#. type: cindex
#: display.texi.orig:2442
#, no-wrap
msgid "face attributes, access and modification"
msgstr ""

#. type: Plain text
#: display.texi.orig:2446
msgid "This section describes functions for directly accessing and modifying the attributes of a named face."
msgstr ""

#. type: defun
#: display.texi.orig:2447
#, no-wrap
msgid "face-attribute face attribute &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2450
msgid "This function returns the value of the @var{attribute} attribute for @var{face} on @var{frame}."
msgstr ""

#. type: defun
#: display.texi.orig:2456
msgid "If @var{frame} is @code{nil}, that means the selected frame (@pxref{Input Focus}).  If @var{frame} is @code{t}, this function returns the value of the specified attribute for newly-created frames (this is normally @code{unspecified}, unless you have specified some value using @code{set-face-attribute}; see below)."
msgstr ""

#. type: defun
#: display.texi.orig:2466
msgid "If @var{inherit} is @code{nil}, only attributes directly defined by @var{face} are considered, so the return value may be @code{unspecified}, or a relative value.  If @var{inherit} is non-@code{nil}, @var{face}'s definition of @var{attribute} is merged with the faces specified by its @code{:inherit} attribute; however the return value may still be @code{unspecified} or relative.  If @var{inherit} is a face or a list of faces, then the result is further merged with that face (or faces), until it becomes specified and absolute."
msgstr ""

#. type: defun
#: display.texi.orig:2471
msgid "To ensure that the return value is always specified and absolute, use a value of @code{default} for @var{inherit}; this will resolve any unspecified or relative values by merging with the @code{default} face (which is always completely specified)."
msgstr ""

#. type: defun
#: display.texi.orig:2473
msgid "For example,"
msgstr ""

#. type: example
#: display.texi.orig:2477
#, no-wrap
msgid ""
"(face-attribute 'bold :weight)\n"
"     @result{} bold\n"
msgstr ""

#. type: defun
#: display.texi.orig:2481
#, no-wrap
msgid "face-attribute-relative-p attribute value"
msgstr ""

#. type: defun
#: display.texi.orig:2487
msgid "This function returns non-@code{nil} if @var{value}, when used as the value of the face attribute @var{attribute}, is relative.  This means it would modify, rather than completely override, any value that comes from a subsequent face in the face list or that is inherited from another face."
msgstr ""

#. type: defun
#: display.texi.orig:2490
msgid "@code{unspecified} is a relative value for all attributes.  For @code{:height}, floating point and function values are also relative."
msgstr ""

#. type: defun
#: display.texi.orig:2492
msgid "For example:"
msgstr ""

#. type: example
#: display.texi.orig:2496
#, no-wrap
msgid ""
"(face-attribute-relative-p :height 2.0)\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: display.texi.orig:2499
#, no-wrap
msgid "face-all-attributes face &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2506
msgid "This function returns an alist of attributes of @var{face}.  The elements of the result are name-value pairs of the form @w{@code{(@var{attr-name} . @var{attr-value})}}.  Optional argument @var{frame} specifies the frame whose definition of @var{face} to return; if omitted or @code{nil}, the returned value describes the default attributes of @var{face} for newly created frames."
msgstr ""

#. type: defun
#: display.texi.orig:2508
#, no-wrap
msgid "merge-face-attribute attribute value1 value2"
msgstr ""

#. type: defun
#: display.texi.orig:2513
msgid "If @var{value1} is a relative value for the face attribute @var{attribute}, returns it merged with the underlying value @var{value2}; otherwise, if @var{value1} is an absolute value for the face attribute @var{attribute}, returns @var{value1} unchanged."
msgstr ""

#. type: Plain text
#: display.texi.orig:2520
msgid "Normally, Emacs uses the face specs of each face to automatically calculate its attributes on each frame (@pxref{Defining Faces}).  The function @code{set-face-attribute} can override this calculation by directly assigning attributes to a face, either on a specific frame or for all frames.  This function is mostly intended for internal usage."
msgstr ""

#. type: defun
#: display.texi.orig:2521
#, no-wrap
msgid "set-face-attribute face frame &rest arguments"
msgstr ""

#. type: defun
#: display.texi.orig:2525
msgid "This function sets one or more attributes of @var{face} for @var{frame}.  The attributes specifies in this way override the face spec(s) belonging to @var{face}."
msgstr ""

#. type: defun
#: display.texi.orig:2529
msgid "The extra arguments @var{arguments} specify the attributes to set, and the values for them.  They should consist of alternating attribute names (such as @code{:family} or @code{:underline}) and values.  Thus,"
msgstr ""

#. type: example
#: display.texi.orig:2532
#, no-wrap
msgid "(set-face-attribute 'foo nil :weight 'bold :slant 'italic)\n"
msgstr ""

#. type: defun
#: display.texi.orig:2537
msgid "sets the attribute @code{:weight} to @code{bold} and the attribute @code{:slant} to @code{italic}."
msgstr ""

#. type: defun
#: display.texi.orig:2543
msgid "If @var{frame} is @code{t}, this function sets the default attributes for newly created frames.  If @var{frame} is @code{nil}, this function sets the attributes for all existing frames, as well as for newly created frames."
msgstr ""

#. type: Plain text
#: display.texi.orig:2551
msgid "The following commands and functions mostly provide compatibility with old versions of Emacs.  They work by calling @code{set-face-attribute}.  Values of @code{t} and @code{nil} for their @var{frame} argument are handled just like @code{set-face-attribute} and @code{face-attribute}.  The commands read their arguments using the minibuffer, if called interactively."
msgstr ""

#. type: deffn
#: display.texi.orig:2552
#, no-wrap
msgid "Command set-face-foreground face color &optional frame"
msgstr ""

#. type: deffnx
#: display.texi.orig:2553
#, no-wrap
msgid "Command set-face-background face color &optional frame"
msgstr ""

#. type: deffn
#: display.texi.orig:2556
msgid "These set the @code{:foreground} attribute (or @code{:background} attribute, respectively) of @var{face} to @var{color}."
msgstr ""

#. type: deffn
#: display.texi.orig:2558
#, no-wrap
msgid "Command set-face-stipple face pattern &optional frame"
msgstr ""

#. type: deffn
#: display.texi.orig:2561
msgid "This sets the @code{:stipple} attribute of @var{face} to @var{pattern}."
msgstr ""

#. type: deffn
#: display.texi.orig:2563
#, no-wrap
msgid "Command set-face-font face font &optional frame"
msgstr ""

#. type: deffn
#: display.texi.orig:2565
msgid "This sets the @code{:font} attribute of @var{face} to @var{font}."
msgstr ""

#. type: defun
#: display.texi.orig:2567
#, no-wrap
msgid "set-face-bold face bold-p &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2570
msgid "This sets the @code{:weight} attribute of @var{face} to @var{normal} if @var{bold-p} is @code{nil}, and to @var{bold} otherwise."
msgstr ""

#. type: defun
#: display.texi.orig:2572
#, no-wrap
msgid "set-face-italic face italic-p &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2575
msgid "This sets the @code{:slant} attribute of @var{face} to @var{normal} if @var{italic-p} is @code{nil}, and to @var{italic} otherwise."
msgstr ""

#. type: defun
#: display.texi.orig:2577
#, no-wrap
msgid "set-face-underline face underline &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2580
msgid "This sets the @code{:underline} attribute of @var{face} to @var{underline}."
msgstr ""

#. type: defun
#: display.texi.orig:2582
#, no-wrap
msgid "set-face-inverse-video face inverse-video-p &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2585
msgid "This sets the @code{:inverse-video} attribute of @var{face} to @var{inverse-video-p}."
msgstr ""

#. type: deffn
#: display.texi.orig:2587
#, no-wrap
msgid "Command invert-face face &optional frame"
msgstr ""

#. type: deffn
#: display.texi.orig:2589
msgid "This swaps the foreground and background colors of face @var{face}."
msgstr ""

#. type: Plain text
#: display.texi.orig:2603
msgid "The following functions examine the attributes of a face.  They mostly provide compatibility with old versions of Emacs.  If you don't specify @var{frame}, they refer to the selected frame; @code{t} refers to the default data for new frames.  They return @code{unspecified} if the face doesn't define any value for that attribute.  If @var{inherit} is @code{nil}, only an attribute directly defined by the face is returned.  If @var{inherit} is non-@code{nil}, any faces specified by its @code{:inherit} attribute are considered as well, and if @var{inherit} is a face or a list of faces, then they are also considered, until a specified attribute is found.  To ensure that the return value is always specified, use a value of @code{default} for @var{inherit}."
msgstr ""

#. type: defun
#: display.texi.orig:2604
#, no-wrap
msgid "face-font face &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2606
msgid "This function returns the name of the font of face @var{face}."
msgstr ""

#. type: defun
#: display.texi.orig:2608
#, no-wrap
msgid "face-foreground face &optional frame inherit"
msgstr ""

#. type: defunx
#: display.texi.orig:2609
#, no-wrap
msgid "face-background face &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2612
msgid "These functions return the foreground color (or background color, respectively) of face @var{face}, as a string."
msgstr ""

#. type: defun
#: display.texi.orig:2614
#, no-wrap
msgid "face-stipple face &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2617
msgid "This function returns the name of the background stipple pattern of face @var{face}, or @code{nil} if it doesn't have one."
msgstr ""

#. type: defun
#: display.texi.orig:2619
#, no-wrap
msgid "face-bold-p face &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2624
msgid "This function returns a non-@code{nil} value if the @code{:weight} attribute of @var{face} is bolder than normal (i.e., one of @code{semi-bold}, @code{bold}, @code{extra-bold}, or @code{ultra-bold}).  Otherwise, it returns @code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:2626
#, no-wrap
msgid "face-italic-p face &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2630
msgid "This function returns a non-@code{nil} value if the @code{:slant} attribute of @var{face} is @code{italic} or @code{oblique}, and @code{nil} otherwise."
msgstr ""

#. type: defun
#: display.texi.orig:2632
#, no-wrap
msgid "face-underline-p face &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2635
msgid "This function returns non-@code{nil} if face @var{face} specifies a non-@code{nil} @code{:underline} attribute."
msgstr ""

#. type: defun
#: display.texi.orig:2637
#, no-wrap
msgid "face-inverse-video-p face &optional frame inherit"
msgstr ""

#. type: defun
#: display.texi.orig:2640
msgid "This function returns non-@code{nil} if face @var{face} specifies a non-@code{nil} @code{:inverse-video} attribute."
msgstr ""

#. type: cindex
#: display.texi.orig:2644
#, no-wrap
msgid "displaying faces"
msgstr ""

#. type: cindex
#: display.texi.orig:2645
#, no-wrap
msgid "face merging"
msgstr ""

#. type: Plain text
#: display.texi.orig:2653
msgid "When Emacs displays a given piece of text, the visual appearance of the text may be determined by faces drawn from different sources.  If these various sources together specify more than one face for a particular character, Emacs merges the attributes of the various faces.  Here is the order in which Emacs merges the faces, from highest to lowest priority:"
msgstr ""

#. type: itemize
#: display.texi.orig:2658
msgid "If the text consists of a special glyph, the glyph can specify a particular face.  @xref{Glyphs}."
msgstr ""

#. type: itemize
#: display.texi.orig:2663
msgid "If the text lies within an active region, Emacs highlights it using the @code{region} face.  @xref{Standard Faces,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: itemize
#: display.texi.orig:2671
msgid "If the text lies within an overlay with a non-@code{nil} @code{face} property, Emacs applies the face(s) specified by that property.  If the overlay has a @code{mouse-face} property and the mouse is ``near enough'' to the overlay, Emacs applies the face or face attributes specified by the @code{mouse-face} property instead.  @xref{Overlay Properties}."
msgstr ""

#. type: itemize
#: display.texi.orig:2674
msgid "When multiple overlays cover one character, an overlay with higher priority overrides those with lower priority.  @xref{Overlays}."
msgstr ""

#. type: itemize
#: display.texi.orig:2680
msgid "If the text contains a @code{face} or @code{mouse-face} property, Emacs applies the specified faces and face attributes.  @xref{Special Properties}.  (This is how Font Lock mode faces are applied.  @xref{Font Lock Mode}.)"
msgstr ""

#. type: itemize
#: display.texi.orig:2686
msgid "If the text lies within the mode line of the selected window, Emacs applies the @code{mode-line} face.  For the mode line of a non-selected window, Emacs applies the @code{mode-line-inactive} face.  For a header line, Emacs applies the @code{header-line} face."
msgstr ""

#. type: itemize
#: display.texi.orig:2690
msgid "If any given attribute has not been specified during the preceding steps, Emacs applies the attribute of the @code{default} face."
msgstr ""

#. type: Plain text
#: display.texi.orig:2698
msgid "At each stage, if a face has a valid @code{:inherit} attribute, Emacs treats any attribute with an @code{unspecified} value as having the corresponding value drawn from the parent face(s).  @pxref{Face Attributes}.  Note that the parent face(s) may also leave the attribute unspecified; in that case, the attribute remains unspecified at the next level of face merging."
msgstr ""

#. type: cindex
#: display.texi.orig:2701
#, no-wrap
msgid "face remapping"
msgstr ""

#. type: Plain text
#: display.texi.orig:2707
msgid "The variable @code{face-remapping-alist} is used for buffer-local or global changes in the appearance of a face.  For instance, it is used to implement the @code{text-scale-adjust} command (@pxref{Text Scale,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: defvar
#: display.texi.orig:2708
#, no-wrap
msgid "face-remapping-alist"
msgstr ""

#. type: defvar
#: display.texi.orig:2713
msgid "The value of this variable is an alist whose elements have the form @code{(@var{face} . @var{remapping})}.  This causes Emacs to display any text having the face @var{face} with @var{remapping}, rather than the ordinary definition of @var{face}."
msgstr ""

#. type: defvar
#: display.texi.orig:2721
msgid "@var{remapping} may be any face spec suitable for a @code{face} text property: either a face (i.e., a face name or a property list of attribute/value pairs), or a list of faces.  For details, see the description of the @code{face} text property in @ref{Special Properties}.  @var{remapping} serves as the complete specification for the remapped face---it replaces the normal definition of @var{face}, instead of modifying it."
msgstr ""

#. type: defvar
#: display.texi.orig:2724
msgid "If @code{face-remapping-alist} is buffer-local, its local value takes effect only within that buffer."
msgstr ""

#. type: defvar
#: display.texi.orig:2731
msgid "Note: face remapping is non-recursive.  If @var{remapping} references the same face name @var{face}, either directly or via the @code{:inherit} attribute of some other face in @var{remapping}, that reference uses the normal definition of @var{face}.  For instance, if the @code{mode-line} face is remapped using this entry in @code{face-remapping-alist}:"
msgstr ""

#. type: example
#: display.texi.orig:2734
#, no-wrap
msgid "(mode-line italic mode-line)\n"
msgstr ""

#. type: defvar
#: display.texi.orig:2740
msgid "then the new definition of the @code{mode-line} face inherits from the @code{italic} face, and the @emph{normal} (non-remapped) definition of @code{mode-line} face."
msgstr ""

#. type: cindex
#: display.texi.orig:2742
#, no-wrap
msgid "relative remapping, faces"
msgstr ""

#. type: cindex
#: display.texi.orig:2743
#, no-wrap
msgid "base remapping, faces"
msgstr ""

#. type: Plain text
#: display.texi.orig:2751
msgid "The following functions implement a higher-level interface to @code{face-remapping-alist}.  Most Lisp code should use these functions instead of setting @code{face-remapping-alist} directly, to avoid trampling on remappings applied elsewhere.  These functions are intended for buffer-local remappings, so they all make @code{face-remapping-alist} buffer-local as a side-effect. They manage @code{face-remapping-alist} entries of the form"
msgstr ""

#. type: example
#: display.texi.orig:2754
#, no-wrap
msgid "  (@var{face} @var{relative-spec-1} @var{relative-spec-2} @var{...} @var{base-spec})\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:2767
msgid "where, as explained above, each of the @var{relative-spec-N} and @var{base-spec} is either a face name, or a property list of attribute/value pairs.  Each of the @dfn{relative remapping} entries, @var{relative-spec-N}, is managed by the @code{face-remap-add-relative} and @code{face-remap-remove-relative} functions; these are intended for simple modifications like changing the text size.  The @dfn{base remapping} entry, @var{base-spec}, has the lowest priority and is managed by the @code{face-remap-set-base} and @code{face-remap-reset-base} functions; it is intended for major modes to remap faces in the buffers they control."
msgstr ""

#. type: defun
#: display.texi.orig:2768
#, no-wrap
msgid "face-remap-add-relative face &rest specs"
msgstr ""

#. type: defun
#: display.texi.orig:2773
msgid "This function adds the face spec in @var{specs} as relative remappings for face @var{face} in the current buffer.  The remaining arguments, @var{specs}, should form either a list of face names, or a property list of attribute/value pairs."
msgstr ""

#. type: defun
#: display.texi.orig:2777
msgid "The return value is a Lisp object that serves as a ``cookie''; you can pass this object as an argument to @code{face-remap-remove-relative} if you need to remove the remapping later."
msgstr ""

#. type: example
#: display.texi.orig:2782
#, no-wrap
msgid ""
";; Remap the `escape-glyph' face into a combination\n"
";; of the `highlight' and `italic' faces:\n"
"(face-remap-add-relative 'escape-glyph 'highlight 'italic)\n"
"\n"
msgstr ""

#. type: example
#: display.texi.orig:2785
#, no-wrap
msgid ""
";; Increase the size of the `default' face by 50%:\n"
"(face-remap-add-relative 'default :height 1.5)\n"
msgstr ""

#. type: defun
#: display.texi.orig:2788
#, no-wrap
msgid "face-remap-remove-relative cookie"
msgstr ""

#. type: defun
#: display.texi.orig:2793
msgid "This function removes a relative remapping previously added by @code{face-remap-add-relative}.  @var{cookie} should be the Lisp object returned by @code{face-remap-add-relative} when the remapping was added."
msgstr ""

#. type: defun
#: display.texi.orig:2795
#, no-wrap
msgid "face-remap-set-base face &rest specs"
msgstr ""

#. type: defun
#: display.texi.orig:2802
msgid "This function sets the base remapping of @var{face} in the current buffer to @var{specs}.  If @var{specs} is empty, the default base remapping is restored, similar to calling @code{face-remap-reset-base} (see below); note that this is different from @var{specs} containing a single value @code{nil}, which has the opposite result (the global definition of @var{face} is ignored)."
msgstr ""

#. type: defun
#: display.texi.orig:2806
msgid "This overwrites the default @var{base-spec}, which inherits the global face definition, so it is up to the caller to add such inheritance if so desired."
msgstr ""

#. type: defun
#: display.texi.orig:2808
#, no-wrap
msgid "face-remap-reset-base face"
msgstr ""

#. type: defun
#: display.texi.orig:2811
msgid "This function sets the base remapping of @var{face} to its default value, which inherits from @var{face}'s global definition."
msgstr ""

#. type: subsection
#: display.texi.orig:2814
#, no-wrap
msgid "Functions for Working with Faces"
msgstr ""

#. type: Plain text
#: display.texi.orig:2817
msgid "Here are additional functions for creating and working with faces."
msgstr ""

#. type: defun
#: display.texi.orig:2818
#, no-wrap
msgid "face-list"
msgstr ""

#. type: defun
#: display.texi.orig:2820
msgid "This function returns a list of all defined face names."
msgstr ""

#. type: defun
#: display.texi.orig:2822
#, no-wrap
msgid "face-id face"
msgstr ""

#. type: defun
#: display.texi.orig:2826
msgid "This function returns the @dfn{face number} of face @var{face}.  This is a number that uniquely identifies a face at low levels within Emacs.  It is seldom necessary to refer to a face by its face number."
msgstr ""

#. type: defun
#: display.texi.orig:2828
#, no-wrap
msgid "face-documentation face"
msgstr ""

#. type: defun
#: display.texi.orig:2831
msgid "This function returns the documentation string of face @var{face}, or @code{nil} if none was specified for it."
msgstr ""

#. type: defun
#: display.texi.orig:2833
#, no-wrap
msgid "face-equal face1 face2 &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2836
msgid "This returns @code{t} if the faces @var{face1} and @var{face2} have the same attributes for display."
msgstr ""

#. type: defun
#: display.texi.orig:2838
#, no-wrap
msgid "face-differs-from-default-p face &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:2841
msgid "This returns non-@code{nil} if the face @var{face} displays differently from the default face."
msgstr ""

#. type: cindex
#: display.texi.orig:2843
#, no-wrap
msgid "face alias"
msgstr ""

#. type: cindex
#: display.texi.orig:2844
#, no-wrap
msgid "alias, for faces"
msgstr ""

#. type: Plain text
#: display.texi.orig:2849
msgid "A @dfn{face alias} provides an equivalent name for a face.  You can define a face alias by giving the alias symbol the @code{face-alias} property, with a value of the target face name.  The following example makes @code{modeline} an alias for the @code{mode-line} face."
msgstr ""

#. type: example
#: display.texi.orig:2852
#, no-wrap
msgid "(put 'modeline 'face-alias 'mode-line)\n"
msgstr ""

#. type: defmac
#: display.texi.orig:2854
#, no-wrap
msgid "define-obsolete-face-alias obsolete-face current-face when"
msgstr ""

#. type: defmac
#: display.texi.orig:2860
msgid "This macro defines @code{obsolete-face} as an alias for @var{current-face}, and also marks it as obsolete, indicating that it may be removed in future.  @var{when} should be a string indicating when @code{obsolete-face} was made obsolete (usually a version number string)."
msgstr ""

#. type: subsection
#: display.texi.orig:2863
#, no-wrap
msgid "Automatic Face Assignment"
msgstr ""

#. type: cindex
#: display.texi.orig:2864
#, no-wrap
msgid "automatic face assignment"
msgstr ""

#. type: cindex
#: display.texi.orig:2865
#, no-wrap
msgid "faces, automatic choice"
msgstr ""

#. type: Plain text
#: display.texi.orig:2870
msgid "This hook is used for automatically assigning faces to text in the buffer.  It is part of the implementation of Jit-Lock mode, used by Font-Lock."
msgstr ""

#. type: defvar
#: display.texi.orig:2871
#, no-wrap
msgid "fontification-functions"
msgstr ""

#. type: defvar
#: display.texi.orig:2876
msgid "This variable holds a list of functions that are called by Emacs redisplay as needed, just before doing redisplay.  They are called even when Font Lock Mode isn't enabled.  When Font Lock Mode is enabled, this variable usually holds just one function, @code{jit-lock-function}."
msgstr ""

#. type: defvar
#: display.texi.orig:2880
msgid "The functions are called in the order listed, with one argument, a buffer position @var{pos}.  Collectively they should attempt to assign faces to the text in the current buffer starting at @var{pos}."
msgstr ""

#. type: defvar
#: display.texi.orig:2886
msgid "The functions should record the faces they assign by setting the @code{face} property.  They should also add a non-@code{nil} @code{fontified} property to all the text they have assigned faces to.  That property tells redisplay that faces have been assigned to that text already."
msgstr ""

#. type: defvar
#: display.texi.orig:2892
msgid "It is probably a good idea for the functions to do nothing if the character after @var{pos} already has a non-@code{nil} @code{fontified} property, but this is not required.  If one function overrides the assignments made by a previous one, the properties after the last function finishes are the ones that really matter."
msgstr ""

#. type: defvar
#: display.texi.orig:2895
msgid "For efficiency, we recommend writing these functions so that they usually assign faces to around 400 to 600 characters at each call."
msgstr ""

#. type: cindex
#: display.texi.orig:2899
#, no-wrap
msgid "basic faces"
msgstr ""

#. type: Plain text
#: display.texi.orig:2906
msgid "If your Emacs Lisp program needs to assign some faces to text, it is often a good idea to use certain existing faces or inherit from them, rather than defining entirely new faces.  This way, if other users have customized the basic faces to give Emacs a certain look, your program will ``fit in'' without additional customization."
msgstr ""

#. type: Plain text
#: display.texi.orig:2912
msgid "Some of the basic faces defined in Emacs are listed below.  In addition to these, you might want to make use of the Font Lock faces for syntactic highlighting, if highlighting is not already handled by Font Lock mode, or if some Font Lock faces are not in use.  @xref{Faces for Font Lock}."
msgstr ""

#. type: table
#: display.texi.orig:2918
msgid "The default face, whose attributes are all specified.  All other faces implicitly inherit from it: any unspecified attribute defaults to the attribute on this face (@pxref{Face Attributes})."
msgstr ""

#. type: item
#: display.texi.orig:2919
#, no-wrap
msgid "bold"
msgstr ""

#. type: itemx
#: display.texi.orig:2920
#, no-wrap
msgid "italic"
msgstr ""

#. type: itemx
#: display.texi.orig:2921
#, no-wrap
msgid "bold-italic"
msgstr ""

#. type: itemx
#: display.texi.orig:2922
#, no-wrap
msgid "underline"
msgstr ""

#. type: itemx
#: display.texi.orig:2923
#, no-wrap
msgid "fixed-pitch"
msgstr ""

#. type: itemx
#: display.texi.orig:2924
#, no-wrap
msgid "variable-pitch"
msgstr ""

#. type: table
#: display.texi.orig:2928
msgid "These have the attributes indicated by their names (e.g., @code{bold} has a bold @code{:weight} attribute), with all other attributes unspecified (and so given by @code{default})."
msgstr ""

#. type: item
#: display.texi.orig:2929
#, no-wrap
msgid "shadow"
msgstr ""

#. type: table
#: display.texi.orig:2933
msgid "For ``dimmed out'' text.  For example, it is used for the ignored part of a filename in the minibuffer (@pxref{Minibuffer File,, Minibuffers for File Names, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: item
#: display.texi.orig:2934
#, no-wrap
msgid "link"
msgstr ""

#. type: itemx
#: display.texi.orig:2935
#, no-wrap
msgid "link-visited"
msgstr ""

#. type: table
#: display.texi.orig:2938
msgid "For clickable text buttons that send the user to a different buffer or ``location''."
msgstr ""

#. type: item
#: display.texi.orig:2939
#, no-wrap
msgid "highlight"
msgstr ""

#. type: table
#: display.texi.orig:2943
msgid "For stretches of text that should temporarily stand out.  For example, it is commonly assigned to the @code{mouse-face} property for cursor highlighting (@pxref{Special Properties})."
msgstr ""

#. type: item
#: display.texi.orig:2944
#, no-wrap
msgid "match"
msgstr ""

#. type: table
#: display.texi.orig:2946
msgid "For text matching a search command."
msgstr ""

#. type: item
#: display.texi.orig:2947
#, no-wrap
msgid "error"
msgstr ""

#. type: itemx
#: display.texi.orig:2948
#, no-wrap
msgid "warning"
msgstr ""

#. type: itemx
#: display.texi.orig:2949
#, no-wrap
msgid "success"
msgstr ""

#. type: table
#: display.texi.orig:2952
msgid "For text concerning errors, warnings, or successes.  For example, these are used for messages in @file{*Compilation*} buffers."
msgstr ""

#. type: cindex
#: display.texi.orig:2956
#, no-wrap
msgid "font selection"
msgstr ""

#. type: cindex
#: display.texi.orig:2957
#, no-wrap
msgid "selecting a font"
msgstr ""

#. type: Plain text
#: display.texi.orig:2971
msgid "Before Emacs can draw a character on a graphical display, it must select a @dfn{font} for that character@footnote{In this context, the term @dfn{font} has nothing to do with Font Lock (@pxref{Font Lock Mode}).}.  @xref{Fonts,,, emacs, The GNU Emacs Manual}.  Normally, Emacs automatically chooses a font based on the faces assigned to that character---specifically, the face attributes @code{:family}, @code{:weight}, @code{:slant}, and @code{:width} (@pxref{Face Attributes}).  The choice of font also depends on the character to be displayed; some fonts can only display a limited set of characters.  If no available font exactly fits the requirements, Emacs looks for the @dfn{closest matching font}.  The variables in this section control how Emacs makes this selection."
msgstr ""

#. type: defopt
#: display.texi.orig:2972
#, no-wrap
msgid "face-font-family-alternatives"
msgstr ""

#. type: defopt
#: display.texi.orig:2976
msgid "If a given family is specified but does not exist, this variable specifies alternative font families to try.  Each element should have this form:"
msgstr ""

#. type: example
#: display.texi.orig:2979
#, no-wrap
msgid "(@var{family} @var{alternate-families}@dots{})\n"
msgstr ""

#. type: defopt
#: display.texi.orig:2984
msgid "If @var{family} is specified but not available, Emacs will try the other families given in @var{alternate-families}, one by one, until it finds a family that does exist."
msgstr ""

#. type: defopt
#: display.texi.orig:2986
#, no-wrap
msgid "face-font-selection-order"
msgstr ""

#. type: defopt
#: display.texi.orig:2994
msgid "If there is no font that exactly matches all desired face attributes (@code{:width}, @code{:height}, @code{:weight}, and @code{:slant}), this variable specifies the order in which these attributes should be considered when selecting the closest matching font.  The value should be a list containing those four attribute symbols, in order of decreasing importance.  The default is @code{(:width :height :weight :slant)}."
msgstr ""

#. type: defopt
#: display.texi.orig:2999
msgid "Font selection first finds the best available matches for the first attribute in the list; then, among the fonts which are best in that way, it searches for the best matches in the second attribute, and so on."
msgstr ""

#. type: defopt
#: display.texi.orig:3005
msgid "The attributes @code{:weight} and @code{:width} have symbolic values in a range centered around @code{normal}.  Matches that are more extreme (farther from @code{normal}) are somewhat preferred to matches that are less extreme (closer to @code{normal}); this is designed to ensure that non-normal faces contrast with normal ones, whenever possible."
msgstr ""

#. type: defopt
#: display.texi.orig:3012
msgid "One example of a case where this variable makes a difference is when the default font has no italic equivalent.  With the default ordering, the @code{italic} face will use a non-italic font that is similar to the default one.  But if you put @code{:slant} before @code{:height}, the @code{italic} face will use an italic font, even if its height is not quite right."
msgstr ""

#. type: defopt
#: display.texi.orig:3014
#, no-wrap
msgid "face-font-registry-alternatives"
msgstr ""

#. type: defopt
#: display.texi.orig:3018
msgid "This variable lets you specify alternative font registries to try, if a given registry is specified and doesn't exist.  Each element should have this form:"
msgstr ""

#. type: example
#: display.texi.orig:3021
#, no-wrap
msgid "(@var{registry} @var{alternate-registries}@dots{})\n"
msgstr ""

#. type: defopt
#: display.texi.orig:3026
msgid "If @var{registry} is specified but not available, Emacs will try the other registries given in @var{alternate-registries}, one by one, until it finds a registry that does exist."
msgstr ""

#. type: cindex
#: display.texi.orig:3028
#, no-wrap
msgid "scalable fonts"
msgstr ""

#. type: Plain text
#: display.texi.orig:3031
msgid "Emacs can make use of scalable fonts, but by default it does not use them."
msgstr ""

#. type: defopt
#: display.texi.orig:3032
#, no-wrap
msgid "scalable-fonts-allowed"
msgstr ""

#. type: defopt
#: display.texi.orig:3036
msgid "This variable controls which scalable fonts to use.  A value of @code{nil}, the default, means do not use scalable fonts.  @code{t} means to use any scalable font that seems appropriate for the text."
msgstr ""

#. type: defopt
#: display.texi.orig:3040
msgid "Otherwise, the value must be a list of regular expressions.  Then a scalable font is enabled for use if its name matches any regular expression in the list.  For example,"
msgstr ""

#. type: example
#: display.texi.orig:3043
#, no-wrap
msgid "(setq scalable-fonts-allowed '(\"iso10646-1$\"))\n"
msgstr ""

#. type: defopt
#: display.texi.orig:3047
msgid "allows the use of scalable fonts with registry @code{iso10646-1}."
msgstr ""

#. type: defvar
#: display.texi.orig:3049
#, no-wrap
msgid "face-font-rescale-alist"
msgstr ""

#. type: defvar
#: display.texi.orig:3052
msgid "This variable specifies scaling for certain faces.  Its value should be a list of elements of the form"
msgstr ""

#. type: example
#: display.texi.orig:3055
#, no-wrap
msgid "(@var{fontname-regexp} . @var{scale-factor})\n"
msgstr ""

#. type: defvar
#: display.texi.orig:3062
msgid "If @var{fontname-regexp} matches the font name that is about to be used, this says to choose a larger similar font according to the factor @var{scale-factor}.  You would use this feature to normalize the font size if certain fonts are bigger or smaller than their nominal heights and widths would suggest."
msgstr ""

#. type: subsection
#: display.texi.orig:3065
#, no-wrap
msgid "Looking Up Fonts"
msgstr ""

#. type: cindex
#: display.texi.orig:3066
#, no-wrap
msgid "font lookup"
msgstr ""

#. type: cindex
#: display.texi.orig:3067
#, no-wrap
msgid "looking up fonts"
msgstr ""

#. type: defun
#: display.texi.orig:3069
#, no-wrap
msgid "x-list-fonts name &optional reference-face frame maximum width"
msgstr ""

#. type: defun
#: display.texi.orig:3077
msgid "This function returns a list of available font names that match @var{name}.  @var{name} should be a string containing a font name in either the Fontconfig, GTK, or XLFD format (@pxref{Fonts,,, emacs, The GNU Emacs Manual}).  Within an XLFD string, wildcard characters may be used: the @samp{*} character matches any substring, and the @samp{?} character matches any single character.  Case is ignored when matching font names."
msgstr ""

#. type: defun
#: display.texi.orig:3082
msgid "If the optional arguments @var{reference-face} and @var{frame} are specified, the returned list includes only fonts that are the same size as @var{reference-face} (a face name) currently is on the frame @var{frame}."
msgstr ""

#. type: defun
#: display.texi.orig:3088
msgid "The optional argument @var{maximum} sets a limit on how many fonts to return.  If it is non-@code{nil}, then the return value is truncated after the first @var{maximum} matching fonts.  Specifying a small value for @var{maximum} can make this function much faster, in cases where many fonts match the pattern."
msgstr ""

#. type: defun
#: display.texi.orig:3093
msgid "The optional argument @var{width} specifies a desired font width.  If it is non-@code{nil}, the function only returns those fonts whose characters are (on average) @var{width} times as wide as @var{reference-face}."
msgstr ""

#. type: defun
#: display.texi.orig:3095
#, no-wrap
msgid "x-family-fonts &optional family frame"
msgstr ""

#. type: defun
#: display.texi.orig:3101
msgid "This function returns a list describing the available fonts for family @var{family} on @var{frame}.  If @var{family} is omitted or @code{nil}, this list applies to all families, and therefore, it contains all available fonts.  Otherwise, @var{family} must be a string; it may contain the wildcards @samp{?} and @samp{*}."
msgstr ""

#. type: defun
#: display.texi.orig:3105
msgid "The list describes the display that @var{frame} is on; if @var{frame} is omitted or @code{nil}, it applies to the selected frame's display (@pxref{Input Focus})."
msgstr ""

#. type: defun
#: display.texi.orig:3107
msgid "Each element in the list is a vector of the following form:"
msgstr ""

#. type: example
#: display.texi.orig:3111
#, no-wrap
msgid ""
"[@var{family} @var{width} @var{point-size} @var{weight} @var{slant}\n"
" @var{fixed-p} @var{full} @var{registry-and-encoding}]\n"
msgstr ""

#. type: defun
#: display.texi.orig:3115
msgid "The first five elements correspond to face attributes; if you specify these attributes for a face, it will use this font."
msgstr ""

#. type: defun
#: display.texi.orig:3121
msgid "The last three elements give additional information about the font.  @var{fixed-p} is non-@code{nil} if the font is fixed-pitch.  @var{full} is the full name of the font, and @var{registry-and-encoding} is a string giving the registry and encoding of the font."
msgstr ""

#. type: cindex
#: display.texi.orig:3125
#, no-wrap
msgid "fontset"
msgstr ""

#. type: Plain text
#: display.texi.orig:3133
msgid "A @dfn{fontset} is a list of fonts, each assigned to a range of character codes.  An individual font cannot display the whole range of characters that Emacs supports, but a fontset can.  Fontsets have names, just as fonts do, and you can use a fontset name in place of a font name when you specify the ``font'' for a frame or a face.  Here is information about defining a fontset under Lisp program control."
msgstr ""

#. type: defun
#: display.texi.orig:3134
#, no-wrap
msgid "create-fontset-from-fontset-spec fontset-spec &optional style-variant-p noerror"
msgstr ""

#. type: defun
#: display.texi.orig:3137
msgid "This function defines a new fontset according to the specification string @var{fontset-spec}.  The string should have this format:"
msgstr ""

#. type: smallexample
#: display.texi.orig:3140
#, no-wrap
msgid "@var{fontpattern}, @r{[}@var{charset}:@var{font}@r{]@dots{}}\n"
msgstr ""

#. type: defun
#: display.texi.orig:3144
msgid "Whitespace characters before and after the commas are ignored."
msgstr ""

#. type: defun
#: display.texi.orig:3148
msgid "The first part of the string, @var{fontpattern}, should have the form of a standard X font name, except that the last two fields should be @samp{fontset-@var{alias}}."
msgstr ""

#. type: defun
#: display.texi.orig:3155
msgid "The new fontset has two names, one long and one short.  The long name is @var{fontpattern} in its entirety.  The short name is @samp{fontset-@var{alias}}.  You can refer to the fontset by either name.  If a fontset with the same name already exists, an error is signaled, unless @var{noerror} is non-@code{nil}, in which case this function does nothing."
msgstr ""

#. type: defun
#: display.texi.orig:3161
msgid "If optional argument @var{style-variant-p} is non-@code{nil}, that says to create bold, italic and bold-italic variants of the fontset as well.  These variant fontsets do not have a short name, only a long one, which is made by altering @var{fontpattern} to indicate the bold and/or italic status."
msgstr ""

#. type: defun
#: display.texi.orig:3164
msgid "The specification string also says which fonts to use in the fontset.  See below for the details."
msgstr ""

#. type: Plain text
#: display.texi.orig:3171
msgid "The construct @samp{@var{charset}:@var{font}} specifies which font to use (in this fontset) for one particular character set.  Here, @var{charset} is the name of a character set, and @var{font} is the font to use for that character set.  You can use this construct any number of times in the specification string."
msgstr ""

#. type: Plain text
#: display.texi.orig:3177
msgid "For the remaining character sets, those that you don't specify explicitly, Emacs chooses a font based on @var{fontpattern}: it replaces @samp{fontset-@var{alias}} with a value that names one character set.  For the @acronym{ASCII} character set, @samp{fontset-@var{alias}} is replaced with @samp{ISO8859-1}."
msgstr ""

#. type: Plain text
#: display.texi.orig:3183
msgid "In addition, when several consecutive fields are wildcards, Emacs collapses them into a single wildcard.  This is to prevent use of auto-scaled fonts.  Fonts made by scaling larger fonts are not usable for editing, and scaling a smaller font is not useful because it is better to use the smaller font in its own size, which Emacs does."
msgstr ""

#. type: Plain text
#: display.texi.orig:3185
msgid "Thus if @var{fontpattern} is this,"
msgstr ""

#. type: example
#: display.texi.orig:3188
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:3192
msgid "the font specification for @acronym{ASCII} characters would be this:"
msgstr ""

#. type: example
#: display.texi.orig:3195
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-ISO8859-1\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:3199
msgid "and the font specification for Chinese GB2312 characters would be this:"
msgstr ""

#. type: example
#: display.texi.orig:3202
#, no-wrap
msgid "-*-fixed-medium-r-normal-*-24-*-gb2312*-*\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:3208
msgid "You may not have any Chinese font matching the above font specification.  Most X distributions include only Chinese fonts that have @samp{song ti} or @samp{fangsong ti} in the @var{family} field.  In such a case, @samp{Fontset-@var{n}} can be specified as below:"
msgstr ""

#. type: smallexample
#: display.texi.orig:3212
#, no-wrap
msgid ""
"Emacs.Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24,\\\n"
"        chinese-gb2312:-*-*-medium-r-normal-*-24-*-gb2312*-*\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:3219
msgid "Then, the font specifications for all but Chinese GB2312 characters have @samp{fixed} in the @var{family} field, and the font specification for Chinese GB2312 characters has a wild card @samp{*} in the @var{family} field."
msgstr ""

#. type: defun
#: display.texi.orig:3220
#, no-wrap
msgid "set-fontset-font name character font-spec &optional frame add"
msgstr ""

#. type: defun
#: display.texi.orig:3223
msgid "This function modifies the existing fontset @var{name} to use the font matching with @var{font-spec} for the character @var{character}."
msgstr ""

#. type: defun
#: display.texi.orig:3227
msgid "If @var{name} is @code{nil}, this function modifies the fontset of the selected frame or that of @var{frame} if @var{frame} is not @code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:3230
msgid "If @var{name} is @code{t}, this function modifies the default fontset, whose short name is @samp{fontset-default}."
msgstr ""

#. type: defun
#: display.texi.orig:3235
msgid "@var{character} may be a cons; @code{(@var{from} . @var{to})}, where @var{from} and @var{to} are character codepoints.  In that case, use @var{font-spec} for all characters in the range @var{from} and @var{to} (inclusive)."
msgstr ""

#. type: defun
#: display.texi.orig:3238
msgid "@var{character} may be a charset.  In that case, use @var{font-spec} for all character in the charsets."
msgstr ""

#. type: defun
#: display.texi.orig:3241
msgid "@var{character} may be a script name.  In that case, use @var{font-spec} for all character in the charsets."
msgstr ""

#. type: defun
#: display.texi.orig:3246
msgid "@var{font-spec} may be a cons; @code{(@var{family} . @var{registry})}, where @var{family} is a family name of a font (possibly including a foundry name at the head), @var{registry} is a registry name of a font (possibly including an encoding name at the tail)."
msgstr ""

#. type: defun
#: display.texi.orig:3248
msgid "@var{font-spec} may be a font name string."
msgstr ""

#. type: defun
#: display.texi.orig:3254
msgid "The optional argument @var{add}, if non-@code{nil}, specifies how to add @var{font-spec} to the font specifications previously set.  If it is @code{prepend}, @var{font-spec} is prepended.  If it is @code{append}, @var{font-spec} is appended.  By default, @var{font-spec} overrides the previous settings."
msgstr ""

#. type: defun
#: display.texi.orig:3258
msgid "For instance, this changes the default fontset to use a font of which family name is @samp{Kochi Gothic} for all characters belonging to the charset @code{japanese-jisx0208}."
msgstr ""

#. type: smallexample
#: display.texi.orig:3262
#, no-wrap
msgid ""
"(set-fontset-font t 'japanese-jisx0208\n"
"                  (font-spec :family \"Kochi Gothic\"))\n"
msgstr ""

#. type: defun
#: display.texi.orig:3265
#, no-wrap
msgid "char-displayable-p char"
msgstr ""

#. type: defun
#: display.texi.orig:3269
msgid "This function returns @code{t} if Emacs ought to be able to display @var{char}.  More precisely, if the selected frame's fontset has a font to display the character set that @var{char} belongs to."
msgstr ""

#. type: defun
#: display.texi.orig:3272
msgid "Fontsets can specify a font on a per-character basis; when the fontset does that, this function's value may not be accurate."
msgstr ""

#. type: subsection
#: display.texi.orig:3275
#, no-wrap
msgid "Low-Level Font Representation"
msgstr ""

#. type: cindex
#: display.texi.orig:3276
#, no-wrap
msgid "font property"
msgstr ""

#. type: Plain text
#: display.texi.orig:3280
msgid "Normally, it is not necessary to manipulate fonts directly.  In case you need to do so, this section explains how."
msgstr ""

#. type: Plain text
#: display.texi.orig:3284
msgid "In Emacs Lisp, fonts are represented using three different Lisp object types: @dfn{font objects}, @dfn{font specs}, and @dfn{font entities}."
msgstr ""

#. type: defun
#: display.texi.orig:3285
#, no-wrap
msgid "fontp object &optional type"
msgstr ""

#. type: defun
#: display.texi.orig:3288
msgid "Return @code{t} if @var{object} is a font object, font spec, or font entity.  Otherwise, return @code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:3293
msgid "The optional argument @var{type}, if non-@code{nil}, determines the exact type of Lisp object to check for.  In that case, @var{type} should be one of @code{font-object}, @code{font-spec}, or @code{font-entity}."
msgstr ""

#. type: cindex
#: display.texi.orig:3295
#, no-wrap
msgid "font object"
msgstr ""

#. type: Plain text
#: display.texi.orig:3299
msgid "A font object is a Lisp object that represents a font that Emacs has @dfn{opened}.  Font objects cannot be modified in Lisp, but they can be inspected."
msgstr ""

#. type: defun
#: display.texi.orig:3300
#, no-wrap
msgid "font-at position &optional window string"
msgstr ""

#. type: defun
#: display.texi.orig:3307
msgid "Return the font object that is being used to display the character at position @var{position} in the window @var{window}.  If @var{window} is @code{nil}, it defaults to the selected window.  If @var{string} is @code{nil}, @var{position} specifies a position in the current buffer; otherwise, @var{string} should be a string, and @var{position} specifies a position in that string."
msgstr ""

#. type: cindex
#: display.texi.orig:3309
#, no-wrap
msgid "font spec"
msgstr ""

#. type: Plain text
#: display.texi.orig:3313
msgid "A font spec is a Lisp object that contains a set of specifications that can be used to find a font.  More than one font may match the specifications in a font spec."
msgstr ""

#. type: defun
#: display.texi.orig:3314
#, no-wrap
msgid "font-spec &rest arguments"
msgstr ""

#. type: defun
#: display.texi.orig:3318
msgid "Return a new font spec using the specifications in @var{arguments}, which should come in @code{property}-@code{value} pairs.  The possible specifications are as follows:"
msgstr ""

#. type: item
#: display.texi.orig:3320
#, no-wrap
msgid ":name"
msgstr ""

#. type: table
#: display.texi.orig:3323
msgid "The font name (a string), in either XLFD, Fontconfig, or GTK format.  @xref{Fonts,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: table
#: display.texi.orig:3331
msgid "These have the same meanings as the face attributes of the same name.  @xref{Face Attributes}."
msgstr ""

#. type: item
#: display.texi.orig:3332
#, no-wrap
msgid ":size"
msgstr ""

#. type: table
#: display.texi.orig:3335
msgid "The font size---either a non-negative integer that specifies the pixel size, or a floating-point number that specifies the point size."
msgstr ""

#. type: item
#: display.texi.orig:3336
#, no-wrap
msgid ":adstyle"
msgstr ""

#. type: table
#: display.texi.orig:3339
msgid "Additional typographic style information for the font, such as @samp{sans}.  The value should be a string or a symbol."
msgstr ""

#. type: cindex
#: display.texi.orig:3340
#, no-wrap
msgid "font registry"
msgstr ""

#. type: item
#: display.texi.orig:3341
#, no-wrap
msgid ":registry"
msgstr ""

#. type: table
#: display.texi.orig:3344
msgid "The charset registry and encoding of the font, such as @samp{iso8859-1}.  The value should be a string or a symbol."
msgstr ""

#. type: item
#: display.texi.orig:3345
#, no-wrap
msgid ":script"
msgstr ""

#. type: table
#: display.texi.orig:3347
msgid "The script that the font must support (a symbol)."
msgstr ""

#. type: item
#: display.texi.orig:3348
#, no-wrap
msgid ":otf"
msgstr ""

#. type: cindex
#: display.texi.orig:3349
#, no-wrap
msgid "OpenType font"
msgstr ""

#. type: table
#: display.texi.orig:3354
msgid "The font must be an OpenType font that supports these OpenType features, provided Emacs is compiled with support for @samp{libotf} (a library for performing complex text layout in certain scripts).  The value must be a list of the form"
msgstr ""

#. type: smallexample
#: display.texi.orig:3357
#, no-wrap
msgid "@code{(@var{script-tag} @var{langsys-tag} @var{gsub} @var{gpos})}\n"
msgstr ""

#. type: table
#: display.texi.orig:3368
msgid "where @var{script-tag} is the OpenType script tag symbol; @var{langsys-tag} is the OpenType language system tag symbol, or @code{nil} to use the default language system; @code{gsub} is a list of OpenType GSUB feature tag symbols, or @code{nil} if none is required; and @code{gpos} is a list of OpenType GPOS feature tag symbols, or @code{nil} if none is required.  If @code{gsub} or @code{gpos} is a list, a @code{nil} element in that list means that the font must not match any of the remaining tag symbols.  The @code{gpos} element may be omitted."
msgstr ""

#. type: defun
#: display.texi.orig:3371
#, no-wrap
msgid "font-put font-spec property value"
msgstr ""

#. type: defun
#: display.texi.orig:3374
msgid "Set the font property @var{property} in the font-spec @var{font-spec} to @var{value}."
msgstr ""

#. type: cindex
#: display.texi.orig:3376
#, no-wrap
msgid "font entity"
msgstr ""

#. type: Plain text
#: display.texi.orig:3384
msgid "A font entity is a reference to a font that need not be open.  Its properties are intermediate between a font object and a font spec: like a font object, and unlike a font spec, it refers to a single, specific font.  Unlike a font object, creating a font entity does not load the contents of that font into computer memory.  Emacs may open multiple font objects of different sizes from a single font entity referring to a scalable font."
msgstr ""

#. type: defun
#: display.texi.orig:3385
#, no-wrap
msgid "find-font font-spec &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:3389
msgid "This function returns a font entity that best matches the font spec @var{font-spec} on frame @var{frame}.  If @var{frame} is @code{nil}, it defaults to the selected frame."
msgstr ""

#. type: defun
#: display.texi.orig:3391
#, no-wrap
msgid "list-fonts font-spec &optional frame num prefer"
msgstr ""

#. type: defun
#: display.texi.orig:3394
msgid "This function returns a list of all font entities that match the font spec @var{font-spec}."
msgstr ""

#. type: defun
#: display.texi.orig:3403
msgid "The optional argument @var{frame}, if non-@code{nil}, specifies the frame on which the fonts are to be displayed.  The optional argument @var{num}, if non-@code{nil}, should be an integer that specifies the maximum length of the returned list.  The optional argument @var{prefer}, if non-@code{nil}, should be another font spec, which is used to control the order of the returned list; the returned font entities are sorted in order of decreasing ``closeness'' to that font spec."
msgstr ""

#. type: Plain text
#: display.texi.orig:3410
msgid "If you call @code{set-face-attribute} and pass a font spec, font entity, or font name string as the value of the @code{:font} attribute, Emacs opens the best ``matching'' font that is available for display.  It then stores the corresponding font object as the actual value of the @code{:font} attribute for that face."
msgstr ""

#. type: Plain text
#: display.texi.orig:3414
msgid "The following functions can be used to obtain information about a font.  For these functions, the @var{font} argument can be a font object, a font entity, or a font spec."
msgstr ""

#. type: defun
#: display.texi.orig:3415
#, no-wrap
msgid "font-get font property"
msgstr ""

#. type: defun
#: display.texi.orig:3418
msgid "This function returns the value of the font property @var{property} for @var{font}."
msgstr ""

#. type: defun
#: display.texi.orig:3423
msgid "If @var{font} is a font spec and the font spec does not specify @var{property}, the return value is @code{nil}.  If @var{font} is a font object or font entity, the value for the @var{:script} property may be a list of scripts supported by the font."
msgstr ""

#. type: defun
#: display.texi.orig:3425
#, no-wrap
msgid "font-face-attributes font &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:3430
msgid "This function returns a list of face attributes corresponding to @var{font}.  The optional argument @var{frame} specifies the frame on which the font is to be displayed.  If it is @code{nil}, the selected frame is used.  The return value has the form"
msgstr ""

#. type: smallexample
#: display.texi.orig:3434
#, no-wrap
msgid ""
"(:family @var{family} :height @var{height} :weight @var{weight}\n"
"   :slant @var{slant} :width @var{width})\n"
msgstr ""

#. type: defun
#: display.texi.orig:3440
msgid "where the values of @var{family}, @var{height}, @var{weight}, @var{slant}, and @var{width} are face attribute values.  Some of these key-attribute pairs may be omitted from the list if they are not specified by @var{font}."
msgstr ""

#. type: defun
#: display.texi.orig:3442
#, no-wrap
msgid "font-xlfd-name font &optional fold-wildcards"
msgstr ""

#. type: defun
#: display.texi.orig:3447
msgid "This function returns the XLFD (X Logical Font Descriptor), a string, matching @var{font}.  @xref{Fonts,,, emacs, The GNU Emacs Manual}, for information about XLFDs.  If the name is too long for an XLFD (which can contain at most 255 characters), the function returns @code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:3450
msgid "If the optional argument @var{fold-wildcards} is non-@code{nil}, consecutive wildcards in the XLFD are folded into one."
msgstr ""

#. type: cindex
#: display.texi.orig:3454
#, no-wrap
msgid "fringes"
msgstr ""

#. type: Plain text
#: display.texi.orig:3459
msgid "On graphical displays, Emacs draws @dfn{fringes} next to each window: thin vertical strips down the sides which can display bitmaps indicating truncation, continuation, horizontal scrolling, and so on."
msgstr ""

#. type: node
#: display.texi.orig:3467 display.texi.orig:3469
#, no-wrap
msgid "Fringe Size/Pos"
msgstr ""

#. type: menuentry
#: display.texi.orig:3467
msgid "Specifying where to put the window fringes."
msgstr ""

#. type: subsection
#: display.texi.orig:3467 display.texi.orig:3524 display.texi.orig:3525
#, no-wrap
msgid "Fringe Indicators"
msgstr ""

#. type: menuentry
#: display.texi.orig:3467
msgid "Displaying indicator icons in the window fringes."
msgstr ""

#. type: subsection
#: display.texi.orig:3467 display.texi.orig:3632 display.texi.orig:3633
#, no-wrap
msgid "Fringe Cursors"
msgstr ""

#. type: menuentry
#: display.texi.orig:3467
msgid "Displaying cursors in the right fringe."
msgstr ""

#. type: subsection
#: display.texi.orig:3467 display.texi.orig:3679 display.texi.orig:3680
#, no-wrap
msgid "Fringe Bitmaps"
msgstr ""

#. type: menuentry
#: display.texi.orig:3467
msgid "Specifying bitmaps for fringe indicators."
msgstr ""

#. type: node
#: display.texi.orig:3467 display.texi.orig:3763
#, no-wrap
msgid "Customizing Bitmaps"
msgstr ""

#. type: menuentry
#: display.texi.orig:3467
msgid "Specifying your own bitmaps to use in the fringes."
msgstr ""

#. type: node
#: display.texi.orig:3467 display.texi.orig:3810
#, no-wrap
msgid "Overlay Arrow"
msgstr ""

#. type: menuentry
#: display.texi.orig:3467
msgid "Display of an arrow to indicate position."
msgstr ""

#. type: subsection
#: display.texi.orig:3470
#, no-wrap
msgid "Fringe Size and Position"
msgstr ""

#. type: Plain text
#: display.texi.orig:3474
msgid "The following buffer-local variables control the position and width of fringes in windows showing that buffer."
msgstr ""

#. type: defvar
#: display.texi.orig:3475
#, no-wrap
msgid "fringes-outside-margins"
msgstr ""

#. type: defvar
#: display.texi.orig:3479
msgid "The fringes normally appear between the display margins and the window text.  If the value is non-@code{nil}, they appear outside the display margins.  @xref{Display Margins}."
msgstr ""

#. type: defvar
#: display.texi.orig:3481
#, no-wrap
msgid "left-fringe-width"
msgstr ""

#. type: defvar
#: display.texi.orig:3485
msgid "This variable, if non-@code{nil}, specifies the width of the left fringe in pixels.  A value of @code{nil} means to use the left fringe width from the window's frame."
msgstr ""

#. type: defvar
#: display.texi.orig:3487
#, no-wrap
msgid "right-fringe-width"
msgstr ""

#. type: defvar
#: display.texi.orig:3491
msgid "This variable, if non-@code{nil}, specifies the width of the right fringe in pixels.  A value of @code{nil} means to use the right fringe width from the window's frame."
msgstr ""

#. type: Plain text
#: display.texi.orig:3496
msgid "Any buffer which does not specify values for these variables uses the values specified by the @code{left-fringe} and @code{right-fringe} frame parameters (@pxref{Layout Parameters})."
msgstr ""

#. type: Plain text
#: display.texi.orig:3504
msgid "The above variables actually take effect via the function @code{set-window-buffer} (@pxref{Buffers and Windows}), which calls @code{set-window-fringes} as a subroutine.  If you change one of these variables, the fringe display is not updated in existing windows showing the buffer, unless you call @code{set-window-buffer} again in each affected window.  You can also use @code{set-window-fringes} to control the fringe display in individual windows."
msgstr ""

#. type: defun
#: display.texi.orig:3505
#, no-wrap
msgid "set-window-fringes window left &optional right outside-margins"
msgstr ""

#. type: defun
#: display.texi.orig:3508
msgid "This function sets the fringe widths of window @var{window}.  If @var{window} is @code{nil}, the selected window is used."
msgstr ""

#. type: defun
#: display.texi.orig:3514
msgid "The argument @var{left} specifies the width in pixels of the left fringe, and likewise @var{right} for the right fringe.  A value of @code{nil} for either one stands for the default width.  If @var{outside-margins} is non-@code{nil}, that specifies that fringes should appear outside of the display margins."
msgstr ""

#. type: defun
#: display.texi.orig:3516
#, no-wrap
msgid "window-fringes &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:3521
msgid "This function returns information about the fringes of a window @var{window}.  If @var{window} is omitted or @code{nil}, the selected window is used.  The value has the form @code{(@var{left-width} @var{right-width} @var{outside-margins})}."
msgstr ""

#. type: cindex
#: display.texi.orig:3526
#, no-wrap
msgid "fringe indicators"
msgstr ""

#. type: cindex
#: display.texi.orig:3527
#, no-wrap
msgid "indicators, fringe"
msgstr ""

#. type: Plain text
#: display.texi.orig:3532
msgid "@dfn{Fringe indicators} are tiny icons displayed in the window fringe to indicate truncated or continued lines, buffer boundaries, etc."
msgstr ""

#. type: defopt
#: display.texi.orig:3533
#, no-wrap
msgid "indicate-empty-lines"
msgstr ""

#. type: cindex
#: display.texi.orig:3534
#, no-wrap
msgid "fringes, and empty line indication"
msgstr ""

#. type: cindex
#: display.texi.orig:3535
#, no-wrap
msgid "empty lines, indicating"
msgstr ""

#. type: defopt
#: display.texi.orig:3540
msgid "When this is non-@code{nil}, Emacs displays a special glyph in the fringe of each empty line at the end of the buffer, on graphical displays.  @xref{Fringes}.  This variable is automatically buffer-local in every buffer."
msgstr ""

#. type: defopt
#: display.texi.orig:3542
#, no-wrap
msgid "indicate-buffer-boundaries"
msgstr ""

#. type: cindex
#: display.texi.orig:3543
#, no-wrap
msgid "buffer boundaries, indicating"
msgstr ""

#. type: defopt
#: display.texi.orig:3546
msgid "This buffer-local variable controls how the buffer boundaries and window scrolling are indicated in the window fringes."
msgstr ""

#. type: defopt
#: display.texi.orig:3552
msgid "Emacs can indicate the buffer boundaries---that is, the first and last line in the buffer---with angle icons when they appear on the screen.  In addition, Emacs can display an up-arrow in the fringe to show that there is text above the screen, and a down-arrow to show there is text below the screen."
msgstr ""

#. type: defopt
#: display.texi.orig:3554
msgid "There are three kinds of basic values:"
msgstr ""

#. type: table
#: display.texi.orig:3558
msgid "Don't display any of these fringe icons."
msgstr ""

#. type: code{#1}
#: display.texi.orig:3558
#, no-wrap
msgid "left"
msgstr ""

#. type: table
#: display.texi.orig:3560
msgid "Display the angle icons and arrows in the left fringe."
msgstr ""

#. type: code{#1}
#: display.texi.orig:3560
#, no-wrap
msgid "right"
msgstr ""

#. type: table
#: display.texi.orig:3562
msgid "Display the angle icons and arrows in the right fringe."
msgstr ""

#. type: item
#: display.texi.orig:3562
#, no-wrap
msgid "any non-alist"
msgstr ""

#. type: table
#: display.texi.orig:3565
msgid "Display the angle icons in the left fringe and don't display the arrows."
msgstr ""

#. type: defopt
#: display.texi.orig:3574
msgid "Otherwise the value should be an alist that specifies which fringe indicators to display and where.  Each element of the alist should have the form @code{(@var{indicator} . @var{position})}.  Here, @var{indicator} is one of @code{top}, @code{bottom}, @code{up}, @code{down}, and @code{t} (which covers all the icons not yet specified), while @var{position} is one of @code{left}, @code{right} and @code{nil}."
msgstr ""

#. type: defopt
#: display.texi.orig:3579
msgid "For example, @code{((top . left) (t . right))} places the top angle bitmap in left fringe, and the bottom angle bitmap as well as both arrow bitmaps in right fringe.  To show the angle bitmaps in the left fringe, and no arrow bitmaps, use @code{((top .  left) (bottom . left))}."
msgstr ""

#. type: defvar
#: display.texi.orig:3581
#, no-wrap
msgid "fringe-indicator-alist"
msgstr ""

#. type: defvar
#: display.texi.orig:3588
msgid "This buffer-local variable specifies the mapping from logical fringe indicators to the actual bitmaps displayed in the window fringes.  The value is an alist of elements @code{(@var{indicator} . @var{bitmaps})}, where @var{indicator} specifies a logical indicator type and @var{bitmaps} specifies the fringe bitmaps to use for that indicator."
msgstr ""

#. type: defvar
#: display.texi.orig:3590
msgid "Each @var{indicator} should be one of the following symbols:"
msgstr ""

#. type: item
#: display.texi.orig:3592
#, no-wrap
msgid "@code{truncation}, @code{continuation}."
msgstr ""

#. type: table
#: display.texi.orig:3594
msgid "Used for truncation and continuation lines."
msgstr ""

#. type: item
#: display.texi.orig:3595
#, no-wrap
msgid "@code{up}, @code{down}, @code{top}, @code{bottom}, @code{top-bottom}"
msgstr ""

#. type: table
#: display.texi.orig:3601
msgid "Used when @code{indicate-buffer-boundaries} is non-@code{nil}: @code{up} and @code{down} indicate a buffer boundary lying above or below the window edge; @code{top} and @code{bottom} indicate the topmost and bottommost buffer text line; and @code{top-bottom} indicates where there is just one line of text in the buffer."
msgstr ""

#. type: code{#1}
#: display.texi.orig:3602
#, no-wrap
msgid "empty-line"
msgstr ""

#. type: table
#: display.texi.orig:3605
msgid "Used to indicate empty lines when @code{indicate-empty-lines} is non-@code{nil}."
msgstr ""

#. type: code{#1}
#: display.texi.orig:3606
#, no-wrap
msgid "overlay-arrow"
msgstr ""

#. type: table
#: display.texi.orig:3611
msgid "Used for overlay arrows (@pxref{Overlay Arrow})."
msgstr ""

#. type: defvar
#: display.texi.orig:3621
msgid "Each @var{bitmaps} value may be a list of symbols @code{(@var{left} @var{right} [@var{left1} @var{right1}])}.  The @var{left} and @var{right} symbols specify the bitmaps shown in the left and/or right fringe, for the specific indicator.  @var{left1} and @var{right1} are specific to the @code{bottom} and @code{top-bottom} indicators, and are used to indicate that the last text line has no final newline.  Alternatively, @var{bitmaps} may be a single symbol which is used in both left and right fringes."
msgstr ""

#. type: defvar
#: display.texi.orig:3625
msgid "@xref{Fringe Bitmaps}, for a list of standard bitmap symbols and how to define your own.  In addition, @code{nil} represents the empty bitmap (i.e., an indicator that is not shown)."
msgstr ""

#. type: defvar
#: display.texi.orig:3630
msgid "When @code{fringe-indicator-alist} has a buffer-local value, and there is no bitmap defined for a logical indicator, or the bitmap is @code{t}, the corresponding value from the default value of @code{fringe-indicator-alist} is used."
msgstr ""

#. type: cindex
#: display.texi.orig:3634
#, no-wrap
msgid "fringe cursors"
msgstr ""

#. type: cindex
#: display.texi.orig:3635
#, no-wrap
msgid "cursor, fringe"
msgstr ""

#. type: Plain text
#: display.texi.orig:3641
msgid "When a line is exactly as wide as the window, Emacs displays the cursor in the right fringe instead of using two lines.  Different bitmaps are used to represent the cursor in the fringe depending on the current buffer's cursor type."
msgstr ""

#. type: defopt
#: display.texi.orig:3642
#, no-wrap
msgid "overflow-newline-into-fringe"
msgstr ""

#. type: defopt
#: display.texi.orig:3647
msgid "If this is non-@code{nil}, lines exactly as wide as the window (not counting the final newline character) are not continued.  Instead, when point is at the end of the line, the cursor appears in the right fringe."
msgstr ""

#. type: defvar
#: display.texi.orig:3649
#, no-wrap
msgid "fringe-cursor-alist"
msgstr ""

#. type: defvar
#: display.texi.orig:3655
msgid "This variable specifies the mapping from logical cursor type to the actual fringe bitmaps displayed in the right fringe.  The value is an alist where each element has the form @code{(@var{cursor-type} . @var{bitmap})}, which means to use the fringe bitmap @var{bitmap} to display cursors of type @var{cursor-type}."
msgstr ""

#. type: defvar
#: display.texi.orig:3662
msgid "Each @var{cursor-type} should be one of @code{box}, @code{hollow}, @code{bar}, @code{hbar}, or @code{hollow-small}.  The first four have the same meanings as in the @code{cursor-type} frame parameter (@pxref{Cursor Parameters}).  The @code{hollow-small} type is used instead of @code{hollow} when the normal @code{hollow-rectangle} bitmap is too tall to fit on a specific display line."
msgstr ""

#. type: defvar
#: display.texi.orig:3665
msgid "Each @var{bitmap} should be a symbol specifying the fringe bitmap to be displayed for that logical cursor type."
msgstr ""

#. type: iftex
#: display.texi.orig:3667
msgid "See the next subsection for details."
msgstr ""

#. type: ifnottex
#: display.texi.orig:3670
msgid "@xref{Fringe Bitmaps}."
msgstr ""

#. type: defvar
#: display.texi.orig:3677
msgid "When @code{fringe-cursor-alist} has a buffer-local value, and there is no bitmap defined for a cursor type, the corresponding value from the default value of @code{fringes-indicator-alist} is used."
msgstr ""

#. type: cindex
#: display.texi.orig:3681
#, no-wrap
msgid "fringe bitmaps"
msgstr ""

#. type: cindex
#: display.texi.orig:3682
#, no-wrap
msgid "bitmaps, fringe"
msgstr ""

#. type: Plain text
#: display.texi.orig:3688
msgid "The @dfn{fringe bitmaps} are the actual bitmaps which represent the logical fringe indicators for truncated or continued lines, buffer boundaries, overlay arrows, etc.  Each bitmap is represented by a symbol."
msgstr ""

#. type: iftex
#: display.texi.orig:3692
msgid "These symbols are referred to by the variables @code{fringe-indicator-alist} and @code{fringe-cursor-alist}, described in the previous subsections."
msgstr ""

#. type: ifnottex
#: display.texi.orig:3699
msgid "These symbols are referred to by the variable @code{fringe-indicator-alist}, which maps fringe indicators to bitmaps (@pxref{Fringe Indicators}), and the variable @code{fringe-cursor-alist}, which maps fringe cursors to bitmaps (@pxref{Fringe Cursors})."
msgstr ""

#. type: Plain text
#: display.texi.orig:3705
msgid "Lisp programs can also directly display a bitmap in the left or right fringe, by using a @code{display} property for one of the characters appearing in the line (@pxref{Other Display Specs}).  Such a display specification has the form"
msgstr ""

#. type: example
#: display.texi.orig:3708
#, no-wrap
msgid "(@var{fringe} @var{bitmap} [@var{face}])\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:3716
msgid "@var{fringe} is either the symbol @code{left-fringe} or @code{right-fringe}.  @var{bitmap} is a symbol identifying the bitmap to display.  The optional @var{face} names a face whose foreground color is used to display the bitmap; this face is automatically merged with the @code{fringe} face."
msgstr ""

#. type: Plain text
#: display.texi.orig:3720
msgid "Here is a list of the standard fringe bitmaps defined in Emacs, and how they are currently used in Emacs (via @code{fringe-indicator-alist} and @code{fringe-cursor-alist}):"
msgstr ""

#. type: item
#: display.texi.orig:3722
#, no-wrap
msgid "@code{left-arrow}, @code{right-arrow}"
msgstr ""

#. type: table
#: display.texi.orig:3724
msgid "Used to indicate truncated lines."
msgstr ""

#. type: item
#: display.texi.orig:3725
#, no-wrap
msgid "@code{left-curly-arrow}, @code{right-curly-arrow}"
msgstr ""

#. type: table
#: display.texi.orig:3727
msgid "Used to indicate continued lines."
msgstr ""

#. type: item
#: display.texi.orig:3728
#, no-wrap
msgid "@code{right-triangle}, @code{left-triangle}"
msgstr ""

#. type: table
#: display.texi.orig:3730
msgid "The former is used by overlay arrows.  The latter is unused."
msgstr ""

#. type: item
#: display.texi.orig:3731
#, no-wrap
msgid "@code{up-arrow}, @code{down-arrow}, @code{top-left-angle} @code{top-right-angle}"
msgstr ""

#. type: itemx
#: display.texi.orig:3732
#, no-wrap
msgid "@code{bottom-left-angle}, @code{bottom-right-angle}"
msgstr ""

#. type: itemx
#: display.texi.orig:3733
#, no-wrap
msgid "@code{top-right-angle}, @code{top-left-angle}"
msgstr ""

#. type: itemx
#: display.texi.orig:3734
#, no-wrap
msgid "@code{left-bracket}, @code{right-bracket}, @code{top-right-angle}, @code{top-left-angle}"
msgstr ""

#. type: table
#: display.texi.orig:3736
msgid "Used to indicate buffer boundaries."
msgstr ""

#. type: item
#: display.texi.orig:3737
#, no-wrap
msgid "@code{filled-rectangle}, @code{hollow-rectangle}"
msgstr ""

#. type: itemx
#: display.texi.orig:3738
#, no-wrap
msgid "@code{filled-square}, @code{hollow-square}"
msgstr ""

#. type: itemx
#: display.texi.orig:3739
#, no-wrap
msgid "@code{vertical-bar}, @code{horizontal-bar}"
msgstr ""

#. type: table
#: display.texi.orig:3741
msgid "Used for different types of fringe cursors."
msgstr ""

#. type: item
#: display.texi.orig:3742
#, no-wrap
msgid "@code{empty-line}, @code{exclamation-mark}, @code{question-mark}, @code{exclamation-mark}"
msgstr ""

#. type: table
#: display.texi.orig:3744
msgid "Not used by core Emacs features."
msgstr ""

#. type: Plain text
#: display.texi.orig:3748
msgid "The next subsection describes how to define your own fringe bitmaps."
msgstr ""

#. type: defun
#: display.texi.orig:3749
#, no-wrap
msgid "fringe-bitmaps-at-pos &optional pos window"
msgstr ""

#. type: defun
#: display.texi.orig:3756
msgid "This function returns the fringe bitmaps of the display line containing position @var{pos} in window @var{window}.  The return value has the form @code{(@var{left} @var{right} @var{ov})}, where @var{left} is the symbol for the fringe bitmap in the left fringe (or @code{nil} if no bitmap), @var{right} is similar for the right fringe, and @var{ov} is non-@code{nil} if there is an overlay arrow in the left fringe."
msgstr ""

#. type: defun
#: display.texi.orig:3761
msgid "The value is @code{nil} if @var{pos} is not visible in @var{window}.  If @var{window} is @code{nil}, that stands for the selected window.  If @var{pos} is @code{nil}, that stands for the value of point in @var{window}."
msgstr ""

#. type: subsection
#: display.texi.orig:3764
#, no-wrap
msgid "Customizing Fringe Bitmaps"
msgstr ""

#. type: cindex
#: display.texi.orig:3765
#, no-wrap
msgid "fringe bitmaps, customizing"
msgstr ""

#. type: defun
#: display.texi.orig:3767
#, no-wrap
msgid "define-fringe-bitmap bitmap bits &optional height width align"
msgstr ""

#. type: defun
#: display.texi.orig:3770
msgid "This function defines the symbol @var{bitmap} as a new fringe bitmap, or replaces an existing bitmap with that name."
msgstr ""

#. type: defun
#: display.texi.orig:3776
msgid "The argument @var{bits} specifies the image to use.  It should be either a string or a vector of integers, where each element (an integer) corresponds to one row of the bitmap.  Each bit of an integer corresponds to one pixel of the bitmap, where the low bit corresponds to the rightmost pixel of the bitmap."
msgstr ""

#. type: defun
#: display.texi.orig:3781
msgid "The height is normally the length of @var{bits}.  However, you can specify a different height with non-@code{nil} @var{height}.  The width is normally 8, but you can specify a different width with non-@code{nil} @var{width}.  The width must be an integer between 1 and 16."
msgstr ""

#. type: defun
#: display.texi.orig:3786
msgid "The argument @var{align} specifies the positioning of the bitmap relative to the range of rows where it is used; the default is to center the bitmap.  The allowed values are @code{top}, @code{center}, or @code{bottom}."
msgstr ""

#. type: defun
#: display.texi.orig:3792
msgid "The @var{align} argument may also be a list @code{(@var{align} @var{periodic})} where @var{align} is interpreted as described above.  If @var{periodic} is non-@code{nil}, it specifies that the rows in @code{bits} should be repeated enough times to reach the specified height."
msgstr ""

#. type: defun
#: display.texi.orig:3794
#, no-wrap
msgid "destroy-fringe-bitmap bitmap"
msgstr ""

#. type: defun
#: display.texi.orig:3799
msgid "This function destroy the fringe bitmap identified by @var{bitmap}.  If @var{bitmap} identifies a standard fringe bitmap, it actually restores the standard definition of that bitmap, instead of eliminating it entirely."
msgstr ""

#. type: defun
#: display.texi.orig:3801
#, no-wrap
msgid "set-fringe-bitmap-face bitmap &optional face"
msgstr ""

#. type: defun
#: display.texi.orig:3805
msgid "This sets the face for the fringe bitmap @var{bitmap} to @var{face}.  If @var{face} is @code{nil}, it selects the @code{fringe} face.  The bitmap's face controls the color to draw it in."
msgstr ""

#. type: defun
#: display.texi.orig:3808
msgid "@var{face} is merged with the @code{fringe} face, so normally @var{face} should specify only the foreground color."
msgstr ""

#. type: subsection
#: display.texi.orig:3811
#, no-wrap
msgid "The Overlay Arrow"
msgstr ""

#. type: Plain text
#: display.texi.orig:3819
msgid "The @dfn{overlay arrow} is useful for directing the user's attention to a particular line in a buffer.  For example, in the modes used for interface to debuggers, the overlay arrow indicates the line of code about to be executed.  This feature has nothing to do with @dfn{overlays} (@pxref{Overlays})."
msgstr ""

#. type: defvar
#: display.texi.orig:3820
#, no-wrap
msgid "overlay-arrow-string"
msgstr ""

#. type: defvar
#: display.texi.orig:3825
msgid "This variable holds the string to display to call attention to a particular line, or @code{nil} if the arrow feature is not in use.  On a graphical display the contents of the string are ignored; instead a glyph is displayed in the fringe area to the left of the display area."
msgstr ""

#. type: defvar
#: display.texi.orig:3827
#, no-wrap
msgid "overlay-arrow-position"
msgstr ""

#. type: defvar
#: display.texi.orig:3835
msgid "This variable holds a marker that indicates where to display the overlay arrow.  It should point at the beginning of a line.  On a non-graphical display the arrow text appears at the beginning of that line, overlaying any text that would otherwise appear.  Since the arrow is usually short, and the line usually begins with indentation, normally nothing significant is overwritten."
msgstr ""

#. type: defvar
#: display.texi.orig:3845
msgid "The overlay-arrow string is displayed in any given buffer if the value of @code{overlay-arrow-position} in that buffer points into that buffer.  Thus, it is possible to display multiple overlay arrow strings by creating buffer-local bindings of @code{overlay-arrow-position}.  However, it is usually cleaner to use @code{overlay-arrow-variable-list} to achieve this result."
msgstr ""

#. type: Plain text
#: display.texi.orig:3849
msgid "You can do a similar job by creating an overlay with a @code{before-string} property.  @xref{Overlay Properties}."
msgstr ""

#. type: Plain text
#: display.texi.orig:3852
msgid "You can define multiple overlay arrows via the variable @code{overlay-arrow-variable-list}."
msgstr ""

#. type: defvar
#: display.texi.orig:3853
#, no-wrap
msgid "overlay-arrow-variable-list"
msgstr ""

#. type: defvar
#: display.texi.orig:3858
msgid "This variable's value is a list of variables, each of which specifies the position of an overlay arrow.  The variable @code{overlay-arrow-position} has its normal meaning because it is on this list."
msgstr ""

#. type: Plain text
#: display.texi.orig:3867
msgid "Each variable on this list can have properties @code{overlay-arrow-string} and @code{overlay-arrow-bitmap} that specify an overlay arrow string (for text terminals) or fringe bitmap (for graphical terminals) to display at the corresponding overlay arrow position.  If either property is not set, the default @code{overlay-arrow-string} or @code{overlay-arrow} fringe indicator is used."
msgstr ""

#. type: cindex
#: display.texi.orig:3870
#, no-wrap
msgid "scroll bars"
msgstr ""

#. type: Plain text
#: display.texi.orig:3877
msgid "Normally the frame parameter @code{vertical-scroll-bars} controls whether the windows in the frame have vertical scroll bars, and whether they are on the left or right.  The frame parameter @code{scroll-bar-width} specifies how wide they are (@code{nil} meaning the default).  @xref{Layout Parameters}."
msgstr ""

#. type: defun
#: display.texi.orig:3878
#, no-wrap
msgid "frame-current-scroll-bars &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:3886
msgid "This function reports the scroll bar type settings for frame @var{frame}.  The value is a cons cell @code{(@var{vertical-type} .@: @var{horizontal-type})}, where @var{vertical-type} is either @code{left}, @code{right}, or @code{nil} (which means no scroll bar.)  @var{horizontal-type} is meant to specify the horizontal scroll bar type, but since they are not implemented, it is always @code{nil}."
msgstr ""

#. type: vindex
#: display.texi.orig:3888
#, no-wrap
msgid "vertical-scroll-bar"
msgstr ""

#. type: Plain text
#: display.texi.orig:3894
msgid "You can enable or disable scroll bars for a particular buffer, by setting the variable @code{vertical-scroll-bar}.  This variable automatically becomes buffer-local when set.  The possible values are @code{left}, @code{right}, @code{t}, which means to use the frame's default, and @code{nil} for no scroll bar."
msgstr ""

#. type: Plain text
#: display.texi.orig:3897
msgid "You can also control this for individual windows.  Call the function @code{set-window-scroll-bars} to specify what to do for a specific window:"
msgstr ""

#. type: defun
#: display.texi.orig:3898
#, no-wrap
msgid "set-window-scroll-bars window width &optional vertical-type horizontal-type"
msgstr ""

#. type: defun
#: display.texi.orig:3901
msgid "This function sets the width and type of scroll bars for window @var{window}."
msgstr ""

#. type: defun
#: display.texi.orig:3907
msgid "@var{width} specifies the scroll bar width in pixels (@code{nil} means use the width specified for the frame).  @var{vertical-type} specifies whether to have a vertical scroll bar and, if so, where.  The possible values are @code{left}, @code{right} and @code{nil}, just like the values of the @code{vertical-scroll-bars} frame parameter."
msgstr ""

#. type: defun
#: display.texi.orig:3912
msgid "The argument @var{horizontal-type} is meant to specify whether and where to have horizontal scroll bars, but since they are not implemented, it has no effect.  If @var{window} is @code{nil}, the selected window is used."
msgstr ""

#. type: defun
#: display.texi.orig:3914
#, no-wrap
msgid "window-scroll-bars &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:3922
msgid "Report the width and type of scroll bars specified for @var{window}.  If @var{window} is omitted or @code{nil}, the selected window is used.  The value is a list of the form @code{(@var{width} @var{cols} @var{vertical-type} @var{horizontal-type})}.  The value @var{width} is the value that was specified for the width (which may be @code{nil}); @var{cols} is the number of columns that the scroll bar actually occupies."
msgstr ""

#. type: defun
#: display.texi.orig:3924
msgid "@var{horizontal-type} is not actually meaningful."
msgstr ""

#. type: defun
#: display.texi.orig:3926
#, no-wrap
msgid "window-scroll-bar-width &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:3930
msgid "This function returns the width in pixels of @var{window}'s vertical scrollbar.  @var{window} must be a live window, and defaults to the selected window."
msgstr ""

#. type: Plain text
#: display.texi.orig:3940
msgid "If you don't specify these values for a window with @code{set-window-scroll-bars}, the buffer-local variables @code{scroll-bar-mode} and @code{scroll-bar-width} in the buffer being displayed control the window's vertical scroll bars.  The function @code{set-window-buffer} examines these variables.  If you change them in a buffer that is already visible in a window, you can make the window take note of the new values by calling @code{set-window-buffer} specifying the same buffer that is already displayed."
msgstr ""

#. type: defopt
#: display.texi.orig:3941
#, no-wrap
msgid "scroll-bar-mode"
msgstr ""

#. type: defopt
#: display.texi.orig:3946
msgid "This variable, always local in all buffers, controls whether and where to put scroll bars in windows displaying the buffer.  The possible values are @code{nil} for no scroll bar, @code{left} to put a scroll bar on the left, and @code{right} to put a scroll bar on the right."
msgstr ""

#. type: defun
#: display.texi.orig:3948
#, no-wrap
msgid "window-current-scroll-bars &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:3956
msgid "This function reports the scroll bar type for window @var{window}.  If @var{window} is omitted or @code{nil}, the selected window is used.  The value is a cons cell @code{(@var{vertical-type} .@: @var{horizontal-type})}.  Unlike @code{window-scroll-bars}, this reports the scroll bar type actually used, once frame defaults and @code{scroll-bar-mode} are taken into account."
msgstr ""

#. type: defvar
#: display.texi.orig:3958
#, no-wrap
msgid "scroll-bar-width"
msgstr ""

#. type: defvar
#: display.texi.orig:3962
msgid "This variable, always local in all buffers, specifies the width of the buffer's scroll bars, measured in pixels.  A value of @code{nil} means to use the value specified by the frame."
msgstr ""

#. type: cindex
#: display.texi.orig:3966
#, no-wrap
msgid "window dividers"
msgstr ""

#. type: cindex
#: display.texi.orig:3967
#, no-wrap
msgid "right dividers"
msgstr ""

#. type: cindex
#: display.texi.orig:3968
#, no-wrap
msgid "bottom dividers"
msgstr ""

#. type: Plain text
#: display.texi.orig:3978
msgid "Window dividers are bars drawn between a frame's windows.  A ``right'' divider is drawn between a window and any adjacent windows on the right.  Its width (thickness) is specified by the frame parameter @code{right-divider-width}.  A ``bottom'' divider is drawn between a window and adjacent windows on the bottom or the echo area.  Its width is specified by the frame parameter @code{bottom-divider-width}.  In either case, specifying a width of zero means to not draw such dividers.  @xref{Layout Parameters}."
msgstr ""

#. type: Plain text
#: display.texi.orig:3987
msgid "Technically, a right divider ``belongs'' to the window on its left, which means that its width contributes to the total width of that window.  A bottom divider ``belongs'' to the window above it, which means that its width contributes to the total height of that window.  @xref{Window Sizes}.  When a window has both, a right and a bottom divider, the bottom divider ``prevails''.  This means that a bottom divider is drawn over the full total width of its window while the right divider ends above the bottom divider."
msgstr ""

#. type: Plain text
#: display.texi.orig:3993
msgid "Dividers can be dragged with the mouse and are therefore useful for adjusting the sizes of adjacent windows with the mouse.  They also serve to visually set apart adjacent windows when no scroll bars or mode lines are present.  The following three faces allow to customize the appearance of dividers:"
msgstr ""

#. type: item
#: display.texi.orig:3995
#, no-wrap
msgid "window-divider"
msgstr ""

#. type: table
#: display.texi.orig:3999
msgid "When a divider is less than three pixels wide, it is drawn solidly with the foreground of this face.  For larger dividers this face is used for the inner part only, excluding the first and last pixel."
msgstr ""

#. type: item
#: display.texi.orig:4000
#, no-wrap
msgid "window-divider-first-pixel"
msgstr ""

#. type: table
#: display.texi.orig:4004
msgid "This is the face used for drawing the first pixel of a divider that is at least three pixels wide.  To obtain a solid appearance, set this to the same value used for the @code{window-divider} face."
msgstr ""

#. type: item
#: display.texi.orig:4005
#, no-wrap
msgid "window-divider-last-pixel"
msgstr ""

#. type: table
#: display.texi.orig:4009
msgid "This is the face used for drawing the last pixel of a divider that is at least three pixels wide.  To obtain a solid appearance, set this to the same value used for the @code{window-divider} face."
msgstr ""

#. type: Plain text
#: display.texi.orig:4013
msgid "You can get the sizes of the dividers of a specific window with the following two functions."
msgstr ""

#. type: defun
#: display.texi.orig:4014
#, no-wrap
msgid "window-right-divider-width &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:4018
msgid "Return the width (thickness) in pixels of @var{window}'s right divider.  @var{window} must be a live window and defaults to the selected one.  The return value is always zero for a rightmost window."
msgstr ""

#. type: defun
#: display.texi.orig:4020
#, no-wrap
msgid "window-bottom-divider-width &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:4025
msgid "Return the width (thickness) in pixels of @var{window}'s bottom divider.  @var{window} must be a live window and defaults to the selected one.  The return value is zero for the minibuffer window or a bottommost window on a minibuffer-less frame."
msgstr ""

#. type: section
#: display.texi.orig:4029
#, no-wrap
msgid "The @code{display} Property"
msgstr ""

#. type: cindex
#: display.texi.orig:4030
#, no-wrap
msgid "display specification"
msgstr ""

#. type: kindex
#: display.texi.orig:4031
#, no-wrap
msgid "display @r{(text property)}"
msgstr ""

#. type: Plain text
#: display.texi.orig:4039
msgid "The @code{display} text property (or overlay property) is used to insert images into text, and to control other aspects of how text displays.  The value of the @code{display} property should be a display specification, or a list or vector containing several display specifications.  Display specifications in the same @code{display} property value generally apply in parallel to the text they cover."
msgstr ""

#. type: Plain text
#: display.texi.orig:4044
msgid "If several sources (overlays and/or a text property) specify values for the @code{display} property, only one of the values takes effect, following the rules of @code{get-char-property}.  @xref{Examining Properties}."
msgstr ""

#. type: Plain text
#: display.texi.orig:4047
msgid "The rest of this section describes several kinds of display specifications and what they mean."
msgstr ""

#. type: node
#: display.texi.orig:4055 display.texi.orig:4057
#, no-wrap
msgid "Replacing Specs"
msgstr ""

#. type: menuentry
#: display.texi.orig:4055
msgid "Display specs that replace the text."
msgstr ""

#. type: node
#: display.texi.orig:4055 display.texi.orig:4104
#, no-wrap
msgid "Specified Space"
msgstr ""

#. type: menuentry
#: display.texi.orig:4055
msgid "Displaying one space with a specified width."
msgstr ""

#. type: node
#: display.texi.orig:4055 display.texi.orig:4171
#, no-wrap
msgid "Pixel Specification"
msgstr ""

#. type: menuentry
#: display.texi.orig:4055
msgid "Specifying space width or height in pixels."
msgstr ""

#. type: node
#: display.texi.orig:4055 display.texi.orig:4243
#, no-wrap
msgid "Other Display Specs"
msgstr ""

#. type: menuentry
#: display.texi.orig:4055
msgid "Displaying an image; adjusting the height, spacing, and other properties of text."
msgstr ""

#. type: node
#: display.texi.orig:4055 display.texi.orig:4351
#, no-wrap
msgid "Display Margins"
msgstr ""

#. type: menuentry
#: display.texi.orig:4055
msgid "Displaying text or images to the side of the main text."
msgstr ""

#. type: subsection
#: display.texi.orig:4058
#, no-wrap
msgid "Display Specs That Replace The Text"
msgstr ""

#. type: cindex
#: display.texi.orig:4059
#, no-wrap
msgid "replacing display specs"
msgstr ""

#. type: Plain text
#: display.texi.orig:4066
msgid "Some kinds of display specifications specify something to display instead of the text that has the property.  These are called @dfn{replacing} display specifications.  Emacs does not allow the user to interactively move point into the middle of buffer text that is replaced in this way."
msgstr ""

#. type: Plain text
#: display.texi.orig:4071
msgid "If a list of display specifications includes more than one replacing display specification, the first overrides the rest.  Replacing display specifications make most other display specifications irrelevant, since those don't apply to the replacement."
msgstr ""

#. type: Plain text
#: display.texi.orig:4078
msgid "For replacing display specifications, ``the text that has the property'' means all the consecutive characters that have the same Lisp object as their @code{display} property; these characters are replaced as a single unit.  If two characters have different Lisp objects as their @code{display} properties (i.e., objects which are not @code{eq}), they are handled separately."
msgstr ""

#. type: Plain text
#: display.texi.orig:4083
msgid "Here is an example which illustrates this point.  A string serves as a replacing display specification, which replaces the text that has the property with the specified string (@pxref{Other Display Specs}).  Consider the following function:"
msgstr ""

#. type: smallexample
#: display.texi.orig:4091
#, no-wrap
msgid ""
"(defun foo ()\n"
"  (dotimes (i 5)\n"
"    (let ((string (concat \"A\"))\n"
"          (start (+ i i (point-min))))\n"
"      (put-text-property start (1+ start) 'display string)\n"
"      (put-text-property start (+ 2 start) 'display string))))\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:4103
msgid "This function gives each of the first ten characters in the buffer a @code{display} property which is a string @code{\"A\"}, but they don't all get the same string object.  The first two characters get the same string object, so they are replaced with one @samp{A}; the fact that the display property was assigned in two separate calls to @code{put-text-property} is irrelevant.  Similarly, the next two characters get a second string (@code{concat} creates a new string object), so they are replaced with one @samp{A}; and so on.  Thus, the ten characters appear as five A's."
msgstr ""

#. type: subsection
#: display.texi.orig:4105
#, no-wrap
msgid "Specified Spaces"
msgstr ""

#. type: cindex
#: display.texi.orig:4106
#, no-wrap
msgid "spaces, specified height or width"
msgstr ""

#. type: cindex
#: display.texi.orig:4107
#, no-wrap
msgid "variable-width spaces"
msgstr ""

#. type: Plain text
#: display.texi.orig:4116
msgid "To display a space of specified width and/or height, use a display specification of the form @code{(space . @var{props})}, where @var{props} is a property list (a list of alternating properties and values).  You can put this property on one or more consecutive characters; a space of the specified height and width is displayed in place of @emph{all} of those characters.  These are the properties you can use in @var{props} to specify the weight of the space:"
msgstr ""

#. type: item
#: display.texi.orig:4118 display.texi.orig:4756
#, no-wrap
msgid ":width @var{width}"
msgstr ""

#. type: table
#: display.texi.orig:4123
msgid "If @var{width} is a number, it specifies that the space width should be @var{width} times the normal character width.  @var{width} can also be a @dfn{pixel width} specification (@pxref{Pixel Specification})."
msgstr ""

#. type: item
#: display.texi.orig:4124
#, no-wrap
msgid ":relative-width @var{factor}"
msgstr ""

#. type: table
#: display.texi.orig:4129
msgid "Specifies that the width of the stretch should be computed from the first character in the group of consecutive characters that have the same @code{display} property.  The space width is the width of that character, multiplied by @var{factor}."
msgstr ""

#. type: item
#: display.texi.orig:4130
#, no-wrap
msgid ":align-to @var{hpos}"
msgstr ""

#. type: table
#: display.texi.orig:4135
msgid "Specifies that the space should be wide enough to reach @var{hpos}.  If @var{hpos} is a number, it is measured in units of the normal character width.  @var{hpos} can also be a @dfn{pixel width} specification (@pxref{Pixel Specification})."
msgstr ""

#. type: Plain text
#: display.texi.orig:4139
msgid "You should use one and only one of the above properties.  You can also specify the height of the space, with these properties:"
msgstr ""

#. type: item
#: display.texi.orig:4141 display.texi.orig:4759
#, no-wrap
msgid ":height @var{height}"
msgstr ""

#. type: table
#: display.texi.orig:4147
msgid "Specifies the height of the space.  If @var{height} is a number, it specifies that the space height should be @var{height} times the normal character height.  The @var{height} may also be a @dfn{pixel height} specification (@pxref{Pixel Specification})."
msgstr ""

#. type: item
#: display.texi.orig:4148
#, no-wrap
msgid ":relative-height @var{factor}"
msgstr ""

#. type: table
#: display.texi.orig:4151
msgid "Specifies the height of the space, multiplying the ordinary height of the text having this display specification by @var{factor}."
msgstr ""

#. type: item
#: display.texi.orig:4152 display.texi.orig:4543
#, no-wrap
msgid ":ascent @var{ascent}"
msgstr ""

#. type: table
#: display.texi.orig:4158
msgid "If the value of @var{ascent} is a non-negative number no greater than 100, it specifies that @var{ascent} percent of the height of the space should be considered as the ascent of the space---that is, the part above the baseline.  The ascent may also be specified in pixel units with a @dfn{pixel ascent} specification (@pxref{Pixel Specification})."
msgstr ""

#. type: Plain text
#: display.texi.orig:4162
msgid "Don't use both @code{:height} and @code{:relative-height} together."
msgstr ""

#. type: Plain text
#: display.texi.orig:4166
msgid "The @code{:width} and @code{:align-to} properties are supported on non-graphic terminals, but the other space properties in this section are not."
msgstr ""

#. type: Plain text
#: display.texi.orig:4170
msgid "Note that space properties are treated as paragraph separators for the purposes of reordering bidirectional text for display.  @xref{Bidirectional Display}, for the details."
msgstr ""

#. type: subsection
#: display.texi.orig:4172
#, no-wrap
msgid "Pixel Specification for Spaces"
msgstr ""

#. type: cindex
#: display.texi.orig:4173
#, no-wrap
msgid "spaces, pixel specification"
msgstr ""

#. type: Plain text
#: display.texi.orig:4179
msgid "The value of the @code{:width}, @code{:align-to}, @code{:height}, and @code{:ascent} properties can be a special kind of expression that is evaluated during redisplay.  The result of the evaluation is used as an absolute number of pixels."
msgstr ""

#. type: Plain text
#: display.texi.orig:4181
msgid "The following expressions are supported:"
msgstr ""

#. type: group
#: display.texi.orig:4187
#, no-wrap
msgid ""
"  @var{expr} ::= @var{num} | (@var{num}) | @var{unit} | @var{elem} | @var{pos} | @var{image} | @var{form}\n"
"  @var{num}  ::= @var{integer} | @var{float} | @var{symbol}\n"
"  @var{unit} ::= in | mm | cm | width | height\n"
msgstr ""

#. type: group
#: display.texi.orig:4194
#, no-wrap
msgid ""
"  @var{elem} ::= left-fringe | right-fringe | left-margin | right-margin\n"
"        |  scroll-bar | text\n"
"  @var{pos}  ::= left | center | right\n"
"  @var{form} ::= (@var{num} . @var{expr}) | (@var{op} @var{expr} ...)\n"
"  @var{op}   ::= + | -\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:4201
msgid "The form @var{num} specifies a fraction of the default frame font height or width.  The form @code{(@var{num})} specifies an absolute number of pixels.  If @var{num} is a symbol, @var{symbol}, its buffer-local variable binding is used."
msgstr ""

#. type: Plain text
#: display.texi.orig:4207
msgid "The @code{in}, @code{mm}, and @code{cm} units specify the number of pixels per inch, millimeter, and centimeter, respectively.  The @code{width} and @code{height} units correspond to the default width and height of the current face.  An image specification @code{image} corresponds to the width or height of the image."
msgstr ""

#. type: Plain text
#: display.texi.orig:4212
msgid "The elements @code{left-fringe}, @code{right-fringe}, @code{left-margin}, @code{right-margin}, @code{scroll-bar}, and @code{text} specify to the width of the corresponding area of the window."
msgstr ""

#. type: Plain text
#: display.texi.orig:4216
msgid "The @code{left}, @code{center}, and @code{right} positions can be used with @code{:align-to} to specify a position relative to the left edge, center, or right edge of the text area."
msgstr ""

#. type: Plain text
#: display.texi.orig:4224
msgid "Any of the above window elements (except @code{text}) can also be used with @code{:align-to} to specify that the position is relative to the left edge of the given area.  Once the base offset for a relative position has been set (by the first occurrence of one of these symbols), further occurrences of these symbols are interpreted as the width of the specified area.  For example, to align to the center of the left-margin, use"
msgstr ""

#. type: example
#: display.texi.orig:4227
#, no-wrap
msgid ":align-to (+ left-margin (0.5 . left-margin))\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:4232
msgid "If no specific base offset is set for alignment, it is always relative to the left edge of the text area.  For example, @samp{:align-to 0} in a header-line aligns with the first text column in the text area."
msgstr ""

#. type: Plain text
#: display.texi.orig:4238
msgid "A value of the form @code{(@var{num} . @var{expr})} stands for the product of the values of @var{num} and @var{expr}.  For example, @code{(2 . in)} specifies a width of 2 inches, while @code{(0.5 .  @var{image})} specifies half the width (or height) of the specified image."
msgstr ""

#. type: Plain text
#: display.texi.orig:4242
msgid "The form @code{(+ @var{expr} ...)} adds up the value of the expressions.  The form @code{(- @var{expr} ...)} negates or subtracts the value of the expressions."
msgstr ""

#. type: subsection
#: display.texi.orig:4244
#, no-wrap
msgid "Other Display Specifications"
msgstr ""

#. type: Plain text
#: display.texi.orig:4248
msgid "Here are the other sorts of display specifications that you can use in the @code{display} text property."
msgstr ""

#. type: var{#1}
#: display.texi.orig:4250
#, no-wrap
msgid "string"
msgstr ""

#. type: table
#: display.texi.orig:4252
msgid "Display @var{string} instead of the text that has this property."
msgstr ""

#. type: table
#: display.texi.orig:4255
msgid "Recursive display specifications are not supported---@var{string}'s @code{display} properties, if any, are not used."
msgstr ""

#. type: item
#: display.texi.orig:4256
#, no-wrap
msgid "(image . @var{image-props})"
msgstr ""

#. type: table
#: display.texi.orig:4260
msgid "This kind of display specification is an image descriptor (@pxref{Images}).  When used as a display specification, it means to display the image instead of the text that has the display specification."
msgstr ""

#. type: item
#: display.texi.orig:4261
#, no-wrap
msgid "(slice @var{x} @var{y} @var{width} @var{height})"
msgstr ""

#. type: table
#: display.texi.orig:4269
msgid "This specification together with @code{image} specifies a @dfn{slice} (a partial area) of the image to display.  The elements @var{y} and @var{x} specify the top left corner of the slice, within the image; @var{width} and @var{height} specify the width and height of the slice.  Integers are numbers of pixels.  A floating-point number in the range 0.0--1.0 stands for that fraction of the width or height of the entire image."
msgstr ""

#. type: item
#: display.texi.orig:4270
#, no-wrap
msgid "((margin nil) @var{string})"
msgstr ""

#. type: table
#: display.texi.orig:4276
msgid "A display specification of this form means to display @var{string} instead of the text that has the display specification, at the same position as that text.  It is equivalent to using just @var{string}, but it is done as a special case of marginal display (@pxref{Display Margins})."
msgstr ""

#. type: item
#: display.texi.orig:4277
#, no-wrap
msgid "(left-fringe @var{bitmap} @r{[}@var{face}@r{]})"
msgstr ""

#. type: itemx
#: display.texi.orig:4278
#, no-wrap
msgid "(right-fringe @var{bitmap} @r{[}@var{face}@r{]})"
msgstr ""

#. type: table
#: display.texi.orig:4284
msgid "This display specification on any character of a line of text causes the specified @var{bitmap} be displayed in the left or right fringes for that line, instead of the characters that have the display specification.  The optional @var{face} specifies the colors to be used for the bitmap.  @xref{Fringe Bitmaps}, for the details."
msgstr ""

#. type: item
#: display.texi.orig:4285
#, no-wrap
msgid "(space-width @var{factor})"
msgstr ""

#. type: table
#: display.texi.orig:4291
msgid "This display specification affects all the space characters within the text that has the specification.  It displays all of these spaces @var{factor} times as wide as normal.  The element @var{factor} should be an integer or float.  Characters other than spaces are not affected at all; in particular, this has no effect on tab characters."
msgstr ""

#. type: item
#: display.texi.orig:4292
#, no-wrap
msgid "(height @var{height})"
msgstr ""

#. type: table
#: display.texi.orig:4295
msgid "This display specification makes the text taller or shorter.  Here are the possibilities for @var{height}:"
msgstr ""

#. type: code{#1}
#: display.texi.orig:4297
#, no-wrap
msgid "(+ @var{n})"
msgstr ""

#. type: table
#: display.texi.orig:4304
msgid "This means to use a font that is @var{n} steps larger.  A ``step'' is defined by the set of available fonts---specifically, those that match what was otherwise specified for this text, in all attributes except height.  Each size for which a suitable font is available counts as another step.  @var{n} should be an integer."
msgstr ""

#. type: code{#1}
#: display.texi.orig:4305
#, no-wrap
msgid "(- @var{n})"
msgstr ""

#. type: table
#: display.texi.orig:4307
msgid "This means to use a font that is @var{n} steps smaller."
msgstr ""

#. type: item
#: display.texi.orig:4308
#, no-wrap
msgid "a number, @var{factor}"
msgstr ""

#. type: table
#: display.texi.orig:4311
msgid "A number, @var{factor}, means to use a font that is @var{factor} times as tall as the default font."
msgstr ""

#. type: item
#: display.texi.orig:4312
#, no-wrap
msgid "a symbol, @var{function}"
msgstr ""

#. type: table
#: display.texi.orig:4315
msgid "A symbol is a function to compute the height.  It is called with the current height as argument, and should return the new height to use."
msgstr ""

#. type: item
#: display.texi.orig:4316
#, no-wrap
msgid "anything else, @var{form}"
msgstr ""

#. type: table
#: display.texi.orig:4320
msgid "If the @var{height} value doesn't fit the previous possibilities, it is a form.  Emacs evaluates it to get the new height, with the symbol @code{height} bound to the current specified font height."
msgstr ""

#. type: item
#: display.texi.orig:4322
#, no-wrap
msgid "(raise @var{factor})"
msgstr ""

#. type: table
#: display.texi.orig:4325
msgid "This kind of display specification raises or lowers the text it applies to, relative to the baseline of the line."
msgstr ""

#. type: table
#: display.texi.orig:4330
msgid "@var{factor} must be a number, which is interpreted as a multiple of the height of the affected text.  If it is positive, that means to display the characters raised.  If it is negative, that means to display them lower down."
msgstr ""

#. type: table
#: display.texi.orig:4334
msgid "If the text also has a @code{height} display specification, that does not affect the amount of raising or lowering, which is based on the faces used for the text."
msgstr ""

#. type: Plain text
#: display.texi.orig:4350
msgid "You can make any display specification conditional.  To do that, package it in another list of the form @code{(when @var{condition} . @var{spec})}.  Then the specification @var{spec} applies only when @var{condition} evaluates to a non-@code{nil} value.  During the evaluation, @code{object} is bound to the string or buffer having the conditional @code{display} property.  @code{position} and @code{buffer-position} are bound to the position within @code{object} and the buffer position where the @code{display} property was found, respectively.  Both positions can be different when @code{object} is a string."
msgstr ""

#. type: subsection
#: display.texi.orig:4352
#, no-wrap
msgid "Displaying in the Margins"
msgstr ""

#. type: cindex
#: display.texi.orig:4353
#, no-wrap
msgid "display margins"
msgstr ""

#. type: cindex
#: display.texi.orig:4354
#, no-wrap
msgid "margins, display"
msgstr ""

#. type: Plain text
#: display.texi.orig:4361
msgid "A buffer can have blank areas called @dfn{display margins} on the left and on the right.  Ordinary text never appears in these areas, but you can put things into the display margins using the @code{display} property.  There is currently no way to make text or images in the margin mouse-sensitive."
msgstr ""

#. type: Plain text
#: display.texi.orig:4367
msgid "The way to display something in the margins is to specify it in a margin display specification in the @code{display} property of some text.  This is a replacing display specification, meaning that the text you put it on does not get displayed; the margin display appears, but that text does not."
msgstr ""

#. type: Plain text
#: display.texi.orig:4373
msgid "A margin display specification looks like @code{((margin right-margin) @var{spec})} or @code{((margin left-margin) @var{spec})}.  Here, @var{spec} is another display specification that says what to display in the margin.  Typically it is a string of text to display, or an image descriptor."
msgstr ""

#. type: Plain text
#: display.texi.orig:4378
msgid "To display something in the margin @emph{in association with} certain buffer text, without altering or preventing the display of that text, put a @code{before-string} property on the text and put the margin display specification on the contents of the before-string."
msgstr ""

#. type: Plain text
#: display.texi.orig:4382
msgid "Before the display margins can display anything, you must give them a nonzero width.  The usual way to do that is to set these variables:"
msgstr ""

#. type: defvar
#: display.texi.orig:4383
#, no-wrap
msgid "left-margin-width"
msgstr ""

#. type: defvar
#: display.texi.orig:4387
msgid "This variable specifies the width of the left margin, in character cell (a.k.a.@: ``column'') units.  It is buffer-local in all buffers.  A value of @code{nil} means no left marginal area."
msgstr ""

#. type: defvar
#: display.texi.orig:4389
#, no-wrap
msgid "right-margin-width"
msgstr ""

#. type: defvar
#: display.texi.orig:4393
msgid "This variable specifies the width of the right margin, in character cell units.  It is buffer-local in all buffers.  A value of @code{nil} means no right marginal area."
msgstr ""

#. type: Plain text
#: display.texi.orig:4399
msgid "Setting these variables does not immediately affect the window.  These variables are checked when a new buffer is displayed in the window.  Thus, you can make changes take effect by calling @code{set-window-buffer}."
msgstr ""

#. type: Plain text
#: display.texi.orig:4401
msgid "You can also set the margin widths immediately."
msgstr ""

#. type: defun
#: display.texi.orig:4402
#, no-wrap
msgid "set-window-margins window left &optional right"
msgstr ""

#. type: defun
#: display.texi.orig:4406
msgid "This function specifies the margin widths for window @var{window}, in character cell units.  The argument @var{left} controls the left margin, and @var{right} controls the right margin (default @code{0})."
msgstr ""

#. type: defun
#: display.texi.orig:4408
#, no-wrap
msgid "window-margins &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:4415
msgid "This function returns the width of the left and right margins of @var{window} as a cons cell of the form @w{@code{(@var{left} . @var{right})}}.  If one of the two marginal areas does not exist, its width is returned as @code{nil}; if neither of the two margins exist, the function returns @code{(nil)}.  If @var{window} is @code{nil}, the selected window is used."
msgstr ""

#. type: cindex
#: display.texi.orig:4419
#, no-wrap
msgid "images in buffers"
msgstr ""

#. type: Plain text
#: display.texi.orig:4424
msgid "To display an image in an Emacs buffer, you must first create an image descriptor, then use it as a display specifier in the @code{display} property of text that is displayed (@pxref{Display Property})."
msgstr ""

#. type: Plain text
#: display.texi.orig:4431
msgid "Emacs is usually able to display images when it is run on a graphical terminal.  Images cannot be displayed in a text terminal, on certain graphical terminals that lack the support for this, or if Emacs is compiled without image support.  You can use the function @code{display-images-p} to determine if images can in principle be displayed (@pxref{Display Feature Testing})."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4446 display.texi.orig:4447
#, no-wrap
msgid "Image Formats"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Supported image formats."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4494 display.texi.orig:4495
#, no-wrap
msgid "Image Descriptors"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "How to specify an image for use in @code{:display}."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4704 display.texi.orig:4705
#, no-wrap
msgid "XBM Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Special features for XBM format."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4763 display.texi.orig:4764
#, no-wrap
msgid "XPM Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Special features for XPM format."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4779 display.texi.orig:4780
#, no-wrap
msgid "PostScript Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Special features for PostScript format."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4806 display.texi.orig:4807
#, no-wrap
msgid "ImageMagick Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Special features available through ImageMagick."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4890 display.texi.orig:4891
#, no-wrap
msgid "Other Image Types"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Various other formats are supported."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:4934 display.texi.orig:4935
#, no-wrap
msgid "Defining Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Convenient ways to define an image for later use."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:5062 display.texi.orig:5063
#, no-wrap
msgid "Showing Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Convenient ways to display an image once it is defined."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:5172 display.texi.orig:5173
#, no-wrap
msgid "Multi-Frame Images"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Some images contain more than one frame."
msgstr ""

#. type: subsection
#: display.texi.orig:4444 display.texi.orig:5235 display.texi.orig:5236
#, no-wrap
msgid "Image Cache"
msgstr ""

#. type: menuentry
#: display.texi.orig:4444
msgid "Internal mechanisms of image display."
msgstr ""

#. type: cindex
#: display.texi.orig:4448
#, no-wrap
msgid "image formats"
msgstr ""

#. type: cindex
#: display.texi.orig:4449
#, no-wrap
msgid "image types"
msgstr ""

#. type: Plain text
#: display.texi.orig:4457
msgid "Emacs can display a number of different image formats.  Some of these image formats are supported only if particular support libraries are installed.  On some platforms, Emacs can load support libraries on demand; if so, the variable @code{dynamic-library-alist} can be used to modify the set of known names for these dynamic libraries.  @xref{Dynamic Libraries}."
msgstr ""

#. type: Plain text
#: display.texi.orig:4463
msgid "Supported image formats (and the required support libraries) include PBM and XBM (which do not depend on support libraries and are always available), XPM (@code{libXpm}), GIF (@code{libgif} or @code{libungif}), PostScript (@code{gs}), JPEG (@code{libjpeg}), TIFF (@code{libtiff}), PNG (@code{libpng}), and SVG (@code{librsvg})."
msgstr ""

#. type: Plain text
#: display.texi.orig:4468
msgid "Each of these image formats is associated with an @dfn{image type symbol}.  The symbols for the above formats are, respectively, @code{pbm}, @code{xbm}, @code{xpm}, @code{gif}, @code{postscript}, @code{jpeg}, @code{tiff}, @code{png}, and @code{svg}."
msgstr ""

#. type: Plain text
#: display.texi.orig:4473
msgid "Furthermore, if you build Emacs with ImageMagick (@code{libMagickWand}) support, Emacs can display any image format that ImageMagick can.  @xref{ImageMagick Images}.  All images displayed via ImageMagick have type symbol @code{imagemagick}."
msgstr ""

#. type: defvar
#: display.texi.orig:4474
#, no-wrap
msgid "image-types"
msgstr ""

#. type: defvar
#: display.texi.orig:4477
msgid "This variable contains a list of type symbols for image formats which are potentially supported in the current configuration."
msgstr ""

#. type: defvar
#: display.texi.orig:4482
msgid "``Potentially'' means that Emacs knows about the image types, not necessarily that they can be used (for example, they could depend on unavailable dynamic libraries).  To know which image types are really available, use @code{image-type-available-p}."
msgstr ""

#. type: defun
#: display.texi.orig:4484
#, no-wrap
msgid "image-type-available-p type"
msgstr ""

#. type: defun
#: display.texi.orig:4487
msgid "This function returns non-@code{nil} if images of type @var{type} can be loaded and displayed.  @var{type} must be an image type symbol."
msgstr ""

#. type: defun
#: display.texi.orig:4492
msgid "For image types whose support libraries are statically linked, this function always returns @code{t}.  For image types whose support libraries are dynamically loaded, it returns @code{t} if the library could be loaded and @code{nil} otherwise."
msgstr ""

#. type: cindex
#: display.texi.orig:4496
#, no-wrap
msgid "image descriptor"
msgstr ""

#. type: Plain text
#: display.texi.orig:4503
msgid "An @dfn{image descriptor} is a list which specifies the underlying data for an image, and how to display it.  It is typically used as the value of a @code{display} overlay or text property (@pxref{Other Display Specs}); but @xref{Showing Images}, for convenient helper functions to insert images into buffers."
msgstr ""

#. type: Plain text
#: display.texi.orig:4508
msgid "Each image descriptor has the form @code{(image . @var{props})}, where @var{props} is a property list of alternating keyword symbols and values, including at least the pair @code{:type @var{type}} that specifies the image type."
msgstr ""

#. type: Plain text
#: display.texi.orig:4512
msgid "The following is a list of properties that are meaningful for all image types (there are also properties which are meaningful only for certain image types, as documented in the following subsections):"
msgstr ""

#. type: item
#: display.texi.orig:4514
#, no-wrap
msgid ":type @var{type}"
msgstr ""

#. type: table
#: display.texi.orig:4516
msgid "The image type."
msgstr ""

#. type: ifnottex
#: display.texi.orig:4518
msgid "@xref{Image Formats}."
msgstr ""

#. type: table
#: display.texi.orig:4520
msgid "Every image descriptor must include this property."
msgstr ""

#. type: item
#: display.texi.orig:4521
#, no-wrap
msgid ":file @var{file}"
msgstr ""

#. type: table
#: display.texi.orig:4524
msgid "This says to load the image from file @var{file}.  If @var{file} is not an absolute file name, it is expanded in @code{data-directory}."
msgstr ""

#. type: item
#: display.texi.orig:4525 display.texi.orig:4732
#, no-wrap
msgid ":data @var{data}"
msgstr ""

#. type: table
#: display.texi.orig:4528
msgid "This specifies the raw image data.  Each image descriptor must have either @code{:data} or @code{:file}, but not both."
msgstr ""

#. type: table
#: display.texi.orig:4534
msgid "For most image types, the value of a @code{:data} property should be a string containing the image data.  Some image types do not support @code{:data}; for some others, @code{:data} alone is not enough, so you need to use other image properties along with @code{:data}.  See the following subsections for details."
msgstr ""

#. type: item
#: display.texi.orig:4535
#, no-wrap
msgid ":margin @var{margin}"
msgstr ""

#. type: table
#: display.texi.orig:4542
msgid "This specifies how many pixels to add as an extra margin around the image.  The value, @var{margin}, must be a non-negative number, or a pair @code{(@var{x} . @var{y})} of such numbers.  If it is a pair, @var{x} specifies how many pixels to add horizontally, and @var{y} specifies how many pixels to add vertically.  If @code{:margin} is not specified, the default is zero."
msgstr ""

#. type: table
#: display.texi.orig:4548
msgid "This specifies the amount of the image's height to use for its ascent---that is, the part above the baseline.  The value, @var{ascent}, must be a number in the range 0 to 100, or the symbol @code{center}."
msgstr ""

#. type: table
#: display.texi.orig:4551
msgid "If @var{ascent} is a number, that percentage of the image's height is used for its ascent."
msgstr ""

#. type: table
#: display.texi.orig:4556
msgid "If @var{ascent} is @code{center}, the image is vertically centered around a centerline which would be the vertical centerline of text drawn at the position of the image, in the manner specified by the text properties and overlays that apply to the image."
msgstr ""

#. type: table
#: display.texi.orig:4558
msgid "If this property is omitted, it defaults to 50."
msgstr ""

#. type: item
#: display.texi.orig:4559
#, no-wrap
msgid ":relief @var{relief}"
msgstr ""

#. type: table
#: display.texi.orig:4564
msgid "This adds a shadow rectangle around the image.  The value, @var{relief}, specifies the width of the shadow lines, in pixels.  If @var{relief} is negative, shadows are drawn so that the image appears as a pressed button; otherwise, it appears as an unpressed button."
msgstr ""

#. type: item
#: display.texi.orig:4565
#, no-wrap
msgid ":conversion @var{algorithm}"
msgstr ""

#. type: table
#: display.texi.orig:4569
msgid "This specifies a conversion algorithm that should be applied to the image before it is displayed; the value, @var{algorithm}, specifies which algorithm."
msgstr ""

#. type: item
#: display.texi.orig:4571
#, no-wrap
msgid "laplace"
msgstr ""

#. type: itemx
#: display.texi.orig:4572
#, no-wrap
msgid "emboss"
msgstr ""

#. type: table
#: display.texi.orig:4577
msgid "Specifies the Laplace edge detection algorithm, which blurs out small differences in color while highlighting larger differences.  People sometimes consider this useful for displaying the image for a ``disabled'' button."
msgstr ""

#. type: item
#: display.texi.orig:4578
#, no-wrap
msgid "(edge-detection :matrix @var{matrix} :color-adjust @var{adjust})"
msgstr ""

#. type: cindex
#: display.texi.orig:4579
#, no-wrap
msgid "edge detection, images"
msgstr ""

#. type: table
#: display.texi.orig:4588
msgid "Specifies a general edge-detection algorithm.  @var{matrix} must be either a nine-element list or a nine-element vector of numbers.  A pixel at position @math{x/y} in the transformed image is computed from original pixels around that position.  @var{matrix} specifies, for each pixel in the neighborhood of @math{x/y}, a factor with which that pixel will influence the transformed pixel; element @math{0} specifies the factor for the pixel at @math{x-1/y-1}, element @math{1} the factor for the pixel at @math{x/y-1} etc., as shown below:"
msgstr ""

#. type: tex
#: display.texi.orig:4593
#, no-wrap
msgid ""
"$$\\pmatrix{x-1/y-1 & x/y-1  & x+1/y-1 \\cr\n"
"   x-1/y  &   x/y &    x+1/y \\cr\n"
"   x-1/y+1&   x/y+1 &  x+1/y+1 \\cr}$$\n"
msgstr ""

#. type: display
#: display.texi.orig:4600
#, no-wrap
msgid ""
"  (x-1/y-1  x/y-1  x+1/y-1\n"
"   x-1/y    x/y    x+1/y\n"
"   x-1/y+1  x/y+1  x+1/y+1)\n"
msgstr ""

#. type: table
#: display.texi.orig:4607
msgid "The resulting pixel is computed from the color intensity of the color resulting from summing up the RGB values of surrounding pixels, multiplied by the specified factors, and dividing that sum by the sum of the factors' absolute values."
msgstr ""

#. type: table
#: display.texi.orig:4609
msgid "Laplace edge-detection currently uses a matrix of"
msgstr ""

#. type: tex
#: display.texi.orig:4614
#, no-wrap
msgid ""
"$$\\pmatrix{1 & 0 & 0 \\cr\n"
"   0&  0 &  0 \\cr\n"
"   0 & 0 & -1 \\cr}$$\n"
msgstr ""

#. type: display
#: display.texi.orig:4621
#, no-wrap
msgid ""
"  (1  0  0\n"
"   0  0  0\n"
"   0  0 -1)\n"
msgstr ""

#. type: table
#: display.texi.orig:4625
msgid "Emboss edge-detection uses a matrix of"
msgstr ""

#. type: tex
#: display.texi.orig:4630
#, no-wrap
msgid ""
"$$\\pmatrix{ 2 & -1 &  0 \\cr\n"
"   -1 &  0 &  1 \\cr\n"
"    0  & 1 & -2 \\cr}$$\n"
msgstr ""

#. type: display
#: display.texi.orig:4637
#, no-wrap
msgid ""
"  ( 2 -1  0\n"
"   -1  0  1\n"
"    0  1 -2)\n"
msgstr ""

#. type: item
#: display.texi.orig:4640
#, no-wrap
msgid "disabled"
msgstr ""

#. type: table
#: display.texi.orig:4642
msgid "Specifies transforming the image so that it looks ``disabled''."
msgstr ""

#. type: item
#: display.texi.orig:4644
#, no-wrap
msgid ":mask @var{mask}"
msgstr ""

#. type: table
#: display.texi.orig:4653
msgid "If @var{mask} is @code{heuristic} or @code{(heuristic @var{bg})}, build a clipping mask for the image, so that the background of a frame is visible behind the image.  If @var{bg} is not specified, or if @var{bg} is @code{t}, determine the background color of the image by looking at the four corners of the image, assuming the most frequently occurring color from the corners is the background color of the image.  Otherwise, @var{bg} must be a list @code{(@var{red} @var{green} @var{blue})} specifying the color to assume for the background of the image."
msgstr ""

#. type: table
#: display.texi.orig:4657
msgid "If @var{mask} is @code{nil}, remove a mask from the image, if it has one.  Images in some formats include a mask which can be removed by specifying @code{:mask nil}."
msgstr ""

#. type: item
#: display.texi.orig:4658
#, no-wrap
msgid ":pointer @var{shape}"
msgstr ""

#. type: table
#: display.texi.orig:4661
msgid "This specifies the pointer shape when the mouse pointer is over this image.  @xref{Pointer Shape}, for available pointer shapes."
msgstr ""

#. type: item
#: display.texi.orig:4662
#, no-wrap
msgid ":map @var{map}"
msgstr ""

#. type: cindex
#: display.texi.orig:4663
#, no-wrap
msgid "image maps"
msgstr ""

#. type: table
#: display.texi.orig:4665
msgid "This associates an image map of @dfn{hot spots} with this image."
msgstr ""

#. type: table
#: display.texi.orig:4669
msgid "An image map is an alist where each element has the format @code{(@var{area} @var{id} @var{plist})}.  An @var{area} is specified as either a rectangle, a circle, or a polygon."
msgstr ""

#. type: table
#: display.texi.orig:4674
msgid "A rectangle is a cons @code{(rect . ((@var{x0} . @var{y0}) . (@var{x1} . @var{y1})))} which specifies the pixel coordinates of the upper left and bottom right corners of the rectangle area."
msgstr ""

#. type: table
#: display.texi.orig:4679
msgid "A circle is a cons @code{(circle . ((@var{x0} . @var{y0}) . @var{r}))} which specifies the center and the radius of the circle; @var{r} may be a float or integer."
msgstr ""

#. type: table
#: display.texi.orig:4683
msgid "A polygon is a cons @code{(poly . [@var{x0} @var{y0} @var{x1} @var{y1} ...])} where each pair in the vector describes one corner in the polygon."
msgstr ""

#. type: table
#: display.texi.orig:4690
msgid "When the mouse pointer lies on a hot-spot area of an image, the @var{plist} of that hot-spot is consulted; if it contains a @code{help-echo} property, that defines a tool-tip for the hot-spot, and if it contains a @code{pointer} property, that defines the shape of the mouse cursor when it is on the hot-spot.  @xref{Pointer Shape}, for available pointer shapes."
msgstr ""

#. type: table
#: display.texi.orig:4695
msgid "When you click the mouse when the mouse pointer is over a hot-spot, an event is composed by combining the @var{id} of the hot-spot with the mouse event; for instance, @code{[area4 mouse-1]} if the hot-spot's @var{id} is @code{area4}."
msgstr ""

#. type: defun
#: display.texi.orig:4697
#, no-wrap
msgid "image-mask-p spec &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:4702
msgid "This function returns @code{t} if image @var{spec} has a mask bitmap.  @var{frame} is the frame on which the image will be displayed.  @var{frame} @code{nil} or omitted means to use the selected frame (@pxref{Input Focus})."
msgstr ""

#. type: cindex
#: display.texi.orig:4706
#, no-wrap
msgid "XBM"
msgstr ""

#. type: Plain text
#: display.texi.orig:4711
msgid "To use XBM format, specify @code{xbm} as the image type.  This image format doesn't require an external library, so images of this type are always supported."
msgstr ""

#. type: Plain text
#: display.texi.orig:4713
msgid "Additional image properties supported for the @code{xbm} image type are:"
msgstr ""

#. type: item
#: display.texi.orig:4715 display.texi.orig:4899
#, no-wrap
msgid ":foreground @var{foreground}"
msgstr ""

#. type: table
#: display.texi.orig:4720
msgid "The value, @var{foreground}, should be a string specifying the image foreground color, or @code{nil} for the default color.  This color is used for each pixel in the XBM that is 1.  The default is the frame's foreground color."
msgstr ""

#. type: item
#: display.texi.orig:4721 display.texi.orig:4855 display.texi.orig:4905
#, no-wrap
msgid ":background @var{background}"
msgstr ""

#. type: table
#: display.texi.orig:4726
msgid "The value, @var{background}, should be a string specifying the image background color, or @code{nil} for the default color.  This color is used for each pixel in the XBM that is 0.  The default is the frame's background color."
msgstr ""

#. type: Plain text
#: display.texi.orig:4730
msgid "If you specify an XBM image using data within Emacs instead of an external file, use the following three properties:"
msgstr ""

#. type: table
#: display.texi.orig:4735
msgid "The value, @var{data}, specifies the contents of the image.  There are three formats you can use for @var{data}:"
msgstr ""

#. type: itemize
#: display.texi.orig:4740
msgid "A vector of strings or bool-vectors, each specifying one line of the image.  Do specify @code{:height} and @code{:width}."
msgstr ""

#. type: itemize
#: display.texi.orig:4746
msgid "A string containing the same byte sequence as an XBM file would contain.  You must not specify @code{:height} and @code{:width} in this case, because omitting them is what indicates the data has the format of an XBM file.  The file contents specify the height and width of the image."
msgstr ""

#. type: itemize
#: display.texi.orig:4754
msgid "A string or a bool-vector containing the bits of the image (plus perhaps some extra bits at the end that will not be used).  It should contain at least @var{width} * @code{height} bits.  In this case, you must specify @code{:height} and @code{:width}, both to indicate that the string contains just the bits rather than a whole XBM file, and to specify the size of the image."
msgstr ""

#. type: table
#: display.texi.orig:4758
msgid "The value, @var{width}, specifies the width of the image, in pixels."
msgstr ""

#. type: table
#: display.texi.orig:4761
msgid "The value, @var{height}, specifies the height of the image, in pixels."
msgstr ""

#. type: cindex
#: display.texi.orig:4765
#, no-wrap
msgid "XPM"
msgstr ""

#. type: Plain text
#: display.texi.orig:4770
msgid "To use XPM format, specify @code{xpm} as the image type.  The additional image property @code{:color-symbols} is also meaningful with the @code{xpm} image type:"
msgstr ""

#. type: item
#: display.texi.orig:4772
#, no-wrap
msgid ":color-symbols @var{symbols}"
msgstr ""

#. type: table
#: display.texi.orig:4777
msgid "The value, @var{symbols}, should be an alist whose elements have the form @code{(@var{name} . @var{color})}.  In each element, @var{name} is the name of a color as it appears in the image file, and @var{color} specifies the actual color to use for displaying that name."
msgstr ""

#. type: cindex
#: display.texi.orig:4781
#, no-wrap
msgid "postscript images"
msgstr ""

#. type: Plain text
#: display.texi.orig:4786
msgid "To use PostScript for an image, specify image type @code{postscript}.  This works only if you have Ghostscript installed.  You must always use these three properties:"
msgstr ""

#. type: item
#: display.texi.orig:4788
#, no-wrap
msgid ":pt-width @var{width}"
msgstr ""

#. type: table
#: display.texi.orig:4791
msgid "The value, @var{width}, specifies the width of the image measured in points (1/72 inch).  @var{width} must be an integer."
msgstr ""

#. type: item
#: display.texi.orig:4792
#, no-wrap
msgid ":pt-height @var{height}"
msgstr ""

#. type: table
#: display.texi.orig:4795
msgid "The value, @var{height}, specifies the height of the image in points (1/72 inch).  @var{height} must be an integer."
msgstr ""

#. type: item
#: display.texi.orig:4796
#, no-wrap
msgid ":bounding-box @var{box}"
msgstr ""

#. type: table
#: display.texi.orig:4800
msgid "The value, @var{box}, must be a list or vector of four integers, which specifying the bounding box of the PostScript image, analogous to the @samp{BoundingBox} comment found in PostScript files."
msgstr ""

#. type: example
#: display.texi.orig:4803
#, no-wrap
msgid "%%BoundingBox: 22 171 567 738\n"
msgstr ""

#. type: cindex
#: display.texi.orig:4808
#, no-wrap
msgid "ImageMagick images"
msgstr ""

#. type: cindex
#: display.texi.orig:4809
#, no-wrap
msgid "images, support for more formats"
msgstr ""

#. type: Plain text
#: display.texi.orig:4816
msgid "If you build Emacs with ImageMagick support, you can use the ImageMagick library to load many image formats (@pxref{File Conveniences,,, emacs, The GNU Emacs Manual}).  The image type symbol for images loaded via ImageMagick is @code{imagemagick}, regardless of the actual underlying image format."
msgstr ""

#. type: defun
#: display.texi.orig:4817
#, no-wrap
msgid "imagemagick-types"
msgstr ""

#. type: defun
#: display.texi.orig:4822
msgid "This function returns a list of image file extensions supported by the current ImageMagick installation.  Each list element is a symbol representing an internal ImageMagick name for an image type, such as @code{BMP} for @file{.bmp} images."
msgstr ""

#. type: defopt
#: display.texi.orig:4824
#, no-wrap
msgid "imagemagick-enabled-types"
msgstr ""

#. type: defopt
#: display.texi.orig:4832
msgid "The value of this variable is a list of ImageMagick image types which Emacs may attempt to render using ImageMagick.  Each list element should be one of the symbols in the list returned by @code{imagemagick-types}, or an equivalent string.  Alternatively, a value of @code{t} enables ImageMagick for all possible image types.  Regardless of the value of this variable, @code{imagemagick-types-inhibit} (see below) takes precedence."
msgstr ""

#. type: defopt
#: display.texi.orig:4834
#, no-wrap
msgid "imagemagick-types-inhibit"
msgstr ""

#. type: defopt
#: display.texi.orig:4839
msgid "The value of this variable lists the ImageMagick image types which should never be rendered using ImageMagick, regardless of the value of @code{imagemagick-enabled-types}.  A value of @code{t} disables ImageMagick entirely."
msgstr ""

#. type: defvar
#: display.texi.orig:4841
#, no-wrap
msgid "image-format-suffixes"
msgstr ""

#. type: defvar
#: display.texi.orig:4849
msgid "This variable is an alist mapping image types to file name extensions.  Emacs uses this in conjunction with the @code{:format} image property (see below) to give a hint to the ImageMagick library as to the type of an image.  Each element has the form @code{(@var{type} @var{extension})}, where @var{type} is a symbol specifying an image content-type, and @var{extension} is a string that specifies the associated file name extension."
msgstr ""

#. type: Plain text
#: display.texi.orig:4853
msgid "Images loaded with ImageMagick support the following additional image descriptor properties:"
msgstr ""

#. type: table
#: display.texi.orig:4860
msgid "@var{background}, if non-@code{nil}, should be a string specifying a color, which is used as the image's background color if the image supports transparency.  If the value is @code{nil}, it defaults to the frame's background color."
msgstr ""

#. type: item
#: display.texi.orig:4861
#, no-wrap
msgid ":width @var{width}, :height @var{height}"
msgstr ""

#. type: table
#: display.texi.orig:4866
msgid "The @code{:width} and @code{:height} keywords are used for scaling the image.  If only one of them is specified, the other one will be calculated so as to preserve the aspect ratio.  If both are specified, aspect ratio may not be preserved."
msgstr ""

#. type: item
#: display.texi.orig:4867
#, no-wrap
msgid ":max-width @var{max-width}, :max-height @var{max-height}"
msgstr ""

#. type: table
#: display.texi.orig:4875
msgid "The @code{:max-width} and @code{:max-height} keywords are used for scaling if the size of the image of the image exceeds these values.  If @code{:width} is set it will have precedence over @code{max-width}, and if @code{:height} is set it will have precedence over @code{max-height}, but you can otherwise mix these keywords as you wish.  @code{:max-width} and @code{:max-height} will always preserve the aspect ratio."
msgstr ""

#. type: item
#: display.texi.orig:4876
#, no-wrap
msgid ":format @var{type}"
msgstr ""

#. type: table
#: display.texi.orig:4881
msgid "The value, @var{type}, should be a symbol specifying the type of the image data, as found in @code{image-format-suffixes}.  This is used when the image does not have an associated file name, to provide a hint to ImageMagick to help it detect the image type."
msgstr ""

#. type: item
#: display.texi.orig:4882
#, no-wrap
msgid ":rotation @var{angle}"
msgstr ""

#. type: table
#: display.texi.orig:4884
msgid "Specifies a rotation angle in degrees."
msgstr ""

#. type: item
#: display.texi.orig:4885
#, no-wrap
msgid ":index @var{frame}"
msgstr ""

#. type: table
#: display.texi.orig:4888
msgid "@xref{Multi-Frame Images}."
msgstr ""

#. type: cindex
#: display.texi.orig:4892
#, no-wrap
msgid "PBM"
msgstr ""

#. type: Plain text
#: display.texi.orig:4897
msgid "For PBM images, specify image type @code{pbm}.  Color, gray-scale and monochromatic images are supported.  For mono PBM images, two additional image properties are supported."
msgstr ""

#. type: table
#: display.texi.orig:4904
msgid "The value, @var{foreground}, should be a string specifying the image foreground color, or @code{nil} for the default color.  This color is used for each pixel in the PBM that is 1.  The default is the frame's foreground color."
msgstr ""

#. type: table
#: display.texi.orig:4910
msgid "The value, @var{background}, should be a string specifying the image background color, or @code{nil} for the default color.  This color is used for each pixel in the PBM that is 0.  The default is the frame's background color."
msgstr ""

#. type: Plain text
#: display.texi.orig:4914
msgid "The remaining image types that Emacs can support are:"
msgstr ""

#. type: item
#: display.texi.orig:4916
#, no-wrap
msgid "GIF"
msgstr ""

#. type: table
#: display.texi.orig:4919
msgid "Image type @code{gif}.  Supports the @code{:index} property.  @xref{Multi-Frame Images}."
msgstr ""

#. type: item
#: display.texi.orig:4920
#, no-wrap
msgid "JPEG"
msgstr ""

#. type: table
#: display.texi.orig:4922
msgid "Image type @code{jpeg}."
msgstr ""

#. type: item
#: display.texi.orig:4923
#, no-wrap
msgid "PNG"
msgstr ""

#. type: table
#: display.texi.orig:4925
msgid "Image type @code{png}."
msgstr ""

#. type: item
#: display.texi.orig:4926
#, no-wrap
msgid "SVG"
msgstr ""

#. type: table
#: display.texi.orig:4928
msgid "Image type @code{svg}."
msgstr ""

#. type: item
#: display.texi.orig:4929
#, no-wrap
msgid "TIFF"
msgstr ""

#. type: table
#: display.texi.orig:4932
msgid "Image type @code{tiff}.  Supports the @code{:index} property.  @xref{Multi-Frame Images}."
msgstr ""

#. type: cindex
#: display.texi.orig:4936
#, no-wrap
msgid "define image"
msgstr ""

#. type: Plain text
#: display.texi.orig:4940
msgid "The functions @code{create-image}, @code{defimage} and @code{find-image} provide convenient ways to create image descriptors."
msgstr ""

#. type: defun
#: display.texi.orig:4941
#, no-wrap
msgid "create-image file-or-data &optional type data-p &rest props"
msgstr ""

#. type: defun
#: display.texi.orig:4946
msgid "This function creates and returns an image descriptor which uses the data in @var{file-or-data}.  @var{file-or-data} can be a file name or a string containing the image data; @var{data-p} should be @code{nil} for the former case, non-@code{nil} for the latter case."
msgstr ""

#. type: defun
#: display.texi.orig:4951
msgid "The optional argument @var{type} is a symbol specifying the image type.  If @var{type} is omitted or @code{nil}, @code{create-image} tries to determine the image type from the file's first few bytes, or else from the file's name."
msgstr ""

#. type: defun
#: display.texi.orig:4954
msgid "The remaining arguments, @var{props}, specify additional image properties---for example,"
msgstr ""

#. type: example
#: display.texi.orig:4958
#, no-wrap
msgid "(create-image \"foo.xpm\" 'xpm nil :heuristic-mask t)\n"
msgstr ""

#. type: defun
#: display.texi.orig:4962
msgid "The function returns @code{nil} if images of this type are not supported.  Otherwise it returns an image descriptor."
msgstr ""

#. type: defmac
#: display.texi.orig:4964
#, no-wrap
msgid "defimage symbol specs &optional doc"
msgstr ""

#. type: defmac
#: display.texi.orig:4968
msgid "This macro defines @var{symbol} as an image name.  The arguments @var{specs} is a list which specifies how to display the image.  The third argument, @var{doc}, is an optional documentation string."
msgstr ""

#. type: defmac
#: display.texi.orig:4976
msgid "Each argument in @var{specs} has the form of a property list, and each one should specify at least the @code{:type} property and either the @code{:file} or the @code{:data} property.  The value of @code{:type} should be a symbol specifying the image type, the value of @code{:file} is the file to load the image from, and the value of @code{:data} is a string containing the actual image data.  Here is an example:"
msgstr ""

#. type: example
#: display.texi.orig:4981
#, no-wrap
msgid ""
"(defimage test-image\n"
"  ((:type xpm :file \"~/test1.xpm\")\n"
"   (:type xbm :file \"~/test1.xbm\")))\n"
msgstr ""

#. type: defmac
#: display.texi.orig:4987
msgid "@code{defimage} tests each argument, one by one, to see if it is usable---that is, if the type is supported and the file exists.  The first usable argument is used to make an image descriptor which is stored in @var{symbol}."
msgstr ""

#. type: defmac
#: display.texi.orig:4990
msgid "If none of the alternatives will work, then @var{symbol} is defined as @code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:4992
#, no-wrap
msgid "find-image specs"
msgstr ""

#. type: defun
#: display.texi.orig:4995
msgid "This function provides a convenient way to find an image satisfying one of a list of image specifications @var{specs}."
msgstr ""

#. type: defun
#: display.texi.orig:5005
msgid "Each specification in @var{specs} is a property list with contents depending on image type.  All specifications must at least contain the properties @code{:type @var{type}} and either @w{@code{:file @var{file}}} or @w{@code{:data @var{data}}}, where @var{type} is a symbol specifying the image type, e.g., @code{xbm}, @var{file} is the file to load the image from, and @var{data} is a string containing the actual image data.  The first specification in the list whose @var{type} is supported, and @var{file} exists, is used to construct the image specification to be returned.  If no specification is satisfied, @code{nil} is returned."
msgstr ""

#. type: defun
#: display.texi.orig:5007
msgid "The image is looked for in @code{image-load-path}."
msgstr ""

#. type: defvar
#: display.texi.orig:5009
#, no-wrap
msgid "image-load-path"
msgstr ""

#. type: defvar
#: display.texi.orig:5015
msgid "This variable's value is a list of locations in which to search for image files.  If an element is a string or a variable symbol whose value is a string, the string is taken to be the name of a directory to search.  If an element is a variable symbol whose value is a list, that is taken to be a list of directory names to search."
msgstr ""

#. type: defvar
#: display.texi.orig:5024
msgid "The default is to search in the @file{images} subdirectory of the directory specified by @code{data-directory}, then the directory specified by @code{data-directory}, and finally in the directories in @code{load-path}.  Subdirectories are not automatically included in the search, so if you put an image file in a subdirectory, you have to supply the subdirectory name explicitly.  For example, to find the image @file{images/foo/bar.xpm} within @code{data-directory}, you should specify the image as follows:"
msgstr ""

#. type: example
#: display.texi.orig:5027
#, no-wrap
msgid "(defimage foo-image '((:type xpm :file \"foo/bar.xpm\")))\n"
msgstr ""

#. type: defun
#: display.texi.orig:5030
#, no-wrap
msgid "image-load-path-for-library library image &optional path no-error"
msgstr ""

#. type: defun
#: display.texi.orig:5033
msgid "This function returns a suitable search path for images used by the Lisp package @var{library}."
msgstr ""

#. type: defun
#: display.texi.orig:5040
msgid "The function searches for @var{image} first using @code{image-load-path}, excluding @file{@code{data-directory}/images}, and then in @code{load-path}, followed by a path suitable for @var{library}, which includes @file{../../etc/images} and @file{../etc/images} relative to the library file itself, and finally in @file{@code{data-directory}/images}."
msgstr ""

#. type: defun
#: display.texi.orig:5045
msgid "Then this function returns a list of directories which contains first the directory in which @var{image} was found, followed by the value of @code{load-path}.  If @var{path} is given, it is used instead of @code{load-path}."
msgstr ""

#. type: defun
#: display.texi.orig:5049
msgid "If @var{no-error} is non-@code{nil} and a suitable path can't be found, don't signal an error.  Instead, return a list of directories as before, except that @code{nil} appears in place of the image directory."
msgstr ""

#. type: defun
#: display.texi.orig:5051
msgid "Here is an example of using @code{image-load-path-for-library}:"
msgstr ""

#. type: example
#: display.texi.orig:5059
#, no-wrap
msgid ""
"(defvar image-load-path) ; shush compiler\n"
"(let* ((load-path (image-load-path-for-library\n"
"                    \"mh-e\" \"mh-logo.xpm\"))\n"
"       (image-load-path (cons (car load-path)\n"
"                              image-load-path)))\n"
"  (mh-tool-bar-folder-buttons-init))\n"
msgstr ""

#. type: cindex
#: display.texi.orig:5064
#, no-wrap
msgid "show image"
msgstr ""

#. type: Plain text
#: display.texi.orig:5069
msgid "You can use an image descriptor by setting up the @code{display} property yourself, but it is easier to use the functions in this section."
msgstr ""

#. type: defun
#: display.texi.orig:5070
#, no-wrap
msgid "insert-image image &optional string area slice"
msgstr ""

#. type: defun
#: display.texi.orig:5077
msgid "This function inserts @var{image} in the current buffer at point.  The value @var{image} should be an image descriptor; it could be a value returned by @code{create-image}, or the value of a symbol defined with @code{defimage}.  The argument @var{string} specifies the text to put in the buffer to hold the image.  If it is omitted or @code{nil}, @code{insert-image} uses @code{\" \"} by default."
msgstr ""

#. type: defun
#: display.texi.orig:5083 display.texi.orig:5126
msgid "The argument @var{area} specifies whether to put the image in a margin.  If it is @code{left-margin}, the image appears in the left margin; @code{right-margin} specifies the right margin.  If @var{area} is @code{nil} or omitted, the image is displayed at point within the buffer's text."
msgstr ""

#. type: defun
#: display.texi.orig:5092
msgid "The argument @var{slice} specifies a slice of the image to insert.  If @var{slice} is @code{nil} or omitted the whole image is inserted.  Otherwise, @var{slice} is a list @code{(@var{x} @var{y} @var{width} @var{height})} which specifies the @var{x} and @var{y} positions and @var{width} and @var{height} of the image area to insert.  Integer values are in units of pixels.  A floating-point number in the range 0.0--1.0 stands for that fraction of the width or height of the entire image."
msgstr ""

#. type: defun
#: display.texi.orig:5096
msgid "Internally, this function inserts @var{string} in the buffer, and gives it a @code{display} property which specifies @var{image}.  @xref{Display Property}."
msgstr ""

#. type: cindex
#: display.texi.orig:5098
#, no-wrap
msgid "slice, image"
msgstr ""

#. type: cindex
#: display.texi.orig:5099
#, no-wrap
msgid "image slice"
msgstr ""

#. type: defun
#: display.texi.orig:5100
#, no-wrap
msgid "insert-sliced-image image &optional string area rows cols"
msgstr ""

#. type: defun
#: display.texi.orig:5104
msgid "This function inserts @var{image} in the current buffer at point, like @code{insert-image}, but splits the image into @var{rows}x@var{cols} equally sized slices."
msgstr ""

#. type: defun
#: display.texi.orig:5109
msgid "If an image is inserted ``sliced'', Emacs displays each slice as a separate image, and allow more intuitive scrolling up/down, instead of jumping up/down the entire image when paging through a buffer that displays (large) images."
msgstr ""

#. type: defun
#: display.texi.orig:5111
#, no-wrap
msgid "put-image image pos &optional string area"
msgstr ""

#. type: defun
#: display.texi.orig:5117
msgid "This function puts image @var{image} in front of @var{pos} in the current buffer.  The argument @var{pos} should be an integer or a marker.  It specifies the buffer position where the image should appear.  The argument @var{string} specifies the text that should hold the image as an alternative to the default."
msgstr ""

#. type: defun
#: display.texi.orig:5120
msgid "The argument @var{image} must be an image descriptor, perhaps returned by @code{create-image} or stored by @code{defimage}."
msgstr ""

#. type: defun
#: display.texi.orig:5130
msgid "Internally, this function creates an overlay, and gives it a @code{before-string} property containing text that has a @code{display} property whose value is the image.  (Whew!)"
msgstr ""

#. type: defun
#: display.texi.orig:5132
#, no-wrap
msgid "remove-images start end &optional buffer"
msgstr ""

#. type: defun
#: display.texi.orig:5136
msgid "This function removes images in @var{buffer} between positions @var{start} and @var{end}.  If @var{buffer} is omitted or @code{nil}, images are removed from the current buffer."
msgstr ""

#. type: defun
#: display.texi.orig:5140
msgid "This removes only images that were put into @var{buffer} the way @code{put-image} does it, not images that were inserted with @code{insert-image} or in other ways."
msgstr ""

#. type: defun
#: display.texi.orig:5142
#, no-wrap
msgid "image-size spec &optional pixels frame"
msgstr ""

#. type: cindex
#: display.texi.orig:5143
#, no-wrap
msgid "size of image"
msgstr ""

#. type: defun
#: display.texi.orig:5152
msgid "This function returns the size of an image as a pair @w{@code{(@var{width} . @var{height})}}.  @var{spec} is an image specification.  @var{pixels} non-@code{nil} means return sizes measured in pixels, otherwise return sizes measured in canonical character units (fractions of the width/height of the frame's default font).  @var{frame} is the frame on which the image will be displayed.  @var{frame} null or omitted means use the selected frame (@pxref{Input Focus})."
msgstr ""

#. type: defvar
#: display.texi.orig:5154
#, no-wrap
msgid "max-image-size"
msgstr ""

#. type: defvar
#: display.texi.orig:5158
msgid "This variable is used to define the maximum size of image that Emacs will load.  Emacs will refuse to load (and display) any image that is larger than this limit."
msgstr ""

#. type: defvar
#: display.texi.orig:5164
msgid "If the value is an integer, it directly specifies the maximum image height and width, measured in pixels.  If it is floating point, it specifies the maximum image height and width as a ratio to the frame height and width.  If the value is non-numeric, there is no explicit limit on the size of images."
msgstr ""

#. type: defvar
#: display.texi.orig:5170
msgid "The purpose of this variable is to prevent unreasonably large images from accidentally being loaded into Emacs.  It only takes effect the first time an image is loaded.  Once an image is placed in the image cache, it can always be displayed, even if the value of @code{max-image-size} is subsequently changed (@pxref{Image Cache})."
msgstr ""

#. type: cindex
#: display.texi.orig:5174
#, no-wrap
msgid "multi-frame images"
msgstr ""

#. type: cindex
#: display.texi.orig:5176
#, no-wrap
msgid "animation"
msgstr ""

#. type: cindex
#: display.texi.orig:5177
#, no-wrap
msgid "image animation"
msgstr ""

#. type: cindex
#: display.texi.orig:5178
#, no-wrap
msgid "image frames"
msgstr ""

#. type: Plain text
#: display.texi.orig:5183
msgid "Some image files can contain more than one image.  We say that there are multiple ``frames'' in the image.  At present, Emacs supports multiple frames for GIF, TIFF, and certain ImageMagick formats such as DJVM@."
msgstr ""

#. type: Plain text
#: display.texi.orig:5187
msgid "The frames can be used either to represent multiple ``pages'' (this is usually the case with multi-frame TIFF files, for example), or to create animation (usually the case with multi-frame GIF files)."
msgstr ""

#. type: Plain text
#: display.texi.orig:5190
msgid "A multi-frame image has a property @code{:index}, whose value is an integer (counting from 0) that specifies which frame is being displayed."
msgstr ""

#. type: defun
#: display.texi.orig:5191
#, no-wrap
msgid "image-multi-frame-p image"
msgstr ""

#. type: defun
#: display.texi.orig:5199
msgid "This function returns non-@code{nil} if @var{image} contains more than one frame.  The actual return value is a cons @code{(@var{nimages} . @var{delay})}, where @var{nimages} is the number of frames and @var{delay} is the delay in seconds between them, or @code{nil} if the image does not specify a delay.  Images that are intended to be animated usually specify a frame delay, whereas ones that are intended to be treated as multiple pages do not."
msgstr ""

#. type: defun
#: display.texi.orig:5201
#, no-wrap
msgid "image-current-frame image"
msgstr ""

#. type: defun
#: display.texi.orig:5204
msgid "This function returns the index of the current frame number for @var{image}, counting from 0."
msgstr ""

#. type: defun
#: display.texi.orig:5206
#, no-wrap
msgid "image-show-frame image n &optional nocheck"
msgstr ""

#. type: defun
#: display.texi.orig:5212
msgid "This function switches @var{image} to frame number @var{n}.  It replaces a frame number outside the valid range with that of the end of the range, unless @var{nocheck} is non-@code{nil}.  If @var{image} does not contain a frame with the specified number, the image displays as a hollow box."
msgstr ""

#. type: defun
#: display.texi.orig:5214
#, no-wrap
msgid "image-animate image &optional index limit"
msgstr ""

#. type: defun
#: display.texi.orig:5220
msgid "This function animates @var{image}.  The optional integer @var{index} specifies the frame from which to start (default 0).  The optional argument @var{limit} controls the length of the animation.  If omitted or @code{nil}, the image animates once only; if @code{t} it loops forever; if a number animation stops after that many seconds."
msgstr ""

#. type: vindex
#: display.texi.orig:5222
#, no-wrap
msgid "image-minimum-frame-delay"
msgstr ""

#. type: vindex
#: display.texi.orig:5223
#, no-wrap
msgid "image-default-frame-delay"
msgstr ""

#. type: Plain text
#: display.texi.orig:5228
msgid "minimum frame delay of 0.01 (@code{image-minimum-frame-delay}) seconds.  If the image itself does not specify a delay, Emacs uses @code{image-default-frame-delay}."
msgstr ""

#. type: defun
#: display.texi.orig:5229
#, no-wrap
msgid "image-animate-timer image"
msgstr ""

#. type: defun
#: display.texi.orig:5232
msgid "This function returns the timer responsible for animating @var{image}, if there is one."
msgstr ""

#. type: cindex
#: display.texi.orig:5237
#, no-wrap
msgid "image cache"
msgstr ""

#. type: Plain text
#: display.texi.orig:5244
msgid "Emacs caches images so that it can display them again more efficiently.  When Emacs displays an image, it searches the image cache for an existing image specification @code{equal} to the desired specification.  If a match is found, the image is displayed from the cache.  Otherwise, Emacs loads the image normally."
msgstr ""

#. type: defun
#: display.texi.orig:5245
#, no-wrap
msgid "image-flush spec &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:5251
msgid "This function removes the image with specification @var{spec} from the image cache of frame @var{frame}.  Image specifications are compared using @code{equal}.  If @var{frame} is @code{nil}, it defaults to the selected frame.  If @var{frame} is @code{t}, the image is flushed on all existing frames."
msgstr ""

#. type: defun
#: display.texi.orig:5256
msgid "In Emacs's current implementation, each graphical terminal possesses an image cache, which is shared by all the frames on that terminal (@pxref{Multiple Terminals}).  Thus, refreshing an image in one frame also refreshes it in all other frames on the same terminal."
msgstr ""

#. type: Plain text
#: display.texi.orig:5265
msgid "One use for @code{image-flush} is to tell Emacs about a change in an image file.  If an image specification contains a @code{:file} property, the image is cached based on the file's contents when the image is first displayed.  Even if the file subsequently changes, Emacs continues displaying the old version of the image.  Calling @code{image-flush} flushes the image from the cache, forcing Emacs to re-read the file the next time it needs to display that image."
msgstr ""

#. type: Plain text
#: display.texi.orig:5271
msgid "Another use for @code{image-flush} is for memory conservation.  If your Lisp program creates a large number of temporary images over a period much shorter than @code{image-cache-eviction-delay} (see below), you can opt to flush unused images yourself, instead of waiting for Emacs to do it automatically."
msgstr ""

#. type: defun
#: display.texi.orig:5272
#, no-wrap
msgid "clear-image-cache &optional filter"
msgstr ""

#. type: defun
#: display.texi.orig:5280
msgid "This function clears an image cache, removing all the images stored in it.  If @var{filter} is omitted or @code{nil}, it clears the cache for the selected frame.  If @var{filter} is a frame, it clears the cache for that frame.  If @var{filter} is @code{t}, all image caches are cleared.  Otherwise, @var{filter} is taken to be a file name, and all images associated with that file name are removed from all image caches."
msgstr ""

#. type: Plain text
#: display.texi.orig:5285
msgid "If an image in the image cache has not been displayed for a specified period of time, Emacs removes it from the cache and frees the associated memory."
msgstr ""

#. type: defvar
#: display.texi.orig:5286
#, no-wrap
msgid "image-cache-eviction-delay"
msgstr ""

#. type: defvar
#: display.texi.orig:5290
msgid "This variable specifies the number of seconds an image can remain in the cache without being displayed.  When an image is not displayed for this length of time, Emacs removes it from the image cache."
msgstr ""

#. type: defvar
#: display.texi.orig:5293
msgid "Under some circumstances, if the number of images in the cache grows too large, the actual eviction delay may be shorter than this."
msgstr ""

#. type: defvar
#: display.texi.orig:5297
msgid "If the value is @code{nil}, Emacs does not remove images from the cache except when you explicitly clear it.  This mode can be useful for debugging."
msgstr ""

#. type: cindex
#: display.texi.orig:5301
#, no-wrap
msgid "buttons in buffers"
msgstr ""

#. type: cindex
#: display.texi.orig:5302
#, no-wrap
msgid "clickable buttons in buffers"
msgstr ""

#. type: Plain text
#: display.texi.orig:5308
msgid "The Button package defines functions for inserting and manipulating @dfn{buttons} that can be activated with the mouse or via keyboard commands.  These buttons are typically used for various kinds of hyperlinks."
msgstr ""

#. type: Plain text
#: display.texi.orig:5316
msgid "A button is essentially a set of text or overlay properties, attached to a stretch of text in a buffer.  These properties are called @dfn{button properties}.  One of these properties, the @dfn{action property}, specifies a function which is called when the user invokes the button using the keyboard or the mouse.  The action function may examine the button and use its other properties as desired."
msgstr ""

#. type: Plain text
#: display.texi.orig:5322
msgid "In some ways, the Button package duplicates the functionality in the Widget package.  @xref{Top, , Introduction, widget, The Emacs Widget Library}.  The advantage of the Button package is that it is faster, smaller, and simpler to program.  From the point of view of the user, the interfaces produced by the two packages are very similar."
msgstr ""

#. type: subsection
#: display.texi.orig:5329 display.texi.orig:5331 display.texi.orig:5332
#, no-wrap
msgid "Button Properties"
msgstr ""

#. type: menuentry
#: display.texi.orig:5329
msgid "Button properties with special meanings."
msgstr ""

#. type: subsection
#: display.texi.orig:5329 display.texi.orig:5396 display.texi.orig:5397
#, no-wrap
msgid "Button Types"
msgstr ""

#. type: menuentry
#: display.texi.orig:5329
msgid "Defining common properties for classes of buttons."
msgstr ""

#. type: subsection
#: display.texi.orig:5329 display.texi.orig:5426 display.texi.orig:5427
#, no-wrap
msgid "Making Buttons"
msgstr ""

#. type: menuentry
#: display.texi.orig:5329
msgid "Adding buttons to Emacs buffers."
msgstr ""

#. type: subsection
#: display.texi.orig:5329 display.texi.orig:5483 display.texi.orig:5484
#, no-wrap
msgid "Manipulating Buttons"
msgstr ""

#. type: menuentry
#: display.texi.orig:5329
msgid "Getting and setting properties of buttons."
msgstr ""

#. type: subsection
#: display.texi.orig:5329 display.texi.orig:5553 display.texi.orig:5554
#, no-wrap
msgid "Button Buffer Commands"
msgstr ""

#. type: menuentry
#: display.texi.orig:5329
msgid "Buffer-wide commands and bindings for buttons."
msgstr ""

#. type: cindex
#: display.texi.orig:5333
#, no-wrap
msgid "button properties"
msgstr ""

#. type: Plain text
#: display.texi.orig:5339
msgid "Each button has an associated list of properties defining its appearance and behavior, and other arbitrary properties may be used for application specific purposes.  The following properties have special meaning to the Button package:"
msgstr ""

#. type: item
#: display.texi.orig:5341
#, no-wrap
msgid "action"
msgstr ""

#. type: kindex
#: display.texi.orig:5342
#, no-wrap
msgid "action @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5346
msgid "The function to call when the user invokes the button, which is passed the single argument @var{button}.  By default this is @code{ignore}, which does nothing."
msgstr ""

#. type: item
#: display.texi.orig:5347
#, no-wrap
msgid "mouse-action"
msgstr ""

#. type: kindex
#: display.texi.orig:5348
#, no-wrap
msgid "mouse-action @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5353
msgid "This is similar to @code{action}, and when present, will be used instead of @code{action} for button invocations resulting from mouse-clicks (instead of the user hitting @key{RET}).  If not present, mouse-clicks use @code{action} instead."
msgstr ""

#. type: kindex
#: display.texi.orig:5355
#, no-wrap
msgid "face @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5358
msgid "This is an Emacs face controlling how buttons of this type are displayed; by default this is the @code{button} face."
msgstr ""

#. type: kindex
#: display.texi.orig:5360
#, no-wrap
msgid "mouse-face @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5364
msgid "This is an additional face which controls appearance during mouse-overs (merged with the usual button face); by default this is the usual Emacs @code{highlight} face."
msgstr ""

#. type: kindex
#: display.texi.orig:5366
#, no-wrap
msgid "keymap @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5371
msgid "The button's keymap, defining bindings active within the button region.  By default this is the usual button region keymap, stored in the variable @code{button-map}, which defines @key{RET} and @key{mouse-2} to invoke the button."
msgstr ""

#. type: kindex
#: display.texi.orig:5373
#, no-wrap
msgid "type @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5375
msgid "The button type.  @xref{Button Types}."
msgstr ""

#. type: kindex
#: display.texi.orig:5377
#, no-wrap
msgid "help-index @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5380
msgid "A string displayed by the Emacs tool-tip help system; by default, @code{\"mouse-2, RET: Push this button\"}."
msgstr ""

#. type: item
#: display.texi.orig:5381
#, no-wrap
msgid "follow-link"
msgstr ""

#. type: kindex
#: display.texi.orig:5382
#, no-wrap
msgid "follow-link @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5385
msgid "The follow-link property, defining how a @key{Mouse-1} click behaves on this button, @xref{Clickable Text}."
msgstr ""

#. type: item
#: display.texi.orig:5386
#, no-wrap
msgid "button"
msgstr ""

#. type: kindex
#: display.texi.orig:5387
#, no-wrap
msgid "button @r{(button property)}"
msgstr ""

#. type: table
#: display.texi.orig:5391
msgid "All buttons have a non-@code{nil} @code{button} property, which may be useful in finding regions of text that comprise buttons (which is what the standard button functions do)."
msgstr ""

#. type: Plain text
#: display.texi.orig:5395
msgid "There are other properties defined for the regions of text in a button, but these are not generally interesting for typical uses."
msgstr ""

#. type: cindex
#: display.texi.orig:5398
#, no-wrap
msgid "button types"
msgstr ""

#. type: Plain text
#: display.texi.orig:5405
msgid "Every button has a @dfn{button type}, which defines default values for the button's properties.  Button types are arranged in a hierarchy, with specialized types inheriting from more general types, so that it's easy to define special-purpose types of buttons for specific tasks."
msgstr ""

#. type: defun
#: display.texi.orig:5406
#, no-wrap
msgid "define-button-type name &rest properties"
msgstr ""

#. type: defun
#: display.texi.orig:5413
msgid "Define a `button type' called @var{name} (a symbol).  The remaining arguments form a sequence of @var{property value} pairs, specifying default property values for buttons with this type (a button's type may be set by giving it a @code{type} property when creating the button, using the @code{:type} keyword argument)."
msgstr ""

#. type: defun
#: display.texi.orig:5419
msgid "In addition, the keyword argument @code{:supertype} may be used to specify a button-type from which @var{name} inherits its default property values.  Note that this inheritance happens only when @var{name} is defined; subsequent changes to a supertype are not reflected in its subtypes."
msgstr ""

#. type: Plain text
#: display.texi.orig:5425
msgid "Using @code{define-button-type} to define default properties for buttons is not necessary---buttons without any specified type use the built-in button-type @code{button}---but it is encouraged, since doing so usually makes the resulting code clearer and more efficient."
msgstr ""

#. type: cindex
#: display.texi.orig:5428
#, no-wrap
msgid "making buttons"
msgstr ""

#. type: Plain text
#: display.texi.orig:5437
msgid "Buttons are associated with a region of text, using an overlay or text properties to hold button-specific information, all of which are initialized from the button's type (which defaults to the built-in button type @code{button}).  Like all Emacs text, the appearance of the button is governed by the @code{face} property; by default (via the @code{face} property inherited from the @code{button} button-type)  this is a simple underline, like a typical web-page link."
msgstr ""

#. type: Plain text
#: display.texi.orig:5442
msgid "For convenience, there are two sorts of button-creation functions, those that add button properties to an existing region of a buffer, called @code{make-...button}, and those that also insert the button text, called @code{insert-...button}."
msgstr ""

#. type: Plain text
#: display.texi.orig:5451
msgid "The button-creation functions all take the @code{&rest} argument @var{properties}, which should be a sequence of @var{property value} pairs, specifying properties to add to the button; see @ref{Button Properties}.  In addition, the keyword argument @code{:type} may be used to specify a button-type from which to inherit other properties; see @ref{Button Types}.  Any properties not explicitly specified during creation will be inherited from the button's type (if the type defines such a property)."
msgstr ""

#. type: Plain text
#: display.texi.orig:5454
msgid "The following functions add a button using an overlay (@pxref{Overlays}) to hold the button properties:"
msgstr ""

#. type: defun
#: display.texi.orig:5455
#, no-wrap
msgid "make-button beg end &rest properties"
msgstr ""

#. type: defun
#: display.texi.orig:5458
msgid "This makes a button from @var{beg} to @var{end} in the current buffer, and returns it."
msgstr ""

#. type: defun
#: display.texi.orig:5460
#, no-wrap
msgid "insert-button label &rest properties"
msgstr ""

#. type: defun
#: display.texi.orig:5463
msgid "This insert a button with the label @var{label} at point, and returns it."
msgstr ""

#. type: Plain text
#: display.texi.orig:5472
msgid "The following functions are similar, but using text properties (@pxref{Text Properties}) to hold the button properties.  Such buttons do not add markers to the buffer, so editing in the buffer does not slow down if there is an extremely large numbers of buttons.  However, if there is an existing face text property on the text (e.g., a face assigned by Font Lock mode), the button face may not be visible.  Both of these functions return the starting position of the new button."
msgstr ""

#. type: defun
#: display.texi.orig:5473
#, no-wrap
msgid "make-text-button beg end &rest properties"
msgstr ""

#. type: defun
#: display.texi.orig:5476
msgid "This makes a button from @var{beg} to @var{end} in the current buffer, using text properties."
msgstr ""

#. type: defun
#: display.texi.orig:5478
#, no-wrap
msgid "insert-text-button label &rest properties"
msgstr ""

#. type: defun
#: display.texi.orig:5481
msgid "This inserts a button with the label @var{label} at point, using text properties."
msgstr ""

#. type: cindex
#: display.texi.orig:5485
#, no-wrap
msgid "manipulating buttons"
msgstr ""

#. type: Plain text
#: display.texi.orig:5490
msgid "These are functions for getting and setting properties of buttons.  Often these are used by a button's invocation function to determine what to do."
msgstr ""

#. type: Plain text
#: display.texi.orig:5496
msgid "Where a @var{button} parameter is specified, it means an object referring to a specific button, either an overlay (for overlay buttons), or a buffer-position or marker (for text property buttons).  Such an object is passed as the first argument to a button's invocation function when it is invoked."
msgstr ""

#. type: defun
#: display.texi.orig:5497
#, no-wrap
msgid "button-start button"
msgstr ""

#. type: defun
#: display.texi.orig:5499
msgid "Return the position at which @var{button} starts."
msgstr ""

#. type: defun
#: display.texi.orig:5501
#, no-wrap
msgid "button-end button"
msgstr ""

#. type: defun
#: display.texi.orig:5503
msgid "Return the position at which @var{button} ends."
msgstr ""

#. type: defun
#: display.texi.orig:5505
#, no-wrap
msgid "button-get button prop"
msgstr ""

#. type: defun
#: display.texi.orig:5507
msgid "Get the property of button @var{button} named @var{prop}."
msgstr ""

#. type: defun
#: display.texi.orig:5509
#, no-wrap
msgid "button-put button prop val"
msgstr ""

#. type: defun
#: display.texi.orig:5511
msgid "Set @var{button}'s @var{prop} property to @var{val}."
msgstr ""

#. type: defun
#: display.texi.orig:5513
#, no-wrap
msgid "button-activate button &optional use-mouse-action"
msgstr ""

#. type: defun
#: display.texi.orig:5520
msgid "Call @var{button}'s @code{action} property (i.e., invoke the function that is the value of that property, passing it the single argument @var{button}).  If @var{use-mouse-action} is non-@code{nil}, try to invoke the button's @code{mouse-action} property instead of @code{action}; if the button has no @code{mouse-action} property, use @code{action} as normal."
msgstr ""

#. type: defun
#: display.texi.orig:5522
#, no-wrap
msgid "button-label button"
msgstr ""

#. type: defun
#: display.texi.orig:5524
msgid "Return @var{button}'s text label."
msgstr ""

#. type: defun
#: display.texi.orig:5526
#, no-wrap
msgid "button-type button"
msgstr ""

#. type: defun
#: display.texi.orig:5528
msgid "Return @var{button}'s button-type."
msgstr ""

#. type: defun
#: display.texi.orig:5530
#, no-wrap
msgid "button-has-type-p button type"
msgstr ""

#. type: defun
#: display.texi.orig:5533
msgid "Return @code{t} if @var{button} has button-type @var{type}, or one of @var{type}'s subtypes."
msgstr ""

#. type: defun
#: display.texi.orig:5535
#, no-wrap
msgid "button-at pos"
msgstr ""

#. type: defun
#: display.texi.orig:5539
msgid "Return the button at position @var{pos} in the current buffer, or @code{nil}.  If the button at @var{pos} is a text property button, the return value is a marker pointing to @var{pos}."
msgstr ""

#. type: defun
#: display.texi.orig:5541
#, no-wrap
msgid "button-type-put type prop val"
msgstr ""

#. type: defun
#: display.texi.orig:5543
msgid "Set the button-type @var{type}'s @var{prop} property to @var{val}."
msgstr ""

#. type: defun
#: display.texi.orig:5545
#, no-wrap
msgid "button-type-get type prop"
msgstr ""

#. type: defun
#: display.texi.orig:5547
msgid "Get the property of button-type @var{type} named @var{prop}."
msgstr ""

#. type: defun
#: display.texi.orig:5549
#, no-wrap
msgid "button-type-subtype-p type supertype"
msgstr ""

#. type: defun
#: display.texi.orig:5551
msgid "Return @code{t} if button-type @var{type} is a subtype of @var{supertype}."
msgstr ""

#. type: cindex
#: display.texi.orig:5555
#, no-wrap
msgid "button buffer commands"
msgstr ""

#. type: Plain text
#: display.texi.orig:5559
msgid "These are commands and functions for locating and operating on buttons in an Emacs buffer."
msgstr ""

#. type: Plain text
#: display.texi.orig:5568
msgid "@code{push-button} is the command that a user uses to actually `push' a button, and is bound by default in the button itself to @key{RET} and to @key{mouse-2} using a local keymap in the button's overlay or text properties.  Commands that are useful outside the buttons itself, such as @code{forward-button} and @code{backward-button} are additionally available in the keymap stored in @code{button-buffer-map}; a mode which uses buttons may want to use @code{button-buffer-map} as a parent keymap for its keymap."
msgstr ""

#. type: Plain text
#: display.texi.orig:5573
msgid "If the button has a non-@code{nil} @code{follow-link} property, and @code{mouse-1-click-follows-link} is set, a quick @key{Mouse-1} click will also activate the @code{push-button} command.  @xref{Clickable Text}."
msgstr ""

#. type: deffn
#: display.texi.orig:5574
#, no-wrap
msgid "Command push-button &optional pos use-mouse-action"
msgstr ""

#. type: deffn
#: display.texi.orig:5585
msgid "Perform the action specified by a button at location @var{pos}.  @var{pos} may be either a buffer position or a mouse-event.  If @var{use-mouse-action} is non-@code{nil}, or @var{pos} is a mouse-event (@pxref{Mouse Events}), try to invoke the button's @code{mouse-action} property instead of @code{action}; if the button has no @code{mouse-action} property, use @code{action} as normal.  @var{pos} defaults to point, except when @code{push-button} is invoked interactively as the result of a mouse-event, in which case, the mouse event's position is used.  If there's no button at @var{pos}, do nothing and return @code{nil}, otherwise return @code{t}."
msgstr ""

#. type: deffn
#: display.texi.orig:5587
#, no-wrap
msgid "Command forward-button n &optional wrap display-message"
msgstr ""

#. type: deffn
#: display.texi.orig:5595
msgid "Move to the @var{n}th next button, or @var{n}th previous button if @var{n} is negative.  If @var{n} is zero, move to the start of any button at point.  If @var{wrap} is non-@code{nil}, moving past either end of the buffer continues from the other end.  If @var{display-message} is non-@code{nil}, the button's help-echo string is displayed.  Any button with a non-@code{nil} @code{skip} property is skipped over.  Returns the button found."
msgstr ""

#. type: deffn
#: display.texi.orig:5597
#, no-wrap
msgid "Command backward-button n &optional wrap display-message"
msgstr ""

#. type: deffn
#: display.texi.orig:5605
msgid "Move to the @var{n}th previous button, or @var{n}th next button if @var{n} is negative.  If @var{n} is zero, move to the start of any button at point.  If @var{wrap} is non-@code{nil}, moving past either end of the buffer continues from the other end.  If @var{display-message} is non-@code{nil}, the button's help-echo string is displayed.  Any button with a non-@code{nil} @code{skip} property is skipped over.  Returns the button found."
msgstr ""

#. type: defun
#: display.texi.orig:5607
#, no-wrap
msgid "next-button pos &optional count-current"
msgstr ""

#. type: defunx
#: display.texi.orig:5608
#, no-wrap
msgid "previous-button pos &optional count-current"
msgstr ""

#. type: defun
#: display.texi.orig:5613
msgid "Return the next button after (for @code{next-button}) or before (for @code{previous-button}) position @var{pos} in the current buffer.  If @var{count-current} is non-@code{nil}, count any button at @var{pos} in the search, instead of starting at the next button."
msgstr ""

#. type: cindex
#: display.texi.orig:5617
#, no-wrap
msgid "ewoc"
msgstr ""

#. type: cindex
#: display.texi.orig:5618
#, no-wrap
msgid "display, abstract"
msgstr ""

#. type: cindex
#: display.texi.orig:5619
#, no-wrap
msgid "display, arbitrary objects"
msgstr ""

#. type: cindex
#: display.texi.orig:5620
#, no-wrap
msgid "model/view/controller"
msgstr ""

#. type: cindex
#: display.texi.orig:5621
#, no-wrap
msgid "view part, model/view/controller"
msgstr ""

#. type: Plain text
#: display.texi.orig:5628
msgid "The Ewoc package constructs buffer text that represents a structure of Lisp objects, and updates the text to follow changes in that structure.  This is like the ``view'' component in the ``model/view/controller'' design paradigm.  Ewoc means ``Emacs's Widget for Object Collections''."
msgstr ""

#. type: Plain text
#: display.texi.orig:5635
msgid "An @dfn{ewoc} is a structure that organizes information required to construct buffer text that represents certain Lisp data.  The buffer text of the ewoc has three parts, in order: first, fixed @dfn{header} text; next, textual descriptions of a series of data elements (Lisp objects that you specify); and last, fixed @dfn{footer} text.  Specifically, an ewoc contains information on:"
msgstr ""

#. type: itemize
#: display.texi.orig:5639
msgid "The buffer which its text is generated in."
msgstr ""

#. type: itemize
#: display.texi.orig:5642
msgid "The text's start position in the buffer."
msgstr ""

#. type: itemize
#: display.texi.orig:5645
msgid "The header and footer strings."
msgstr ""

#. type: cindex
#: display.texi.orig:5647
#, no-wrap
msgid "node, ewoc"
msgstr ""

#. type: itemize
#: display.texi.orig:5650
msgid "A doubly-linked chain of @dfn{nodes}, each of which contains:"
msgstr ""

#. type: itemize
#: display.texi.orig:5654
msgid "A @dfn{data element}, a single Lisp object."
msgstr ""

#. type: itemize
#: display.texi.orig:5657
msgid "Links to the preceding and following nodes in the chain."
msgstr ""

#. type: itemize
#: display.texi.orig:5663
msgid "A @dfn{pretty-printer} function which is responsible for inserting the textual representation of a data element value into the current buffer."
msgstr ""

#. type: Plain text
#: display.texi.orig:5672
msgid "Typically, you define an ewoc with @code{ewoc-create}, and then pass the resulting ewoc structure to other functions in the Ewoc package to build nodes within it, and display it in the buffer.  Once it is displayed in the buffer, other functions determine the correspondence between buffer positions and nodes, move point from one node's textual representation to another, and so forth.  @xref{Abstract Display Functions}."
msgstr ""

#. type: cindex
#: display.texi.orig:5673
#, no-wrap
msgid "encapsulation, ewoc"
msgstr ""

#. type: Plain text
#: display.texi.orig:5679
msgid "A node @dfn{encapsulates} a data element much the way a variable holds a value.  Normally, encapsulation occurs as a part of adding a node to the ewoc.  You can retrieve the data element value and place a new value in its place, like so:"
msgstr ""

#. type: lisp
#: display.texi.orig:5683
#, no-wrap
msgid ""
"(ewoc-data @var{node})\n"
"@result{} value\n"
"\n"
msgstr ""

#. type: lisp
#: display.texi.orig:5686
#, no-wrap
msgid ""
"(ewoc-set-data @var{node} @var{new-value})\n"
"@result{} @var{new-value}\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:5693
msgid "You can also use, as the data element value, a Lisp object (list or vector) that is a container for the ``real'' value, or an index into some other structure.  The example (@pxref{Abstract Display Example})  uses the latter approach."
msgstr ""

#. type: Plain text
#: display.texi.orig:5701
msgid "When the data changes, you will want to update the text in the buffer.  You can update all nodes by calling @code{ewoc-refresh}, or just specific nodes using @code{ewoc-invalidate}, or all nodes satisfying a predicate using @code{ewoc-map}.  Alternatively, you can delete invalid nodes using @code{ewoc-delete} or @code{ewoc-filter}, and add new nodes in their place.  Deleting a node from an ewoc deletes its associated textual description from buffer, as well."
msgstr ""

#. type: subsection
#: display.texi.orig:5705 display.texi.orig:5707 display.texi.orig:5708
#, no-wrap
msgid "Abstract Display Functions"
msgstr ""

#. type: menuentry
#: display.texi.orig:5705
msgid "Functions in the Ewoc package."
msgstr ""

#. type: subsection
#: display.texi.orig:5705 display.texi.orig:5842 display.texi.orig:5843
#, no-wrap
msgid "Abstract Display Example"
msgstr ""

#. type: menuentry
#: display.texi.orig:5705
msgid "Example of using Ewoc."
msgstr ""

#. type: Plain text
#: display.texi.orig:5713
msgid "In this subsection, @var{ewoc} and @var{node} stand for the structures described above (@pxref{Abstract Display}), while @var{data} stands for an arbitrary Lisp object used as a data element."
msgstr ""

#. type: defun
#: display.texi.orig:5714
#, no-wrap
msgid "ewoc-create pretty-printer &optional header footer nosep"
msgstr ""

#. type: defun
#: display.texi.orig:5721
msgid "This constructs and returns a new ewoc, with no nodes (and thus no data elements).  @var{pretty-printer} should be a function that takes one argument, a data element of the sort you plan to use in this ewoc, and inserts its textual description at point using @code{insert} (and never @code{insert-before-markers}, because that would interfere with the Ewoc package's internal mechanisms)."
msgstr ""

#. type: defun
#: display.texi.orig:5728
msgid "Normally, a newline is automatically inserted after the header, the footer and every node's textual description.  If @var{nosep} is non-@code{nil}, no newline is inserted.  This may be useful for displaying an entire ewoc on a single line, for example, or for making nodes ``invisible'' by arranging for @var{pretty-printer} to do nothing for those nodes."
msgstr ""

#. type: defun
#: display.texi.orig:5732
msgid "An ewoc maintains its text in the buffer that is current when you create it, so switch to the intended buffer before calling @code{ewoc-create}."
msgstr ""

#. type: defun
#: display.texi.orig:5734
#, no-wrap
msgid "ewoc-buffer ewoc"
msgstr ""

#. type: defun
#: display.texi.orig:5736
msgid "This returns the buffer where @var{ewoc} maintains its text."
msgstr ""

#. type: defun
#: display.texi.orig:5738
#, no-wrap
msgid "ewoc-get-hf ewoc"
msgstr ""

#. type: defun
#: display.texi.orig:5741
msgid "This returns a cons cell @code{(@var{header} . @var{footer})} made from @var{ewoc}'s header and footer."
msgstr ""

#. type: defun
#: display.texi.orig:5743
#, no-wrap
msgid "ewoc-set-hf ewoc header footer"
msgstr ""

#. type: defun
#: display.texi.orig:5746
msgid "This sets the header and footer of @var{ewoc} to the strings @var{header} and @var{footer}, respectively."
msgstr ""

#. type: defun
#: display.texi.orig:5748
#, no-wrap
msgid "ewoc-enter-first ewoc data"
msgstr ""

#. type: defunx
#: display.texi.orig:5749
#, no-wrap
msgid "ewoc-enter-last ewoc data"
msgstr ""

#. type: defun
#: display.texi.orig:5752
msgid "These add a new node encapsulating @var{data}, putting it, respectively, at the beginning or end of @var{ewoc}'s chain of nodes."
msgstr ""

#. type: defun
#: display.texi.orig:5754
#, no-wrap
msgid "ewoc-enter-before ewoc node data"
msgstr ""

#. type: defunx
#: display.texi.orig:5755
#, no-wrap
msgid "ewoc-enter-after ewoc node data"
msgstr ""

#. type: defun
#: display.texi.orig:5758
msgid "These add a new node encapsulating @var{data}, adding it to @var{ewoc} before or after @var{node}, respectively."
msgstr ""

#. type: defun
#: display.texi.orig:5760
#, no-wrap
msgid "ewoc-prev ewoc node"
msgstr ""

#. type: defunx
#: display.texi.orig:5761
#, no-wrap
msgid "ewoc-next ewoc node"
msgstr ""

#. type: defun
#: display.texi.orig:5764
msgid "These return, respectively, the previous node and the next node of @var{node} in @var{ewoc}."
msgstr ""

#. type: defun
#: display.texi.orig:5766
#, no-wrap
msgid "ewoc-nth ewoc n"
msgstr ""

#. type: defun
#: display.texi.orig:5770
msgid "This returns the node in @var{ewoc} found at zero-based index @var{n}.  A negative @var{n} means count from the end.  @code{ewoc-nth} returns @code{nil} if @var{n} is out of range."
msgstr ""

#. type: defun
#: display.texi.orig:5772
#, no-wrap
msgid "ewoc-data node"
msgstr ""

#. type: defun
#: display.texi.orig:5774
msgid "This extracts the data encapsulated by @var{node} and returns it."
msgstr ""

#. type: defun
#: display.texi.orig:5776
#, no-wrap
msgid "ewoc-set-data node data"
msgstr ""

#. type: defun
#: display.texi.orig:5778
msgid "This sets the data encapsulated by @var{node} to @var{data}."
msgstr ""

#. type: defun
#: display.texi.orig:5780
#, no-wrap
msgid "ewoc-locate ewoc &optional pos guess"
msgstr ""

#. type: defun
#: display.texi.orig:5788
msgid "This determines the node in @var{ewoc} which contains point (or @var{pos} if specified), and returns that node.  If @var{ewoc} has no nodes, it returns @code{nil}.  If @var{pos} is before the first node, it returns the first node; if @var{pos} is after the last node, it returns the last node.  The optional third arg @var{guess} should be a node that is likely to be near @var{pos}; this doesn't alter the result, but makes the function run faster."
msgstr ""

#. type: defun
#: display.texi.orig:5790
#, no-wrap
msgid "ewoc-location node"
msgstr ""

#. type: defun
#: display.texi.orig:5792
msgid "This returns the start position of @var{node}."
msgstr ""

#. type: defun
#: display.texi.orig:5794
#, no-wrap
msgid "ewoc-goto-prev ewoc arg"
msgstr ""

#. type: defunx
#: display.texi.orig:5795
#, no-wrap
msgid "ewoc-goto-next ewoc arg"
msgstr ""

#. type: defun
#: display.texi.orig:5801
msgid "These move point to the previous or next, respectively, @var{arg}th node in @var{ewoc}.  @code{ewoc-goto-prev} does not move if it is already at the first node or if @var{ewoc} is empty, whereas @code{ewoc-goto-next} moves past the last node, returning @code{nil}.  Excepting this special case, these functions return the node moved to."
msgstr ""

#. type: defun
#: display.texi.orig:5803
#, no-wrap
msgid "ewoc-goto-node ewoc node"
msgstr ""

#. type: defun
#: display.texi.orig:5805
msgid "This moves point to the start of @var{node} in @var{ewoc}."
msgstr ""

#. type: defun
#: display.texi.orig:5807
#, no-wrap
msgid "ewoc-refresh ewoc"
msgstr ""

#. type: defun
#: display.texi.orig:5812
msgid "This function regenerates the text of @var{ewoc}.  It works by deleting the text between the header and the footer, i.e., all the data elements' representations, and then calling the pretty-printer function for each node, one by one, in order."
msgstr ""

#. type: defun
#: display.texi.orig:5814
#, no-wrap
msgid "ewoc-invalidate ewoc &rest nodes"
msgstr ""

#. type: defun
#: display.texi.orig:5817
msgid "This is similar to @code{ewoc-refresh}, except that only @var{nodes} in @var{ewoc} are updated instead of the entire set."
msgstr ""

#. type: defun
#: display.texi.orig:5819
#, no-wrap
msgid "ewoc-delete ewoc &rest nodes"
msgstr ""

#. type: defun
#: display.texi.orig:5821
msgid "This deletes each node in @var{nodes} from @var{ewoc}."
msgstr ""

#. type: defun
#: display.texi.orig:5823
#, no-wrap
msgid "ewoc-filter ewoc predicate &rest args"
msgstr ""

#. type: defun
#: display.texi.orig:5827
msgid "This calls @var{predicate} for each data element in @var{ewoc} and deletes those nodes for which @var{predicate} returns @code{nil}.  Any @var{args} are passed to @var{predicate}."
msgstr ""

#. type: defun
#: display.texi.orig:5829
#, no-wrap
msgid "ewoc-collect ewoc predicate &rest args"
msgstr ""

#. type: defun
#: display.texi.orig:5834
msgid "This calls @var{predicate} for each data element in @var{ewoc} and returns a list of those elements for which @var{predicate} returns non-@code{nil}.  The elements in the list are ordered as in the buffer.  Any @var{args} are passed to @var{predicate}."
msgstr ""

#. type: defun
#: display.texi.orig:5836
#, no-wrap
msgid "ewoc-map map-function ewoc &rest args"
msgstr ""

#. type: defun
#: display.texi.orig:5840
msgid "This calls @var{map-function} for each data element in @var{ewoc} and updates those nodes for which @var{map-function} returns non-@code{nil}.  Any @var{args} are passed to @var{map-function}."
msgstr ""

#. type: Plain text
#: display.texi.orig:5849
msgid "Here is a simple example using functions of the ewoc package to implement a ``color components display'', an area in a buffer that represents a vector of three integers (itself representing a 24-bit RGB value) in various ways."
msgstr ""

#. type: example
#: display.texi.orig:5855
#, no-wrap
msgid ""
"(setq colorcomp-ewoc nil\n"
"      colorcomp-data nil\n"
"      colorcomp-mode-map nil\n"
"      colorcomp-labels [\"Red\" \"Green\" \"Blue\"])\n"
"\n"
msgstr ""

#. type: example
#: display.texi.orig:5873
#, no-wrap
msgid ""
"(defun colorcomp-pp (data)\n"
"  (if data\n"
"      (let ((comp (aref colorcomp-data data)))\n"
"        (insert (aref colorcomp-labels data) \"\\t: #x\"\n"
"                (format \"%02X\" comp) \" \"\n"
"                (make-string (ash comp -2) ?#) \"\\n\"))\n"
"    (let ((cstr (format \"#%02X%02X%02X\"\n"
"                        (aref colorcomp-data 0)\n"
"                        (aref colorcomp-data 1)\n"
"                        (aref colorcomp-data 2)))\n"
"          (samp \" (sample text) \"))\n"
"      (insert \"Color\\t: \"\n"
"              (propertize samp 'face\n"
"                          `(foreground-color . ,cstr))\n"
"              (propertize samp 'face\n"
"                          `(background-color . ,cstr))\n"
"              \"\\n\"))))\n"
"\n"
msgstr ""

#. type: example
#: display.texi.orig:5902
#, no-wrap
msgid ""
"(defun colorcomp (color)\n"
"  \"Allow fiddling with COLOR in a new buffer.\n"
"The buffer is in Color Components mode.\"\n"
"  (interactive \"sColor (name or #RGB or #RRGGBB): \")\n"
"  (when (string= \"\" color)\n"
"    (setq color \"green\"))\n"
"  (unless (color-values color)\n"
"    (error \"No such color: %S\" color))\n"
"  (switch-to-buffer\n"
"   (generate-new-buffer (format \"originally: %s\" color)))\n"
"  (kill-all-local-variables)\n"
"  (setq major-mode 'colorcomp-mode\n"
"        mode-name \"Color Components\")\n"
"  (use-local-map colorcomp-mode-map)\n"
"  (erase-buffer)\n"
"  (buffer-disable-undo)\n"
"  (let ((data (apply 'vector (mapcar (lambda (n) (ash n -8))\n"
"                                     (color-values color))))\n"
"        (ewoc (ewoc-create 'colorcomp-pp\n"
"                           \"\\nColor Components\\n\\n\"\n"
"                           (substitute-command-keys\n"
"                            \"\\n\\\\@{colorcomp-mode-map@}\"))))\n"
"    (set (make-local-variable 'colorcomp-data) data)\n"
"    (set (make-local-variable 'colorcomp-ewoc) ewoc)\n"
"    (ewoc-enter-last ewoc 0)\n"
"    (ewoc-enter-last ewoc 1)\n"
"    (ewoc-enter-last ewoc 2)\n"
"    (ewoc-enter-last ewoc nil)))\n"
msgstr ""

#. type: cindex
#: display.texi.orig:5904
#, no-wrap
msgid "controller part, model/view/controller"
msgstr ""

#. type: Plain text
#: display.texi.orig:5910
msgid "This example can be extended to be a ``color selection widget'' (in other words, the controller part of the ``model/view/controller'' design paradigm) by defining commands to modify @code{colorcomp-data} and to ``finish'' the selection process, and a keymap to tie it all together conveniently."
msgstr ""

#. type: smallexample
#: display.texi.orig:5920
#, no-wrap
msgid ""
"(defun colorcomp-mod (index limit delta)\n"
"  (let ((cur (aref colorcomp-data index)))\n"
"    (unless (= limit cur)\n"
"      (aset colorcomp-data index (+ cur delta)))\n"
"    (ewoc-invalidate\n"
"     colorcomp-ewoc\n"
"     (ewoc-nth colorcomp-ewoc index)\n"
"     (ewoc-nth colorcomp-ewoc -1))))\n"
"\n"
msgstr ""

#. type: smallexample
#: display.texi.orig:5927
#, no-wrap
msgid ""
"(defun colorcomp-R-more () (interactive) (colorcomp-mod 0 255 1))\n"
"(defun colorcomp-G-more () (interactive) (colorcomp-mod 1 255 1))\n"
"(defun colorcomp-B-more () (interactive) (colorcomp-mod 2 255 1))\n"
"(defun colorcomp-R-less () (interactive) (colorcomp-mod 0 0 -1))\n"
"(defun colorcomp-G-less () (interactive) (colorcomp-mod 1 0 -1))\n"
"(defun colorcomp-B-less () (interactive) (colorcomp-mod 2 0 -1))\n"
"\n"
msgstr ""

#. type: smallexample
#: display.texi.orig:5937
#, no-wrap
msgid ""
"(defun colorcomp-copy-as-kill-and-exit ()\n"
"  \"Copy the color components into the kill ring and kill the buffer.\n"
"The string is formatted #RRGGBB (hash followed by six hex digits).\"\n"
"  (interactive)\n"
"  (kill-new (format \"#%02X%02X%02X\"\n"
"                    (aref colorcomp-data 0)\n"
"                    (aref colorcomp-data 1)\n"
"                    (aref colorcomp-data 2)))\n"
"  (kill-buffer nil))\n"
"\n"
msgstr ""

#. type: smallexample
#: display.texi.orig:5949
#, no-wrap
msgid ""
"(setq colorcomp-mode-map\n"
"      (let ((m (make-sparse-keymap)))\n"
"        (suppress-keymap m)\n"
"        (define-key m \"i\" 'colorcomp-R-less)\n"
"        (define-key m \"o\" 'colorcomp-R-more)\n"
"        (define-key m \"k\" 'colorcomp-G-less)\n"
"        (define-key m \"l\" 'colorcomp-G-more)\n"
"        (define-key m \",\" 'colorcomp-B-less)\n"
"        (define-key m \".\" 'colorcomp-B-more)\n"
"        (define-key m \" \" 'colorcomp-copy-as-kill-and-exit)\n"
"        m))\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:5954
msgid "Note that we never modify the data in each node, which is fixed when the ewoc is created to be either @code{nil} or an index into the vector @code{colorcomp-data}, the actual color components."
msgstr ""

#. type: section
#: display.texi.orig:5956
#, no-wrap
msgid "Blinking Parentheses"
msgstr ""

#. type: cindex
#: display.texi.orig:5957
#, no-wrap
msgid "parenthesis matching"
msgstr ""

#. type: cindex
#: display.texi.orig:5958
#, no-wrap
msgid "blinking parentheses"
msgstr ""

#. type: cindex
#: display.texi.orig:5959
#, no-wrap
msgid "balancing parentheses"
msgstr ""

#. type: Plain text
#: display.texi.orig:5963
msgid "This section describes the mechanism by which Emacs shows a matching open parenthesis when the user inserts a close parenthesis."
msgstr ""

#. type: defvar
#: display.texi.orig:5964
#, no-wrap
msgid "blink-paren-function"
msgstr ""

#. type: defvar
#: display.texi.orig:5969
msgid "The value of this variable should be a function (of no arguments) to be called whenever a character with close parenthesis syntax is inserted.  The value of @code{blink-paren-function} may be @code{nil}, in which case nothing is done."
msgstr ""

#. type: defopt
#: display.texi.orig:5971
#, no-wrap
msgid "blink-matching-paren"
msgstr ""

#. type: defopt
#: display.texi.orig:5974
msgid "If this variable is @code{nil}, then @code{blink-matching-open} does nothing."
msgstr ""

#. type: defopt
#: display.texi.orig:5976
#, no-wrap
msgid "blink-matching-paren-distance"
msgstr ""

#. type: defopt
#: display.texi.orig:5979
msgid "This variable specifies the maximum distance to scan for a matching parenthesis before giving up."
msgstr ""

#. type: defopt
#: display.texi.orig:5981
#, no-wrap
msgid "blink-matching-delay"
msgstr ""

#. type: defopt
#: display.texi.orig:5985
msgid "This variable specifies the number of seconds to keep indicating the matching parenthesis.  A fraction of a second often gives good results, but the default is 1, which works on all systems."
msgstr ""

#. type: deffn
#: display.texi.orig:5987
#, no-wrap
msgid "Command blink-matching-open"
msgstr ""

#. type: deffn
#: display.texi.orig:5995
msgid "This function is the default value of @code{blink-paren-function}.  It assumes that point follows a character with close parenthesis syntax and applies the appropriate effect momentarily to the matching opening character.  If that character is not already on the screen, it displays the character's context in the echo area.  To avoid long delays, this function does not search farther than @code{blink-matching-paren-distance} characters."
msgstr ""

#. type: deffn
#: display.texi.orig:5997
msgid "Here is an example of calling this function explicitly."
msgstr ""

#. type: group
#: display.texi.orig:6003
#, no-wrap
msgid ""
"(defun interactive-blink-matching-open ()\n"
"  \"Indicate momentarily the start of parenthesized sexp before point.\"\n"
"  (interactive)\n"
msgstr ""

#. type: group
#: display.texi.orig:6009
#, no-wrap
msgid ""
"  (let ((blink-matching-paren-distance\n"
"         (buffer-size))\n"
"        (blink-matching-paren t))\n"
"    (blink-matching-open)))\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:6025
msgid "This section describes how characters are actually displayed by Emacs.  Typically, a character is displayed as a @dfn{glyph} (a graphical symbol which occupies one character position on the screen), whose appearance corresponds to the character itself.  For example, the character @samp{a} (character code 97) is displayed as @samp{a}.  Some characters, however, are displayed specially.  For example, the formfeed character (character code 12) is usually displayed as a sequence of two glyphs, @samp{^L}, while the newline character (character code 10) starts a new screen line."
msgstr ""

#. type: Plain text
#: display.texi.orig:6029
msgid "You can modify how each character is displayed by defining a @dfn{display table}, which maps each character code into a sequence of glyphs.  @xref{Display Tables}."
msgstr ""

#. type: node
#: display.texi.orig:6036 display.texi.orig:6038
#, no-wrap
msgid "Usual Display"
msgstr ""

#. type: menuentry
#: display.texi.orig:6036
msgid "The usual conventions for displaying characters."
msgstr ""

#. type: subsection
#: display.texi.orig:6036 display.texi.orig:6134 display.texi.orig:6135
#, no-wrap
msgid "Display Tables"
msgstr ""

#. type: menuentry
#: display.texi.orig:6036
msgid "What a display table consists of."
msgstr ""

#. type: subsection
#: display.texi.orig:6036 display.texi.orig:6237 display.texi.orig:6238
#, no-wrap
msgid "Active Display Table"
msgstr ""

#. type: menuentry
#: display.texi.orig:6036
msgid "How Emacs selects a display table to use."
msgstr ""

#. type: subsection
#: display.texi.orig:6036 display.texi.orig:6278 display.texi.orig:6279
#, no-wrap
msgid "Glyphs"
msgstr ""

#. type: menuentry
#: display.texi.orig:6036
msgid "How to define a glyph, and what glyphs mean."
msgstr ""

#. type: node
#: display.texi.orig:6036 display.texi.orig:6336
#, no-wrap
msgid "Glyphless Chars"
msgstr ""

#. type: menuentry
#: display.texi.orig:6036
msgid "How glyphless characters are drawn."
msgstr ""

#. type: subsection
#: display.texi.orig:6039
#, no-wrap
msgid "Usual Display Conventions"
msgstr ""

#. type: Plain text
#: display.texi.orig:6043
msgid "Here are the conventions for displaying each character code (in the absence of a display table, which can override these"
msgstr ""

#. type: iftex
#: display.texi.orig:6045
msgid "conventions)."
msgstr ""

#. type: ifnottex
#: display.texi.orig:6048
msgid "conventions; @pxref{Display Tables})."
msgstr ""

#. type: cindex
#: display.texi.orig:6050
#, no-wrap
msgid "printable ASCII characters"
msgstr ""

#. type: itemize
#: display.texi.orig:6056
msgid "The @dfn{printable @acronym{ASCII} characters}, character codes 32 through 126 (consisting of numerals, English letters, and symbols like @samp{#}) are displayed literally."
msgstr ""

#. type: itemize
#: display.texi.orig:6062
msgid "The tab character (character code 9) displays as whitespace stretching up to the next tab stop column.  @xref{Text Display,,, emacs, The GNU Emacs Manual}.  The variable @code{tab-width} controls the number of spaces per tab stop (see below)."
msgstr ""

#. type: itemize
#: display.texi.orig:6066
msgid "The newline character (character code 10) has a special effect: it ends the preceding line and starts a new line."
msgstr ""

#. type: cindex
#: display.texi.orig:6067
#, no-wrap
msgid "ASCII control characters"
msgstr ""

#. type: itemize
#: display.texi.orig:6077
msgid "The non-printable @dfn{@acronym{ASCII} control characters}---character codes 0 through 31, as well as the @key{DEL} character (character code 127)---display in one of two ways according to the variable @code{ctl-arrow}.  If this variable is non-@code{nil} (the default), these characters are displayed as sequences of two glyphs, where the first glyph is @samp{^} (a display table can specify a glyph to use instead of @samp{^}); e.g., the @key{DEL} character is displayed as @samp{^?}."
msgstr ""

#. type: itemize
#: display.texi.orig:6080
msgid "If @code{ctl-arrow} is @code{nil}, these characters are displayed as octal escapes (see below)."
msgstr ""

#. type: itemize
#: display.texi.orig:6085
msgid "This rule also applies to carriage return (character code 13), if that character appears in the buffer.  But carriage returns usually do not appear in buffer text; they are eliminated as part of end-of-line conversion (@pxref{Coding System Basics})."
msgstr ""

#. type: cindex
#: display.texi.orig:6086
#, no-wrap
msgid "octal escapes"
msgstr ""

#. type: itemize
#: display.texi.orig:6094
msgid "@dfn{Raw bytes} are non-@acronym{ASCII} characters with codes 128 through 255 (@pxref{Text Representations}).  These characters display as @dfn{octal escapes}: sequences of four glyphs, where the first glyph is the @acronym{ASCII} code for @samp{\\}, and the others are digit characters representing the character code in octal.  (A display table can specify a glyph to use instead of @samp{\\}.)"
msgstr ""

#. type: itemize
#: display.texi.orig:6103
msgid "Each non-@acronym{ASCII} character with code above 255 is displayed literally, if the terminal supports it.  If the terminal does not support it, the character is said to be @dfn{glyphless}, and it is usually displayed using a placeholder glyph.  For example, if a graphical terminal has no font for a character, Emacs usually displays a box containing the character code in hexadecimal.  @xref{Glyphless Chars}."
msgstr ""

#. type: Plain text
#: display.texi.orig:6109
msgid "The above display conventions apply even when there is a display table, for any character whose entry in the active display table is @code{nil}.  Thus, when you set up a display table, you need only specify the characters for which you want special behavior."
msgstr ""

#. type: Plain text
#: display.texi.orig:6116
msgid "The following variables affect how certain characters are displayed on the screen.  Since they change the number of columns the characters occupy, they also affect the indentation functions.  They also affect how the mode line is displayed; if you want to force redisplay of the mode line using the new values, call the function @code{force-mode-line-update} (@pxref{Mode Line Format})."
msgstr ""

#. type: defopt
#: display.texi.orig:6117
#, no-wrap
msgid "ctl-arrow"
msgstr ""

#. type: cindex
#: display.texi.orig:6118
#, no-wrap
msgid "control characters in display"
msgstr ""

#. type: defopt
#: display.texi.orig:6124
msgid "This buffer-local variable controls how control characters are displayed.  If it is non-@code{nil}, they are displayed as a caret followed by the character: @samp{^A}.  If it is @code{nil}, they are displayed as octal escapes: a backslash followed by three octal digits, as in @samp{\\001}."
msgstr ""

#. type: defopt
#: display.texi.orig:6126
#, no-wrap
msgid "tab-width"
msgstr ""

#. type: defopt
#: display.texi.orig:6132
msgid "The value of this buffer-local variable is the spacing between tab stops used for displaying tab characters in Emacs buffers.  The value is in units of columns, and the default is 8.  Note that this feature is completely independent of the user-settable tab stops used by the command @code{tab-to-tab-stop}.  @xref{Indent Tabs}."
msgstr ""

#. type: cindex
#: display.texi.orig:6137
#, no-wrap
msgid "display table"
msgstr ""

#. type: Plain text
#: display.texi.orig:6143
msgid "A display table is a special-purpose char-table (@pxref{Char-Tables}), with @code{display-table} as its subtype, which is used to override the usual character display conventions.  This section describes how to make, inspect, and assign elements to a display table object."
msgstr ""

#. type: defun
#: display.texi.orig:6144
#, no-wrap
msgid "make-display-table"
msgstr ""

#. type: defun
#: display.texi.orig:6147
msgid "This creates and returns a display table.  The table initially has @code{nil} in all elements."
msgstr ""

#. type: Plain text
#: display.texi.orig:6155
msgid "The ordinary elements of the display table are indexed by character codes; the element at index @var{c} says how to display the character code @var{c}.  The value should be @code{nil} (which means to display the character @var{c} according to the usual display conventions; @pxref{Usual Display}), or a vector of glyph codes (which means to display the character @var{c} as those glyphs; @pxref{Glyphs})."
msgstr ""

#. type: Plain text
#: display.texi.orig:6159
msgid "@strong{Warning:} if you use the display table to change the display of newline characters, the whole buffer will be displayed as one long ``line''."
msgstr ""

#. type: Plain text
#: display.texi.orig:6163
msgid "The display table also has six ``extra slots'' which serve special purposes.  Here is a table of their meanings; @code{nil} in any slot means to use the default for that slot, as stated below."
msgstr ""

#. type: item
#: display.texi.orig:6165
#, no-wrap
msgid "0"
msgstr ""

#. type: table
#: display.texi.orig:6170
msgid "The glyph for the end of a truncated screen line (the default for this is @samp{$}).  @xref{Glyphs}.  On graphical terminals, Emacs uses arrows in the fringes to indicate truncation, so the display table has no effect."
msgstr ""

#. type: item
#: display.texi.orig:6171
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: display.texi.orig:6175
msgid "The glyph for the end of a continued line (the default is @samp{\\}).  On graphical terminals, Emacs uses curved arrows in the fringes to indicate continuation, so the display table has no effect."
msgstr ""

#. type: item
#: display.texi.orig:6176
#, no-wrap
msgid "2"
msgstr ""

#. type: table
#: display.texi.orig:6179
msgid "The glyph for indicating a character displayed as an octal character code (the default is @samp{\\})."
msgstr ""

#. type: item
#: display.texi.orig:6180
#, no-wrap
msgid "3"
msgstr ""

#. type: table
#: display.texi.orig:6182
msgid "The glyph for indicating a control character (the default is @samp{^})."
msgstr ""

#. type: item
#: display.texi.orig:6183
#, no-wrap
msgid "4"
msgstr ""

#. type: table
#: display.texi.orig:6186
msgid "A vector of glyphs for indicating the presence of invisible lines (the default is @samp{...}).  @xref{Selective Display}."
msgstr ""

#. type: item
#: display.texi.orig:6187
#, no-wrap
msgid "5"
msgstr ""

#. type: table
#: display.texi.orig:6192
msgid "The glyph used to draw the border between side-by-side windows (the default is @samp{|}).  @xref{Splitting Windows}.  This takes effect only when there are no scroll bars; if scroll bars are supported and in use, a scroll bar separates the two windows."
msgstr ""

#. type: Plain text
#: display.texi.orig:6197
msgid "For example, here is how to construct a display table that mimics the effect of setting @code{ctl-arrow} to a non-@code{nil} value (@pxref{Glyphs}, for the function @code{make-glyph-code}):"
msgstr ""

#. type: example
#: display.texi.orig:6209
#, no-wrap
msgid ""
"(setq disptab (make-display-table))\n"
"(dotimes (i 32)\n"
"  (or (= i ?\\t)\n"
"      (= i ?\\n)\n"
"      (aset disptab i\n"
"            (vector (make-glyph-code ?^ 'escape-glyph)\n"
"                    (make-glyph-code (+ i 64) 'escape-glyph)))))\n"
"(aset disptab 127\n"
"      (vector (make-glyph-code ?^ 'escape-glyph)\n"
"              (make-glyph-code ?? 'escape-glyph)))))\n"
msgstr ""

#. type: defun
#: display.texi.orig:6211
#, no-wrap
msgid "display-table-slot display-table slot"
msgstr ""

#. type: defun
#: display.texi.orig:6217
msgid "This function returns the value of the extra slot @var{slot} of @var{display-table}.  The argument @var{slot} may be a number from 0 to 5 inclusive, or a slot name (symbol).  Valid symbols are @code{truncation}, @code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and @code{vertical-border}."
msgstr ""

#. type: defun
#: display.texi.orig:6219
#, no-wrap
msgid "set-display-table-slot display-table slot value"
msgstr ""

#. type: defun
#: display.texi.orig:6225
msgid "This function stores @var{value} in the extra slot @var{slot} of @var{display-table}.  The argument @var{slot} may be a number from 0 to 5 inclusive, or a slot name (symbol).  Valid symbols are @code{truncation}, @code{wrap}, @code{escape}, @code{control}, @code{selective-display}, and @code{vertical-border}."
msgstr ""

#. type: defun
#: display.texi.orig:6227
#, no-wrap
msgid "describe-display-table display-table"
msgstr ""

#. type: defun
#: display.texi.orig:6230
msgid "This function displays a description of the display table @var{display-table} in a help buffer."
msgstr ""

#. type: deffn
#: display.texi.orig:6232
#, no-wrap
msgid "Command describe-current-display-table"
msgstr ""

#. type: deffn
#: display.texi.orig:6235
msgid "This command displays a description of the current display table in a help buffer."
msgstr ""

#. type: cindex
#: display.texi.orig:6239
#, no-wrap
msgid "active display table"
msgstr ""

#. type: Plain text
#: display.texi.orig:6246
msgid "Each window can specify a display table, and so can each buffer.  The window's display table, if there is one, takes precedence over the buffer's display table.  If neither exists, Emacs tries to use the standard display table; if that is @code{nil}, Emacs uses the usual character display conventions (@pxref{Usual Display})."
msgstr ""

#. type: Plain text
#: display.texi.orig:6250
msgid "Note that display tables affect how the mode line is displayed, so if you want to force redisplay of the mode line using a new display table, call @code{force-mode-line-update} (@pxref{Mode Line Format})."
msgstr ""

#. type: defun
#: display.texi.orig:6251
#, no-wrap
msgid "window-display-table &optional window"
msgstr ""

#. type: defun
#: display.texi.orig:6254
msgid "This function returns @var{window}'s display table, or @code{nil} if there is none.  The default for @var{window} is the selected window."
msgstr ""

#. type: defun
#: display.texi.orig:6256
#, no-wrap
msgid "set-window-display-table window table"
msgstr ""

#. type: defun
#: display.texi.orig:6260
msgid "This function sets the display table of @var{window} to @var{table}.  The argument @var{table} should be either a display table or @code{nil}."
msgstr ""

#. type: defvar
#: display.texi.orig:6262
#, no-wrap
msgid "buffer-display-table"
msgstr ""

#. type: defvar
#: display.texi.orig:6266
msgid "This variable is automatically buffer-local in all buffers; its value specifies the buffer's display table.  If it is @code{nil}, there is no buffer display table."
msgstr ""

#. type: defvar
#: display.texi.orig:6268
#, no-wrap
msgid "standard-display-table"
msgstr ""

#. type: defvar
#: display.texi.orig:6273
msgid "The value of this variable is the standard display table, which is used when Emacs is displaying a buffer in a window with neither a window display table nor a buffer display table defined.  Its default is @code{nil}."
msgstr ""

#. type: Plain text
#: display.texi.orig:6277
msgid "The @file{disp-table} library defines several functions for changing the standard display table."
msgstr ""

#. type: cindex
#: display.texi.orig:6280
#, no-wrap
msgid "glyph"
msgstr ""

#. type: cindex
#: display.texi.orig:6282
#, no-wrap
msgid "glyph code"
msgstr ""

#. type: Plain text
#: display.texi.orig:6289
msgid "A @dfn{glyph} is a graphical symbol which occupies a single character position on the screen.  Each glyph is represented in Lisp as a @dfn{glyph code}, which specifies a character and optionally a face to display it in (@pxref{Faces}).  The main use of glyph codes is as the entries of display tables (@pxref{Display Tables}).  The following functions are used to manipulate glyph codes:"
msgstr ""

#. type: defun
#: display.texi.orig:6290
#, no-wrap
msgid "make-glyph-code char &optional face"
msgstr ""

#. type: defun
#: display.texi.orig:6296
msgid "This function returns a glyph code representing char @var{char} with face @var{face}.  If @var{face} is omitted or @code{nil}, the glyph uses the default face; in that case, the glyph code is an integer.  If @var{face} is non-@code{nil}, the glyph code is not necessarily an integer object."
msgstr ""

#. type: defun
#: display.texi.orig:6298
#, no-wrap
msgid "glyph-char glyph"
msgstr ""

#. type: defun
#: display.texi.orig:6300
msgid "This function returns the character of glyph code @var{glyph}."
msgstr ""

#. type: defun
#: display.texi.orig:6302
#, no-wrap
msgid "glyph-face glyph"
msgstr ""

#. type: defun
#: display.texi.orig:6305
msgid "This function returns face of glyph code @var{glyph}, or @code{nil} if @var{glyph} uses the default face."
msgstr ""

#. type: ifnottex
#: display.texi.orig:6311
msgid "You can set up a @dfn{glyph table} to change how glyph codes are actually displayed on text terminals.  This feature is semi-obsolete; use @code{glyphless-char-display} instead (@pxref{Glyphless Chars})."
msgstr ""

#. type: defvar
#: display.texi.orig:6312
#, no-wrap
msgid "glyph-table"
msgstr ""

#. type: defvar
#: display.texi.orig:6319
msgid "The value of this variable, if non-@code{nil}, is the current glyph table.  It takes effect only on character terminals; on graphical displays, all glyphs are displayed literally.  The glyph table should be a vector whose @var{g}th element specifies how to display glyph code @var{g}, where @var{g} is the glyph code for a glyph whose face is unspecified.  Each element should be one of the following:"
msgstr ""

#. type: table
#: display.texi.orig:6323
msgid "Display this glyph literally."
msgstr ""

#. type: item
#: display.texi.orig:6324
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: display.texi.orig:6326
msgid "Display this glyph by sending the specified string to the terminal."
msgstr ""

#. type: item
#: display.texi.orig:6327
#, no-wrap
msgid "a glyph code"
msgstr ""

#. type: table
#: display.texi.orig:6329
msgid "Display the specified glyph code instead."
msgstr ""

#. type: defvar
#: display.texi.orig:6333
msgid "Any integer glyph code greater than or equal to the length of the glyph table is displayed literally."
msgstr ""

#. type: subsection
#: display.texi.orig:6337
#, no-wrap
msgid "Glyphless Character Display"
msgstr ""

#. type: cindex
#: display.texi.orig:6338
#, no-wrap
msgid "glyphless characters"
msgstr ""

#. type: Plain text
#: display.texi.orig:6347
msgid "@dfn{Glyphless characters} are characters which are displayed in a special way, e.g., as a box containing a hexadecimal code, instead of being displayed literally.  These include characters which are explicitly defined to be glyphless, as well as characters for which there is no available font (on a graphical display), and characters which cannot be encoded by the terminal's coding system (on a text terminal)."
msgstr ""

#. type: defvar
#: display.texi.orig:6348
#, no-wrap
msgid "glyphless-char-display"
msgstr ""

#. type: defvar
#: display.texi.orig:6352
msgid "The value of this variable is a char-table which defines glyphless characters and how they are displayed.  Each entry must be one of the following display methods:"
msgstr ""

#. type: table
#: display.texi.orig:6356
msgid "Display the character in the usual way."
msgstr ""

#. type: code{#1}
#: display.texi.orig:6357
#, no-wrap
msgid "zero-width"
msgstr ""

#. type: table
#: display.texi.orig:6359
msgid "Don't display the character."
msgstr ""

#. type: code{#1}
#: display.texi.orig:6360
#, no-wrap
msgid "thin-space"
msgstr ""

#. type: table
#: display.texi.orig:6363
msgid "Display a thin space, 1-pixel wide on graphical displays, or 1-character wide on text terminals."
msgstr ""

#. type: code{#1}
#: display.texi.orig:6364
#, no-wrap
msgid "empty-box"
msgstr ""

#. type: table
#: display.texi.orig:6366
msgid "Display an empty box."
msgstr ""

#. type: code{#1}
#: display.texi.orig:6367
#, no-wrap
msgid "hex-code"
msgstr ""

#. type: table
#: display.texi.orig:6370
msgid "Display a box containing the Unicode codepoint of the character, in hexadecimal notation."
msgstr ""

#. type: item
#: display.texi.orig:6371
#, no-wrap
msgid "an @acronym{ASCII} string"
msgstr ""

#. type: table
#: display.texi.orig:6373
msgid "Display a box containing that string."
msgstr ""

#. type: item
#: display.texi.orig:6374
#, no-wrap
msgid "a cons cell @code{(@var{graphical} . @var{text})}"
msgstr ""

#. type: table
#: display.texi.orig:6378
msgid "Display with @var{graphical} on graphical displays, and with @var{text} on text terminals.  Both @var{graphical} and @var{text} must be one of the display methods described above."
msgstr ""

#. type: defvar
#: display.texi.orig:6384
msgid "The @code{thin-space}, @code{empty-box}, @code{hex-code}, and @acronym{ASCII} string display methods are drawn with the @code{glyphless-char} face."
msgstr ""

#. type: defvar
#: display.texi.orig:6389
msgid "The char-table has one extra slot, which determines how to display any character that cannot be displayed with any available font, or cannot be encoded by the terminal's coding system.  Its value should be one of the above display methods, except @code{zero-width} or a cons cell."
msgstr ""

#. type: defvar
#: display.texi.orig:6393
msgid "If a character has a non-@code{nil} entry in an active display table, the display table takes effect; in this case, Emacs does not consult @code{glyphless-char-display} at all."
msgstr ""

#. type: defopt
#: display.texi.orig:6395
#, no-wrap
msgid "glyphless-char-display-control"
msgstr ""

#. type: defopt
#: display.texi.orig:6401
msgid "This user option provides a convenient way to set @code{glyphless-char-display} for groups of similar characters.  Do not set its value directly from Lisp code; the value takes effect only via a custom @code{:set} function (@pxref{Variable Definitions}), which updates @code{glyphless-char-display}."
msgstr ""

#. type: defopt
#: display.texi.orig:6406
msgid "Its value should be an alist of elements @code{(@var{group} . @var{method})}, where @var{group} is a symbol specifying a group of characters, and @var{method} is a symbol specifying how to display them."
msgstr ""

#. type: defopt
#: display.texi.orig:6408
msgid "@var{group} should be one of the following:"
msgstr ""

#. type: item
#: display.texi.orig:6410
#, no-wrap
msgid "c0-control"
msgstr ""

#. type: table
#: display.texi.orig:6415
msgid "@acronym{ASCII} control characters @code{U+0000} to @code{U+001F}, excluding the newline and tab characters (normally displayed as escape sequences like @samp{^A}; @pxref{Text Display,, How Text Is Displayed, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: item
#: display.texi.orig:6416
#, no-wrap
msgid "c1-control"
msgstr ""

#. type: table
#: display.texi.orig:6420
msgid "Non-@acronym{ASCII}, non-printing characters @code{U+0080} to @code{U+009F} (normally displayed as octal escape sequences like @samp{\\230})."
msgstr ""

#. type: item
#: display.texi.orig:6421
#, no-wrap
msgid "format-control"
msgstr ""

#. type: table
#: display.texi.orig:6425
msgid "Characters of Unicode General Category `Cf', such as @samp{U+200E} (Left-to-Right Mark), but excluding characters that have graphic images, such as @samp{U+00AD} (Soft Hyphen)."
msgstr ""

#. type: item
#: display.texi.orig:6426
#, no-wrap
msgid "no-font"
msgstr ""

#. type: table
#: display.texi.orig:6429
msgid "Characters for there is no suitable font, or which cannot be encoded by the terminal's coding system."
msgstr ""

#. type: defopt
#: display.texi.orig:6437
msgid "The @var{method} symbol should be one of @code{zero-width}, @code{thin-space}, @code{empty-box}, or @code{hex-code}.  These have the same meanings as in @code{glyphless-char-display}, above."
msgstr ""

#. type: cindex
#: display.texi.orig:6441
#, no-wrap
msgid "bell"
msgstr ""

#. type: Plain text
#: display.texi.orig:6448
msgid "This section describes how to make Emacs ring the bell (or blink the screen) to attract the user's attention.  Be conservative about how often you do this; frequent bells can become irritating.  Also be careful not to use just beeping when signaling an error is more appropriate (@pxref{Errors})."
msgstr ""

#. type: defun
#: display.texi.orig:6449
#, no-wrap
msgid "ding &optional do-not-terminate"
msgstr ""

#. type: cindex
#: display.texi.orig:6450
#, no-wrap
msgid "keyboard macro termination"
msgstr ""

#. type: defun
#: display.texi.orig:6454
msgid "This function beeps, or flashes the screen (see @code{visible-bell} below).  It also terminates any keyboard macro currently executing unless @var{do-not-terminate} is non-@code{nil}."
msgstr ""

#. type: defun
#: display.texi.orig:6456
#, no-wrap
msgid "beep &optional do-not-terminate"
msgstr ""

#. type: defun
#: display.texi.orig:6458
msgid "This is a synonym for @code{ding}."
msgstr ""

#. type: defopt
#: display.texi.orig:6460
#, no-wrap
msgid "visible-bell"
msgstr ""

#. type: defopt
#: display.texi.orig:6466
msgid "This variable determines whether Emacs should flash the screen to represent a bell.  Non-@code{nil} means yes, @code{nil} means no.  This is effective on graphical displays, and on text terminals provided the terminal's Termcap entry defines the visible bell capability (@samp{vb})."
msgstr ""

#. type: defvar
#: display.texi.orig:6468
#, no-wrap
msgid "ring-bell-function"
msgstr ""

#. type: defvar
#: display.texi.orig:6473
msgid "If this is non-@code{nil}, it specifies how Emacs should ``ring the bell''.  Its value should be a function of no arguments.  If this is non-@code{nil}, it takes precedence over the @code{visible-bell} variable."
msgstr ""

#. type: Plain text
#: display.texi.orig:6482
msgid "Emacs works with several window systems, most notably the X Window System.  Both Emacs and X use the term ``window'', but use it differently.  An Emacs frame is a single window as far as X is concerned; the individual Emacs windows are not known to X at all."
msgstr ""

#. type: defvar
#: display.texi.orig:6483
#, no-wrap
msgid "window-system"
msgstr ""

#. type: defvar
#: display.texi.orig:6486
msgid "This terminal-local variable tells Lisp programs what window system Emacs is using for displaying the frame.  The possible values are"
msgstr ""

#. type: item
#: display.texi.orig:6488
#, no-wrap
msgid "x"
msgstr ""

#. type: cindex
#: display.texi.orig:6489
#, no-wrap
msgid "X Window System"
msgstr ""

#. type: table
#: display.texi.orig:6491
msgid "Emacs is displaying the frame using X."
msgstr ""

#. type: item
#: display.texi.orig:6491
#, no-wrap
msgid "w32"
msgstr ""

#. type: table
#: display.texi.orig:6493
msgid "Emacs is displaying the frame using native MS-Windows GUI."
msgstr ""

#. type: item
#: display.texi.orig:6493
#, no-wrap
msgid "ns"
msgstr ""

#. type: table
#: display.texi.orig:6496
msgid "Emacs is displaying the frame using the Nextstep interface (used on GNUstep and Mac OS X)."
msgstr ""

#. type: item
#: display.texi.orig:6496
#, no-wrap
msgid "pc"
msgstr ""

#. type: table
#: display.texi.orig:6498
msgid "Emacs is displaying the frame using MS-DOS direct screen writes."
msgstr ""

#. type: table
#: display.texi.orig:6500
msgid "Emacs is displaying the frame on a character-based terminal."
msgstr ""

#. type: defvar
#: display.texi.orig:6503
#, no-wrap
msgid "initial-window-system"
msgstr ""

#. type: defvar
#: display.texi.orig:6509
msgid "This variable holds the value of @code{window-system} used for the first frame created by Emacs during startup.  (When Emacs is invoked with the @option{--daemon} option, it does not create any initial frames, so @code{initial-window-system} is @code{nil}.  @xref{Initial Options, daemon,, emacs, The GNU Emacs Manual}.)"
msgstr ""

#. type: defun
#: display.texi.orig:6511
#, no-wrap
msgid "window-system &optional frame"
msgstr ""

#. type: defun
#: display.texi.orig:6516
msgid "This function returns a symbol whose name tells what window system is used for displaying @var{frame} (which defaults to the currently selected frame).  The list of possible symbols it returns is the same one documented for the variable @code{window-system} above."
msgstr ""

#. type: Plain text
#: display.texi.orig:6525
msgid "Do @emph{not} use @code{window-system} and @code{initial-window-system} as predicates or boolean flag variables, if you want to write code that works differently on text terminals and graphic displays.  That is because @code{window-system} is not a good indicator of Emacs capabilities on a given display type.  Instead, use @code{display-graphic-p} or any of the other @code{display-*-p} predicates described in @ref{Display Feature Testing}."
msgstr ""

#. type: cindex
#: display.texi.orig:6528
#, no-wrap
msgid "bidirectional display"
msgstr ""

#. type: cindex
#: display.texi.orig:6529
#, no-wrap
msgid "right-to-left text"
msgstr ""

#. type: Plain text
#: display.texi.orig:6541
msgid "Emacs can display text written in scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering for horizontal text display runs from right to left.  Furthermore, segments of Latin script and digits embedded in right-to-left text are displayed left-to-right, while segments of right-to-left script embedded in left-to-right text (e.g., Arabic or Hebrew text in comments or strings in a program source file) are appropriately displayed right-to-left.  We call such mixtures of left-to-right and right-to-left text @dfn{bidirectional text}.  This section describes the facilities and options for editing and displaying bidirectional text."
msgstr ""

#. type: cindex
#: display.texi.orig:6542
#, no-wrap
msgid "logical order"
msgstr ""

#. type: cindex
#: display.texi.orig:6543
#, no-wrap
msgid "reading order"
msgstr ""

#. type: cindex
#: display.texi.orig:6544
#, no-wrap
msgid "visual order"
msgstr ""

#. type: cindex
#: display.texi.orig:6545
#, no-wrap
msgid "unicode bidirectional algorithm"
msgstr ""

#. type: cindex
#: display.texi.orig:6546
#, no-wrap
msgid "UBA"
msgstr ""

#. type: cindex
#: display.texi.orig:6547
#, no-wrap
msgid "bidirectional reordering"
msgstr ""

#. type: cindex
#: display.texi.orig:6548
#, no-wrap
msgid "reordering, of bidirectional text"
msgstr ""

#. type: Plain text
#: display.texi.orig:6562
msgid "Text is stored in Emacs buffers and strings in @dfn{logical} (or @dfn{reading}) order, i.e., the order in which a human would read each character.  In right-to-left and bidirectional text, the order in which characters are displayed on the screen (called @dfn{visual order}) is not the same as logical order; the characters' screen positions do not increase monotonically with string or buffer position.  In performing this @dfn{bidirectional reordering}, Emacs follows the Unicode Bidirectional Algorithm (a.k.a.@: @acronym{UBA}), which is described in Annex #9 of the Unicode standard (@url{http://www.unicode.org/reports/tr9/}).  Emacs currently provides a ``Non-isolate Bidirectionality'' class implementation of the @acronym{UBA}: it does not yet support the isolate directional formatting characters introduced with Unicode Standard v6.3.0."
msgstr ""

#. type: defvar
#: display.texi.orig:6563
#, no-wrap
msgid "bidi-display-reordering"
msgstr ""

#. type: defvar
#: display.texi.orig:6571
msgid "If the value of this buffer-local variable is non-@code{nil} (the default), Emacs performs bidirectional reordering for display.  The reordering affects buffer text, as well as display strings and overlay strings from text and overlay properties in the buffer (@pxref{Overlay Properties}, and @pxref{Display Property}).  If the value is @code{nil}, Emacs does not perform bidirectional reordering in the buffer."
msgstr ""

#. type: defvar
#: display.texi.orig:6576
msgid "The default value of @code{bidi-display-reordering} controls the reordering of strings which are not directly supplied by a buffer, including the text displayed in mode lines (@pxref{Mode Line Format})  and header lines (@pxref{Header Lines})."
msgstr ""

#. type: cindex
#: display.texi.orig:6578
#, no-wrap
msgid "unibyte buffers, and bidi reordering"
msgstr ""

#. type: Plain text
#: display.texi.orig:6586
msgid "Emacs never reorders the text of a unibyte buffer, even if @code{bidi-display-reordering} is non-@code{nil} in the buffer.  This is because unibyte buffers contain raw bytes, not characters, and thus lack the directionality properties required for reordering.  Therefore, to test whether text in a buffer will be reordered for display, it is not enough to test the value of @code{bidi-display-reordering} alone.  The correct test is this:"
msgstr ""

#. type: example
#: display.texi.orig:6592
#, no-wrap
msgid ""
" (if (and enable-multibyte-characters\n"
"          bidi-display-reordering)\n"
"     ;; Buffer is being reordered for display\n"
"   )\n"
msgstr ""

#. type: Plain text
#: display.texi.orig:6599
msgid "However, unibyte display and overlay strings @emph{are} reordered if their parent buffer is reordered.  This is because plain-@sc{ascii} strings are stored by Emacs as unibyte strings.  If a unibyte display or overlay string includes non-@sc{ascii} characters, these characters are assumed to have left-to-right direction."
msgstr ""

#. type: cindex
#: display.texi.orig:6600
#, no-wrap
msgid "display properties, and bidi reordering of text"
msgstr ""

#. type: Plain text
#: display.texi.orig:6614
msgid "Text covered by @code{display} text properties, by overlays with @code{display} properties whose value is a string, and by any other properties that replace buffer text, is treated as a single unit when it is reordered for display.  That is, the entire chunk of text covered by these properties is reordered together.  Moreover, the bidirectional properties of the characters in such a chunk of text are ignored, and Emacs reorders them as if they were replaced with a single character @code{U+FFFC}, known as the @dfn{Object Replacement Character}.  This means that placing a display property over a portion of text may change the way that the surrounding text is reordered for display.  To prevent this unexpected effect, always place such properties on text whose directionality is identical with text that surrounds it."
msgstr ""

#. type: cindex
#: display.texi.orig:6615
#, no-wrap
msgid "base direction of a paragraph"
msgstr ""

#. type: Plain text
#: display.texi.orig:6622
msgid "Each paragraph of bidirectional text has a @dfn{base direction}, either right-to-left or left-to-right.  Left-to-right paragraphs are displayed beginning at the left margin of the window, and are truncated or continued when the text reaches the right margin.  Right-to-left paragraphs are displayed beginning at the right margin, and are continued or truncated at the left margin."
msgstr ""

#. type: Plain text
#: display.texi.orig:6632
msgid "By default, Emacs determines the base direction of each paragraph by looking at the text at its beginning.  The precise method of determining the base direction is specified by the @acronym{UBA}; in a nutshell, the first character in a paragraph that has an explicit directionality determines the base direction of the paragraph.  However, sometimes a buffer may need to force a certain base direction for its paragraphs.  For example, buffers containing program source code should force all paragraphs to be displayed left-to-right.  You can use following variable to do this:"
msgstr ""

#. type: defvar
#: display.texi.orig:6633
#, no-wrap
msgid "bidi-paragraph-direction"
msgstr ""

#. type: defvar
#: display.texi.orig:6639
msgid "If the value of this buffer-local variable is the symbol @code{right-to-left} or @code{left-to-right}, all paragraphs in the buffer are assumed to have that specified direction.  Any other value is equivalent to @code{nil} (the default), which means to determine the base direction of each paragraph from its contents."
msgstr ""

#. type: cindex
#: display.texi.orig:6640
#, no-wrap
msgid "@code{prog-mode}, and @code{bidi-paragraph-direction}"
msgstr ""

#. type: defvar
#: display.texi.orig:6644
msgid "Modes for program source code should set this to @code{left-to-right}.  Prog mode does this by default, so modes derived from Prog mode do not need to set this explicitly (@pxref{Basic Major Modes})."
msgstr ""

#. type: defun
#: display.texi.orig:6646
#, no-wrap
msgid "current-bidi-paragraph-direction &optional buffer"
msgstr ""

#. type: defun
#: display.texi.orig:6657
msgid "This function returns the paragraph direction at point in the named @var{buffer}.  The returned value is a symbol, either @code{left-to-right} or @code{right-to-left}.  If @var{buffer} is omitted or @code{nil}, it defaults to the current buffer.  If the buffer-local value of the variable @code{bidi-paragraph-direction} is non-@code{nil}, the returned value will be identical to that value; otherwise, the returned value reflects the paragraph direction determined dynamically by Emacs.  For buffers whose value of @code{bidi-display-reordering} is @code{nil} as well as unibyte buffers, this function always returns @code{left-to-right}."
msgstr ""

#. type: cindex
#: display.texi.orig:6659
#, no-wrap
msgid "visual-order cursor motion"
msgstr ""

#. type: Plain text
#: display.texi.orig:6663
msgid "Sometimes there's a need to move point in strict visual order, either to the left or to the right of its current screen position.  Emacs provides a primitive to do that."
msgstr ""

#. type: defun
#: display.texi.orig:6664
#, no-wrap
msgid "move-point-visually direction"
msgstr ""

#. type: defun
#: display.texi.orig:6675
msgid "This function moves point of the currently selected window to the buffer position that appears immediately to the right or to the left of point on the screen.  If @var{direction} is positive, point will move one screen position to the right, otherwise it will move one screen position to the left.  Note that, depending on the surrounding bidirectional context, this could potentially move point many buffer positions away.  If invoked at the end of a screen line, the function moves point to the rightmost or leftmost screen position of the next or previous screen line, as appropriate for the value of @var{direction}."
msgstr ""

#. type: defun
#: display.texi.orig:6677
msgid "The function returns the new buffer position as its value."
msgstr ""

#. type: cindex
#: display.texi.orig:6679
#, no-wrap
msgid "layout on display, and bidirectional text"
msgstr ""

#. type: cindex
#: display.texi.orig:6680
#, no-wrap
msgid "jumbled display of bidirectional text"
msgstr ""

#. type: cindex
#: display.texi.orig:6681
#, no-wrap
msgid "concatenating bidirectional strings"
msgstr ""

#. type: Plain text
#: display.texi.orig:6694
msgid "Bidirectional reordering can have surprising and unpleasant effects when two strings with bidirectional content are juxtaposed in a buffer, or otherwise programmatically concatenated into a string of text.  A typical problematic case is when a buffer consists of sequences of text ``fields'' separated by whitespace or punctuation characters, like Buffer Menu mode or Rmail Summary Mode.  Because the punctuation characters used as separators have @dfn{weak directionality}, they take on the directionality of surrounding text.  As result, a numeric field that follows a field with bidirectional content can be displayed @emph{to the left} of the preceding field, messing up the expected layout.  There are several ways to avoid this problem:"
msgstr ""

#. type: itemize
#: display.texi.orig:6704
msgid "Append the special character @code{U+200E}, LEFT-TO-RIGHT MARK, or @acronym{LRM}, to the end of each field that may have bidirectional content, or prepend it to the beginning of the following field.  The function @code{bidi-string-mark-left-to-right}, described below, comes in handy for this purpose.  (In a right-to-left paragraph, use @code{U+200F}, RIGHT-TO-LEFT MARK, or @acronym{RLM}, instead.)  This is one of the solutions recommended by the UBA."
msgstr ""

#. type: itemize
#: display.texi.orig:6709
msgid "Include the tab character in the field separator.  The tab character plays the role of @dfn{segment separator} in bidirectional reordering, causing the text on either side to be reordered separately."
msgstr ""

#. type: cindex
#: display.texi.orig:6710
#, no-wrap
msgid "@code{space} display spec, and bidirectional text"
msgstr ""

#. type: itemize
#: display.texi.orig:6716
msgid "Separate fields with a @code{display} property or overlay with a property value of the form @code{(space . PROPS)} (@pxref{Specified Space}).  Emacs treats this display specification as a @dfn{paragraph separator}, and reorders the text on either side separately."
msgstr ""

#. type: defun
#: display.texi.orig:6718
#, no-wrap
msgid "bidi-string-mark-left-to-right string"
msgstr ""

#. type: defun
#: display.texi.orig:6731
msgid "This function returns its argument @var{string}, possibly modified, such that the result can be safely concatenated with another string, or juxtaposed with another string in a buffer, without disrupting the relative layout of this string and the next one on display.  If the string returned by this function is displayed as part of a left-to-right paragraph, it will always appear on display to the left of the text that follows it.  The function works by examining the characters of its argument, and if any of those characters could cause reordering on display, the function appends the @acronym{LRM} character to the string.  The appended @acronym{LRM} character is made invisible by giving it an @code{invisible} text property of @code{t} (@pxref{Invisible Text})."
msgstr ""

#. type: Plain text
#: display.texi.orig:6741
msgid "The reordering algorithm uses the bidirectional properties of the characters stored as their @code{bidi-class} property (@pxref{Character Properties}).  Lisp programs can change these properties by calling the @code{put-char-code-property} function.  However, doing this requires a thorough understanding of the @acronym{UBA}, and is therefore not recommended.  Any changes to the bidirectional properties of a character have global effect: they affect all Emacs frames and windows."
msgstr ""

#. type: Plain text
#: display.texi.orig:6745
msgid "Similarly, the @code{mirroring} property is used to display the appropriate mirrored character in the reordered text.  Lisp programs can affect the mirrored display by changing this property.  Again, any such changes affect all of Emacs display."
msgstr ""
