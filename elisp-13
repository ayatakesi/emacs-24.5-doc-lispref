This is elisp, produced by makeinfo version 6.6 from elisp.texi.

This is the ‘GNU Emacs Lisp Reference Manual’ corresponding to Emacs
version 24.5.

   Copyright © 1990–1996, 1998–2015 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with the Invariant Sections being “GNU General Public
     License,” with the Front-Cover Texts being “A GNU Manual,” and with
     the Back-Cover Texts as in (a) below.  A copy of the license is
     included in the section entitled “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom.”
INFO-DIR-SECTION Emacs lisp
START-INFO-DIR-ENTRY
* Elisp: (elisp).               The Emacs Lisp Reference Manual.
END-INFO-DIR-ENTRY


File: elisp,  Node: Glyphs,  Next: Glyphless Chars,  Prev: Active Display Table,  Up: Character Display

37.21.4 Glyphs
--------------

“グリフ(glyph)”とは、スクリーン上で1文字を占めるグラフィカルなシンボルで
す。各グリフはLisp内で“グリフコード(glyph code)”として表現されます。これ
は文字と、オプションで表示するフェイスを指定します(*note Faces::を参照
)。ディスプレイテーブル内のエントリーとしての使用が、グリフコードの主な
用途です(*note Display Tables::を参照)。以下の関数は、グリフコードを操作
するために使用されます:

 -- Function: make-glyph-code char &optional face
     この関数は、文字CHARを表すグリフを、フェイスFACEでリターンする。
     FACEが省略または‘nil’ならグリフはデフォルトフェイスを使用し、その場
     合にはグリフコードは整数である。FACEが非‘nil’なら、グリフコードが整
     数オブジェクトである必要はない。

 -- Function: glyph-char glyph
     この関数は、グリフコードGLYPHの文字をリターンする。

 -- Function: glyph-face glyph
     この関数は、グリフコードGLYPHのフェイス、またはGLYPHがデフォルトフ
     ェイスを使用する場合は‘nil’をリターンする。

   テキスト端末上で実際にどのようにグリフコードを表示するかを変更するた
めに、“glyph table”をセットアップできる。この機能は半ば時代遅れであり、
かわりに‘glyphless-char-display’を使用すること(*note Glyphless Chars::を
参照)。

 -- Variable: glyph-table
     この変数の値が非‘nil’なら、それはカレントグリフテーブルである。これ
     は文字端末上でのみ効果があり、グラフィカルディスプレイ上ではすべて
     のグリフはそのままliteralに表示される。グリフテーブルは、G番目の要
     素がグリフコードGの表示方法を指定するようなベクターであること。ここ
     でGはフェイス未指定なグリフにたいするグリフコードである。要素はそれ
     ぞれ、以下のいずれかであること:

     ‘nil’
          そのグリフをそのままliteralに表示する。

     文字列
          指定された文字列を端末に送信することにより、そのグリフを表示す
          る。

     グリフコード
          指定されたグリフコードをかわりに表示する。

     グリフテーブルのテーブル長以上の整数グリフコードは、そのまま
     literalに表示される。


File: elisp,  Node: Glyphless Chars,  Prev: Glyphs,  Up: Character Display

37.21.5 Glyphless Character Display
-----------------------------------

“グリフ無し文字(glyphless characters)”とは、literalに表示されるのではな
く特別な方法、すなわち16進コードを中に含むボックスとして表示される文字で
す。これらの文字には、グリフが無いと明示的に定義された文字や、利用可能な
フォントがない文字(グラフィカルなディスプレイ)、その端末のコーディングシ
ステムではエンコードできない文字(テキスト端末)が同様に含まれます。

 -- Variable: glyphless-char-display
     この変数の値はグリフ無し文字と、それらの表示方法を定義する文字テー
     ブルである。エントリーはそれぞれ、以下の表示メソッドのいずれかでな
     ければならない:

     ‘nil’
          通常の方法でその文字を表示する。

     ‘zero-width’
          その文字を表示しない。

     ‘thin-space’
          グラフィカルな端末では幅が1ピクセル、テキスト端末では幅が1文字
          の狭いスペース。

     ‘empty-box’
          空のボックスを表示する。

     ‘hex-code’
          その文字のUnicodeコードポイントの16進表記を含むボックスを表示
          する。

     ASCII文字列
          その文字列を含むボックスを表示する。

     コンスセル ‘(GRAPHICAL . TEXT)’
          グラフィカルな端末ではGRAPHICAL、テキスト端末ではTEXTで表示す
          る。GRAPHICALとTEXTはいずれも、上述した表示メソッドのいずれか
          でなければならない。

     ‘thin-space’、‘empty-box’、‘hex-code’、およびASCII文字列は
     ‘glyphless-char’フェイスで描画される。

     文字テーブルには、利用可能なすべてのフォントでも表示できない、また
     はその端末のコーディングシステムでエンコードできないすべての文字の
     表示方法を定義する、余分なスロットが1つある。その値は、上述した表示
     メソッドのうち‘zero-width’とコンスセル以外のいずれかでなければなら
     ない。

     アクティブなディスプレイテーブル内に非‘nil’なエントリーをもつ文字で
     は、そのディスプレイテーブルが効果をもつ。この場合、Emacsは
     ‘glyphless-char-display’をまったく参照しない。

 -- User Option: glyphless-char-display-control
     このユーザーオプションは、似かよった文字のグループにたいして
     ‘glyphless-char-display’をセットする便利な手段を提供する。Lispコー
     ドから、この値を直接セットしてはならない。
     ‘glyphless-char-display’更新する、カスタム関数‘:set’を通じた場合の
     み、その値は効果をもつ。

     この値は、要素が‘(GROUP . METHOD)’であるようなalistであること。ここ
     でGROUPは文字びグループを指定するシンボル、METHODはそれらを表示する
     方法を指定するシンボルである。

     GROUPは以下のいずれかであること:

     ‘c0-control’
          改行文字とタブ文字を除く‘U+0000’から‘U+001F’までのASCIIコント
          ロール文字(通常は‘^A’のようなエスケープシーケンスとして表示さ
          れる。*note How Text Is Displayed: (emacs)Text Display.を参照
          されたい)。

     ‘c1-control’
          ‘U+0080’から‘U+009F’までの非ASCII、非プリント文字(通常は
          ‘\230’のような8進エスケープシーケンスとして表示される)。

     ‘format-control’
          ‘U+200E’のようなUnicode General Category ‘Cf’の文字だが、
          ‘U+00AD’(Soft Hyphen)のようにグラフィックイメージをもつ文字を
          除く。

     ‘no-font’
          適切なフォントが存在しないか、その端末のコーディングシステムで
          はエンコードできない文字。

     METHODシンボルは‘zero-width’、‘thin-space’、‘empty-box’、
     ‘hex-code’のいずれかであること。これらは上述の
     ‘glyphless-char-display’での場合と同様の意味をもつ。


File: elisp,  Node: Beeping,  Next: Window Systems,  Prev: Character Display,  Up: Display

37.22 Beeping
=============

このセクションでは、ユーザーの注意を喚起するために、Emacsでベルを鳴らす
方法を説明します。これを行う頻度は控え目にしてください。頻繁なベルは刺激
過剰になる恐れがあります。。同様に、エラーのシグナル時に過度にビープ音を
使用しないよう注意してください。

 -- Function: ding &optional do-not-terminate
     この関数はビープ音を鳴らす、またはスクリーンをフラッシュする(後述の
     ‘visible-bell’を参照)。DO-NOT-TERMINATEが‘nil’なら、この関数はカレ
     ントで実行中のキーボードマクロも終了する。

 -- Function: beep &optional do-not-terminate
     これは‘ding’のシノニムである。

 -- User Option: visible-bell
     この変数は、ベルを表すためにスクリーンをフラッシュすべきかどうかを
     決定する。非‘nil’ならフラッシュし、‘nil’ならフラッシュしない。これ
     はグラフィカルなディスプレイで効果的であり、テキスト端末ではその端
     末のTermcapエントリーが可視ベル(visible bell) ‘vb’の能力を定義する
     。

 -- Variable: ring-bell-function
     これが非‘nil’なら、それはEmacsがどのように“ベルを鳴らす”かを定義す
     るべきである。値は引数なしの関数であること。これが非‘nil’の場合、
     ‘visible-bell’より優先される。


File: elisp,  Node: Window Systems,  Next: Bidirectional Display,  Prev: Beeping,  Up: Display

37.23 Window Systems
====================

Emacsは複数のウィンドウシステムで機能しますが、特にXウィンドウシステムに
おいてもっとも機能します。EmacsとXはどちらも“ウィンドウ”を使用しますが、
異なる使い方をします。Emacsのフレームは、Xにおいては単一のウィンドウです
。Emacsの個々のウィンドウについては、Xはまったく関知しません。

 -- Variable: window-system
     この端末ローカルな変数は、Emacsがフレームを表示するのに、何のウィン
     ドウシステムを使用しているかを示す。可能な値は、

     ‘x’
          EmacsはXを使用してフレームを表示している。
     ‘w32’
          EmacsはネイティブMS-Windows GUIを使用してフレームを表示してい
          る。
     ‘ns’
          EmacsはNextstepインターフェイスを使用してフレームを表示してい
          る(GNUstepとMac OS Xで使用されている)。
     ‘pc’
          EmacsはMS-DOSのスクリーン直接書き込みを使用してフレームを表示
          している。
     ‘nil’
          Emacsは文字ベース端末を使用してフレームを表示している。

 -- Variable: initial-window-system
     この変数は、スタートアップの間にEmacsが作成する最初のフレームにたい
     して使用される、‘window-system’の値を保持する。(Emacsを‘--daemon’オ
     プションで呼び出し時には初期フレームを作成しないので、
     ‘initial-window-system’は‘nil’である。*note daemon: (emacs)Initial
     Options.を参照されたい。)

 -- Function: window-system &optional frame
     この関数は、FRAMEを表示するために使用されているウィンドウシステムを
     示す名前のシンボルをリターンする。この関数がリターンし得るシンボル
     のリストは、変数‘window-system’の記述と同様である。

   テキスト端末とグラフィカルなディスプレイで異なる処理を行うコードを記
述したいときは、‘window-system’と‘initial-window-system’を、述語やブーリ
ーンフラグ変数として_not__使用しないでください_。これは、与えられたディ
スプレイタイプでのEmacsの能力指標として、‘window-system’が適していないか
らです。かわりに‘display-graphic-p’、または*note Display Feature
Testing::で説明しているその他の述語‘display-*-p’を使用してください。


File: elisp,  Node: Bidirectional Display,  Prev: Window Systems,  Up: Display

37.24 Bidirectional Display
===========================

Emacsはアラビア語、ペルシア語、ヘブライ語のような、水平方向テキストの自
然な表示順がR2L(right-to-left: 右から左)に実行されるようなスクリプトで記
述されたテキストを表示できます。さらにL2R(right-to-left: 左から右)のテキ
ストに埋め込まれたR2Lスクリプト(例: プログラムソースファイル内のアラビア
語やヘブライ語のコメント)は適宜右から左にR2Lに表示される一方、ラテンスク
リプト部やR2Lテキストに埋め込まれた数字はL2Rで表示されます。わたしたちは
、そのようなL2RとR2Lが混交されたテキストを“双方向テキスト(bidirectional
text)”と呼びます。このセクションでは、双方向テキストの編集と表示にたいす
る機能とオプションんついて説明します。

   テキストは“ロジカル”な順序(または“読込順”)、すなわち人間が各文字を読
み込むであろう順序で、テキストをEmacsバッファーおよび文字列に格納します
。R2Lおよび双方向テキストでは、スクリーン上で文字が表示される順序(“ビジ
ュアル順”と呼ばれる)はロジカル順と同一ではありません。それら各文字のスク
リーン位置は、文字列またはバッファー位置により単調に増加しません。この
“双方向の並べ替え(bidirectional reordering)”を処理を行うに際、Emacsは
Unicode双方向アルゴリズム(UBA： Unicode Bidirectional Algorithm)にしたが
います(<http://www.unicode.org/reports/tr9/>)。現在のところEmacsは、
UBAの“Non-isolate Bidirectionality(双方向非分離)”なクラスの実装を提供し
ます。これはまだ、Unicode Standard v6.3.0で提唱された方向分離フォーマッ
トをサポートしていません。

 -- Variable: bidi-display-reordering
     このバッファーローカル変数の値が非‘nil’(デフォルト)なら、Emacsは表
     示で双方向の並べ替えを行う。この並べ替えはバッファーテキスト、同様
     に文字列表示やバッファー内のテキストプロパティやオーバーレイプロパ
     ティ由来のオーバーレイ文字列に効果を及ぼす(*note Overlay
     Properties::および*note Display Property::を参照)。値が‘nil’なら、
     Emacsはバッファー内での双方向の並べ替えを行わない。

     ‘bidi-display-reordering’のデフォルト値は、モードライン内に表示され
     るテキスト(*note Mode Line Format::を参照)、およびヘッダー行(*note
     Header Lines::を参照)を含む、バッファーにより直接提供されない文字列
     の並べ替えを制御する。

   たとえバッファーの‘bidi-display-reordering’が非‘nil’でも、Emacsがユニ
バイトバッファーのテキストの並べ替えを行うことはありません。これはユニバ
イトバッファーに含まれるのが文字ではなくrawバイトであり、並べ替えに要す
る方向的なプロパティを欠くからです。したがって、あるバッファーのテキスト
が並べ替えられるかどうかテストするには、‘bidi-display-reordering’のテス
ト単独では不十分です。正しいテストは以下のようになります:

      (if (and enable-multibyte-characters
               bidi-display-reordering)
          ;; 表示時にバッファーは並べ替えられるだろう
        )

   とはいえ、親バッファーが並べ替えられた際には、ユニバイト表示およびオ
ーバーレイ文字列は_並べ替えられます_。これはEmacsにより、プレーンASCII文
字列がユニバイト文字列に格納されるからです。ユニバイト表示またはオーバー
レイ文字列が非ASCII文字列を含むなら、それらの文字はL2Rの方向をもつとみな
されます。

   テキストプロパティ‘display’、値が文字列であるような‘display’プロパテ
ィによるオーバーレイ、バッファーテキストを置換するその他任意のプロパティ
にカバーされたテキストは、表示時の並べ替え時に単一の単位として扱われます
。つまり、これらのプロパティにカバーされたテキストのchunk全体が、一緒に
並べ替えられます。さらに、そのようなテキストchunk内の文字の双方向的なプ
ロパティは無視され、Emacsはあたかもそれらが“オブジェクト置換文字(Object
Replacement Character)”として知られる単一文字で置換されたかのように、そ
れらを並べ替えます。これは、テキスト範囲上にdisplayプロパティを配すこと
により、表示時に周辺テキストを並べ替える方法が変更され得ることを意味して
います。このような予期せぬ効果を防ぐには、常に周辺テキストと等しい方向の
テキストにたいしてそのようなプロパティを配してください。

   双方向テキストのパラグラフはそれぞれ、R2LまたはL2Rいずれかの“基本方向
(base direction)”をもちます。L2Rパラグラフは、そのウィンドウの左マージン
を先頭に表示され、そのテキストが右マージンに達したら切り詰め、または継続
されます。R2Lパラグラフは、そのウィンドウの右マージンを先頭に表示され、
そのテキストが左マージンに達したら切り詰め、または継続されます。

   デフォルトでは、Emacsはテキスト先頭を調べることにより、各パラグラフの
基本方向を判断します。基本方向の精細な決定手法はUBAにより指定されており
、簡潔に言うとその明示にな方向生をもつそのパラグラフ内の最初の文字が、そ
のパラグラフの基本方向を決定します。とはいえ、あるバッファーが自身のパラ
グラフにたいして、特定の基本方向の強制を要する場合もあります。たとえば、
プログラムソースコードを含むバッファーは、すべてのパラグラフがL2Rで表示
されるよう強制されるべきでしょう。これを行うために、以下の変数を使用でき
ます:

 -- Variable: bidi-paragraph-direction
     このバッファーローカル変数の値が、‘right-to-left’または
     ‘left-to-right’いずれかのシンボルなら、そのバッファー内のすべてのパ
     ラグラフがその指定された方向をもつとみなされる。その他すべての値は
     ‘nil’(デフォルト)と等価であり、各パラグラフの基本方向はその内容によ
     り判断されることを意味する。

     プログラムソースコードにたいするモードは、これを‘left-to-right’にセ
     ットすること。Progモードはデフォルトでこれを行うので、Progモードか
     ら派生したモードは、これを明示的にセットする必要はない(*note Basic
     Major Modes::を参照)。

 -- Function: current-bidi-paragraph-direction &optional buffer
     この関数は、BUFFERという名前のバッファーのポイント位置のパラグラフ
     方向をリターンする。リターンされる値は、‘left-to-right’か
     ‘right-to-left’いずれかのシンボルである。BUFFERが省略または‘nil’の
     場合のデフォルトは、カレントバッファーである。変数
     ‘bidi-paragraph-direction’のバッファーローカル値が非‘nil’なら、リタ
     ーンされる値はその値と等しくなるだろう。それ以外なら、リターンされ
     る値はEmacsにより動的に決定されたそのパラグラフの方向を反映する。
     ‘bidi-display-reordering’の値が‘nil’のバッファー、同様にユニバイト
     バッファーにたいしては、この関数は常に‘left-to-right’をリターンする
     。

   バッファーのカレントのスクリーン位置にたいして、ビジュアル順に、L2Rま
たはR2Lいずれかの方向へ、厳密なポイント移動を要す場合があります。Emacsは
これを行うためのプリミティブを提供します。

 -- Function: move-point-visually direction
     この関数は、そのバッファーにたいしてカレントで選択されたウィンドウ
     のポイントを、スクリーン上ですぐ右または左のポイントへ移動する。
     DIRECTIONが正ならスクリーン位置は右へ、それ以外ならスクリーン位置は
     左へ移動するだろう。周囲の双方向コンテキストに依存して、これは潜在
     的に多くのバッファーのポイントを移動してしまい得ることに注意。スク
     リーン行終端で呼び出された場合、この関数はDIRECTIONに応じて適宜、次
     行または前行の、右端または左端のスクリーン位置にポイントを移動する
     。

     この関数はその値として、新たなバッファー位置をリターンする。

   バッファー内で双方向の内容をもつ2つの文字列が並置されているときや、プ
ログラムで1つのテキスト文字列に結合した場合、双方向の並べ替えは以外かつ
不快な効果を与える可能性があります。典型的な問題ケースはBuffer Menuモー
ドやRmail Summaryモードのように、バッファーがスペースや区切り文字分割さ
れたテキストの“フィールド”のシーケンスで構成されているときです。それはセ
パレーターとして使用されている区切り文字が、“弱い方向性”をもち、周囲のテ
キストの方向を採用するためです。結果として、双方向の内容のフィールドが後
続する数値フィールドは、先行するフィールドヘ_左方向_に表示され、期待した
レイアウトを破壊してしまいます。この問題を回避するための方法がいくつかあ
ります：

   − 双方向の内容をもち得る各フィールド終端に、スペシャル文字
     LEFT-TO-RIGHT MARK(略してLRM)の‘U+200E’を付加する。後述の関数
     ‘bidi-string-mark-left-to-right’は、この目的に手頃である。(R2Lパラ
     グラフではかわりにRIGHT-TO-LEFT MARK、略してRLMの‘U+200F’を使用する
     。) これはUBAにより推奨される解決策の1つである。

   − フィールドセパレーターにタブ文字を含める。タブ文字は双方向の並べ替
     えにおいて“セグメントセパレーター(segment separator)”の役割を演じ、
     両側のテキストを個別に並べ替えさせる。

   − ‘display’プロパティ、または‘(space . PROPS)’という形式の値をもつオ
     ーバーレイ(*note Specified Space::を参照)でフィールドを区切る。
     Emacsはこのdisplay仕様を“パラグラフセパレーター(paragraph
     separator)”として扱い、両側のテキストを個別に並べ替える。

 -- Function: bidi-string-mark-left-to-right string
     この関数は、結果を安全に他の文字列に結合できるよう、あるいはこの文
     字列とスクリーン上で次行となる行に関連するレイアウトを乱すことなく
     、バッファー内の他の文字列に並置できるよう、自身への引数STRINGを恐
     らく変更してリターンする。この関数がリターンする文字列がR2Lパラグラ
     フの一部として表示される文字列なら、それは常に後続するテキストの左
     に出現するだろう。この関数は自身の引数の文字を検証することにより機
     能し、もしそれらの文字のいずれかがディスプレイ上の並べ替えを発生し
     得るなら、この関数はその文字列にLRM文字を付加する。付加されたLRM文
     字はテキストプロパティ‘invisible’に‘t’を与えることにより、不可視に
     できる(*note Invisible Text::を参照)。

   並べ替えアルゴリズムは、‘bidi-class’プロパティとして格納された、その
文字の双方向プロパティを使用します(*note Character Properties::を参照)。
Lispプログラムは‘put-char-code-property’関数を呼び出すことにより、これら
のプロパティを変更できます。しかしこれを行うにはUBAの完全な理解が要求さ
れるので、推奨しません。ある文字の双方向プロパティにたいする任意の変更は
、グローバルな効果をもちます。これらはEmacsのフレームのすべてのフレーム
とウィンドウに影響します。

   同様に、‘mirroring’プロパティは、並べ替えられたテキスト内の、適切にミ
ラーされた文字の表示に使用されます。Lispプログラムは、このプロパティを変
更することにより、ミラーされた表示に影響を与えることができます。繰り返し
ますが、そのような変更はEmacsのすべての表示に影響を与えます。


File: elisp,  Node: System Interface,  Next: Packaging,  Prev: Display,  Up: Top

38 Operating System Interface
*****************************

これはEmacsの開始と終了、オペレーティングシステム内の値へのアクセス、端
末の入力と出力に関するチャプターです。

   関連する情報は*note Building Emacs::を参照してください。端末とスクリ
ーンに関連するオペレーティングシステムの状態に関する追加情報は、*note
Display::を参照してください。

* Menu:

* Starting Up::              Emacsのスタートアッププロセスのカスタマイズ。
* Getting Out::              (永久または一時的に)exitが機能する方法。
* System Environment::       システム名と種類の区別。
* User Identification::      そのユーザーの名前とユーザーIDを調べる。
* Time of Day::              カレント時刻の取得。
* Time Conversion::          時刻の数値形式からカレンダーデータへの変換と逆変換。
* Time Parsing::             時刻の数値形式からテキストへの変換と逆変換。
* Processor Run Time::       Emacsによる実行時間の取得。
* Time Calculations::        時間の加減算、その他。
* Timers::                   特定時刻に関数を呼び出すためにターマーをセットする。
* Idle Timers::              Emacsが特定の時間の間アイドル時に関数を呼び出すためにタイマーをセットする。
* Terminal Input::           端末入力へのアクセスと記録。
* Terminal Output::          端末出力の制御と記録。
* Sound Output::             コンピューターノスピーカーでのサウンド再生。
* X11 Keysyms::              Xウィンドウにたいするキーシンボルの操作。
* Batch Mode::               端末との対話なしでEmacsを実行する。
* Session Management::       Xセッション管理の保存とリストア。
* Desktop Notifications::    デスクトップ通知。
* File Notifications::       ファイル通知。
* Dynamic Libraries::        サポートライブラリーのオンデマンドロード。


File: elisp,  Node: Starting Up,  Next: Getting Out,  Up: System Interface

38.1 Starting Up Emacs
======================

このセクションでは、Emacsが開始時に何を行うかと、それらのアクションのカ
スタマイズ方法を説明します。

* Menu:

* Startup Summary::          スタートアップ時にEmacsが行うアクションの順序。
* Init File::                initファイル読み込みの詳細。
* Terminal-Specific::        端末固有のLispファイルの読み込み方法。
* Command-Line Arguments::   コマンドライン引数の処理とカスタマイズの方法。


File: elisp,  Node: Startup Summary,  Next: Init File,  Up: Starting Up

38.1.1 Summary: Sequence of Actions at Startup
----------------------------------------------

Emacsは起動時に、以下の処理を行います(‘startup.el’内の
‘normal-top-level’を参照):

  1. このリストの各ディレクトリー内にある‘subdirs.el’という名前のファイ
     ルを実行することにより、‘load-path’にサブディレクトリーを追加する。
     通常このファイルは、そのディレクトリー内にあるサブディレクトリーを
     このリストに追加して、順にそれらをスキャンする。通常、ファイル
     ‘subdirs.el’は、Emacsインストール時に自動的に作成される。

  2. ‘load-path’のディレクトリー内で見つかった、すべての‘leim-list.el’を
     ロードする。このファイルは、入力メソッドの登録を意図している。この
     検索は、ユーザーが作成するかもしれない、個人的な‘leim-list.el’すべ
     てにたいしてのみ行われる。標準的なEmacsライブラリーを含むディレクト
     リーはスキップされる(これらは単一の‘leim-list.el’だけに含まれるべき
     であり、Emacs実行形式にコンパイル済である)。

  3. 変数‘before-init-time’に、‘current-time’の値をセットする(*note Time
     of Day::を参照)。これは‘after-init-time’に‘nil’をセットすることによ
     り、Emacs初期化時にLispプログラムへの合図も行う。

  4. ‘LANG’のような環境変数がそれを要するなら、言語環境と端末のコーディ
     ングシステムをセットする。

  5. コマンドライン引数にたいして、いくつかの基本的なパースを行う。

  6. batchモードで実行されていなければ、変数‘initial-window-system’が指
     定するウィンドウシステムを初期化する(*note initial-window-system:
     Window Systems.を参照)。サポートされる各ウィンドウシステムにたいす
     る初期化関数は、‘window-system-initialization-alist’により指定され
     る。‘initial-window-system’の値がWINDOWSYSTEMなら、ファイル
     ‘term/WINDOWSYSTEM-win.el’内で適切な初期化関数が定義されている。こ
     のファイルはビルド時に、Emacs実行可能形式にコンパイルされているべき
     である。

  7. ノーマルフック‘before-init-hook’を実行する。

  8. それが適切なら、グラフィカルなフレームを作成する。これはオプション
     ‘--batch’か‘--daemon’が指定されていたら行われない。

  9. 初期フレームのフェイスを初期化して、必要ならメニューバーとツールバ
     ーをセットする。グフィカルなフレームがサポートされていたら、たとえ
     カレントフレームがグラフィカルでなくても、後でグラフィカルなフレー
     ムが作成されるかもしれないので、ツールバーをセットアップする。

  10. リスト‘custom-delayed-init-variables’内のメンバーを再初期化するた
     めに、‘custom-reevaluate-setting’を使用する。これらのメンバーはデフ
     ォルト値が、ビルド時ではなく実行時のコンテキストに依存する、すべて
     の事前ロード済ユーザーオプションである。*note
     custom-initialize-delay: Building Emacs.を参照のこと。

  11. 存在する場合はライブラリー‘site-start’をロードする。これはオプショ
     ン‘-Q’か‘--no-site-file’が指定された場合は行われない。

  12. ユーザーのinitファイルをロードする(*note Init File::を参照)。これ
     はオプション‘-q’、‘-Q’、または‘--batch’が指定されていたら行われない
     。‘-u’オプションが指定された場合、Emacsはかわりにそのユーザーのホー
     ムディレクトリー内でinitファイルを探す。

  13. 存在する場合はライブラリー‘default’をロードする。これは
     ‘inhibit-default-init’が非‘nil’、あるいはオプション‘-q’、‘-Q’、また
     は‘--batch’指定された場合は行われない。

  14. もしファイルが存在して、かつ読み込み可能なら、‘abbrev-file-name’で
     指定されるファイルから、ユーザーのabbrevをロードする(*note
     abbrev-file-name: Abbrev Files.を参照)。オプション‘--batch’が指定さ
     れていたら、これは行われない。

  15. ‘package-enable-at-startup’が非‘nil’なら、インストール済のオプショ
     ンのEmacs Lispパッケージすべてをアクティブにするために、関数
     ‘package-initialize’を呼び出す。*note Packaging Basics::を参照のこ
     と。

  16. 変数‘after-init-time’に、‘current-time’の値をセットする。この変数
     は事前に‘nil’にセットされている。これをカレント時刻にセットすること
     が、初期化フェーズが終わったことの合図となり、かつ
     ‘before-init-time’と共に用いることにより、初期化に要した時間の計測
     手段を提供する。

  17. ノーマルフック‘after-init-hook’を実行する。

  18. バッファー‘*scratch*’が存在し、それがまだ(デフォルトであるべき
     )Fundamentalモードなら、‘initial-major-mode’に応じたメジャーモード
     をセットする。

  19. テキスト端末で開始された場合は、その端末固有のLispライブラリー
     (*note Terminal-Specific::を参照)をロードして、フック
     ‘tty-setup-hook’を実行する。これは‘--batch’モード、または
     ‘term-file-prefix’が‘nil’なら実行されない。

  20. ‘inhibit-startup-echo-area-message’で抑制していなければ、エコーエ
     リアに初期メッセージを表示する。

  21. これ以前に処理されていない、すべてのコマンドラインオプションを処理
     する。

  22. オプション‘--batch’が指定されていたら、ここでexitする。

  23. ‘initial-buffer-choice’が文字列なら、その名前のファイル(またはディ
     レクトリー)をvisitする。それが関数なら引数なしでその関数を呼び出し
     て、それがリターンしたバッファーを選択する。 ‘*scratch*’が存在し空
     ならば、そのバッファーに‘initial-scratch-message’を挿入する。

  24. ‘emacs-startup-hook’を実行する。

  25. initファイルの指定が何であれ、それに応じて選択されたフレームのパラ
     メーターを変更する‘frame-notice-user-settings’を呼び出す。

  26. ‘window-setup-hook’を実行する。このフックと‘emacs-startup-hook’の
     違いは、前述したフレームパラメーターの変更後にこれが実行される点だ
     けである。

  27. copyleftとEmacsの基本的な使い方を含む特別なバッファーである、“スタ
     ートアップスクリーン(startup screen)”ヲ表示する。これは
     ‘inhibit-startup-screen’か‘initial-buffer-choice’が非‘nil’、あるい
     はコマンドラインオプション‘--no-splash’か‘-Q’が指定されていたら行わ
     れない。

  28. オプション‘--daemon’ガ指定されていたら、‘server-start’を呼び出して
     、制御端末からデタッチする。*note (emacs)Emacs Server::を参照のこと
     。

  29. セッションマネージャーにより開始された場合には、以前のセッションの
     IDを引数として、‘emacs-session-restore’を呼び出す。*note Session
     Management::を参照のこと。

以下のオプションは、スタートアップシーケンスの側面のいくつかに影響を与え
ます。

 -- User Option: inhibit-startup-screen
     この変数が非‘nil’なら、スタートアップスクリーンを抑制する。この場合
     、通常Emacsは‘*scratch*’バッファーを表示する。しかし、以下の
     ‘initial-buffer-choice’を参照されたい。

     新しいユーザーがcopyleftやEmacsの基本的な使い方に関する情報を入手す
     るのを防げるので、新しいユーザーのinitファイル内や、複数のユーザー
     ぶ影響するような方法でこの変数をセットしてはならない

     ‘inhibit-startup-message’と‘inhibit-splash-screen’は、この変数にた
     いするエイリアスである。

 -- User Option: initial-buffer-choice
     非‘nil’なら、この変数はスタートアップ後にスタートアップスクリーンの
     かわりにEmacsが表示するファイルを指定する文字列であること。この変数
     が関数なら、Emacsはその関数を呼び出し、その関数はその後に表示するバ
     ッファーをリターンしなければならない。値が‘t’なら、Emacsは
     ‘*scratch*’バッファーを表示する。

 -- User Option: inhibit-startup-echo-area-message
     この変数はエコーエリアのスタートアップメッセージの表示を制御する。
     ユーザーのinitファイル内に以下の形式のテキストを追加することにより
     、エコーエリアのスタートアップメッセージを抑制できる:

          (setq inhibit-startup-echo-area-message
                "YOUR-LOGIN-NAME")

     Emacsはユーザーのinitファイル内の、上記のような式を明示的にチェック
     する。ユーザーのロフイン名は、Lispの文字列定数としてこの式内に記述
     されていなければならない。Customizeインターフェイスを使用することも
     できる。他の方法で同じ値に‘inhibit-startup-echo-area-message’をセッ
     トしても、スタートアップメッセージは抑制されない。この方法により、
     望むならユーザー自身で簡単にメッセージを抑制できるが、単に自分用の
     iniファイルを別のユーザーにコピーしても、メッセージは抑制されないだ
     ろう。

 -- User Option: initial-scratch-message
     この変数が非‘nil’なら、Emacsスタートアップ時に‘*scratch*’バッファー
     に挿入する文字列であること。‘nil’なら‘*scratch*’バッファーは空にな
     る。

以下のコマンドラインオプションは、スタートアップシーケンスのいくつかの側
面に影響を与えます。*note (emacs)Initial Options::を参照してください。

‘--no-splash’
     スプラッシュスクリーンを表示しない。

‘--batch’
     対話的な端末なしで実行する。*note Batch Mode::を参照のこと。

‘--daemon’
     表示の初期化を何も行わず、単にバックグラウンドでサーバーを開始する
     。

‘--no-init-file’
‘-q’
     initファイルと‘default’ライブラリーをいずれもロードしない。

‘--no-site-file’
     ‘site-start’ライブラリーをロードしない。

‘--quick’
‘-Q’
     ‘-q --no-site-file --no-splash’と等価。


File: elisp,  Node: Init File,  Next: Terminal-Specific,  Prev: Startup Summary,  Up: Starting Up

38.1.2 The Init File
--------------------

Emacsの開始時は通常、ユーザーの“initファイル(init file)”のロードを試みま
す。これはユーザーのホームディレクトリー内にある‘.emacs’または
‘.emacs.el’という名前のファイル、あるいはホームディレクトリーの
‘.emacs.d’という名前のサブディレクトリー内にある‘init.el’という名前のフ
ァイルのいずれかのファイルです。

   コマンドラインスイッチ‘-q’、‘-Q’、‘-u’はinitファイルを探すべきかと、
どこで探すかを制御します。‘-u USER’はそのユーザーではなくUSERのinitファ
イルのロードを指示しますが、‘-q’(‘-Q’のほうが強力)はinitファイルをロード
しないことを指示します。*note (emacs)Entering Emacs::を参照してください
。いずれのオプションも指定されていなければ、ユーザーのホームディレクリー
からinitファイルを探すために、Emacsは環境変数‘LOGNAME’、‘USER’(ほとんど
のシステム)、または‘USERNAME’(MSシステム)を使用します。この方法により、
たとえsuしていたとしても、依然としてEmacsはそのユーザー自身のinitファイ
ルをロードできるのです。これらの環境変数が存在していなくても、Emacsはユ
ーザーIDからユーザーのホームディレクトリーを探します。

   インストールしたEmacsによっては‘default.el’というLispライブラリーの、
“デフォルトinitファイル(default init file)”が存在するかもしれません。
Emacsはライブラリーの標準検索パスからこのファイルを探します(*note How
Programs Do Loading::を参照)。Emacsディストリビューションには、このファ
イルはローカルなカスタマイズを意図しています。デフォルトinitファイルが存
在する場合は、常にこのファイルがEmacs開始時にロードされます。しかしユー
ザー自身のinitファイルが存在する場合には、それが最初にロードされます。そ
れにより‘inhibit-default-init’が非‘nil’値にセットされた場合、Emacsは後続
する‘default.el’ファイルのロードを行いません。batchモード、または‘-q’(ま
たは‘-Q’)を指定した場合、Emacsは個人的なinitファイルトでデフォルトinitフ
ァイのいずれもロードしません。

   サイトのカスタマイズのためのファイルは、‘site-start.el’です。Emacsは
ユーザーのinitファイルの_前_にこれをロードします。オプション
‘--no-site-file’により、このファイルのロードを抑制できます。

 -- User Option: site-run-file
     この変数は、ユーザーのinitファイルの前にロードする、サイト用カスタ
     マイズファイルを指定する。通常の値は‘"site-start"’。実際に効果があ
     るようにこれを変更するには、Emacsのdump前に変更するのが唯一の方法と
     なる。

   一般的に必要とされる‘.emacs’ファイルのカスタマイズ方法については、
*note Init File Examples: (emacs)Init Examples.を参照のこと。

 -- User Option: inhibit-default-init
     この変数が非‘nil’なら、Emacsがデフォルトの初期化ライブラリーファイ
     ルをロードするのを防ぐ。デフォルト値は‘nil’。

 -- Variable: before-init-hook
     このノーマルフックは、すべてのinitファイル(‘site-start.el’、ユーザ
     ーのinitファイル、および‘default.el’)のロード直前に1度実行される。
     (実際に効果があるようにこれを変更するには、Emacsのdump前に変更する
     のが唯一の方法となる。)

 -- Variable: after-init-hook
     このノーマルフックは、すべてのinitファイル(‘site-start.el’、ユーザ
     ーのinitファイル、および‘default.el’)のロード直後、端末固有ライブラ
     リーのロードとコマンドラインアクション引数の処理の前に1度実行される
     。

 -- Variable: emacs-startup-hook
     このノーマルフックは、コマンドライン引数の処理直後に1度実行される。
     batchモードでは、Emacsはこのフックを実行しない。

 -- Variable: window-setup-hook
     このノーマルフックは、‘emacs-startup-hook’と非常に似ている。このフ
     ックが若干遅れて、フレームパラメーターのセット後に実行されるのが唯
     一の違いである。*note window-setup-hook: Startup Summary.を参照のこ
     と。

 -- Variable: user-init-file
     この変数は、ユーザーのinitファイルの絶対ファイル名を保持する。実際
     にロードされたinitファイルが‘.emacs.elc’のようなコンパイル済なら、
     値はそれに対応するソースファイルを参照する。

 -- Variable: user-emacs-directory
     この変数は、‘.emacs.d’ディレクトリーの名前を保持する。これは、
     MS-DOS以外のプラットフォームでは‘~/.emacs.d’である。


File: elisp,  Node: Terminal-Specific,  Next: Command-Line Arguments,  Prev: Init File,  Up: Starting Up

38.1.3 Terminal-Specific Initialization
---------------------------------------

端末タイプはそれぞれ、その端末のタイプでEmacsが実行時にロードする、独自
のLispライブラリーをもつことができます。そのライブラリーの名前は、変数
‘term-file-prefix’の値と、端末タイプ(環境変数‘TERM’により指定される)を結
合することにより構築されます。‘term-file-prefix’は通常は値‘"term/"’をも
ち、これの変更は推奨しません。Emacsは通常の方法、つまり‘load-path’のディ
レクトリーから‘.elc’と‘.el’の拡張子のファイルを検索することにより、この
ファイルを探します。

   端末固有ライブラリーの通常の役割は、特殊キーによりEmacsが認識可能なシ
ーケンスを送信可能にすることです。TermcapとTerminfoのエントリーがその端
末のすべてのファンクションキーを指定していなければ、‘input-decode-map’へ
のセットや追加も必要になるかもしれません。*note Terminal Input::を参照し
てください。

   端末タイプにハイフンとアンダースコアーが含まれ、その端末名に等しい名
前のライブラリーが見つからないときには、Emacsはその端末名から最後のハイ
フンまたはアンダースコアー以降を取り除いて再試行します。このプロセスは
Emacsがマッチするライブラリーを見つかるか、その名前にハイフンとアンダー
スコアーが含まれなくなる(つまりその端末固有ファイルが存在しない)まで繰り
返されます。たとえば端末名が‘xterm-256color’で‘term/xterm-256color.el’と
いうライブラリーが存在しない場合、Emacsは‘term/xterm.el’のロードを試みま
す。必要なら、その端末タイプの完全な名称を見つかるために、端末ライブラリ
ーは‘(getenv "TERM")’を評価することができます。

   initファイルで変数‘term-file-prefix’を‘nil’にセットすることにより、端
末固有ライブラリーのロードを防ぐことができます。

   ‘tty-setup-hook’を使用することにより、端末固有ライブラリーのいくつか
のアクションのアレンジやオーバーライドもできます。これは新たなテキスト端
末の初期化語にEmacsが実行するノーマルフックです。自身のライブラリーをも
たない端末にたいする初期化を定義するために、このフックを使用することので
きるでしょう。*note Hooks::を参照してください。

 -- Variable: term-file-prefix
     この変数の値が非‘nil’なら、Emacsは以下のように端末固有初期化ファイ
     ルをロードする:

          (load (concat term-file-prefix (getenv "TERM")))

     端末初期化ファイルのロードを望まない場合には、変数
     ‘term-file-prefix’に‘nil’をセットできる。

     MS-DOSでは、Emacsは環境変数‘TERM’に‘internal’をセットする。

 -- Variable: tty-setup-hook
     この変数は、新たなテキスト端末の初期化後にEmacsが実行するノーマルフ
     ックである。(これは非ウィンドウのモードでのEmacs開始時と
     ‘emacsclient’のTTY接続作成時に適用される。) (適用可能なら)このフッ
     クはユーザーのinitファイル、および端末固有Lispファイルのロード後に
     実行されるので、そのファイルにより行われた定義を調整するために、こ
     のフックを使用できる。

     関連する機能については、*note window-setup-hook: Init File.を参照の
     こと。


File: elisp,  Node: Command-Line Arguments,  Prev: Terminal-Specific,  Up: Starting Up

38.1.4 Command-Line Arguments
-----------------------------

Emacs開始時に種々のアクションをリクエストするために、コマンドライン引数
を使用できます。Emacsを使う際は、ログイン後に1度だけ起動して、同一の
Emacsセッション内ですべてを行うのが推奨される方法です(*note
(emacs)Entering Emacs::を参照)。この理由により、コマンドライン引数を頻繁
に使うことはないかもしれません。それでもセッションスクリプトからEmacsを
呼び出すときやEmacsのデバッグ時に、コマンドライン引数が有用になるかもし
れません。このセクションでは、Emacsがコマンドライン引数を処理する方法を
説明します。

 -- Function: command-line
     この関数は、Emacsが呼び出された際のコマンドライン引数を解析、処理、
     そして(とりわけ)ユーザーのinitファイルをロードして、スタートアップ
     メッセージを表示する。

 -- Variable: command-line-processed
     この変数の値は、1度コマンドラインが処理されると‘t’になる。

     ‘dump-emacs’(*note Building Emacs::を参照)を呼び出すことにより
     Emacsを再dumpする場合は、新たにdumpされたEmacsに新たなコマンドライ
     ン引数を処理させるために、最初にこの変数に‘nil’をセットしたいと思う
     かもしれない。

 -- Variable: command-switch-alist
     この変数は、ユーザー定義のコマンドライン引数とそれに関連付けられた
     ハンドラー関数のalistである。デフォルトは空だが、望むなら要素を追加
     できる。

     “コマンドラインオプション(command-line option)”ハ、以下の形式をもつ
     コマンドライン上の引数である:

          -OPTION

     ‘command-switch-alist’の要素は以下のようになる:

          (OPTION . HANDLER-FUNCTION)

     CARのOPTIONは文字列で、コマンドラインオプションの名前である(先頭の
     ハイフンは含まない)。HANDLER-FUNCTIONはOPTIONを処理するために呼び出
     され、単一の引数としてオプション名を受け取る。

     このオプションは、コマンドライン内で引数を併う場合がある。この場合
     、HANDLER-FUNCTIONは残りのコマンドライン引数すべてを、変数
     ‘command-line-args-left’(以下参照)で見い出すことができる(コマンドラ
     イン引数のリスト全体は‘command-line-args’)。

     コマンドライン引数は、‘startup.el’ファイル内の‘command-line-1’によ
     り解析される。*note Command Line Arguments for Emacs Invocation:
     (emacs)Emacs Invocation.も参照されたい。

 -- Variable: command-line-args
     この変数の値は、Emacsに渡されたコマンドライン引数のリストである。

 -- Variable: command-line-args-left
     この変数の値は、まだ処理されていないコマンドライン引数のリストであ
     る。

 -- Variable: command-line-functions
     この変数の値は、認識されなかったコマンドライン引数を処理するための
     関数のリストである。次の引数が処理されてそれに特別な意味がないとき
     は毎回、このリスト内の関数が非‘nil’をリターンするまでリスト内の出現
     順に呼び出される。

     これらの関数は引数なしで呼び出される。関数は、その時点で一時的にバ
     インドされている変数‘argi’を通じて、検討中のコマンドラインにアクセ
     スできる。残りの引数(カレントの引数含まず)は、変数
     ‘command-line-args-left’内にあえう。

     関数が‘argi’内のその引数を認識して処理したときは、その引数を処理し
     たと告げるために非‘nil’をリターンすること。後続の引数のいくつかを処
     理したときは、‘command-line-args-left’からそれらを削除してそれを示
     すことができる。

     これらの関数すべてが‘nil’をリターンした場合、その引数はvisitすべき
     ファイル名として扱われる。


File: elisp,  Node: Getting Out,  Next: System Environment,  Prev: Starting Up,  Up: System Interface

38.2 Getting Out of Emacs
=========================

Emacsから抜け出すには2つの方法があります: 1つ目は永遠にexitするEmacsジョ
ブのkillであり、2つ目はサスペンドする方法で、これは後からEmacsプロセスに
再エンターすることができます。(もちろんグラフィカルな環境では、Emacsで特
に何もせず単に他のアプリケーションにスイッチして、後で望むときにEmacsに
戻れる。)

* Menu:

* Killing Emacs::            Emacsからの不可逆的なexit。
* Suspending Emacs::         Emacsからの可逆的なexit。


File: elisp,  Node: Killing Emacs,  Next: Suspending Emacs,  Up: Getting Out

38.2.1 Killing Emacs
--------------------

Emacsのkillとは、Emacsプロセスの終了を意味します。端末からEmacsを開始し
た場合、通常は親プロセスの制御が再開されます。Emacsをkillする低レベルな
プリミティブはs ‘kill-emacs’です。

 -- Command: kill-emacs &optional exit-data
     このコマンドはフック‘kill-emacs-hook’を呼び出してから、Emacsプロセ
     スをexitしてそれをkillする。

     EXIT-DATAが整数なら、それはEmacsプロセスのexitステータスとして使用
     される。(これは主にbatch処理で有用。*note Batch Mode::を参照された
     い。)

     EXIT-DATAが文字列なら、その内容は端末の入力バッファーに詰め込まれる
     ので、shell(または何であれ次の入力を読み込むプログラム)が読み込むこ
     とができる。

   関数‘kill-emacs’は通常、より高位なレベルコマンド‘C-x C-c’
(‘save-buffers-kill-terminal’)を通じて呼び出される。*note
(emacs)Exiting::を参照のこと。これはEmacsがオペレーティングシステムのシ
グナル‘SIGTERM’が‘SIGHUP’を受け取った場合(たとえば制御端末が切断されたと
き)や、batchモードで実行中に‘SIGINT’を受け取った場合(*note Batch Mode::を
参照)にも、自動的にこれが呼び出される。

 -- Variable: kill-emacs-hook
     このノーマルフックは、Emacsのkillの前に‘kill-emacs’により実行される
     。

     ‘kill-emacs’は、ユーザーとの対話が不可能な状況(たとえば端末が切断さ
     れたとき)で呼び出されるかもしれないので、このフックの関数はユーザー
     との対話を試みるべきではない。Emacsシャットダウン時にユーザーと対話
     したければ、下記の‘kill-emacs-query-functions’を使用すること。

   Emacsをkillしたときには保存されたファイルを除き、Emacsプロセス内のす
べての情報が失われます。うっかりEmacsをkillすることで大量の作業が失われ
るので、‘save-buffers-kill-terminal’コマンドは保存を要するバッファーがあ
ったり実行中のサブプロセスがある場合には確認の問い合わせを行います。これ
はアブノーマルフック‘kill-emacs-query-functions’も実行します。

 -- Variable: kill-emacs-query-functions
     ‘save-buffers-kill-terminal’がEmacsをkillする際には、標準の質問を尋
     ねた後、‘kill-emacs’を呼び出す前にこのフック内の関数を呼び出す。関
     数は出現順に引数なしで呼び出される。関数はそれぞれ、追加ユーザーか
     ら確認を求めることができる。それらのいずれかが‘nil’をリターンすると
     、‘save-buffers-kill-emacs’はEmacsをkillせず、このフック内の残りの
     関数は実行されない。直接‘kill-emacs’を呼び出すと、このフックは実行
     されない。


File: elisp,  Node: Suspending Emacs,  Prev: Killing Emacs,  Up: Getting Out

38.2.2 Suspending Emacs
-----------------------

テキスト端末では、“Emacsのサスペンド”ができます。これはEmacsを一時的にス
トップして上位のプロセスに制御を返します。これは通常はshellになります。
これにより後で同じEmacsプロセス内の、同じバッファー、同じkillリング、同
じアンドゥヒストリー、...で編集を再開できます。Emacsを再開するには、親
shell内で適切なコマンド — 恐らくは‘fg’ — を使用します。

   そのEmacsセッションが開始された端末デバイス上でのみサスペンドは機能し
ます。そのデバイスのことを、そのセッションの“制御端末(controlling
terminal)”と呼びます。制御端末がグラフィカルな端末の場合、サスペンドは許
されません。グラフィカルな端末では、Emacsで特別なことをせずに単に別のア
プリケーションにスイッチできるので、サスペンドは通常は関係ありません。

   いくつかのオペレーティングシステム(‘SIGTSTP’のないシステムやMS-DOS)で
は、ジョブの停止はサポートされません。これらのシステムでの“停止”は、
Emacsのサブプロセスとして新たなshellを一時的に作成します。Emacsに戻るた
めには、そのshellをexitすればよいでしょう。

 -- Command: suspend-emacs &optional string
     この関数はEmacsを停止して、上位のプロセスに制御を返す。上位プロセス
     がEmacsを再開するとその際には、Lispでの‘suspend-emacs’の呼び出し元
     に‘nil’をリターンする。

     この関数は、そのEmacsセッションの制御端末上でのみ機能する。他の
     TTYデバイスの制御を放棄するには、‘suspend-tty’を使用する(下記参照
     )。そのEmacsセッションが複数の端末を使用する場合には、Emacsのサスペ
     ンド前に他のすべての端末からフレームを削除しなければならず、さもな
     いとこの関数はエラーをシグナルする。*note Multiple Terminals::を参
     照のこと。

     STRINGが非‘nil’なら、その各文字はEmacsの上位shellに端末入力として送
     信される。STRING内の文字は上位shellによりエコーされずに、結果だけが
     表示される。

     サスペンドする前に、‘suspend-emacs’はノーマルフック‘suspend-hook’を
     実行する。ユーザーがEmacs再開後に、‘suspend-emacs’はノーマルフック
     ‘suspend-resume-hook’を実行する。*note Hooks::を参照のこと。

     再開後の次回再表示では、変数‘no-redraw-on-reenter’が‘nil’ならスクリ
     ーン全体が再描画される。*note Refresh Screen::を参照のこと。

     以下はこれらのフックの使用例である:

          (add-hook 'suspend-hook
                    (lambda () (or (y-or-n-p "Really suspend? ")
                                   (error "Suspend canceled"))))
          (add-hook 'suspend-resume-hook (lambda () (message "Resumed!")
                                           (sit-for 2)))

     ‘(suspend-emacs "pwd")’を評価すると以下を目にするだろう:

          ---------- Buffer: Minibuffer ----------
          Really suspend? y
          ---------- Buffer: Minibuffer ----------

          ---------- Parent Shell ----------
          bash$ /home/username
          bash$ fg

          ---------- Echo Area ----------
          Resumed!

     Emacsサスペンド後に‘pwd’がエコーされないことに注意。エコーはされな
     いが、shellにより読み取られ実行されている。

 -- Variable: suspend-hook
     この変数は、Emacsがサスペンド前に実行するノーマルフックである。

 -- Variable: suspend-resume-hook
     この変数は、サスペンド後の再開時にEmacsが実行するノーマルフックであ
     る。

 -- Function: suspend-tty &optional tty
     TTYにEmacsが使用する端末デバイスを指定すると、この関数はそのデバイ
     スを放棄して、それを以前の状態にリストアする。そのデバイスを使用し
     ていたフレームは存在を続けるが更新はされず、Emacsはそれらのフレーム
     から入力を読み取らない。TTYには端末オブジェクト、フレーム(そのフレ
     ームの端末の意)、‘nil’(選択されたフレームの端末の意)を指定できる。
     *note Multiple Terminals::を参照のこと。

     TTYがサスペンド済みなら、この関数は何も行わない。

     この関数は、端末オブジェクトを各関数への引数として、フック
     ‘suspend-tty-functions’を実行する。

 -- Function: resume-tty &optional tty
     この関数は、以前にサスペンドされたデバイスTTYを再開する。ここで
     TTYは、‘suspend-tty’に指定できるのと同じである。

     この関数は端末デバイスの再オープンと再初期化を行い、その端末の選択
     されたフレームで端末を再描画する。それから端末ブジェクトを各関数へ
     の引数として、フック‘resume-tty-functions’を実行する。

     同じデバイスが別のEmacs端末で使用済みなら、この関数はエラーをシグナ
     ルする。TTYがサスペンドされていなければ、この関数は何もしない。

 -- Function: controlling-tty-p &optional tty
     この関数は、TTYがそのEmacsセッションの制御端末なら、非‘nil’をリター
     ンする。TTYには端末オブジェクト、フレーム(そのフレームの端末の意)、
     ‘nil’(選択されたフレームの端末の意)を指定できる。

 -- Command: suspend-frame
     このコマンドはフレームを“サスペンド”する。GUIフレームでは
     ‘iconify-frame’を呼び出す(*note Visibility of Frames::を参照)。テキ
     スト端末上のフレームでは、そのフレームが制御端末デバイス上で表示さ
     れていれば‘suspend-emacs’、されていなければ‘suspend-tty’のいずれか
     を呼び出す。


File: elisp,  Node: System Environment,  Next: User Identification,  Prev: Getting Out,  Up: System Interface

38.3 Operating System Environment
=================================

Emacsはさまざまな変数を通じて、オペレーティングシステム環境内の変数への
アクセスを提供します。これらの変数には、システムの名前、ユーザーのUIDな
どが含まれます。

 -- Variable: system-configuration
     この変数は、ユーザーのシステムのハードウェアとソフトウェアにたいす
     るGNUの標準コンフィグレーション名(standard GNU configuration name)を
     保持する。たとえば64ビットGNU/Linuxシステムにたいする典型的な値は
     ‘"x86_64-unknown-linux-gnu"’である。

 -- Variable: system-type
     この変数の値は、Emacs実行中のオペレーティングシステムのタイプを示す
     シンボルである。可能な値は：

     ‘aix’
          IBMのAIX。

     ‘berkeley-unix’
          Berkeley BSDとその変種。

     ‘cygwin’
          MS-Windows上のPosixレイヤーであるCygwin。

     ‘darwin’
          Darwin (Mac OS X)。

     ‘gnu’
          (HURDとMachから構成される)GNUシステム。

     ‘gnu/linux’
          GNU/Linuxシステム — すなわちLinuxカーネルを使用するGNUシステム
          の変種。(これらのシステムは人がしばしば“Linux”と呼ぶシステムだ
          が、実際にはLinuxは単なるカーネルであり、システム全体ではない
          。)

     ‘gnu/kfreebsd’
          FreeBSDカーネルによる(glibcベースの)GNUシステム。

     ‘hpux’
          ヒューレット・パッカードのHPUXオペレーティングシステム。

     ‘irix’
          シリコングラフィックスのIrixシステム。

     ‘ms-dos’
          MicrosoftのDOS。MS-DOSにたいするDJGPPでコンパイルされたEmacsは
          、たとえMS-Windows上で実行されていても‘system-type’が
          ‘ms-dos’にバインドされる。

     ‘usg-unix-v’
          AT&TのUnix System V。

     ‘windows-nt’
          MicrosoftのWindows NT、9X以降。たとえばWindows 7でも
          ‘system-type’の値は常に‘windows-nt’である。

     わたしたちは絶対に必要になるまでは、より細分化するために新たなシン
     ボルを追加したくありません。実際のところ、将来的にはこれらの候補の
     いくつかを取り除きたいと思っています。‘system-type’で許されているよ
     り細分化する必要がある場合には、たとえば正規表現にたいして
     ‘system-configuration’をテストできます。

 -- Function: system-name
     この関数は、実行中のマシン名を文字列としてリターンする。

   シンボル‘system-name’は変数であり、同時に関数である。実際のところ、そ
の関数は変数‘system-name’がカレントで保持する値が何であれ、それをリター
ンする。したがって、Emacsがシステム名について混乱する場合には、変数
‘system-name’をセットできる。この変数は、フレームタイトルを構築するのに
も有用である(*note Frame Titles::を参照)。

 -- User Option: mail-host-address
     この変数が非‘nil’の場合にはこの変数が、emailアドレスを生成するため
     に‘system-name’のかわりに使用される。たとえばこれは、
     ‘user-mail-address’のデフォルト値の構築時に使用される。*note User
     Identification::を参照のこと。(これはEmacsスタートアップ時に行われ
     るので、実際に使用されるのはEmacsのdump時に保存されたものである。
     *note Building Emacs::を参照されたい。)

 -- Command: getenv var &optional frame
     この関数は、環境変数VARの値を文字列としてリターンする。VARは文字列
     であること。その環境内でVARが未定義なら、‘getenv’は‘nil’をリターン
     する。VARがセットされているがnull(訳注: 空文字列)なら、‘""’をリター
     ンする。Emacs内では、環境変数とそれらの値のリストは、変数
     ‘process-environment’内に保持されている。

          (getenv "USER")
               ⇒ "lewis"

     shellコマンド‘printenv’は環境変数すべて、または一部をプリントする:

          bash$ printenv
          PATH=/usr/local/bin:/usr/bin:/bin
          USER=lewis
          TERM=xterm
          SHELL=/bin/bash
          HOME=/home/lewis
          ...

 -- Command: setenv variable &optional value substitute
     このコマンドは、VARIABLEという名前の環境変数の値に、VALUEをセットす
     る。VARIABLEは文字列であること。内部的には、Emacs Lispは任意の文字
     列を扱える。しかし通常VARIABLEはshell識別子として有効、すなわちアル
     ファベットかアンダースコアで始まる、アルファベット、数字またはアン
     ダースコアのシーケンスであること。それ以外の場合、Emacsのサブプロセ
     スがVARIABLEの値にアクセスを試みるとエラーが発生するかもしれない。
     VALUEが省略または‘nil’の場合(またはプレフィクス引数とともにインタラ
     クティブに呼び出された場合)、‘setenv’はその環境からVARIABLEを削除す
     る。それ以外の場合、VARIABLEは文字列であること。

     オプション引数SUBSTITUTEが非‘nil’なら、VALUE内のすべての環境変数を
     展開するために、Emacsは関数‘substitute-env-vars’を呼び出す。

     ‘setenv’は‘process-environment’を変更することにより機能する。この変
     数を‘let’でバインドするのも、合理的プラクティスである。

     ‘setenv’はVARIABLEの新たな値、または環境からVARIABLEが削除されてい
     れば‘nil’をリターンする。

 -- Variable: process-environment
     この変数は、それぞれが1つの環境変数を記す文字列リストである。関数
     ‘getenv’と‘setenv’は、この変数により機能する。

          process-environment
          ⇒ ("PATH=/usr/local/bin:/usr/bin:/bin"
              "USER=lewis"
              "TERM=xterm"
              "SHELL=/bin/bash"
              "HOME=/home/lewis"
              ...)

     ‘process-environment’に同じ環境変数を指定する“重複”した要素が含まれ
     る場合、それらの最初の要素が変数を指定し、他の“重複”は無視される。

 -- Variable: initial-environment
     この変数は、Emacs開始時にその親プロセスからEmacsが継承した環境変数
     のリストを保持する。

 -- Variable: path-separator
     この変数は、(環境変数で見つけた)検索パス内でディレクトリーを区切る
     文字を示す文字列を保持する。値はUnixとGNUシステムでは‘":"’、MSシス
     テムでは‘";"’である。

 -- Function: parse-colon-path path
     この関数は環境変数‘PATH’の値のような検索パス文字列を引数にとり、そ
     れをセパレーターで分割して、ディレクトリー名のリストをリターンする
     。このリスト内では、‘nil’はカレントディレクトリーを意味する。この関
     数の名前からはセパレーターは“コロン”だが、実際に使用するのは
     ‘path-separator’の値である。

          (parse-colon-path ":/foo:/bar")
               ⇒ (nil "/foo/" "/bar/")

 -- Variable: invocation-name
     この変数は、Emacsが呼び出された時のプログラム名を保持する。値は文字
     列で、ディレクトリー名は含まれない。

 -- Variable: invocation-directory
     この変数は、Emacs実行可能形式が呼び出されたディレクトリー名、そのデ
     ィレクトリーが判断できなければ‘nil’をリターンする。

 -- Variable: installation-directory
     非‘nil’なら、それはサブディレクトリー‘lib-src’と‘etc’を探すディレク
     トリーである。インストールされたEmacsなら、通常は‘nil’。Emacsが標準
     のインストール位置にそれらのディレクトリーを見つけられないものの、
     Emacs実行可能形式を含むディレクトリー(たとえば
     ‘invocation-directory’)に何らかの関連があるディレクトリーで見つかる
     ことができたら非‘nil’ならとなる。

 -- Function: load-average &optional use-float
     この関数は現在、1分、5分、15分のロードアベレージ(load averages: 平
     均負荷)をリストでリターンする。このロードアベレージは、そのシステム
     上で実行を試みているプロセス数を示す。

     デフォルトでは、この値はシステムロードアベレージを100倍にした整数だ
     が、USE-FLOATが非‘nil’なら100を乗ずることなくこれらの値は浮動小数点
     数としてリターンされる。

     ロードアベレージ入手が不可能なら、この関数はエラーをシグナルする。
     いくつかのプラットフォームでは、ロードアベレージへのアクセスにカー
     ネル情報を読み取れるよう、通常は推奨されないsetuidかsetgidした
     Emacsのインストールを要する。

     1分のロードアベレージは利用できるが、5分と15分のアレージは利用でき
     ない場合、この関数は利用可能なアベレージを含んだ短縮されたリストを
     リターンする。

          (load-average)
               ⇒ (169 48 36)
          (load-average t)
               ⇒ (1.69 0.48 0.36)

     shellコマンドの‘uptime’は、これと類似した情報をリターンする。

 -- Function: emacs-pid
     この関数は、EmacsプロセスのプロセスIDを整数としてリターンする。

 -- Variable: tty-erase-char
     この変数は、Emacs開始前にそのシステムの端末ドライバーで選択されてい
     た、erase文字を保持する。


File: elisp,  Node: User Identification,  Next: Time of Day,  Prev: System Environment,  Up: System Interface

38.4 User Identification
========================

 -- Variable: init-file-user
     この変数は、Emacsによりどのユーザーのinitが使用されるべきかを — な
     ければ‘nil’をリターンする。‘""’は、ログイン時のオリジナルのユーザー
     をリターンする。この値は‘-q’や‘-u USER’のような、コマンドラインオプ
     ションを反映する。

     カスタマイズ関連のファイルや、他の類の短いユーザープロファイルをロ
     ードするLispパッケージは、それをどこで探すか判断するために、この変
     数にしたがうべきである。これらのLispパッケージは、この変数内で見つ
     かったユーザー名のプロファイルをロードすること。‘init-file-user’が
     ‘nil’なら‘-q’、‘-Q’、または‘-batch’オプションが使用されたことを意味
     し、その場合Lispパッケージはカスタマイズファイルやユーザープロファ
     イルを何もロードするべきではない。

 -- User Option: user-mail-address
     これはEmacs実行中ユーザーの、公称emailアドレスを保持する。Emacsは通
     常、init読み込み後にユーザーがこれをまだセットしていなれば、この変
     数にデフォルト値をセットする。デフォルト値を使用したくなければ、
     initファイル内でこの変数に他の何らかの値をセットすればよい。

 -- Function: user-login-name &optional uid
     この関数は、そのユーザーのログイン名をリターンする。これはいずれか
     がセットされていれば、環境変数‘LOGNAME’か‘USER’を使用する。それ以外
     なら、この値は実UIDではなく実効UIDにもとづく。

     UID(数字)を指定した場合、UIDに対応するユーザー名、そのようなユーザ
     ーが存在しなければ‘nil’が結果となる。

 -- Function: user-real-login-name
     この関数は、Emacsの実UIDに対応するユーザー名をリターンする。これは
     実効UID、および環境変数‘LOGNAME’と‘USER’を無視する。

 -- Function: user-full-name &optional uid
     この関数はログインユーザーの完全名、環境変数‘NAME’がセットされてい
     ればその値をリターンする。

     EmacsプロセスのユーザーIDが既知のユーザーに不一致(かつ与えられた
     ‘NAME’が未セット)なら、結果は‘"unknown"’となる。

     UIDが非‘nil’なら、それは数字(ユーザーID)か文字列(ログイン名)である
     こと。その場合、‘user-full-name’はそのユーザー名かログイン名に対応
     する完全名をリターンする。未定義のユーザー名かログイン名を指定する
     と、‘nil’をリターンする。

   シンボル‘user-login-name’、‘user-real-login-name’、‘user-full-name’は
変数であると同時に関数でもあります。関数の場合は、その名前の変数と同じ値
をリターンします。これらの変数を使えば、それに対応する関数が何をリターン
すべきかを告げることにより、Emacsを“騙す”ことができます。また、フレーム
タイトルの構築においても、これらの関数は有用です(*note Frame Titles::を
参照)。

 -- Function: user-real-uid
     この関数は、そのユーザーの実UIDをリターンする。この値は、(非現実的
     だが)そのUIDがLisp整数の範囲を超える程大きいような場合には、浮動小
     数点数になるかもしれない。

 -- Function: user-uid
     この関数は、そのユーザーの実効UIDをリターンする。値は浮動小数点数か
     もしれない。

 -- Function: group-gid
     この関数は、そのユーザーの実効GIDをリターンする。値は浮動小数点数か
     もしれない。

 -- Function: group-real-gid
     この関数は、そのユーザーの実GIDをリターンする。値は浮動小数点数かも
     しれない。

 -- Function: system-users
     この関数は、そのシステム上のユーザー名をリストする、文字列のリスト
     をリターンする。この情報をEmacsが取得できなければ、
     ‘user-real-login-name’の値のみを含むリストをリターンする。

 -- Function: system-groups
     この関数は、そのシステム上のグループ名をリストする、文字列のリスト
     をリターンする。この情報をEmacsが取得できなければ、リターン値は
     ‘nil’。


File: elisp,  Node: Time of Day,  Next: Time Conversion,  Prev: User Identification,  Up: System Interface

38.5 Time of Day
================

このセクションでは、カレント時刻とタイムゾーンを決定する方法を説明します
。

   これらの関数のほとんどは、整数4つのリスト‘(SEC-HIGH SEC-LOW MICROSEC
PICOSEC)’、整数3つのリスト‘(SEC-HIGH SEC-LOW MICROSEC)’、または整数2つの
リスト‘(SEC-HIGH SEC-LOW)’のいずれかで時刻を表します。整数SEC-HIGHと
SEC-LOWは秒の整数値の高位ビットと低位ビットです。この整数 HIGH * 2**16 +
LOW, は、“epoch”(0:00 January 1, 1970 UTC)から指定された時刻までの秒数で
す。3番目のリスト要素MICROSECが与えられた場合、それはその秒数の開始から
指定された時刻までのマイクロ秒数を与えます(訳注: マイクロは百万分の一 )。
同様に、4番目のリスト要素PICOSECが与えられた場合は、そのマイクロ秒数の開
始から指定された時刻までのピコ秒数を与えます(訳注: ピコは一兆分の一 )。

   ‘current-time’のリターン値は、‘file-attributes’のリターン値のタイムス
タンプのように、4つの整数を使用して時刻を表します(*note Definition of
file-attributes::を参照)。‘current-time-string’の引数TIME-VALUEのように
、関数の引数では2整数、3整数、4整数のリストが指定できます。これらののリ
スト表現から、‘current-time-string’を使用して標準的な可読形式の文字列へ
、または以降のセクションで説明する‘decode-time’と‘format-time-string’を
使用して他形式へ変換できます。

 -- Function: current-time-string &optional time-value
     この関数は、カレントの時刻と日付を可読形式の文字列でリターンする。
     この文字列の先頭部分には曜日、月、日付、時刻がこの順に含まれ、それ
     らが可変長となることはない。これらのフィールドにたいして使用される
     文字数は常に同じなので、それらを切り出すために安心して‘substring’を
     使用できる。年の部分は正確に4桁とは限らず、いつか追加情報が終端に不
     可されるかもしれないので、文字列終端からではなく先頭から文字を数え
     ること。

     引数TIME-VALUEが与えられた場合、それはカレント時刻ではなく,フォーマ
     ットする(整数リスト表現の)時刻を指定する。

          (current-time-string)
               ⇒ "Wed Oct 14 22:21:05 1987"

 -- Function: current-time
     この関数は4つの整数のリスト‘(SEC-HIGH SEC-LOW MICROSEC PICOSEC)’で
     表されたカレント時刻をリターンする。これらの整数うち後部は、低精度
     の時刻をリターンするシステムでは0になる。現在のすべてのマシンでは、
     PICOSECは1000の倍数だが、より高精度のクロックが利用可能になったら変
     更されるかもしれない。

 -- Function: float-time &optional time-value
     この関数はエポックからの経過秒数を、浮動小数点数としてリターンする
     。オプション引数TIME-VALUEが与えられた場合には、カレント時刻ではな
     く(整数リスト表現の)時刻を変換するよう指定する。

     _警告_: 結果は浮動小数点数なので、正確ではないかもしれない。正確な
     タイムスタンプが必要なら、この関数を使用しないこと。

 -- Function: current-time-zone &optional time-value
     この関数は、そのユーザーが居るタイムゾーンを記すリストをリターンす
     る。

     値は‘(OFFSET NAME)’という形式をもつ。ここでOFFSETは、UTCより進んで
     いる秒数(グリニッジより東)を与える整数である。負の値はグリニッジよ
     り西を意味する。2つ目の要素NAMEは、そのタイムゾーンの名前を与える文
     字列。夏時間の開始と終了時に、いずれの要素も変化する。ユーザーが季
     節時間調整を用いていないタイムゾーンを指定した場合には、値は時期を
     通して定数となる。

     この値を計算するのに必要なすべての情報をオペレーティングシステムが
     提供しない場合、このリストの未知の要素は‘nil’になる。

     引数TIME-VALUEが与えられた場合、それはカレント時刻ではなく、かわり
     に分析すべき時刻(整数リスト表現)を指定する。

   カレントのタイムゾーンは、環境変数‘TZ’により判断されます。*note
System Environment::を参照してください。たとえば‘(setenv "TZ" "UTC0")’と
すれば、万国標準時の使用をEmacsに指示できます。その環境に‘TZ’がなければ
、Emacsはプラットフォーム依存のデフォルトタイムゾーンを使用します。


File: elisp,  Node: Time Conversion,  Next: Time Parsing,  Prev: Time of Day,  Up: System Interface

38.6 Time Conversion
====================

以下の関数はtime値(前セクションで説明した2個から4個の整数リスト)を、暦情
報に変換したり、逆変換を行います。

   32ビットオペレーティングシステムの多くは、32ビット情報を含んだtime値
に制限されます。これらのシステムは、通常は1901-12-13 20:45:52 UTCから
2038-01-19 03:14:07 UTCまでの時刻だけを処理します。しかし64ビット、およ
びいくつかの32ビットオペレーティングシステムは、より大きなtime値をもち、
より遠い過去や未来の時刻を表現できます。

   時刻変換関数は、たとえグレゴリオ暦導入前の日付にたいしても、常にグレ
ゴリオ暦を使用します。年はB.C. 1年から年数を数え、伝統的なグレゴリオ年が
行うように0年をスキップしません。たとえば年数−37は、グレゴリオ年のB.C.
38年を表します。

 -- Function: decode-time &optional time
     この関数は、time値を暦情報に変換する。TIMEを指定しなければ、カレン
     ト時刻をデコードする。リターン値は、以下のような9要素のリストである
     :

          (SECONDS MINUTES HOUR DAY MONTH YEAR DOW DST ZONE)

     以下に各要素の意味を示す:

     SECONDS
          0から59までの整数で表した分を過ぎた時分秒の秒。いくつかのオペ
          レーティングシステムでは、閏秒にたいして60となる。
     MINUTES
          0から59までの整数で表した、時を過ぎた時分秒の分。
     HOUR
          0から23までの整数で表した時分秒の時。
     DAY
          1から31までの整数で表した、年月日の日。
     MONTH
          1から12までの整数で表した、年月日の月。
     YEAR
          通常は1900より大きい整数で表した、年月日の年。
     DOW
          0から6までの整数で表した曜日で、0は日曜日を意味する。
     DST
          夏時間が有効なら‘t’、それ以外は‘nil’。
     ZONE
          グリニッジ以東の秒数による、タイムゾーンを示す整数。

     *Common Lispに関する注意:* Common LispではDOWとZONEの意味が異なる。

 -- Function: encode-time seconds minutes hour day month year &optional
          zone
     この関数は‘decode-time’の逆版である。これは7アイテムの暦データを
     time値に変換する。引数の意味は、上述‘decode-time’のテーブルを参照の
     こと。

     100未満の年が特別に扱われることはない。これを1900または2000を超える
     年を意味させたい場合は、‘encode-time’を呼び出す前に自身でこれらを修
     正しなければならない。

     オプション引数ZONEのデフォルトは、カレントのタイムゾーンと夏時間ル
     ールである。指定する場合は(‘current-time-zone’で得られるような)リス
     ト、環境変数‘TZ’の値のような文字列、‘t’は万国標準時、
     (‘decode-time’で得られるような)整数のいずれかを指定できる。指定され
     たゾーンは夏時間による更なる変更を受けずに使用される。

     ‘encode-time’にたいして7個より多い引数を渡した、最初の6つは
     SECONDSからYEAR、最後の引数がZONEとして使用され、その間の引数は無視
     される。これにより、以下のように‘decode-time’がリターンしたリストの
     要素を、‘encode-time’の引数として使用することが可能になる:

          (apply 'encode-time (decode-time ...))

     SECONDS、MINUTES、HOUR、DAY、MONTHの引数に範囲外の値を使用すること
     により、単純な日付計算ができます。たとえばDAYが0なら、それは与えら
     れたMONTHの前月末になります。

     オペレーティングシステムは、可能なtime値の範囲に制限を設けます。範
     囲外の時刻のエンコードを試みると、結果はエラーとなります。たとえば
     あるシステムでは1970年以前では機能せず、別のシステムではより以前の
     1901年以降から機能します。


File: elisp,  Node: Time Parsing,  Next: Processor Run Time,  Prev: Time Conversion,  Up: System Interface

38.7 Parsing and Formatting Times
=================================

以下の関数は、time値と文字列内のテキストの変換と逆変換を行います。time値
は2つから4つの整数のリストです(*note Time of Day::を参照)。

 -- Function: date-to-time string
     この関数はtime文字列STRINGをパースして、それに対応するtime値をリタ
     ーンする。

 -- Function: format-time-string format-string &optional time universal
     この関数はTIME(省略時はカレント時刻)を、FORMAT-STRINGに応じて文字列
     に変換する。引数FORMAT-STRINGには、時刻を置換する‘%’シーケンスを含
     めることができる。以下は‘%’シーケンスは何を意味するかのテーブルであ
     る:

     ‘%a’
          これは曜日の短縮名を意味する。
     ‘%A’
          これは曜日の完全名を意味する。
     ‘%b’
          これは月の短縮名を意味する。
     ‘%B’
          これは月の完全名を意味する。
     ‘%c’
          これは‘%x %X’のシノニムである。
     ‘%C’
          これはlocale固有の意味をもつ。デフォルトlocale(Cという名前の
          locale)では、これは‘%A, %B %e, %Y’と等価である。
     ‘%d’
          これは0パディングされた年月日の日である。
     ‘%D’
          これは‘%m/%d/%y’のシノニムである。
     ‘%e’
          これはブランクでパディングされた年月日の日である。
     ‘%h’
          これは‘%b’のシノニムである。
     ‘%H’
          時分秒の時(00から23)を意味する。
     ‘%I’
          時分秒の時(01から12)を意味する。
     ‘%j’
          これは年内の経過日(001から366)を意味する。
     ‘%k’
          これはブランクでパディングされた時分秒の時(0から23)を意味する
          。
     ‘%l’
          これはブランクでパディングされた時分秒の時(1から12)を意味する
          。
     ‘%m’
          これは年月日の月(01から12)を意味する。
     ‘%M’
          これは時分秒の分(00から59)を意味する。
     ‘%n’
          これは改行を意味する。
     ‘%N’
          これはナノ秒(000000000–999999999)を意味する。うり少ない桁数を
          求める場合、ミリ秒は‘%3N’、マイクロ秒は‘%6N’を使用する。余分な
          桁は丸めずに切り捨てられる。
     ‘%p’
          これは必要に応じて‘AM’か‘PM’を意味する。
     ‘%r’
          これは‘%I:%M:%S %p’のシノニムである。
     ‘%R’
          これは‘%H:%M’のシノニムである。
     ‘%S’
          これは時分秒の秒(00から59)を意味する。
     ‘%t’
          これはタブ文字を意味する。
     ‘%T’
          これは‘%H:%M:%S’のシノニムである。
     ‘%U’
          これは週の開始を日曜日とみなした、年内の週(01から52)である。
     ‘%w’
          これは数字で表した曜日(0から6)で、日曜日が0。
     ‘%W’
          これは週の開始を月曜日とみなした、年内の週(01から52)である。
     ‘%x’
          これはlocale固有の意味をもつ。デフォルトlocale(Cという名前の
          locale)では、これは‘%D’と等価である。
     ‘%X’
          これはlocale固有の意味をもつ。デフォルトlocale(Cという名前の
          locale)では、これは‘%T’と等価である。
     ‘%y’
          これは世紀を含まない年(00から99)を意味する。
     ‘%Y’
          これは世紀を併なう年を意味する。
     ‘%Z’
          これはタイムゾーンの短縮形(たとえば‘EST’)を意味する。
     ‘%z’
          これは数値的オフセットによるタイムゾーン(たとえば‘-0500’)を意
          味する。

     これら‘%’シーケンスのすべてにおいて、フィールド幅とパディングのタイ
     プを指定できる。これは‘printf’でのように機能する。フィールド幅は桁
     数として‘%’シーケンスの中間に記述する。このフィールド幅を‘0’で開始
     すると、それは0によるパディングを意味する。フィールド幅を‘_’で開始
     すれば、それはスペースによるパディングを意味する。

     たとえば‘%S’は、分内で経過した秒数を指定するが、‘%03S’は3箇所の0を
     、‘%_3S’は3箇所にスペースをパディングすることを意味する。ただの
     ‘%3S’は0でパディングを行う。これは‘%S’が通常において2箇所にパディン
     グする方法だからである。

     文字‘E’と‘O’は、‘%’と上記テーブルのアルファベットのいずれかの間に使
     用されたときは修飾子として作用する。‘E’は日付と時刻に、カレント
     localeの“代替”バージョンの使用を指定する。たとえば日本のlocaleでは
     、‘%Ex’では日本の元号にもとづく日付フォーマットを得られるだろう。
     ‘E’は‘%Ec’、‘%EC’、‘%Ex’、‘%EX’、‘%Ey’、‘%EY’の使用が許されている。

     ‘O’は通常の10進の数字(訳注： アラビア数字)ではなく、カレント
     localeの数字の“代替”表現を使用する。これは数字を出力する、ほとんど
     すべてのアルファベットで使用が許されている。

     UNIVERSALが非‘nil’なら、それは時刻を万国標準時で記すことを意味する
     。‘nil’は、Emacsがローカルのタイムゾーンを信頼して使用することを意
     味する(‘current-time-zone’を参照)。

     この関数は、処理のほとんどを行うために、Cライブラリー関数
     ‘strftime’を使用している(*note (libc)Formatting Calendar Time::を参
     照)。その関数とやり取りするために、‘locale-coding-system’(*note
     Locales::を参照)で指定されたコーディングシステムを使用して、引数の
     エンコーディングを最初に行う。‘strftime’が結果文字列をリターンした
     後に、その同じコーディングシステムを使用して、
     ‘format-time-string’はデコードを行う。

 -- Function: seconds-to-time seconds
     この関数は、エポック以降の秒数SECONDSをtime値に変換して、それをリタ
     ーンする。これを逆変換するには‘float-time’を使用する(*note Time of
     Day::を参照)。

 -- Function: format-seconds format-string seconds
     この関数は引数SECONDSを、FORMAT-STRINGに応じた年、日、時、...の文字
     列に変換する。引数FORMAT-STRINGには、その変換を制御する‘%’シーケン
     スを指定することができる。以下は‘%’が何を意味するかのテーブルである
     :

     ‘%y’
     ‘%Y’
          年間365日での年の整数。
     ‘%d’
     ‘%D’
          年月日の日。
     ‘%h’
     ‘%H’
          時分秒の時の整数。
     ‘%m’
     ‘%M’
          時分秒の分の整数。
     ‘%s’
     ‘%S’
          時分秒の秒の整数。
     ‘%z’
          非プリント制御フラグ。これを使用する際には、他の指定はサイズ減
          少順、すなわち年、日、時刻、分、...のように与えなければならな
          い。最初の非0変換に遭遇するまで、‘%z’の左側の結果文字列は生成
          されない。たとえば‘emacs-uptime’(*note emacs-uptime: Processor
          Run Time.を参照)で使用されるデフォルトフォーマットでは、秒数は
          常に生成されるが年、日、時、分はそれらが非0の場合のみ生成され
          るだろう。
     ‘%%’
          リテラルの‘%’を生成する。

     大文字のフォーマットシーケンスは数字に加えて単位を生成するが、小文
     字フォーマットは数字だけを生成する。

     ‘%’に続けてフィールド幅を指定できる。指定したフ幅より短ければ、ブラ
     ンクでパディングされる。この幅の前にオプションでピリオドを指定する
     と、かわりに0パディングを要求する。たとえば‘"%.3Y"’は、‘"004
     years"’を生成するだろう。

     _警告:_ この関数は‘most-positive-fixnum’を超えないSECONDSの値でのみ
     機能する(*note most-positive-fixnum: Integer Basics.を参照)。


File: elisp,  Node: Processor Run Time,  Next: Time Calculations,  Prev: Time Parsing,  Up: System Interface

38.8 Processor Run time
=======================

Emacsは、Emacsプロセスにより使用された経過時間(elapsed time)、プロセッサ
ー時間(processor time)の両方にたいして、それらをリターンする関数とプリミ
ティブをいくつか提供します。

 -- Command: emacs-uptime &optional format
     この関数はEmacsの“uptime” — このEmacsインスタンスが実行してから経過
     した、実世界における稼動時間。この文字列はオプション引数FORMATに応
     じて、‘format-seconds’によりフォーマットされる。利用できるフォーマ
     ット記述子については、*note format-seconds: Time Parsing.を参照のこ
     と。FORMATが‘nil’または省略された場合のデフォルトは‘"%Y, %D, %H,
     %M, %z%S"’。

     インタラクティブに呼び出された場合には、エコーエリアにuptimeをプリ
     ントする。

 -- Function: get-internal-run-time
     この関数はEmacsにより使用されたプロセッサーの実行時間を、
     ‘current-time’の場合と同じフォーマット(*note Time of Day::を参照)で
     ある4つの整数のリスト‘(HIGH LOW MICROSEC PICOSEC)’でリターンする。

     この関数がリターンする値にはEmacsがプロセッサーを使用していない時間
     は含まれないこと、そしてEmacsプロセスが複数のスレッドをもつ場合には
     、すべてのEmacsスレッドにより使用されたプロセッサー時間の合計値がリ
     ターンされることに注意。

     システムがプロセッサー実行時間を判断する方法を提供しない場合、
     ‘get-internal-run-time’は‘current-time’と同じ値をリターンする。

 -- Command: emacs-init-time
     この関数は、Emacs初期化(*note Startup Summary::を参照)にかかった秒
     数を、文字列としてリターンする。インタラクティブに呼び出された場合
     には、それをエコーエリアにプリントする。


File: elisp,  Node: Time Calculations,  Next: Timers,  Prev: Processor Run Time,  Up: System Interface

38.9 Time Calculations
======================

以下の関数は、time値(‘current-time’がリターンする類のリスト)を使用して暦
計算を行います。

 -- Function: time-less-p t1 t2
     これはtime値T1がtime値T2より小なら‘t’をリターンする。

 -- Function: time-subtract t1 t2
     これは2つのtime値の間の差T1 − T2をtime値と同じフォーマットでリター
     ンする。

 -- Function: time-add t1 t2
     これは2つのtime値の和をリターンする。ここで引数のうち1つは時間差で
     はなく、ある時点での時刻を表すべきである。以下に、あるtime値に秒数
     を加算する方法を示す:

          (time-add TIME (seconds-to-time SECONDS))

 -- Function: time-to-days time
     この関数は、A.C. 1年元旦からTIMEまでの間の日数をリターンする。

 -- Function: time-to-day-in-year time
     これは、TIMEに対応する年内の日数をリターンする。

 -- Function: date-leap-year-p year
     この関数は、YEARが閏年なら‘t’をリターンする。


File: elisp,  Node: Timers,  Next: Idle Timers,  Prev: Time Calculations,  Up: System Interface

38.10 Timers for Delayed Execution
==================================

将来の特定時刻や特定の長さのアイドル時間経過後に関数を呼び出すために、
“タイマー(timer)”をセットアップできます。

   Emacsは、Lispプログラム内の任意の時点では、タイマーを実行できません。
サブプロセスからの出力が受け入れ可能なときだけ、Emacsはタイマーを実行で
きます。つまり待機中や、待機することが_可能_な、‘sit-for’や
‘read-event’のような特定のプリミティブ関数内部でのみ、タイマーを実行でき
ます。したがってEmacsがbusyなら、タイマーの実行は遅延するかもしれません
。しかしEmacsがidleなら、実行される時刻は非常に正確になります。

   quitにより、多くのタイマー関数が物事を不整合な状態に放置し得るので、
ターマー関数呼び出し前にEmacsは‘inhibit-quit’に‘t’をバインドします。ほと
んどのタイマー関数は多くの作業を行わないので、これは通常は問題にはなりま
せん。しかし実際には、実行に長時間を要する関数を呼び出すタイマーは問題と
なる恐れがあります。タイマー関数がquitを許容する必要がある場合は、
‘with-local-quit’を使用するべきです(*note Quitting::を参照)。たとえば、
外部プロセスから出力を受け取るためにタイマー関数が
‘accept-process-output’を呼び出す場合、外部プロセスのハング時の‘C-g’を確
実に機能させるために、その呼び出しを‘with-local-quit’内部にラップすべき
です。 For exam；ple, if a timer function calls to receive output from
an external process, that call should be wrapped inside , to ensure that
works if the external process hangs.

   バッファー内容の変更のためにタイマー関数を呼び出すのは、通常は悪いア
イデアです。これを行うときには、そのタイマーによる変更とユーザーのコマン
ドによる変更を分離して、単一のアンドゥエントリーが巨大になるのを防ぐため
に、バッファーの変更前後で、通常は‘undo-boundary’を呼び出すべきです。

   タイマー関数は‘sit-for’のようなEmacsに待機を発生させるような関数
(*note Waiting::を参照)の呼び出しも避けるべきです。その待機中に別のタイ
マー(同じタイマーとう可能性さえある)が実行され得るので、これは予測不可能
な効果を導く恐れがあります。特定時間の経過後に処理される必要があるタイマ
ー関数は、新たなタイマーをスケジュールすることにより、これを行うことがで
きます。

   マッチデータを変更するかもしれない関数を呼び出すタイマー関数は、マッ
チデータの保存とリストアをするべきです。*note Saving Match Data::を参照
してください。

 -- Command: run-at-time time repeat function &rest args
     これは時刻TIMEに、引数ARGSで関数FUNCTIONを呼び出すタイマーをセット
     アップする。REPEATが数値(整数か浮動小数点数)なら、そのタイマーは
     TIME後の各REPEAT秒ごとに再実行されるようスケジュールされる。
     REPEATが‘nil’なら、そのタイマーは1回だけ実行される。

     TIMEには、絶対時刻と相対時刻を指定できる。

     絶対時刻は限定された種々フォーマットの文字列を使用して指定でき、す
     でに経過後の時刻であっても_当日_の時刻とみなされる。認識される形式
     は‘XXXX’、‘X:XX’、or ‘XX:XX’ (military time)、and ‘XXam’、‘XXAM’、
     ‘XXpm’、‘XXPM’、‘XX:XXam’、‘XX:XXAM’、‘XX:XXpm’、‘XX:XXPM’のいずれ
     か。時と分をの部分を区切るのは、コロンのかわりにピリオドも使用でき
     る。

     相対時刻は単位を付加した数字を、文字列として指定する。たとえば:

     ‘1 min’
          現在時刻から1分後を表す。
     ‘1 min 5 sec’
          現在時刻から65秒後を表す。
     ‘1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year’
          現在時刻から丁度103ヵ月123日10862秒後を表す。

     総体time値にたいして、Emacsは月を正確に30日、年を正確に365.25とみな
     す。

     有用なフォーマットのすべてが文字列という訳ではない。TIMEが数字(整数
     か浮動小数点数)なら、それは秒で数えた相対時刻を指定する。
     ‘encode-time’の結果は、TIMEにたいする絶対時刻の指定にも使用できる。

     ほとんどの場合、_最初_に呼び出されている際はREPEATの効果はなく、
     TIME単独で時刻を指定する。例外が1つありTIMEが‘t’なら、エポックから
     REPEATの倍数秒ごとに毎回そのタイマーが実行される。これは
     ‘display-time’のような関数にとって有用である。

     関数‘run-at-time’は、スケジュール済みの将来の特定アクションを識別す
     るtime値をリターンする。‘cancel-timer’(以下参照)の呼び出しに、この
     値を使用できる。

   タイマーのリピートは名目上REPEAT秒ごとに毎回実行されますが、すべての
タイマー呼び出しは遅延する可能性があることを忘れないでください。1つの繰
り返しの遅延が、次の繰り返しに影響を与えることはありません。たとえば3回
分のスケジュール済みのタイマー繰り返しをカバーするほど計算等により
Emacsがbusyでも、それらは待機を開始して、連続してそのタイマー関数が3回呼
び出されることになります(それらの間の別のタイマー呼び出しは想定していな
い)。最後の呼び出しからN秒より短くならずにタイマーを再実行したい場合には
、REPEAT引数を使用しないでください。タイマー関数は、かわりにそのタイマー
を明示的に再スケジュールするべきです。

 -- User Option: timer-max-repeats
     この変数の値は、以前スケジュールされていた呼び出しが止むを得ずに遅
     延された際に、タイマー関数がリピートによりまとめて呼び出される最大
     の回数を指定する

 -- Macro: with-timeout (seconds timeout-forms...) body...
     BODYを実行するが、SECONDS秒後に実行を諦める。タイムアップ前にBODYが
     終了したら、‘with-timeout’はBODY内の最後のフォームの値をリターンす
     る。ただし、タイムアウトによりBODYの実行が打ち切られた場合には、
     ‘with-timeout’はTIMEOUT-FORMSをすべて実行して、それの最後のフォーム
     の値をリターンする。

     このマクロは、SECONDS秒後に実行するタイマーをセットすることにより機
     能する。その時刻前にBODYが終了したらそのタイマーを削除し、タイマー
     が実際に実行されたらBODYの実行を終了して、それからTIMEOUT-FORMSを実
     行する。

     Lispプログラムでは、待機を行えるプリミティブをプログラムが呼び出し
     ている時のみタイマーを実行できるので、BODYが計算途中の間は
     ‘with-timeout’は実行を停止できない — そのプログラムがこれらのプリミ
     ティブのいずれかを呼び出したときのみ停止できる。そのため、BODYで長
     時間の計算を行う場合ではなく、入力を待機する場合だけ
     ‘with-timeout’を使用すること。

   あまりに長時間応答を待機するのを避けるために、関数
‘y-or-n-p-with-timeout’はタイマーを使用するシンプルな方法を提供します。
*note Yes-or-No Queries::を参照してください。

 -- Function: cancel-timer timer
     これはTIMERにたいして要求されたアクションをキャンセルする。ここで
     TIMERはタイマーであること。これは通常は以前に‘run-at-time’か
     ‘run-with-idle-timer’がリターンしたものである。この関数は、これらの
     関数の1つの呼び出しの効果をキャンセルする。指定した時刻が到来しても
     、特別ni何も起きないだろう。


File: elisp,  Node: Idle Timers,  Next: Terminal Input,  Prev: Timers,  Up: System Interface

38.11 Idle Timers
=================

以下は、Emacsの特定の期間アイドル時に実行するタイマーをセットアップする
方法です。それらをセットアップする方法とは別とすると、アイドルタイマーは
通常のタイマーと同様に機能します。

 -- Command: run-with-idle-timer secs repeat function &rest args
     Emacsの次回SECS秒間アイドル時に実行するタイマーをセットアップする。
     SECSの値には数値、または‘current-idle-time’がリターンするタイプの値
     を指定できる。

     REPEATが‘nil’なら、充分長い間Emacsがアイドルになった初回1会だけ、そ
     のタイマーは実行される。大抵はREPEATが非‘nil’の場合で、そのときは
     EmacsがSECS秒間アイドルになったときに、_毎回_そのタイマーが実行され
     る。

     関数‘run-with-idle-timer’は、‘cancel-timer’呼び出し時に使用できる、
     タイマー値をリターンする。

   ユーザー入力の待機時にEmacsは“アイドル(idle)”となり、ユーザーが何らか
の入力を与えるまでアイドルのままとなります。あるタイマーを5秒間のアイド
ルにセットすると、Emacsが最初に約5秒間アイドルになったとき、そのタイマー
が実行されます。たとえREPEATが非‘nil’でも、Emacsがアイドルであり続けるか
ぎり、そのタイマーが再実行されることはありません。アイドル期間は増加を続
け、再び5秒に現象することはないからです。

   アイドル時に、Emacsはガーベージコレクションや自動保存、サブプロセスか
らのデータ処理など、さまざまなことを行うことができます。しかし、これらの
幕間劇がアイドルのクロックを0にリセットすることはないので、アイドルタイ
マーと干渉することはありません。600秒にセットされたアイドルタイマーは、
たとえその10分間にサブプロセスの出力が何回到達しても、たとえガーベージコ
レクションや自動保存が行われても、ユーザーコマンドが最後に終了してから
10分経過後に実行されるでしょう。

   ユーザーが入力を与えると、その入力の実行の間、Emacsは非アイドルになり
ます。それから再びアイドルとなり、繰り返すようにセットアップされたすべて
のアイドルタイマーは、1つずつ異なる時刻に実行されるでしょう。

   実行ごとに特定の量を処理するループを含んだり、‘(input-pending-p)’が非
‘nil’のときにexitするアイドルタイマー関数を記述しないでください。このア
プローチはとても自然に見えますが、2つの問題があります:

   • すべてのプロセスの出力をブロックする(Emacsは待機時のみプロセス出力
     を受け入れるため)。

   • その時刻の間に実行されるべきすべてのアイドルタイマーをブロックする
     。

同様に、SECS引数がカレントのアイドル期間以下となるような、別のアイドルタ
イマー(同じアイドルタイマーも含む)をセットアップするアイドルタイマー関数
を記述しないでください。そのようなタイマーはほとんど即座に実行され、
Emacsが次回アイドルになるのを待機するかわりに、再現なく継続して実行され
るでしょう。以下で説明するように、カレントのアイドル期間を適切に増加させ
て再スケジュールするのが、正しいアプローチです。

 -- Function: current-idle-time
     Emacsがアイドルなら、この関数は‘current-time’で使用するのと同じ4つ
     の整数リストのフォーマット‘(SEC-HIGH SEC-LOW MICROSEC PICOSEC)’で、
     Emacsがアイドルとなった期間をリターンする(*note Time of Day::を参照
     )。

     Emacsがアイドルでなければ、‘current-idle-time’は‘nil’をリターンする
     。これはEmacsがアイドルかどうかテストする手軽な方法である。

   ‘current-idle-time’の主な用途は、アイドルタイマー関数が少し“休憩”した
いときです。そのアイドルタイマー関数は、さらに数秒アイドル後に、同じ関数
を再呼び出しするために、別のタイマーをセットアップできます。以下はその例
です:

     (defvar my-resume-timer nil
       "Timer for `my-timer-function' to reschedule itself, or nil.")

     (defun my-timer-function ()
       ;; ‘my-resume-timer’アクティブの間にユーザーがコマンドをタイプ
       ;; したら、次回この関数はそれのメインアイドルタイマーから呼び出され
       ;; ‘my-resume-timer’を非アクティブにする
       (when my-resume-timer
         (cancel-timer my-resume-timer))
       ...DO THE WORK FOR A WHILE...
       (when TAKING-A-BREAK
         (setq my-resume-timer
               (run-with-idle-timer
                 ;; カレント値より大きいアイドル
                 ;; 期間BREAK-LENGTHを計算
                 (time-add (current-idle-time)
                           (seconds-to-time BREAK-LENGTH))
                 nil
                 'my-timer-function))))


File: elisp,  Node: Terminal Input,  Next: Terminal Output,  Prev: Idle Timers,  Up: System Interface

38.12 Terminal Input
====================

このセクションでは、端末入力の記録や操作のための関数と変数を説明します。
関連する関数につうては、*note Display::を参照してください。

* Menu:

* Input Modes::              入力の処理方法にたいするオプション。
* Recording Input::          直近またはすべての入力イベントのヒストリーの保存。


File: elisp,  Node: Input Modes,  Next: Recording Input,  Up: Terminal Input

38.12.1 Input Modes
-------------------

 -- Function: set-input-mode interrupt flow meta &optional quit-char
     この関数は、キーボード入力の読み取りにたいして、モードをセットする
     。INTERRUPTが非‘nil’なら、Emacsは入力割り込み、‘nil’ならCBREAKモー
     ドを使用する。デフォルトのセッティングはシステムに依存する。いくつ
     かのシステムでは、指定に関わらずに常にCBREAKモードを使用する。

     EmacsがXと直接通信する際にはこの引数を無視して、それがEmacsの知る通
     信手段であれば割り込みを使用する。

     FLOWが非‘nil’なら、Emacsは端末への出力にたいしてXON/XOFFフロー制御
     (‘C-q’と‘C-s’)を使用する。これはCBREAK以外では効果がない。

     引数METAは、127より上の文字コード入力にたいするサポートを制御する。
     METAが‘t’なら、Emacsは8番目のビットがセットされた文字を、メタ文字に
     変換する。METAが‘nil’なら、Emacsは8番目のビットを無視する。これは端
     末がそのビットをパリティビットとして使用する場合に必要となる。
     METAが‘t’と‘nil’のいずれでもなければ、Emacsは入力の8ビットすべてを
     変更せずに使用する。これは8ビット文字セットを使用する端末にたいして
     適している。

     QUIT-CHARが非‘nil’なら、それはquitに使用する文字を指定する。この文
     字は、通常は‘C-g’である。*note Quitting::を参照のこと。

   ‘current-input-mode’関数は、Emacsがカレントで使用する入力モードのセッ
ティングをリターンします。

 -- Function: current-input-mode
     この関数は、キーボード入力読み取りにたいする、カレントのモードをリ
     ターンする。これは、‘set-input-mode’の引数に対応する、‘(INTERRUPT
     FLOW META QUIT)’という形式のリストをリターンする。
     INTERRUPT
          Emacsが割り込み駆動入力を使用時には非‘nil’。‘nil’ならEmacsは
          CBREAKモードを使用している。
     FLOW
          Emacsが端末出力にXON/XOFFフロー制御(‘C-q’と‘C-s’)を使用してい
          れば非‘nil’。この値はINTERRUPTが‘nil’のときのみ意味がある。
     META
          Emacsが入力文字の8番目のビットをメタ文字として扱う場合には
          ‘t’。‘nil’はEmacsがすべての入力文字の8ビット目をクリアーするこ
          とを意味する。その他の値は、Emacsが8ビットすべてを基本的な文字
          コードとして使用することを意味する。
     QUIT
          カレントでEmacsがquitに使用する文字で、通常は‘C-g’。


File: elisp,  Node: Recording Input,  Prev: Input Modes,  Up: Terminal Input

38.12.2 Recording Input
-----------------------

 -- Function: recent-keys
     この関数は、キーボードかマウスからの最後の入力イベント300個を含んだ
     ベクターをリターンする。その入力イベントがキーシーケンスに含まれる
     か否かに関わらず、すべての入力イベントが含まれる。つまり、キーボー
     ドマクロにより生成されたイベントを含まない、最後の入力イベント300個
     を常に入手することになる。(キーボードマクロは、デバッグにとってより
     興味深いとはいえないので除外されている。そのマクロを呼び出したイベ
     ントを確認するだけで充分であるべきだ。)

     ‘clear-this-command-keys’(*note Command Loop Info::を参照)の呼び出
     すと、その直後この関数は空のベクターをリターンする。

 -- Command: open-dribble-file filename
     この関数は、FILENAMEという名前の“dribbleファイル(dribble file)”をオ
     ープンする。dribbleファイルがオープンされたとき、キーボードとマウス
     (ただしキーボードマクロ由来は除く)からのそれぞれの入力イベントは、
     そのファイルに書き込まれる。非文字イベントは、‘<...>’で囲まれたプリ
     ント表現で表される。(パスワードのような)機密情報は、dribbleファイル
     への記録を終了することに注意すること。

     引数‘nil’でこの関数を呼び出すことにより、‘nil’ファイルはクローズさ
     れる。

   *note Terminal Output::の‘open-termscript’を参照のこと。


File: elisp,  Node: Terminal Output,  Next: Sound Output,  Prev: Terminal Input,  Up: System Interface

38.13 Terminal Output
=====================

端末出力関数は出力をテキスト端末に送信したり、その端末に送信した出力を追
跡します。変数‘baud-rate’は、Emacsが端末の出力スピードをどのように考慮す
べきかを指示します。

 -- User Option: baud-rate
     この変数は、その端末のEmacsの認識する、その端末の出力スピードです。
     この変数をセットしても、実際のデータ転送スピードは変化しないが、こ
     の値はパディングのような計算に使用される。

     これはテキスト端末でスクリーンの一部をスクロールしたり再描画すべき
     かどうかについての判定にも影響する。グラフィカルな端末での対応する
     機能については、*note Forcing Redisplay::を参照のこと。

     この値はボー(baud)で数えられる。

   ネットワークを介して実行していて、そのネットワークの異なる部分が違う
ボーレートで機能している場合、Emacsがリターンする値はユーザーのローカル
端末で使用される値と異なるかもしれません。いくつかのネットワークプロトコ
ルは、ローカル端末のスピードでリモートマシンと対話するので、Emacsや他の
プログラムは正しい値を得ることができますが、相手側はそうではありません。
Emacsが誤った値をもつ場合には、最適よりも劣る判定をもたらします。この問
題を訂正するためには、‘baud-rate’をセットします。

 -- Function: send-string-to-terminal string &optional terminal
     この関数は、STRINGを変更せずにTERMINALへ送信する。STRING内のコント
     ロール文字は、端末依存の効果をもつ。この関数は、テキスト端末だけを
     操作する。TERMINALには端末オブジェクト、フレーム、または‘nil’を指定
     でき、これは選択されたフレームの端末を意味する。batchモードでは、
     TERMINALが‘nil’なら、STRINGは‘stdout’に送信される。

     この関数の1つの用途は、ダウンロード可能なファンクションキー定義をも
     つ端末上で、ファンクションキーを定義することである。たとえば、以下
     は(特定の端末で)ファンクションキー4を、4文字前方へ移動(そのコンピュ
     ーターヘ文字‘C-u C-f’を送信)するよう定義するには:

          (send-string-to-terminal "\eF4\^U\^F")
               ⇒ nil

 -- Command: open-termscript filename
     この関数は、Emacsが端末へ送信したすべての文字を記録する、
     “termscriptファイル(termscript file)”をオープンする。リターン値は
     ‘nil’。termscriptファイルはEmacsのスクリーン文字化け問題、不正な
     Termcapエントリーや、実際のEmacsバグより頻繁に発生する、望ましくな
     い端末オプションのセッティングの調査に有用である。どの文字が実際に
     出力されるか確信できれば、それらの文字が使用中のTermcap仕様に対応す
     るかどうか、確実に判断できる。

          (open-termscript "../junk/termscript")
               ⇒ nil

     引数‘nil’でこの関数を呼び出すことにより、termscriptファイルはクロー
     ズされる。

     *note Recording Input::の‘open-dribble-file’も参照のこと。


File: elisp,  Node: Sound Output,  Next: X11 Keysyms,  Prev: Terminal Output,  Up: System Interface

38.14 Sound Output
==================

Emacsを使用してサウンドを再生するためには、関数‘play-sound’を使用します
。特定のシステムだけがサポートされています。実際に処理を行うことができな
いシステムで‘play-sound’を呼び出すと、エラーが発生します。

   サウンドはRIFF-WAVEフォーマット(‘.wav’)か、Sun Audioフォーマット
(‘.au’)で格納されていなければなりません。

 -- Function: play-sound sound
     この関数は、指定されたサウンドを再生する。引数SOUNDは、‘(sound
     PROPERTIES...)’という形式をもつ。ここでPROPERTIESはキーワード(特定
     のシンボルが特別に認識される)とそれに対応する値で交互に構成されてい
     る。

     以下に、現在のところSOUND内で意味をもつキーワードと、それらの意味を
     テーブルに記した:

     ‘:file FILE’
          これは、再生するサウンドを含んだファイルを指定する。絶対ファイ
          ル名でなければ、ディレクトリー‘data-directory’にたいして展開さ
          れる。

     ‘:data DATA’
          これは、ファイルを参照する必要がないサウンドの再生を指定する。
          値DATAは、サウンドファイルと同じバイトを含む文字列であること。
          わたしたちはユニバイト文字列の使用を推奨する。

     ‘:volume VOLUME’
          これはサウンド再生での音の大きさを指定する。これは0から1までの
          数値であること。どんな値であれ、以前に指定されたボリュームがデ
          フォルトとして使用される。

     ‘:device DEVICE’
          これはサウンドを再生するシステムデバイスを、文字列で指定する。
          デフォルトのデバイスはシステム依存である。

     実際にサウンドを再生する前に、‘play-sound’はリスト
     ‘play-sound-functions’内の関数を呼び出す。関数はそれぞれ1つの引数
     SOUNDで呼び出される。

 -- Command: play-sound-file file &optional volume device
     この関数は、オプションでVOLUMEとDEVICEを指定し、サウンドFILEを再生
     する、代替インターフェイスである。

 -- Variable: play-sound-functions
     リストの関数は、サウンド再生前に呼び出される。関数はそれぞれ、その
     サウンドを記述するプロパティリストを単一の引数として呼び出される。


File: elisp,  Node: X11 Keysyms,  Next: Batch Mode,  Prev: Sound Output,  Up: System Interface

38.15 Operating on X11 Keysyms
==============================

システム固有のX11 keysym(key symbol: キーシンボル)を定義するには、変数
‘system-key-alist’をセットします。

 -- Variable: system-key-alist
     この変数の値は、システム固有のkeysymそれぞれにたいして1つの要素をも
     つようなalistであること。要素はそれぞれ‘(CODE . SYMBOL)’という形式
     をもつ。ここでCODEは数字のkeysymコード(“ベンダー固有”の −2**28), の
     ビットは含まない)、SYMBOLはそのファンクションキーの名前である。

     たとえば‘(168 . mute-acute)’は、数字コード −2**28 + 168のシステム固
     有キーを定義する(HP Xサーバーで使用される)。

     このalistから、他のXサーバーのkeysymを除外することは重要ではない。
     実際に使用中のXサーバーが使用するkeysymが、これらと競合しないかぎり
     無害である.

     この変数は常にカレント端末にたいしてローカルであり、バッファーロー
     カルにできない。*note Multiple Terminals::を参照のこと。

   以下の変数をセットすれば、Emacsが修飾キーMeta、Alt、Hyper、Superにた
いして何のkeysymを使用するべきか指定できます。

 -- Variable: x-alt-keysym
 -- Variable: x-meta-keysym
 -- Variable: x-hyper-keysym
 -- Variable: x-super-keysym
     keysymの名前はそれぞれ修飾子Alt、Meta、Hyper、Superを意味する名前で
     あること。たとえば、以下はMeta修飾キーとAlt修飾キーを交換する方法で
     ある:
          (setq x-alt-keysym 'meta)
          (setq x-meta-keysym 'alt)


File: elisp,  Node: Batch Mode,  Next: Session Management,  Prev: X11 Keysyms,  Up: System Interface

38.16 Batch Mode
================

コマンドラインオプション‘-batch’で、Emacsを非対話的に実行できます。この
モードでは、Emacsは端末からコマンドを読み取りません。また終端モード
(terminal modes)を変更せず、消去可能なスクリーンへの出力も待ち受けません
。これは、Lispプログラムの実行を指示して、終了したらEmacsが終了するとい
うアイデアです。これを行うには‘-l FILE’によりFILEという名前のライブラリ
ーをロード、‘-f FUNCTION’により引数なしでFUNCTIONを呼び出す、または
‘--eval FORM’で実行するプログラムを指定できます。

   通常はエコーエリアに出力したり、ストリームとして‘t’を指定する
‘message’や‘prin1’等を使用したLispプログラムの出力は、batchモードでは
Emacsの標準エラー出力へと送られます。同様に、通常はミニバッファーから読
み取られる入力は、標準入力から読み取られます。つまり、Emacsは非インタラ
クティブなアプリケーションプログラムのように振る舞います。(コマンドのエ
コーのように、通常Emacsが生成するエコーエリアへの出力はすべて抑制される
。)

 -- Variable: noninteractive
     Emacsがbatchモードで実行中なら、この変数は非‘nil’。


File: elisp,  Node: Session Management,  Next: Desktop Notifications,  Prev: Batch Mode,  Up: System Interface

38.17 Session Management
========================

Emacsはアプリケーションのサスペンドとリスタートに使用される、Xセッション
管理プロトコル(X Session Management Protocol)をサポートしています。Xウィ
ンドウシステムでは、“セッションマネージャー(session manager)”と呼ばれる
プログラムが、実行中アプリケーション追跡の責を負います。Xサーバーのシャ
ットダウン時、セッションマネージャーはアプリケーションに状態を保存するか
尋ね、それらが応答するまでシャットダウンを遅延します。アプリケーションが
そのシャットダウンをキャンセルすることもできます。

   セッションマネージャーがサスペンドされたセッションをリスタートする際
には、これらのアプリケーションにたいして保存された状態をリロードするよう
、個別に指示します。これはリストアする保存済みセッションが何かを指定する
、特別なコマンドラインオプションを指定することにより行われます。これは、
Emacsでは‘--smid SESSION’という引数です。

 -- Variable: emacs-save-session-functions
     Emacsは、‘emacs-save-session-functions’と呼ばれるフックを介して、状
     態の保存をサポートする。セッションマネージャーがウィンドウシステム
     のシャットダウンを告げた際に、Emacsはこのフックを実行する。これらの
     関数は、カレントバッファーを一時バッファーにセットされて、引数なし
     で呼び出されるそれぞれの関数は、このバッファーにLispコードを追加す
     るために‘insert’を使用できる。最後にEmacsは、“セッションファイル
     (session file)”と呼ばれるファイル内にそのバッファーを保存する。

     その後セッションマネージャーがEmacsを再開する際、Emacsはセッション
     ファイルを自動的にロードする(*note Loading::を参照)。これはスタート
     アップ中に呼び出される、‘emacs-session-restore’という名前の関数によ
     り処理される。*note Startup Summary::を参照のこと。

     ‘emacs-save-session-functions’内の関数が非‘nil’をリターンすると、
     Emacsはセッションマネージャーにシャットダウンのキャンセルを要求しま
     す。

   以下は、セッションマネージャによりEmacsがリストアされる際に、単に
‘*scratch*’にテキストを挿入する例です。

     (add-hook 'emacs-save-session-functions 'save-yourself-test)

     (defun save-yourself-test ()
       (insert "(save-current-buffer
       (switch-to-buffer \"*scratch*\")
       (insert \"I am restored\"))")
       nil)


File: elisp,  Node: Desktop Notifications,  Next: File Notifications,  Prev: Session Management,  Up: System Interface

38.18 Desktop Notifications
===========================

Emacsはfreedesktop.orgのDesktop Notifications Specificationをサポートす
るシステムでは、“通知(notifications)”を送ることができます。この機能を使
用するには、EmacsがD-Busサポート付きでコンパイルされていて、
‘notifications’ライブラリーがロードされていなければなりません。*note
D-Bus: (dbus)Top.を参照してください。

 -- Function: notifications-notify &rest params
     この関数は、引数PARAMSで指定された構成したパラメーターにより、
     D-Busを通じてデスクトップに通知を送信する。これらの引数は、交互にな
     ったキーワードと値のペアーで構成されていること。以下はサポートされ
     ているキーワードと値である:

     ‘:bus BUS’
          D-Busのバス。この引数は、‘:session’以外のバスを使用する場合の
          み必要となる。

     ‘:title TITLE’
          通知のタイトル。

     ‘:body TEXT’
          通知ボディのテキスト。通知サーバーの実装に依存して‘"<b>bold
          text</b>"’のようなHTMLマークアップ、ハイパーリンク、イメージを
          テキストに含むことができる。HTML特殊文字は‘"Contact
          &lt;postmaster@localhost&gt;!"’のように、エンコードしなければ
          ならない。

     ‘:app-name NAME’
          その通知を送信するアプリケーション名。デフォルトは
          ‘notifications-application-name’。

     ‘:replaces-id ID’
          この通知が置換する通知のID。IDは、‘notifications-notify’の以前
          の呼び出し結果でなければならない。

     ‘:app-icon ICON-FILE’
          通知アイコンのファイル名。‘nil’ならアイコンは表示されない。デ
          フォルトは‘notifications-application-icon’。

     ‘:actions (KEY TITLE KEY TITLE ...)’
          適用されるアクションのリスト。KEYとTITLEはどちらも文字列。(通
          常は通知クリックで呼び出される)デフォルトのアクションは、
          ‘"default"’という名前であること。実装がそれを表示しないように
          するには自由だが、titleは何でもよい。

     ‘:timeout TIMEOUT’
          timeoutは、通知が表示されてからその通知が自動的にクローズされ
          るまでの、ミリ秒での時間。−1なら、その通知の有効期限は通知サー
          バーのセッティングに依存し、通知のタイプにより異なるかもしれな
          い。0なら、その通知は失効しない。デフォルト値は−1。

     ‘:urgency URGENCY’
          緊急レベル。‘low’、‘normal’、‘critical’のいずれか。

     ‘:action-items’
          このキーワードが与えられると、そのアクションのTITLE文字列はア
          イコン名として解釈される。

     ‘:category CATEGORY’
          通知の種類で、文字列。標準のカテゴリーのリストは、Desktop
          Notifications Specification
          (http://developer.gnome.org/notification-spec/#categories)を参
          照されたい。

     ‘:desktop-entry FILENAME’
          これは‘"emacs"’のように、そのプログラムを呼び出すデスクトップ
          ファイル名の名前を指定する。

     ‘:image-data (WIDTH HEIGHT ROWSTRIDE HAS-ALPHA BITS CHANNELS DATA)’
          これはそれぞれwidth、height、rowstride、およびalpha channel、
          bits per sample、channels、image dataの有無を記述するrawデータ
          のイメージフォーマット。

     ‘:image-path PATH’
          これはURI(現在サポートされているのはURIスキーマは‘file://’のみ
          )、または‘$XDG_DATA_DIRS/icons’にあるfreedesktop.org準拠のアイ
          コンテーマ名のいずれかを表される。

     ‘:sound-file FILENAME’
          通知ポップアップ時に再生するサウンドファイルのパス。

     ‘:sound-name NAME’
          通知ポップアップ時に再生する、‘$XDG_DATA_DIRS/sounds’にある
          freedesktop.orgサウンド命名仕様準拠の、テーマに対応した名前付
          きサウンド。アイコン名と同様、サウンドにたいしてのみ。例として
          は‘"message-new-instant"’。

     ‘:suppress-sound’
          それが可能なら、サーバーにすべてのサウンドの再生を抑制させる。

     ‘:resident’
          セットした場合、アクション呼び出し時にサーバーはその通知を自動
          的に削除しない。ユーザーか送信者により明示的に削除されるまで、
          その通知はサーバー内に常駐し続ける。恐らくこのヒントは、そのサ
          ーバーが‘:persistence’能力をもつときのみ有用。

     ‘:transient’
          セットした場合、サーバーはその通知を過渡的なものとして扱い、も
          しそれが永続的であるべきなら、そのサーバーのpersistence能力を
          バイパスする。

     ‘:x POSITION’
     ‘:y POSITION’
          その通知がポイントすべき、スクリーン上のXとYの座標を指定する。
          これらの引数は併せて使用しなければならない。

     ‘:on-action FUNCTION’
          アクション呼び出し時に呼び出す関数。通知IDとアクションのKEYは
          、引数としてその関数に渡される。

     ‘:on-close FUNCTION’
          タイムアウトかユーザーにより通知がクローズされたときに呼び出す
          関数。通知IDとクローズ理由REASONは、引数としてその関数に渡され
          る。:

             • 通知が失効した場合は‘expired’。
             • ユーザーが通知を却下したら‘dismissed’。
             • notifications-close-notification呼び出しにより、 ‘通知が
               クローズされたらclose-notification。’
             • 通知サーバーが理由を提供しなかったら‘undefined’。

     通知サーバーがどのパラメーターを受け入れるかのチェックは、
     ‘notifications-get-capabilities’を通じて行うことができる。

     この関数は、整数の通知idをリターンする。このidは
     ‘notifications-close-notification’や、別の‘notifications-notify’呼
     び出しの‘:replaces-id’引数で、通知アイテムの操作に使用できる。たと
     えば:

          (defun my-on-action-function (id key)
            (message "Message %d, key \"%s\" pressed" id key))
               ⇒ my-on-action-function

          (defun my-on-close-function (id reason)
            (message "Message %d, closed due to \"%s\"" id reason))
               ⇒ my-on-close-function

          (notifications-notify
           :title "Title"
           :body "This is <b>important</b>."
           :actions '("Confirm" "I agree" "Refuse" "I disagree")
           :on-action 'my-on-action-function
           :on-close 'my-on-close-function)
               ⇒ 22

          A message window opens on the desktop.  Press "I agree"
               ⇒ Message 22, key "Confirm" pressed
                  Message 22, closed due to "dismissed"

 -- Function: notifications-close-notification id &optional bus
     この関数は、識別子IDの通知をクローズする。BUSはD-Bus接続を表す文字
     列で、デフォルトは‘:session’。

 -- Function: notifications-get-capabilities &optional bus
     通知サーバーの能力を、シンボルのリストでリターンする。BUSはD-Bus接
     続を表す文字列で、デフォルトは‘:session’。期待され得る能力は以下の
     とおり:

     ‘:actions’
          そのサーバーはユーザーにたいする指定されたアクションを提供する
          。

     ‘:body’
          bodyのテキストをサポートする。

     ‘:body-hyperlinks’
          サーバーは通知内のハイパーリンクをサポートする。

     ‘:body-images’
          サーバーは通知内のイメージをサポートする。

     ‘:body-markup’
          サーバーは通知内のマークアップをサポートする。

     ‘:icon-multi’
          サーバーは与えられたイメージ配列内のすべてのフレームのアニメー
          ションを描画できる。

     ‘:icon-static’
          与えられたイメージ配列内の、正確に1フレームの表示をサポートす
          る。この値は、‘:icon-multi’と相互に排他である。

     ‘:persistence’
          サーバーは通知の永続性をサポートする。

     ‘:sound’
          サーバーは通知のサウンドをサポートする。

     これらに加えて、ベンダー固有の能力は‘:x-gnome-foo-cap’のように、
     ‘:x-vendor’で始まる。

 -- Function: notifications-get-server-information &optional bus
     通知サーバーの情報を、文字列のリストでリターンする。BUSはD-Bus接続
     を表す文字列で、デフォルトは‘:session’。リターンされるリストは
     ‘(NAME VENDOR VERSION SPEC-VERSION)’。

     NAME
          そのサーバーのプロダクト名。

     VENDOR
          ベンダー名。たとえば‘"KDE"’や‘"GNOME"’。

     VERSION
          サーバーのバージョン番号。

     SPEC-VERSION
          サーバーが準拠する仕様のバージョン。

     SPEC_VERSIONが‘nil’なら、サーバーは‘"1.0"’以前の仕様をサポートする
     。


File: elisp,  Node: File Notifications,  Next: Dynamic Libraries,  Prev: Desktop Notifications,  Up: System Interface

38.19 Notifications on File Changes
===================================

いくつかのオペレーティングシステムは、ファイル変更にたいする、ファイルシ
ステムの監視をサポートします。正しく設定されている場合には、Emacsは
‘gfilenotify’、‘inotify’、‘w32notify’のようなライブラリーを静的にリンク
します。これらのライブラリーにより、ローカルマシン上でのファイルシステム
の監視が有効になります。

   リモートマシン上のファイルシステムの監視も可能です。*note Remote
Files: (emacs)Remote Files.を参照してください。これはEmacsにリンク済みの
ライブラリーの、いずれか1つに依存する訳ではありません。

   通知されたファイル変更によりこれらすべてのライブラリーは異なるイベン
トを発行するので、Emacsは一意な参照を提供するライブラリー‘filenotify’を
提供しています。

 -- Function: file-notify-add-watch file flags callback
     FILEに関するファイルシステムイベントの監視を追加する。これは、
     FILEに関するファイルシステムイベントがEmacsに報告されるように取り計
     らう。

     リターン値は、追加された監視のディスクリプター(descriptor)である。
     これのタイプは背景にあるライブラリーに依存し、以下の例に示すとおり
     、整数とみなすことはできない。これの比較には、‘equal’を使用すること
     。

     何らかの理由により、FILEが監視不可能なら、この関数はエラー
     ‘file-notify-error’をシグナルする。

     マウントされたファイルシステムでファイル変更を監視できないことがあ
     る。これはこの関数により検出されず、非‘nil’のリターン値がFILEの変更
     の通知を保証するものではない。

     FLAGSは、何を監視するかセットするための、コンディションのリストであ
     る。以下のシンボルを含めることができる:

     ‘change’
          ファイル変更を監視。
     ‘attribute-change’
          パーミッションや変更時刻のような、ファイル属性の変更を監視。

     FILEがディレクトリーなら、そのディレクトリー内のすべてのファイルの
     変更が通知される。これは再帰的には機能しない。

     何らかのイベント発生時には、以下の形式のEVENTを単一の引数として、
     Emacsは関数CALLBACKを呼び出す:

          (DESCRIPTOR ACTION FILE [FILE1])

     DESCRIPTORは、この関数がリターンするオブジェクトと同じである。
     ACTIONはイベントを示し、以下のシンボルのいずれかである:

     ‘created’
          FILEが作成された。
     ‘deleted’
          FILEが削除された。
     ‘changed’
          FILEが変更された。
     ‘renamed’
          FILEがFILE1にリネームされた。
     ‘attribute-changed’
          FILEの属性が変更された。

     FILEおよびFILE1は、イベントが報告されたファイルの名前である。たとえ
     ば:

          (require 'filenotify)
               ⇒ filenotify

          (defun my-notify-callback (event)
            (message "Event %S" event))
               ⇒ my-notify-callback

          (file-notify-add-watch
            "/tmp" '(change attribute-change) 'my-notify-callback)
               ⇒ 35025468

          (write-region "foo" nil "/tmp/foo")
               ⇒ Event (35025468 created "/tmp/.#foo")
                  Event (35025468 created "/tmp/foo")
                  Event (35025468 changed "/tmp/foo")
                  Event (35025468 deleted "/tmp/.#foo")

          (write-region "bla" nil "/tmp/foo")
               ⇒ Event (35025468 created "/tmp/.#foo")
                  Event (35025468 changed "/tmp/foo") [2 times]
                  Event (35025468 deleted "/tmp/.#foo")

          (set-file-modes "/tmp/foo" (default-file-modes))
               ⇒ Event (35025468 attribute-changed "/tmp/foo")

     アクション‘renamed’がリターンされるかどうかは、使用する監視ライブラ
     リーに依存する。FILEとFILE1の両方が同じディレクトリーに属し、そのデ
     ィレクトリーが監視されていればリターンを期待できる。それ以外ではア
     クション‘deleted’と‘created’がランダムな順にリターンされる。

          (rename-file "/tmp/foo" "/tmp/bla")
               ⇒ Event (35025468 renamed "/tmp/foo" "/tmp/bla")

          (file-notify-add-watch
            "/var/tmp" '(change attribute-change) 'my-notify-callback)
               ⇒ 35025504

          (rename-file "/tmp/bla" "/var/tmp/bla")
               ⇒ ;; gfilenotify
                  Event (35025468 renamed "/tmp/bla" "/var/tmp/bla")

               ⇒ ;; inotify
                  Event (35025504 created "/var/tmp/bla")
                  Event (35025468 deleted "/tmp/bla")

 -- Function: file-notify-rm-watch descriptor
     DESCRIPTORに指定された、既存のファイル監視を削除する。DESCRIPTORは
     、‘file-notify-add-watch’がリターンしたオブジェクトであること。


File: elisp,  Node: Dynamic Libraries,  Prev: File Notifications,  Up: System Interface

38.20 Dynamically Loaded Libraries
==================================

“ダイナミックにロードされるライブラリー(dynamically loaded library)”とは
、その機能が最初に必要になったときに、オンデマンドでロードされるライブラ
リーです。Emacsは自身の機能をサポートするライブラリーのオンデマンドロー
ドのように、それらをサポートします。

 -- Variable: dynamic-library-alist
     これはダイナミックライブラリーと、それらを実装する外部ライブラリー
     ファイルのalistである。

     要素はそれぞれ、‘(LIBRARY FILES...)’という形式のリストである。ここ
     で‘car’はサポートされた外部ライブラリーを表すシンボルで、残りはその
     ライブラリーにたいして候補となるファイル名を与える文字列である。

     Emacsは、このリスト内のファイル出現順で、そのライブラリーのロードを
     試みる。何も見つからない場合、そのEmacsセッションはライブラリーにア
     クセスできず、それが提供する機能は利用できない。

     いくつかのプラットフォーム上におけるイメージのサポートは、この機能
     を使用している。以下は、MS-Windows上でイメージをサポートするために
     、この変数をセットする例である:

          (setq dynamic-library-alist
                '((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")
                  (png "libpng12d.dll" "libpng12.dll" "libpng.dll"
                       "libpng13d.dll" "libpng13.dll")
                  (jpeg "jpeg62.dll" "libjpeg.dll" "jpeg-62.dll"
                        "jpeg.dll")
                  (tiff "libtiff3.dll" "libtiff.dll")
                  (gif "giflib4.dll" "libungif4.dll" "libungif.dll")
                  (svg "librsvg-2-2.dll")
                  (gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")
                  (glib "libglib-2.0-0.dll")
          	(gobject "libgobject-2.0-0.dll")))

     イメージタイプ‘pbm’と‘xbm’は外部ライブラリーに依存せず、Emacsで常に
     利用可能なので、この変数内にエントリーがないことに注意。

     これは、外部ライブラリーへのアクセスにたいする、一般的な機能を意図
     したものではないことにも注意されたい。Emacsにとって既知のライブラリ
     ーだけが、これを通じてロードできる。

     与えられたLIBRARYが、Emacsに静的にリンクされている場合、この変数は
     無視される。


File: elisp,  Node: Packaging,  Next: Antinews,  Prev: System Interface,  Up: Top

39 Preparing Lisp code for distribution
***************************************

Emacsは、Emacs Lispコードをユーザーに配布するための、標準的な方法を提供
します。“パッケージ(package)”は、ユーザーが簡単にダウンロード、インスト
ール、アンインストール、および更新できるような方法でフォーマットおよび同
梱された、1つ以上のファイルのコレクションです。

   以降のセクションではパッケージを作成する方法、およびそれを他の人がダ
ウンロードできるように、“パッケージアーカイブ(package archive)”に配置す
る方法を説明します。パッケージングシステムのユーザーレベル機能の説明は、
*note (emacs)Packages::を参照してください。

* Menu:

* Packaging Basics::         Emacs Lispパッケージの基本的概念。
* Simple Packages::          単一.elファイルをパッケージする方法。
* Multi-file Packages::      ▼複数ファイルをパッケージする方法。
* Package Archives::         パッケージアーカイブの保守。


File: elisp,  Node: Packaging Basics,  Next: Simple Packages,  Up: Packaging

39.1 Packaging Basics
=====================

パッケージは“シンプルパケージ(simple package)”か“複数ファイルパッケージ
(multi-file package)”のいずれかです。シンプルパッケージは単一のEmacs
Lispファイル内に格納される一方、複数ファイルパッケージはtarファイル(複数
のLispファイルとマニュアルのような非Lispファイルが含まれる可能性がある
)に格納されます。

   通常の使い方では、シンプルパッケージと複数ファイルパッケージとの違い
は、比較的重要ではありません。Package Menuインターフェースでは、それらの
間に差異はありません。しかし以降のセクションで説明するように、それらを作
成する手順は異なります。

   パッケージ(シンプルか複数ファイル)はそれぞれ、特定の“属性
(attributes)”をもっています:

Name
     短い単語(たとえば‘auctex’)。これは通常、そのプログラム内でシンボル
     プレフィクスとしても仕様される(*note Coding Conventions::を参照)。

Version
     関数‘version-to-list’が理解できる形式のバージョン番号(たとえば
     ‘11.86’)。パッケージの各リリースでは、バージョン番号のアップも行う
     こと。

Brief description
     そのパッケージがPackage Menuにリストされる際に、これが表示される。
     理想的には36文字以内で、単一行を占めるべきである。

Long description
     これは‘C-h P’(‘describe-package’)により作成されたバッファーに表示さ
     れ、これの後にそのパッケージの簡単な説明(brief description)とインス
     トール状態(installation status)が続く。通常これは複数行に渡り、その
     パッケージの能力と、インストール後に使用を開始するための方法を完全
     に記述すること。

Dependencies
     そのパッケージが依存する、他のパッケージ(恐らく最低のバージョン番号
     を含む)。このリストは空でもよく、その場合パッケージには依存パッケー
     ジがないことを意味する。それ以外なら、このパッケージをインストール
     することにより、その依存パッケージも自動的にインストールされる。依
     存パッケージのいずれかが見つからなければ、そのパッケージをインスト
     ールすることはできない。

   コマンド‘package-install-file’、またはPackage Menuのいずれかを介した
パッケージのインストールでは、‘package-user-dir’に‘NAME-VERSION’という名
前のサブディレクトリーが作成される。ここでNAMEはパッケージ名、VERSIONは
バージョン番号である(たとえば‘~/.emacs.d/elpa/auctex-11.86/’)。わたした
ちはこれを、そのパッケージの“コンテンツディレクトリー(content
directory)”と呼んでいます。これは、Emacsがパッケージのコンテンツ(シンプ
ルパッケージでは単一のLispファイル、または複数ファイルパッケージから抽出
されたファイル)を配置する場所です。

   その後Emacsは、autoloadマジックコメント(*note Autoload::を参照)にたい
して、このコンテンツディレクトリー内のすべてのLispファイルを検索します。
これらのautoload定義は、コンテンツディレクトリーの‘NAME-autoloads.el’と
いう名前のファイルに保存されます。これらは通常、そのパッケージ内で定義さ
れた主要なユーザーコマンドのautoloadに使用されますが、
‘auto-mode-alist’への要素の追加(*note Auto Major Mode::を参照)等、別のタ
スクを行うこともできます。パッケージは通常、その中で定義された関数と変数
のすべてをautoload_しない_ことに注意してください — 通常はそのパッケージ
の使用を開始するために呼び出される一握りのコマンドだけがautoloadされます
。それから、Emacsはそのパッケージ内のすべてのLispファイルをバイトコンパ
イルします。

   インストール後、インストールされたパッケージは“ロード済み(loaded)”に
なります。Emacsは‘load-path’にコンテンツディレクトリーを追加して、
‘NAME-autoloads.el’内のautoload定義を評価します。

   Emacsのスタートアップ時は常に、インストール済みパッケージをロードする
ために、自動的に関数‘package-initialize’が呼び出されます。これはinitファ
イルと、(もしあれば)abbrevファイルのロード後、かつ‘after-init-hook’の実
行前に行われます(*note Startup Summary::を参照)。ユーザーオプション
‘package-enable-at-startup’が‘nil’なら、自動的なパッケージのロードは無効
です。

 -- Command: package-initialize &optional no-activate
     この関数は、インストール済みパッケージとそれらがロード済みかを記録
     する、Emacsの内部レコードを初期化する。ユーザーオプション
     ‘package-load-list’は、どのパッケージをロードするかを指定する。デフ
     ォルトでは、すべてのインストール済みパッケージがロードされる。*note
     (emacs)Package Installation::を参照のこと。

     オプション引数NO-ACTIVATEが非‘nil’なら、インストール済みパッケージ
     を実際にロードせずに、このレコードを更新する。これは内部でのみ使用
     される。


File: elisp,  Node: Simple Packages,  Next: Multi-file Packages,  Prev: Packaging Basics,  Up: Packaging

39.2 Simple Packages
====================

シンプルパッケージは単一のEmacs Lispソースファイルで構成されます。このフ
ァイルは、Emacs Lispライブラリーのヘッダー規約に準拠していなればなりませ
ん(*note Library Headers::を参照)。以下の例に示すように、そのパッケージ
の属性は種々のヘッダーから取得されます:

     ;;; superfrobnicator.el --- Frobnicate and bifurcate flanges

     ;; Copyright (C) 2011 Free Software Foundation, Inc.

     ;; Author: J. R. Hacker <jrh@example.com>
     ;; Version: 1.3
     ;; Package-Requires: ((flange "1.0"))
     ;; Keywords: multimedia, frobnicate
     ;; URL: http://example.com/jrhacker/superfrobnicate

     ...

     ;;; Commentary:

     ;; This package provides a minor mode to frobnicate and/or
     ;; bifurcate any flanges you desire.  To activate it, just type
     ...

     ;;;###autoload
     (define-minor-mode superfrobnicator-mode
     ...

   そのパッケージの名前は1行目のファイル名の拡張子を除いた部分と同じです
。ここでは、それは‘superfrobnicator’です。

   brief description(簡単な説明)も1行目から取得されます。ここでは、それ
は‘Frobnicate and bifurcate flanges’(訳注: ‘flangeをフロブニケートして二
股化する’のフロブニケートとは、ある技術にたいする無目的で非生産的な具体
的行為を意味する)です。

   バージョン番号は、もしあれば‘Package-Version’ヘッダー、それ以外は
‘Version’ヘッダーから取得されます。これらのヘッダーのいずれかが、_提供さ
れていなればなりません_。ここのバージョン番号は1.3です。

   そのファイルに‘;;; Commentary:’セクションがあれば、そのセクションは長
い説明(long description)として使用されます。(その説明を表示する際、
Emacsは‘;;; Commentary:’の行と、コメント内のコメント文字列を省力する。)

   そのファイルに‘Package-Requires’ヘッダーがあれば、それはパッケージの
依存関係(package dependencies)として使用されます。上の例では、パッケージ
はバージョン1.0以上の‘flange’パッケージに依存します。
‘Package-Requires’ヘッダーの説明は、*note Library Headers::を参照してく
ださい。このヘッダーが省略された場合、そのパッケージに依存関係はありませ
ん。

   ヘッダー‘Keywords’と‘URL’はオプションですが、含めることを推奨します。
コマンド‘describe-package’は、出力にリンクを追加するためにこれらを使用し
ます。‘Keywords’ヘッダーには、‘finder-known-keywords’リストからの標準的
キーワードを少なくとも1つ含めるべきです。

   ファイルには*note Packaging Basics::で説明したように、1つ以上の
autoloadマジックコメントも含めるべきです。上の例では、マジックコメントに
より‘superfrobnicator-mode’が自動ロードされます。

   パッケージアーカイブに単一ファイルのパッケージを追加する方法は、*note
Package Archives::を参照してください。


File: elisp,  Node: Multi-file Packages,  Next: Package Archives,  Prev: Simple Packages,  Up: Packaging

39.3 Multi-file Packages
========================

複数ファイルパッケージは、単一ファイルパッケージより作成の手軽さが少し劣
りますが、より多くの機能を提供します。複数ファイルパッケージには複数の
Emacs Lispファイル、Infoマニュアル、および(イメージのような)他のファイル
タイプを含めることができます。

   インストールに先立ち、複数パッケージはファイルとしてパッケージアーカ
イブに含まれます。このtarファイルは‘NAME-VERSION.tar’という名前でなけれ
ばなりません。ここでNAMEはパッケージ名、VERSIONはバージョン番号です。
tarのコンテンツは一度解凍されたなら、“コンテンツディレクトリcontent
directory)”である‘NAME-VERSION’という名前のディレクトリーにすべて解凍さ
れなければなりません(*note Packaging Basics::を参照)。このコンテンツディ
レクトリーのサブディレクトリーにも、ファイルが抽出されるかもしれません。

   このコンテンツディレクトリー内のファイルのうち1つは、‘NAME-pkg.el’と
いう名前のファイルでなければなりません。このファイルには、以下で説明する
関数‘define-package’の呼び出しから構成される、単一のLispフォームを含まな
ければなりません。これは、そのパッケージのバージョン、簡単な説明(brief
description)、必要条件(requirements)を定義します。

   たとえば、複数ファイルパッケージとしてsuperfrobnicatorのバージョン
1.3を配布する場合、tarファイルは‘superfrobnicator-1.3.tar’になります。こ
れのコンテンツは‘superfrobnicator-1.3’に解凍され、そのうちの1つはファイ
ル‘superfrobnicator-pkg.el’になるでしょう。

 -- Function: define-package name version &optional docstring
          requirements
     この関数はパッケージを定義する。NAMEは、そのパッケージの名前(文字列
     )、VERSIONは関数‘version-to-list’が理解できる形式のバージョン(文字
     列)DOCSTRINGは簡単な説明(brief description)。

     REQUIREMENTSは、必要となるパッケージとそれらのバージョン番号。この
     リスト内の各要素は‘(DEP-NAME DEP-VERSION)’という形式であること。こ
     こでDEP-NAMEはその依存するパッケージ名が名前であるようなシンボル、
     DEP-VERSIONは依存するパッケージのバージョン番号(文字列)である。

   コンテンツディレクトリーに‘README’という名前のファイルがあれば、それ
は長い説明(long description)として使用されます。

   コンテンツディレクトリーに‘dir’という名前のファイルがあれば、
‘install-info’で作成されるInfoディレクトリーファイル名と▽みなされます。
*note Invoking install-info: (texinfo)Invoking install-info.を参照してく
ださい。関係のあるInfoファイルも、このコンテンツディレクトリー内に解凍さ
れる必要があります。この場合、そのパッケージがアクティブ化されたとき、
Emacsは自動的に‘Info-directory-list’にコンテンツディレクトリーを追加しま
す。

   パッケージ内に、‘.elc’ファイルを含めないでください。これらは、そのパ
ッケージのインストール時に作成されます。ファイルがバイトコンパイルされる
順序を制御する方法は存在しないことに注意してください。

   ‘NAME-autoloads.el’という名前のファイルを含めてはなりません。このファ
イルは、そのパッケージのautoload定義のために予約済みです(*note Packaging
Basics::を参照)。これはパッケージのインストール時に、そのパッケージ内の
すべてのLispファイルからautoloadマジックコメントを検索する際、自動的に作
成されます。

   複数パッケージファイルが、(イメージのような)補助的なデータファイルを
含む場合、パッケージ内のLispファイルは変数‘load-file-name’を通じて、それ
らのファイルを参照できます(*note Loading::を参照)。以下は例です:

     (defconst superfrobnicator-base (file-name-directory load-file-name))

     (defun superfrobnicator-fetch-image (file)
       (expand-file-name file superfrobnicator-base))


File: elisp,  Node: Package Archives,  Prev: Multi-file Packages,  Up: Packaging

39.4 Creating and Maintaining Package Archives
==============================================

Package Menuを通じて、“パッケージアーカイブ(package archives)”からユーザ
ーはパッケージをダウンロードできます。そのようなアーカイブは、変数
‘package-archives’で指定されます。この変数のデフォルト値のデフォルト値と
して単一のエントリー、<http://elpa.gnu.org>でGNUプロジェクトがホストする
アーカイブが含まれています。このセクションでは、パッケージアーカイブのセ
ットアップと保守の方法について説明します。

 -- User Option: package-archives
     この変数の値は、Emacsパッケージマネージャーが認識する、パッケージア
     ーカイブのリストである。

     このalistの要素はそれぞれが1つのアーカイブに対応し、‘(ID .
     LOCATION)’という形式であること。ここでIDはパッケージ名(文字列)、
     LOCATIONは文字列であるような“ベースロケーション(base location)”であ
     る。

     ベースロケーションが‘http:’で始まる場合、それはHTTPのURLとして扱わ
     れ、(デフォルトのGNUアーカイブのように)HTTPを介してこのアーカイブか
     らパッケージがダウンロードされる。

     それ以外なら、ベースロケーションはディレクトリー名であること。この
     場合、Emacsは通常のファイルアクセスを通じて、そのアーカイブからパッ
     ケージを取得する。“local”のようなアーカイブは主として、テスト用に有
     用である。

   パッケージアーカイブは、そのパッケージ、および関連するファイルが格納
された、単なるディレクトリーです。HTTPを介してそのアーカイブに到達できる
ようにしたければ、このディレクトリーがウェブサーバーにアクセスできなけれ
ばなりません。これを達成する方法は、このマニュアルの範囲を超えます。

   手軽なのは、‘package-x’を通じてパッケージアーカイブのセットアップと更
新を行う方法です。これはEmacsに含まれていますが、デフォルトではロードさ
れません。ロードするには‘M-x load-library <RET> package-x <RET>’、または
‘(require 'package-x)’をinitファイルに追加します。*note Lisp Libraries:
(emacs)Lisp Libraries.を参照してください。一度ロードされれば、以下を使用
できます:

 -- User Option: package-archive-upload-base
     この変数の値は、ディレクトリー名としてのパッケージアーカイブのベー
     スロケーションである。‘package-x’ライブラリー内のコマンドは、このベ
     ースロケーションを使用することになる。

     このディレクトリー名は絶対ファイル名であること。パッケージアーカイ
     ブが別マシン上にある場合には、
     ‘/ssh:foo@example.com:/var/www/packages/’のようなリモート名を指定で
     きる。*note Remote Files: (emacs)Remote Files.を参照のこと。

 -- Command: package-upload-file filename
     このコマンドはファイル名FILENAMEの入力を求め、そのファイルを
     ‘package-archive-upload-base’にアップロードする。このファイルはシン
     プルパッケージ(‘.el’ファイル)、または複数ファイルパッケージ
     (‘.tar’ファイル)のいずれかでなければならず、それ以外ならエラーが発
     生する。そのパッケージの属性は自動的に解凍され、アーカイブのコンテ
     ンツリストは、この情報でアップロードされる。

     ‘package-archive-upload-base’が有効なディレクトリーを指定しない場合
     、この関数はインタラクティブにそれの入力を求める。そのディレクトリ
     ーが存在しなければ作成する。このディレクトリーに、初期コンテンツを
     もつ必要はない(最初に空のアーカイブを作成するために、このコマンドを
     使用できる)。

 -- Command: package-upload-buffer
     このコマンドは‘package-upload-file’と似ているが、パッケージファイル
     の入力を求めずに、カレントバッファーのコンテンツをアップロードする
     。カレントバッファーはシンプルパッケージ(‘.el’ファイル)か複数ファイ
     ルパッケージ(‘.tar’ファイル)をvisitしていなればならず、それ以外なら
     エラーが発生する。

アーカイブ作成後、それが‘package-archives’内になければ、Package Menuイン
ターフェースからアクセスできないことを忘れないでください。

   公的なパッケージアーカイブの保守には責任が併ないます。アーカイブから
Emacsユーザーがパッケージをインストールする際、それらのパッケージはその
ユーザーの権限において、任意のコードを実行できるようになります(これはパ
ッケージにたいしてだけでなく、一般的なEmacsコードにたいしても真といえる
)。そのため、アーカイブの保守を保つとともに、ホスティングシステムが安全
であるよう維持するべきです。

   暗号化されたキーを使用してパッケージに“サイン(sign)”するのが、パッケ
ージのセキュリティーを向上する1つの方法です。gpgのprivateキーとpublicキ
ーを生成してあれば、以下のようにそのパッケージにサインするためにgpgを使
用できます:

     gpg -ba -o FILE.sig FILE

単一ファイルパッケージにたいしては、FILEはそのパッケージのLispファイルで
す。複数ファイルパッケージではそのパッケージのtarファイルです。同じ方法
により、アーカイブのコンテンツファイルにもサインできます。これを行うには
、パッケージと同じディレクトリーで、‘.sig’ファイルを利用可能できるように
してください。ダウンロードする人にたいしても、<http://pgp.mit.edu/>のよ
うなキーサーバーにアップロードすることにより、publicキーを利用できるよう
にするべきです。その人がアーカイブからパッケージをインストールする際、に
は署名の検証にpublicキーを使用できます。

   これらの方法についての完全な説明は、このマニュアルの範囲を超えます。
暗号化キーとサインに関する詳細は*note GnuPG: (gnupg)Top.、Emacsに付属す
るGNU Privacy Guardへのインターフェースについては、*note EasyPG:
(epa)Top.を参照してください。


File: elisp,  Node: Antinews,  Next: GNU Free Documentation License,  Prev: Packaging,  Up: Top

Appendix A Emacs 23 Antinews
****************************

時代に逆らって生きるユーザーのために、以下はEmacsバージョン23.4へのダウ
ングレードに関する情報です。Emacs 24.5機能の不在による結果としての偉大な
る単純さを、ぜひ堪能してください。

A.1 Old Lisp Features in Emacs 23
=================================

   • レキシカルスコープのサポートは削除されました。すべての変数はダイナ
     ミックなスコープをもちます。‘lexical-binding’変数と、‘eval’の
     LEXICAL引数は削除されました。フォーム‘defvar’と‘defconst’は、すべて
     の変数がダイナミックになったので、もはや変数をダイナミックとマーク
     することはありません。

     ダイナミックバインディングだけをもつことが、Emacs拡張の精神に適合し
     ています。任意のEmacsコードによる定義済み変数へのアクセスを許容する
     方が、混乱を最小にするのです。とはいえ、あなたのプログラムが理解し
     にくくなるのを避けるためのヒントは、*note Dynamic Binding Tips::を
     参照してください。

   • Lispから引数を‘nil’省略してマイナーモード関数を呼び出しても、マイナ
     ーモードは無条件でに有効になりません。かわりにマイナーモードのオン
     とオフが切り替わります。これはインタラクティブな呼び出し時の挙動な
     ので、行うのは簡単です。これの1つの欠点は、フックからマイナーモード
     を有効にするのが、より面倒になることです。これを行うためには、以下
     のようなことをする必要があります

          (add-hook 'foo-hook (lambda () (bar-mode 1)))

     または、‘turn-on-bar-mode’を定義して、それをフックから呼び出してく
     ださい。

   • ダミーのメジャーモード‘prog-mode’は、削除されました。プログラミング
     関連のモードの慣習に適合させるためにこれを使うかわりに、あなたのモ
     ードがこれらの慣習にしたがうよう、明示的に保証するべきです。*note
     Major Mode Conventions::を参照してください。

   • Emacsの双方向表示と、編集にたいするサポートはなくなります。R2Lテキ
     スト挿入により、行やパラグラフの表示方法が混乱することを心配する必
     要がなくなるので、関数‘bidi-string-mark-left-to-right’は削除されま
     した。さらに、双方向表示に関連する、他の多くの関数と変数が削除され
     ました。‘U+200E’("left-to-right mark")のような、Unicodeの方向文字は
     表示で特別な効果をもたなくなります。

   • Emacsのウィンドウは、ほとんどがLispから隠蔽された内部状態をもつよう
     になりました。内部的なウィンドウは、もはやLispから見えなくなります
     。‘window-parent’のような関数、windowの配置に関連するwindowパラメー
     ター、およびwindowローカルなバッファーリストはすべて削除されました
     。ウィンドウのリサイズに関する関数は、それらがあまりに小さければ、
     ウィンドウを削除できます。

     バッファー表示を制御する、“アクション関数”の機能は、
     ‘display-buffer-overriding-action’と関連する変数、
     ‘display-buffer’のACTION引数、および他の関数が削除されました。
     Emacsがバッファーを表示するウィンドウを選択する方法をプログラム的に
     制御するためには、‘pop-up-frames’と他の変数を正しく組み合わせてバイ
     ンドする方法です。

   • 標準的な補完インターフェースは、変数‘completion-extra-properties’、
     補完関数にたいする‘metadata’アクションフラグ、“補完カテゴリー
     (completion categories)”の排除により簡略化されました。Lispプログラ
     マーは、補完のチューニング手法の選択肢を見つけるために途方に暮れる
     ようなことは少なくなりましたが、あるパッケージが自身のニーズをこの
     合理的なインターフェースが満たさないことを見い出したときには、特別
     な補完機能を自身で実装しなければなりません。

   • ‘copy-directory’は、目標ディレクトリーが既存であろうとなかろうと、
     同じように振る舞います。目標ディレクトリーが存在すれば、1つ目のディ
     レクトリーをサブディレクトリーとしてコピーするのではなく、1つ目のデ
     ィレクトリーの_内容_を、目標ディレクトリーにコピーします(サブディレ
     クトリーは再帰的に処理される)

   • ‘delete-file’と‘delete-directory’にたいするTRASH引数は削除されまし
     た。変数‘delete-by-moving-to-trash’は、注意して使用しなければならな
     くなりました。これが非‘nil’のときは常に、‘delete-file’と
     ‘delete-directory’にたいするすべての呼び出しで、trashが使用されます
     。

   • EmacsはSELinuxファイルコンテキストをサポートしなくなったので、
     ‘copy-file’のPRESERVE-SELINUX-CONTEXT引数は削除されました。
     ‘backup-buffer’のリターン値は、もはやSELinuxファイルコンテキストに
     たいするエントリーをもちません。

   • テキストエリア内でのマウスクリック入力イベントでの、POSITIONリスト
     (*note Click Events::を参照)のY座標は、テキストエリア上端ではなく、
     (もしあれば)ヘッダー行上端から数えるようになりました。

   • メニューkeymap内のバインディング(*note Format of Keymaps::を参照)は
     、以下のように定義内に追加のCACHEエントリーを必要とするかもしれなく
     なります:

          (TYPE ITEM-NAME CACHE . BINDING)

     CACHEエントリーは、同じコマンドを呼び出すキーボードキーシーケンスを
     記録するために、Emacsにより内部的に使用されます。Lispプログラマーは
     決してこれを使用するべきではありません。

   • ‘gnutls’ライブラリーは削除され、それに併なって関数
     ‘open-network-stream’が簡略化されました。暗号化されたネットワークを
     望むLispプログラムは、‘starttls’や‘gnutls-cli’のような、外部プログ
     ラムを呼び出さなければならなくなります。

   • ツールバーはセパレーターを表示できなくなり、これによりグラフィカル
     なフレームすべてで、数ピクセルのスペースが開放されました。

   • 簡略化にたいする継続要求の一環として、他の多くの関数と変数が排除さ
     れました。


File: elisp,  Node: GNU Free Documentation License,  Next: GPL,  Prev: Antinews,  Up: Top

Appendix B GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: elisp,  Node: GPL,  Next: Tips,  Prev: GNU Free Documentation License,  Up: Top

Appendix C GNU General Public License
*************************************

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program—to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: elisp,  Node: Tips,  Next: GNU Emacs Internals,  Prev: GPL,  Up: Top

Appendix D Tips and Conventions
*******************************

このチャプターででは、Emacs Lispの追加機能については説明しません。かわり
に、以前のチャプターで説明した機能を効果的に使う方法と、Emacs Lispプログ
ラマーがしたがうべき慣習を説明します。

   以降で説明する慣習のいくつかは、Lispファイルのvisit時にコマンド‘M-x
checkdoc RET’を実行することにより、自動的にチェックできます。これはすべ
ての監修はチェックできませんし、与えられた警告すべてが必ずしも問題に対応
する訳ではありませんが、それらすべてを検証することには価値があります。

* Menu:

* Coding Conventions::       明快で堅牢なプログラムにたいする慣習。
* Key Binding Conventions::  どのキーをどのプログラムにバインドすべきか。
* Programming Tips::         Emacsコードを円滑にEmacsに適合させる。
* Compilation Tips::         コンパイル済みコードの実行を高速にする。
* Warning Tips::             コンパイラー警告をオフにする。
* Documentation Tips::       読みやすいドキュメント文字列の記述。
* Comment Tips::             コメント記述の慣習。
* Library Headers::          ライブラリーパッケージにたいする標準的なヘッダー。


File: elisp,  Node: Coding Conventions,  Next: Key Binding Conventions,  Up: Tips

D.1 Emacs Lisp Coding Conventions
=================================

以下は、幅広いユーザーを意図したEmacs Lispコードを記述する際にしたがうべ
き慣習です:

   • 単なるパッケージのロードが、Emacsの編集の挙動を変更すねきではない。
     コマンドと、その機能を有効または無効にするコマンド、またはそれの呼
     び出しが含まれる。

     この慣習は、カスタム定義を含むすべてのファイルに必須である。そのよ
     うなファイルを、この慣習にしたがうために修正するのが、非互換の変更
     を要求するなら、構うことはないから、非互換の修正を行うこと。先送り
     にしてはならない。

   • 他のLispプログラムと区別するための、短い単語を選択すること。あなた
     のプログラム内のグローバルなシンボルすべて、すなわち変数、定数、関
     数の名前はその選択したプレフィクスで始まること。そのプレフィクスと
     名前の残りの部分は、ハイフン‘-’で区切る。Emacs Lisp内のすべてのグロ
     ーバル変数は同じネームスペース、関数はすべて別のネームスペースを共
     有するので、これの実践は名前の競合を回避する(1)。他のパッケージから
     使用されることを意図しない場合には、プレフィクス名前を2つのハイフン
     で区切ること。

     ユーザーの使用を意図したコマンド名では、何らかの単語がそのパッケー
     ジ名のプレフィクスの前にあると便利なことがある。関数や変数等を定義
     する構成は、それらが‘defun’や‘defvar’で始まればより良く機能するので
     、名前内でそれらの後に名前プレフィクスを置くこと。

     この勧告は、‘copy-list’のようなEmacs Lisp内のプリミティブではなく、
     伝統的なLispプリミティブにさえ適用される。信じようと信じまいと、
     ‘copy-list’を定義する尤もらしい方法は複数あるのだ。安全第一である。
     かわりに‘foo-copy-list’や‘mylib-copy-list’のような名前を生成するた
     めに、あなたの名前プレフィクスを追加しよう。

     ‘twiddle-files’のような特定の名前でEmacsに追加されるべきと考えてい
     る関数を記述する場合には、プログラム内でそれを名前で呼び出さないこ
     と。プログラム内ではそれを‘mylib-twiddle-files’で呼び出して、わたし
     たちがそれをEmacsに追加するため提案メールを、
     ‘bug-gnu-emacs@gnu.org’に送信すること。もし追加することになったその
     とき、わたしたちは十分容易にその名前を変更できるだろう。

     1つのプレフィクスで十分でなければ、それらに意味があるかぎり、あなた
     んパッケージは2つまたは3つの一般的なプレフィクス候補を使用できる。

   • 個々のLispファイルすべての終端に、‘provide’呼出を配置すること。
     *note Named Features::を参照されたい。

   • 事前に他の特定のLispプログラムのロードを要するファイルは、そのファ
     イル先頭のコメントでそのように告げるべきである。また、それらが確実
     にロードされるよう、‘require’を使用すること。*note Named
     Features::を参照されたい。

   • ファイルFOOが、別のファイルBAR内で定義されたマクロを使用するが、
     BAR内の他の関数や変数を何も使用しない場合には、FOOに以下の式を含め
     るべきである:

          (eval-when-compile (require 'BAR))

     これは、FOOのバイトコンパイル直前にBARをロードするようEmacsに告げる
     ので、そのマクロはコンパイル中は利用可能になる。
     ‘eval-when-compile’の使用により、コンパイル済みバージョンのFOOが_中
     古_なら、BARのロードを避けられる。これはファイル内の、最初のマクロ
     呼び出しの前に呼び出すこと。*note Compiling Macros::を参照されたい
     。

   • 実行時、それらが本当に必要でなければ、追加ライブラリーのロードを避
     けること。あなたのファイルが、単に他のいくつかのライブラリーなしで
     は機能しないなら、単にトップレベルでそのライブラリーを‘require’して
     、それを使って行うこと。しかしあなたのファイルが、いくつかの独立し
     た機能を含み、それらの1つか2つだけが余分なライブラリーを要するなら
     、トップレベルではなく関連する関数内部に、‘require’を配置することを
     考慮すること。または必要時に余分のライブラリーをロードするために、
     ‘autoload’ステートメントを使用すること。この方法では、あなたのファ
     イルの該当部分を使用しない人は、余分なライブラリーをロードする必要
     がなくなる。

   • Common Lisp拡張が必要なら、古い‘cl’ライブラリーではなく、‘cl-lib’ラ
     イブラリーを使うこと。‘cl’ライブラリーは、クリーンなネームスペース
     を使用しない(定義が‘cl-’で始まらない)。パッケージが実行時に‘cl’をロ
     ードする場合、そのパッケージを使用しないユーザーにたいして、名前の
     衝突を起こすかもしれない。

     ‘(eval-when-compile (require 'cl))’で、_コンパイル時_に‘cl’を使用す
     るのは問題ない。コンパイラーはバイトコードを生成する前にマクロを展
     開するので、‘cl’内のマクロを使用するには十分である。ただしこの場合
     でも、現代的な‘cl-lib’を使用したほうが良い。

   • メジャーモードを定義する際には、メジャーモードの慣習にしたがってほ
     しい。*note Major Mode Conventions::を参照されたい。

   • マイナーモードを定義する際には、マイナーモードの慣習にしたがってほ
     しい。*note Minor Mode Conventions::を参照されたい。

   • ある関数の目的が、特定の条件の真偽を告げることであるなら、(述語であ
     る“predicate”を意味する)‘p’で終わる名前を与えること。その名前が1単
     語なら単に‘p’を追加し、複数単語なら‘-p’を追加する。例は‘framep’や
     ‘frame-live-p’。

   • ある変数の目的が、単一の関数の格納にあるなら、‘-function’で終わる名
     前を与えること。ある変数の目的が、関数のリストの格納にあるなら(たと
     えばその変数がフックなら)、フックの命名規約にしたがってほしい。
     *note Hooks::を参照されたい。

   • そのファイルをロードすることにより、フックに関数が追加されるなら、
     ‘FEATURE-unload-hook’という関数を定義すること。ここでFEATUREは、そ
     のパッケージが提供する機能の名前で、そのような変更をアンドゥするた
     めのフックにする。そのファイルのアンロードに‘unload-feature’を使用
     することにより、この関数が実行されるようになる。*note Unloading::を
     参照のこと。

   • Emacsのプリミティブにエイリアスを定義するのは、悪いアイデアである。
     通常は、かわりに標準の名前を使用すること。エイリアスが有用になるか
     もしれないケースは、後方互換性や可搬性を向上させる場合である。

   • パッケージで、別のバージョンのEmacsにたいする互換性のためにエイリア
     スや新たな関数の定義が必要なら、別のバージョンにあるそのままの名前
     ではなく、そのパッケージのプレフィクスを名前に付加すること。以下は
     、そのような互換性問題を多く提供するGnusでの例である。

          (defalias 'gnus-point-at-bol
            (if (fboundp 'point-at-bol)
                'point-at-bol
              'line-beginning-position))

   • Emacsのプリミティブの再定義やadviseは悪いアイデアである。これは特定
     のプログラムには正しいことを行うが、結果として他のプロラムが破壊さ
     れるかもしれない。

   • 同様に、あるLispパッケージで別のLispパッケージ内の関数にadviseする
     のも悪いアイデアである。

   • ライブラリやパッケージでの‘eval-after-load’の使用を避けること(*note
     Hooks for Loading::を参照)。この機能は個人的なカスタマイズを意図し
     ている。Lispプログラム内でこれを使用すると、別のLisp内ではそれが見
     えず、その挙動を変更するため不明瞭になる。これは、別のパッケージ内
     の関数へのadviseに似て、デバッグの障害になる。

   • Emacsの標準的な関数やライブラリープログラムの何かをファイルが置換す
     るなら、そのファイル冒頭の主要コメントで、どの関数が置換されるか、
     および置換によりオリジナルと挙動がどのように異なるかを告げること。

   • 関数や変数を定義するコンストラクターは、関数ではなくマクロであるべ
     きで、その名前は‘define-’で始まること。そのマクロは、定義される名前
     を1つ目の引数で受け取ること。これは自動的に定義を探す、種々のツール
     を助けることになる。マクロ自身の中でその名前を構築するのは、それら
     のツールを混乱させるので避けること。

   • 別のいくつかのシステムでは、‘*’が先頭や終端にある変数名を選択する慣
     習がある。Emacs Lispではその慣習を使用しないので、あなたのプログラ
     ム内でそれを使用しないでほしい。(Emacsでは特別な目的をもつバッファ
     ーだけに、そのような名前を使用する)。すべてのライブラリーが同じ慣習
     を使用するなら、人はEmacsがより整合性があることを見い出すだろう。

   • Emacs Lispソースファイルのデフォルトのファイルコーディングシステム
     はUTFである(*note Text Representations::を参照)。あなたのプログラム
     がUTF-8_以外_の文字を含むような稀なケースでは、ソースファイル内の
     ‘-*-’行かローカル変数リスト内で、適切なコーディングシステムを指定す
     るべきである。*note Local Variables in Files: (emacs)File
     Variables.を参照されたい。

   • デフォルトのインデントパラメーターで、ファイルをインデントすること
     。

   • 自分で行に閉カッコを配置するのを習慣としてはならない。Lispプログラ
     マーは、これに当惑させられる。

   • コピーを配布する場合は著作権表示と複製許可表示を配してほしい。*note
     Library Headers::を参照されたい。

   ---------- Footnotes ----------

   (1) Common Lispスタイルのパッケージシステムの恩恵は、そのコストを上回
るとは考えられない。


File: elisp,  Node: Key Binding Conventions,  Next: Programming Tips,  Prev: Coding Conventions,  Up: Tips

D.2 Key Binding Conventions
===========================

   • Dired、Info、Compilation、Occurなどの多くのメジャーモードでは、“ハ
     イパーリンク”を含むを読み取り専用テキストとして処理するようデザイン
     されている。そのようなメジャーモードは、リンクをフォローするよう
     ‘mouse-2’と<RET>を再定義すること。そのリンクが
     ‘mouse-1-click-follows-link’にしたがうよう、‘follow-link’条件もセッ
     トアップすること。*note Clickable Text::を参照されたい。そのような
     クリック可能リンクを実装する簡便な手法については、*note Buttons::を
     参照されたい。

   • Lispプログラム内のキーとして、‘C-c LETTER’を定義してはならない。
     ‘C-c’とアルファベット(大文字と小文字の両方)からなるシーケンスは、ユ
     ーザー用に予約済みである。これらはユーザー用に、*唯一*予約されたシ
     ーケンスなので、それを阻害してはならない。

     すべてのメジャーモードがこの慣習を尊重するよう変更するには、多大な
     作業を要する。この慣習を捨て去れば、そのような作業は不要になり、ユ
     ーザーは不便になるだろう。この慣習を遵守してほしい。

   • 修飾キーなしの<F5>から<F9>までのファンクションキーも、ユーザー定義
     用に予約済みである。

   • 後にコントロールキーか数字が続く‘C-c’シーケンスは、メジャーモード用
     に予約済みである。

   • 後に‘{’、‘}’、‘<’、‘>’、 ‘:’、‘;’が続く‘C-c’シーケンスも、メジャー
     モード用に予約済みである。

   • 後に他の区切り文字が続く‘C-c’シーケンスは、マイナーモードに割り当て
     られている。メジャーモード内でのそれらの使用は絶対禁止ではないが、
     もしそれを行えばそのメジャーモードがマイナーモードにより、時々シャ
     ドーされるかもしれない。

   • 後にプレフィクス文字(‘C-c’を含む)が続く‘C-h’をバインドしてはならな
     い。‘C-h’をバインドしなければ、そのプレフィクス文字をもつサブコマン
     ドをリストするためのヘルプ文字として、それが自動的に利用可能になる
     。

   • 別の<ESC>が後に続く場合を除き、<ESC>で終わるキーシーケンスをバイン
     ドしてはならない(つまり‘<ESC> <ESC>’で終わるキーシーケンスのバイン
     ドはOK)。

     このルールの理由は、任意のンテキストでの非プレフィクスであるような
     <ESC>のバインディングは、そのコンテキストにおいてファンクションキー
     となるようなエスケープシーケンスの認識を阻害するからである。

   • 同様に、<C-g>は一般的にはキーシーケンスのキャンセルに使用されるので
     、<C-g>で終わるキーシーケンスをバインドしてはならない。

   • 一時的なモードや、ユーザーが出入り可能な状態のような動作はすべて、
     エスケープ手段として‘<ESC> <ESC>’か‘<ESC> <ESC> <ESC>’を定義するこ
     と。

     通常のEmacsコマンドを受け入れる状態、より一般的には後にファンクショ
     ンキーか矢印キーが続く<ESC>内のような状態は潜在的な意味をもつので、
     ‘<ESC> <ESC>’を定義してはならない。なぜならそれは、<ESC>の後のエス
     ケープシーケンスの認識を阻害するからである。これらの状態においては
     、エスケープ手段として‘<ESC> <ESC> <ESC>’を定義すること。それ以外な
     ら、かわりに‘<ESC> <ESC>’を定義すること。


File: elisp,  Node: Programming Tips,  Next: Compilation Tips,  Prev: Key Binding Conventions,  Up: Tips

D.3 Emacs Programming Tips
==========================

以下の慣習にしたがうことにより実行時、あなたのプログラムがよりEmacsに適
合するようになります。

   • プログラム内で‘next-line’や‘previous-line’を使用してはならない。ほ
     とんど常に、‘forward-line’のほうがより簡便で、より予測可能かつ堅牢
     である。*note Text Lines::を参照のこと。

   • あなたのプログラム内で、マークのセットが意図した機能でないなら、マ
     ークをセットする関数を呼び出してはならない。マークはユーザーレベル
     の機能なので、ユーザーの益となる値を提供する場合を除き、マークの変
     更は間違っている。*note The Mark::を参照のこと。

     得に、以下の関数は使用しないこと:

        • ‘beginning-of-buffer’、‘end-of-buffer’
        • ‘replace-string’、‘replace-regexp’
        • ‘insert-file’、‘insert-buffer’

     インタラクティブなユーザーを意図した別の機能がないのにポイントの移
     動、特定の文字列の置換、またはファイルやバッファーのコンテンツを挿
     入したいだけなら、単純な1、2行のLispコードでそれらの関数を置き換え
     られる。

   • ベクターを使用する特別な理由がある場合を除き、ベクターではなくリス
     トを使用すること。Lispでは、ベクターよりリストを操作する機能のほう
     が多く、リストを処理するほうが通常は簡便である。

     要素の挿入や削除がなく(これはリストだけで可能)、ある程度のサイズが
     あって、(先頭か末尾から検索しない)ランダムアクセスがあるテーブルで
     は、ベクターが有利である。

   • エコーエリア内にメッセージを表示する推奨方法は、‘princ’ではなく
     ‘message’関数である。*note The Echo Area::を参照のこと。

   • エラーコンディションに遭遇したときは、関数‘error’(または‘signal’)を
     呼び出すこと。関数‘error’はリターンしない。*note Signaling
     Errors::を参照のこと。

     エラーの報告に‘message’、‘throw’、‘sleep-for’、‘beep’を使用しないこ
     と。

   • エラーメッセージは大文字で始まり、ピリオドで終わらないこと。

   • ミニバッファー内で‘yes-or-no-p’か‘y-or-n-p’で答えを求める質問を行う
     場合には、大文字で始めて‘? ’で終わること。

   • ミニバッファーのプロンプトでデフォルト値を示すときは、カッコ内に単
     語‘default’を配すること。これは以下のようになる:

          Enter the answer (default 42):

   • ‘interactive’で引数リストを生成するLisp式を使用する場合には、リージ
     ョンまたはポジションの引数にたいして、“正しい”デフォルト値を生成し
     ようと試みではならない。それらの引数が指定されていなければ、かわり
     に‘nil’を提供して、引数が‘nil’のときに関数のbodyでデフォルト値を計
     算すること。たとえば以下のように記述する:

          (defun foo (pos)
            (interactive
             (list (if SPECIFIED SPECIFIED-POS)))
            (unless pos (setq pos DEFAULT-POS))
            ...)

     以下のようにはしないよう:

          (defun foo (pos)
            (interactive
             (list (if SPECIFIED SPECIFIED-POS
                       DEFAULT-POS)))
            ...)

     これは、そのコマンドを繰り返す場合に、そのときの状況にもとづいてデ
     フォルト値が再計算されるからである。

     interactiveの‘d’、‘m’、‘r’指定を使用する際、これらはコマンドを繰り
     返すときの引数値の再計算にたいして特別な段取りを行うので、このよう
     な注意事項を採用する必要はない。

   • 実行に長時間を要する多くのコマンドは、開始時に‘Operating...’、完了
     時に‘Operating...done’のような、何らかのメッセージを表示すること。
     これらのメッセージのスタイルは、‘...’の周囲に_スペース_を置かず、
     ‘done’の後に_ピリオド_を置かないよう、一定に保ってほしい。そのよう
     なメッセージを生成する簡便な方法は、*note Progress::を参照のこと。

   • 再帰編集の使用を避けること。かわりにRmailの‘e’コマンドが行うように
     、元のローカルキーマップに戻るよう定義したコマンドを含む、新たなロ
     ーカルキーマップを使用する。または単に別のバッファーにスイッチして
     、ユーザーが自身で戻れるようにすること。*note Recursive Editing::を
     参照っされたい。


File: elisp,  Node: Compilation Tips,  Next: Warning Tips,  Prev: Programming Tips,  Up: Tips

D.4 Tips for Making Compiled Code Fast
======================================

以下は、バイトコンパイル済みLispプログラムの実行速度を改善する方法です。

   • その時間がどこで消費されているか見つかるために、プログラムのプロフ
     ァイルを行う。*note Profiling::を参照のこと。

   • 可能なら常に再帰ではなく繰り返しを使用する。Emacs Lispでは、コンパ
     イル済み関数が別のコンパイル済み関数を呼び出すときでさえ、関数呼び
     出しは低速である

   • プリミティブのリスト検索関数‘memq’、‘member’、‘assq’、‘assoc’は明示
     的な繰り返しより更に高速である。これらの検索プリミティブを使用でき
     るように、データ構造を再配置することにも価値が有り得る。

   • 特定のビルトイン関数は、通常の関数呼び出しの必要を回避するよう、バ
     イトコンパイル済みコードでは特別に扱われる。別の候補案のかわりにこ
     れらの関数を使用するのは、良いアイデアである。コンパイラーにより特
     別に扱われる関数かどうかを確認するには、それの‘byte-compile’プロパ
     ティを調べればよい。そのプロパティが非‘nil’なら、その関数は特別に扱
     われる。

     たとえば以下を入力すると、‘aref’が特別にコンパイルされえることが示
     される(*note Array Functions::を参照):

          (get 'aref 'byte-compile)
               ⇒ byte-compile-two-args

     この場合(および他の多くの場合)、最初に‘byte-compile’プロパティを定
     義する、‘bytecomp’ライブラリーをロードしなければならない。

   • プログラム内で実行時間のある程度を占める小さい関数を呼び出すなら、
     その関数をinlineにする。これにより、関数呼び出しのオーバーヘッドが
     なくなる。関数のinline化はプログラム変更の自由度を減少させるので、
     ユーザーがスピードを気にするに足るほど低速であり、inline化により顕
     著に速度が改善されるのでなければ、これを行ってはならない。*note
     Inline Functions::を参照のこと。


File: elisp,  Node: Warning Tips,  Next: Documentation Tips,  Prev: Compilation Tips,  Up: Tips

D.5 Tips for Avoiding Compiler Warnings
=======================================

   • 以下のように、ダミーの‘defvar’定義を追加して、未定義のフリー変数に
     関する、コンパイラーの警告の回避を試みる:

          (defvar foo)

     このような定義は、そのファイル内での変数‘foo’の使用にたいして、コン
     パイラーが警告すないようにする以外、影響はない。

   • 同様に‘declare-function’ステートメントを使用して、_定義されるこが既
     知_の未定義関数に関する、コンパイラーの警告の回避を試みる(*note
     Declaring Functions::を参照)。

   • 特定のファイルから多くの関数と変数を使用する場合には、それらに関す
     るコンパイラー警告を回避するために、そのパッケージに‘require’を追加
     できる。たとえば、

          (eval-when-compile
            (require 'foo))

   • ある関数内で変数をバインドして、別の関数内でそれを使用またはセット
     する場合、その変数が定義をもたなければ、その別関数に関してコンパイ
     ラーは警告を行う。しかしその変数が短い名前をもつ場合、Lispパッケー
     ジは短い変数名を定義するべきではないので、定義の追加により不明瞭に
     なるかもしれない。行うべき正しい方法は、パッケージ内の他の関数や変
     数に使用されている名前プレフィクスで始まるよう、その変数をリネーム
     することである。

   • 警告を回避する最後の手段は、通常なら間違いであるが、その使用法では
     間違いではないと解っている何かを行う際には、それを
     ‘with-no-warnings’の内側に置くこと。*note Compiler Errors::を参照さ
     れたい。


File: elisp,  Node: Documentation Tips,  Next: Comment Tips,  Prev: Warning Tips,  Up: Tips

D.6 Tips for Documentation Strings
==================================

以下は、ドキュメント文字列記述に関するいくつかのヒントと慣習です。コマン
ド‘M-x checkdoc-minor-mode’を実行すれば、これらの慣習の多くをチェックで
きます。

   • ユーザーが理解することを意図したすべての関数、コマン、変数はドキュ
     ント文字列をもつこと。

   • Lispプログラムの内部的な変数とサブルーチンは、同様にドキュメント文
     字列をもつことができる。ドキュメント文字列は、実行中のEmacs内で非常
     に僅かなスペースしか占めない。

   • 80列スクリーンのEmacsウィンドウに適合するように、ドキュメント文字列
     をフォーマットすること。ほとんどの行を60文字以下に短くするのは、良
     いアイデアである。最初の行は67文字以下にすること。さもないと
     ‘apropos’の出力で見栄えが悪くなる。

     見栄えがよくなるなら、そのテキストをフィルできる。Emacs Lispモード
     は、‘emacs-lisp-docstring-fill-column’で指定された幅に、ドキュメン
     ト文字列をフィルする。しかし、ドキュメント文字列の行ブレークを注意
     深く調整すれば、ドキュメント文字列の可読性をより向上できることがあ
     る。ドキュメント文字列が長い場合には、セクション間に空行を使用する
     こと。

   • ドキュンメント文字列の最初の行は、それ自身が要約となるような、1つか
     2つの完全なセンテンスから成り立つこと。‘M-x apropos’は最初の行だけ
     を表示するので、その行のコンテンツが自身で完結していなければ、結果
     の見栄えは悪くなる。特に、最初の行は大文字で始めて、ピリオで終わる
     こと。

     関数では最初の行は“その関数は何を行うのか?”、変数にたいしては最初の
     行は“その値は何を意味するのか?”という問いに簡略に答えること。

     ドキュメント文字列を1行に制限しないこと。その関数や変数の使用法の詳
     細を説明する必要に応じて、その分の行数を使用すること。テキストの残
     りの部分にたいしても、完全なセンテンスを使用してほしい。

   • ユーザーが無効化されたコマンドの使用を試みる際、Emacsはそれのドキュ
     メント文字列の最初のパラグラフ(最初の空行までのすべて)だけを表示す
     る。もし望むならえ、その表示をより有用になるよう、最初の空行の前に
     何の情報を含めるか選択できる。

   • 最初の行では、その関数のすべての重要な引数と、関数呼び出しで記述さ
     れる順に、それらに言及すること。その関数が多くの引数をもつなら、最
     初の行でそれらすべてに言及するのは不可能である。この場合、もっとも
     重要な引数を含む、最初の引数数個について最初の行で言及すること。

   • ある関数のドキュメント文字列がその関数の引数の値に言及する際には、
     引数を大文字にした名前が引数の値であるかのように使用すること。つま
     り関数‘eval’のドキュメント文字列では、最初の引数の名前が‘form’なの
     で、‘FORM’で参照する:

          Evaluate FORM and return its value.

     同様に、リストやベクターをサブユニットへの分解で、それらのいくつか
     を異なるように示すような際には、メタ構文変数(metasyntactic
     variables)を大文字で記述すること。以下の例の‘KEY’と‘VALUE’は、これ
     の実践例である:

          The argument TABLE should be an alist whose elements
          have the form (KEY . VALUE).  Here, KEY is ...

   • ドキュメント文字列内でLispシンボルに言及する際は、大文字小文字を絶
     対に変更しないこと。そのシンボルの名前が‘foo’なら、“Foo”ではなく
     “foo”である(“Foo”は違うシンボルだ)。

     これは、関数の引数の値の記述ポリシーと反するように見えるかもしれな
     いが、矛盾は実際には存在しない。引数の_value_は、その関数が値の保持
     に使用する_symbol_と同じではない。

     これによりセンテンス先頭に小文字を置くことになり、それが煩しいなら
     、センテンス開始がシンボルにならないようそのセンテンスを書き換える
     こと。

   • ドキュメント文字列の開始と終了は空白文字を使用しないこと。

   • ソースコード内の後続行のテキストが、最初の行と揃うとうに、ドキュメ
     ント文字列の後続行を*インデントしてはならない*。これはソースコード
     では見栄えがよいが、ユーザーがドキュメトを閲覧する際は奇妙な見栄え
     になる。開始のダブルクォーテーションの前のインデントは、その文字列
     の一部には含まれないことを忘れないこと!

   • ドキュメント文字列がLispシンボルを参照する際には、たとえば
     ‘lambda’のように、それがプリントされるとき(通常は小文字を意味する
     )のように、前後をシングルクォーテーションで括るとともに、記述するこ
     と。2つ例外はある。‘t’と‘nil’はシングルクォーテーションを記述しない
     (このマニュアルでは、すべてのシンボルをシングルクォーテーションで括
     り、異なる慣習を使用している)。

     Helpモードは、シングルクォーテーションの内部のシンボル名がドキュメ
     ント文字列で使用されている際、それが関数と変数のいずれかの定義をも
     つ婆には、自動的にハイパーリンクを作成する。これらの機能を使用する
     のに、何か特別なことを行う必要はない。しかしあるシンボルが関数と変
     数の両方の定義をもち、れらの一方だけを参照したい場合にには、そのシ
     ンボル名の直前に‘variable’、‘option’、‘function’、‘command’の単語の
     いずれかを記述して、それを指定できる(これらの指示語の識別では大文字
     小文字に差はない)。たとえば以下を記述すると

          This function sets the variable `buffer-file-name'.

     これのハイパーリンクは‘buffer-file-name’の変数のドキュメントだけを
     参照し、関数のドキュメントは参照しない。

     あるシンボルが関数、および/または変数の定義をもつが、ドキュメントし
     ているシンボルの使用とそれらが無関係なら、すべてのハイパーリンク作
     成を防ぐために、そのシンボル名の前に単語‘symbol’か‘program’を記述で
     きる。たとえば、

          If the argument KIND-OF-RESULT is the symbol `list',
          this function returns a list of all the objects
          that satisfy the criterion.

     これは、ここでは無関係な関数‘list’のドキュメントに、ハイパーリンク
     を作成しない。

     通常、変数ドキュメントがない変数には、ハイパーリンクは作成されない
     。そのような変数の前に単語‘variable’と‘option’のいずれかを記述すれ
     ば、ハイパーリンクの作成を強制できる。

     フェイスにたいするハイパーリンクは、そのフェイスの前か後に単語
     ‘face’があれば作成される。この場合には、たとえそのシンボルが変数や
     関数として定義されていても、フェイスのドキュメントだけが表示される
     。

     Infoドキュメントにハイパーリンクを作成するには、‘info node’、‘Info
     node’、‘info anchor’、‘Info anchor’のいずれかの後に、シングルクォー
     テーション内にInfoのノード(かアンカー)を記述する。このInfoファイル
     名のデフォルトは‘emacs’である。たとえば、

          See Info node `Font Lock' and Info node `(elisp)Font Lock Basics'.

     最後にURLのハイパーリンクを作成するには、‘URL’の後にシングルクォー
     テーションで括ったURLを記述する。たとえば、

          The home page for the GNU project has more information (see URL
          `http://www.gnu.org/').

   • ドキュメント文字列内に直接キーシーケンスを記述しないこと。かわりに
     、それらを表すために‘\\[...]’構造を使用すること。たとえば‘C-f’と記
     述するかわりに、‘\\[forward-char]’と記述する。Emacsがドキュメント文
     字列を表示する際には、何であれカレントで‘forward-char’にバインドさ
     れたキーに置き換える(これは通常は‘C-f’だが、そのユーザーがキーバイ
     ンディングを移動していれば、何か他の文字かもしれない)。*note Keys
     in Documentation::を参照のこと。

   • メジャーモードのドキュメント文字列では、グローバルマップではなく、
     そのモードのローカルマップを参照したいだろう。したがって、どのキー
     マップを使用するか指定するために、ドキュメント文字列内で一度
     ‘\\<...>’構造を使用する。最初に‘\\[...]’を使用する前にこれを行うこ
     と。‘\\<...>’の内部のテキストは、そのメジャーモードにたいするローカ
     ルキーマップを含む変数名であること。

     ドキュメント文字列の表示が低速になるので、非常に多数回の‘\\[...]’の
     使用は実用的ではない。メジャーモードのもっとも重要なコマンドの記述
     にこれを使用し、そのモードの残りのキーマップの表示には‘\\{...}’を使
     用する。

   • 一貫性を保つために,関数のドキュメント文字列の最初のセンテンス内の動
     詞は、命令形で表すこと。たとえば“Return the cons of A and B.”か、好
     みによっては“Returns the cons of A and B.”を使用する。通常は、最初
     のパラグラフの残りの部分にたいして、同様に行っても見栄えがよい。各
     センテンスが叙実的で適切な主題をもつなら、後続のパラグラフの見栄え
     はよくなる。

   • yes-or-no述語であるような関数のドキュメント文字列は、何が“真”を構成
     するか明示的に示すために、“Return t if”のような単語で始まるべきであ
     る。単語“return”は、小文字の“t”で開始される、幾分紛らわしい可能性の
     あるセンテンスを避ける。

   • ドキュメント文字列内の開カッコで始まる行は、以下のように開カッコの
     前にバックスラッシュを記述する:

          The argument FOO can be either a number
          \(a buffer position) or a string (a file name).

     これはその開カッコがdefunの開始として扱われることを防ぐ(*note
     Defuns: (emacs)Defuns.を参照)。

   • ドキュメント文字列は受動態ではなく能動態、未来形ではなく現在形で記
     述すること。たとえば、“A list containing A and B will be
     returned.”ではなく、“Return a list containing A and B.”と記述するこ
     と。

   • 不必要な“cause”(および同等の単語)の使用を避けること。“Cause Emacs
     to display text in boldface”ではなく、単に“Display text in
     boldface”と記述すること。

   • 多くの人にとってなじみがなく、それをtypoと間違えるであろうから、
     “iff”(“if and only if”を意味する数学用語)の使用を避けること。ほとん
     どの場合、その意味は単なる“if”で明快である。それ以外では、その意味
     を伝える代替えフレーズを探すよう試みること。

   • 特定のモードや状況でのみコマンドに意味がある際には、ドキュメント文
     字列内でそれに言及すること。たとえば‘dired-find-file’のドキュメント
     は:

          In Dired, visit the file or directory named on this line.

   • ユーザーがセットしたいと望むかもしれないオプションを表す変数を定義
     する際には、‘defcustom’を使用すること。*note Defining Variables::を
     参照されたい。

   • yes-or-noフレアグであるような変数のドキュメント文字列は、すべての非
     ‘nil’値が等価であることを明確にし、‘nil’と非‘nil’が何を意味するかを
     明示的に示すために、“Non-nil means”のような単語で始めること。


File: elisp,  Node: Comment Tips,  Next: Library Headers,  Prev: Documentation Tips,  Up: Tips

D.7 Tips on Writing Comments
============================

コメントにたいして、以下の慣習を推奨します:

‘;’
     1つのセミコロン‘;’で始まるコメントは、すべてソースコードの右側の同
     じ列に揃えられる。そのようなコメントは通常、その行のコードがどのよ
     うに処理を行うかを説明する。たとえば:

          (setq base-version-list                 ; There was a base
                (assoc (substring fn 0 start-vn)  ; version to which
                       file-version-assoc-list))  ; this looks like
                                                  ; a subversion.

‘;;’
     2つのセミコロン‘;;’で始まるコメントは、コードと同じインデントレベル
     で揃えられる。そのようなコメントは通常、その後の行の目的や、その箇
     所でのプログラムの状態を説明する。たとえば:

          (prog1 (setq auto-fill-function
                       ...
                       ...
            ;; Update mode line.
            (force-mode-line-update)))

     わたしたちは、通常は関数の外側のコメントにも2つのセミコロンを使用す
     る。

          ;; This Lisp code is run in Emacs when it is to operate as
          ;; a server for other processes.

     関数がドキュメント文字列をもたなければ、かわりにその関数の直前にそ
     の関数が何を行うかと、正しく呼び出す方法を説明する、2つのセミコロン
     のコメントをもつべきである。各引数の意味と、引数で可能な値をその関
     数が解釈する方法を、しっかり説明すること。しかし、そのようなコメン
     トはドキュメント文字列に変換するほうが、はるかに優れている。

‘;;;’
     3つのセミコロン‘;;;’デ始まるコメントは、左マージンから始まる。わた
     したちは、Outlineマイナーモードの“heading(ヘッダー)”とみなされるべ
     きコメントに、それらを使用している。デフォルトでは、少なくとも(後に
     1つの空白文字と非空白文字が続く)3つのセミコロンはheadingとみなし、
     2つ以下のセミコロンで始まるものはheadingとみなさない。歴史的に、3つ
     のセミコロンのコメントは関数内での行のコメントアウトに使用されてき
     たが、この使用は推奨しない。

     関数全体をコメントアウトするときは、2つのセミコロンを使用する。

‘;;;;’
     4つのセミコロン‘;;;;’で始まるコメントは左マージンに揃えられ、プログ
     ラムのメジャーセクションのheadingに使用される。たとえば:

          ;;;; The kill ring

一般的に言うと、コマンド‘M-;’ (‘comment-dwim’)は、適切なタイプのコメント
を自動的に開始するか、セミコロンの数に応じて、既存のコメントを正しい位置
にインデントします。*note Manipulating Comments: (emacs)Comments.を参照
してください。


File: elisp,  Node: Library Headers,  Prev: Comment Tips,  Up: Tips

D.8 Conventional Headers for Emacs Libraries
============================================

Emacsには、セクションに分割して、それの記述者のような情報を与えるために
、Lispライブラリー内で特別なコメントを使用する慣習があります。それらのア
イテムにたいして標準的なフォーマットを使用すれば、ツール(や人)か関連する
情報を抽出するのが簡単になります。このセクションでは、以下の例を出発点に
これらの慣習を説明します。

     ;;; foo.el --- Support for the Foo programming language

     ;; Copyright (C) 2010-2015 Your Name

     ;; Author: Your Name <yourname@example.com>
     ;; Maintainer: Someone Else <someone@example.com>
     ;; Created: 14 Jul 2010
     ;; Keywords: languages
     ;; Homepage: http://example.com/foo

     ;; This file is not part of GNU Emacs.

     ;; This file is free software...
     ...
     ;; along with this file.  If not, see <http://www.gnu.org/licenses/>.

   一番最初の行は、以下のフォーマットをもつべきです:

     ;;; FILENAME --- DESCRIPTION

この説明は1行に収まる必要があります。そのファイルに‘-*-’指定が必要なら、
DESCRIPTIONの後に配置してください。これにより最初の行が長くなりすぎるよ
うなら、そのファイル終端でLocal Variablesセクションを使用してください。

   著作権表示には、(あなたがそのファイルを記述したなら)通常はあなたの名
前をリストします。あなたの作業の著作権を主張する雇用者がいる場合には、か
わりに彼らをリストする必要があるかもしれません。Emacsディストリビューシ
ョンにあなたのファイルが受け入れられていなければ、著作権者がFree
Software Foundation(またはそのファイルがGNU Emacsの一部)だと告げないでく
ださい。著作権とライセンス通知の形式に関するより詳細な情報は、the guide
on the GNU website (http://www.gnu.org/licenses/gpl-howto.html)を参照し
てください。

   著作権表示の後は、それぞれが‘;; HEADER-NAME:’で始まる、複数の“ヘッダ
ーコメント(header comment)”を記述します。以下は、慣習的に利用できる
HEADER-NAMEのテーブルです:

‘Author’
     この行は、その少なくともライブラリーの主要な作者の、名前とemailアド
     レスを示す。複数の作者がいる場合は、前に‘;;’とタブか少なくとも2つの
     スペースがある継続行で、彼らをリストする。わたしたちは、‘<...>’とい
     う形式で連絡用emailアドレスを含めることを推奨する。たとえば:

          ;; Author: Your Name <yourname@example.com>
          ;;      Someone Else <someone@example.com>
          ;;      Another Person <another@example.com>

‘Maintainer’
     このヘッダーは、Authorヘッダーと同じフォーマットである。これは、現
     在そのファイルを保守(バグレポートへの応答等)をする人(か人々)をリス
     トする。

     Maintainerの行がなければ、Authorフィールドの人(人々)が、
     Maintainerとみなされる。Emacs内のいくつかのファイルは、Maintainerに
     ‘FSF’を使用している。これは、そのファイルにたいしてオリジナル作者が
     もはや責任をもっておらず、Emacsの一部として保守されていることを意味
     する。

‘Created’
     このオプションの行は、そのファイルのオリジナルの作成日付を与えるも
     ので、歴史的な興味のためだけにある。

‘Version’
     個々のLispプログラムにたいしてバージョン番号を記録したいなら、この
     行に配置する。Emacsとともに配布されたLispファイルは、Emacsのバージ
     ョン番号自体が同じ役割を果たすので、一般的には‘Version’ヘッダーをも
     たない。複数ファイルのコレクションを配布する場合には、各ファイルで
     はなく、主となるファイルにバージョンを記述することを推奨する。

‘Keywords’
     この行は、ヘルプコマンド‘finder-by-keyword’にたいするキーワードをリ
     ストする。意味のあるキーワードのリストを確認するために、このコマン
     ドを使用してほしい。

     このフィールドは、トピックでパッケージを探す人が、あなたのパッケー
     ジを見つける手段となる。キーワードを分割するには、スペースとカンマ
     の両方を使用できる。

     人はしばしばこのフィールドを、単にFinder(訳注: ‘finder-by-keyword’が
     オープンするバッファー)に関連したキーワードではなく、そのパッケージ
     を説明する任意のキーワードを記述する箇所だとみなすのは不運なことで
     ある。

‘Homepage’
     この行は、そのライブラリーのホームページを示す。

‘Package-Version’
     ‘Version’がパッケージマネージャーによる使用に適切でなければ、パッケ
     ージは‘Package-Version’を定義できる。かわりにこれが使用される。これ
     は‘Version’がRCSや‘version-to-list’でパース不能な何かであるようなら
     、これが手軽である。*note Packaging Basics::を参照のこと。

‘Package-Requires’
     これが存在する場合には、カレントパッケージが正しく動作するために依
     存するパッケージを示す。*note Packaging Basics::を参照のこと。これ
     は(パッケージの完全なセットがダウンロードされることを確実にするため
     に)ダウンロード時と、(すべての依存パッケージがあるときだけパッケー
     ジがアクティブになることを確実にするために)アクティブ化の両方で、パ
     ッケージマネージャーにより使用される。

     これのフォーマットは、リストのリストである。サブリストそれぞれの
     ‘car’は、パッケージの名前(シンボル)、‘cadr’は許容できる最小のバージ
     ョン番号(文字列)。たとえば:

          ;; Package-Requires: ((gnus "1.0") (bubbles "2.7.2"))

     パッケージのコードは自動的に、実行中のEmacsのカレントのバージョン番
     号をもつ、‘emacs’という名前のパッケージを定義する。これは、パッケー
     ジが要求するEmacsの最小のバージョンに使用できる。

   ほぼすべてのLispライブラリーは、‘Author’と‘Keywords’のヘッダーコメン
ト行をもつべきです。適切なら、他のものを使用してください。ヘッダー行内で
、別のヘッダー行の名前も使用できます。これらは標準的な意味をもたないので
、害になることを行うことはできません。

   わたしたちは、ライブラリーファイルのコンテンツを分割するために、追加
の提携コメントを使用します。これらは空行で他のものと分離されている必要が
あります。以下はそれらのテーブルです:

‘;;; Commentary:’
     これは、そのライブラリーが機能する方法を説明する、概論コメントを開
     始する。これは複製許諾の直後にあり‘Change Log’、‘History’、‘Code’の
     コメント行で終端されていること。このテキストはFinderパッケージで使
     用されるので、そのコンテキスト内で有意であること。

‘;;; Change Log:’
     これは、時間とともにそのファイルに加えられた、オプションの変更ロク
     を開始する。このセクションに過剰な情報を配してはならない。(Emacsが
     行うように)バージョンコントロールシステムの詳細ログや、個別の
     ‘ChangeLog’ファイルに留めるほうがよい。‘History’は、‘Change Log’の
     代替えである。

‘;;; Code:’
     これは、そのプログラムの実際のコードを開始する。

‘;;; FILENAME ends here’
     これは“フッター行(footer line)”である。これはそのファイルの終端にあ
     る。これの目的は、フッター行の欠落から、人がファイルの切り詰められ
     たバージョンを検知することを可能にする。
