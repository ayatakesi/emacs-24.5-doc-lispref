@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1994, 1999, 2001-2015 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node Abbrevs
@chapter Abbrevs and Abbrev Expansion
@cindex abbrev
@c  @cindex abbrev table  Redundant with "abbrev".

  略語(abbreviation)、または@dfn{abbrev}は、より長い文字列へと展開される文字列です。ユーザーはabbrev文字列を挿入して、それを探して自動的にabbrevの展開形に置換できます。これによりタイプ量を節約できます。

  カレントで効果をもつabbrevsのセットは、@dfn{abbrevテーブル(abbrev
table)}内に記録されます。バッファーはそれぞれローカルにabbrevテーブルをもちますが、通常は同一のメジャーモードにあるすべてのバッファーが1つのabbrevテーブルを共有します。グローバルabbrevテーブルも存在します。通常は両者が使用されます。

  abbrevテーブルはobarrayとして表されます。obarraysについての情報は、@ref{Creating
Symbols}を参照してください。,abbrevはそれぞれ、obarray内のシンボルとして表現されます。そのシンボルの名前がabbrevで、値が展開形になります。シンボルの関数定義は展開を行うフック関数です(@ref{Defining
Abbrevs}を参照)。また、シンボルノプロパティセルには、使用回数やそのabbrevが展開された回数を含む、さまざまな追加プロパティが含まれます(@ref{Abbrev
Properties}を参照)。

@cindex system abbrev
  @dfn{システムabbrev(system
abbrevs)}と呼ばれる特定のabbrevは、ユーザーではなくメジャーモードにより定義されます。システムabbrevは、非@code{nil}の@code{:system}プロパティにより識別されます(@ref{Abbrev
Properties}を参照)。abbrevがabbrevファイルに保存される際、システムabbrevは省略されます。@ref{Abbrev
Files}を参照してください。

  abbrevに使用されるシンボルは通常のobarrayにinternされないので、Lisp式の読み取り結果として現れることは決してありません。実際に、通常はabbrevを扱うコードを除き、それらが使用されることはありません。したがって、それらを非標準的な方法で使用しても安全なのです。

  マイナーモードであるAbbrevモードが有効な場合、バッファーローカル変数@code{abbrev-mode}は非@code{nil}となり、そのバッファー内で、abbrevは自動的に展開されます。abbrev用のユーザーレベルのコマンドについては、@ref{Abbrevs,,
Abbrev Mode, emacs, The GNU Emacs Manual}を参照してください。

@menu
* Tables: Abbrev Tables.     abbrevテーブルの作成と操作。
* Defining Abbrevs::         略語の指定とそれらの展開。
* Files: Abbrev Files.       ファイルへのabbrevの保存。
* Expansion: Abbrev Expansion.  展開の制御と展開サブルーチン。
* Standard Abbrev Tables::   種々メジャーモードに使用されるabbrevテーブル。
* Abbrev Properties::        abbrevプロパティの読み取りとセットを行う方法。どのプロパティが何の効果をもつか。
* Abbrev Table Properties::  abbrevテーブルプロパティの読み取りとセットを行う方法。どのプロパティが効果をもつか。
@end menu

@node Abbrev Tables
@section Abbrev Tables
@cindex abbrev tables

  このセクションでは、abbrevテーブルの作成と操作を行う方法について説明します。

@defun make-abbrev-table &optional props
この関数は、空のabbrevテーブル(シンボルを含まないobarray)を作成してリターンする。これは0で充填されたベクターである。@var{props}は、新たなテーブルに適用されるプロパティリストである(@ref{Abbrev
Table Properties}を参照)。
@end defun

@defun abbrev-table-p object
この関数は、@var{object}がabbrevテーブルなら、非@code{nil}をリターンする。
@end defun

@defun clear-abbrev-table abbrev-table
@c Don't see why this needs saying.
@c It always returns @code{nil}.
この関数は、@var{abbrev-table}内のabbrevをすべて未定義とし、空のまま残す。
@end defun

@defun copy-abbrev-table abbrev-table
この関数は、@var{abbrev-table}のコピー(同じabbrev定義を含む新たなabbrevテーブル)をリターンする。これは名前、値、関数だけをコピーし、プロパティリストは何も@emph{コピーしない}。
@end defun

@defun define-abbrev-table tabname definitions &optional docstring &rest props
この関数はabbrevテーブル名(値がabbrevテーブルであるような変数)として@var{tabname}(シンボル)を定義する。これは、そのテーブル内に@var{definitions}に応じて、abbrevを定義する。@var{definitions}は、@code{(@var{abbrevname}
@var{expansion} [@var{hook}]
[@var{props}...])}という形式の要素をもつリストである。これらの要素は引数として、@code{define-abbrev}に渡される。  

オプション文字列@var{docstring}は、変数@var{tabname}のドキュメント文字列である。プロパティリスト@var{props}は、abbrevテーブルに適用される(@ref{Abbrev
Table Properties}を参照)。

同一の@var{tabname}にたいしてこの関数が複数回呼び出された場合は、元のコンテンツ全体を上書きせずに、後続の呼び出しは@var{definitions}内の定義を@var{tabname}に追加する(後続の呼び出しでは、@var{definitions}内で明示的に再定義または未定義にした場合のみabbrevを上書きできる)。
@end defun

@defvar abbrev-table-name-list
これは、値がabbrevテーブルであるようなシンボルのリストである。@code{define-abbrev-table}は、このリストに新たなabbrevテーブル名を追加する。
@end defvar

@defun insert-abbrev-table-description name &optional human
この関数は、ポイントの前に名前が@var{name}のabbrevテーブルの説明を挿入する。引数@var{name}は、値がabbrevテーブルであるようなシンボルである。  

@var{human}が非@code{nil}なら、説明は人間向けになる。システムabbrevはそのようにリストされ、識別される。それ以外なら説明はLisp式(カレントで定義されているように@var{name}を定義するが、システムabbrevとしては定義しないような@code{define-abbrev-table}呼び出し)となる(@var{name}を使用するモードまたはパッケージは、それらを個別に@var{name}に追加すると想定されている)。
@end defun

@node Defining Abbrevs
@section Defining Abbrevs
@cindex defining abbrevs

  @code{define-abbrev}は、abbrevテーブル内にabbrevを定義するための基本的な低レベル関数です。

  メジャーモードがシステムabbrevを定義する際は、@code{:system}プロパティに@code{t}を指定して@code{define-abbrev}を呼び出すべきです。すべての保存された非``システム''abbrevは起動時(何らかのメジャーモードがロードされる前)にリストアされることに注意してください。したがってメジャーモードは、最初にそのモードがロードされた際、それらのモードのabbrevテーブルが空であると仮定するべきではありません。

@defun define-abbrev abbrev-table name expansion &optional hook &rest props
この関数は、@var{abbrev-table}内に@var{name}という名前で、@var{expansion}に展開され、@var{hook}を呼び出すabbrevを、プロパティ@var{props}(@ref{Abbrev
Properties}を参照)とともに定義する。リターン値は@var{name}。ここでは、@var{props}内の@code{:system}プロパティは特別に扱われる。このプロパティが値@code{force}をもつなら、たとえ同じ名前の非``システム''abbrevでも、既存の定義を上書きするだろう。

@var{name}は文字列であること。引数@var{expansion}は通常は望む展開形(文字列)であり、@code{nil}ならそのabbrevを未定義とする。これが文字列または@code{nil}以外の何かなら、そのabbrevは@var{hook}を実行することにより、単に``展開''される。

引数@var{hook}は、関数または@code{nil}であること。@var{hook}が非@code{nil}なら、abbrevが@var{expansion}に置換された後に、引数なしでそれが呼び出される。@var{hook}呼び出し時、ポイントは@var{expansion}の終端に置かれる。

@cindex @code{no-self-insert} property
@var{hook}が、@code{no-self-insert}プロパティが非@code{nil}であるような、非@code{nil}のシンボルなら、@var{hook}は展開をトリガーするような自己挿入入力文字を挿入できるかどうかを、明示的に制御できる。この場合、@var{hook}が非@code{nil}をリターンしたら、その文字の挿入を抑止する。対照的に、@var{hook}が@code{nil}をリターンした場合は、あたかも実際には展開が行われなかったかのように、@code{expand-abbrev}(または@code{abbrev-insert})も@code{nil}をリターンする。

通常@code{define-abbrev}は、実際にabbrevを変更した場合は、変数@code{abbrevs-changed}に@code{t}をセットする。これはいくつかのコマンドが、abbrevの保存を提案するためである。システムabbrevは、いずれにせよ保存されないので、システムabbrevにたいして、これは行われない。
@end defun

@defopt only-global-abbrevs
この変数が非@code{nil}なら、それはユーザーがグローバルabbrevのみの使用を計画していることを意味する。これはモード固有のabbrevを定義するコマンドにたいして、かわりにグローバルabbrevを定義するよう指示する。この変数は、このセクション内の関数の振る舞いを変更しない。それは呼び出し側により検証される。
@end defopt

@node Abbrev Files
@section Saving Abbrevs in Files
@cindex save abbrevs in files

  abbrev定義が保存されたファイルは、実際にはLispコードのファイルです。abbrevは、同じコンテンツの同じabbrevテーブルを定義する、Lispプログラムの形式で保存されます。したがってそのファイルは、@code{load}でロードすることができます(@ref{How
Programs Do
Loading}を参照)。しかし、より簡便なインターフェースとして、関数@code{quietly-read-abbrev-file}が提供されています。起動時に、Emacsは自動的にこの関数を呼び出します。

  @code{save-some-buffers}のようなユーザーレベルの機能は、ここで説明する変数の制御下で、自動的にabbrevをファイルに保存できます。

@defopt abbrev-file-name
これは、abbrevの読み込みと保存のための、デフォルトのファイル名である。
@end defopt

@defun quietly-read-abbrev-file &optional filename
この関数は、以前に@code{write-abbrev-file}で書き込まれた、@var{filename}という名前のファイルから、abbrevの定義を読み込む。@var{filename}が省略または@code{nil}なら、@code{abbrev-file-name}内で指定されているファイルが使用される。

@c It returns @code{nil}.
その名前が暗示するように、この関数は何のメッセージも表示しない。
@end defun

@defopt save-abbrevs
@code{save-abbrevs}にたいする非@code{nil}値は、ファイル保存時に、(もし何か変更されていれば)Emacsがabbrevの保存を提案するべきであることを意味する。値が@code{silently}なら、Emacsはユーザーに尋ねることなく、abbrevを保存する。@code{abbrev-file-name}は、abbrevを保存するファイルを指定する。
@end defopt

@defvar abbrevs-changed
この変数は、abbrev(システムabbrevを除く)の定義または変更によりセットされる。これは、さまざまなEmacsコマンドにとって、ユーザーにabbrevの保存を提案するための、フラグとしての役目をもつ。
@end defvar

@deffn Command write-abbrev-file &optional filename
@code{abbrev-table-name-list}内にリストされたすべてのabbrevテーブルにたいして、すべてのabbrev定義(システムabbrevを除く)を、ロード時に同じabbrevを定義するであろうLispプログラム形式で、ファイル@var{filename}内に保存する。@var{filename}が@code{nil}なら、@code{abbrev-file-name}が仕様される。この関数は@code{nil}をリターンする。
@end deffn

@node Abbrev Expansion
@section Looking Up and Expanding Abbreviations
@cindex looking up abbrevs
@cindex expanding abbrevs
@cindex abbrevs, looking up and expanding

  abbrevは通常、@code{self-insert-command}を含む、特定のinteractiveなコマンドにより展開されます。このセクションでは、そのようなコマンドの記述に使用されるサブルーチン、並びに通信のために使用される変数について説明します。

@defun abbrev-symbol abbrev &optional table
この関数は、@var{abbrev}という名前のabbrevを表すシンボルをリターンする。そのabbrevが定義されていなければ、@code{nil}をリターンする。オプションの2つ目の引数@var{table}は、それを照合するためのabbrevテーブルである。@var{table}が@code{nil}なら、この関数はまずカレントバッファーのローカルabbrevテーブル、次にグローバルabbrevテーブルを試みる。
@end defun

@defun abbrev-expansion abbrev &optional table
この関数は、@var{abbrev}が展開されるであろう文字列(カレントバッファーにたいして使用されるabbrevテーブルで定義される文字列)をリターンする。これは@var{abbrev}が有効なabbrevでなければ、@code{nil}をリターンする。オプション引数@var{table}は@code{abbrev-symbol}の場合と同様、使用するabbrevテーブルを指定する。
@end defun

@deffn Command expand-abbrev
このコマンドは、(もしあれば)ポイントの前のabbrevを展開する。ポイントがabbrevの後になければ、このコマンドは何もしない。展開を行うために、これは変数@code{abbrev-expand-function}の値となっている関数を引数なしで呼び出し、何であれその関数がリターンしたものをリターンする。

デフォルトの展開関数は、展開を行ったらabbrevのシンボル、それ以外は@code{nil}をリターンする。そのabbrevシンボルが、@code{no-self-insert}プロパティが非@code{nil}のシンボルであるようなフック関数をもち、そのフック関数が値として@code{nil}をリターンした場合は、たとえ展開が行われたとしても、デフォルト展開関数は@code{nil}をリターンする。
@end deffn

@defun abbrev-insert abbrev &optional name start end
この関数は、@code{start}と@code{end}の間のテキストを置換することにより、@code{abbrev}のabbrev展開形を挿入する。@code{start}が省略された場合のデフォルトは、ポイントである。@code{name}が非@code{nil}なら、それはこのabbrevが見つかった名前(文字列)であること。これは展開形のcapitalizationを調整するかどうかを判断するために使用される。この関数は、abbrevの挿入に成功したら@code{abbrev}をリターンする。
@end defun

@deffn Command abbrev-prefix-mark &optional arg
このコマンドは、ポイントのカレント位置を、abbrevの開始としてマークする。@code{expand-abbrev}の次回呼び出しでは、通常のように以前の単語ではなく、ここからポイント(その時点での位置)にあるテキストが展開するべきabbrevとして使用される。

このコマンドはまず、@var{arg}が@code{nil}なら、ポイントの前の任意のabbrevを展開する(インタラクティブな呼び出しでは、@var{arg}はプレフィクス引数である)。それから、展開する次のabbrevの開始を示すために、ポイントの前にハイフンを挿入する。実際の展開では、ハイフンは削除される。
@end deffn

@defopt abbrev-all-caps
これが非@code{nil}にセットされているときは、すべて大文字で入力されたabbrevは、すべて大文字を使用して展開される。それ以外なら、すべて大文字で入力されたabbrevは、展開形の単語ごとにcapitalizeして展開される。
@end defopt

@defvar abbrev-start-location
この変数の値は、次にabbrevを展開する開始位置として@code{expand-abbrev}に使用される、バッファー位置である。値は@code{nil}も可能で、かわりにポイントの前の単語を使用することを意味する。@code{abbrev-start-location}は、@code{expand-abbrev}の呼び出しごとに、毎回@code{nil}にセットされる。この変数は、@code{abbrev-prefix-mark}によってもセットされる。
@end defvar

@defvar abbrev-start-location-buffer
この変数の値は、@code{abbrev-start-location}がセットされたバッファーである。他のバッファーでabbrev展開を試みることにより、@code{abbrev-start-location}はクリアーされる。この変数は、@code{abbrev-prefix-mark}によりセットされる。
@end defvar

@defvar last-abbrev
これは、直近のabbrev展開の@code{abbrev-symbol}である。これは、@code{unexpand-abbrev}コマンド(@ref{Expanding
Abbrevs,, Expanding Abbrevs, emacs, The GNU Emacs
Manual}を参照)のために、@code{expand-abbrev}により残された情報である。
@end defvar

@defvar last-abbrev-location
これは、直近の.abbrev展開の場所である。これには、@code{unexpand-abbrev}コマンドのために@code{expand-abbrev}により残された情報が含まれる。
@end defvar

@defvar last-abbrev-text
これは直近のabbrev展開の正確な展開形を、(もしあれば)大文字小文字変換した後のテキストである。そのabbrevがすでに非展開されていれば、値は@code{nil}になる。これには@code{unexpand-abbrev}コマンドのために、@code{expand-abbrev}により残された情報が含まれる。
@end defvar

@defvar abbrev-expand-function
この変数の値は、展開を行うために@code{expand-abbrev}が引数なしで呼び出すであろう関数である。この関数では、展開を行う前後に行いたいことを行うことができる。展開が行われた場合は、そのabbrevシンボルをリターンすること。
@end defvar

  以下のサンプルコードで、@code{abbrev-expand-function}のシンプルな使い方を示します。このサンプルでは、@code{foo-mode}が@samp{#}で始まる行がコメントであるような、特定のファイルを編集するためのモードであるとします。それらコメント行にたいしては、Textモードのabbrevの使用が望ましく、その他すべての行にたいしては、正規のローカルabbrevテーブル@code{foo-mode-abbrev-table}が適しています。@code{local-abbrev-table}と@code{text-mode-abbrev-table}の定義については、@ref{Standard
Abbrev Tables}を参照してください。@code{add-function}についての詳細は、@ref{Advising
Functions}を参照してください。

@smallexample
(defun foo-mode-abbrev-expand-function (expand)
  (if (not (save-excursion (forward-line 0) (eq (char-after) ?#)))
      ;; 通常の展開を行う
      (funcall expand)
    ;; コメント内はtext-modeのabbrevを使用
    (let ((local-abbrev-table text-mode-abbrev-table))
      (funcall expand))))

(add-hook 'foo-mode-hook
          #'(lambda ()
              (add-function :around (local 'abbrev-expand-function)
                            #'foo-mode-abbrev-expand-function)))
@end smallexample

@node Standard Abbrev Tables
@section Standard Abbrev Tables
@cindex standard abbrev tables

  以下は、Emacsの事前ロードされるメジャーモード用のabbrevテーブルを保持する変数のリストです。

@defvar global-abbrev-table
これは、モード非依存なabbrev用のabbrevテーブルである。この中で定義されるabbrevは、すべてのバッファーに適用される。各バッファーはローカルabbrevテーブルももつかもしれず、それのabbrev定義はグローバルテーブル内のabbrev定義より優先される。
@end defvar

@defvar local-abbrev-table
このバッファーローカル変数の値は、カレントバッファーの(モード固有の)abbrevテーブルである。これは、そのようなテーブルのリストでもあり得る。
@end defvar

@defvar abbrev-minor-mode-table-alist
この変数の値は、@code{(@var{mode}
.
@var{abbrev-table})}という形式のリストである。ここで@var{mode}は変数の名前である。その変数が非@code{nil}にバインドされていれば@var{abbrev-table}はアクティブで、それ以外なら無視される。@var{abbrev-table}は、abbrevテーブルのリストでもあり得る。
@end defvar

@defvar fundamental-mode-abbrev-table
これは、Fundamentalモードで使用される、ローカルabbrevテーブルである。別の言い方をすると、これはFundamentalモードにあるすべてのバッファーの、ローカルabbrevテーブルである。
@end defvar

@defvar text-mode-abbrev-table
これは、Textモードで使用される、ローカルabbrevテーブルである。
@end defvar

@defvar lisp-mode-abbrev-table
これはLispモードで使用されるローカルabbrevテーブルであり、Emacs
Lispモードで使用されるローカルabbrevテーブルの親テーブルである。@ref{Abbrev Table Properties}を参照のこと。
@end defvar

@node Abbrev Properties
@section Abbrev Properties
@cindex abbrev properties

abbrevはプロパティをもち、それらのいくつかはabbrevの働きに影響します。これらのプロパティを@code{define-abbrev}の引数として提供して、以下の関数で操作できます:

@defun abbrev-put abbrev prop val
@var{abbrev}のプロパティ@var{prop}に値@var{val}をセットする。
@end defun

@defun abbrev-get abbrev prop
@var{abbrev}のプロパティ@var{prop}、そのabbrevがそのようなプロパティをもたなければ@code{nil}をリターンする。
@end defun

以下のプロパティには特別な意味があります:

@table @code
@item :count
このプロパティは、そのabbrevが展開された回数を計数する。明示的にセットしなければ、@code{define-abbrev}により0に初期化される。

@item :system
非@code{nil}なら、このプロパティはシステムabbrevとして、そのabbrevをマスクする。そのようなabbrevは保存されない(@ref{Abbrev
Files}を参照)。

@item :enable-function
非@code{nil}の場合、そのabbrevが使用されるべきでなければ@code{nil}、それ以外なら@code{t}をリターンするような、引数なしの関数であること。

@item :case-fixed
非@code{nil}なら、このプロパテぃはそのabbrevの大文字小文字には意味があり、同じパターンにcapitalizeされたテキストだけにマッチすべきことを示す。これは展開のcapitalizationを変更するコードも無効にする。
@end table

@node Abbrev Table Properties
@section Abbrev Table Properties
@cindex abbrev table properties

abbrevと同じようにabbrevテーブルもプロパティをもち、それらのいくつかはabbrevテーブルの働きに影響を与えます。これらのプロパティを@code{define-abbrev-table}の引数として提供して、それらを関数で操作できます:

@defun abbrev-table-put table prop val
abbrevテーブル@var{table}のプロパティ@var{prop}に、値@var{val}をセットする。
@end defun

@defun abbrev-table-get table prop
abbrevテーブルのプロパティ@var{prop}、そのabbrevテーブルがそのようなをプロパティもたなければ@code{nil}をリターンする。
@end defun

以下のプロパティには特別な意味があります:

@table @code
@item :enable-function
abbrevプロパティ@code{:enable-function}と似ているが、そのテーブル内のすべてのabbrevに適用される点が異なる。これはポイントの前のabbrevを探すことを試みる前にも使用されるので、abbrevテーブルを動的に変更することが可能である。

@item :case-fixed
これはabbrevプロパティ@code{:case-fixed}と似ているが、そのテーブル内のすべてのabbrevに適用される点が異なる。

@item :regexp
非@code{nil}なら、このプロパティはそのテーブルを照合する前に、ポイント前のabbrev名を抽出するための方法を示す正規表現である。その正規表現がポイントの前にマッチしたときは、そのabbrev名はsubmatchの1と期待される。このプロパティが@code{nil}なら、デフォルトは@code{backward-word}と@code{forward-word}を使用して、abbrevの名前を探す。このプロパティにより、単語構文以外の文字を含む名前のabbrevが使用できる。

@item :parents
このプロパティは、他のabbrevを継承したテーブルのリストを保持する。

@item :abbrev-table-modiff
このプロパティは、そのテーブルにabbrevが追加される度に増分されるカウンターを保持する。

@end table
