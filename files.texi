@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Files
@chapter Files

  このチャプターでは検索、作成、閲覧、保存、その他ファイルとディレクトリーにたいして機能する、Emacs
Lispの関数および変数について説明します。その他のいくつかのファイルに関する関数については@ref{Buffers}、バックアップとauto-save(自動保存)に関する関数については@ref{Backups
and Auto-Saving}で説明されています。

  ファイル関数の多くは、ファイル名であるような引数を1つ以上とります。このファイル名は文字列です。これらの関数のほとんどは、関数@code{expand-file-name}を使用してファイル名引数を展開するので、@file{~}は相対ファイル名(@file{../}を含む)として正しく処理されます。@ref{File
Name Expansion}を参照してください。

  加えて、特定の@dfn{magic}ファイル名は特別に扱われます。たとえば、リモートファイル名が指定された際、Emacsは適切なプロトコルを通じて、ネットワーク越しにファイルにアクセスします。@ref{Remote
Files,, Remote Files, emacs, The GNU Emacs
Manual}を参照してください。この処理は非常に低いレベルで行われるので、注記されたものを除き、このチャプターで説明するすべての関数が、ファイル名引数としてmagicファイル名を受け入れると想定しても良いでしょう。詳細は、@xref{Magic
File Names}を参照してください。

  ファイルI/O関数がLispエラーをシグナルする際、通常はコンディション@code{file-error}を使用します(@ref{Handling
Errors}を参照)。ほとんどの場合、オペレーティングシステムからロケール@code{system-messages-locale}に応じたエラーメッセージが取得され、コーディングシステム@code{locale-coding-system}を使用してデコードされます(@ref{Locales}を参照)。

@menu
* Visiting Files::           編集のためにEmacsバッファーにファイルを読み込む。
* Saving Buffers::           変更されたバッファーをファイルに書き戻す。
* Reading from Files::       ファイルをvisitせずにバッファーに読み込む。
* Writing to Files::         バッファーの一部から新たなファイルに書き込む。
* File Locks::               複数名による同時編集を防ぐためにファイルをlockまたはunlockする。
* Information about Files::  ファイルの存在、アクセス権、サイズのテスト。
* Changing Files::           ファイル名のリネームやパーミッションの変更など。
* File Names::               ファイル名の分解と展開。
* Contents of Directories::  ディレクトリーないのファイルリストの取得。
* Create/Delete Dirs::       ディレクトリーの作成と削除。
* Magic File Names::         特定のファイル名にたいする特別な処理。
* Format Conversion::        さまざまなファイルフォーマットへ/からの変換。
@end menu

@node Visiting Files
@section Visiting Files
@cindex finding files
@cindex visiting files

  ファイルのvisitとは、ファイルをバッファーに読み込むことを意味します。一度これを行うと、わたしたちはバッファーがファイルを@dfn{visit(訪問)}していると言い、ファイルのことをバッファーの``visit''されたファイルと呼んでいます。

  ファイルとバッファーは、2つの異なる事柄です。ファイルとは、(削除しない限り)コンピューター内に永続的に記録された情報です。一方バッファーとは、編集セッションの終了(またはバッファーのkill)とともに消滅する、Emacs内部の情報です。あるバッファーがファイルをvistしているとき、バッファーぬはファイルからコピーされた情報が含まれます。編集コマンドにより変更されるのは、バッファー内のコピーです。バッファーへの変更によりファイルは変更されません。その変更を永続化させるには、バッファーを@dfn{保存(save)}しなければなりません。これは変更されたバッファーのコンテンツをファイルにコピーして戻すことを意味します。

  ファイルとバッファーは異なるにも関わらず、人はバッファーという意味でファイルを呼んだり、その逆を行うことが多々あります。実際のところ、``わたしは間もなく同じ名前のファイルに保存するバッファーを編集している''ではなく、``わたしはファイルを編集している''と言います。人間がこの違いを明示する必要は、通常はありません。しかし、コンピュータープログラムに対処する際は、この違いを心に留めておくのが良いでしょう。

@menu
* Visiting Functions::       visit用の通常のインターフェイス関数。
* Subroutines of Visiting::  通常のvisit関数が使用する低レベルのサブルーチン。
@end menu

@node Visiting Functions
@subsection Functions for Visiting Files
@cindex visiting files, functions for
@cindex how to visit files

  このセクションでは、ファイルのvisitに通常使用される関数を説明します。歴史的な理由により、これらの関数は@samp{visit-}ではなく、@samp{find-}で始まる名前をもちます。バッファーをvisitしているファイルの名前へのアクセスや、visitされたファイル名から既存のバッファーを見つける関数および変数については、@ref{Buffer
File Name}を参照してください。

  Lispプログラム内では、ファイル内容を見たいものの変更したくない場合はテンポラリーバッファー(temporary buffer:
一時的なバッファー)で@code{insert-file-contents}を使用例するのが、もっとも高速な方法です。時間を要するファイルのvisitは必要ありません。@ref{Reading
from Files}を参照してください。

@deffn Command find-file filename &optional wildcards
このコマンドは、ファイル@var{filename}をvisitしているバッファーを選択する。visitしている既存のバッファーがあればそのバッファーを使用し、なければバッファーを新たに作成して、そのバッファーにファイルを読み込む。これはそのバッファーをリターンする。

技術的な詳細を別とすると、@code{find-file}関数のbodyは基本的には以下と等価である:

@smallexample
(switch-to-buffer (find-file-noselect filename nil nil wildcards))
@end smallexample

@noindent
(@ref{Switching Buffers}の@code{switch-to-buffer}を参照されたい。)

@var{wildcards}が非@code{nil}(これはinteractiveに呼び出された場合は常にtrueである)の場合、@code{find-file}は@var{filename}内のワイルドカード文字を展開して、マッチするすべてのファイルをvisitする。

@code{find-file}がinteractiveに呼び出された際は、ミニバッファー内で@var{filename}の入力を求める。
@end deffn

@deffn Command find-file-literally filename
このコマンドは、@code{find-file}が行うように@var{filename}をvisitするが、フォーマット変換(@ref{Format
Conversion}を参照)、文字コード変換(@ref{Coding Systems}を参照)、EOL変換(@ref{Coding System
Basics, End of line
conversion}を参照)を何も行わない。ファイルをvisitしているバッファーはunibyteになり、ファイル名とは無関係にバッファーのメジャーモードはFundamentalモードになる。ファイル内で指定されたファイルローカル変数(@ref{File
Local
Variables}を参照)は無視され、自動的な解凍と@code{require-final-newline}によるファイル終端への改行追加(@ref{Saving
Buffers, require-final-newline}を参照)も無効になる。

Emacsがすでにリテラリー(literally:
文字通り、そのまま)でない方法で同じファイルをvisitしているバッファーをもつ場合、Emacsはその同じファイルをリテラリーにvisitせず、単に既存のバッファーに切り替わることに注意されたい。あるファイルのコンテンツにたいして、確実にリテラリーにアクセスしたい場合は、テンポラリーバッファーを作成し、@code{insert-file-contents-literally}を使用してファイルのコンテンツを読み込むべきである(@ref{Reading
from Files}を参照)。
@end deffn

@defun find-file-noselect filename &optional nowarn rawfile wildcards
この関数は、ファイルをvisitするすべての関数の要である。これは、ファイル@var{filename}をvisitしているバッファーをリターンする。望むならそのバッファーをカレントにしたり、あるウィンドウ内に表示することができるだろうが、この関数はそれを行わない。

関数は、既存のバッファーがあればそれをリターンし、なければ新たにバッファーを作成し、それにファイルを読み込む。@code{find-file-noselect}が既存のバッファーを使用する際は、まずファイルがそのバッファーに最後にvisit、または保存したときから変更されていないことを検証する。ファイルが変更されている場合、この関数は変更されたファイルを再読み込みするかどうかをユーザーに尋ねる。ユーザーが@samp{yes}と応えた場合、以前に行われたそのバッファー内での編集は失われる。

ファイルの読み込みは、EOL変換、フォーマット変換(@ref{Format
Conversion}を参照)を含む、ファイルコンテンツのデコードを要する(@ref{Coding
Systems}を参照)。@var{wildcards}が非@code{nil}の場合、@code{find-file-noselect}は@var{filename}内のワイルドカード文字を展開して、マッチするすべてのファイルをvisitする。

この関数は、オプション引数@var{nowarn}が@code{nil}の場合は、さまざまな特殊ケースにおいて、警告メッセージ(warning
message)、および注意メッセージ(advisory
message)を表示する。たとえば、関数がバッファーの作成を必要とし、かつ@var{filename}という名前のファイルが存在しない場合は、エコーエリア内にメッセージ@samp{(New
file)}を表示して、そのバッファーを空のままに留める。

@code{find-file-noselect}関数は通常、ファイルを読み込んだ後に@code{after-find-file}を呼び出す(@ref{Subroutines
of
Visiting}を参照)。この関数はバッファーのメジャーモードのセット、ローカル変数のパース、正にvisitしたファイルより新しいauto-saveファイルが存在する場合のユーザーへの警告を行い、@code{find-file-hook}内の関数を実行することにより終了する。

オプション引数@var{rawfile}が非@code{nil}の場合、@code{after-find-file}は呼び出されず、失敗時に@code{find-file-not-found-functions}は呼び出されない。さらに、非@code{nil}値の@var{rawfile}は、コーディングシステム変換およびフォーマット変換を抑制する。

@code{find-file-noselect}関数は、通常はファイル@var{filename}をvisitしているバッファーをリターンする。しかし、ワイルドカードが実際に使用、展開された場合は、それらのファイルをvisitしているバッファーのリストをリターンする。

@example
@group
(find-file-noselect "/etc/fstab")
     @result{} #<buffer fstab>
@end group
@end example
@end defun

@deffn Command find-file-other-window filename &optional wildcards
このコマンドは、ファイル@var{filename}をvisitしているバッファーを選択するが、選択されたウィンドウではない他のウィンドウでこれを行う。これは、別の既存ウィンドウを使用したり、ウィンドウを分割するかもしれない。@ref{Switching
Buffers}lを参照のこと。

このコマンドがinteractiveに呼び出された際は、@var{filename}の入力を求める。
@end deffn

@deffn Command find-file-read-only filename &optional wildcards
このコマンドは、@code{find-file}のようにファイル@var{filename}をvisitしているバッファーを選択するが、そのバッファーを読み取り専用(read-only)とマークする。関連する関数および変数については、@ref{Read
Only Buffers}を参照のこと。

このコマンドがinteractiveに呼び出された際は、@var{filename}の入力を求める。
@end deffn

@defopt find-file-wildcards
この変数が非@code{nil}の場合、各種@code{find-file}コマンドはワイルドカード文字をチェックして、それらにマッチするすべてのファイルをvisitする(interactiveに呼び出されたとき、または@var{wildcards}引数が非@code{nil}のとき)。このオプションが@code{nil}の場合、@code{find-file}コマンドはそれらの@var{wildcards}引数を無視して、ワイルドカード文字を特別に扱うことは決してない。
@end defopt

@defopt find-file-hook
この変数の値は、ファイルがvisitされた後に呼び出される、関数のリストである。ファイルのローカル変数指定は、(もしあれば)このフックが実行される前に処理されるだろう。フック関数実行時は、そのファイルをvisitしているバッファーがカレントになる。

この変数はノーマルフックである。@ref{Hooks}を参照のこと。
@end defopt

@defvar find-file-not-found-functions
この変数の値は、@code{find-file}または@code{find-file-noselect}が存在しないファイル名を受け取った際に呼び出される、関数のリストである。存在しないファイルを検知すると、@code{find-file-noselect}は直ちにこれらの関数を呼び出す。これらのうち、いずれかが非@code{nil}をリターンするまで、リストの順に関数を呼び出す。@code{buffer-file-name}はすでにセットアップ済みである。

関数の値が使用され、多くの場合いくつかの関数だけが呼び出されるので、これはノーマルフックではない。
@end defvar

@defvar find-file-literally
このバッファーローカル変数が非@code{nil}値にセットされた場合、@code{save-buffer}はあたかもそのバッファーがリテラリー、つまり何の変換も行わずにファイルをvisitしていたかのように振る舞う。コマンド@code{find-file-literally}は、この変数のローカル値をセットするが、その他の等価な関数およびコマンドも、たとえばファイル終端への改行の自動追加を避けるために、同様にこれを行うことができる。この変数は恒久的にローカルなので、メジャーモードの変更により影響を受けない。
@end defvar

@node Subroutines of Visiting
@subsection Subroutines of Visiting

  @code{find-file-noselect}関数は、2つの重要なサブルーチン@code{create-file-buffer}および@code{after-find-file}を使用します。これらはユーザーのLispコードでも役に立つことがあります。このセクションでは、それらの使い方について説明します。

@c FIXME This does not describe the default behavior, because
@c uniquify is enabled by default and advises this function.
@c This is confusing.  uniquify should be folded into the function proper.
@defun create-file-buffer filename
この関数は、@var{filename}のvisitにたいして適切な名前のバッファーを作成して、それをリターンする。これは@var{filename}(ディレクトリー含まず)の名前がフリーならバッファー名にそれを使用し、フリーでなければ未使用の名前を取得するために@samp{<2>}のような文字列を付加する。@ref{Creating
Buffers}も参照のこと。@file{uniquify}ライブラリーは、この関数の結果に影響を与えることに注意されたい。@ref{Uniquify,,,
emacs, The GNU Emacs Manual}を参照のこと。

@strong{注意してください:}
@code{create-file-buffer}はファイルに新たなバッファーを@emph{関連付けません}。バッファーの選択もせず、さらにデフォルトのメジャーモードも使用しません。

@example
@group
(create-file-buffer "foo")
     @result{} #<buffer foo>
@end group
@group
(create-file-buffer "foo")
     @result{} #<buffer foo<2>>
@end group
@group
(create-file-buffer "foo")
     @result{} #<buffer foo<3>>
@end group
@end example

この関数は、@code{find-file-noselect}により使用される。この関数自身は@code{generate-new-buffer}を使用する(@ref{Creating
Buffers}を参照)。
@end defun

@defun after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes
この関数は、バッファーのメジャーモードをセットして、ローカル変数をパースする(@ref{Auto Major
Mode}を参照)。これは@code{find-file-noselect}、およびデフォルトのリバート関数(@ref{Reverting}を参照)により呼び出される。

@cindex new file message
@cindex file open error
ファイルが存在しない理由によりファイルの読み込みがエラーを受け取るが、ディレクトリーは存在する場合、呼び出し側は@var{error}にたいして非@code{nil}値を綿すべきである。この場合、@code{after-find-file}は警告@samp{(New
file)}を発する。より深刻なエラーにたいしては、呼び出し側は通常は@code{after-find-file}を呼び出すべきでない。

@var{warn}が非@code{nil}の場合、もしauto-saveファイルが存在し、かつそれがvisitされているファイルより新しいなら、この関数は警告を発する。

@var{noauto}が非@code{nil}の場合、それはAuto-Saveモードを有効、または無効にしないことを告げる。以前にAuto-Saveモードが有効ならば、有効のまま留まる。

@var{after-find-file-from-revert-buffer}が非@code{nil}の場合、それはこの関数が@code{revert-buffer}から呼び出されたことを意味する。これに直接的な効果はないが、モード関数およびフック関数の中には、この変数の値をチェックするものがいくつかある。

@var{nomodes}が非@code{nil}の場合、それはバッファーのメジャーモードを変更せず、ファイル内のローカル変数指定を処理せず、@code{find-file-hook}を実行しないことを意味する。この機能は、あるケースにおいて@code{revert-buffer}により使用される。

@code{after-find-file}が最後に行うのは、リスト@code{find-file-hook}内のすべての関数を呼び出すことである。
@end defun

@node Saving Buffers
@section Saving Buffers
@cindex saving buffers

  Emacs内でファイルを編集とき、実際にはそのファイルをvisitしているバッファーにたいして編集を行っています。つまり、ファイルのコンテンツをバッファーにコピーして、編集しているのはそのコピーなのです。そのバッファーにを変更しても、バッファーを@dfn{保存(save)}するまでファイルは変更されません。保存とは、バッファーのコンテンツをファイルにコピーすることを意味します。

@deffn Command save-buffer &optional backup-option
この関数は、バッファーが最後にvisitされたとき、または保存されたときから変更されている場合は、カレントバッファーのコンテンツを、バッファーによりvisitされているファイルに保存し、変更されていなければ何も行わない。

@code{save-buffer}は、バックアップファイルの作成に責任を負う。通常、@var{backup-option}は@code{nil}であり、@code{save-buffer}はファイルをvisit以降、それが最初の保存の場合のみバックアップファイルを作成する。@var{backup-option}にたいする他の値は、別の条件によるバックアップファイル作成を要求する:

@itemize @bullet
@item
引数4は1つの@kbd{C-u}を、引数64は3つの@kbd{C-u}を示すので、@code{save-buffer}はバッファーの次回保存時にこのバージョンのファイルがバックアップされるようマークする。

@item
引数16は2つの@kbd{C-u}を、引数64は3つの@kbd{C-u}を示すので、@code{save-buffer}関数はそれを保存する前に、前バージョンのファイルを無条件にバックアップする。

@item
引数0は、無条件にバックアップファイルを何も@emph{作成しない}。
@end itemize
@end deffn

@deffn Command save-some-buffers &optional save-silently-p pred
@anchor{Definition of save-some-buffers}
このコマンドは、ファイルをvisitしている変更されたバッファーのいくつかを保存する。これは通常、各バッファーごとにユーザーに確認を求める。しかし、@var{save-silently-p}が非@code{nil}の場合は、ユーザーに質問せずにファイルをvisitしているすべてのバッファーを保存する。

オプション引数@var{pred}は、どのバッファーで確認を求めるか(または@var{save-silently-p}が非@code{nil}の場合は、どのバッファーで確認せずに保存するか)を制御する。これが@code{nil}の場合、それはファイルをvisitしているバッファーにたいしてのみ確認を求めることを意味する。@code{t}の場合、それは、@code{buffer-offer-save}のバッファーローカル値が@code{nil}であるような、非ファイルバッファー以外の特定のバッファーの保存も提案することを意味する(@ref{Killing
Buffers}を参照)。ユーザーが、非ファイルバッファーの保存にたいして@samp{yes}と応えると、保存に使用するファイル名の指定を求める。@code{save-buffers-kill-emacs}関数は、@var{pred}にたいして値@code{t}を渡す。

@var{pred}が@code{t}と@code{nil}のどちらでもない場合、それは引数なしの関数であること。その関数は、そのバッファーの保存するを提案するか否かを決定するために、バッファーごとに呼び出されるだろう。これが特定のバッファーで非@code{nil}値をリターンした場合は、バッファーの保存を提案することを意味する。
@end deffn

@deffn Command write-file filename &optional confirm
@anchor{Definition of write-file}
この関数は、カレントバッファーをファイル@var{filename}に書き込み、バッファーがそのファイルをvisitしていることにして、未変更とマークする。次に@var{filename}にもとづいてバッファー名をリネームする。バッファー名を一意にするため、必要なら@samp{<2>}のような文字列を付加する。処理のほとんどは、@code{set-visited-file-name}(@ref{Buffer
File Name}を参照)、および@code{save-buffer}を呼び出すことにより行われる。

@var{confirm}が非@code{nil}の場合、それは既存のファイルを上書きする前に確認を求めることを意味する。ユーザーがプレフィックス引数を与えない場合、interactiveに確認が求められる。

@var{filename}が既存のディレクトリーであったり、既存のディレクトリーへのシンボリックリンクの場合、@code{write-file}はディレクトリー@var{filename}内でvisitされているファイルの名前を使用する。そのバッファーがファイルをvisitしていない場合は、かわりにバッファーの名前を使用する。
@end deffn

  バッファーの保存により、複数のフックが実行される。これはフォーマット変換も処理する(@ref{Format Conversion}を参照)。

@defvar write-file-functions
この変数の値は、バッファーをvisitされているファイルに書き出す前に呼び出される、関数のリストである。それらのうちのいずれかが非@code{nil}をリターンした場合、そのファイルは書き込み済みだと判断され、残りの関数は呼び出されないし、ファイルを書き込むための通常のコードも実行されない。

@code{write-file-functions}内の関数が非@code{nil}をリターンした場合、(それが適切であれば)その関数はファイルをバックアップする責任を負う。これを行うには、以下のコードを実行する:

@example
(or buffer-backed-up (backup-buffer))
@end example

@code{backup-buffer}によりリターンされるファイルモードの値を保存して、(もし非@code{nil}なら)書き込むファイルのモードビットをセットしたいと思うかもしれない。これは正に@code{save-buffer}が通常行うことである。@ref{Making
Backups,, Making Backup Files}を参照のこと。

@code{write-file-functions}内のフック関数は、データのエンコード(が望ましければ)にも責任を負う。これらは適切なコーディングシステムと改行規則(@ref{Lisp
and Coding Systems}を参照)を選択してエンコード(@ref{Explicit
Encoding}を参照)を処理し、使用されていたコーディングシステム(@ref{Encoding and
I/O}を参照)を@code{last-coding-system-used}にセットしなければならない。

バッファー内でこのフックをローカルにセットした場合、バッファーはそのファイル、またはバッファーのコンテンツを取得したファイルに類するものに関連付けられる。このようにして、変数は恒久的にローカルであるとマークされるので、メジャーモードの変更がバッファーローカルな値を変更することはない。その一方で、@code{set-visited-file-name}を呼び出すことにより、変数はリセットされるだろう。これを望まない場合は、かわりに@code{write-contents-functions}を使用したいと思うだろう。

たとえこれがノーマルフックでないとしても、このリストを操作するために@code{add-hook}および@code{remove-hook}を使用することはできる。@ref{Hooks}を参照のこと。
@end defvar

@c Emacs 19 feature
@defvar write-contents-functions
これは正に@code{write-file-functions}と同様に機能するが、こちらはvisitしている特定のファイルやファイルの場所ではなく、バッファーのコンテンツに関連するフックを意図している。そのようなフックは、この変数にたいするバッファーローカルなバインディングとして、通常はメジャーモードにより作成される。この変数は、セットされた際は、常に自動的にバッファーローカルになる。新たなメジャーモードへの切り替えは、常にこの変数をリセットするが、@code{set-visited-file-name}の呼び出しではリセットされない。

このフック内の関数のいずれかが非@code{nil}をリターンした場合、そのファイルはすでに書き込み済みとみなされ、残りの関数は呼び出されず、@code{write-file-functions}内の関数も呼び出されない。
@end defvar

@defopt before-save-hook
このノーマルフックは、visitしているファイルにバッファーが保存される前に実行される。保存が通常の方法で行われるか、あるいは上述のフックのいずれかで行われたかは問題にしない。たとえば、@file{copyright.el}プログラムは、ファイルの保存において、それの著作権表示が今年であることを確認するために、このフックを使用する。
@end defopt

@c Emacs 19 feature
@defopt after-save-hook
このノーマルフックは、visitしているファイルにバッファーを保存した後に実行される。このフックの使用例の1つは、Fast
Lockモードにある。このモードは、キャッシュファイルにハイライト情報を保存するために、このフックを使用している。
@end defopt

@defopt file-precious-flag
この変数が非@code{nil}の場合、@code{save-buffer}は保存ファイルがもつ名前のかわりに、一時的な名前で新たなファイルに書き込み、エラーがないと明確になった後にファイルを意図する名前にリネームすることにより、保存中のI/Oエラーから防御する。この手順は、無効なファイルが原因となるディスク容量逼迫のような問題を防ぐ。

副作用として、バックアップ作成にコピーが必要になる。@ref{Rename or
Copy}を参照のこと。しかし同時に、この高価なファイル保存により、保存したファイルと他のファイル名との間のすべてのハードリンクは切断される。

いくつかのモードは、特定のバッファーにおいて、この変数に非@code{nil}のバッファーローカル値を与える。
@end defopt

@defopt require-final-newline
この変数は、ファイルが改行で@emph{終わらない}ように書き込まれるかどうかを決定する。変数の値が@code{t}の場合、@code{save-buffer}はバッファーの終端に改行がなければ暗黙理に改行を追加する。値が@code{visit}の場合、Emacsはファイルをvisitした直後に不足している改行を追加する。値が@code{visit-save}の場合、Emacsはvisitと保存の両方のタイミングで、不足している改行を追加する。その他の非@code{nil}値にたいしては、そのようなケースが生じるたびに、改行を追加するかどうか、@code{save-buffer}がユーザーに尋ねる。

変数の値が@code{nil}の場合、@code{save-buffer}は改行を追加しない。デフォルト値は@code{nil}だが、特定のバッファーでこれを@code{t}にセットするメジャーモードも少数存在する。
@end defopt

  @ref{Buffer File Name}の関数@code{set-visited-file-name}も参照されたい。

@node Reading from Files
@section Reading from Files
@cindex reading from files

  ファイルのコンテンツをバッファーにコピーするためには、関数@code{insert-file-contents}を使用しします(マークをセットするので、Lispプログラム内でコマンド@code{insert-file}は使用してはならない)。

@defun insert-file-contents filename &optional visit beg end replace
この関数は、ファイル@var{filename}のコンテンツを、カレントバッファーのポイントの後に挿入する。これは絶対ファイル名と、挿入だれたデータの長さからなるリストをリターンする。@var{filename}が読み取り可能なファイルの名前でない場合は、エラーがシグナルされる。

この関数は、定義されたファイルフォーマットに照らしてファイルのコンテンツをチェックして、適切ならそのコンテンツの変換、およびリスト@code{after-insert-file-functions}内の関数の呼び出しも行う。@ref{Format
Conversion}を参照のこと。通常は、リスト@code{after-insert-file-functions}内のいずれかの関数が、EOL変換を含むファイルコンテンツのデコードに使用される、コーディングシステム(@ref{Coding
Systems}を参照)を判断する。しかし、ファイルにnullバイトが含まれる場合、デフォルトではコード変換なしでvisitされる。@ref{Lisp
and Coding Systems, inhibit-null-byte-detection}を参照のこと。

@var{visit}が非@code{nil}の場合、この関数は追加でそのバッファーを未変更とマークして、そのバッファーのさまざまなフィールドをセットアップして、バッファーがファイル@var{filename}をvisitしているようにする。これらのフィールドにはバッファーがvisitしたファイルの名前、最終保存したファイルのmodtimeが含まれる。これらの機能は@code{find-file-noselect}により使用され、恐らくあなた自身が使用するべきではない。

@var{beg}および@var{end}が非@code{nil}の場合、それらはファイル挿入範囲を指定する、バイトオフセット数値であること。この場合、@var{visit}は@code{nil}でなければならない。たとえば、

@example
(insert-file-contents filename nil 0 500)
@end example

@noindent
これはファイルの先頭500文字(バイト)を挿入する。

引数@var{replace}が非@code{nil}の場合、それはバッファーのコンテンツ(実際にはアクセス可能な範囲)を、ファイルのコンテンツで置き換えることを意味する。これは単にバッファーのコンテンツを削除してファイル全体を挿入するより優る。なぜなら、(1)マーカー位置を維持し、(2)undoリストに配すデータも少ないからである。

@var{replace}と@var{visit}が@code{nil}であれば、@code{insert-file-contents}で(FIFOやI/Oデバイスのような)スペシャルファイルの読み取りが可能である。
@end defun

@defun insert-file-contents-literally filename &optional visit beg end replace
この関数は@code{insert-file-contents}のように機能するが、@code{find-file-hook}を実行せず、フォーマットのデコード、文字コード変換、自動解凍、...などを行わない点が異なる。
@end defun

他のプログラムがファイルを読めるように、他のプロセスにファイル名を渡したい場合は、関数@code{file-local-copy}を使用します。@ref{Magic
File Names}を参照してください。

@node Writing to Files
@section Writing to Files
@cindex writing to files

  関数@code{append-to-file}および@code{write-region}を使用することにより、ディスク上のファイルに直接、バッファーのコンテンツ、またはバッファーの一部を書き込むことができます。visitされているファイルに書き込むために、これらの関数を使用しないでください。これにより、visitにたいするメカニズムが混乱するかもしれません。

@deffn Command append-to-file start end filename
この関数は、カレントバッファー内で、@var{start}と@var{end}によるリージョンのコンテンツを、ファイル@var{filename}の終端に追加する。そのファイルが存在しない場合は作成する。この関数は@code{nil}をリターンする。

@var{filename}に書込不可能なファイル、またはファイルを作成不可なディレクトリー内の存在しないファイルを指定した場合は、エラーがシグナルされる。

Lispから呼び出した場合、この関数は以下と完全に等価である:

@example
(write-region start end filename t)
@end example
@end deffn

@deffn Command write-region start end filename &optional append visit lockname mustbenew
この関数は、カレントバッファー内の@var{start}と@var{end}で区切られたリージョンを、@var{filename}で指定されたファイルに書き込む。

@var{start}が@code{nil}の場合、このコマンドはバッファーのコンテンツ全体(アクセス可能な範囲だけでは@emph{ない})をファイルに書き込み、@var{end}は無視する。

@c Emacs 19 feature
@var{start}が文字列の場合、@code{write-region}はバッファーのテキストではなく、その文字列を追加する。その場合、@var{end}は無視される。

@var{append}が非@code{nil}の場合は、指定されたテキストが(もしあれば)既存のファイルコンテンツに追加される。@var{append}が数字の場合、@code{write-region}はファイル開始位置からそのバイトオフセットをseekして、データをそこに書き込む。

@var{mustbenew}が非@code{nil}の場合、@code{write-region}はもし@var{filename}が既存ファイルの名前なら確認を求める。@var{mustbenew}がシンボル@code{excl}なら、ファイルがすでに存在する場合は@code{write-region}は確認を求めるかわりに、エラー@code{file-already-exists}をシグナルする。

@var{mustbenew}が@code{excl}のときは、存在するファイルのテストに特別なシステム機能を使用する。少なくともローカルディスク上のファイルにたいしては、Emacsがファイルを作成する前に、Emacsに通知せずに他のプログラムが同じ名前のファイルを作成することはありえない。

@var{visit}が@code{t}の場合、Emacsはバッファーとファイルの関連付けを設定し、そのバッファーがそのファイルをvictimする。また、カレントバッファーにたいする最終ファイル変更日時に@var{filename}をセットして、そのバッファーを未変更としてマークする。この機能は@code{save-buffer}により使用されるが、おそらくあなた自身が使用するべきではないだろう。

@c Emacs 19 feature
@var{visit}が文字列の場合、それはvisitするファイルの名前を指定する。この方法を使えば、そのバッファーが別のファイルをvisitしていると記録しつつ、１つのファイル(@var{filename})にデータを書き込むことができる。引数@var{visit}は、エコーエリアに使用される他に、ファイルのロックにも使用され、@var{visit}が@code{buffer-file-name}に格納される。この機能は、@code{file-precious-flag}の実装に使用される。自分が何をしているか本当にわかっているのでなければ、これを使用してはならない。

オプション引数@var{lockname}が非@code{nil}の場合、それはロックとアンロックの目的に使用する、@var{filename}および@var{visit}をオーバーライドするファイル名を指定する。

関数@code{write-region}は、書き込むデータを@code{buffer-file-format}により指定される、適切なファイルフォーマットに変換しするとともに、リスト@code{write-region-annotate-functions}内の関数の呼び出しも行う。@ref{Format
Conversion}を参照のこと。

通常、@code{write-region}はエコーエリア内にメッセージ@samp{Wrote
@var{filename}}を表示する。@var{visit}が@code{t}、@code{nil}、文字列のいずれでもない場合、このメッセージは抑制される。この機能は、内部的な目的のために、ユーザーが知る必要がないファイルを使用する場合に有用である。
@end deffn

@defmac with-temp-file file body@dots{}
@anchor{Definition of with-temp-file}
@code{with-temp-file}マクロは、一時バッファー(temporary
buffer)をカレントバッファーとして@var{body}フォームを評価して、最後にそのバッファーのコンテンツを@var{file}に書き込む。これは終了時に一時バッファーをkillして、@code{with-temp-file}フォームの前にカレントだったバッファーをリストアする。その後、@var{body}内の最後のフォームの値をリターンする。

@code{throw}やエラーによる異常なexit(abnormal exit)でも、カレントバッファーはリストアされる(@ref{Nonlocal
Exits}を参照)。

@ref{Definition of with-temp-buffer,, The Current
Buffer}の@code{with-temp-buffer}も参照のこと。
@end defmac

@node File Locks
@section File Locks
@cindex file locks
@cindex lock file

  2人のユーザーが同時に同じファイルを編集する際、おそらく彼らは互いに干渉しあうでしょう。Emacsは、ファイルが変更される際に@dfn{ファイルロック(file
lock)}を記録することにより、このような状況の発生を防ぎます。そして、Emacsは他のEmacsジョブにロックされているファイルをvisitしているバッファーへの変更の最初の試みを検知して、ユーザーに何を行うか尋ねます。このファイルロックの実態は、編集中のファイルと同じディレクトリーに格納される、特別な名前をもつシンボリックリンクです(シンボリックリンクをサポートしないファイルシステムでは、通常のファイルが使用される)。

  ファイルのアクセスにNFSを使用する際には、可能性は小さいものの、他のユーザーと同じファイルを``同時''にロックするかもしれません。これが発生した場合、2人のユーザーが同時にファイルを変更することが可能になりますが、それでもEmacsは2番目に保存するユーザーにたいして警告を発するでしょう。たファイルをvisitしているバッファーで、ディスク上でファイル変更の検知により、ある種の同時編集を捕捉できます。@ref{Modification
Time}を参照してください。

@defun file-locked-p filename
この関数は、ファイル@var{filename}がロックされていなければ@code{nil}をリターンする。このEmacsプロセスによりロックされている場合は@code{t}をリターンし、他のEmacsジョブによりロックされている場合はロックしたユーザーの名前をリターンする。

@example
@group
(file-locked-p "foo")
     @result{} nil
@end group
@end example
@end defun

@defun lock-buffer &optional filename
この関数は、カレントバッファーが変更されている場合は、ファイル@var{filename}をロックする。引数@var{filename}のデフォルトは、カレントバッファーがvisitしているファイルである。カレントバッファーがファイルをvisitしていない、またはバッファーが変更されていない、またはシステムがロックをサポートしない場合は、何もしない。
@end defun

@defun unlock-buffer
この関数は、カレントバッファーが変更されている場合は、バッファーによりvisitされているファイルをアンロックする。バッファーが変更されていない場合は、そのファイルはロックされてはならないので、この関数は何もしない。カレントバッファーがファイルをvisitしていない、またはシステムがロックをサポートしない場合、この関数は何もしない。
@end defun

@defopt create-lockfiles
この変数が@code{nil}の場合、Emacsはファイルをロックしない。
@end defopt

@defun ask-user-about-lock file other-user
この関数は、ユーザーが@var{file}の変更を試みたが、それが名前@var{other-user}のユーザーにロックされていたとき呼び出される。この関数のデフォルト定義は、何を行うかユーザーに尋ねる関数である。この関数がリターンする値は、Emacsが次に何を行うかを決定する:

@itemize @bullet
@item
値@code{t}は、そのファイルのロックを奪うことを意味する。その場合、@var{other-user}はロックを失い、このユーザーがファイルを編集することができる。

@item
値@code{nil}は、ロックを無視して、とにかくユーザーがファイルを編集できるようにすることを意味する。

@item
@kindex file-locked
この関数は、かわりにエラー@code{file-locked}をシグナルする。この場合、ユーザーが行おうとしていた変更は行われない。

このエラーにたいするエラーメッセージは、以下のようになる:

@example
@error{} File is locked: @var{file} @var{other-user}
@end example

@noindent
ここで、@code{file}はファイル名、@var{other-user}はそのファイルのロックを所有するユーザーの名前である。
@end itemize

望むなら、他の方法で判定を行う独自のバージョンで、@code{ask-user-about-lock}関数を置き換えることができる。
@end defun

@node Information about Files
@section Information about Files
@cindex file, information about

  このセクションでは、ファイル(またはディレクトリーやシンボリックリンク)に関して、ファイルが読み込み可能か、書き込み可能か、あるいはファイルのサイズなｍのような、さまざまなタイプの情報を取得する関数を説明します。これらの関数はすべて、引数にファイルの名前を取ります。注記した場合を除き、これらの引数には既存のファイルを指定する必要があり、ファイルが存在しない場合はエラーをシグナルします。

@cindex file names, trailing whitespace
@cindex trailing blanks in file names
  スペースで終わるファイル名には気をつけてください。いくつかのファイルシステム(特にMS-Windows)では、ファイル名の末尾の空白文字は、暗黙かつ自動的に無視されます。

@menu
* Testing Accessibility::    そのファイルは読み取り可能か？書き込み可能か？
* Kinds of Files::           それはディレクトリー？それともシンボリックリンク？
* Truenames::                シンボリックリンクが行き着くファイル名。
* File Attributes::          ファイルのサイズ？更新日時など。
* Extended Attributes::      アクセス制御にたいするファイル属性の拡張。
* Locating Files::           標準的な場所でファイルを見つける方法。
@end menu

@node Testing Accessibility
@subsection Testing Accessibility
@cindex accessibility of a file
@cindex file accessibility

  以下の関数は、あるファイルを読み取り、書き込み、実行するためのパーミッションをテストします。明示しない限り、これらの関数はファイル名引数にたいするシンボリックリンクを、すべてのレベル(ファイル自身のレベルおよび親ディレクトリーのレベル)において再帰的にフォローします。

  いくつかのオペレーティングシステムでは、ACL(Access Control Lists:
アクセス制御リスト)のような機構を通じて、より複雑なアクセスパーミッションセットが指定できます。それらのパーミッションにたいする問い合わせやセットの方法については、@ref{Extended
Attributes}を参照してください。

@defun file-exists-p filename
この関数は、ファイル名@var{filename}が存在しているようなら@code{t}をリターンする。これは、そのファイルが読み取り可能である必要はなく、ファイルの属性を調べることが可能なこと意味する(UnixおよびGNU/Linuではなく、そのファイルが存在し、かつそのファイルを含むディレクトリーの実行パーミッションをもつ場合に@code{t}となり、そのファイル自体のパーミッションは無関係である)。

ファイルが存在しない、またはACLポリシーがファイル属性を調べることを禁止する場合、この関数は@code{nil}をリターンする。

ディレクトリーはファイルなので、ディレクトリー名が与えられた場合、@code{file-exists-p}は@code{t}をリターンする。しかし、シンボリックリンクは特別に扱われる。@code{file-exists-p}はターゲットファイルが存在する場合のみ、シンボリックリンクにたいして@code{t}をリターンする。
@end defun

@defun file-readable-p filename
この関数は、@var{filename}という名前のファイルが存在し、それを読み取ることが可能な場合は@code{t}をリターンする。それ以外は@code{nil}をリターンする。
@end defun

@defun file-executable-p filename
この関数は、@var{filename}という名前のファイルが存在し、それを実行することが可能な場合は@code{t}をリターンする。それ以外は@code{nil}をリターンする。UnixおよびGNU/Linuxシステムでは、そのファイルがディレクトリーの場合、実行パーミッションはディレクトリー内のファイルの存在と属性をチェックでき、ファイルのモードが許せばオープンできることを意味する。
@end defun

@defun file-writable-p filename
この関数は、@var{filename}という名前のファイルに書き込み可能、または作成可能可能な場合は@code{t}をリターンする。それ以外は@code{nil}をリターンする。ファイルが存在し、それに書き込むことができるなら、ファイルは書き込み可能である。ファイルが存在せず、指定されたディレクトリーが存在して、そのディレクトリーに書き込むことができるなら、書き込み可能である。

以下の例では、@file{foo}は親ディレクトリーが存在しないので、たとえユーザーがそのディレクトリーを作成可能であっても、ファイルは書き込み可能ではない。

@example
@group
(file-writable-p "~/no-such-dir/foo")
     @result{} nil
@end group
@end example
@end defun

@defun file-accessible-directory-p dirname
この関数は、ファイルとしての名前が@var{dirname}であるようなディレクトリー内にある既存のファイルをオープンするパーミッションをもつ場合は、@code{t}をリターンする。それ以外(またはそのようなディレクトリーが存在しない場合)は@code{nil}をリターンする。@var{dirname}の値はディレクトリー名(@file{/foo/}など)、または名前がディレクトリー(最後のスラッシュがない@file{/foo}など)であるようなファイルである。

たとえば、以下では@file{/foo/}内の任意のファイルを読み取る試みは、エラーになると推測される:

@example
(file-accessible-directory-p "/foo")
     @result{} nil
@end example
@end defun

@defun access-file filename string
この関数は、読み取り用にファイル@var{filename}をオープンして、クローズした後に@code{nil}をリターンする。しかし、オープンに失敗した場合は、@var{string}をエラーメッセージのテキストに使用して、エラーをシグナルする。
@end defun

@defun file-ownership-preserved-p filename &optional group
この関数は、ファイル@var{filename}を削除して、それを新たに作成しても、そのファイルの所有者が変更されずに維持される場合は、@code{t}をリターンする。これは、存在しないファイルにたいしても@code{t}をリターンする。

オプション引数@var{group}が非@code{nil}の場合、この関数はファイルのグループが変更されないこともチェックする。

@var{filename}がシンボリックリンクの場合は、ここで述べる他の関数と異なり、@code{file-ownership-preserved-p}は@var{filename}をターゲットで@emph{置き換えない}。しかし、この関数は親ディレクトリーのすべての階層において、シンボリックリンクを再帰的にフォローする(follow:
辿る)。
@end defun

@defun file-modes filename
@cindex mode bits
@cindex file permissions
@cindex permissions, file
@cindex file modes
この関数は、@var{filename}の@dfn{モードビット(mode
bits)}をリターンする。これは読み取り、書き込み、実行パーミッションを要約する整数である。@var{filename}でのシンボリックリンクは、すべての階層において再帰的にフォローされる。ファイルが存在しない場合のリターン値は@code{nil}である。

モードビットの説明は、@xref{File permissions,,, coreutils, The @sc{gnu}
@code{Coreutils}
Manual}を参照のこと。たとえば最下位ビットが1なら、そのファイルは実行可能、2ビット目が1なら書き込み可能、...となる。設定できる最大の値は4095(8進の7777)であり、これはすべてのユーザーが読み取り、書き込み、実行のパーミッションをもち、他のユーザーとグループにたいして@acronym{SUID}ビット、およびstickyビットがセットされる。

これらのパーミッションのセットに使用される@code{set-file-modes}関数については、@ref{Changing
Files}を参照のこと。

@example
@group
(file-modes "~/junk/diffs")
     @result{} 492               ; @r{10進整数}
@end group
@group
(format "%o" 492)
     @result{} "754"             ; @r{8進に変換した値}
@end group

@group
(set-file-modes "~/junk/diffs" #o666)
     @result{} nil
@end group

@group
$ ls -l diffs
-rw-rw-rw- 1 lewis lewis 3063 Oct 30 16:00 diffs
@end group
@end example

@cindex MS-DOS and file modes
@cindex file modes and MS-DOS
@strong{MS-DOSにたいする注意:}
MS-DOSでは、``実行可能''を表すようなファイルのモードビットは存在しない。そのため、@code{file-modes}はファイル名が@file{.com}、@file{.bat}、@file{.exe}などのような標準的な実行可能な拡張子のいずれかで終わる場合は、ファイルを実行可能であると判断する。Unix標準の@samp{#!}署名で始まるshellスクリプトやPerlスクリプトも、実行可能と判断される。Unixとの互換性のために、ディレクトリーも実行可能と報告される。@code{file-attributes}(@ref{File
Attributes}を参照)も、これらの慣習にしたがう。
@end defun

@node Kinds of Files
@subsection Distinguishing Kinds of Files
@cindex file classification
@cindex classification of file types

  このセクションでは、ディレクトリー、シンボリックリンク、および通常ファイルのような、さまざまな種類のファイルを区別する方法を説明します。

@defun file-symlink-p filename
@cindex file symbolic links
ファイル@var{filename}がシンボリックリンクの場合、@code{file-symlink-p}関数は(非再帰的な)リンクターゲットを文字列としてリターンする(リンクターゲット文字列は、そのターゲットの完全な絶対ファイル名である必要はない。リンクが指すのが完全なファイル名か判断するのは、簡単な処理ではない。以下を参照されたい)。@var{filename}のディレクトリー部分(leading
directory)にシンボリックリンクが含まれる場合、この関数はそれらを再帰的にフォローする。

ファイル@var{filename}がシンボリックリンクではない、または存在しない場合、@code{file-symlink-p}は@code{nil}をリターンする。

この関数の使用例をいくつか示す:

@example
@group
(file-symlink-p "not-a-symlink")
     @result{} nil
@end group
@group
(file-symlink-p "sym-link")
     @result{} "not-a-symlink"
@end group
@group
(file-symlink-p "sym-link2")
     @result{} "sym-link"
@end group
@group
(file-symlink-p "/bin")
     @result{} "/pub/bin"
@end group
@end example

3つ目の例では、関数は@file{sym-link}をリターンするものの、たとえそれ自体がシンボリックリンクであっても、リンク先の解決を行わないことに注意されたい。これが上述した``非再帰的(non-recursive)''の意味するところであり、シンボリックリンクをフォローする処理は、そのリンクターゲット自体がリンクの場合、再帰的には行われない。

この関数がリターンするのは、そのシンボリックリンクに何が記録されているかを示す文字列であり、それにはディレクトリー部分が含まれていても、いなくても構わない。この関数は完全修飾されたファイル名を生成するためにリンクターゲットを@emph{展開しない}し、リンクターゲットが絶対ファイル名でなければ、(もしあっても)@var{filename}引数のディレクトリー部分は使用しない。以下に例を示す:

@example
@group
(file-symlink-p "/foo/bar/baz")
     @result{} "some-file"
@end group
@end example

@noindent
ここでは、たとえ与えられた@file{/foo/bar/baz}が完全修飾されたファイル名であるにも関わらず、その結果は異なり、実際には何のディレクトリー部分ももたない。@file{some-file}自体がシンボリックリンクかもしれないので、単にその前に先行ディレクトリーを追加することはできず、絶対ファイル名を生成するために、単に@code{expand-file-name}(@ref{File
Name Expansion}を参照)を使用することもできないからである。

この理由により、あるファイルがシンボリックリンクか否かという単一の事実よりも多くを判定する必要がある場合に、この関数が有用であることは稀である。実際にリンクターゲットのファイル名が必要な場合は、@ref{Truenames}で説明する@code{file-chase-links}または@code{file-truename}を使用すること。
@end defun

以下の2つの関数は、@var{filename}にたいして、シンボリックリンクを全階層において再帰的にフォローする。

@defun file-directory-p filename
この関数は、@var{filename}が既存のディレクトリー名なら@code{t}、それ以外は@code{nil}をリターンする。

@example
@group
(file-directory-p "~rms")
     @result{} t
@end group
@group
(file-directory-p "~rms/lewis/files.texi")
     @result{} nil
@end group
@group
(file-directory-p "~rms/lewis/no-such-file")
     @result{} nil
@end group
@group
(file-directory-p "$HOME")
     @result{} nil
@end group
@group
(file-directory-p
 (substitute-in-file-name "$HOME"))
     @result{} t
@end group
@end example
@end defun

@defun file-regular-p filename
この関数は、ファイル@var{filename}が存在し、かつそれが通常ファイル(ディレクトリー、名前付きパイプ、端末、その他I/Oデバイス以外)の場合は@code{t}をリターンする。
@end defun

@node Truenames
@subsection Truenames
@cindex truename (of file)

  ファイルの@dfn{実名(truename)}とは、全階層においてシンボリックリンクを残らずフォローした後、名前コンポーネントに出現する@samp{.}と@samp{..}を除いて簡略化した名前のことです。これは、そのファイルにたいする正規名(canonical
name)の一種です。ファイルが常に一意な実名をもつ訳ではありません。あるファイルにたいする異なる実名の個数は、そのファイルにたいするハードリンクの個数と同じです。しかし、実名はシンボリックリンクによる名前の変動を解消するのに有用です。

@defun file-truename filename
この関数は、ファイル@var{filename}の実名をリターンする。引数が絶対ファイル名でない場合、この関数は最初に@code{default-directory}にたいしてこれを展開する。

この関数は、環境変数を展開しない。これを行うのは@code{substitute-in-file-name}だけである。@ref{Definition
of substitute-in-file-name}を参照のこと。

名前コンポーネントに出現する@samp{..}に先行するシンボリックリンクリンクをフォローする必要がある場合は、直接間接を問わず@code{expand-file-name}を呼び出す前に、@code{file-truename}を呼び出すこと。そうしないと、@samp{..}の直前にある名前コンポーネントは、@code{file-truename}が呼び出される前に``簡略化''により取り除かれてしまう。@code{expand-file-name}呼び出しの必要を無くすため、@code{file-truename}は@code{expand-file-name}が行うのと同じ方法で@samp{~}を扱う。@ref{File
Name Expansion,, Functions that Expand Filenames}を参照のこと。
@end defun

@defun file-chase-links filename &optional limit
この関数は、@var{filename}で始まるシンボリックリンクを、シンボリックリンクではない名前のファイル名までフォローして、そのファイル名をリターンする。この関数は、親ディレクトリーの階層にあるシンボリックリンクをフォロー@emph{しない}。

@var{limit}に数を指定した場合は、その数のリンクを追跡した後、この関数はたとえそれが依然としてシンボリックリンクであっても、それをリターンする。
@end defun

  @code{file-chase-links}と@code{file-truename}の違いを説明するために、@file{/usr/foo}がディレクトリー@file{/home/foo}へのシンボリックリンクであり、@file{/home/foo/hello}が(少なくともシンボリックリンクではない)通常ファイル、または存在しないファイルであるとします。この場合は以下のようになります:

@example
(file-chase-links "/usr/foo/hello")
     ;; @r{親ディレクトリーのリンクはフォローしない}
     @result{} "/usr/foo/hello"
(file-truename "/usr/foo/hello")
     ;; @r{@file{/home}はシンボリックリンクではないと仮定}
     @result{} "/home/foo/hello"
@end example

@defun file-equal-p file1 file2
この関数は、ファイル@var{file1}と@var{file2}の名前が同じファイルの場合は@code{t}をリターンする。これは、リモートファイル名も適切な方法で処理することを除き、実名の比較と似ている。@var{file1}または@var{file2}が存在しない場合、リターン値は不定である。
@end defun

@defun file-in-directory-p file dir
この関数は、@var{file}がディレクトリー@var{dir}内のファイル、またはサブディレクトリーの場合は、@code{t}をリターンする。また、@var{file}と@var{dir}が同じディレクトリーの場合も、@code{t}をリターンする。この関数は、2つのディレクトリーの実名を比較する。@var{dir}が既存のディレクトリーの名前でない場合、リターン値は@code{nil}である。
@end defun

@node File Attributes
@subsection File Attributes
@cindex file attributes

  このセクションでは、ファイルの詳細な情報を取得する関数について説明します。それらの情報にはファイルの所有者やグループの番号、ファイル名の個数、inode番号、サイズやアクセス日時、変更日時が含まれます。

@defun file-newer-than-file-p filename1 filename2
@cindex file age
@cindex file modification time
この関数は、ファイル@var{filename1}がファイル@var{filename2}より新しい場合は、@code{t}をリターンする。@var{filename1}が存在しない場合は@code{nil}、@var{filename1}は存在するが@var{filename2}が存在しない場合は@code{t}をリターンする。

以下の例では、@file{aug-19}が19日、@file{aug-20}が20日に書き込まれ、ファイル@file{no-file}は存在しないものとする。

@example
@group
(file-newer-than-file-p "aug-19" "aug-20")
     @result{} nil
@end group
@group
(file-newer-than-file-p "aug-20" "aug-19")
     @result{} t
@end group
@group
(file-newer-than-file-p "aug-19" "no-file")
     @result{} t
@end group
@group
(file-newer-than-file-p "no-file" "aug-19")
     @result{} nil
@end group
@end example
@end defun

  以下の2つの関数の@var{filename}引数がシンボリックリンクの場合、これらの関数はそれをリンクターゲットで@emph{置き換えません}。しかしどちらの関数も、親ディレクトリーのすべての階層において、シンボリックリンクを再帰的にフォローします。

@defun file-attributes filename &optional id-format
@anchor{Definition of file-attributes}
この関数は、ファイル@var{filename}の属性(attributes)のリストをリターンする。オープンできないファイルが指定された場合は、@code{nil}をリターンする。オプション引数@var{id-format}は、属性@acronym{UID}および@acronym{GID}(以下参照)にたいして望ましいフォーマットを指定し、有効な値は@code{'string}および@code{'integer}である。デフォルトは@code{'integer}だが、わたしたちはこれの変更を計画しているので、リターンされる@acronym{UID}または@acronym{GID}を使用する場合は、@var{id-format}にたいして非@code{nil}値を指定するべきである。

リストの要素は順に:

@enumerate 0
@item
ディレクトリーにたいしては@code{t}、シンボリックリンクにたいしては文字列(リンクされる名前)、テキストファイルにたいしては@code{nil}。

@c Wordy so as to prevent an overfull hbox.  --rjc 15mar92
@item
そのファイルがもつ名前の個数。ハードリンクとして知られる代替え名は、関数@code{add-name-to-file}を使用して作成できる(@ref{Changing
Files}を参照)。

@item
ファイルの@acronym{UID}で、通常は文字列。しかし、名前をもつユーザーに対応しない場合、値は整数。

@item
同様に、ファイルの@acronym{GID}。

@item
最終アクセス時刻を表す、4つの整数@code{(@var{sec-high} @var{sec-low} @var{microsec}
@var{picosec})}からなるリスト(これは@code{current-time}の値と似ている。@ref{Time of
Day}を参照されたい)。いくつかのFATベースのファイルシステムでは、最終アクセスの日付だけが記録されるので、この時刻には常に最終アクセス日の真夜中が保持されることに注意。

@cindex modification time of file
@item
最終変更時刻を表す4つの整数からなるリスト(上記参照)。これは、ファイルのコンテンツが変更された最終時刻である。

@item
ステータスの最終変更時刻を表す4つの整数からなるリスト(上記参照)。これはファイルのアクセスモードビット、所有者とグループ、およびファイルにたいしてファイルのコンテンツ以外にファイルシステムが記録するその他の情報にたいする最終変更時刻である。

@item
ファイルのサイズ(バイト)。Lisp整数の範囲を超える大きさのサイズでは浮動小数点数。

@item
@samp{ls -l}で表示されるような、10個の文字、またはダッシュからなる文字列で表されるファイルのモード。

@item
後方互換のために提供される不定値。

@item
ファイルのinode番号。可能な場合は整数。Emacs
Lispの整数として表せる範囲より大きいinode番号は、整数で表現可能な値を得るために@math{2^{16}}で除され@code{(@var{high}
.
@var{low})}という形式の値になる。ここで@var{low}は下位16ビットである。それにたいしてさえinode番号が大きい場合、値は@code{(@var{high}
@var{middle}
.
@var{low})}という形式になる。ここで@code{high}は上位ビット、@var{middle}は中位24ビット、@var{low}は下位16ビットを保持する。

@item
そのファイルがあるデバイスのファイルシステム番号。その大きさにより、値は整数、またはinode番号と同じ様式のコンスセルとなる。この要素とファイルのinode番号を併せれば、システム上の2つを区別するに足る情報が得られる(2つのファイルがこれら両方の番号で同じ値をもつことはできない)。
@end enumerate

たとえば、以下は@file{files.texi}のファイル属性である:

@example
@group
(file-attributes "files.texi" 'string)
     @result{}  (nil 1 "lh" "users"
          (20614 64019 50040 152000)
          (20000 23 0 0)
          (20614 64555 902289 872000)
          122295 "-rw-rw-rw-"
          t (5888 2 . 43978)
          (15479 . 46724))
@end group
@end example

@noindent
この結果を解釈すると:

@table @code
@item nil
ディレクトリーでもシンボリックリンクでもない。

@item 1
(カレントデフォルトディレクトリー内で名前@file{files.texi}は)単一の名前をもつ。

@item "lh"
名前"lh"のユーザーにより所有される。

@item "users"
名前"users"のグループ。

@item (20614 64019 50040 152000)
最終アクセスがOctober 23, 2012, at 20:12:03.050040152 UTC。

@item (20000 23 0 0)
最終更新がJuly 15, 2001, at 08:53:43 UTC。

@item (20614 64555 902289 872000)
最終ステータス変更がOctober 23, 2012, at 20:20:59.902289872 UTC。

@item 122295
バイト長は122295バイト(しかしマルチバイトシーケンスが含まれていたり、EOLフォーマットがCRLFの場合は122295文字が含まれないだろう)。

@item "-rw-rw-rw-"
所有者、グループ、その他にたいして読み取り、書き込みアクセスのモードをもつ。

@item t
単なるプレースホルダーであり、何の情報ももたない。

@item (5888 2 . 43978)
inode番号は6473924464520138。

@item (15479 . 46724)
ファイルシステムのデバイス番号は1014478468。
@end table
@end defun

@defun file-nlinks filename
この関数は、ファイル@var{filename}がもつ名前(ハードリンク)の個数をリターンする。ファイルが存在しない場合、この関数は@code{nil}をリターンする。シンボリックリンクは、リンク先のファイルの名前とは判断されないので、この関数に影響しないことに注意。

@example
@group
$ ls -l foo*
-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo
-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo1
@end group

@group
(file-nlinks "foo")
     @result{} 2
@end group
@group
(file-nlinks "doesnt-exist")
     @result{} nil
@end group
@end example
@end defun

@node Extended Attributes
@subsection Extended File Attributes
@cindex extended file attributes

いくつかのオペレーティングシステムでは、それぞれのファイルを任意の@dfn{拡張ファイル属性(extended file
attributes)}に関連付けることができます。現在のところ、Emacsは拡張ファイル属性のうち2つの特定セット(ACL: Access
Control
List、およびSELinuxコンテキスト)にたいする問い合わせと設定をサポートします。これらの拡張ファイル属性は、前のセクションで議論した``Unixスタイル''の基本的なパーミッションより洗練されたファイルアクセス制御を強いるために、いくつかのシステムで利用されます。

@cindex access control list
@cindex ACL entries
@cindex SELinux context
  ACLとSELinuxについての詳細な解説は、このマニュアルの範囲を超えます。わたしたちの目的のためには、それぞれのファイルは@dfn{ACL}(ACLベースのファイル制御システムの元でACLのプロパティを指定)および/または@dfn{SELinuxコンテキスト}(SELinuxシステムの元でSELinuxのプロパティを指定)に割り当てることができる、という理解でよいでしょう。

@defun file-acl filename
この関数は、ファイル@var{filename}にたいするACLをリターンする。ACLにたいする正確なLisp表現は不確定(かつ将来のEmacsバージョンで変更され得る)だが、これは@code{set-file-acl}が引数@var{acl}にとる値と同じである(@ref{Changing
Files}を参照)。

根底にあるACL実装はプラットフォーム固有である。EmacsはGNU/LinuxおよびBSDではPOSIX
ACLインターフェイスを使用し、MS-WindowsではネイティブのファイルセキュリティAPIをPOSIX ACLインターフェイスでエミュレートする。

ACLサポートなしでEmacsがコンパイルされた場合、ファイルが存在しないかアクセス不能な場合、またはその他の理由によりEmacsがACLエントリーを判断できない場合、リターン値は@code{nil}である。
@end defun

@defun file-selinux-context filename
この関数は、ファイル@var{filename}のSELinuxコンテキストを、@code{(@var{user} @var{role}
@var{type}
@var{range})}という形式のリストでリターンする。リストの要素は、そのコンテキストのユーザー、ロール、タイプ、レンジを文字列として表す値である。これらの実際の意味についての詳細は、SELinuxのドキュメントを参照のこと。リターン値は、@code{set-file-selinux-context}が@var{context}引数でとるのと同じ形式である(@ref{Changing
Files}を参照)。

SELinuxサポートなしでEmacsがコンパイルされた場合、ファイルが存在しないかアクセス不能な場合、またはシステムがSELinuxをサポートしない場合、リターン値は@code{(nil
nil nil nil)}である。
@end defun

@defun file-extended-attributes filename
この関数は、Emacsが認識するファイル@var{filename}の拡張属性をalistでリターンする。現在のところ、この関数はACLとSELinuxの両方を取得するための便利な方法としての役目を果たす。他のファイルに同じファイルアクセス属性を適用するために、リターンされたalistを2つ目の引数として@code{set-file-extended-attributes}を呼び出すことができる(@ref{Changing
Files}を参照)。

要素のうちの1つは@code{(acl
. @var{acl})}で、@var{acl}は@code{file-acl}がリターンするのと同じ形式である。

他の要素は@code{(selinux-context
.
@var{context})}で、@var{context}は@code{file-selinux-context}がリターンするのと同じ形式である。
@end defun

@node Locating Files
@subsection Locating Files in Standard Places
@cindex locate file in path
@cindex find file in path

  このセクションでは、ディレクトリーのリスト(@dfn{パス(path)})からファイルを検索したり、標準の実行可能ファイル用ディレクトリーから実行可能ファイルを検索する方法を説明します。

  ユーザー固有の設定ファイル(configuration file)の検索については、@ref{Standard File
Names}の関数@code{locate-user-emacs-file}を参照してください。

@defun locate-file filename path &optional suffixes predicate
この関数は、@var{path}で与えられるディレクトリーリスト内で、@var{filename}という名前のファイルを検索して、@var{suffixes}内のサフィックスの検索を試みる。そのようなファイルが見つかった場合はファイルの絶対ファイル名(@ref{Relative
File Names}を参照)をリターンし、それ以外は@code{nil}をリターンする。

オプション引数@var{suffixes}は、検索時に@var{filename}に追加するファイル名サフィックスのリストを与える。@code{locate-file}は、検索するディレクトリーごとに、それらのサフィックスを試みる。@var{suffixes}が@code{nil}、または@code{("")}の場合は、サフィックスなしで、@var{filename}だけがそのまま使用される。@var{suffixes}の典型的な値は@code{exec-suffixes}(@ref{Subprocess
Creation}を参照)、@code{load-suffixes}、@code{load-file-rep-suffixes}、および関数@code{get-load-suffixes}(@ref{Load
Suffixes}を参照)である。

実行可能プログラムを探すときは@code{exec-path}(@ref{Subprocess
Creation}を参照)、Lispファイルを探すときは@code{load-path}(@ref{Library
Search}を参照)が@var{path}の典型的な値である。@var{filename}が絶対ファイル名の場合、@var{path}は効果がないが、サフィックスにたいする@var{suffixes}は依然として試行される。

オプション引数@var{predicate}が非@code{nil}の場合、それは候補ファイルが適切かどうかテストする述語関数を指定する。述語関数には、単一の引数として候補ファイル名が渡される。@var{predicate}が@code{nil}、または省略された場合は、述語として@code{file-readable-p}を使用する。@code{file-executable-p}や@code{file-directory-p}など、その他の有用な述語については、@ref{Kinds
of Files}を参照のこと。

互換性のために、@var{predicate}には@code{executable}、@code{readable}、@code{writable}、@code{exists}、またはこれらシンボルの1つ以上のリストも指定できる。
@end defun

@defun executable-find program
この関数は、@var{program}という名前の実行可能ファイルを検索して、その実行可能ファイルの絶対ファイル名と、もしあればファイル名の拡張子も含めてリターンする。ファイルが見つからない場合は、@code{nil}をリターンする。この関数は、@code{exec-path}内のすべてのディレクトリーを検索し、@code{exec-suffixes}内のすべてのファイル名拡張子の検索も試みる(@ref{Subprocess
Creation}を参照)。
@end defun

@node Changing Files
@section Changing File Names and Attributes
@c @cindex renaming files  Duplicates rename-file
@cindex copying files
@cindex deleting files
@cindex linking files
@cindex setting modes of files

  このセクションの関数は、ファイルのリネーム(rename:
改名)、コピー、削除(delete)、リンク、およびモード(パーミッション)のセットを行います。

  @var{newname}という引数をもつ関数では、@var{newname}という名前のファイルが既に存在する場合の振る舞いは、引数@var{ok-if-already-exists}の値に依存します。

@itemize @bullet
@item
@var{ok-if-already-exists}が@code{nil}の場合は、@code{file-already-exists}エラーがシグナルされる。

@item
@var{ok-if-already-exists}が数字の場合は、確認を求める。

@item
@var{ok-if-already-exists}が他の値の場合は、確認なしで古いファイルを置き換える。
@end itemize

以下の4つのコマンドはすべて、1つ目の引数にたいして親ディレクトリーの全階層のシンボリックリンクを再帰的にフォローしますが、その引数自体がシンボリックリンクの場合は、@code{copy-file}だけが(再帰的な)ターゲットを置き換えます。

@deffn Command add-name-to-file oldname newname &optional ok-if-already-exists
@cindex file with multiple names
@cindex file hard link
この関数は、@var{oldname}という名前のファイルに、@var{newname}という名前を追加で与える。これは@var{newname}という名前が、@var{oldname}にたいする新たな``ハードリンク''になることを意味する。

以下の例の最初の部分として、2つのファイル@file{foo}と@file{foo3}をリストする。

@example
@group
$ ls -li fo*
81908 -rw-rw-rw- 1 rms rms 29 Aug 18 20:32 foo
84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3
@end group
@end example

ここで、@code{add-name-to-file}を呼び出してハードリンクを作成し、再度ファイルをリストする。このリストには、1つのファイルにたいして2つの名前@file{foo}と@file{foo2}が表示される。

@example
@group
(add-name-to-file "foo" "foo2")
     @result{} nil
@end group

@group
$ ls -li fo*
81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo
81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo2
84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3
@end group
@end example

最後に以下を評価する:

@example
(add-name-to-file "foo" "foo3" t)
@end example

@noindent
そして、ファイルを再度リストする。今度は1つのファイルにたいして3つの名前@file{foo}、@file{foo2}、@file{foo3}がある。@file{foo3}の古いコンテンツは失われた。

@example
@group
(add-name-to-file "foo1" "foo3")
     @result{} nil
@end group

@group
$ ls -li fo*
81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo
81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo2
81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo3
@end group
@end example

この関数は、1つのファイルにたいして複数の名前をもつことが許されないオペレーティングシステムでは無意味である。いくつかのシステムでは、かわりにファイルをコピーすることにより複数の名前を実装している。

@ref{File Attributes}の@code{file-nlinks}も参照のこと。
@end deffn

@deffn Command rename-file filename newname &optional ok-if-already-exists
このコマンドは、@var{filename}を@var{newname}にリネームする。

@var{filename}が@var{filename}とは別に追加の名前をもつ場合、それらは自身の名前をもち続ける。実際のところ、@code{add-name-to-file}で名前@var{newname}を追加してから@var{filename}を削除するのは、瞬間的な遷移状態を別とすると、リネームと同じ効果がある。
@end deffn

@deffn Command copy-file oldname newname &optional ok-if-exists time preserve-uid-gid preserve-extended-attributes
このコマンドは、ファイル@var{oldname}を@var{newname}にコピーする。@var{oldname}が存在しない場合は、エラーをシグナルする。@var{newname}がディレクトリーの場合は、その最後の名前コンポーネントを保持するように、そのディレクトリーの中に@var{oldname}をコピーする。

@var{time}が非@code{nil}の場合、この関数は新たなファイルにたいして、古いファイルと同じ最終変更時刻を与える(これはいくつかの限られたオペレーティングシステムでのみ機能する)。時刻のセットでエラーが発生した場合、@code{copy-file}は@code{file-date-error}エラーをシグナルする。インタラクティブに呼び出された場合、プレフィックス引数は@var{time}にたいして非@code{nil}値を指定する。

引数@var{preserve-uid-gid}が@code{nil}の場合は、新たなファイルのユーザーおよびグループの所有権の決定を、オペレーティングシステムに委ねる(通常はEmacsを実行中のユーザーである)。@var{preserve-uid-gid}が非@code{nil}の場合は、そのファイルのユーザーとグループの所有権のコピーを試みる。これはいくつかのオペレーティングシステムで、かつそれを行うための正しいパーミッションをもつ場合のみ機能する。

オプション引数@var{preserve-permissions}が非@code{nil}の場合、この関数は@var{oldname}のファイルモード(または``パーミッション'')、同様にACL(Access
Control List)とSELinuxコンテキストを@var{newname}にコピーする。@ref{Information about
Files}を参照のこと。

それ以外では、@var{newname}が既存ファイルならファイルモードは変更されず、新たに作成された場合はデフォルトのファイルパーミッション(以下の@code{set-default-file-modes}を参照)によりマスクされる。どちらの場合も、ACLまたはSELinuxコンテキストはコピーされない。
@end deffn

@deffn Command make-symbolic-link filename newname  &optional ok-if-exists
@pindex ln
@kindex file-already-exists
このコマンドは、@var{filename}にたいして@var{newname}という名前のシンボリックリンクを作成する。これは、コマンド@samp{ln
-s @var{filename} @var{newname}}と似ている。

この関数は、シンボリックリンクをサポートしないシステムでは利用できない。
@end deffn

@cindex trash
@vindex delete-by-moving-to-trash
@deffn Command delete-file filename &optional trash
@pindex rm
このコマンドは、ファイル@var{filename}を削除する。ファイルが複数の名前をもつ場合は、他の名前で存在し続ける。@var{filename}がシンボリックリンクの場合、@code{delete-file}はシンボリックリンクだけを削除して、(たとえこれが親ディレクトリーの全階層のシンボリックリンクをフォローするとしても)ターゲットは削除しない。

ファイルが存在しない、または削除できない場合は、適切な種類の@code{file-error}エラーがシグナルされる(UnixおよびGNU/Linuxでは、ファイルのディレクトリーが書き込み可能ならファイルは削除可能である)。

オプション引数@var{trash}が非@code{nil}、かつ変数@code{delete-by-moving-to-trash}が非@code{nil}の場合、このコマンドはファイルを削除するかわりに、システムのTrash(ゴミ箱)にファイルを移動する。@ref{Misc
File Ops,,Miscellaneous File Operations, emacs, The GNU Emacs
Manual}を参照のこと。インタラクティブに呼び出された際は、プレフィックス引数がない場合@var{trash}は@code{t}、それ以外は@code{nil}である。

@ref{Create/Delete Dirs}の@code{delete-directory}も参照のこと。
@end deffn

@cindex file permissions, setting
@cindex permissions, file
@cindex file modes, setting
@deffn Command set-file-modes filename mode
この関数は、@var{filename}の@dfn{ファイルモード}(または@dfn{パーミッション})を@var{mode}にセットする。この関数は、@var{filename}にたいして全階層でシンボリックリンクをフォローする。

非インタラクティブに呼び出された場合、@var{mode}は整数でなければならない。その整数の下位12ビットだけが使用される。ほとんどのシステムでは、意味があるのは下位9ビットだけである。@var{mode}を入力刷る、Lisp構文を使用できる。たとえば、

@example
(set-file-modes #o644)
@end example

@noindent
これは、そのファイルが所有者により読み取りと書き込み、グループメンバーにより読み取り、その他のユーザーにより読み取り可能であることを指定する。モードビットの仕様の説明は、@ref{File
permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}を参照のこと。

インタラクティブに呼び出された場合、@var{mode}は@code{read-file-modes}(以下参照)を使用してミニバッファーから読み取られる。この場合、ユーザーは整数、またはパーミッションをシンボルで表現する文字列をタイプできる。

ファイルのパーミッションをリターンする関数@code{file-modes}については、@ref{File Attributes}を参照のこと。
@end deffn

@defun set-default-file-modes mode
@cindex umask
この関数は、EmacsおよびEmacsのサブプロセスが新たに作成するファイルに、デフォルトのパーミッションをセットする。Emacsにより作成されたすべてのファイルはこれらのパーミッション、およびそれらのサブセットとなるパーミッションをもつ(デフォルトファイルパーミッションが実行を許可しても、@code{write-region}は実行パーミッションを付与しないだろう)。UnixおよびGNU/Linuxでは、デフォルトのパーミッションは``umask''の値のビット単位の補数で与えられる。

引数@var{mode}は上記の@code{set-file-modes}と同様、パーミッションを指定する整数であること。下位9ビットだけに意味がある。

デフォルトのファイルパーミッションは、既存ファイルの変更されたバージョンを保存する際は効果がない。ファイルの保存では、既存のパーミッションが保持される。
@end defun

@defun default-file-modes
この関数は、デフォルトのファイルモードを整数でリターンする。
@end defun

@defun read-file-modes &optional prompt base-file
この関数は、ミニバッファーからファイルモードビットのセットを読み取る。1つ目のオプション引数@var{prompt}は非デフォルトのプロンプトを指定する。2つ目のオプション引数@var{base-file}は、ユーザーが既存ファイルのパーミッションに相対的なモードビット指定をタイプした場合に、この関数がリターンするモードビッの元となる権限をもつファイルの名前を指定する。

ユーザー入力が8進数で表される場合、この関数はその数字をリターンする。それが@code{"u=rwx"}のようなモードビットの完全なシンボル指定の場合、この関数は@code{file-modes-symbolic-to-number}を使用して、それを等価な数字に変換し、結果をリターンする。@code{"o+g"}のように相対的な指定の場合、その指定の元となるパーミッションは、@var{base-file}のモードビットから取得される。@var{base-file}が省略、または@code{nil}の場合、この関数は元となるモードビットとして@code{0}を使用する。完全指定および相対指定は、@code{"u+r,g+rx,o+r,g-w"}のように組み合わせることができる。ファイルモード指定の説明は、@ref{File
permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}を参照のこと。
@end defun

@defun file-modes-symbolic-to-number modes &optional base-modes
この関数は、@var{modes}内のシンボルによるファイルモード指定を、等価な整数に変換する。シンボル指定が既存ファイルにもとづく場合は、オプション引数@var{base-modes}からそのファイルのモードビットが取得される。その引数が省略、または@code{nil}の場合は、0(すべてのアクセスが許可されない)がデフォルトになる。
@end defun

@defun set-file-times filename &optional time
この関数は、@var{filename}のアクセス時刻と変更時刻を@var{time}にセットする。時刻が正しくセットされれば@code{t}、それ以外は@code{nil}がリターン値となる。@var{time}のデフォルトはカレント時刻であり、@code{current-time}がリターンするフォーマットでなければならない(@ref{Time
of Day}を参照)。
@end defun

@defun set-file-extended-attributes filename attribute-alist
この関数は、@code{filename}にたいしてEmacsが認識する拡張ファイル属性をセットする。2つ目の引数@var{attribute-alist}は、@code{file-extended-attributes}がリターンするalistと同じ形式であること。@ref{Extended
Attributes}を参照のこと。
@end defun

@defun set-file-selinux-context filename context
この関数は、@var{filename}にたいするSELinuxセキュリティコンテキストに@var{context}をセットする。@var{context}引数は、各要素が文字列であるような@code{(@var{user}
@var{role} @var{type} @var{range})}というリストであること。@ref{Extended
Attributes}を参照されたい。

この関数は、@var{filename}のSELinuxコンテキストのセットに成功した場合は@code{t}をリターンする。コンテキストがセットされなかった場合(SELinuxが無効、またはEmacsがSELinuxサポートなしでコンパイルされた場合等)は、@code{nil}をリターンする。
@end defun

@defun set-file-acl filename acl
この関数は、@var{filename}にたいするACLに@var{acl}をセットする。@var{acl}引数は、関数@code{file-acl}がリターンするのと同じ形式であること。@ref{Extended
Attributes}を参照されたい。

この関数は@var{filename}のACLのセットに成功したら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@node File Names
@section File Names
@cindex file names

  ファイルは一般的に名前で参照され、Emacsでも他と同様です。Emacsでは、ファイル名は文字列で表現されます。ファイルを操作する関数はすべて、ファイル名引数に文字列を期待します。

  ファイル自体の操作に加えて、Emacs
Lispプログラムでファイル名を処理する必要(ファイル名の一部を取得して、関連するファイル名構築にその一部を使用する等)がしばしばあります。このセクションでは、ファイル名を扱う方法を説明します。

  このセクションの関数は実際にファイルにアクセスする訳ではないので、既存のファイルやディレクトリーを参照しないファイル名を処理できます。

@findex cygwin-convert-file-name-from-windows
@findex cygwin-convert-file-name-to-windows
@cindex MS-Windows file-name syntax
@cindex converting file names from/to MS-Windows syntax
  MS-DOSおよびMS-Windowsでは、これらの関数は(実際にファイルを操作する関数と同様)、MS-DOSおよびMS-Windowsのファイル名構文を受け入れます。この構文はUnix構文のようにバックスラッシュでコンポーネントを区切りますが、これらの関数は常にUnix構文をリターンします。これにより、Unix構文でファイル名を指定するLispプログラムが、変更なしですべてのシステムで正しく機能することが可能になるのです。@footnote{MS-WindowsバージョンのEmacsはCygwin環境用にコンパイルされており、2つのファイル名構文の変換に、@code{cygwin-convert-file-name-to-windows}と@code{cygwin-convert-file-name-from-windows}を使用できます。}

@menu
* File Name Components::     ファイル名のディレクトリー部分と、それ以外。
* Relative File Names::      カレントディレクトリーにたいして相対的なファイル名。
* Directory Names::          ディレクトリーとしてのディレクトリー名と、ファイルとしてのファイル名の違い。
* File Name Expansion::      相対ファイル名から絶対ファイル名への変換。
* Unique File Names::        一時ファイル用の名前の生成。
* File Name Completion::     与えられたファイル名にたいする補完を探す。
* Standard File Names::      パッケージが固定されたファイル名を使用する際に、種々のオペレーティングシステムをシンプルに処理する方法。
@end menu

@node File Name Components
@subsection File Name Components
@cindex directory part (of file name)
@cindex nondirectory part (of file name)
@cindex version number (in file name)

  オペレーティングシステムは、ファイルをディレクトリーにグループ化します。あるファイルを指定するためには、ディレクトリーと、そのディレクトリー内でのファイルの名前を指定しなければなりません。それゆえ、Emacsはファイル名を@dfn{ディレクトリー名}パートと@dfn{非ディレクトリー}(または@dfn{ディレクトリー内ファイル名})パートという、2つの主要パートから判断します。どちらのパートも空の場合があり得ます。これら2つのパートを結合することにより、元のファイル名が再作成されます。

  ほとんどのシステムでは、最後のスラッシュ(MS-DOSおよびMS-Windowsではバックスラッシュも許される)までのすべてがディレクトリーパートです。残りが非ディレクトリーパートです。

  ある目的のために、非ディレクトリーパートはさらに正式名称(the name
proper)と@dfn{バージョン番号}に細分されます。ほとんどのシステムでは、名前にバージョン番号をもつのは、バックアップファイルだけです。

@defun file-name-directory filename
この関数は、@var{filename}のディレクトリーパートをディレクトリー名(@ref{Directory
Names}を参照)としてリターンする。@var{filename}がディレクトリーパートを含まない場合は、@code{nil}をリターンする。

GNUおよびUnixシステムでは、この関数がリターンする文字列は常にスラッシュで終わる。MS-DOSでは、コロンで終わることもあり得る。

@example
@group
(file-name-directory "lewis/foo")  ; @r{Unixの例}
     @result{} "lewis/"
@end group
@group
(file-name-directory "foo")        ; @r{Unixの例}
     @result{} nil
@end group
@end example
@end defun

@defun file-name-nondirectory filename
この関数は、@var{filename}の非ディレクトリーパートをリターンする。

@example
@group
(file-name-nondirectory "lewis/foo")
     @result{} "foo"
@end group
@group
(file-name-nondirectory "foo")
     @result{} "foo"
@end group
@group
(file-name-nondirectory "lewis/")
     @result{} ""
@end group
@end example
@end defun

@defun file-name-sans-versions filename &optional keep-backup-version
この関数は、任意のファイルバージョン番号、バックアップバージョン番号、末尾のチルダを取り除いて@var{filename}をリターンする。

@var{keep-backup-version}が非@code{nil}の場合は、ファイルシステムなどが理解するような真のファイルバージョン番号は破棄されるが、バックアップバージョン番号は保持される。

@example
@group
(file-name-sans-versions "~rms/foo.~1~")
     @result{} "~rms/foo"
@end group
@group
(file-name-sans-versions "~rms/foo~")
     @result{} "~rms/foo"
@end group
@group
(file-name-sans-versions "~rms/foo")
     @result{} "~rms/foo"
@end group
@end example
@end defun

@defun file-name-extension filename &optional period
この関数は、@var{filename}からもしあればすべてのバージョン番号とバックアップ番号を取り除いた後、終端の``拡張子(extension)''をリターンする。ファイル名の拡張子とは、最後の名前コンポーネント(からすべてのバージョン番号とバックアップ番号を取り去った後)の最後の@samp{.}に後続するパートである。

この関数は、@file{foo}のような拡張子のないファイル名にたいしては、@code{nil}をリターンする。@file{foo.}のようなnull拡張子にたいしては、@code{""}をリターンする。ファイル名の最終コンポーネントが@samp{.}で始まる場合、その@samp{.}は拡張子の開始とはみなされない。したがって、@file{.emacs}の拡張子は@samp{.emacs}ではなく@code{nil}である。

@var{period}が非@code{nil}の場合、拡張子を区切るピリオドもリターン値に含まれるようにななる。その場合、もし@var{filename}が拡張子をもたないなら、リターン値は@code{""}である。
@end defun

@defun file-name-sans-extension filename
この関数は、もしあれば@var{filename}から拡張子を除いてリターンする。もしバージョン番号またはバックアップ番号があるなら、ファイルが拡張子をもつ場合のみ、それを削除する。たとえば、

@example
(file-name-sans-extension "foo.lose.c")
     @result{} "foo.lose"
(file-name-sans-extension "big.hack/foo")
     @result{} "big.hack/foo"
(file-name-sans-extension "/my/home/.emacs")
     @result{} "/my/home/.emacs"
(file-name-sans-extension "/my/home/.emacs.el")
     @result{} "/my/home/.emacs"
(file-name-sans-extension "~/foo.el.~3~")
     @result{} "~/foo"
(file-name-sans-extension "~/foo.~3~")
     @result{} "~/foo.~3~"
@end example

最後の2つの例の@samp{.~3~}は、拡張子ではなくバックアップ番号であることに注意。
@end defun

@defun file-name-base &optional filename
この関数は、@code{file-name-sans-extension}と@code{file-name-nondirectory}を組み合わせたものである。たとえば、

@example
(file-name-base "/my/home/foo.c")
    @result{} "foo"
@end example

@var{filename}引数のデフォルトは、@code{buffer-file-name}である。
@end defun

@node Relative File Names
@subsection Absolute and Relative File Names
@cindex absolute file name
@cindex relative file name

  ファイルシステム内のすべてのディレクトリーは、ルートディレクトリーから開始されるツリーを形成します。このツリーのルートから開始されるすべてのディレクトリー名により、ファイル名を指定でき、それを@dfn{絶対(absolute)}ファイル名と呼びます。デフォルトディレクトリーからの相対的なツリー中の位置でファイルを指定するこでき、それは@dfn{相対(relative)}ファイル名と呼ばれます。UnixおよびGNU/Linuxでは、絶対ファイル名は@samp{/}または@samp{~}で始まり、相対ファイル名は違います(@ref{abbreviate-file-name}を参照)。MS-DOSおよびMS-Windowsでは、絶対ファイル名はスラッシュ、バックスラッシュ、またはドライブ指定@samp{@var{x}:/}で始まります。ここで@var{x}は@dfn{ドライブ文字(drive
letter)}です。

@defun file-name-absolute-p filename
この関数は、@var{filename}が絶対ファイル名の場合は@code{t}、それ以外は@code{nil}をリターンする。

@example
@group
(file-name-absolute-p "~rms/foo")
     @result{} t
@end group
@group
(file-name-absolute-p "rms/foo")
     @result{} nil
@end group
@group
(file-name-absolute-p "/user/rms/foo")
     @result{} t
@end group
@end example
@end defun

  相対ファイル名が与えられた場合は、@code{expand-file-name}を使用して、それを絶対ファイル名に変換できます(@ref{File
Name Expansion}を参照)。この関数は、絶対ファイル名を相対ファイル名に変換します:

@defun file-relative-name filename &optional directory
この関数は、@var{directory}(絶対ディレクトリー名またはディレクトリーファイル名)から相対的な結果となると仮定して、@var{filename}と等価な相対ファイル名のリターンを試みる。@var{directory}が省略、または@code{nil}の場合、カレントバッファーのデフォルトディレクトリーがデフォルトとなる。

絶対ファイル名がデバイス名で始まるオペレーティングシステムが、いくつか存在する。そのようなシステムでは、2つの異なるデバイス名から開始される@var{filename}は、@var{directory}にもとづく等価な相対ファイル名をもたない。この場合、@code{file-relative-name}は絶対形式で@var{filename}をリターンする。

@example
(file-relative-name "/foo/bar" "/foo/")
     @result{} "bar"
(file-relative-name "/foo/bar" "/hack/")
     @result{} "../foo/bar"
@end example
@end defun

@node Directory Names
@subsection Directory Names
@cindex directory name
@cindex file name of directory

  @dfn{ディレクトリー名(directory
name)}とは、ディレクトリーの名前のことです。ディレクトリーは実際にはファイルの一種なので、ファイル名をもちます。これはディレクトリー名と関連がありますが、同一ではありません(これは、Unixの通常の用語とは異なる)。同じ実体にたいするこれら2つの異なる名前は、構文的な変換により関連付けられます。GNUおよびUnixシステムでは、ことは単純です。ディレクトリー名はスラッシュで終わり、ファイルとしてのディレクトリーの名前には、そのスラッシュがありません。MS-DOSでは、この関連付けはより複雑です。

  ディレクトリー名と、ファイルとしてのディレクトリーの名前の違いは、些細ですが重要です。Emacsの変数、または関数の引数を記述する際、それがディレクトリー名であるとしており、ディレクトリーのファイル名は許されません。@code{file-name-directory}が文字列をリターンするときは、常にディレクトリー名です。

  以下の2つの関数は、ディレクトリー名とファイル名の間で変換を行います。これらの関数は、@samp{$HOME}のような環境変数や、@samp{~}、@samp{.}、@samp{..}などの構文にたいして、特別なことは何も行いません。

@defun file-name-as-directory filename
この関数は、オペレーティングシステムがディレクトリーの名前と解釈する形式で、@var{filename}を表す文字列をリターンする。ほとんどのシステムでは、(もし終端にそれがなければ)これは文字列にスラッシュを追加することを意味する。

@example
@group
(file-name-as-directory "~rms/lewis")
     @result{} "~rms/lewis/"
@end group
@end example
@end defun

@defun directory-file-name dirname
この関数は、オペレーティングシステムがファイルの名前と解釈する形式で、@var{dirname}を表す文字列をリターンする。ほとんどのシステムでは、これは文字列から最後のスラッシュ(またはバックスラッシュ)を削除することを意味する。

@example
@group
(directory-file-name "~lewis/")
     @result{} "~lewis"
@end group
@end example
@end defun

  ディレクトリーにたいしては、@code{concat}を使用して相対ファイルと組み合わせることができます:

@example
(concat @var{dirname} @var{relfile})
@end example

@noindent
これを行う前に、ファイル名が相対的であるか確認してください。絶対ファイル名を使用した場合、結果は構文的に不正になるか、間違ったファイルを参照する可能性があります。

  ディレクトリーファイル名作成にこのような組み合わせを使用したい場合は、最初に@code{file-name-as-directory}を使用して、それをディレクトリー名に変換しなければなりません:

@example
(concat (file-name-as-directory @var{dirfile}) @var{relfile})
@end example

@noindent
以下のような、手動によるスラッシュの結合を試みてはなりません

@example
;;; @r{間違い!}
(concat @var{dirfile} "/" @var{relfile})
@end example

@noindent
なぜなら、これには可搬性がないからです。常に@code{file-name-as-directory}を使用してください。

  ディレクトリー名をディレクトリーの省略名に変換するには、以下の関数を使用します:

@cindex file name abbreviations
@cindex abbreviated file names
@defun abbreviate-file-name filename
@anchor{abbreviate-file-name}
この関数は、@var{filename}の省略された形式をリターンする。これは@code{directory-abbrev-alist}(@pxref{File
Aliases,,File Aliases, emacs, The GNU Emacs
Manual})で指定される省略形を適用した後、引数のファイル名がユーザーのホームディレクトリー、またはそのサブディレクトリーにある場合は、それを@samp{~}に置き換える。ホームディレクトリーがルートディレクトリーの場合、多くのシステムでは結果が短縮されないので、@samp{~}で置き換えない。

これは名前の一部であるような省略形さえも認識するので、ディレクトリー名とファイル名にも使用できる。
@end defun

@node File Name Expansion
@subsection Functions that Expand Filenames
@cindex expansion of file names

  ファイル名の@dfn{展開(expanding)}とは、相対ファイル名を絶対ファイル名に変換することを意味します。これはデフォルトディレクトリーから相対的に行われるため、展開されるファイル名と同様、デフォルトディレクトリーも指定しなければなりません。これは@file{~/}のような省略形
@ifnottex
(@ref{abbreviate-file-name}を参照)、
@end ifnottex
の展開、および@file{./}や@file{@var{name}/../}のような冗長さの排除も行います。
も展開します。

@defun expand-file-name filename &optional directory
この関数は、@var{filename}を絶対ファイル名に変換する。@var{directory}が与えられた場合、@var{filename}が相対的なら、それは開始点となるデフォルトディレクトリーになる(@var{directory}の値は、それ自体が絶対ディレクトリー名、またはディレクトリーファイル名であるべきで、それは@samp{~}で始まるかもしれない)。それ以外では、カレントバッファーの@code{default-directory}の値が使用される。たとえば:

@example
@group
(expand-file-name "foo")
     @result{} "/xcssun/users/rms/lewis/foo"
@end group
@group
(expand-file-name "../foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@group
(expand-file-name "foo" "/usr/spool/")
     @result{} "/usr/spool/foo"
@end group
@end example

結合されたファイル名の最初のスラッシュの前が@samp{~}の場合は、環境変数@env{HOME}(通常はユーザーのホームディレクトリー)の値に展開される。最初のスラッシュの前が@samp{~@var{user}}で、かつ@var{user}が有効なログイン名の場合は、@var{user}のホームディレクトリーに展開される。

@samp{.}または@samp{..}を含むファイル名は、正規化形式に簡略化される:

@example
@group
(expand-file-name "bar/../foo")
     @result{} "/xcssun/users/rms/lewis/foo"
@end group
@end example

出力に@samp{..}コンポーネントが残り得る場合もある:

@example
@group
(expand-file-name "../home" "/")
     @result{} "/../home"
@end group
@end example

@noindent
これは、ルートディレクトリー@file{/}の上位の``スーパールート(superroot)''という概念をもつファイルシステムのためのものである。その他のファイルシステムでは、@file{/../}は@file{/}とまったく同じに解釈される。

@code{expand-file-name}は環境変数を展開@emph{しない}ことに注意。@code{substitute-in-file-name}だけが、それを行う。

@example
@group
(expand-file-name "$HOME/foo")
     @result{} "/xcssun/users/rms/lewis/$HOME/foo"
@end group
@end example

@code{expand-file-name}は、あらゆる階層においてシンボリックリンクをフォローしないことにも注意。これは@samp{..}の扱いが@code{file-truename}と@code{expand-file-name}で異なることに起因する。@samp{/tmp/bar}がディレクトリー@samp{/tmp/foo/bar}にたいするシンボリックリンクであると仮定すると:

@example
@group
(file-truename "/tmp/bar/../myfile")
     @result{} "/tmp/foo/myfile"
@end group
@group
(expand-file-name "/tmp/bar/../myfile")
     @result{} "/tmp/myfile"
@end group
@end example

直接間接を問わず、事前に@code{expand-file-name}を呼び出さずに@samp{..}に先行するシンボリックリンクをフォローする必要があるかもしれない場合は、それを呼び出さずに確実に@code{file-truename}を呼び出すべきである。@ref{Truenames}を参照のこと。
@end defun

@defvar default-directory
このバッファーローカル変数の値は、カレントバッファーにたいするデフォルトディレクトリーである。これは絶対ディレクトリー名であること。これは@samp{~}で始まるかもしれない。この変数は、すべてのバッファーにおいてバッファーローカルである。

2つ目の引数が@code{nil}の場合、@code{expand-file-name}はデフォルトディレクトリーを使用する。

値は常にスラッシュで終わる文字列である。

@example
@group
default-directory
     @result{} "/user/lewis/manual/"
@end group
@end example
@end defvar

@defun substitute-in-file-name filename
@anchor{Definition of substitute-in-file-name}
この関数は、@var{filename}内で参照される環境変数を、環境変数の値に置き換える。標準的なUnixシェル構文にしたがい、
@samp{$}は環境変数値置き換えのプレフィックスである。入力に@samp{$$}が含まれる場合、それ@samp{$}に置き換えられる。これにより、ユーザーが@samp{$}を``クォート''する手段が与えられる。

環境変数名は@samp{$}の後に続く一連の英数字(アンダースコアを含む)である。@samp{$}の後続文字が、@samp{@{}の場合はマッチする@samp{@}}までのすべてが変数名である。

@code{substitute-in-file-name}により生成された出力で@code{substitute-in-file-name}を呼び出すと、不正な結果となる傾向がある。たとえば、単一の@samp{$}をクォートするための@samp{$$}の使用は正しく機能しないだろうし、環境変数値の中の@samp{$}は再帰的な置換を導くだろう。したがって、この関数を呼び出して、出力をこの関数に渡すプログラムは、その後の不正な結果を防ぐために、すべての@samp{$}文字を二重化する必要がある。

@c Wordy to avoid overfull hbox.  --rjc 15mar92
以下では、ユーザーのホームディレクトリー名を保持する環境変数@env{HOME}は、値@samp{/xcssun/users/rms}をもつとする。

@example
@group
(substitute-in-file-name "$HOME/foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@end example

置き換え後は、@samp{/}の直後に@samp{~}や別の@samp{/}が出現した場合、この関数は、@samp{/}の前にあるすべてを無視する。

@example
@group
(substitute-in-file-name "bar/~/foo")
     @result{} "~/foo"
@end group
@group
(substitute-in-file-name "/usr/local/$HOME/foo")
     @result{} "/xcssun/users/rms/foo"
     ;; @r{@file{/usr/local/}は破棄された}
@end group
@end example

@end defun

@node Unique File Names
@subsection Generating Unique File Names
@cindex unique file names
@cindex temporary files

  一時ファイルに書き込む必要があるプログラムが、いくつかあります。以下は、そのようなファイルを構築する、便利な方法です:

@example
(make-temp-file @var{name-of-application})
@end example

@noindent
@code{make-temp-file}の役目は、2人の異なるユーザー、またはジョブが、完全に一致する名前のファイルの使用を防ぐことです。

@defun make-temp-file prefix &optional dir-flag suffix
この関数は、一時ファイルを作成して、その名前をリターンする。Emacsは、Emacsの各ジョブごとに異なるランダムないくつかの文字を@var{prefix}に追加することにより、一時ファイルの名前を作成する。結果として新たに空のファイルが作成されることが保障される。MS-DOSでは、8+3のファイル名制限に適合するよう、文字列@var{string}は切り詰められる可能性がある。@var{prefix}が相対ファイル名の場合、それは@code{temporary-file-directory}にたいして展開される。

@example
@group
(make-temp-file "foo")
     @result{} "/tmp/foo232J6v"
@end group
@end example

@code{make-temp-file}がリターンした際、一時ファイルは空で作成される。この時点で、そのファイルに意図するコンテンツを書き込むべきである。

@var{dir-flag}が@code{nil}の場合、@code{make-temp-file}は空のファイルのかわりに、空のディレクトリーを作成する。これはディレクトリー名ではなく、ディレクトリーのファイル名をリターンする。@ref{Directory
Names}を参照のこと。

@var{suffix}が非@code{nil}の場合、@code{make-temp-file}はそれをファイル名の最後に追加する。

同じEmacs内で実行される異なるライブラリー間での競合を防ぐために、@code{make-temp-file}を使用する各Lispプログラムがプログラム自身の@var{prefix}を使用するべきである。@var{prefix}の最後に追加される数字は、異なるEmacsジョブ内で実行される、同じアプリケーションを区別する。追加される文字により、同一のEmacsジョブ内でも、多数の名前を区別することが可能になる。
@end defun

  一時ファイル用のデフォルトディレクトリーは、変数@code{temporary-file-directory}により制御されます。この変数により、すべての一時ファイルにたいして、ユーザーがディレクトリーを指定する、一貫した方法が与えられます。@code{small-temporary-file-directory}が非@code{nil}の場合は、かわりにそれを使うプログラムもいくつかあります。これを使う場合は、@code{make-temp-file}を呼び出す前に、正しいディレクトリーにたいしてプレフィックスを展開するべきです。

@defopt temporary-file-directory
@cindex @env{TMPDIR} environment variable
@cindex @env{TMP} environment variable
@cindex @env{TEMP} environment variable
この変数は、一時ファイル作成用のディレクトリー名を指定する。値はディレクトリー名であるべきだが、もし値がディレクトリーのファイル名(@ref{Directory
Names}を参照)ならば、Lispプログラムがかわりに対処すればよい。@code{expand-file-name}の2つ目の引数としてその値を使用するのは、それを達成するよい方法である。

デフォルト値は、オペレーティングシステムにたいして適切な方法により決定される。これは環境変数@env{TMPDIR}、@env{TMP}、@env{TEMP}にもとづき、これらの変数が定義されていなければ、システム依存の名前にフォールバックする。

一時ファイルの作成に@code{make-temp-file}を使用しない場合でも、一時ファイルを置くディレクトリーを判断するために、依然としてこの変数を使用するべきである。しかし、一時ファイルが小さくなることを求める場合は、@code{small-temporary-file-directory}が非@code{nil}ならば、それを使用するべきである。
@end defopt

@defopt small-temporary-file-directory
この変数は、小さいかもしれない特定の一時ファイル作成用のディレクトリー名を指定する。

小さくなるかもしれない一時ファイルに書き込みたい場合は、以下のようにディレクトリーを計算するべきである:

@example
(make-temp-file
  (expand-file-name @var{prefix}
                    (or small-temporary-file-directory
                        temporary-file-directory)))
@end example
@end defopt

@defun make-temp-name base-name
この関数は、一意なファイル名として使用できる文字列を生成する。この名前は@var{base-name}で始まり、それに各Emacsジョブごとに異なる、複数のランダムな文字を追加したものである。これは@code{make-temp-file}と似ているが、(i)名前だけを作成し、ファイルは作成しない、(ii)@var{base-name}は絶対ファイル名であること、という点が異なる(MS-DOSシステムでは、8+3ファイル名制限に適合するよう、@var{base-name}が切り詰められる)。

@strong{警告:} この関数を使用するべきではない。かわりに@code{make-temp-file}を使用すること!
この関数は、競合状態の影響を受けやすい。@code{make-temp-name}呼び出しと一時ファイル作成のタイムラグは、セキュリティーホールとなる場合があるかもしれない。
@end defun

@node File Name Completion
@subsection File Name Completion
@cindex file name completion subroutines
@cindex completion, file name

  このセクションでは、ファイル名を補完するための、低レベルサブルーチンについて説明します。より高レベルの関数については、@ref{Reading File
Names}を参照してください。

@defun file-name-all-completions partial-filename directory
この関数は、ディレクトリー@var{directory}内で、@var{partial-filename}で始まる名前のファイルにたいして、すべての補完可能なリストをリターンする。補完の順番はそのディレクトリー内でのファイル順序であり、これは予測不能で何の情報ももたない。

引数@var{partial-filename}は非ディレクトリーパートを含むファイル名でなければならず、スラッシュ(いくつかのシステムではバックスラッシュ)が含まれていてはならない。@var{directory}が絶対ディレクトリーでない場合は、@var{directory}の前にカレントバッファーのデフォルトディレクトリーが追加される。

以下の例では、@file{~rms/lewis}がカレントデフォルトディレクトリーで、名前が@samp{f}で始まる5つのファイル@file{foo}、@file{file~}、@file{file.c}、@file{file.c.~1~}、@file{file.c.~2~}があるものとする:

@example
@group
(file-name-all-completions "f" "")
     @result{} ("foo" "file~" "file.c.~2~"
                "file.c.~1~" "file.c")
@end group

@group
(file-name-all-completions "fo" "")
     @result{} ("foo")
@end group
@end example
@end defun

@defun file-name-completion filename directory &optional predicate
この関数は、ディレクトリー@var{directory}内で、ファイル名@var{filename}を補完する。これはディレクトリー@var{directory}内で、@var{filename}で始まるすべてのファイル名にたいして、最長の共通プレフィックスをリターンする。@var{predicate}が非@code{nil}の場合は、この関数を1引数で呼び出して絶対ファイル名に展開後、@var{predicate}を満足しない補完候補を無視する。

マッチが1つだけ存在し、かつ@var{filename}が正確にそれにマッチする場合、関数は@code{t}をリターンする。関数は、ディレクトリー@var{directory}が@var{filename}で始まる名前のファイルを含まない場合は、@code{nil}をリターンする。

以下の例では、@file{~rms/lewis}がカレントデフォルトディレクトリーで、名前が@samp{f}で始まる5つのファイル@file{foo}、@file{file~}、@file{file.c}、@file{file.c.~1~}、@file{file.c.~2~}があるものとする:

@example
@group
(file-name-completion "fi" "")
     @result{} "file"
@end group

@group
(file-name-completion "file.c.~1" "")
     @result{} "file.c.~1~"
@end group

@group
(file-name-completion "file.c.~1~" "")
     @result{} t
@end group

@group
(file-name-completion "file.c.~3" "")
     @result{} nil
@end group
@end example
@end defun

@defopt completion-ignored-extensions
@code{file-name-completion}は通常、このリスト内の任意の文字列で終わるファイル名を無視する。すべての可能な補完がこれらのサフィックスのいずれか1つで終わるときは、それらを無視しない。この変数は、@code{file-name-all-completions}に影響しない。

典型的な値は、以下のようになる:

@example
@group
completion-ignored-extensions
     @result{} (".o" ".elc" "~" ".dvi")
@end group
@end example

@code{completion-ignored-extensions}のある要素がスラッシュ@samp{/}で終わる場合、それはディレクトリーを示す。スラッシュで@emph{終わらない}要素がディレクトリーにマッチすることは決してない。したがって、上記の値は@file{foo.elc}という名前のディレクトリーを除外しないだろう。
@end defopt

@node Standard File Names
@subsection Standard File Names

  Sometimes, an Emacs Lisp program needs to specify a standard file name for a
particular use---typically, to hold configuration data specified by the
current user.  Usually, such files should be located in the directory
specified by @code{user-emacs-directory}, which is @file{~/.emacs.d} by
default (@pxref{Init File}).  For example, abbrev definitions are stored by
default in @file{~/.emacs.d/abbrev_defs}.  The easiest way to specify such a
file name is to use the function @code{locate-user-emacs-file}.

@defun locate-user-emacs-file base-name &optional old-name
This function returns an absolute file name for an Emacs-specific
configuration or data file.  The argument @file{base-name} should be a
relative file name.  The return value is the absolute name of a file in the
directory specified by @code{user-emacs-directory}; if that directory does
not exist, this function creates it.

If the optional argument @var{old-name} is non-@code{nil}, it specifies a
file in the user's home directory, @file{~/@var{old-name}}.  If such a file
exists, the return value is the absolute name of that file, instead of the
file specified by @var{base-name}.  This argument is intended to be used by
Emacs packages to provide backward compatibility.  For instance, prior to
the introduction of @code{user-emacs-directory}, the abbrev file was located
in @file{~/.abbrev_defs}.  Here is the definition of
@code{abbrev-file-name}:

@example
(defcustom abbrev-file-name
  (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")
  "Default name of file from which to read abbrevs."
  @dots{}
  :type 'file)
@end example
@end defun

  A lower-level function for standardizing file names, which
@code{locate-user-emacs-file} uses as a subroutine, is
@code{convert-standard-filename}.

@defun convert-standard-filename filename
This function returns a file name based on @var{filename}, which fits the
conventions of the current operating system.

On GNU and Unix systems, this simply returns @var{filename}.  On other
operating systems, it may enforce system-specific file name conventions; for
example, on MS-DOS this function performs a variety of changes to enforce
MS-DOS file name limitations, including converting any leading @samp{.} to
@samp{_} and truncating to three characters after the @samp{.}.

The recommended way to use this function is to specify a name which fits the
conventions of GNU and Unix systems, and pass it to
@code{convert-standard-filename}.
@end defun

@node Contents of Directories
@section Contents of Directories
@cindex directory-oriented functions
@cindex file names in directory

  A directory is a kind of file that contains other files entered under
various names.  Directories are a feature of the file system.

  Emacs can list the names of the files in a directory as a Lisp list, or
display the names in a buffer using the @code{ls} shell command.  In the
latter case, it can optionally display information about each file,
depending on the options passed to the @code{ls} command.

@defun directory-files directory &optional full-name match-regexp nosort
This function returns a list of the names of the files in the directory
@var{directory}.  By default, the list is in alphabetical order.

If @var{full-name} is non-@code{nil}, the function returns the files'
absolute file names.  Otherwise, it returns the names relative to the
specified directory.

If @var{match-regexp} is non-@code{nil}, this function returns only those
file names that contain a match for that regular expression---the other file
names are excluded from the list.  On case-insensitive filesystems, the
regular expression matching is case-insensitive.

@c Emacs 19 feature
If @var{nosort} is non-@code{nil}, @code{directory-files} does not sort the
list, so you get the file names in no particular order.  Use this if you
want the utmost possible speed and don't care what order the files are
processed in.  If the order of processing is visible to the user, then the
user will probably be happier if you do sort the names.

@example
@group
(directory-files "~lewis")
     @result{} ("#foo#" "#foo.el#" "." ".."
         "dired-mods.el" "files.texi"
         "files.texi.~1~")
@end group
@end example

An error is signaled if @var{directory} is not the name of a directory that
can be read.
@end defun

@defun directory-files-and-attributes directory &optional full-name match-regexp nosort id-format
This is similar to @code{directory-files} in deciding which files to report
on and how to report their names.  However, instead of returning a list of
file names, it returns for each file a list @code{(@var{filename}
. @var{attributes})}, where @var{attributes} is what @code{file-attributes}
would return for that file.  The optional argument @var{id-format} has the
same meaning as the corresponding argument to @code{file-attributes}
(@pxref{Definition of file-attributes}).
@end defun

@defun file-expand-wildcards pattern &optional full
This function expands the wildcard pattern @var{pattern}, returning a list
of file names that match it.

If @var{pattern} is written as an absolute file name, the values are
absolute also.

If @var{pattern} is written as a relative file name, it is interpreted
relative to the current default directory.  The file names returned are
normally also relative to the current default directory.  However, if
@var{full} is non-@code{nil}, they are absolute.
@end defun

@defun insert-directory file switches &optional wildcard full-directory-p
This function inserts (in the current buffer) a directory listing for
directory @var{file}, formatted with @code{ls} according to @var{switches}.
It leaves point after the inserted text.  @var{switches} may be a string of
options, or a list of strings representing individual options.

The argument @var{file} may be either a directory name or a file
specification including wildcard characters.  If @var{wildcard} is
non-@code{nil}, that means treat @var{file} as a file specification with
wildcards.

If @var{full-directory-p} is non-@code{nil}, that means the directory
listing is expected to show the full contents of a directory.  You should
specify @code{t} when @var{file} is a directory and switches do not contain
@samp{-d}.  (The @samp{-d} option to @code{ls} says to describe a directory
itself as a file, rather than showing its contents.)

On most systems, this function works by running a directory listing program
whose name is in the variable @code{insert-directory-program}.  If
@var{wildcard} is non-@code{nil}, it also runs the shell specified by
@code{shell-file-name}, to expand the wildcards.

MS-DOS and MS-Windows systems usually lack the standard Unix program
@code{ls}, so this function emulates the standard Unix program @code{ls}
with Lisp code.

As a technical detail, when @var{switches} contains the long @samp{--dired}
option, @code{insert-directory} treats it specially, for the sake of dired.
However, the normally equivalent short @samp{-D} option is just passed on to
@code{insert-directory-program}, as any other option.
@end defun

@defvar insert-directory-program
This variable's value is the program to run to generate a directory listing
for the function @code{insert-directory}.  It is ignored on systems which
generate the listing with Lisp code.
@end defvar

@node Create/Delete Dirs
@section Creating, Copying and Deleting Directories
@cindex creating, copying and deleting directories
@c Emacs 19 features

  Most Emacs Lisp file-manipulation functions get errors when used on files
that are directories.  For example, you cannot delete a directory with
@code{delete-file}.  These special functions exist to create and delete
directories.

@findex mkdir
@deffn Command make-directory dirname &optional parents
This command creates a directory named @var{dirname}.  If @var{parents} is
non-@code{nil}, as is always the case in an interactive call, that means to
create the parent directories first, if they don't already exist.

@code{mkdir} is an alias for this.
@end deffn

@deffn Command copy-directory dirname newname &optional keep-time parents copy-contents
This command copies the directory named @var{dirname} to @var{newname}.  If
@var{newname} names an existing directory, @var{dirname} will be copied to a
subdirectory there.

It always sets the file modes of the copied files to match the corresponding
original file.

The third argument @var{keep-time} non-@code{nil} means to preserve the
modification time of the copied files.  A prefix arg makes @var{keep-time}
non-@code{nil}.

The fourth argument @var{parents} says whether to create parent directories
if they don't exist.  Interactively, this happens by default.

The fifth argument @var{copy-contents}, if non-@code{nil}, means to copy the
contents of @var{dirname} directly into @var{newname} if the latter is an
existing directory, instead of copying @var{dirname} into it as a
subdirectory.
@end deffn

@cindex trash
@vindex delete-by-moving-to-trash
@deffn Command delete-directory dirname &optional recursive trash
This command deletes the directory named @var{dirname}.  The function
@code{delete-file} does not work for files that are directories; you must
use @code{delete-directory} for them.  If @var{recursive} is @code{nil}, and
the directory contains any files, @code{delete-directory} signals an error.

@code{delete-directory} only follows symbolic links at the level of parent
directories.

オプション引数@var{trash}が非@code{nil}、かつ変数@code{delete-by-moving-to-trash}が非@code{nil}の場合、このコマンドはファイルを削除するかわりに、システムのTrash(ゴミ箱)にファイルを移動する。@ref{Misc
File Ops,,Miscellaneous File Operations, emacs, The GNU Emacs
Manual}を参照のこと。インタラクティブに呼び出された際は、プレフィックス引数がない場合@var{trash}は@code{t}、それ以外は@code{nil}である。
@end deffn

@node Magic File Names
@section Making Certain File Names ``Magic''
@cindex magic file names

  You can implement special handling for certain file names.  This is called
making those names @dfn{magic}.  The principal use for this feature is in
implementing access to remote files (@pxref{Remote Files,, Remote Files,
emacs, The GNU Emacs Manual}).

  To define a kind of magic file name, you must supply a regular expression to
define the class of names (all those that match the regular expression),
plus a handler that implements all the primitive Emacs file operations for
file names that match.

@cindex file handler
@vindex file-name-handler-alist
  The variable @code{file-name-handler-alist} holds a list of handlers,
together with regular expressions that determine when to apply each
handler.  Each element has this form:

@example
(@var{regexp} . @var{handler})
@end example

@noindent
All the Emacs primitives for file access and file name transformation check
the given file name against @code{file-name-handler-alist}.  If the file
name matches @var{regexp}, the primitives handle that file by calling
@var{handler}.

  The first argument given to @var{handler} is the name of the primitive, as a
symbol; the remaining arguments are the arguments that were passed to that
primitive.  (The first of these arguments is most often the file name
itself.)  For example, if you do this:

@example
(file-exists-p @var{filename})
@end example

@noindent
and @var{filename} has handler @var{handler}, then @var{handler} is called
like this:

@example
(funcall @var{handler} 'file-exists-p @var{filename})
@end example

  When a function takes two or more arguments that must be file names, it
checks each of those names for a handler.  For example, if you do this:

@example
(expand-file-name @var{filename} @var{dirname})
@end example

@noindent
then it checks for a handler for @var{filename} and then for a handler for
@var{dirname}.  In either case, the @var{handler} is called like this:

@example
(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})
@end example

@noindent
The @var{handler} then needs to figure out whether to handle @var{filename}
or @var{dirname}.

  If the specified file name matches more than one handler, the one whose
match starts last in the file name gets precedence.  This rule is chosen so
that handlers for jobs such as uncompression are handled first, before
handlers for jobs such as remote file access.

  Here are the operations that a magic file name handler gets to handle:

@ifnottex
@noindent
@c Not sure why it was here:   @code{find-file-noselect},@*
@code{access-file}, @code{add-name-to-file},
@code{byte-compiler-base-file-name},@* @code{copy-directory},
@code{copy-file}, @code{delete-directory}, @code{delete-file},
@code{diff-latest-backup-file}, @code{directory-file-name},
@code{directory-files}, @code{directory-files-and-attributes},
@code{dired-compress-file}, @code{dired-uncache},@* @code{expand-file-name},
@code{file-accessible-directory-p}, @code{file-acl}, @code{file-attributes},
@code{file-directory-p}, @code{file-equal-p}, @code{file-executable-p},
@code{file-exists-p}, @code{file-in-directory-p}, @code{file-local-copy},
@code{file-modes}, @code{file-name-all-completions},
@code{file-name-as-directory}, @code{file-name-completion},
@code{file-name-directory}, @code{file-name-nondirectory},
@code{file-name-sans-versions}, @code{file-newer-than-file-p},
@code{file-notify-add-watch}, @code{file-notify-rm-watch},
@code{file-ownership-preserved-p}, @code{file-readable-p},
@code{file-regular-p}, @code{file-remote-p}, @code{file-selinux-context},
@code{file-symlink-p}, @code{file-truename}, @code{file-writable-p},
@code{find-backup-file-name}, @code{get-file-buffer},
@code{insert-directory}, @code{insert-file-contents},@* @code{load},
@code{make-auto-save-file-name}, @code{make-directory},
@code{make-directory-internal}, @code{make-symbolic-link},@*
@code{process-file}, @code{rename-file}, @code{set-file-acl},
@code{set-file-modes}, @code{set-file-selinux-context},
@code{set-file-times}, @code{set-visited-file-modtime},
@code{shell-command}, @code{start-file-process},
@code{substitute-in-file-name},@* @code{unhandled-file-name-directory},
@code{vc-registered}, @code{verify-visited-file-modtime},@*
@code{write-region}.
@end ifnottex
@iftex
@noindent
@flushleft
@c Not sure why it was here:   @code{find-file-noselect},
@code{access-file}, @code{add-name-to-file},
@code{byte-com@discretionary{}{}{}piler-base-file-name},
@code{copy-directory}, @code{copy-file},
@code{delete-directory}, @code{delete-file},
@code{diff-latest-backup-file},
@code{directory-file-name},
@code{directory-files},
@code{directory-files-and-at@discretionary{}{}{}tributes},
@code{dired-compress-file}, @code{dired-uncache},
@code{expand-file-name},
@code{file-accessible-direc@discretionary{}{}{}tory-p},
@code{file-acl},
@code{file-attributes},
@code{file-direc@discretionary{}{}{}tory-p},
@code{file-equal-p},
@code{file-executable-p}, @code{file-exists-p},
@code{file-in-directory-p},
@code{file-local-copy},
@code{file-modes}, @code{file-name-all-completions},
@code{file-name-as-directory},
@code{file-name-completion},
@code{file-name-directory},
@code{file-name-nondirec@discretionary{}{}{}tory},
@code{file-name-sans-versions}, @code{file-newer-than-file-p},
@code{file-notify-add-watch}, @code{file-notify-rm-watch},
@code{file-ownership-pre@discretionary{}{}{}served-p},
@code{file-readable-p}, @code{file-regular-p},
@code{file-remote-p}, @code{file-selinux-context},
@code{file-symlink-p}, @code{file-truename}, @code{file-writable-p},
@code{find-backup-file-name},
@code{get-file-buffer},
@code{insert-directory},
@code{insert-file-contents},
@code{load},
@code{make-auto-save-file-name},
@code{make-direc@discretionary{}{}{}tory},
@code{make-direc@discretionary{}{}{}tory-internal},
@code{make-symbolic-link},
@code{process-file},
@code{rename-file}, @code{set-file-acl}, @code{set-file-modes},
@code{set-file-selinux-context}, @code{set-file-times},
@code{set-visited-file-modtime}, @code{shell-command},
@code{start-file-process},
@code{substitute-in-file-name},
@code{unhandled-file-name-directory},
@code{vc-regis@discretionary{}{}{}tered},
@code{verify-visited-file-modtime},
@code{write-region}.
@end flushleft
@end iftex

  Handlers for @code{insert-file-contents} typically need to clear the
buffer's modified flag, with @code{(set-buffer-modified-p nil)}, if the
@var{visit} argument is non-@code{nil}.  This also has the effect of
unlocking the buffer if it is locked.

  The handler function must handle all of the above operations, and possibly
others to be added in the future.  It need not implement all these
operations itself---when it has nothing special to do for a certain
operation, it can reinvoke the primitive, to handle the operation ``in the
usual way''.  It should always reinvoke the primitive for an operation it
does not recognize.  Here's one way to do this:

@smallexample
(defun my-file-handler (operation &rest args)
  ;; @r{First check for the specific operations}
  ;; @r{that we have special handling for.}
  (cond ((eq operation 'insert-file-contents) @dots{})
        ((eq operation 'write-region) @dots{})
        @dots{}
        ;; @r{Handle any operation we don't know about.}
        (t (let ((inhibit-file-name-handlers
                  (cons 'my-file-handler
                        (and (eq inhibit-file-name-operation operation)
                             inhibit-file-name-handlers)))
                 (inhibit-file-name-operation operation))
             (apply operation args)))))
@end smallexample

  When a handler function decides to call the ordinary Emacs primitive for the
operation at hand, it needs to prevent the primitive from calling the same
handler once again, thus leading to an infinite recursion.  The example
above shows how to do this, with the variables
@code{inhibit-file-name-handlers} and @code{inhibit-file-name-operation}.
Be careful to use them exactly as shown above; the details are crucial for
proper behavior in the case of multiple handlers, and for operations that
have two file names that may each have handlers.

@kindex safe-magic (@r{property})
  Handlers that don't really do anything special for actual access to the
file---such as the ones that implement completion of host names for remote
file names---should have a non-@code{nil} @code{safe-magic} property.  For
instance, Emacs normally ``protects'' directory names it finds in
@code{PATH} from becoming magic, if they look like magic file names, by
prefixing them with @samp{/:}.  But if the handler that would be used for
them has a non-@code{nil} @code{safe-magic} property, the @samp{/:} is not
added.

@kindex operations (@r{property})
  A file name handler can have an @code{operations} property to declare which
operations it handles in a nontrivial way.  If this property has a
non-@code{nil} value, it should be a list of operations; then only those
operations will call the handler.  This avoids inefficiency, but its main
purpose is for autoloaded handler functions, so that they won't be loaded
except when they have real work to do.

  Simply deferring all operations to the usual primitives does not work.  For
instance, if the file name handler applies to @code{file-exists-p}, then it
must handle @code{load} itself, because the usual @code{load} code won't
work properly in that case.  However, if the handler uses the
@code{operations} property to say it doesn't handle @code{file-exists-p},
then it need not handle @code{load} nontrivially.

@defvar inhibit-file-name-handlers
This variable holds a list of handlers whose use is presently inhibited for
a certain operation.
@end defvar

@defvar inhibit-file-name-operation
The operation for which certain handlers are presently inhibited.
@end defvar

@defun find-file-name-handler file operation
This function returns the handler function for file name @var{file}, or
@code{nil} if there is none.  The argument @var{operation} should be the
operation to be performed on the file---the value you will pass to the
handler as its first argument when you call it.  If @var{operation} equals
@code{inhibit-file-name-operation}, or if it is not found in the
@code{operations} property of the handler, this function returns @code{nil}.
@end defun

@defun file-local-copy filename
This function copies file @var{filename} to an ordinary non-magic file on
the local machine, if it isn't on the local machine already.  Magic file
names should handle the @code{file-local-copy} operation if they refer to
files on other machines.  A magic file name that is used for other purposes
than remote file access should not handle @code{file-local-copy}; then this
function will treat the file as local.

If @var{filename} is local, whether magic or not, this function does nothing
and returns @code{nil}.  Otherwise it returns the file name of the local
copy file.
@end defun

@defun file-remote-p filename &optional identification connected
This function tests whether @var{filename} is a remote file.  If
@var{filename} is local (not remote), the return value is @code{nil}.  If
@var{filename} is indeed remote, the return value is a string that
identifies the remote system.

This identifier string can include a host name and a user name, as well as
characters designating the method used to access the remote system.  For
example, the remote identifier string for the filename
@code{/sudo::/some/file} is @code{/sudo:root@@localhost:}.

If @code{file-remote-p} returns the same identifier for two different
filenames, that means they are stored on the same file system and can be
accessed locally with respect to each other.  This means, for example, that
it is possible to start a remote process accessing both files at the same
time.  Implementers of file handlers need to ensure this principle is valid.

@var{identification} specifies which part of the identifier shall be
returned as string.  @var{identification} can be the symbol @code{method},
@code{user} or @code{host}; any other value is handled like @code{nil} and
means to return the complete identifier string.  In the example above, the
remote @code{user} identifier string would be @code{root}.

If @var{connected} is non-@code{nil}, this function returns @code{nil} even
if @var{filename} is remote, if Emacs has no network connection to its
host.  This is useful when you want to avoid the delay of making connections
when they don't exist.
@end defun

@defun unhandled-file-name-directory filename
This function returns the name of a directory that is not magic.  It uses
the directory part of @var{filename} if that is not magic.  For a magic file
name, it invokes the file name handler, which therefore decides what value
to return.  If @var{filename} is not accessible from a local process, then
the file name handler should indicate it by returning @code{nil}.

This is useful for running a subprocess; every subprocess must have a
non-magic directory to serve as its current directory, and this function is
a good way to come up with one.
@end defun

@defopt remote-file-name-inhibit-cache
The attributes of remote files can be cached for better performance.  If
they are changed outside of Emacs's control, the cached values become
invalid, and must be reread.

When this variable is set to @code{nil}, cached values are never expired.
Use this setting with caution, only if you are sure nothing other than Emacs
ever changes the remote files.  If it is set to @code{t}, cached values are
never used.  This is the safest value, but could result in performance
degradation.

A compromise is to set it to a positive number.  This means that cached
values are used for that amount of seconds since they were cached.  If a
remote file is checked regularly, it might be a good idea to let-bind this
variable to a value less than the time period between consecutive checks.
For example:

@example
(defun display-time-file-nonempty-p (file)
  (let ((remote-file-name-inhibit-cache
         (- display-time-interval 5)))
    (and (file-exists-p file)
         (< 0 (nth 7 (file-attributes
                       (file-chase-links file)))))))
@end example
@end defopt

@node Format Conversion
@section File Format Conversion

@cindex file format conversion
@cindex encoding file formats
@cindex decoding file formats
@cindex text properties in files
@cindex saving text properties
  Emacs performs several steps to convert the data in a buffer (text, text
properties, and possibly other information) to and from a representation
suitable for storing into a file.  This section describes the fundamental
functions that perform this @dfn{format conversion}, namely
@code{insert-file-contents} for reading a file into a buffer, and
@code{write-region} for writing a buffer into a file.

@menu
* Overview: Format Conversion Overview.  @code{insert-file-contents} and 
                                           @code{write-region}.
* Round-Trip: Format Conversion Round-Trip.  Using @code{format-alist}.
* Piecemeal: Format Conversion Piecemeal.  Specifying non-paired conversion.
@end menu

@node Format Conversion Overview
@subsection Overview
@noindent
The function @code{insert-file-contents}:

@itemize
@item initially, inserts bytes from the file into the buffer;
@item decodes bytes to characters as appropriate;
@item processes formats as defined by entries in @code{format-alist}; and
@item calls functions in @code{after-insert-file-functions}.
@end itemize

@noindent
The function @code{write-region}:

@itemize
@item initially, calls functions in @code{write-region-annotate-functions};
@item processes formats as defined by entries in @code{format-alist};
@item encodes characters to bytes as appropriate; and
@item modifies the file with the bytes.
@end itemize

  This shows the symmetry of the lowest-level operations; reading and writing
handle things in opposite order.  The rest of this section describes the two
facilities surrounding the three variables named above, as well as some
related functions.  @ref{Coding Systems}, for details on character encoding
and decoding.

@node Format Conversion Round-Trip
@subsection Round-Trip Specification

  The most general of the two facilities is controlled by the variable
@code{format-alist}, a list of @dfn{file format} specifications, which
describe textual representations used in files for the data in an Emacs
buffer.  The descriptions for reading and writing are paired, which is why
we call this ``round-trip'' specification (@pxref{Format Conversion
Piecemeal}, for non-paired specification).

@defvar format-alist
This list contains one format definition for each defined file format.  Each
format definition is a list of this form:

@example
(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} @var{modify} @var{mode-fn} @var{preserve})
@end example
@end defvar

@cindex format definition
@noindent
Here is what the elements in a format definition mean:

@table @var
@item name
The name of this format.

@item doc-string
A documentation string for the format.

@item regexp
A regular expression which is used to recognize files represented in this
format.  If @code{nil}, the format is never applied automatically.

@item from-fn
A shell command or function to decode data in this format (to convert file
data into the usual Emacs data representation).

A shell command is represented as a string; Emacs runs the command as a
filter to perform the conversion.

If @var{from-fn} is a function, it is called with two arguments, @var{begin}
and @var{end}, which specify the part of the buffer it should convert.  It
should convert the text by editing it in place.  Since this can change the
length of the text, @var{from-fn} should return the modified end position.

One responsibility of @var{from-fn} is to make sure that the beginning of
the file no longer matches @var{regexp}.  Otherwise it is likely to get
called again.

@item to-fn
A shell command or function to encode data in this format---that is, to
convert the usual Emacs data representation into this format.

If @var{to-fn} is a string, it is a shell command; Emacs runs the command as
a filter to perform the conversion.

If @var{to-fn} is a function, it is called with three arguments: @var{begin}
and @var{end}, which specify the part of the buffer it should convert, and
@var{buffer}, which specifies which buffer.  There are two ways it can do
the conversion:

@itemize @bullet
@item
By editing the buffer in place.  In this case, @var{to-fn} should return the
end-position of the range of text, as modified.

@item
By returning a list of annotations.  This is a list of elements of the form
@code{(@var{position} . @var{string})}, where @var{position} is an integer
specifying the relative position in the text to be written, and @var{string}
is the annotation to add there.  The list must be sorted in order of
position when @var{to-fn} returns it.

When @code{write-region} actually writes the text from the buffer to the
file, it intermixes the specified annotations at the corresponding
positions.  All this takes place without modifying the buffer.
@end itemize

@item modify
A flag, @code{t} if the encoding function modifies the buffer, and
@code{nil} if it works by returning a list of annotations.

@item mode-fn
A minor-mode function to call after visiting a file converted from this
format.  The function is called with one argument, the integer 1; that tells
a minor-mode function to enable the mode.

@item preserve
A flag, @code{t} if @code{format-write-file} should not remove this format
from @code{buffer-file-format}.
@end table

The function @code{insert-file-contents} automatically recognizes file
formats when it reads the specified file.  It checks the text of the
beginning of the file against the regular expressions of the format
definitions, and if it finds a match, it calls the decoding function for
that format.  Then it checks all the known formats over again.  It keeps
checking them until none of them is applicable.

Visiting a file, with @code{find-file-noselect} or the commands that use it,
performs conversion likewise (because it calls @code{insert-file-contents});
it also calls the mode function for each format that it decodes.  It stores
a list of the format names in the buffer-local variable
@code{buffer-file-format}.

@defvar buffer-file-format
This variable states the format of the visited file.  More precisely, this
is a list of the file format names that were decoded in the course of
visiting the current buffer's file.  It is always buffer-local in all
buffers.
@end defvar

When @code{write-region} writes data into a file, it first calls the
encoding functions for the formats listed in @code{buffer-file-format}, in
the order of appearance in the list.

@deffn Command format-write-file file format &optional confirm
This command writes the current buffer contents into the file @var{file} in
a format based on @var{format}, which is a list of format names.  It
constructs the actual format starting from @var{format}, then appending any
elements from the value of @code{buffer-file-format} with a non-@code{nil}
@var{preserve} flag (see above), if they are not already present in
@var{format}.  It then updates @code{buffer-file-format} with this format,
making it the default for future saves.  Except for the @var{format}
argument, this command is similar to @code{write-file}.  In particular,
@var{confirm} has the same meaning and interactive treatment as the
corresponding argument to @code{write-file}.  @xref{Definition of
write-file}.
@end deffn

@deffn Command format-find-file file format
This command finds the file @var{file}, converting it according to format
@var{format}.  It also makes @var{format} the default if the buffer is saved
later.

The argument @var{format} is a list of format names.  If @var{format} is
@code{nil}, no conversion takes place.  Interactively, typing just @key{RET}
for @var{format} specifies @code{nil}.
@end deffn

@deffn Command format-insert-file file format &optional beg end
This command inserts the contents of file @var{file}, converting it
according to format @var{format}.  If @var{beg} and @var{end} are
non-@code{nil}, they specify which part of the file to read, as in
@code{insert-file-contents} (@pxref{Reading from Files}).

The return value is like what @code{insert-file-contents} returns: a list of
the absolute file name and the length of the data inserted (after
conversion).

The argument @var{format} is a list of format names.  If @var{format} is
@code{nil}, no conversion takes place.  Interactively, typing just @key{RET}
for @var{format} specifies @code{nil}.
@end deffn

@defvar buffer-auto-save-file-format
This variable specifies the format to use for auto-saving.  Its value is a
list of format names, just like the value of @code{buffer-file-format};
however, it is used instead of @code{buffer-file-format} for writing
auto-save files.  If the value is @code{t}, the default, auto-saving uses
the same format as a regular save in the same buffer.  This variable is
always buffer-local in all buffers.
@end defvar

@node Format Conversion Piecemeal
@subsection Piecemeal Specification

  In contrast to the round-trip specification described in the previous
subsection (@pxref{Format Conversion Round-Trip}), you can use the variables
@code{after-insert-file-functions} and
@code{write-region-annotate-functions} to separately control the respective
reading and writing conversions.

  Conversion starts with one representation and produces another
representation.  When there is only one conversion to do, there is no
conflict about what to start with.  However, when there are multiple
conversions involved, conflict may arise when two conversions need to start
with the same data.

  This situation is best understood in the context of converting text
properties during @code{write-region}.  For example, the character at
position 42 in a buffer is @samp{X} with a text property @code{foo}.  If the
conversion for @code{foo} is done by inserting into the buffer, say,
@samp{FOO:}, then that changes the character at position 42 from @samp{X} to
@samp{F}.  The next conversion will start with the wrong data straight away.

  To avoid conflict, cooperative conversions do not modify the buffer, but
instead specify @dfn{annotations}, a list of elements of the form
@code{(@var{position} . @var{string})}, sorted in order of increasing
@var{position}.

  If there is more than one conversion, @code{write-region} merges their
annotations destructively into one sorted list.  Later, when the text from
the buffer is actually written to the file, it intermixes the specified
annotations at the corresponding positions.  All this takes place without
modifying the buffer.

@c ??? What about ``overriding'' conversions like those allowed
@c ??? for `write-region-annotate-functions', below?  --ttn

  In contrast, when reading, the annotations intermixed with the text are
handled immediately.  @code{insert-file-contents} sets point to the
beginning of some text to be converted, then calls the conversion functions
with the length of that text.  These functions should always return with
point at the beginning of the inserted text.  This approach makes sense for
reading because annotations removed by the first converter can't be
mistakenly processed by a later converter.  Each conversion function should
scan for the annotations it recognizes, remove the annotation, modify the
buffer text (to set a text property, for example), and return the updated
length of the text, as it stands after those changes.  The value returned by
one function becomes the argument to the next function.

@defvar write-region-annotate-functions
A list of functions for @code{write-region} to call.  Each function in the
list is called with two arguments: the start and end of the region to be
written.  These functions should not alter the contents of the buffer.
Instead, they should return annotations.

As a special case, a function may return with a different buffer current.
Emacs takes this to mean that the current buffer contains altered text to be
output.  It therefore changes the @var{start} and @var{end} arguments of the
@code{write-region} call, giving them the values of @code{point-min} and
@code{point-max} in the new buffer, respectively.  It also discards all
previous annotations, because they should have been dealt with by this
function.
@end defvar

@defvar write-region-post-annotation-function
The value of this variable, if non-@code{nil}, should be a function.  This
function is called, with no arguments, after @code{write-region} has
completed.

If any function in @code{write-region-annotate-functions} returns with a
different buffer current, Emacs calls
@code{write-region-post-annotation-function} more than once.  Emacs calls it
with the last buffer that was current, and again with the buffer before
that, and so on back to the original buffer.

Thus, a function in @code{write-region-annotate-functions} can create a
buffer, give this variable the local value of @code{kill-buffer} in that
buffer, set up the buffer with altered text, and make the buffer current.
The buffer will be killed after @code{write-region} is done.
@end defvar

@defvar after-insert-file-functions
@c ??? The docstring mentions a handler from `file-name-handler-alist'
@c     "intercepting" `insert-file-contents'.  Hmmm.  --ttn
Each function in this list is called by @code{insert-file-contents} with one
argument, the number of characters inserted, and with point at the beginning
of the inserted text.  Each function should leave point unchanged, and
return the new character count describing the inserted text as modified by
the function.
@end defvar

  We invite users to write Lisp programs to store and retrieve text properties
in files, using these hooks, and thus to experiment with various data
formats and find good ones.  Eventually we hope users will produce good,
general extensions we can install in Emacs.

  We suggest not trying to handle arbitrary Lisp objects as text property
names or values---because a program that general is probably difficult to
write, and slow.  Instead, choose a set of possible data types that are
reasonably flexible, and not too hard to encode.
