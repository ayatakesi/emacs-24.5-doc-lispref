# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-05-04 23:31+0900\n"
"PO-Revision-Date: 2018-05-28 02:35+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: files.texi.orig:6 files.texi.orig:7
#, no-wrap
msgid "Files"
msgstr "Files"

#. type: Plain text
#: files.texi.orig:14
msgid "This chapter describes the Emacs Lisp functions and variables to find, create, view, save, and otherwise work with files and directories.  A few other file-related functions are described in @ref{Buffers}, and those related to backups and auto-saving are described in @ref{Backups and Auto-Saving}."
msgstr "このチャプターでは検索、作成、閲覧、保存、その他ファイルとディレクトリーにたいして機能する、Emacs Lispの関数および変数について説明します。その他のいくつかのファイルに関する関数については@ref{Buffers}、バックアップとauto-save(自動保存)に関する関数については@ref{Backups and Auto-Saving}で説明されています。"

#. type: Plain text
#: files.texi.orig:20
msgid "Many of the file functions take one or more arguments that are file names.  A file name is a string.  Most of these functions expand file name arguments using the function @code{expand-file-name}, so that @file{~} is handled correctly, as are relative file names (including @file{../}).  @xref{File Name Expansion}."
msgstr "ファイル関数の多くは、ファイル名であるような引数を1つ以上とります。このファイル名は文字列です。これらの関数のほとんどは、関数@code{expand-file-name}を使用してファイル名引数を展開するので、@file{~}は相対ファイル名(@file{../}を含む)として正しく処理されます。@ref{File Name Expansion}を参照してください。"

#. type: Plain text
#: files.texi.orig:28
msgid "In addition, certain @dfn{magic} file names are handled specially.  For example, when a remote file name is specified, Emacs accesses the file over the network via an appropriate protocol.  @xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.  This handling is done at a very low level, so you may assume that all the functions described in this chapter accept magic file names as file name arguments, except where noted.  @xref{Magic File Names}, for details."
msgstr "加えて、特定の@dfn{magic}ファイル名は特別に扱われます。たとえば、リモートファイル名が指定された際、Emacsは適切なプロトコルを通じて、ネットワーク越しにファイルにアクセスします。@ref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}を参照してください。この処理は非常に低いレベルで行われるので、注記されたものを除き、このチャプターで説明するすべての関数が、ファイル名引数としてmagicファイル名を受け入れると想定しても良いでしょう。詳細は、@xref{Magic File Names}を参照してください。"

#. type: Plain text
#: files.texi.orig:34
msgid "When file I/O functions signal Lisp errors, they usually use the condition @code{file-error} (@pxref{Handling Errors}).  The error message is in most cases obtained from the operating system, according to locale @code{system-messages-locale}, and decoded using coding system @code{locale-coding-system} (@pxref{Locales})."
msgstr "ファイルI/O関数がLispエラーをシグナルする際、通常はコンディション@code{file-error}を使用します(@ref{Handling Errors}を参照)。ほとんどの場合、オペレーティングシステムからロケール@code{system-messages-locale}に応じたエラーメッセージが取得され、コーディングシステム@code{locale-coding-system}を使用してデコードされます(@ref{Locales}を参照)。"

#. type: section
#: files.texi.orig:49 files.texi.orig:51 files.texi.orig:52
#, no-wrap
msgid "Visiting Files"
msgstr "Visiting Files"

#. type: menuentry
#: files.texi.orig:49
msgid "Reading files into Emacs buffers for editing."
msgstr "編集のためにEmacsバッファーにファイルを読み込む。"

#. type: section
#: files.texi.orig:49 files.texi.orig:326 files.texi.orig:327
#, no-wrap
msgid "Saving Buffers"
msgstr "Saving Buffers"

#. type: menuentry
#: files.texi.orig:49
msgid "Writing changed buffers back into files."
msgstr "変更されたバッファーをファイルに書き戻す。"

#. type: section
#: files.texi.orig:49 files.texi.orig:512 files.texi.orig:513
#, no-wrap
msgid "Reading from Files"
msgstr "Reading from Files"

#. type: menuentry
#: files.texi.orig:49
msgid "Reading files into buffers without visiting."
msgstr "ファイルをvisitせずにバッファーに読み込む。"

#. type: section
#: files.texi.orig:49 files.texi.orig:574 files.texi.orig:575
#, no-wrap
msgid "Writing to Files"
msgstr "Writing to Files"

#. type: menuentry
#: files.texi.orig:49
msgid "Writing new files from parts of buffers."
msgstr "バッファーの一部から新たなファイルに書き込む。"

#. type: section
#: files.texi.orig:49 files.texi.orig:678 files.texi.orig:679
#, no-wrap
msgid "File Locks"
msgstr "File Locks"

#. type: menuentry
#: files.texi.orig:49
msgid "Locking and unlocking files, to prevent simultaneous editing by two people."
msgstr "複数名による同時編集を防ぐためにファイルをlockまたはunlockする。"

#. type: section
#: files.texi.orig:49 files.texi.orig:769 files.texi.orig:770
#, no-wrap
msgid "Information about Files"
msgstr "Information about Files"

#. type: menuentry
#: files.texi.orig:49
msgid "Testing existence, accessibility, size of files."
msgstr "ファイルの存在、アクセス権、サイズのテスト。"

#. type: node
#: files.texi.orig:49 files.texi.orig:1474
#, no-wrap
msgid "Changing Files"
msgstr "Changing Files"

#. type: menuentry
#: files.texi.orig:49
msgid "Renaming files, changing permissions, etc."
msgstr "ファイル名のリネームやパーミッションの変更など。"

#. type: section
#: files.texi.orig:49 files.texi.orig:1771 files.texi.orig:1772
#, no-wrap
msgid "File Names"
msgstr "File Names"

#. type: menuentry
#: files.texi.orig:49
msgid "Decomposing and expanding file names."
msgstr "ファイル名の分解と展開。"

#. type: section
#: files.texi.orig:49 files.texi.orig:2558 files.texi.orig:2559
#, no-wrap
msgid "Contents of Directories"
msgstr "Contents of Directories"

#. type: menuentry
#: files.texi.orig:49
msgid "Getting a list of the files in a directory."
msgstr "ディレクトリーないのファイルリストの取得。"

#. type: node
#: files.texi.orig:49 files.texi.orig:2669
#, no-wrap
msgid "Create/Delete Dirs"
msgstr "Create/Delete Dirs"

#. type: menuentry
#: files.texi.orig:49
msgid "Creating and Deleting Directories."
msgstr "ディレクトリーの作成と削除。"

#. type: node
#: files.texi.orig:49 files.texi.orig:2731
#, no-wrap
msgid "Magic File Names"
msgstr "Magic File Names"

#. type: menuentry
#: files.texi.orig:49
msgid "Special handling for certain file names."
msgstr "特定のファイル名にたいする特別な処理。"

#. type: node
#: files.texi.orig:49 files.texi.orig:3082
#, no-wrap
msgid "Format Conversion"
msgstr "Format Conversion"

#. type: menuentry
#: files.texi.orig:49
msgid "Conversion to and from various file formats."
msgstr "さまざまなファイルフォーマットへ/からの変換。"

#. type: cindex
#: files.texi.orig:53
#, no-wrap
msgid "finding files"
msgstr "finding files"

#. type: cindex
#: files.texi.orig:54
#, no-wrap
msgid "visiting files"
msgstr "visiting files"

#. type: Plain text
#: files.texi.orig:59
msgid "Visiting a file means reading a file into a buffer.  Once this is done, we say that the buffer is @dfn{visiting} that file, and call the file ``the visited file'' of the buffer."
msgstr "ファイルのvisitとは、ファイルをバッファーに読み込むことを意味します。一度これを行うと、わたしたちはバッファーがファイルを@dfn{visit(訪問)}していると言い、ファイルのことをバッファーの``visit''されたファイルと呼んでいます。"

#. type: Plain text
#: files.texi.orig:69
msgid "A file and a buffer are two different things.  A file is information recorded permanently in the computer (unless you delete it).  A buffer, on the other hand, is information inside of Emacs that will vanish at the end of the editing session (or when you kill the buffer).  When a buffer is visiting a file, it contains information copied from the file.  The copy in the buffer is what you modify with editing commands.  Changes to the buffer do not change the file; to make the changes permanent, you must @dfn{save} the buffer, which means copying the altered buffer contents back into the file."
msgstr "ファイルとバッファーは、2つの異なる事柄です。ファイルとは、(削除しない限り)コンピューター内に永続的に記録された情報です。一方バッファーとは、編集セッションの終了(またはバッファーのkill)とともに消滅する、Emacs内部の情報です。あるバッファーがファイルをvistしているとき、バッファーぬはファイルからコピーされた情報が含まれます。編集コマンドにより変更されるのは、バッファー内のコピーです。バッファーへの変更によりファイルは変更されません。その変更を永続化させるには、バッファーを@dfn{保存(save)}しなければなりません。これは変更されたバッファーのコンテンツをファイルにコピーして戻すことを意味します。"

#. type: Plain text
#: files.texi.orig:76
msgid "Despite the distinction between files and buffers, people often refer to a file when they mean a buffer and vice-versa.  Indeed, we say, ``I am editing a file'', rather than, ``I am editing a buffer that I will soon save as a file of the same name''.  Humans do not usually need to make the distinction explicit.  When dealing with a computer program, however, it is good to keep the distinction in mind."
msgstr "ファイルとバッファーは異なるにも関わらず、人はバッファーという意味でファイルを呼んだり、その逆を行うことが多々あります。実際のところ、``わたしは間もなく同じ名前のファイルに保存するバッファーを編集している''ではなく、``わたしはファイルを編集している''と言います。人間がこの違いを明示する必要は、通常はありません。しかし、コンピュータープログラムに対処する際は、この違いを心に留めておくのが良いでしょう。"

#. type: node
#: files.texi.orig:80 files.texi.orig:82
#, no-wrap
msgid "Visiting Functions"
msgstr "Visiting Functions"

#. type: menuentry
#: files.texi.orig:80
msgid "The usual interface functions for visiting."
msgstr "visit用の通常のインターフェイス関数。"

#. type: subsection
#: files.texi.orig:80 files.texi.orig:252 files.texi.orig:253
#, no-wrap
msgid "Subroutines of Visiting"
msgstr "Subroutines of Visiting"

#. type: menuentry
#: files.texi.orig:80
msgid "Lower-level subroutines that they use."
msgstr "通常のvisit関数が使用する低レベルのサブルーチン。"

#. type: subsection
#: files.texi.orig:83
#, no-wrap
msgid "Functions for Visiting Files"
msgstr "Functions for Visiting Files"

#. type: cindex
#: files.texi.orig:84
#, no-wrap
msgid "visiting files, functions for"
msgstr "visiting files, functions for"

#. type: cindex
#: files.texi.orig:85
#, no-wrap
msgid "how to visit files"
msgstr "how to visit files"

#. type: Plain text
#: files.texi.orig:92
msgid "This section describes the functions normally used to visit files.  For historical reasons, these functions have names starting with @samp{find-} rather than @samp{visit-}.  @xref{Buffer File Name}, for functions and variables that access the visited file name of a buffer or that find an existing buffer by its visited file name."
msgstr "このセクションでは、ファイルのvisitに通常使用される関数を説明します。歴史的な理由により、これらの関数は@samp{visit-}ではなく、@samp{find-}で始まる名前をもちます。バッファーをvisitしているファイルの名前へのアクセスや、visitされたファイル名から既存のバッファーを見つける関数および変数については、@ref{Buffer File Name}を参照してください。"

#. type: Plain text
#: files.texi.orig:97
msgid "In a Lisp program, if you want to look at the contents of a file but not alter it, the fastest way is to use @code{insert-file-contents} in a temporary buffer.  Visiting the file is not necessary and takes longer.  @xref{Reading from Files}."
msgstr "Lispプログラム内では、ファイル内容を見たいものの変更したくない場合はテンポラリーバッファー(temporary buffer: 一時的なバッファー)で@code{insert-file-contents}を使用例するのが、もっとも高速な方法です。時間を要するファイルのvisitは必要ありません。@ref{Reading from Files}を参照してください。"

#. type: deffn
#: files.texi.orig:98
#, no-wrap
msgid "Command find-file filename &optional wildcards"
msgstr "Command find-file filename &optional wildcards"

#. type: deffn
#: files.texi.orig:102
msgid "This command selects a buffer visiting the file @var{filename}, using an existing buffer if there is one, and otherwise creating a new buffer and reading the file into it.  It also returns that buffer."
msgstr "このコマンドは、ファイル@var{filename}をvisitしているバッファーを選択する。visitしている既存のバッファーがあればそのバッファーを使用し、なければバッファーを新たに作成して、そのバッファーにファイルを読み込む。これはそのバッファーをリターンする。"

#. type: deffn
#: files.texi.orig:105
msgid "Aside from some technical details, the body of the @code{find-file} function is basically equivalent to:"
msgstr "技術的な詳細を別とすると、@code{find-file}関数のbodyは基本的には以下と等価である:"

#. type: smallexample
#: files.texi.orig:108
#, no-wrap
msgid "(switch-to-buffer (find-file-noselect filename nil nil wildcards))\n"
msgstr "(switch-to-buffer (find-file-noselect filename nil nil wildcards))\n"

#. type: deffn
#: files.texi.orig:112
msgid "(See @code{switch-to-buffer} in @ref{Switching Buffers}.)"
msgstr "(@ref{Switching Buffers}の@code{switch-to-buffer}を参照されたい。)"

#. type: deffn
#: files.texi.orig:116
msgid "If @var{wildcards} is non-@code{nil}, which is always true in an interactive call, then @code{find-file} expands wildcard characters in @var{filename} and visits all the matching files."
msgstr "@var{wildcards}が非@code{nil}(これはinteractiveに呼び出された場合は常にtrueである)の場合、@code{find-file}は@var{filename}内のワイルドカード文字を展開して、マッチするすべてのファイルをvisitする。"

#. type: deffn
#: files.texi.orig:119
msgid "When @code{find-file} is called interactively, it prompts for @var{filename} in the minibuffer."
msgstr "@code{find-file}がinteractiveに呼び出された際は、ミニバッファー内で@var{filename}の入力を求める。"

#. type: deffn
#: files.texi.orig:121
#, no-wrap
msgid "Command find-file-literally filename"
msgstr "Command find-file-literally filename"

#. type: deffn
#: files.texi.orig:132
msgid "This command visits @var{filename}, like @code{find-file} does, but it does not perform any format conversions (@pxref{Format Conversion}), character code conversions (@pxref{Coding Systems}), or end-of-line conversions (@pxref{Coding System Basics, End of line conversion}).  The buffer visiting the file is made unibyte, and its major mode is Fundamental mode, regardless of the file name.  File local variable specifications in the file (@pxref{File Local Variables}) are ignored, and automatic decompression and adding a newline at the end of the file due to @code{require-final-newline} (@pxref{Saving Buffers, require-final-newline}) are also disabled."
msgstr "このコマンドは、@code{find-file}が行うように@var{filename}をvisitするが、フォーマット変換(@ref{Format Conversion}を参照)、文字コード変換(@ref{Coding Systems}を参照)、EOL変換(@ref{Coding System Basics, End of line conversion}を参照)を何も行わない。ファイルをvisitしているバッファーはunibyteになり、ファイル名とは無関係にバッファーのメジャーモードはFundamentalモードになる。ファイル内で指定されたファイルローカル変数(@ref{File Local Variables}を参照)は無視され、自動的な解凍と@code{require-final-newline}によるファイル終端への改行追加(@ref{Saving Buffers, require-final-newline}を参照)も無効になる。"

#. type: deffn
#: files.texi.orig:139
msgid "Note that if Emacs already has a buffer visiting the same file non-literally, it will not visit the same file literally, but instead just switch to the existing buffer.  If you want to be sure of accessing a file's contents literally, you should create a temporary buffer and then read the file contents into it using @code{insert-file-contents-literally} (@pxref{Reading from Files})."
msgstr "Emacsがすでにリテラリー(literally: 文字通り、そのまま)でない方法で同じファイルをvisitしているバッファーをもつ場合、Emacsはその同じファイルをリテラリーにvisitせず、単に既存のバッファーに切り替わることに注意されたい。あるファイルのコンテンツにたいして、確実にリテラリーにアクセスしたい場合は、テンポラリーバッファーを作成し、@code{insert-file-contents-literally}を使用してファイルのコンテンツを読み込むべきである(@ref{Reading from Files}を参照)。"

#. type: defun
#: files.texi.orig:141
#, no-wrap
msgid "find-file-noselect filename &optional nowarn rawfile wildcards"
msgstr "find-file-noselect filename &optional nowarn rawfile wildcards"

#. type: defun
#: files.texi.orig:146
msgid "This function is the guts of all the file-visiting functions.  It returns a buffer visiting the file @var{filename}.  You may make the buffer current or display it in a window if you wish, but this function does not do so."
msgstr "この関数は、ファイルをvisitするすべての関数の要である。これは、ファイル@var{filename}をvisitしているバッファーをリターンする。望むならそのバッファーをカレントにしたり、あるウィンドウ内に表示することができるだろうが、この関数はそれを行わない。"

#. type: defun
#: files.texi.orig:154
msgid "The function returns an existing buffer if there is one; otherwise it creates a new buffer and reads the file into it.  When @code{find-file-noselect} uses an existing buffer, it first verifies that the file has not changed since it was last visited or saved in that buffer.  If the file has changed, this function asks the user whether to reread the changed file.  If the user says @samp{yes}, any edits previously made in the buffer are lost."
msgstr "関数は、既存のバッファーがあればそれをリターンし、なければ新たにバッファーを作成し、それにファイルを読み込む。@code{find-file-noselect}が既存のバッファーを使用する際は、まずファイルがそのバッファーに最後にvisit、または保存したときから変更されていないことを検証する。ファイルが変更されている場合、この関数は変更されたファイルを再読み込みするかどうかをユーザーに尋ねる。ユーザーが@samp{yes}と応えた場合、以前に行われたそのバッファー内での編集は失われる。"

#. type: defun
#: files.texi.orig:160
msgid "Reading the file involves decoding the file's contents (@pxref{Coding Systems}), including end-of-line conversion, and format conversion (@pxref{Format Conversion}).  If @var{wildcards} is non-@code{nil}, then @code{find-file-noselect} expands wildcard characters in @var{filename} and visits all the matching files."
msgstr "ファイルの読み込みは、EOL変換、フォーマット変換(@ref{Format Conversion}を参照)を含む、ファイルコンテンツのデコードを要する(@ref{Coding Systems}を参照)。@var{wildcards}が非@code{nil}の場合、@code{find-file-noselect}は@var{filename}内のワイルドカード文字を展開して、マッチするすべてのファイルをvisitする。"

#. type: defun
#: files.texi.orig:166
msgid "This function displays warning or advisory messages in various peculiar cases, unless the optional argument @var{nowarn} is non-@code{nil}.  For example, if it needs to create a buffer, and there is no file named @var{filename}, it displays the message @samp{(New file)} in the echo area, and leaves the buffer empty."
msgstr "この関数は、オプション引数@var{nowarn}が@code{nil}の場合は、さまざまな特殊ケースにおいて、警告メッセージ(warning message)、および注意メッセージ(advisory message)を表示する。たとえば、関数がバッファーの作成を必要とし、かつ@var{filename}という名前のファイルが存在しない場合は、エコーエリア内にメッセージ@samp{(New file)}を表示して、そのバッファーを空のままに留める。"

#. type: defun
#: files.texi.orig:173
msgid "The @code{find-file-noselect} function normally calls @code{after-find-file} after reading the file (@pxref{Subroutines of Visiting}).  That function sets the buffer major mode, parses local variables, warns the user if there exists an auto-save file more recent than the file just visited, and finishes by running the functions in @code{find-file-hook}."
msgstr "@code{find-file-noselect}関数は通常、ファイルを読み込んだ後に@code{after-find-file}を呼び出す(@ref{Subroutines of Visiting}を参照)。この関数はバッファーのメジャーモードのセット、ローカル変数のパース、正にvisitしたファイルより新しいauto-saveファイルが存在する場合のユーザーへの警告を行い、@code{find-file-hook}内の関数を実行することにより終了する。"

#. type: defun
#: files.texi.orig:179
msgid "If the optional argument @var{rawfile} is non-@code{nil}, then @code{after-find-file} is not called, and the @code{find-file-not-found-functions} are not run in case of failure.  What's more, a non-@code{nil} @var{rawfile} value suppresses coding system conversion and format conversion."
msgstr "オプション引数@var{rawfile}が非@code{nil}の場合、@code{after-find-file}は呼び出されず、失敗時に@code{find-file-not-found-functions}は呼び出されない。さらに、非@code{nil}値の@var{rawfile}は、コーディングシステム変換およびフォーマット変換を抑制する。"

#. type: defun
#: files.texi.orig:184
msgid "The @code{find-file-noselect} function usually returns the buffer that is visiting the file @var{filename}.  But, if wildcards are actually used and expanded, it returns a list of buffers that are visiting the various files."
msgstr "@code{find-file-noselect}関数は、通常はファイル@var{filename}をvisitしているバッファーをリターンする。しかし、ワイルドカードが実際に使用、展開された場合は、それらのファイルをvisitしているバッファーのリストをリターンする。"

#. type: group
#: files.texi.orig:189
#, no-wrap
msgid ""
"(find-file-noselect \"/etc/fstab\")\n"
"     @result{} #<buffer fstab>\n"
msgstr ""
"(find-file-noselect \"/etc/fstab\")\n"
"     @result{} #<buffer fstab>\n"

#. type: deffn
#: files.texi.orig:193
#, no-wrap
msgid "Command find-file-other-window filename &optional wildcards"
msgstr "Command find-file-other-window filename &optional wildcards"

#. type: deffn
#: files.texi.orig:198
msgid "This command selects a buffer visiting the file @var{filename}, but does so in a window other than the selected window.  It may use another existing window or split a window; see @ref{Switching Buffers}."
msgstr "このコマンドは、ファイル@var{filename}をvisitしているバッファーを選択するが、選択されたウィンドウではない他のウィンドウでこれを行う。これは、別の既存ウィンドウを使用したり、ウィンドウを分割するかもしれない。@ref{Switching Buffers}lを参照のこと。"

#. type: deffn
#: files.texi.orig:201 files.texi.orig:210
msgid "When this command is called interactively, it prompts for @var{filename}."
msgstr "このコマンドがinteractiveに呼び出された際は、@var{filename}の入力を求める。"

#. type: deffn
#: files.texi.orig:203
#, no-wrap
msgid "Command find-file-read-only filename &optional wildcards"
msgstr "Command find-file-read-only filename &optional wildcards"

#. type: deffn
#: files.texi.orig:207
msgid "This command selects a buffer visiting the file @var{filename}, like @code{find-file}, but it marks the buffer as read-only.  @xref{Read Only Buffers}, for related functions and variables."
msgstr "このコマンドは、@code{find-file}のようにファイル@var{filename}をvisitしているバッファーを選択するが、そのバッファーを読み取り専用(read-only)とマークする。関連する関数および変数については、@ref{Read Only Buffers}を参照のこと。"

#. type: defopt
#: files.texi.orig:212
#, no-wrap
msgid "find-file-wildcards"
msgstr "find-file-wildcards"

#. type: defopt
#: files.texi.orig:219
msgid "If this variable is non-@code{nil}, then the various @code{find-file} commands check for wildcard characters and visit all the files that match them (when invoked interactively or when their @var{wildcards} argument is non-@code{nil}).  If this option is @code{nil}, then the @code{find-file} commands ignore their @var{wildcards} argument and never treat wildcard characters specially."
msgstr "この変数が非@code{nil}の場合、各種@code{find-file}コマンドはワイルドカード文字をチェックして、それらにマッチするすべてのファイルをvisitする(interactiveに呼び出されたとき、または@var{wildcards}引数が非@code{nil}のとき)。このオプションが@code{nil}の場合、@code{find-file}コマンドはそれらの@var{wildcards}引数を無視して、ワイルドカード文字を特別に扱うことは決してない。"

#. type: defopt
#: files.texi.orig:221
#, no-wrap
msgid "find-file-hook"
msgstr "find-file-hook"

#. type: defopt
#: files.texi.orig:226
msgid "The value of this variable is a list of functions to be called after a file is visited.  The file's local-variables specification (if any) will have been processed before the hooks are run.  The buffer visiting the file is current when the hook functions are run."
msgstr "この変数の値は、ファイルがvisitされた後に呼び出される、関数のリストである。ファイルのローカル変数指定は、(もしあれば)このフックが実行される前に処理されるだろう。フック関数実行時は、そのファイルをvisitしているバッファーがカレントになる。"

#. type: defopt
#: files.texi.orig:228
msgid "This variable is a normal hook.  @xref{Hooks}."
msgstr "この変数はノーマルフックである。@ref{Hooks}を参照のこと。"

#. type: defvar
#: files.texi.orig:230
#, no-wrap
msgid "find-file-not-found-functions"
msgstr "find-file-not-found-functions"

#. type: defvar
#: files.texi.orig:237
msgid "The value of this variable is a list of functions to be called when @code{find-file} or @code{find-file-noselect} is passed a nonexistent file name.  @code{find-file-noselect} calls these functions as soon as it detects a nonexistent file.  It calls them in the order of the list, until one of them returns non-@code{nil}.  @code{buffer-file-name} is already set up."
msgstr "この変数の値は、@code{find-file}または@code{find-file-noselect}が存在しないファイル名を受け取った際に呼び出される、関数のリストである。存在しないファイルを検知すると、@code{find-file-noselect}は直ちにこれらの関数を呼び出す。これらのうち、いずれかが非@code{nil}をリターンするまで、リストの順に関数を呼び出す。@code{buffer-file-name}はすでにセットアップ済みである。"

#. type: defvar
#: files.texi.orig:240
msgid "This is not a normal hook because the values of the functions are used, and in many cases only some of the functions are called."
msgstr "関数の値が使用され、多くの場合いくつかの関数だけが呼び出されるので、これはノーマルフックではない。"

#. type: defvar
#: files.texi.orig:242
#, no-wrap
msgid "find-file-literally"
msgstr "find-file-literally"

#. type: defvar
#: files.texi.orig:250
msgid "This buffer-local variable, if set to a non-@code{nil} value, makes @code{save-buffer} behave as if the buffer were visiting its file literally, i.e., without conversions of any kind.  The command @code{find-file-literally} sets this variable's local value, but other equivalent functions and commands can do that as well, e.g., to avoid automatic addition of a newline at the end of the file.  This variable is permanent local, so it is unaffected by changes of major modes."
msgstr "このバッファーローカル変数が非@code{nil}値にセットされた場合、@code{save-buffer}はあたかもそのバッファーがリテラリー、つまり何の変換も行わずにファイルをvisitしていたかのように振る舞う。コマンド@code{find-file-literally}は、この変数のローカル値をセットするが、その他の等価な関数およびコマンドも、たとえばファイル終端への改行の自動追加を避けるために、同様にこれを行うことができる。この変数は恒久的にローカルなので、メジャーモードの変更により影響を受けない。"

#. type: Plain text
#: files.texi.orig:258
msgid "The @code{find-file-noselect} function uses two important subroutines which are sometimes useful in user Lisp code: @code{create-file-buffer} and @code{after-find-file}.  This section explains how to use them."
msgstr "@code{find-file-noselect}関数は、2つの重要なサブルーチン@code{create-file-buffer}および@code{after-find-file}を使用します。これらはユーザーのLispコードでも役に立つことがあります。このセクションでは、それらの使い方について説明します。"

#. type: defun
#: files.texi.orig:262
#, no-wrap
msgid "create-file-buffer filename"
msgstr "create-file-buffer filename"

#. type: defun
#: files.texi.orig:269
msgid "This function creates a suitably named buffer for visiting @var{filename}, and returns it.  It uses @var{filename} (sans directory)  as the name if that name is free; otherwise, it appends a string such as @samp{<2>} to get an unused name.  See also @ref{Creating Buffers}.  Note that the @file{uniquify} library affects the result of this function.  @xref{Uniquify,,, emacs, The GNU Emacs Manual}."
msgstr "この関数は、@var{filename}のvisitにたいして適切な名前のバッファーを作成して、それをリターンする。これは@var{filename}(ディレクトリー含まず)の名前がフリーならバッファー名にそれを使用し、フリーでなければ未使用の名前を取得するために@samp{<2>}のような文字列を付加する。@ref{Creating Buffers}も参照のこと。@file{uniquify}ライブラリーは、この関数の結果に影響を与えることに注意されたい。@ref{Uniquify,,, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: defun
#: files.texi.orig:273
msgid "@strong{Please note:} @code{create-file-buffer} does @emph{not} associate the new buffer with a file and does not select the buffer.  It also does not use the default major mode."
msgstr "@strong{注意してください:} @code{create-file-buffer}はファイルに新たなバッファーを@emph{関連付けません}。バッファーの選択もせず、さらにデフォルトのメジャーモードも使用しません。"

#. type: group
#: files.texi.orig:278
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo>\n"
msgstr ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo>\n"

#. type: group
#: files.texi.orig:282
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<2>>\n"
msgstr ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<2>>\n"

#. type: group
#: files.texi.orig:286
#, no-wrap
msgid ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<3>>\n"
msgstr ""
"(create-file-buffer \"foo\")\n"
"     @result{} #<buffer foo<3>>\n"

#. type: defun
#: files.texi.orig:291
msgid "This function is used by @code{find-file-noselect}.  It uses @code{generate-new-buffer} (@pxref{Creating Buffers})."
msgstr "この関数は、@code{find-file-noselect}により使用される。この関数自身は@code{generate-new-buffer}を使用する(@ref{Creating Buffers}を参照)。"

#. type: defun
#: files.texi.orig:293
#, no-wrap
msgid "after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes"
msgstr "after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes"

#. type: defun
#: files.texi.orig:297
msgid "This function sets the buffer major mode, and parses local variables (@pxref{Auto Major Mode}).  It is called by @code{find-file-noselect} and by the default revert function (@pxref{Reverting})."
msgstr "この関数は、バッファーのメジャーモードをセットして、ローカル変数をパースする(@ref{Auto Major Mode}を参照)。これは@code{find-file-noselect}、およびデフォルトのリバート関数(@ref{Reverting}を参照)により呼び出される。"

#. type: cindex
#: files.texi.orig:298
#, no-wrap
msgid "new file message"
msgstr "new file message"

#. type: cindex
#: files.texi.orig:299
#, no-wrap
msgid "file open error"
msgstr "file open error"

#. type: defun
#: files.texi.orig:305
msgid "If reading the file got an error because the file does not exist, but its directory does exist, the caller should pass a non-@code{nil} value for @var{error}.  In that case, @code{after-find-file} issues a warning: @samp{(New file)}.  For more serious errors, the caller should usually not call @code{after-find-file}."
msgstr "ファイルが存在しない理由によりファイルの読み込みがエラーを受け取るが、ディレクトリーは存在する場合、呼び出し側は@var{error}にたいして非@code{nil}値を綿すべきである。この場合、@code{after-find-file}は警告@samp{(New file)}を発する。より深刻なエラーにたいしては、呼び出し側は通常は@code{after-find-file}を呼び出すべきでない。"

#. type: defun
#: files.texi.orig:308
msgid "If @var{warn} is non-@code{nil}, then this function issues a warning if an auto-save file exists and is more recent than the visited file."
msgstr "@var{warn}が非@code{nil}の場合、もしauto-saveファイルが存在し、かつそれがvisitされているファイルより新しいなら、この関数は警告を発する。"

#. type: defun
#: files.texi.orig:311
msgid "If @var{noauto} is non-@code{nil}, that says not to enable or disable Auto-Save mode.  The mode remains enabled if it was enabled before."
msgstr "@var{noauto}が非@code{nil}の場合、それはAuto-Saveモードを有効、または無効にしないことを告げる。以前にAuto-Saveモードが有効ならば、有効のまま留まる。"

#. type: defun
#: files.texi.orig:316
msgid "If @var{after-find-file-from-revert-buffer} is non-@code{nil}, that means this call was from @code{revert-buffer}.  This has no direct effect, but some mode functions and hook functions check the value of this variable."
msgstr "@var{after-find-file-from-revert-buffer}が非@code{nil}の場合、それはこの関数が@code{revert-buffer}から呼び出されたことを意味する。これに直接的な効果はないが、モード関数およびフック関数の中には、この変数の値をチェックするものがいくつかある。"

#. type: defun
#: files.texi.orig:321
msgid "If @var{nomodes} is non-@code{nil}, that means don't alter the buffer's major mode, don't process local variables specifications in the file, and don't run @code{find-file-hook}.  This feature is used by @code{revert-buffer} in some cases."
msgstr "@var{nomodes}が非@code{nil}の場合、それはバッファーのメジャーモードを変更せず、ファイル内のローカル変数指定を処理せず、@code{find-file-hook}を実行しないことを意味する。この機能は、あるケースにおいて@code{revert-buffer}により使用される。"

#. type: defun
#: files.texi.orig:324
msgid "The last thing @code{after-find-file} does is call all the functions in the list @code{find-file-hook}."
msgstr "@code{after-find-file}が最後に行うのは、リスト@code{find-file-hook}内のすべての関数を呼び出すことである。"

#. type: cindex
#: files.texi.orig:328
#, no-wrap
msgid "saving buffers"
msgstr "saving buffers"

#. type: Plain text
#: files.texi.orig:335
msgid "When you edit a file in Emacs, you are actually working on a buffer that is visiting that file---that is, the contents of the file are copied into the buffer and the copy is what you edit.  Changes to the buffer do not change the file until you @dfn{save} the buffer, which means copying the contents of the buffer into the file."
msgstr "Emacs内でファイルを編集とき、実際にはそのファイルをvisitしているバッファーにたいして編集を行っています。つまり、ファイルのコンテンツをバッファーにコピーして、編集しているのはそのコピーなのです。そのバッファーにを変更しても、バッファーを@dfn{保存(save)}するまでファイルは変更されません。保存とは、バッファーのコンテンツをファイルにコピーすることを意味します。"

#. type: deffn
#: files.texi.orig:336
#, no-wrap
msgid "Command save-buffer &optional backup-option"
msgstr "Command save-buffer &optional backup-option"

#. type: deffn
#: files.texi.orig:340
msgid "This function saves the contents of the current buffer in its visited file if the buffer has been modified since it was last visited or saved.  Otherwise it does nothing."
msgstr "この関数は、バッファーが最後にvisitされたとき、または保存されたときから変更されている場合は、カレントバッファーのコンテンツを、バッファーによりvisitされているファイルに保存し、変更されていなければ何も行わない。"

#. type: deffn
#: files.texi.orig:346
msgid "@code{save-buffer} is responsible for making backup files.  Normally, @var{backup-option} is @code{nil}, and @code{save-buffer} makes a backup file only if this is the first save since visiting the file.  Other values for @var{backup-option} request the making of backup files in other circumstances:"
msgstr "@code{save-buffer}は、バックアップファイルの作成に責任を負う。通常、@var{backup-option}は@code{nil}であり、@code{save-buffer}はファイルをvisit以降、それが最初の保存の場合のみバックアップファイルを作成する。@var{backup-option}にたいする他の値は、別の条件によるバックアップファイル作成を要求する:"

#. type: itemize
#: files.texi.orig:352
msgid "With an argument of 4 or 64, reflecting 1 or 3 @kbd{C-u}'s, the @code{save-buffer} function marks this version of the file to be backed up when the buffer is next saved."
msgstr "引数4は1つの@kbd{C-u}を、引数64は3つの@kbd{C-u}を示すので、@code{save-buffer}はバッファーの次回保存時にこのバージョンのファイルがバックアップされるようマークする。"

#. type: itemize
#: files.texi.orig:357
msgid "With an argument of 16 or 64, reflecting 2 or 3 @kbd{C-u}'s, the @code{save-buffer} function unconditionally backs up the previous version of the file before saving it."
msgstr "引数16は2つの@kbd{C-u}を、引数64は3つの@kbd{C-u}を示すので、@code{save-buffer}関数はそれを保存する前に、前バージョンのファイルを無条件にバックアップする。"

#. type: itemize
#: files.texi.orig:360
msgid "With an argument of 0, unconditionally do @emph{not} make any backup file."
msgstr "引数0は、無条件にバックアップファイルを何も@emph{作成しない}。"

#. type: deffn
#: files.texi.orig:363
#, no-wrap
msgid "Command save-some-buffers &optional save-silently-p pred"
msgstr "Command save-some-buffers &optional save-silently-p pred"

#. type: anchor{#1}
#: files.texi.orig:369
msgid "Definition of save-some-buffers"
msgstr "Definition of save-some-buffers"

#. type: deffn
#: files.texi.orig:369
msgid "This command saves some modified file-visiting buffers.  Normally it asks the user about each buffer.  But if @var{save-silently-p} is non-@code{nil}, it saves all the file-visiting buffers without querying the user."
msgstr "このコマンドは、ファイルをvisitしている変更されたバッファーのいくつかを保存する。これは通常、各バッファーごとにユーザーに確認を求める。しかし、@var{save-silently-p}が非@code{nil}の場合は、ユーザーに質問せずにファイルをvisitしているすべてのバッファーを保存する。"

#. type: deffn
#: files.texi.orig:379
msgid "The optional @var{pred} argument controls which buffers to ask about (or to save silently if @var{save-silently-p} is non-@code{nil}).  If it is @code{nil}, that means to ask only about file-visiting buffers.  If it is @code{t}, that means also offer to save certain other non-file buffers---those that have a non-@code{nil} buffer-local value of @code{buffer-offer-save} (@pxref{Killing Buffers}).  A user who says @samp{yes} to saving a non-file buffer is asked to specify the file name to use.  The @code{save-buffers-kill-emacs} function passes the value @code{t} for @var{pred}."
msgstr "オプション引数@var{pred}は、どのバッファーで確認を求めるか(または@var{save-silently-p}が非@code{nil}の場合は、どのバッファーで確認せずに保存するか)を制御する。これが@code{nil}の場合、それはファイルをvisitしているバッファーにたいしてのみ確認を求めることを意味する。@code{t}の場合、それは、@code{buffer-offer-save}のバッファーローカル値が@code{nil}であるような、非ファイルバッファー以外の特定のバッファーの保存も提案することを意味する(@ref{Killing Buffers}を参照)。ユーザーが、非ファイルバッファーの保存にたいして@samp{yes}と応えると、保存に使用するファイル名の指定を求める。@code{save-buffers-kill-emacs}関数は、@var{pred}にたいして値@code{t}を渡す。"

#. type: deffn
#: files.texi.orig:384
msgid "If @var{pred} is neither @code{t} nor @code{nil}, then it should be a function of no arguments.  It will be called in each buffer to decide whether to offer to save that buffer.  If it returns a non-@code{nil} value in a certain buffer, that means do offer to save that buffer."
msgstr "@var{pred}が@code{t}と@code{nil}のどちらでもない場合、それは引数なしの関数であること。その関数は、そのバッファーの保存するを提案するか否かを決定するために、バッファーごとに呼び出されるだろう。これが特定のバッファーで非@code{nil}値をリターンした場合は、バッファーの保存を提案することを意味する。"

#. type: deffn
#: files.texi.orig:386
#, no-wrap
msgid "Command write-file filename &optional confirm"
msgstr "Command write-file filename &optional confirm"

#. type: anchor{#1}
#: files.texi.orig:394
msgid "Definition of write-file"
msgstr "Definition of write-file"

#. type: deffn
#: files.texi.orig:394
msgid "This function writes the current buffer into file @var{filename}, makes the buffer visit that file, and marks it not modified.  Then it renames the buffer based on @var{filename}, appending a string like @samp{<2>} if necessary to make a unique buffer name.  It does most of this work by calling @code{set-visited-file-name} (@pxref{Buffer File Name}) and @code{save-buffer}."
msgstr "この関数は、カレントバッファーをファイル@var{filename}に書き込み、バッファーがそのファイルをvisitしていることにして、未変更とマークする。次に@var{filename}にもとづいてバッファー名をリネームする。バッファー名を一意にするため、必要なら@samp{<2>}のような文字列を付加する。処理のほとんどは、@code{set-visited-file-name}(@ref{Buffer File Name}を参照)、および@code{save-buffer}を呼び出すことにより行われる。"

#. type: deffn
#: files.texi.orig:398
msgid "If @var{confirm} is non-@code{nil}, that means to ask for confirmation before overwriting an existing file.  Interactively, confirmation is required, unless the user supplies a prefix argument."
msgstr "@var{confirm}が非@code{nil}の場合、それは既存のファイルを上書きする前に確認を求めることを意味する。ユーザーがプレフィックス引数を与えない場合、interactiveに確認が求められる。"

#. type: deffn
#: files.texi.orig:403
msgid "If @var{filename} is an existing directory, or a symbolic link to one, @code{write-file} uses the name of the visited file, in directory @var{filename}.  If the buffer is not visiting a file, it uses the buffer name instead."
msgstr "@var{filename}が既存のディレクトリーであったり、既存のディレクトリーへのシンボリックリンクの場合、@code{write-file}はディレクトリー@var{filename}内でvisitされているファイルの名前を使用する。そのバッファーがファイルをvisitしていない場合は、かわりにバッファーの名前を使用する。"

#. type: Plain text
#: files.texi.orig:407
msgid "Saving a buffer runs several hooks.  It also performs format conversion (@pxref{Format Conversion})."
msgstr "バッファーの保存により、複数のフックが実行される。これはフォーマット変換も処理する(@ref{Format Conversion}を参照)。"

#. type: defvar
#: files.texi.orig:408
#, no-wrap
msgid "write-file-functions"
msgstr "write-file-functions"

#. type: defvar
#: files.texi.orig:414
msgid "The value of this variable is a list of functions to be called before writing out a buffer to its visited file.  If one of them returns non-@code{nil}, the file is considered already written and the rest of the functions are not called, nor is the usual code for writing the file executed."
msgstr "この変数の値は、バッファーをvisitされているファイルに書き出す前に呼び出される、関数のリストである。それらのうちのいずれかが非@code{nil}をリターンした場合、そのファイルは書き込み済みだと判断され、残りの関数は呼び出されないし、ファイルを書き込むための通常のコードも実行されない。"

#. type: defvar
#: files.texi.orig:418
msgid "If a function in @code{write-file-functions} returns non-@code{nil}, it is responsible for making a backup file (if that is appropriate).  To do so, execute the following code:"
msgstr "@code{write-file-functions}内の関数が非@code{nil}をリターンした場合、(それが適切であれば)その関数はファイルをバックアップする責任を負う。これを行うには、以下のコードを実行する:"

#. type: example
#: files.texi.orig:421
#, no-wrap
msgid "(or buffer-backed-up (backup-buffer))\n"
msgstr "(or buffer-backed-up (backup-buffer))\n"

#. type: defvar
#: files.texi.orig:427
msgid "You might wish to save the file modes value returned by @code{backup-buffer} and use that (if non-@code{nil}) to set the mode bits of the file that you write.  This is what @code{save-buffer} normally does. @xref{Making Backups,, Making Backup Files}."
msgstr "@code{backup-buffer}によりリターンされるファイルモードの値を保存して、(もし非@code{nil}なら)書き込むファイルのモードビットをセットしたいと思うかもしれない。これは正に@code{save-buffer}が通常行うことである。@ref{Making Backups,, Making Backup Files}を参照のこと。"

#. type: defvar
#: files.texi.orig:434
msgid "The hook functions in @code{write-file-functions} are also responsible for encoding the data (if desired): they must choose a suitable coding system and end-of-line conversion (@pxref{Lisp and Coding Systems}), perform the encoding (@pxref{Explicit Encoding}), and set @code{last-coding-system-used} to the coding system that was used (@pxref{Encoding and I/O})."
msgstr "@code{write-file-functions}内のフック関数は、データのエンコード(が望ましければ)にも責任を負う。これらは適切なコーディングシステムと改行規則(@ref{Lisp and Coding Systems}を参照)を選択してエンコード(@ref{Explicit Encoding}を参照)を処理し、使用されていたコーディングシステム(@ref{Encoding and I/O}を参照)を@code{last-coding-system-used}にセットしなければならない。"

#. type: defvar
#: files.texi.orig:442
msgid "If you set this hook locally in a buffer, it is assumed to be associated with the file or the way the contents of the buffer were obtained.  Thus the variable is marked as a permanent local, so that changing the major mode does not alter a buffer-local value.  On the other hand, calling @code{set-visited-file-name} will reset it.  If this is not what you want, you might like to use @code{write-contents-functions} instead."
msgstr "バッファー内でこのフックをローカルにセットした場合、バッファーはそのファイル、またはバッファーのコンテンツを取得したファイルに類するものに関連付けられる。このようにして、変数は恒久的にローカルであるとマークされるので、メジャーモードの変更がバッファーローカルな値を変更することはない。その一方で、@code{set-visited-file-name}を呼び出すことにより、変数はリセットされるだろう。これを望まない場合は、かわりに@code{write-contents-functions}を使用したいと思うだろう。"

#. type: defvar
#: files.texi.orig:445
msgid "Even though this is not a normal hook, you can use @code{add-hook} and @code{remove-hook} to manipulate the list.  @xref{Hooks}."
msgstr "たとえこれがノーマルフックでないとしても、このリストを操作するために@code{add-hook}および@code{remove-hook}を使用することはできる。@ref{Hooks}を参照のこと。"

#. type: defvar
#: files.texi.orig:448
#, no-wrap
msgid "write-contents-functions"
msgstr "write-contents-functions"

#. type: defvar
#: files.texi.orig:456
msgid "This works just like @code{write-file-functions}, but it is intended for hooks that pertain to the buffer's contents, not to the particular visited file or its location.  Such hooks are usually set up by major modes, as buffer-local bindings for this variable.  This variable automatically becomes buffer-local whenever it is set; switching to a new major mode always resets this variable, but calling @code{set-visited-file-name} does not."
msgstr "これは正に@code{write-file-functions}と同様に機能するが、こちらはvisitしている特定のファイルやファイルの場所ではなく、バッファーのコンテンツに関連するフックを意図している。そのようなフックは、この変数にたいするバッファーローカルなバインディングとして、通常はメジャーモードにより作成される。この変数は、セットされた際は、常に自動的にバッファーローカルになる。新たなメジャーモードへの切り替えは、常にこの変数をリセットするが、@code{set-visited-file-name}の呼び出しではリセットされない。"

#. type: defvar
#: files.texi.orig:460
msgid "If any of the functions in this hook returns non-@code{nil}, the file is considered already written and the rest are not called and neither are the functions in @code{write-file-functions}."
msgstr "このフック内の関数のいずれかが非@code{nil}をリターンした場合、そのファイルはすでに書き込み済みとみなされ、残りの関数は呼び出されず、@code{write-file-functions}内の関数も呼び出されない。"

#. type: defopt
#: files.texi.orig:462
#, no-wrap
msgid "before-save-hook"
msgstr "before-save-hook"

#. type: defopt
#: files.texi.orig:468
msgid "This normal hook runs before a buffer is saved in its visited file, regardless of whether that is done normally or by one of the hooks described above.  For instance, the @file{copyright.el} program uses this hook to make sure the file you are saving has the current year in its copyright notice."
msgstr "このノーマルフックは、visitしているファイルにバッファーが保存される前に実行される。保存が通常の方法で行われるか、あるいは上述のフックのいずれかで行われたかは問題にしない。たとえば、@file{copyright.el}プログラムは、ファイルの保存において、それの著作権表示が今年であることを確認するために、このフックを使用する。"

#. type: defopt
#: files.texi.orig:471
#, no-wrap
msgid "after-save-hook"
msgstr "after-save-hook"

#. type: defopt
#: files.texi.orig:475
msgid "This normal hook runs after a buffer has been saved in its visited file.  One use of this hook is in Fast Lock mode; it uses this hook to save the highlighting information in a cache file."
msgstr "このノーマルフックは、visitしているファイルにバッファーを保存した後に実行される。このフックの使用例の1つは、Fast Lockモードにある。このモードは、キャッシュファイルにハイライト情報を保存するために、このフックを使用している。"

#. type: defopt
#: files.texi.orig:477
#, no-wrap
msgid "file-precious-flag"
msgstr "file-precious-flag"

#. type: defopt
#: files.texi.orig:484
msgid "If this variable is non-@code{nil}, then @code{save-buffer} protects against I/O errors while saving by writing the new file to a temporary name instead of the name it is supposed to have, and then renaming it to the intended name after it is clear there are no errors.  This procedure prevents problems such as a lack of disk space from resulting in an invalid file."
msgstr "この変数が非@code{nil}の場合、@code{save-buffer}は保存ファイルがもつ名前のかわりに、一時的な名前で新たなファイルに書き込み、エラーがないと明確になった後にファイルを意図する名前にリネームすることにより、保存中のI/Oエラーから防御する。この手順は、無効なファイルが原因となるディスク容量逼迫のような問題を防ぐ。"

#. type: defopt
#: files.texi.orig:488
msgid "As a side effect, backups are necessarily made by copying.  @xref{Rename or Copy}.  Yet, at the same time, saving a precious file always breaks all hard links between the file you save and other file names."
msgstr "副作用として、バックアップ作成にコピーが必要になる。@ref{Rename or Copy}を参照のこと。しかし同時に、この高価なファイル保存により、保存したファイルと他のファイル名との間のすべてのハードリンクは切断される。"

#. type: defopt
#: files.texi.orig:491
msgid "Some modes give this variable a non-@code{nil} buffer-local value in particular buffers."
msgstr "いくつかのモードは、特定のバッファーにおいて、この変数に非@code{nil}のバッファーローカル値を与える。"

#. type: defopt
#: files.texi.orig:493
#, no-wrap
msgid "require-final-newline"
msgstr "require-final-newline"

#. type: defopt
#: files.texi.orig:503
msgid "This variable determines whether files may be written out that do @emph{not} end with a newline.  If the value of the variable is @code{t}, then @code{save-buffer} silently adds a newline at the end of the buffer whenever it does not already end in one.  If the value is @code{visit}, Emacs adds a missing newline just after it visits the file.  If the value is @code{visit-save}, Emacs adds a missing newline both on visiting and on saving.  For any other non-@code{nil} value, @code{save-buffer} asks the user whether to add a newline each time the case arises."
msgstr "この変数は、ファイルが改行で@emph{終わらない}ように書き込まれるかどうかを決定する。変数の値が@code{t}の場合、@code{save-buffer}はバッファーの終端に改行がなければ暗黙理に改行を追加する。値が@code{visit}の場合、Emacsはファイルをvisitした直後に不足している改行を追加する。値が@code{visit-save}の場合、Emacsはvisitと保存の両方のタイミングで、不足している改行を追加する。その他の非@code{nil}値にたいしては、そのようなケースが生じるたびに、改行を追加するかどうか、@code{save-buffer}がユーザーに尋ねる。"

#. type: defopt
#: files.texi.orig:507
msgid "If the value of the variable is @code{nil}, then @code{save-buffer} doesn't add newlines at all.  @code{nil} is the default value, but a few major modes set it to @code{t} in particular buffers."
msgstr "変数の値が@code{nil}の場合、@code{save-buffer}は改行を追加しない。デフォルト値は@code{nil}だが、特定のバッファーでこれを@code{t}にセットするメジャーモードも少数存在する。"

#. type: Plain text
#: files.texi.orig:511
msgid "See also the function @code{set-visited-file-name} (@pxref{Buffer File Name})."
msgstr "@ref{Buffer File Name}の関数@code{set-visited-file-name}も参照されたい。"

#. type: cindex
#: files.texi.orig:514
#, no-wrap
msgid "reading from files"
msgstr "reading from files"

#. type: Plain text
#: files.texi.orig:519
msgid "To copy the contents of a file into a buffer, use the function @code{insert-file-contents}.  (Don't use the command @code{insert-file} in a Lisp program, as that sets the mark.)"
msgstr "ファイルのコンテンツをバッファーにコピーするためには、関数@code{insert-file-contents}を使用しします(マークをセットするので、Lispプログラム内でコマンド@code{insert-file}は使用してはならない)。"

#. type: defun
#: files.texi.orig:520
#, no-wrap
msgid "insert-file-contents filename &optional visit beg end replace"
msgstr "insert-file-contents filename &optional visit beg end replace"

#. type: defun
#: files.texi.orig:525
msgid "This function inserts the contents of file @var{filename} into the current buffer after point.  It returns a list of the absolute file name and the length of the data inserted.  An error is signaled if @var{filename} is not the name of a file that can be read."
msgstr "この関数は、ファイル@var{filename}のコンテンツを、カレントバッファーのポイントの後に挿入する。これは絶対ファイル名と、挿入だれたデータの長さからなるリストをリターンする。@var{filename}が読み取り可能なファイルの名前でない場合は、エラーがシグナルされる。"

#. type: defun
#: files.texi.orig:535
msgid "This function checks the file contents against the defined file formats, and converts the file contents if appropriate and also calls the functions in the list @code{after-insert-file-functions}.  @xref{Format Conversion}.  Normally, one of the functions in the @code{after-insert-file-functions} list determines the coding system (@pxref{Coding Systems}) used for decoding the file's contents, including end-of-line conversion.  However, if the file contains null bytes, it is by default visited without any code conversions.  @xref{Lisp and Coding Systems, inhibit-null-byte-detection}."
msgstr "この関数は、定義されたファイルフォーマットに照らしてファイルのコンテンツをチェックして、適切ならそのコンテンツの変換、およびリスト@code{after-insert-file-functions}内の関数の呼び出しも行う。@ref{Format Conversion}を参照のこと。通常は、リスト@code{after-insert-file-functions}内のいずれかの関数が、EOL変換を含むファイルコンテンツのデコードに使用される、コーディングシステム(@ref{Coding Systems}を参照)を判断する。しかし、ファイルにnullバイトが含まれる場合、デフォルトではコード変換なしでvisitされる。@ref{Lisp and Coding Systems, inhibit-null-byte-detection}を参照のこと。"

#. type: defun
#: files.texi.orig:541
msgid "If @var{visit} is non-@code{nil}, this function additionally marks the buffer as unmodified and sets up various fields in the buffer so that it is visiting the file @var{filename}: these include the buffer's visited file name and its last save file modtime.  This feature is used by @code{find-file-noselect} and you probably should not use it yourself."
msgstr "@var{visit}が非@code{nil}の場合、この関数は追加でそのバッファーを未変更とマークして、そのバッファーのさまざまなフィールドをセットアップして、バッファーがファイル@var{filename}をvisitしているようにする。これらのフィールドにはバッファーがvisitしたファイルの名前、最終保存したファイルのmodtimeが含まれる。これらの機能は@code{find-file-noselect}により使用され、恐らくあなた自身が使用するべきではない。"

#. type: defun
#: files.texi.orig:545
msgid "If @var{beg} and @var{end} are non-@code{nil}, they should be numbers that are byte offsets specifying the portion of the file to insert.  In this case, @var{visit} must be @code{nil}.  For example,"
msgstr "@var{beg}および@var{end}が非@code{nil}の場合、それらはファイル挿入範囲を指定する、バイトオフセット数値であること。この場合、@var{visit}は@code{nil}でなければならない。たとえば、"

#. type: example
#: files.texi.orig:548
#, no-wrap
msgid "(insert-file-contents filename nil 0 500)\n"
msgstr "(insert-file-contents filename nil 0 500)\n"

#. type: defun
#: files.texi.orig:552
msgid "inserts the first 500 characters of a file."
msgstr "これはファイルの先頭500文字(バイト)を挿入する。"

#. type: defun
#: files.texi.orig:558
msgid "If the argument @var{replace} is non-@code{nil}, it means to replace the contents of the buffer (actually, just the accessible portion) with the contents of the file.  This is better than simply deleting the buffer contents and inserting the whole file, because (1) it preserves some marker positions and (2) it puts less data in the undo list."
msgstr "引数@var{replace}が非@code{nil}の場合、それはバッファーのコンテンツ(実際にはアクセス可能な範囲)を、ファイルのコンテンツで置き換えることを意味する。これは単にバッファーのコンテンツを削除してファイル全体を挿入するより優る。なぜなら、(1)マーカー位置を維持し、(2)undoリストに配すデータも少ないからである。"

#. type: defun
#: files.texi.orig:562
msgid "It is possible to read a special file (such as a FIFO or an I/O device)  with @code{insert-file-contents}, as long as @var{replace} and @var{visit} are @code{nil}."
msgstr "@var{replace}と@var{visit}が@code{nil}であれば、@code{insert-file-contents}で(FIFOやI/Oデバイスのような)スペシャルファイルの読み取りが可能である。"

#. type: defun
#: files.texi.orig:564
#, no-wrap
msgid "insert-file-contents-literally filename &optional visit beg end replace"
msgstr "insert-file-contents-literally filename &optional visit beg end replace"

#. type: defun
#: files.texi.orig:568
msgid "This function works like @code{insert-file-contents} except that it does not run @code{find-file-hook}, and does not do format decoding, character code conversion, automatic uncompression, and so on."
msgstr "この関数は@code{insert-file-contents}のように機能するが、@code{find-file-hook}を実行せず、フォーマットのデコード、文字コード変換、自動解凍、...などを行わない点が異なる。"

#. type: Plain text
#: files.texi.orig:573
msgid "If you want to pass a file name to another process so that another program can read the file, use the function @code{file-local-copy}; see @ref{Magic File Names}."
msgstr "他のプログラムがファイルを読めるように、他のプロセスにファイル名を渡したい場合は、関数@code{file-local-copy}を使用します。@ref{Magic File Names}を参照してください。"

#. type: cindex
#: files.texi.orig:576
#, no-wrap
msgid "writing to files"
msgstr "writing to files"

#. type: Plain text
#: files.texi.orig:583
msgid "You can write the contents of a buffer, or part of a buffer, directly to a file on disk using the @code{append-to-file} and @code{write-region} functions.  Don't use these functions to write to files that are being visited; that could cause confusion in the mechanisms for visiting."
msgstr "関数@code{append-to-file}および@code{write-region}を使用することにより、ディスク上のファイルに直接、バッファーのコンテンツ、またはバッファーの一部を書き込むことができます。visitされているファイルに書き込むために、これらの関数を使用しないでください。これにより、visitにたいするメカニズムが混乱するかもしれません。"

#. type: deffn
#: files.texi.orig:584
#, no-wrap
msgid "Command append-to-file start end filename"
msgstr "Command append-to-file start end filename"

#. type: deffn
#: files.texi.orig:589
msgid "This function appends the contents of the region delimited by @var{start} and @var{end} in the current buffer to the end of file @var{filename}.  If that file does not exist, it is created.  This function returns @code{nil}."
msgstr "この関数は、カレントバッファー内で、@var{start}と@var{end}によるリージョンのコンテンツを、ファイル@var{filename}の終端に追加する。そのファイルが存在しない場合は作成する。この関数は@code{nil}をリターンする。"

#. type: deffn
#: files.texi.orig:592
msgid "An error is signaled if @var{filename} specifies a nonwritable file, or a nonexistent file in a directory where files cannot be created."
msgstr "@var{filename}に書込不可能なファイル、またはファイルを作成不可なディレクトリー内の存在しないファイルを指定した場合は、エラーがシグナルされる。"

#. type: deffn
#: files.texi.orig:594
msgid "When called from Lisp, this function is completely equivalent to:"
msgstr "Lispから呼び出した場合、この関数は以下と完全に等価である:"

#. type: example
#: files.texi.orig:597
#, no-wrap
msgid "(write-region start end filename t)\n"
msgstr "(write-region start end filename t)\n"

#. type: deffn
#: files.texi.orig:600
#, no-wrap
msgid "Command write-region start end filename &optional append visit lockname mustbenew"
msgstr "Command write-region start end filename &optional append visit lockname mustbenew"

#. type: deffn
#: files.texi.orig:603
msgid "This function writes the region delimited by @var{start} and @var{end} in the current buffer into the file specified by @var{filename}."
msgstr "この関数は、カレントバッファー内の@var{start}と@var{end}で区切られたリージョンを、@var{filename}で指定されたファイルに書き込む。"

#. type: deffn
#: files.texi.orig:607
msgid "If @var{start} is @code{nil}, then the command writes the entire buffer contents (@emph{not} just the accessible portion) to the file and ignores @var{end}."
msgstr "@var{start}が@code{nil}の場合、このコマンドはバッファーのコンテンツ全体(アクセス可能な範囲だけでは@emph{ない})をファイルに書き込み、@var{end}は無視する。"

#. type: deffn
#: files.texi.orig:612
msgid "If @var{start} is a string, then @code{write-region} writes or appends that string, rather than text from the buffer.  @var{end} is ignored in this case."
msgstr "@var{start}が文字列の場合、@code{write-region}はバッファーのテキストではなく、その文字列を追加する。その場合、@var{end}は無視される。"

#. type: deffn
#: files.texi.orig:617
msgid "If @var{append} is non-@code{nil}, then the specified text is appended to the existing file contents (if any).  If @var{append} is a number, @code{write-region} seeks to that byte offset from the start of the file and writes the data from there."
msgstr "@var{append}が非@code{nil}の場合は、指定されたテキストが(もしあれば)既存のファイルコンテンツに追加される。@var{append}が数字の場合、@code{write-region}はファイル開始位置からそのバイトオフセットをseekして、データをそこに書き込む。"

#. type: deffn
#: files.texi.orig:623
msgid "If @var{mustbenew} is non-@code{nil}, then @code{write-region} asks for confirmation if @var{filename} names an existing file.  If @var{mustbenew} is the symbol @code{excl}, then @code{write-region} does not ask for confirmation, but instead it signals an error @code{file-already-exists} if the file already exists."
msgstr "@var{mustbenew}が非@code{nil}の場合、@code{write-region}はもし@var{filename}が既存ファイルの名前なら確認を求める。@var{mustbenew}がシンボル@code{excl}なら、ファイルがすでに存在する場合は@code{write-region}は確認を求めるかわりに、エラー@code{file-already-exists}をシグナルする。"

#. type: deffn
#: files.texi.orig:628
msgid "The test for an existing file, when @var{mustbenew} is @code{excl}, uses a special system feature.  At least for files on a local disk, there is no chance that some other program could create a file of the same name before Emacs does, without Emacs's noticing."
msgstr "@var{mustbenew}が@code{excl}のときは、存在するファイルのテストに特別なシステム機能を使用する。少なくともローカルディスク上のファイルにたいしては、Emacsがファイルを作成する前に、Emacsに通知せずに他のプログラムが同じ名前のファイルを作成することはありえない。"

#. type: deffn
#: files.texi.orig:635
msgid "If @var{visit} is @code{t}, then Emacs establishes an association between the buffer and the file: the buffer is then visiting that file.  It also sets the last file modification time for the current buffer to @var{filename}'s modtime, and marks the buffer as not modified.  This feature is used by @code{save-buffer}, but you probably should not use it yourself."
msgstr "@var{visit}が@code{t}の場合、Emacsはバッファーとファイルの関連付けを設定し、そのバッファーがそのファイルをvictimする。また、カレントバッファーにたいする最終ファイル変更日時に@var{filename}をセットして、そのバッファーを未変更としてマークする。この機能は@code{save-buffer}により使用されるが、おそらくあなた自身が使用するべきではないだろう。"

#. type: deffn
#: files.texi.orig:644
msgid "If @var{visit} is a string, it specifies the file name to visit.  This way, you can write the data to one file (@var{filename}) while recording the buffer as visiting another file (@var{visit}).  The argument @var{visit} is used in the echo area message and also for file locking; @var{visit} is stored in @code{buffer-file-name}.  This feature is used to implement @code{file-precious-flag}; don't use it yourself unless you really know what you're doing."
msgstr "@var{visit}が文字列の場合、それはvisitするファイルの名前を指定する。この方法を使えば、そのバッファーが別のファイルをvisitしていると記録しつつ、１つのファイル(@var{filename})にデータを書き込むことができる。引数@var{visit}は、エコーエリアに使用される他に、ファイルのロックにも使用され、@var{visit}が@code{buffer-file-name}に格納される。この機能は、@code{file-precious-flag}の実装に使用される。自分が何をしているか本当にわかっているのでなければ、これを使用してはならない。"

#. type: deffn
#: files.texi.orig:648
msgid "The optional argument @var{lockname}, if non-@code{nil}, specifies the file name to use for purposes of locking and unlocking, overriding @var{filename} and @var{visit} for that purpose."
msgstr "オプション引数@var{lockname}が非@code{nil}の場合、それはロックとアンロックの目的に使用する、@var{filename}および@var{visit}をオーバーライドするファイル名を指定する。"

#. type: deffn
#: files.texi.orig:654
msgid "The function @code{write-region} converts the data which it writes to the appropriate file formats specified by @code{buffer-file-format} and also calls the functions in the list @code{write-region-annotate-functions}.  @xref{Format Conversion}."
msgstr "関数@code{write-region}は、書き込むデータを@code{buffer-file-format}により指定される、適切なファイルフォーマットに変換しするとともに、リスト@code{write-region-annotate-functions}内の関数の呼び出しも行う。@ref{Format Conversion}を参照のこと。"

#. type: deffn
#: files.texi.orig:660
msgid "Normally, @code{write-region} displays the message @samp{Wrote @var{filename}} in the echo area.  If @var{visit} is neither @code{t} nor @code{nil} nor a string, then this message is inhibited.  This feature is useful for programs that use files for internal purposes, files that the user does not need to know about."
msgstr "通常、@code{write-region}はエコーエリア内にメッセージ@samp{Wrote @var{filename}}を表示する。@var{visit}が@code{t}、@code{nil}、文字列のいずれでもない場合、このメッセージは抑制される。この機能は、内部的な目的のために、ユーザーが知る必要がないファイルを使用する場合に有用である。"

#. type: defmac
#: files.texi.orig:662
#, no-wrap
msgid "with-temp-file file body@dots{}"
msgstr "with-temp-file file body@dots{}"

#. type: anchor{#1}
#: files.texi.orig:670
msgid "Definition of with-temp-file"
msgstr "Definition of with-temp-file"

#. type: defmac
#: files.texi.orig:670
msgid "The @code{with-temp-file} macro evaluates the @var{body} forms with a temporary buffer as the current buffer; then, at the end, it writes the buffer contents into file @var{file}.  It kills the temporary buffer when finished, restoring the buffer that was current before the @code{with-temp-file} form.  Then it returns the value of the last form in @var{body}."
msgstr "@code{with-temp-file}マクロは、一時バッファー(temporary buffer)をカレントバッファーとして@var{body}フォームを評価して、最後にそのバッファーのコンテンツを@var{file}に書き込む。これは終了時に一時バッファーをkillして、@code{with-temp-file}フォームの前にカレントだったバッファーをリストアする。その後、@var{body}内の最後のフォームの値をリターンする。"

#. type: defmac
#: files.texi.orig:673
msgid "The current buffer is restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr "@code{throw}やエラーによる異常なexit(abnormal exit)でも、カレントバッファーはリストアされる(@ref{Nonlocal Exits}を参照)。"

#. type: defmac
#: files.texi.orig:676
msgid "See also @code{with-temp-buffer} in @ref{Definition of with-temp-buffer,, The Current Buffer}."
msgstr "@ref{Definition of with-temp-buffer,, The Current Buffer}の@code{with-temp-buffer}も参照のこと。"

#. type: cindex
#: files.texi.orig:680
#, no-wrap
msgid "file locks"
msgstr "file locks"

#. type: cindex
#: files.texi.orig:681
#, no-wrap
msgid "lock file"
msgstr "lock file"

#. type: Plain text
#: files.texi.orig:692
msgid "When two users edit the same file at the same time, they are likely to interfere with each other.  Emacs tries to prevent this situation from arising by recording a @dfn{file lock} when a file is being modified.  Emacs can then detect the first attempt to modify a buffer visiting a file that is locked by another Emacs job, and ask the user what to do.  The file lock is really a file, a symbolic link with a special name, stored in the same directory as the file you are editing.  (On file systems that do not support symbolic links, a regular file is used.)"
msgstr ""

#. type: Plain text
#: files.texi.orig:700
msgid "When you access files using NFS, there may be a small probability that you and another user will both lock the same file ``simultaneously''.  If this happens, it is possible for the two users to make changes simultaneously, but Emacs will still warn the user who saves second.  Also, the detection of modification of a buffer visiting a file changed on disk catches some cases of simultaneous editing; see @ref{Modification Time}."
msgstr ""

#. type: defun
#: files.texi.orig:701
#, no-wrap
msgid "file-locked-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:706
msgid "This function returns @code{nil} if the file @var{filename} is not locked.  It returns @code{t} if it is locked by this Emacs process, and it returns the name of the user who has locked it if it is locked by some other job."
msgstr ""

#. type: group
#: files.texi.orig:711
#, no-wrap
msgid ""
"(file-locked-p \"foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: files.texi.orig:715
#, no-wrap
msgid "lock-buffer &optional filename"
msgstr ""

#. type: defun
#: files.texi.orig:720
msgid "This function locks the file @var{filename}, if the current buffer is modified.  The argument @var{filename} defaults to the current buffer's visited file.  Nothing is done if the current buffer is not visiting a file, or is not modified, or if the system does not support locking."
msgstr ""

#. type: defun
#: files.texi.orig:722
#, no-wrap
msgid "unlock-buffer"
msgstr ""

#. type: defun
#: files.texi.orig:728
msgid "This function unlocks the file being visited in the current buffer, if the buffer is modified.  If the buffer is not modified, then the file should not be locked, so this function does nothing.  It also does nothing if the current buffer is not visiting a file, or if the system does not support locking."
msgstr ""

#. type: defopt
#: files.texi.orig:730
#, no-wrap
msgid "create-lockfiles"
msgstr ""

#. type: defopt
#: files.texi.orig:732
msgid "If this variable is @code{nil}, Emacs does not lock files."
msgstr ""

#. type: defun
#: files.texi.orig:734
#, no-wrap
msgid "ask-user-about-lock file other-user"
msgstr ""

#. type: defun
#: files.texi.orig:739
msgid "This function is called when the user tries to modify @var{file}, but it is locked by another user named @var{other-user}.  The default definition of this function asks the user to say what to do.  The value this function returns determines what Emacs does next:"
msgstr ""

#. type: itemize
#: files.texi.orig:744
msgid "A value of @code{t} says to grab the lock on the file.  Then this user may edit the file and @var{other-user} loses the lock."
msgstr ""

#. type: itemize
#: files.texi.orig:748
msgid "A value of @code{nil} says to ignore the lock and let this user edit the file anyway."
msgstr ""

#. type: kindex
#: files.texi.orig:750
#, no-wrap
msgid "file-locked"
msgstr ""

#. type: itemize
#: files.texi.orig:753
msgid "This function may instead signal a @code{file-locked} error, in which case the change that the user was about to make does not take place."
msgstr ""

#. type: itemize
#: files.texi.orig:755
msgid "The error message for this error looks like this:"
msgstr ""

#. type: example
#: files.texi.orig:758
#, no-wrap
msgid "@error{} File is locked: @var{file} @var{other-user}\n"
msgstr ""

#. type: itemize
#: files.texi.orig:763
msgid "where @code{file} is the name of the file and @var{other-user} is the name of the user who has locked the file."
msgstr ""

#. type: defun
#: files.texi.orig:767
msgid "If you wish, you can replace the @code{ask-user-about-lock} function with your own version that makes the decision in another way."
msgstr ""

#. type: cindex
#: files.texi.orig:771
#, no-wrap
msgid "file, information about"
msgstr ""

#. type: Plain text
#: files.texi.orig:778
msgid "This section describes the functions for retrieving various types of information about files (or directories or symbolic links), such as whether a file is readable or writable, and its size.  These functions all take arguments which are file names.  Except where noted, these arguments need to specify existing files, or an error is signaled."
msgstr ""

#. type: cindex
#: files.texi.orig:779
#, no-wrap
msgid "file names, trailing whitespace"
msgstr ""

#. type: cindex
#: files.texi.orig:780
#, no-wrap
msgid "trailing blanks in file names"
msgstr ""

#. type: Plain text
#: files.texi.orig:784
msgid "Be careful with file names that end in spaces.  On some filesystems (notably, MS-Windows), trailing whitespace characters in file names are silently and automatically ignored."
msgstr ""

#. type: subsection
#: files.texi.orig:792 files.texi.orig:794 files.texi.orig:795
#, no-wrap
msgid "Testing Accessibility"
msgstr ""

#. type: menuentry
#: files.texi.orig:792
msgid "Is a given file readable? Writable?"
msgstr ""

#. type: node
#: files.texi.orig:792 files.texi.orig:951
#, no-wrap
msgid "Kinds of Files"
msgstr ""

#. type: menuentry
#: files.texi.orig:792
msgid "Is it a directory? A symbolic link?"
msgstr ""

#. type: subsection
#: files.texi.orig:792 files.texi.orig:1066 files.texi.orig:1067
#, no-wrap
msgid "Truenames"
msgstr ""

#. type: menuentry
#: files.texi.orig:792
msgid "Eliminating symbolic links from a file name."
msgstr ""

#. type: subsection
#: files.texi.orig:792 files.texi.orig:1140 files.texi.orig:1141
#, no-wrap
msgid "File Attributes"
msgstr ""

#. type: menuentry
#: files.texi.orig:792
msgid "File sizes, modification times, etc."
msgstr ""

#. type: node
#: files.texi.orig:792 files.texi.orig:1351
#, no-wrap
msgid "Extended Attributes"
msgstr ""

#. type: menuentry
#: files.texi.orig:792
msgid "Extended file attributes for access control."
msgstr ""

#. type: node
#: files.texi.orig:792 files.texi.orig:1417
#, no-wrap
msgid "Locating Files"
msgstr ""

#. type: menuentry
#: files.texi.orig:792
msgid "How to find a file in standard places."
msgstr ""

#. type: cindex
#: files.texi.orig:796
#, no-wrap
msgid "accessibility of a file"
msgstr ""

#. type: cindex
#: files.texi.orig:797
#, no-wrap
msgid "file accessibility"
msgstr ""

#. type: Plain text
#: files.texi.orig:804
msgid "These functions test for permission to access a file for reading, writing, or execution.  Unless explicitly stated otherwise, they recursively follow symbolic links for their file name arguments, at all levels (at the level of the file itself and at all levels of parent directories)."
msgstr ""

#. type: Plain text
#: files.texi.orig:809
msgid "On some operating systems, more complex sets of access permissions can be specified, via mechanisms such as Access Control Lists (ACLs).  @xref{Extended Attributes}, for how to query and set those permissions."
msgstr ""

#. type: defun
#: files.texi.orig:810
#, no-wrap
msgid "file-exists-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:817
msgid "This function returns @code{t} if a file named @var{filename} appears to exist.  This does not mean you can necessarily read the file, only that you can find out its attributes.  (On Unix and GNU/Linux, this is true if the file exists and you have execute permission on the containing directories, regardless of the permissions of the file itself.)"
msgstr ""

#. type: defun
#: files.texi.orig:820
msgid "If the file does not exist, or if access control policies prevent you from finding its attributes, this function returns @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:825
msgid "Directories are files, so @code{file-exists-p} returns @code{t} when given a directory name.  However, symbolic links are treated specially; @code{file-exists-p} returns @code{t} for a symbolic link name only if the target file exists."
msgstr ""

#. type: defun
#: files.texi.orig:827
#, no-wrap
msgid "file-readable-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:830
msgid "This function returns @code{t} if a file named @var{filename} exists and you can read it.  It returns @code{nil} otherwise."
msgstr ""

#. type: defun
#: files.texi.orig:832
#, no-wrap
msgid "file-executable-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:838
msgid "This function returns @code{t} if a file named @var{filename} exists and you can execute it.  It returns @code{nil} otherwise.  On Unix and GNU/Linux, if the file is a directory, execute permission means you can check the existence and attributes of files inside the directory, and open those files if their modes permit."
msgstr ""

#. type: defun
#: files.texi.orig:840
#, no-wrap
msgid "file-writable-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:846
msgid "This function returns @code{t} if the file @var{filename} can be written or created by you, and @code{nil} otherwise.  A file is writable if the file exists and you can write it.  It is creatable if it does not exist, but the specified directory does exist and you can write in that directory."
msgstr ""

#. type: defun
#: files.texi.orig:850
msgid "In the example below, @file{foo} is not writable because the parent directory does not exist, even though the user could create such a directory."
msgstr ""

#. type: group
#: files.texi.orig:855
#, no-wrap
msgid ""
"(file-writable-p \"~/no-such-dir/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: files.texi.orig:859
#, no-wrap
msgid "file-accessible-directory-p dirname"
msgstr ""

#. type: defun
#: files.texi.orig:866
msgid "This function returns @code{t} if you have permission to open existing files in the directory whose name as a file is @var{dirname}; otherwise (or if there is no such directory), it returns @code{nil}.  The value of @var{dirname} may be either a directory name (such as @file{/foo/}) or the file name of a file which is a directory (such as @file{/foo}, without the final slash)."
msgstr ""

#. type: defun
#: files.texi.orig:869
msgid "For example, from the following we deduce that any attempt to read a file in @file{/foo/} will give an error:"
msgstr ""

#. type: example
#: files.texi.orig:873
#, no-wrap
msgid ""
"(file-accessible-directory-p \"/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: files.texi.orig:876
#, no-wrap
msgid "access-file filename string"
msgstr ""

#. type: defun
#: files.texi.orig:880
msgid "This function opens file @var{filename} for reading, then closes it and returns @code{nil}.  However, if the open fails, it signals an error using @var{string} as the error message text."
msgstr ""

#. type: defun
#: files.texi.orig:882
#, no-wrap
msgid "file-ownership-preserved-p filename &optional group"
msgstr ""

#. type: defun
#: files.texi.orig:886
msgid "This function returns @code{t} if deleting the file @var{filename} and then creating it anew would keep the file's owner unchanged.  It also returns @code{t} for nonexistent files."
msgstr ""

#. type: defun
#: files.texi.orig:889
msgid "If the optional argument @var{group} is non-@code{nil}, this function also checks that the file's group would be unchanged."
msgstr ""

#. type: defun
#: files.texi.orig:894
msgid "If @var{filename} is a symbolic link, then, unlike the other functions discussed here, @code{file-ownership-preserved-p} does @emph{not} replace @var{filename} with its target.  However, it does recursively follow symbolic links at all levels of parent directories."
msgstr ""

#. type: defun
#: files.texi.orig:896
#, no-wrap
msgid "file-modes filename"
msgstr ""

#. type: cindex
#: files.texi.orig:897
#, no-wrap
msgid "mode bits"
msgstr ""

#. type: cindex
#: files.texi.orig:898
#, no-wrap
msgid "file permissions"
msgstr ""

#. type: cindex
#: files.texi.orig:899 files.texi.orig:1652
#, no-wrap
msgid "permissions, file"
msgstr ""

#. type: cindex
#: files.texi.orig:900
#, no-wrap
msgid "file modes"
msgstr ""

#. type: defun
#: files.texi.orig:905
msgid "This function returns the @dfn{mode bits} of @var{filename}---an integer summarizing its read, write, and execution permissions.  Symbolic links in @var{filename} are recursively followed at all levels.  If the file does not exist, the return value is @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:913
msgid "@xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a description of mode bits.  For example, if the low-order bit is 1, the file is executable by all users; if the second-lowest-order bit is 1, the file is writable by all users; etc.  The highest possible value is 4095 (7777 octal), meaning that everyone has read, write, and execute permission, the @acronym{SUID} bit is set for both others and group, and the sticky bit is set."
msgstr ""

#. type: defun
#: files.texi.orig:916
msgid "@xref{Changing Files}, for the @code{set-file-modes} function, which can be used to set these permissions."
msgstr ""

#. type: group
#: files.texi.orig:921
#, no-wrap
msgid ""
"(file-modes \"~/junk/diffs\")\n"
"     @result{} 492               ; @r{Decimal integer.}\n"
msgstr ""

#. type: group
#: files.texi.orig:925
#, no-wrap
msgid ""
"(format \"%o\" 492)\n"
"     @result{} \"754\"             ; @r{Convert to octal.}\n"
msgstr ""

#. type: group
#: files.texi.orig:930
#, no-wrap
msgid ""
"(set-file-modes \"~/junk/diffs\" #o666)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:935
#, no-wrap
msgid ""
"$ ls -l diffs\n"
"-rw-rw-rw- 1 lewis lewis 3063 Oct 30 16:00 diffs\n"
msgstr ""

#. type: cindex
#: files.texi.orig:938
#, no-wrap
msgid "MS-DOS and file modes"
msgstr ""

#. type: cindex
#: files.texi.orig:939
#, no-wrap
msgid "file modes and MS-DOS"
msgstr ""

#. type: defun
#: files.texi.orig:949
msgid "@strong{MS-DOS note:} On MS-DOS, there is no such thing as an ``executable'' file mode bit.  So @code{file-modes} considers a file executable if its name ends in one of the standard executable extensions, such as @file{.com}, @file{.bat}, @file{.exe}, and some others.  Files that begin with the Unix-standard @samp{#!} signature, such as shell and Perl scripts, are also considered executable.  Directories are also reported as executable, for compatibility with Unix.  These conventions are also followed by @code{file-attributes} (@pxref{File Attributes})."
msgstr ""

#. type: subsection
#: files.texi.orig:952
#, no-wrap
msgid "Distinguishing Kinds of Files"
msgstr ""

#. type: cindex
#: files.texi.orig:953
#, no-wrap
msgid "file classification"
msgstr ""

#. type: cindex
#: files.texi.orig:954
#, no-wrap
msgid "classification of file types"
msgstr ""

#. type: Plain text
#: files.texi.orig:958
msgid "This section describes how to distinguish various kinds of files, such as directories, symbolic links, and ordinary files."
msgstr ""

#. type: defun
#: files.texi.orig:959
#, no-wrap
msgid "file-symlink-p filename"
msgstr ""

#. type: cindex
#: files.texi.orig:960
#, no-wrap
msgid "file symbolic links"
msgstr ""

#. type: defun
#: files.texi.orig:968
msgid "If the file @var{filename} is a symbolic link, the @code{file-symlink-p} function returns its (non-recursive) link target as a string.  (The link target string is not necessarily the full absolute file name of the target; determining the full file name that the link points to is nontrivial, see below.)  If the leading directories of @var{filename} include symbolic links, this function recursively follows them."
msgstr ""

#. type: defun
#: files.texi.orig:971
msgid "If the file @var{filename} is not a symbolic link, or does not exist, @code{file-symlink-p} returns @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:973
msgid "Here are a few examples of using this function:"
msgstr ""

#. type: group
#: files.texi.orig:978
#, no-wrap
msgid ""
"(file-symlink-p \"not-a-symlink\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:982
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link\")\n"
"     @result{} \"not-a-symlink\"\n"
msgstr ""

#. type: group
#: files.texi.orig:986
#, no-wrap
msgid ""
"(file-symlink-p \"sym-link2\")\n"
"     @result{} \"sym-link\"\n"
msgstr ""

#. type: group
#: files.texi.orig:990
#, no-wrap
msgid ""
"(file-symlink-p \"/bin\")\n"
"     @result{} \"/pub/bin\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:998
msgid "Note that in the third example, the function returned @file{sym-link}, but did not proceed to resolve it, although that file is itself a symbolic link.  This is what we meant by ``non-recursive'' above---the process of following the symbolic links does not recurse if the link target is itself a link."
msgstr ""

#. type: defun
#: files.texi.orig:1005
msgid "The string that this function returns is what is recorded in the symbolic link; it may or may not include any leading directories.  This function does @emph{not} expand the link target to produce a fully-qualified file name, and in particular does not use the leading directories, if any, of the @var{filename} argument if the link target is not an absolute file name.  Here's an example:"
msgstr ""

#. type: group
#: files.texi.orig:1010
#, no-wrap
msgid ""
"(file-symlink-p \"/foo/bar/baz\")\n"
"     @result{} \"some-file\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:1020
msgid "Here, although @file{/foo/bar/baz} was given as a fully-qualified file name, the result is not, and in fact does not have any leading directories at all.  And since @file{some-file} might itself be a symbolic link, you cannot simply prepend leading directories to it, nor even naively use @code{expand-file-name} (@pxref{File Name Expansion}) to produce its absolute file name."
msgstr ""

#. type: defun
#: files.texi.orig:1026
msgid "For this reason, this function is seldom useful if you need to determine more than just the fact that a file is or isn't a symbolic link.  If you actually need the file name of the link target, use @code{file-chase-links} or @code{file-truename}, described in @ref{Truenames}."
msgstr ""

#. type: Plain text
#: files.texi.orig:1030
msgid "The next two functions recursively follow symbolic links at all levels for @var{filename}."
msgstr ""

#. type: defun
#: files.texi.orig:1031
#, no-wrap
msgid "file-directory-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:1034
msgid "This function returns @code{t} if @var{filename} is the name of an existing directory, @code{nil} otherwise."
msgstr ""

#. type: group
#: files.texi.orig:1039
#, no-wrap
msgid ""
"(file-directory-p \"~rms\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: files.texi.orig:1043
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/files.texi\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1047
#, no-wrap
msgid ""
"(file-directory-p \"~rms/lewis/no-such-file\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1051
#, no-wrap
msgid ""
"(file-directory-p \"$HOME\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1056
#, no-wrap
msgid ""
"(file-directory-p\n"
" (substitute-in-file-name \"$HOME\"))\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: files.texi.orig:1060
#, no-wrap
msgid "file-regular-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:1064
msgid "This function returns @code{t} if the file @var{filename} exists and is a regular file (not a directory, named pipe, terminal, or other I/O device)."
msgstr ""

#. type: cindex
#: files.texi.orig:1068
#, no-wrap
msgid "truename (of file)"
msgstr ""

#. type: Plain text
#: files.texi.orig:1077
msgid "The @dfn{truename} of a file is the name that you get by following symbolic links at all levels until none remain, then simplifying away @samp{.}@: and @samp{..}@: appearing as name components.  This results in a sort of canonical name for the file.  A file does not always have a unique truename; the number of distinct truenames a file has is equal to the number of hard links to the file.  However, truenames are useful because they eliminate symbolic links as a cause of name variation."
msgstr ""

#. type: defun
#: files.texi.orig:1078
#, no-wrap
msgid "file-truename filename"
msgstr ""

#. type: defun
#: files.texi.orig:1082
msgid "This function returns the truename of the file @var{filename}.  If the argument is not an absolute file name, this function first expands it against @code{default-directory}."
msgstr ""

#. type: defun
#: files.texi.orig:1086
msgid "This function does not expand environment variables.  Only @code{substitute-in-file-name} does that.  @xref{Definition of substitute-in-file-name}."
msgstr ""

#. type: defun
#: files.texi.orig:1096
msgid "If you may need to follow symbolic links preceding @samp{..}@: appearing as a name component, call @code{file-truename} without prior direct or indirect calls to @code{expand-file-name}.  Otherwise, the file name component immediately preceding @samp{..} will be ``simplified away'' before @code{file-truename} is called.  To eliminate the need for a call to @code{expand-file-name}, @code{file-truename} handles @samp{~} in the same way that @code{expand-file-name} does.  @xref{File Name Expansion,, Functions that Expand Filenames}."
msgstr ""

#. type: defun
#: files.texi.orig:1098
#, no-wrap
msgid "file-chase-links filename &optional limit"
msgstr ""

#. type: defun
#: files.texi.orig:1103
msgid "This function follows symbolic links, starting with @var{filename}, until it finds a file name which is not the name of a symbolic link.  Then it returns that file name.  This function does @emph{not} follow symbolic links at the level of parent directories."
msgstr ""

#. type: defun
#: files.texi.orig:1107
msgid "If you specify a number for @var{limit}, then after chasing through that many links, the function just returns what it has even if that is still a symbolic link."
msgstr ""

#. type: Plain text
#: files.texi.orig:1114
msgid "To illustrate the difference between @code{file-chase-links} and @code{file-truename}, suppose that @file{/usr/foo} is a symbolic link to the directory @file{/home/foo}, and @file{/home/foo/hello} is an ordinary file (or at least, not a symbolic link) or nonexistent.  Then we would have:"
msgstr ""

#. type: example
#: files.texi.orig:1122
#, no-wrap
msgid ""
"(file-chase-links \"/usr/foo/hello\")\n"
"     ;; @r{This does not follow the links in the parent directories.}\n"
"     @result{} \"/usr/foo/hello\"\n"
"(file-truename \"/usr/foo/hello\")\n"
"     ;; @r{Assuming that @file{/home} is not a symbolic link.}\n"
"     @result{} \"/home/foo/hello\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:1124
#, no-wrap
msgid "file-equal-p file1 file2"
msgstr ""

#. type: defun
#: files.texi.orig:1130
msgid "This function returns @code{t} if the files @var{file1} and @var{file2} name the same file.  This is similar to comparing their truenames, except that remote file names are also handled in an appropriate manner.  If @var{file1} or @var{file2} does not exist, the return value is unspecified."
msgstr ""

#. type: defun
#: files.texi.orig:1132
#, no-wrap
msgid "file-in-directory-p file dir"
msgstr ""

#. type: defun
#: files.texi.orig:1138
msgid "This function returns @code{t} if @var{file} is a file in directory @var{dir}, or in a subdirectory of @var{dir}.  It also returns @code{t} if @var{file} and @var{dir} are the same directory.  It compares the truenames of the two directories.  If @var{dir} does not name an existing directory, the return value is @code{nil}."
msgstr ""

#. type: cindex
#: files.texi.orig:1142
#, no-wrap
msgid "file attributes"
msgstr ""

#. type: Plain text
#: files.texi.orig:1148
msgid "This section describes the functions for getting detailed information about a file, including the owner and group numbers, the number of names, the inode number, the size, and the times of access and modification."
msgstr ""

#. type: defun
#: files.texi.orig:1149
#, no-wrap
msgid "file-newer-than-file-p filename1 filename2"
msgstr ""

#. type: cindex
#: files.texi.orig:1150
#, no-wrap
msgid "file age"
msgstr ""

#. type: cindex
#: files.texi.orig:1151
#, no-wrap
msgid "file modification time"
msgstr ""

#. type: defun
#: files.texi.orig:1156
msgid "This function returns @code{t} if the file @var{filename1} is newer than file @var{filename2}.  If @var{filename1} does not exist, it returns @code{nil}.  If @var{filename1} does exist, but @var{filename2} does not, it returns @code{t}."
msgstr ""

#. type: defun
#: files.texi.orig:1160
msgid "In the following example, assume that the file @file{aug-19} was written on the 19th, @file{aug-20} was written on the 20th, and the file @file{no-file} doesn't exist at all."
msgstr ""

#. type: group
#: files.texi.orig:1165
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"aug-20\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1169
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-20\" \"aug-19\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: files.texi.orig:1173
#, no-wrap
msgid ""
"(file-newer-than-file-p \"aug-19\" \"no-file\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: files.texi.orig:1177
#, no-wrap
msgid ""
"(file-newer-than-file-p \"no-file\" \"aug-19\")\n"
"     @result{} nil\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:1185
msgid "If the @var{filename} argument to the next two functions is a symbolic link, then these function do @emph{not} replace it with its target.  However, they both recursively follow symbolic links at all levels of parent directories."
msgstr ""

#. type: defun
#: files.texi.orig:1186
#, no-wrap
msgid "file-attributes filename &optional id-format"
msgstr ""

#. type: anchor{#1}
#: files.texi.orig:1196
msgid "Definition of file-attributes"
msgstr ""

#. type: defun
#: files.texi.orig:1196
msgid "This function returns a list of attributes of file @var{filename}.  If the specified file cannot be opened, it returns @code{nil}.  The optional parameter @var{id-format} specifies the preferred format of attributes @acronym{UID} and @acronym{GID} (see below)---the valid values are @code{'string} and @code{'integer}.  The latter is the default, but we plan to change that, so you should specify a non-@code{nil} value for @var{id-format} if you use the returned @acronym{UID} or @acronym{GID}."
msgstr ""

#. type: defun
#: files.texi.orig:1198
msgid "The elements of the list, in order, are:"
msgstr ""

#. type: enumerate
#: files.texi.orig:1203
msgid "@code{t} for a directory, a string for a symbolic link (the name linked to), or @code{nil} for a text file."
msgstr ""

#. type: enumerate
#: files.texi.orig:1209
msgid "The number of names the file has.  Alternate names, also known as hard links, can be created by using the @code{add-name-to-file} function (@pxref{Changing Files})."
msgstr ""

#. type: enumerate
#: files.texi.orig:1213
msgid "The file's @acronym{UID}, normally as a string.  However, if it does not correspond to a named user, the value is a number."
msgstr ""

#. type: enumerate
#: files.texi.orig:1216
msgid "The file's @acronym{GID}, likewise."
msgstr ""

#. type: enumerate
#: files.texi.orig:1223
msgid "The time of last access, as a list of four integers @code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}.  (This is similar to the value of @code{current-time}; see @ref{Time of Day}.)  Note that on some FAT-based filesystems, only the date of last access is recorded, so this time will always hold the midnight of the day of last access."
msgstr ""

#. type: cindex
#: files.texi.orig:1224
#, no-wrap
msgid "modification time of file"
msgstr ""

#. type: enumerate
#: files.texi.orig:1228
msgid "The time of last modification as a list of four integers (as above).  This is the last time when the file's contents were modified."
msgstr ""

#. type: enumerate
#: files.texi.orig:1234
msgid "The time of last status change as a list of four integers (as above).  This is the time of the last change to the file's access mode bits, its owner and group, and other information recorded in the filesystem for the file, beyond the file's contents."
msgstr ""

#. type: enumerate
#: files.texi.orig:1238
msgid "The size of the file in bytes.  This is floating point if the size is too large to fit in a Lisp integer."
msgstr ""

#. type: enumerate
#: files.texi.orig:1242
msgid "The file's modes, as a string of ten letters or dashes, as in @samp{ls -l}."
msgstr ""

#. type: enumerate
#: files.texi.orig:1245
msgid "An unspecified value, present for backward compatibility."
msgstr ""

#. type: enumerate
#: files.texi.orig:1256
msgid "The file's inode number.  If possible, this is an integer.  If the inode number is too large to be represented as an integer in Emacs Lisp but dividing it by @math{2^{16}} yields a representable integer, then the value has the form @code{(@var{high} . @var{low})}, where @var{low} holds the low 16 bits.  If the inode number is too wide for even that, the value is of the form @code{(@var{high} @var{middle} . @var{low})}, where @code{high} holds the high bits, @var{middle} the middle 24 bits, and @var{low} the low 16 bits."
msgstr ""

#. type: enumerate
#: files.texi.orig:1264
msgid "The filesystem number of the device that the file is on.  Depending on the magnitude of the value, this can be either an integer or a cons cell, in the same manner as the inode number.  This element and the file's inode number together give enough information to distinguish any two files on the system---no two files can have the same values for both of these numbers."
msgstr ""

#. type: defun
#: files.texi.orig:1267
msgid "For example, here are the file attributes for @file{files.texi}:"
msgstr ""

#. type: group
#: files.texi.orig:1278
#, no-wrap
msgid ""
"(file-attributes \"files.texi\" 'string)\n"
"     @result{}  (nil 1 \"lh\" \"users\"\n"
"          (20614 64019 50040 152000)\n"
"          (20000 23 0 0)\n"
"          (20614 64555 902289 872000)\n"
"          122295 \"-rw-rw-rw-\"\n"
"          t (5888 2 . 43978)\n"
"          (15479 . 46724))\n"
msgstr ""

#. type: defun
#: files.texi.orig:1283
msgid "and here is how the result is interpreted:"
msgstr ""

#. type: item
#: files.texi.orig:1285
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: files.texi.orig:1287
msgid "is neither a directory nor a symbolic link."
msgstr ""

#. type: item
#: files.texi.orig:1288
#, no-wrap
msgid "1"
msgstr ""

#. type: table
#: files.texi.orig:1291
msgid "has only one name (the name @file{files.texi} in the current default directory)."
msgstr ""

#. type: item
#: files.texi.orig:1292
#, no-wrap
msgid "\"lh\""
msgstr ""

#. type: table
#: files.texi.orig:1294
msgid "is owned by the user with name \"lh\"."
msgstr ""

#. type: item
#: files.texi.orig:1295
#, no-wrap
msgid "\"users\""
msgstr ""

#. type: table
#: files.texi.orig:1297
msgid "is in the group with name \"users\"."
msgstr ""

#. type: item
#: files.texi.orig:1298
#, no-wrap
msgid "(20614 64019 50040 152000)"
msgstr ""

#. type: table
#: files.texi.orig:1300
msgid "was last accessed on October 23, 2012, at 20:12:03.050040152 UTC."
msgstr ""

#. type: item
#: files.texi.orig:1301
#, no-wrap
msgid "(20000 23 0 0)"
msgstr ""

#. type: table
#: files.texi.orig:1303
msgid "was last modified on July 15, 2001, at 08:53:43 UTC."
msgstr ""

#. type: item
#: files.texi.orig:1304
#, no-wrap
msgid "(20614 64555 902289 872000)"
msgstr ""

#. type: table
#: files.texi.orig:1306
msgid "last had its status changed on October 23, 2012, at 20:20:59.902289872 UTC."
msgstr ""

#. type: item
#: files.texi.orig:1307
#, no-wrap
msgid "122295"
msgstr ""

#. type: table
#: files.texi.orig:1311
msgid "is 122295 bytes long.  (It may not contain 122295 characters, though, if some of the bytes belong to multibyte sequences, and also if the end-of-line format is CR-LF.)"
msgstr ""

#. type: item
#: files.texi.orig:1312
#, no-wrap
msgid "\"-rw-rw-rw-\""
msgstr ""

#. type: table
#: files.texi.orig:1314
msgid "has a mode of read and write access for the owner, group, and world."
msgstr ""

#. type: item
#: files.texi.orig:1315
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: files.texi.orig:1317
msgid "is merely a placeholder; it carries no information."
msgstr ""

#. type: item
#: files.texi.orig:1318
#, no-wrap
msgid "(5888 2 . 43978)"
msgstr ""

#. type: table
#: files.texi.orig:1320
msgid "has an inode number of 6473924464520138."
msgstr ""

#. type: item
#: files.texi.orig:1321
#, no-wrap
msgid "(15479 . 46724)"
msgstr ""

#. type: table
#: files.texi.orig:1323
msgid "is on the file-system device whose number is 1014478468."
msgstr ""

#. type: defun
#: files.texi.orig:1326
#, no-wrap
msgid "file-nlinks filename"
msgstr ""

#. type: defun
#: files.texi.orig:1332
msgid "This function returns the number of names (i.e., hard links) that file @var{filename} has.  If the file does not exist, this function returns @code{nil}.  Note that symbolic links have no effect on this function, because they are not considered to be names of the files they link to."
msgstr ""

#. type: group
#: files.texi.orig:1338
#, no-wrap
msgid ""
"$ ls -l foo*\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo\n"
"-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo1\n"
msgstr ""

#. type: group
#: files.texi.orig:1343
#, no-wrap
msgid ""
"(file-nlinks \"foo\")\n"
"     @result{} 2\n"
msgstr ""

#. type: group
#: files.texi.orig:1347
#, no-wrap
msgid ""
"(file-nlinks \"doesnt-exist\")\n"
"     @result{} nil\n"
msgstr ""

#. type: subsection
#: files.texi.orig:1352
#, no-wrap
msgid "Extended File Attributes"
msgstr ""

#. type: cindex
#: files.texi.orig:1353
#, no-wrap
msgid "extended file attributes"
msgstr ""

#. type: Plain text
#: files.texi.orig:1362
msgid "On some operating systems, each file can be associated with arbitrary @dfn{extended file attributes}.  At present, Emacs supports querying and setting two specific sets of extended file attributes: Access Control Lists (ACLs) and SELinux contexts.  These extended file attributes are used, on some systems, to impose more sophisticated file access controls than the basic ``Unix-style'' permissions discussed in the previous sections."
msgstr ""

#. type: cindex
#: files.texi.orig:1363
#, no-wrap
msgid "access control list"
msgstr ""

#. type: cindex
#: files.texi.orig:1364
#, no-wrap
msgid "ACL entries"
msgstr ""

#. type: cindex
#: files.texi.orig:1365
#, no-wrap
msgid "SELinux context"
msgstr ""

#. type: Plain text
#: files.texi.orig:1371
msgid "A detailed explanation of ACLs and SELinux is beyond the scope of this manual.  For our purposes, each file can be associated with an @dfn{ACL}, which specifies its properties under an ACL-based file control system, and/or an @dfn{SELinux context}, which specifies its properties under the SELinux system."
msgstr ""

#. type: defun
#: files.texi.orig:1372
#, no-wrap
msgid "file-acl filename"
msgstr ""

#. type: defun
#: files.texi.orig:1377
msgid "This function returns the ACL for the file @var{filename}.  The exact Lisp representation of the ACL is unspecified (and may change in future Emacs versions), but it is the same as what @code{set-file-acl} takes for its @var{acl} argument (@pxref{Changing Files})."
msgstr ""

#. type: defun
#: files.texi.orig:1381
msgid "The underlying ACL implementation is platform-specific; on GNU/Linux and BSD, Emacs uses the POSIX ACL interface, while on MS-Windows Emacs emulates the POSIX ACL interface with native file security APIs."
msgstr ""

#. type: defun
#: files.texi.orig:1385
msgid "If Emacs was not compiled with ACL support, or the file does not exist or is inaccessible, or Emacs was unable to determine the ACL entries for any other reason, then the return value is @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:1387
#, no-wrap
msgid "file-selinux-context filename"
msgstr ""

#. type: defun
#: files.texi.orig:1395
msgid "This function returns the SELinux context of the file @var{filename}, as a list of the form @code{(@var{user} @var{role} @var{type} @var{range})}.  The list elements are the context's user, role, type, and range respectively, as Lisp strings; see the SELinux documentation for details about what these actually mean.  The return value has the same form as what @code{set-file-selinux-context} takes for its @var{context} argument (@pxref{Changing Files})."
msgstr ""

#. type: defun
#: files.texi.orig:1399
msgid "If Emacs was not compiled with SELinux support, or the file does not exist or is inaccessible, or if the system does not support SELinux, then the return value is @code{(nil nil nil nil)}."
msgstr ""

#. type: defun
#: files.texi.orig:1401
#, no-wrap
msgid "file-extended-attributes filename"
msgstr ""

#. type: defun
#: files.texi.orig:1408
msgid "This function returns an alist of the Emacs-recognized extended attributes of file @var{filename}.  Currently, it serves as a convenient way to retrieve both the ACL and SELinux context; you can then call the function @code{set-file-extended-attributes}, with the returned alist as its second argument, to apply the same file access attributes to another file (@pxref{Changing Files})."
msgstr ""

#. type: defun
#: files.texi.orig:1411
msgid "One of the elements is @code{(acl . @var{acl})}, where @var{acl} has the same form returned by @code{file-acl}."
msgstr ""

#. type: defun
#: files.texi.orig:1415
msgid "Another element is @code{(selinux-context . @var{context})}, where @var{context} is the SELinux context, in the same form returned by @code{file-selinux-context}."
msgstr ""

#. type: subsection
#: files.texi.orig:1418
#, no-wrap
msgid "Locating Files in Standard Places"
msgstr ""

#. type: cindex
#: files.texi.orig:1419
#, no-wrap
msgid "locate file in path"
msgstr ""

#. type: cindex
#: files.texi.orig:1420
#, no-wrap
msgid "find file in path"
msgstr ""

#. type: Plain text
#: files.texi.orig:1425
msgid "This section explains how to search for a file in a list of directories (a @dfn{path}), or for an executable file in the standard list of executable file directories."
msgstr ""

#. type: Plain text
#: files.texi.orig:1428
msgid "To search for a user-specific configuration file, @xref{Standard File Names}, for the @code{locate-user-emacs-file} function."
msgstr ""

#. type: defun
#: files.texi.orig:1429
#, no-wrap
msgid "locate-file filename path &optional suffixes predicate"
msgstr ""

#. type: defun
#: files.texi.orig:1435
msgid "This function searches for a file whose name is @var{filename} in a list of directories given by @var{path}, trying the suffixes in @var{suffixes}.  If it finds such a file, it returns the file's absolute file name (@pxref{Relative File Names}); otherwise it returns @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:1445
msgid "The optional argument @var{suffixes} gives the list of file-name suffixes to append to @var{filename} when searching.  @code{locate-file} tries each possible directory with each of these suffixes.  If @var{suffixes} is @code{nil}, or @code{(\"\")}, then there are no suffixes, and @var{filename} is used only as-is.  Typical values of @var{suffixes} are @code{exec-suffixes} (@pxref{Subprocess Creation}), @code{load-suffixes}, @code{load-file-rep-suffixes} and the return value of the function @code{get-load-suffixes} (@pxref{Load Suffixes})."
msgstr ""

#. type: defun
#: files.texi.orig:1451
msgid "Typical values for @var{path} are @code{exec-path} (@pxref{Subprocess Creation}) when looking for executable programs, or @code{load-path} (@pxref{Library Search}) when looking for Lisp files.  If @var{filename} is absolute, @var{path} has no effect, but the suffixes in @var{suffixes} are still tried."
msgstr ""

#. type: defun
#: files.texi.orig:1459
msgid "The optional argument @var{predicate}, if non-@code{nil}, specifies a predicate function for testing whether a candidate file is suitable.  The predicate is passed the candidate file name as its single argument.  If @var{predicate} is @code{nil} or omitted, @code{locate-file} uses @code{file-readable-p} as the predicate.  @xref{Kinds of Files}, for other useful predicates, e.g., @code{file-executable-p} and @code{file-directory-p}."
msgstr ""

#. type: defun
#: files.texi.orig:1463
msgid "For compatibility, @var{predicate} can also be one of the symbols @code{executable}, @code{readable}, @code{writable}, @code{exists}, or a list of one or more of these symbols."
msgstr ""

#. type: defun
#: files.texi.orig:1465
#, no-wrap
msgid "executable-find program"
msgstr ""

#. type: defun
#: files.texi.orig:1472
msgid "This function searches for the executable file of the named @var{program} and returns the absolute file name of the executable, including its file-name extensions, if any.  It returns @code{nil} if the file is not found.  The functions searches in all the directories in @code{exec-path}, and tries all the file-name extensions in @code{exec-suffixes} (@pxref{Subprocess Creation})."
msgstr ""

#. type: section
#: files.texi.orig:1475
#, no-wrap
msgid "Changing File Names and Attributes"
msgstr ""

#. type: cindex
#: files.texi.orig:1477
#, no-wrap
msgid "copying files"
msgstr ""

#. type: cindex
#: files.texi.orig:1478
#, no-wrap
msgid "deleting files"
msgstr ""

#. type: cindex
#: files.texi.orig:1479
#, no-wrap
msgid "linking files"
msgstr ""

#. type: cindex
#: files.texi.orig:1480
#, no-wrap
msgid "setting modes of files"
msgstr ""

#. type: Plain text
#: files.texi.orig:1484
msgid "The functions in this section rename, copy, delete, link, and set the modes (permissions) of files."
msgstr ""

#. type: Plain text
#: files.texi.orig:1488
msgid "In the functions that have an argument @var{newname}, if a file by the name of @var{newname} already exists, the actions taken depend on the value of the argument @var{ok-if-already-exists}:"
msgstr ""

#. type: itemize
#: files.texi.orig:1493
msgid "Signal a @code{file-already-exists} error if @var{ok-if-already-exists} is @code{nil}."
msgstr ""

#. type: itemize
#: files.texi.orig:1496
msgid "Request confirmation if @var{ok-if-already-exists} is a number."
msgstr ""

#. type: itemize
#: files.texi.orig:1500
msgid "Replace the old file without confirmation if @var{ok-if-already-exists} is any other value."
msgstr ""

#. type: Plain text
#: files.texi.orig:1506
msgid "The next four commands all recursively follow symbolic links at all levels of parent directories for their first argument, but, if that argument is itself a symbolic link, then only @code{copy-file} replaces it with its (recursive) target."
msgstr ""

#. type: deffn
#: files.texi.orig:1507
#, no-wrap
msgid "Command add-name-to-file oldname newname &optional ok-if-already-exists"
msgstr ""

#. type: cindex
#: files.texi.orig:1508
#, no-wrap
msgid "file with multiple names"
msgstr ""

#. type: cindex
#: files.texi.orig:1509
#, no-wrap
msgid "file hard link"
msgstr ""

#. type: deffn
#: files.texi.orig:1513
msgid "This function gives the file named @var{oldname} the additional name @var{newname}.  This means that @var{newname} becomes a new ``hard link'' to @var{oldname}."
msgstr ""

#. type: deffn
#: files.texi.orig:1516
msgid "In the first part of the following example, we list two files, @file{foo} and @file{foo3}."
msgstr ""

#. type: group
#: files.texi.orig:1522
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 1 rms rms 29 Aug 18 20:32 foo\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"
msgstr ""

#. type: deffn
#: files.texi.orig:1528
msgid "Now we create a hard link, by calling @code{add-name-to-file}, then list the files again.  This shows two names for one file, @file{foo} and @file{foo2}."
msgstr ""

#. type: group
#: files.texi.orig:1533
#, no-wrap
msgid ""
"(add-name-to-file \"foo\" \"foo2\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1540
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo2\n"
"84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3\n"
msgstr ""

#. type: deffn
#: files.texi.orig:1544
msgid "Finally, we evaluate the following:"
msgstr ""

#. type: example
#: files.texi.orig:1547
#, no-wrap
msgid "(add-name-to-file \"foo\" \"foo3\" t)\n"
msgstr ""

#. type: deffn
#: files.texi.orig:1553
msgid "and list the files again.  Now there are three names for one file: @file{foo}, @file{foo2}, and @file{foo3}.  The old contents of @file{foo3} are lost."
msgstr ""

#. type: group
#: files.texi.orig:1558
#, no-wrap
msgid ""
"(add-name-to-file \"foo1\" \"foo3\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1565
#, no-wrap
msgid ""
"$ ls -li fo*\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo2\n"
"81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo3\n"
msgstr ""

#. type: deffn
#: files.texi.orig:1571
msgid "This function is meaningless on operating systems where multiple names for one file are not allowed.  Some systems implement multiple names by copying the file instead."
msgstr ""

#. type: deffn
#: files.texi.orig:1573
msgid "See also @code{file-nlinks} in @ref{File Attributes}."
msgstr ""

#. type: deffn
#: files.texi.orig:1575
#, no-wrap
msgid "Command rename-file filename newname &optional ok-if-already-exists"
msgstr ""

#. type: deffn
#: files.texi.orig:1577
msgid "This command renames the file @var{filename} as @var{newname}."
msgstr ""

#. type: deffn
#: files.texi.orig:1582
msgid "If @var{filename} has additional names aside from @var{filename}, it continues to have those names.  In fact, adding the name @var{newname} with @code{add-name-to-file} and then deleting @var{filename} has the same effect as renaming, aside from momentary intermediate states."
msgstr ""

#. type: deffn
#: files.texi.orig:1584
#, no-wrap
msgid "Command copy-file oldname newname &optional ok-if-exists time preserve-uid-gid preserve-extended-attributes"
msgstr ""

#. type: deffn
#: files.texi.orig:1589
msgid "This command copies the file @var{oldname} to @var{newname}.  An error is signaled if @var{oldname} does not exist.  If @var{newname} names a directory, it copies @var{oldname} into that directory, preserving its final name component."
msgstr ""

#. type: deffn
#: files.texi.orig:1596
msgid "If @var{time} is non-@code{nil}, then this function gives the new file the same last-modified time that the old one has.  (This works on only some operating systems.)  If setting the time gets an error, @code{copy-file} signals a @code{file-date-error} error.  In an interactive call, a prefix argument specifies a non-@code{nil} value for @var{time}."
msgstr ""

#. type: deffn
#: files.texi.orig:1603
msgid "If argument @var{preserve-uid-gid} is @code{nil}, we let the operating system decide the user and group ownership of the new file (this is usually set to the user running Emacs).  If @var{preserve-uid-gid} is non-@code{nil}, we attempt to copy the user and group ownership of the file.  This works only on some operating systems, and only if you have the correct permissions to do so."
msgstr ""

#. type: deffn
#: files.texi.orig:1608
msgid "If the optional argument @var{preserve-permissions} is non-@code{nil}, this function copies the file modes (or ``permissions'') of @var{oldname} to @var{newname}, as well as the Access Control List and SELinux context (if any).  @xref{Information about Files}."
msgstr ""

#. type: deffn
#: files.texi.orig:1614
msgid "Otherwise, the file modes of @var{newname} are left unchanged if it is an existing file, and set to those of @var{oldname}, masked by the default file permissions (see @code{set-default-file-modes} below), if @var{newname} is to be newly created.  The Access Control List or SELinux context are not copied over in either case."
msgstr ""

#. type: deffn
#: files.texi.orig:1616
#, no-wrap
msgid "Command make-symbolic-link filename newname  &optional ok-if-exists"
msgstr ""

#. type: pindex
#: files.texi.orig:1617
#, no-wrap
msgid "ln"
msgstr ""

#. type: kindex
#: files.texi.orig:1618
#, no-wrap
msgid "file-already-exists"
msgstr ""

#. type: deffn
#: files.texi.orig:1622
msgid "This command makes a symbolic link to @var{filename}, named @var{newname}.  This is like the shell command @samp{ln -s @var{filename} @var{newname}}."
msgstr ""

#. type: deffn
#: files.texi.orig:1625
msgid "This function is not available on systems that don't support symbolic links."
msgstr ""

#. type: cindex
#: files.texi.orig:1627 files.texi.orig:2711
#, no-wrap
msgid "trash"
msgstr ""

#. type: vindex
#: files.texi.orig:1628 files.texi.orig:2712
#, no-wrap
msgid "delete-by-moving-to-trash"
msgstr ""

#. type: deffn
#: files.texi.orig:1629
#, no-wrap
msgid "Command delete-file filename &optional trash"
msgstr ""

#. type: pindex
#: files.texi.orig:1630
#, no-wrap
msgid "rm"
msgstr ""

#. type: deffn
#: files.texi.orig:1636
msgid "This command deletes the file @var{filename}.  If the file has multiple names, it continues to exist under the other names.  If @var{filename} is a symbolic link, @code{delete-file} deletes only the symbolic link and not its target (though it does follow symbolic links at all levels of parent directories)."
msgstr ""

#. type: deffn
#: files.texi.orig:1640
msgid "A suitable kind of @code{file-error} error is signaled if the file does not exist, or is not deletable.  (On Unix and GNU/Linux, a file is deletable if its directory is writable.)"
msgstr ""

#. type: deffn
#: files.texi.orig:1647 files.texi.orig:2729
msgid "If the optional argument @var{trash} is non-@code{nil} and the variable @code{delete-by-moving-to-trash} is non-@code{nil}, this command moves the file into the system Trash instead of deleting it.  @xref{Misc File Ops,,Miscellaneous File Operations, emacs, The GNU Emacs Manual}.  When called interactively, @var{trash} is @code{t} if no prefix argument is given, and @code{nil} otherwise."
msgstr ""

#. type: deffn
#: files.texi.orig:1649
msgid "See also @code{delete-directory} in @ref{Create/Delete Dirs}."
msgstr ""

#. type: cindex
#: files.texi.orig:1651
#, no-wrap
msgid "file permissions, setting"
msgstr ""

#. type: cindex
#: files.texi.orig:1653
#, no-wrap
msgid "file modes, setting"
msgstr ""

#. type: deffn
#: files.texi.orig:1654
#, no-wrap
msgid "Command set-file-modes filename mode"
msgstr ""

#. type: deffn
#: files.texi.orig:1658
msgid "This function sets the @dfn{file mode} (or @dfn{permissions}) of @var{filename} to @var{mode}.  It recursively follows symbolic links at all levels for @var{filename}."
msgstr ""

#. type: deffn
#: files.texi.orig:1663
msgid "If called non-interactively, @var{mode} must be an integer.  Only the lowest 12 bits of the integer are used; on most systems, only the lowest 9 bits are meaningful.  You can use the Lisp construct for octal numbers to enter @var{mode}.  For example,"
msgstr ""

#. type: example
#: files.texi.orig:1666
#, no-wrap
msgid "(set-file-modes #o644)\n"
msgstr ""

#. type: deffn
#: files.texi.orig:1673
msgid "specifies that the file should be readable and writable for its owner, readable for group members, and readable for all other users.  @xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a description of mode bit specifications."
msgstr ""

#. type: deffn
#: files.texi.orig:1677
msgid "Interactively, @var{mode} is read from the minibuffer using @code{read-file-modes} (see below), which lets the user type in either an integer or a string representing the permissions symbolically."
msgstr ""

#. type: deffn
#: files.texi.orig:1680
msgid "@xref{File Attributes}, for the function @code{file-modes}, which returns the permissions of a file."
msgstr ""

#. type: defun
#: files.texi.orig:1682
#, no-wrap
msgid "set-default-file-modes mode"
msgstr ""

#. type: cindex
#: files.texi.orig:1683
#, no-wrap
msgid "umask"
msgstr ""

#. type: defun
#: files.texi.orig:1690
msgid "This function sets the default permissions for new files created by Emacs and its subprocesses.  Every file created with Emacs initially has these permissions, or a subset of them (@code{write-region} will not grant execute permissions even if the default file permissions allow execution).  On Unix and GNU/Linux, the default permissions are given by the bitwise complement of the ``umask'' value."
msgstr ""

#. type: defun
#: files.texi.orig:1694
msgid "The argument @var{mode} should be an integer which specifies the permissions, similar to @code{set-file-modes} above.  Only the lowest 9 bits are meaningful."
msgstr ""

#. type: defun
#: files.texi.orig:1698
msgid "The default file permissions have no effect when you save a modified version of an existing file; saving a file preserves its existing permissions."
msgstr ""

#. type: defun
#: files.texi.orig:1700
#, no-wrap
msgid "default-file-modes"
msgstr ""

#. type: defun
#: files.texi.orig:1702
msgid "This function returns the default file permissions, as an integer."
msgstr ""

#. type: defun
#: files.texi.orig:1704
#, no-wrap
msgid "read-file-modes &optional prompt base-file"
msgstr ""

#. type: defun
#: files.texi.orig:1711
msgid "This function reads a set of file mode bits from the minibuffer.  The first optional argument @var{prompt} specifies a non-default prompt.  Second second optional argument @var{base-file} is the name of a file on whose permissions to base the mode bits that this function returns, if what the user types specifies mode bits relative to permissions of an existing file."
msgstr ""

#. type: defun
#: files.texi.orig:1724
msgid "If user input represents an octal number, this function returns that number.  If it is a complete symbolic specification of mode bits, as in @code{\"u=rwx\"}, the function converts it to the equivalent numeric value using @code{file-modes-symbolic-to-number} and returns the result.  If the specification is relative, as in @code{\"o+g\"}, then the permissions on which the specification is based are taken from the mode bits of @var{base-file}.  If @var{base-file} is omitted or @code{nil}, the function uses @code{0} as the base mode bits.  The complete and relative specifications can be combined, as in @code{\"u+r,g+rx,o+r,g-w\"}.  @xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual}, for a description of file mode specifications."
msgstr ""

#. type: defun
#: files.texi.orig:1726
#, no-wrap
msgid "file-modes-symbolic-to-number modes &optional base-modes"
msgstr ""

#. type: defun
#: files.texi.orig:1733
msgid "This function converts a symbolic file mode specification in @var{modes} into the equivalent integer.  If the symbolic specification is based on an existing file, that file's mode bits are taken from the optional argument @var{base-modes}; if that argument is omitted or @code{nil}, it defaults to 0, i.e., no access rights at all."
msgstr ""

#. type: defun
#: files.texi.orig:1735
#, no-wrap
msgid "set-file-times filename &optional time"
msgstr ""

#. type: defun
#: files.texi.orig:1741
msgid "This function sets the access and modification times of @var{filename} to @var{time}.  The return value is @code{t} if the times are successfully set, otherwise it is @code{nil}.  @var{time} defaults to the current time and must be in the format returned by @code{current-time} (@pxref{Time of Day})."
msgstr ""

#. type: defun
#: files.texi.orig:1743
#, no-wrap
msgid "set-file-extended-attributes filename attribute-alist"
msgstr ""

#. type: defun
#: files.texi.orig:1748
msgid "This function sets the Emacs-recognized extended file attributes for @code{filename}.  The second argument @var{attribute-alist} should be an alist of the same form returned by @code{file-extended-attributes}.  @xref{Extended Attributes}."
msgstr ""

#. type: defun
#: files.texi.orig:1750
#, no-wrap
msgid "set-file-selinux-context filename context"
msgstr ""

#. type: defun
#: files.texi.orig:1755
msgid "This function sets the SELinux security context for @var{filename} to @var{context}.  The @var{context} argument should be a list @code{(@var{user} @var{role} @var{type} @var{range})}, where each element is a string.  @xref{Extended Attributes}."
msgstr ""

#. type: defun
#: files.texi.orig:1760
msgid "The function returns @code{t} if it succeeds in setting the SELinux context of @var{filename}.  It returns @code{nil} if the context was not set (e.g., if SELinux is disabled, or if Emacs was compiled without SELinux support)."
msgstr ""

#. type: defun
#: files.texi.orig:1762
#, no-wrap
msgid "set-file-acl filename acl"
msgstr ""

#. type: defun
#: files.texi.orig:1766
msgid "This function sets the Access Control List for @var{filename} to @var{acl}.  The @var{acl} argument should have the same form returned by the function @code{file-acl}.  @xref{Extended Attributes}."
msgstr ""

#. type: defun
#: files.texi.orig:1769
msgid "The function returns @code{t} if it successfully sets the ACL of @var{filename}, @code{nil} otherwise."
msgstr ""

#. type: cindex
#: files.texi.orig:1773
#, no-wrap
msgid "file names"
msgstr ""

#. type: Plain text
#: files.texi.orig:1778
msgid "Files are generally referred to by their names, in Emacs as elsewhere.  File names in Emacs are represented as strings.  The functions that operate on a file all expect a file name argument."
msgstr ""

#. type: Plain text
#: files.texi.orig:1783
msgid "In addition to operating on files themselves, Emacs Lisp programs often need to operate on file names; i.e., to take them apart and to use part of a name to construct related file names.  This section describes how to manipulate file names."
msgstr ""

#. type: Plain text
#: files.texi.orig:1787
msgid "The functions in this section do not actually access files, so they can operate on file names that do not refer to an existing file or directory."
msgstr ""

#. type: findex
#: files.texi.orig:1788
#, no-wrap
msgid "cygwin-convert-file-name-from-windows"
msgstr ""

#. type: findex
#: files.texi.orig:1789
#, no-wrap
msgid "cygwin-convert-file-name-to-windows"
msgstr ""

#. type: cindex
#: files.texi.orig:1790
#, no-wrap
msgid "MS-Windows file-name syntax"
msgstr ""

#. type: cindex
#: files.texi.orig:1791
#, no-wrap
msgid "converting file names from/to MS-Windows syntax"
msgstr ""

#. type: Plain text
#: files.texi.orig:1802
msgid "On MS-DOS and MS-Windows, these functions (like the function that actually operate on files) accept MS-DOS or MS-Windows file-name syntax, where backslashes separate the components, as well as Unix syntax; but they always return Unix syntax.  This enables Lisp programs to specify file names in Unix syntax and work properly on all systems without change.@footnote{In MS-Windows versions of Emacs compiled for the Cygwin environment, you can use the functions @code{cygwin-convert-file-name-to-windows} and @code{cygwin-convert-file-name-from-windows} to convert between the two file-name syntaxes.}"
msgstr ""

#. type: subsection
#: files.texi.orig:1813 files.texi.orig:1815 files.texi.orig:1816
#, no-wrap
msgid "File Name Components"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "The directory part of a file name, and the rest."
msgstr ""

#. type: node
#: files.texi.orig:1813 files.texi.orig:1954
#, no-wrap
msgid "Relative File Names"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "Some file names are relative to a current directory."
msgstr ""

#. type: subsection
#: files.texi.orig:1813 files.texi.orig:2017 files.texi.orig:2018
#, no-wrap
msgid "Directory Names"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "A directory's name as a directory is different from its name as a file."
msgstr ""

#. type: node
#: files.texi.orig:1813 files.texi.orig:2121
#, no-wrap
msgid "File Name Expansion"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "Converting relative file names to absolute ones."
msgstr ""

#. type: node
#: files.texi.orig:1813 files.texi.orig:2290
#, no-wrap
msgid "Unique File Names"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "Generating names for temporary files."
msgstr ""

#. type: subsection
#: files.texi.orig:1813 files.texi.orig:2400 files.texi.orig:2401
#, no-wrap
msgid "File Name Completion"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "Finding the completions for a given file name."
msgstr ""

#. type: subsection
#: files.texi.orig:1813 files.texi.orig:2500 files.texi.orig:2501
#, no-wrap
msgid "Standard File Names"
msgstr ""

#. type: menuentry
#: files.texi.orig:1813
msgid "If your package uses a fixed file name, how to handle various operating systems simply."
msgstr ""

#. type: cindex
#: files.texi.orig:1817
#, no-wrap
msgid "directory part (of file name)"
msgstr ""

#. type: cindex
#: files.texi.orig:1818
#, no-wrap
msgid "nondirectory part (of file name)"
msgstr ""

#. type: cindex
#: files.texi.orig:1819
#, no-wrap
msgid "version number (in file name)"
msgstr ""

#. type: Plain text
#: files.texi.orig:1827
msgid "The operating system groups files into directories.  To specify a file, you must specify the directory and the file's name within that directory.  Therefore, Emacs considers a file name as having two main parts: the @dfn{directory name} part, and the @dfn{nondirectory} part (or @dfn{file name within the directory}).  Either part may be empty.  Concatenating these two parts reproduces the original file name."
msgstr ""

#. type: Plain text
#: files.texi.orig:1831
msgid "On most systems, the directory part is everything up to and including the last slash (backslash is also allowed in input on MS-DOS or MS-Windows); the nondirectory part is the rest."
msgstr ""

#. type: Plain text
#: files.texi.orig:1835
msgid "For some purposes, the nondirectory part is further subdivided into the name proper and the @dfn{version number}.  On most systems, only backup files have version numbers in their names."
msgstr ""

#. type: defun
#: files.texi.orig:1836
#, no-wrap
msgid "file-name-directory filename"
msgstr ""

#. type: defun
#: files.texi.orig:1840
msgid "This function returns the directory part of @var{filename}, as a directory name (@pxref{Directory Names}), or @code{nil} if @var{filename} does not include a directory part."
msgstr ""

#. type: defun
#: files.texi.orig:1843
msgid "On GNU and Unix systems, a string returned by this function always ends in a slash.  On MS-DOS it can also end in a colon."
msgstr ""

#. type: group
#: files.texi.orig:1848
#, no-wrap
msgid ""
"(file-name-directory \"lewis/foo\")  ; @r{Unix example}\n"
"     @result{} \"lewis/\"\n"
msgstr ""

#. type: group
#: files.texi.orig:1852
#, no-wrap
msgid ""
"(file-name-directory \"foo\")        ; @r{Unix example}\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: files.texi.orig:1856
#, no-wrap
msgid "file-name-nondirectory filename"
msgstr ""

#. type: defun
#: files.texi.orig:1858
msgid "This function returns the nondirectory part of @var{filename}."
msgstr ""

#. type: group
#: files.texi.orig:1863
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:1867
#, no-wrap
msgid ""
"(file-name-nondirectory \"foo\")\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:1871
#, no-wrap
msgid ""
"(file-name-nondirectory \"lewis/\")\n"
"     @result{} \"\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:1875
#, no-wrap
msgid "file-name-sans-versions filename &optional keep-backup-version"
msgstr ""

#. type: defun
#: files.texi.orig:1878
msgid "This function returns @var{filename} with any file version numbers, backup version numbers, or trailing tildes discarded."
msgstr ""

#. type: defun
#: files.texi.orig:1882
msgid "If @var{keep-backup-version} is non-@code{nil}, then true file version numbers understood as such by the file system are discarded from the return value, but backup version numbers are kept."
msgstr ""

#. type: group
#: files.texi.orig:1887
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo.~1~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:1891
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo~\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:1895
#, no-wrap
msgid ""
"(file-name-sans-versions \"~rms/foo\")\n"
"     @result{} \"~rms/foo\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:1899
#, no-wrap
msgid "file-name-extension filename &optional period"
msgstr ""

#. type: defun
#: files.texi.orig:1905
msgid "This function returns @var{filename}'s final ``extension'', if any, after applying @code{file-name-sans-versions} to remove any version/backup part.  The extension, in a file name, is the part that follows the last @samp{.} in the last name component (minus any version/backup part)."
msgstr ""

#. type: defun
#: files.texi.orig:1912
msgid "This function returns @code{nil} for extensionless file names such as @file{foo}.  It returns @code{\"\"} for null extensions, as in @file{foo.}.  If the last component of a file name begins with a @samp{.}, that @samp{.} doesn't count as the beginning of an extension.  Thus, @file{.emacs}'s ``extension'' is @code{nil}, not @samp{.emacs}."
msgstr ""

#. type: defun
#: files.texi.orig:1916
msgid "If @var{period} is non-@code{nil}, then the returned value includes the period that delimits the extension, and if @var{filename} has no extension, the value is @code{\"\"}."
msgstr ""

#. type: defun
#: files.texi.orig:1918
#, no-wrap
msgid "file-name-sans-extension filename"
msgstr ""

#. type: defun
#: files.texi.orig:1922
msgid "This function returns @var{filename} minus its extension, if any.  The version/backup part, if present, is only removed if the file has an extension.  For example,"
msgstr ""

#. type: example
#: files.texi.orig:1936
#, no-wrap
msgid ""
"(file-name-sans-extension \"foo.lose.c\")\n"
"     @result{} \"foo.lose\"\n"
"(file-name-sans-extension \"big.hack/foo\")\n"
"     @result{} \"big.hack/foo\"\n"
"(file-name-sans-extension \"/my/home/.emacs\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"/my/home/.emacs.el\")\n"
"     @result{} \"/my/home/.emacs\"\n"
"(file-name-sans-extension \"~/foo.el.~3~\")\n"
"     @result{} \"~/foo\"\n"
"(file-name-sans-extension \"~/foo.~3~\")\n"
"     @result{} \"~/foo.~3~\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:1940
msgid "Note that the @samp{.~3~} in the two last examples is the backup part, not an extension."
msgstr ""

#. type: defun
#: files.texi.orig:1942
#, no-wrap
msgid "file-name-base &optional filename"
msgstr ""

#. type: defun
#: files.texi.orig:1945
msgid "This function is the composition of @code{file-name-sans-extension} and @code{file-name-nondirectory}.  For example,"
msgstr ""

#. type: example
#: files.texi.orig:1949
#, no-wrap
msgid ""
"(file-name-base \"/my/home/foo.c\")\n"
"    @result{} \"foo\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:1952
msgid "The @var{filename} argument defaults to @code{buffer-file-name}."
msgstr ""

#. type: subsection
#: files.texi.orig:1955
#, no-wrap
msgid "Absolute and Relative File Names"
msgstr ""

#. type: cindex
#: files.texi.orig:1956
#, no-wrap
msgid "absolute file name"
msgstr ""

#. type: cindex
#: files.texi.orig:1957
#, no-wrap
msgid "relative file name"
msgstr ""

#. type: Plain text
#: files.texi.orig:1970
msgid "All the directories in the file system form a tree starting at the root directory.  A file name can specify all the directory names starting from the root of the tree; then it is called an @dfn{absolute} file name.  Or it can specify the position of the file in the tree relative to a default directory; then it is called a @dfn{relative} file name.  On Unix and GNU/Linux, an absolute file name starts with a @samp{/} or a @samp{~} (@pxref{abbreviate-file-name}), and a relative one does not.  On MS-DOS and MS-Windows, an absolute file name starts with a slash or a backslash, or with a drive specification @samp{@var{x}:/}, where @var{x} is the @dfn{drive letter}."
msgstr ""

#. type: defun
#: files.texi.orig:1971
#, no-wrap
msgid "file-name-absolute-p filename"
msgstr ""

#. type: defun
#: files.texi.orig:1974
msgid "This function returns @code{t} if file @var{filename} is an absolute file name, @code{nil} otherwise."
msgstr ""

#. type: group
#: files.texi.orig:1979
#, no-wrap
msgid ""
"(file-name-absolute-p \"~rms/foo\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: files.texi.orig:1983
#, no-wrap
msgid ""
"(file-name-absolute-p \"rms/foo\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: files.texi.orig:1987
#, no-wrap
msgid ""
"(file-name-absolute-p \"/user/rms/foo\")\n"
"     @result{} t\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:1995
msgid "Given a possibly relative file name, you can convert it to an absolute name using @code{expand-file-name} (@pxref{File Name Expansion}).  This function converts absolute file names to relative names:"
msgstr ""

#. type: defun
#: files.texi.orig:1996
#, no-wrap
msgid "file-relative-name filename &optional directory"
msgstr ""

#. type: defun
#: files.texi.orig:2002
msgid "This function tries to return a relative name that is equivalent to @var{filename}, assuming the result will be interpreted relative to @var{directory} (an absolute directory name or directory file name).  If @var{directory} is omitted or @code{nil}, it defaults to the current buffer's default directory."
msgstr ""

#. type: defun
#: files.texi.orig:2008
msgid "On some operating systems, an absolute file name begins with a device name.  On such systems, @var{filename} has no relative equivalent based on @var{directory} if they start with two different device names.  In this case, @code{file-relative-name} returns @var{filename} in absolute form."
msgstr ""

#. type: example
#: files.texi.orig:2014
#, no-wrap
msgid ""
"(file-relative-name \"/foo/bar\" \"/foo/\")\n"
"     @result{} \"bar\"\n"
"(file-relative-name \"/foo/bar\" \"/hack/\")\n"
"     @result{} \"../foo/bar\"\n"
msgstr ""

#. type: cindex
#: files.texi.orig:2019
#, no-wrap
msgid "directory name"
msgstr ""

#. type: cindex
#: files.texi.orig:2020
#, no-wrap
msgid "file name of directory"
msgstr ""

#. type: Plain text
#: files.texi.orig:2030
msgid "A @dfn{directory name} is the name of a directory.  A directory is actually a kind of file, so it has a file name, which is related to the directory name but not identical to it.  (This is not quite the same as the usual Unix terminology.)  These two different names for the same entity are related by a syntactic transformation.  On GNU and Unix systems, this is simple: a directory name ends in a slash, whereas the directory's name as a file lacks that slash.  On MS-DOS the relationship is more complicated."
msgstr ""

#. type: Plain text
#: files.texi.orig:2036
msgid "The difference between a directory name and its name as a file is subtle but crucial.  When an Emacs variable or function argument is described as being a directory name, a file name of a directory is not acceptable.  When @code{file-name-directory} returns a string, that is always a directory name."
msgstr ""

#. type: Plain text
#: files.texi.orig:2040
msgid "The following two functions convert between directory names and file names.  They do nothing special with environment variable substitutions such as @samp{$HOME}, and the constructs @samp{~}, @samp{.} and @samp{..}."
msgstr ""

#. type: defun
#: files.texi.orig:2041
#, no-wrap
msgid "file-name-as-directory filename"
msgstr ""

#. type: defun
#: files.texi.orig:2046
msgid "This function returns a string representing @var{filename} in a form that the operating system will interpret as the name of a directory.  On most systems, this means appending a slash to the string (if it does not already end in one)."
msgstr ""

#. type: group
#: files.texi.orig:2051
#, no-wrap
msgid ""
"(file-name-as-directory \"~rms/lewis\")\n"
"     @result{} \"~rms/lewis/\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2055
#, no-wrap
msgid "directory-file-name dirname"
msgstr ""

#. type: defun
#: files.texi.orig:2060
msgid "This function returns a string representing @var{dirname} in a form that the operating system will interpret as the name of a file.  On most systems, this means removing the final slash (or backslash) from the string."
msgstr ""

#. type: group
#: files.texi.orig:2065
#, no-wrap
msgid ""
"(directory-file-name \"~lewis/\")\n"
"     @result{} \"~lewis\"\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2071
msgid "Given a directory name, you can combine it with a relative file name using @code{concat}:"
msgstr ""

#. type: example
#: files.texi.orig:2074
#, no-wrap
msgid "(concat @var{dirname} @var{relfile})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2080
msgid "Be sure to verify that the file name is relative before doing that.  If you use an absolute file name, the results could be syntactically invalid or refer to the wrong file."
msgstr ""

#. type: Plain text
#: files.texi.orig:2084
msgid "If you want to use a directory file name in making such a combination, you must first convert it to a directory name using @code{file-name-as-directory}:"
msgstr ""

#. type: example
#: files.texi.orig:2087
#, no-wrap
msgid "(concat (file-name-as-directory @var{dirfile}) @var{relfile})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2091
msgid "Don't try concatenating a slash by hand, as in"
msgstr ""

#. type: example
#: files.texi.orig:2095
#, no-wrap
msgid ""
";;; @r{Wrong!}\n"
"(concat @var{dirfile} \"/\" @var{relfile})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2100
msgid "because this is not portable.  Always use @code{file-name-as-directory}."
msgstr ""

#. type: Plain text
#: files.texi.orig:2103
msgid "To convert a directory name to its abbreviation, use this function:"
msgstr ""

#. type: cindex
#: files.texi.orig:2104
#, no-wrap
msgid "file name abbreviations"
msgstr ""

#. type: cindex
#: files.texi.orig:2105
#, no-wrap
msgid "abbreviated file names"
msgstr ""

#. type: defun
#: files.texi.orig:2106
#, no-wrap
msgid "abbreviate-file-name filename"
msgstr ""

#. type: anchor{#1}
#: files.texi.orig:2116
msgid "abbreviate-file-name"
msgstr ""

#. type: defun
#: files.texi.orig:2116
msgid "This function returns an abbreviated form of @var{filename}.  It applies the abbreviations specified in @code{directory-abbrev-alist} (@pxref{File Aliases,,File Aliases, emacs, The GNU Emacs Manual}), then substitutes @samp{~} for the user's home directory if the argument names a file in the home directory or one of its subdirectories.  If the home directory is a root directory, it is not replaced with @samp{~}, because this does not make the result shorter on many systems."
msgstr ""

#. type: defun
#: files.texi.orig:2119
msgid "You can use this function for directory names and for file names, because it recognizes abbreviations even as part of the name."
msgstr ""

#. type: subsection
#: files.texi.orig:2122
#, no-wrap
msgid "Functions that Expand Filenames"
msgstr ""

#. type: cindex
#: files.texi.orig:2123
#, no-wrap
msgid "expansion of file names"
msgstr ""

#. type: Plain text
#: files.texi.orig:2130
msgid "@dfn{Expanding} a file name means converting a relative file name to an absolute one.  Since this is done relative to a default directory, you must specify the default directory name as well as the file name to be expanded.  It also involves expanding abbreviations like @file{~/}"
msgstr ""

#. type: ifnottex
#: files.texi.orig:2132
msgid "(@pxref{abbreviate-file-name}),"
msgstr ""

#. type: Plain text
#: files.texi.orig:2134
msgid "and eliminating redundancies like @file{./} and @file{@var{name}/../}."
msgstr ""

#. type: defun
#: files.texi.orig:2135
#, no-wrap
msgid "expand-file-name filename &optional directory"
msgstr ""

#. type: defun
#: files.texi.orig:2142
msgid "This function converts @var{filename} to an absolute file name.  If @var{directory} is supplied, it is the default directory to start with if @var{filename} is relative.  (The value of @var{directory} should itself be an absolute directory name or directory file name; it may start with @samp{~}.)  Otherwise, the current buffer's value of @code{default-directory} is used.  For example:"
msgstr ""

#. type: group
#: files.texi.orig:2147
#, no-wrap
msgid ""
"(expand-file-name \"foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:2151
#, no-wrap
msgid ""
"(expand-file-name \"../foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:2155
#, no-wrap
msgid ""
"(expand-file-name \"foo\" \"/usr/spool/\")\n"
"     @result{} \"/usr/spool/foo\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2163
msgid "If the part of the combined file name before the first slash is @samp{~}, it expands to the value of the @env{HOME} environment variable (usually your home directory).  If the part before the first slash is @samp{~@var{user}} and if @var{user} is a valid login name, it expands to @var{user}'s home directory."
msgstr ""

#. type: defun
#: files.texi.orig:2166
msgid "Filenames containing @samp{.} or @samp{..} are simplified to their canonical form:"
msgstr ""

#. type: group
#: files.texi.orig:2171
#, no-wrap
msgid ""
"(expand-file-name \"bar/../foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/foo\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2175
msgid "In some cases, a leading @samp{..} component can remain in the output:"
msgstr ""

#. type: group
#: files.texi.orig:2180
#, no-wrap
msgid ""
"(expand-file-name \"../home\" \"/\")\n"
"     @result{} \"/../home\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2187
msgid "This is for the sake of filesystems that have the concept of a ``superroot'' above the root directory @file{/}.  On other filesystems, @file{/../} is interpreted exactly the same as @file{/}."
msgstr ""

#. type: defun
#: files.texi.orig:2190
msgid "Note that @code{expand-file-name} does @emph{not} expand environment variables; only @code{substitute-in-file-name} does that:"
msgstr ""

#. type: group
#: files.texi.orig:2195
#, no-wrap
msgid ""
"(expand-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/lewis/$HOME/foo\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2203
msgid "Note also that @code{expand-file-name} does not follow symbolic links at any level.  This results in a difference between the way @code{file-truename} and @code{expand-file-name} treat @samp{..}.  Assuming that @samp{/tmp/bar} is a symbolic link to the directory @samp{/tmp/foo/bar} we get:"
msgstr ""

#. type: group
#: files.texi.orig:2208
#, no-wrap
msgid ""
"(file-truename \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/foo/myfile\"\n"
msgstr ""

#. type: group
#: files.texi.orig:2212
#, no-wrap
msgid ""
"(expand-file-name \"/tmp/bar/../myfile\")\n"
"     @result{} \"/tmp/myfile\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2218
msgid "If you may need to follow symbolic links preceding @samp{..}, you should make sure to call @code{file-truename} without prior direct or indirect calls to @code{expand-file-name}.  @xref{Truenames}."
msgstr ""

#. type: defvar
#: files.texi.orig:2220
#, no-wrap
msgid "default-directory"
msgstr ""

#. type: defvar
#: files.texi.orig:2224
msgid "The value of this buffer-local variable is the default directory for the current buffer.  It should be an absolute directory name; it may start with @samp{~}.  This variable is buffer-local in every buffer."
msgstr ""

#. type: defvar
#: files.texi.orig:2227
msgid "@code{expand-file-name} uses the default directory when its second argument is @code{nil}."
msgstr ""

#. type: defvar
#: files.texi.orig:2229
msgid "The value is always a string ending with a slash."
msgstr ""

#. type: group
#: files.texi.orig:2234
#, no-wrap
msgid ""
"default-directory\n"
"     @result{} \"/user/lewis/manual/\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2238
#, no-wrap
msgid "substitute-in-file-name filename"
msgstr ""

#. type: anchor{#1}
#: files.texi.orig:2246
msgid "Definition of substitute-in-file-name"
msgstr ""

#. type: defun
#: files.texi.orig:2246
msgid "This function replaces environment variable references in @var{filename} with the environment variable values.  Following standard Unix shell syntax, @samp{$} is the prefix to substitute an environment variable value.  If the input contains @samp{$$}, that is converted to @samp{$}; this gives the user a way to ``quote'' a @samp{$}."
msgstr ""

#. type: defun
#: files.texi.orig:2251
msgid "The environment variable name is the series of alphanumeric characters (including underscores) that follow the @samp{$}.  If the character following the @samp{$} is a @samp{@{}, then the variable name is everything up to the matching @samp{@}}."
msgstr ""

#. type: defun
#: files.texi.orig:2260
msgid "Calling @code{substitute-in-file-name} on output produced by @code{substitute-in-file-name} tends to give incorrect results.  For instance, use of @samp{$$} to quote a single @samp{$} won't work properly, and @samp{$} in an environment variable's value could lead to repeated substitution.  Therefore, programs that call this function and put the output where it will be passed to this function need to double all @samp{$} characters to prevent subsequent incorrect results."
msgstr ""

#. type: defun
#: files.texi.orig:2264
msgid "Here we assume that the environment variable @env{HOME}, which holds the user's home directory name, has value @samp{/xcssun/users/rms}."
msgstr ""

#. type: group
#: files.texi.orig:2269
#, no-wrap
msgid ""
"(substitute-in-file-name \"$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2275
msgid "After substitution, if a @samp{~} or a @samp{/} appears immediately after another @samp{/}, the function discards everything before it (up through the immediately preceding @samp{/})."
msgstr ""

#. type: group
#: files.texi.orig:2280
#, no-wrap
msgid ""
"(substitute-in-file-name \"bar/~/foo\")\n"
"     @result{} \"~/foo\"\n"
msgstr ""

#. type: group
#: files.texi.orig:2285
#, no-wrap
msgid ""
"(substitute-in-file-name \"/usr/local/$HOME/foo\")\n"
"     @result{} \"/xcssun/users/rms/foo\"\n"
"     ;; @r{@file{/usr/local/} has been discarded.}\n"
msgstr ""

#. type: subsection
#: files.texi.orig:2291
#, no-wrap
msgid "Generating Unique File Names"
msgstr ""

#. type: cindex
#: files.texi.orig:2292
#, no-wrap
msgid "unique file names"
msgstr ""

#. type: cindex
#: files.texi.orig:2293
#, no-wrap
msgid "temporary files"
msgstr ""

#. type: Plain text
#: files.texi.orig:2297
msgid "Some programs need to write temporary files.  Here is the usual way to construct a name for such a file:"
msgstr ""

#. type: example
#: files.texi.orig:2300
#, no-wrap
msgid "(make-temp-file @var{name-of-application})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2305
msgid "The job of @code{make-temp-file} is to prevent two different users or two different jobs from trying to use the exact same file name."
msgstr ""

#. type: defun
#: files.texi.orig:2306
#, no-wrap
msgid "make-temp-file prefix &optional dir-flag suffix"
msgstr ""

#. type: defun
#: files.texi.orig:2314
msgid "This function creates a temporary file and returns its name.  Emacs creates the temporary file's name by adding to @var{prefix} some random characters that are different in each Emacs job.  The result is guaranteed to be a newly created empty file.  On MS-DOS, this function can truncate the @var{string} prefix to fit into the 8+3 file-name limits.  If @var{prefix} is a relative file name, it is expanded against @code{temporary-file-directory}."
msgstr ""

#. type: group
#: files.texi.orig:2319
#, no-wrap
msgid ""
"(make-temp-file \"foo\")\n"
"     @result{} \"/tmp/foo232J6v\"\n"
msgstr ""

#. type: defun
#: files.texi.orig:2325
msgid "When @code{make-temp-file} returns, the file has been created and is empty.  At that point, you should write the intended contents into the file."
msgstr ""

#. type: defun
#: files.texi.orig:2329
msgid "If @var{dir-flag} is non-@code{nil}, @code{make-temp-file} creates an empty directory instead of an empty file.  It returns the file name, not the directory name, of that directory.  @xref{Directory Names}."
msgstr ""

#. type: defun
#: files.texi.orig:2332
msgid "If @var{suffix} is non-@code{nil}, @code{make-temp-file} adds it at the end of the file name."
msgstr ""

#. type: defun
#: files.texi.orig:2339
msgid "To prevent conflicts among different libraries running in the same Emacs, each Lisp program that uses @code{make-temp-file} should have its own @var{prefix}.  The number added to the end of @var{prefix} distinguishes between the same application running in different Emacs jobs.  Additional added characters permit a large number of distinct names even in one Emacs job."
msgstr ""

#. type: Plain text
#: files.texi.orig:2347
msgid "The default directory for temporary files is controlled by the variable @code{temporary-file-directory}.  This variable gives the user a uniform way to specify the directory for all temporary files.  Some programs use @code{small-temporary-file-directory} instead, if that is non-@code{nil}.  To use it, you should expand the prefix against the proper directory before calling @code{make-temp-file}."
msgstr ""

#. type: defopt
#: files.texi.orig:2348
#, no-wrap
msgid "temporary-file-directory"
msgstr ""

#. type: cindex
#: files.texi.orig:2349
#, no-wrap
msgid "@env{TMPDIR} environment variable"
msgstr ""

#. type: cindex
#: files.texi.orig:2350
#, no-wrap
msgid "@env{TMP} environment variable"
msgstr ""

#. type: cindex
#: files.texi.orig:2351
#, no-wrap
msgid "@env{TEMP} environment variable"
msgstr ""

#. type: defopt
#: files.texi.orig:2357
msgid "This variable specifies the directory name for creating temporary files.  Its value should be a directory name (@pxref{Directory Names}), but it is good for Lisp programs to cope if the value is a directory's file name instead.  Using the value as the second argument to @code{expand-file-name} is a good way to achieve that."
msgstr ""

#. type: defopt
#: files.texi.orig:2362
msgid "The default value is determined in a reasonable way for your operating system; it is based on the @env{TMPDIR}, @env{TMP} and @env{TEMP} environment variables, with a fall-back to a system-dependent name if none of these variables is defined."
msgstr ""

#. type: defopt
#: files.texi.orig:2368
msgid "Even if you do not use @code{make-temp-file} to create the temporary file, you should still use this variable to decide which directory to put the file in.  However, if you expect the file to be small, you should use @code{small-temporary-file-directory} first if that is non-@code{nil}."
msgstr ""

#. type: defopt
#: files.texi.orig:2370
#, no-wrap
msgid "small-temporary-file-directory"
msgstr ""

#. type: defopt
#: files.texi.orig:2373
msgid "This variable specifies the directory name for creating certain temporary files, which are likely to be small."
msgstr ""

#. type: defopt
#: files.texi.orig:2376
msgid "If you want to write a temporary file which is likely to be small, you should compute the directory like this:"
msgstr ""

#. type: example
#: files.texi.orig:2382
#, no-wrap
msgid ""
"(make-temp-file\n"
"  (expand-file-name @var{prefix}\n"
"                    (or small-temporary-file-directory\n"
"                        temporary-file-directory)))\n"
msgstr ""

#. type: defun
#: files.texi.orig:2385
#, no-wrap
msgid "make-temp-name base-name"
msgstr ""

#. type: defun
#: files.texi.orig:2393
msgid "This function generates a string that can be used as a unique file name.  The name starts with @var{base-name}, and has several random characters appended to it, which are different in each Emacs job.  It is like @code{make-temp-file} except that (i) it just constructs a name, and does not create a file, and (ii) @var{base-name} should be an absolute file name (on MS-DOS, this function can truncate @var{base-name} to fit into the 8+3 file-name limits)."
msgstr ""

#. type: defun
#: files.texi.orig:2398
msgid "@strong{Warning:} In most cases, you should not use this function; use @code{make-temp-file} instead! This function is susceptible to a race condition, between the @code{make-temp-name} call and the creation of the file, which in some cases may cause a security hole."
msgstr ""

#. type: cindex
#: files.texi.orig:2402
#, no-wrap
msgid "file name completion subroutines"
msgstr ""

#. type: cindex
#: files.texi.orig:2403
#, no-wrap
msgid "completion, file name"
msgstr ""

#. type: Plain text
#: files.texi.orig:2407
msgid "This section describes low-level subroutines for completing a file name.  For higher level functions, see @ref{Reading File Names}."
msgstr ""

#. type: defun
#: files.texi.orig:2408
#, no-wrap
msgid "file-name-all-completions partial-filename directory"
msgstr ""

#. type: defun
#: files.texi.orig:2414
msgid "This function returns a list of all possible completions for a file whose name starts with @var{partial-filename} in directory @var{directory}.  The order of the completions is the order of the files in the directory, which is unpredictable and conveys no useful information."
msgstr ""

#. type: defun
#: files.texi.orig:2419
msgid "The argument @var{partial-filename} must be a file name containing no directory part and no slash (or backslash on some systems).  The current buffer's default directory is prepended to @var{directory}, if @var{directory} is not absolute."
msgstr ""

#. type: defun
#: files.texi.orig:2424
msgid "In the following example, suppose that @file{~rms/lewis} is the current default directory, and has five files whose names begin with @samp{f}: @file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr ""

#. type: group
#: files.texi.orig:2430
#, no-wrap
msgid ""
"(file-name-all-completions \"f\" \"\")\n"
"     @result{} (\"foo\" \"file~\" \"file.c.~2~\"\n"
"                \"file.c.~1~\" \"file.c\")\n"
msgstr ""

#. type: group
#: files.texi.orig:2435
#, no-wrap
msgid ""
"(file-name-all-completions \"fo\" \"\")\n"
"     @result{} (\"foo\")\n"
msgstr ""

#. type: defun
#: files.texi.orig:2439
#, no-wrap
msgid "file-name-completion filename directory &optional predicate"
msgstr ""

#. type: defun
#: files.texi.orig:2446
msgid "This function completes the file name @var{filename} in directory @var{directory}.  It returns the longest prefix common to all file names in directory @var{directory} that start with @var{filename}.  If @var{predicate} is non-@code{nil} then it ignores possible completions that don't satisfy @var{predicate}, after calling that function with one argument, the expanded absolute file name."
msgstr ""

#. type: defun
#: files.texi.orig:2450
msgid "If only one match exists and @var{filename} matches it exactly, the function returns @code{t}.  The function returns @code{nil} if directory @var{directory} contains no name starting with @var{filename}."
msgstr ""

#. type: defun
#: files.texi.orig:2455
msgid "In the following example, suppose that the current default directory has five files whose names begin with @samp{f}: @file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and @file{file.c.~2~}."
msgstr ""

#. type: group
#: files.texi.orig:2460
#, no-wrap
msgid ""
"(file-name-completion \"fi\" \"\")\n"
"     @result{} \"file\"\n"
msgstr ""

#. type: group
#: files.texi.orig:2465
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1\" \"\")\n"
"     @result{} \"file.c.~1~\"\n"
msgstr ""

#. type: group
#: files.texi.orig:2470
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~1~\" \"\")\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: files.texi.orig:2475
#, no-wrap
msgid ""
"(file-name-completion \"file.c.~3\" \"\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defopt
#: files.texi.orig:2479
#, no-wrap
msgid "completion-ignored-extensions"
msgstr ""

#. type: defopt
#: files.texi.orig:2484
msgid "@code{file-name-completion} usually ignores file names that end in any string in this list.  It does not ignore them when all the possible completions end in one of these suffixes.  This variable has no effect on @code{file-name-all-completions}."
msgstr ""

#. type: defopt
#: files.texi.orig:2486
msgid "A typical value might look like this:"
msgstr ""

#. type: group
#: files.texi.orig:2491
#, no-wrap
msgid ""
"completion-ignored-extensions\n"
"     @result{} (\".o\" \".elc\" \"~\" \".dvi\")\n"
msgstr ""

#. type: defopt
#: files.texi.orig:2498
msgid "If an element of @code{completion-ignored-extensions} ends in a slash @samp{/}, it signals a directory.  The elements which do @emph{not} end in a slash will never match a directory; thus, the above value will not filter out a directory named @file{foo.elc}."
msgstr ""

#. type: Plain text
#: files.texi.orig:2511
msgid "Sometimes, an Emacs Lisp program needs to specify a standard file name for a particular use---typically, to hold configuration data specified by the current user.  Usually, such files should be located in the directory specified by @code{user-emacs-directory}, which is @file{~/.emacs.d} by default (@pxref{Init File}).  For example, abbrev definitions are stored by default in @file{~/.emacs.d/abbrev_defs}.  The easiest way to specify such a file name is to use the function @code{locate-user-emacs-file}."
msgstr ""

#. type: defun
#: files.texi.orig:2512
#, no-wrap
msgid "locate-user-emacs-file base-name &optional old-name"
msgstr ""

#. type: defun
#: files.texi.orig:2518
msgid "This function returns an absolute file name for an Emacs-specific configuration or data file.  The argument @file{base-name} should be a relative file name.  The return value is the absolute name of a file in the directory specified by @code{user-emacs-directory}; if that directory does not exist, this function creates it."
msgstr ""

#. type: defun
#: files.texi.orig:2528
msgid "If the optional argument @var{old-name} is non-@code{nil}, it specifies a file in the user's home directory, @file{~/@var{old-name}}.  If such a file exists, the return value is the absolute name of that file, instead of the file specified by @var{base-name}.  This argument is intended to be used by Emacs packages to provide backward compatibility.  For instance, prior to the introduction of @code{user-emacs-directory}, the abbrev file was located in @file{~/.abbrev_defs}.  Here is the definition of @code{abbrev-file-name}:"
msgstr ""

#. type: example
#: files.texi.orig:2535
#, no-wrap
msgid ""
"(defcustom abbrev-file-name\n"
"  (locate-user-emacs-file \"abbrev_defs\" \".abbrev_defs\")\n"
"  \"Default name of file from which to read abbrevs.\"\n"
"  @dots{}\n"
"  :type 'file)\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2541
msgid "A lower-level function for standardizing file names, which @code{locate-user-emacs-file} uses as a subroutine, is @code{convert-standard-filename}."
msgstr ""

#. type: defun
#: files.texi.orig:2542
#, no-wrap
msgid "convert-standard-filename filename"
msgstr ""

#. type: defun
#: files.texi.orig:2545
msgid "This function returns a file name based on @var{filename}, which fits the conventions of the current operating system."
msgstr ""

#. type: defun
#: files.texi.orig:2552
msgid "On GNU and Unix systems, this simply returns @var{filename}.  On other operating systems, it may enforce system-specific file name conventions; for example, on MS-DOS this function performs a variety of changes to enforce MS-DOS file name limitations, including converting any leading @samp{.} to @samp{_} and truncating to three characters after the @samp{.}."
msgstr ""

#. type: defun
#: files.texi.orig:2556
msgid "The recommended way to use this function is to specify a name which fits the conventions of GNU and Unix systems, and pass it to @code{convert-standard-filename}."
msgstr ""

#. type: cindex
#: files.texi.orig:2560
#, no-wrap
msgid "directory-oriented functions"
msgstr ""

#. type: cindex
#: files.texi.orig:2561
#, no-wrap
msgid "file names in directory"
msgstr ""

#. type: Plain text
#: files.texi.orig:2565
msgid "A directory is a kind of file that contains other files entered under various names.  Directories are a feature of the file system."
msgstr ""

#. type: Plain text
#: files.texi.orig:2570
msgid "Emacs can list the names of the files in a directory as a Lisp list, or display the names in a buffer using the @code{ls} shell command.  In the latter case, it can optionally display information about each file, depending on the options passed to the @code{ls} command."
msgstr ""

#. type: defun
#: files.texi.orig:2571
#, no-wrap
msgid "directory-files directory &optional full-name match-regexp nosort"
msgstr ""

#. type: defun
#: files.texi.orig:2574
msgid "This function returns a list of the names of the files in the directory @var{directory}.  By default, the list is in alphabetical order."
msgstr ""

#. type: defun
#: files.texi.orig:2578
msgid "If @var{full-name} is non-@code{nil}, the function returns the files' absolute file names.  Otherwise, it returns the names relative to the specified directory."
msgstr ""

#. type: defun
#: files.texi.orig:2583
msgid "If @var{match-regexp} is non-@code{nil}, this function returns only those file names that contain a match for that regular expression---the other file names are excluded from the list.  On case-insensitive filesystems, the regular expression matching is case-insensitive."
msgstr ""

#. type: defun
#: files.texi.orig:2590
msgid "If @var{nosort} is non-@code{nil}, @code{directory-files} does not sort the list, so you get the file names in no particular order.  Use this if you want the utmost possible speed and don't care what order the files are processed in.  If the order of processing is visible to the user, then the user will probably be happier if you do sort the names."
msgstr ""

#. type: group
#: files.texi.orig:2597
#, no-wrap
msgid ""
"(directory-files \"~lewis\")\n"
"     @result{} (\"#foo#\" \"#foo.el#\" \".\" \"..\"\n"
"         \"dired-mods.el\" \"files.texi\"\n"
"         \"files.texi.~1~\")\n"
msgstr ""

#. type: defun
#: files.texi.orig:2602
msgid "An error is signaled if @var{directory} is not the name of a directory that can be read."
msgstr ""

#. type: defun
#: files.texi.orig:2604
#, no-wrap
msgid "directory-files-and-attributes directory &optional full-name match-regexp nosort id-format"
msgstr ""

#. type: defun
#: files.texi.orig:2613
msgid "This is similar to @code{directory-files} in deciding which files to report on and how to report their names.  However, instead of returning a list of file names, it returns for each file a list @code{(@var{filename} . @var{attributes})}, where @var{attributes} is what @code{file-attributes} would return for that file.  The optional argument @var{id-format} has the same meaning as the corresponding argument to @code{file-attributes} (@pxref{Definition of file-attributes})."
msgstr ""

#. type: defun
#: files.texi.orig:2615
#, no-wrap
msgid "file-expand-wildcards pattern &optional full"
msgstr ""

#. type: defun
#: files.texi.orig:2618
msgid "This function expands the wildcard pattern @var{pattern}, returning a list of file names that match it."
msgstr ""

#. type: defun
#: files.texi.orig:2621
msgid "If @var{pattern} is written as an absolute file name, the values are absolute also."
msgstr ""

#. type: defun
#: files.texi.orig:2626
msgid "If @var{pattern} is written as a relative file name, it is interpreted relative to the current default directory.  The file names returned are normally also relative to the current default directory.  However, if @var{full} is non-@code{nil}, they are absolute."
msgstr ""

#. type: defun
#: files.texi.orig:2628
#, no-wrap
msgid "insert-directory file switches &optional wildcard full-directory-p"
msgstr ""

#. type: defun
#: files.texi.orig:2634
msgid "This function inserts (in the current buffer) a directory listing for directory @var{file}, formatted with @code{ls} according to @var{switches}.  It leaves point after the inserted text.  @var{switches} may be a string of options, or a list of strings representing individual options."
msgstr ""

#. type: defun
#: files.texi.orig:2639
msgid "The argument @var{file} may be either a directory name or a file specification including wildcard characters.  If @var{wildcard} is non-@code{nil}, that means treat @var{file} as a file specification with wildcards."
msgstr ""

#. type: defun
#: files.texi.orig:2646
msgid "If @var{full-directory-p} is non-@code{nil}, that means the directory listing is expected to show the full contents of a directory.  You should specify @code{t} when @var{file} is a directory and switches do not contain @samp{-d}.  (The @samp{-d} option to @code{ls} says to describe a directory itself as a file, rather than showing its contents.)"
msgstr ""

#. type: defun
#: files.texi.orig:2651
msgid "On most systems, this function works by running a directory listing program whose name is in the variable @code{insert-directory-program}.  If @var{wildcard} is non-@code{nil}, it also runs the shell specified by @code{shell-file-name}, to expand the wildcards."
msgstr ""

#. type: defun
#: files.texi.orig:2655
msgid "MS-DOS and MS-Windows systems usually lack the standard Unix program @code{ls}, so this function emulates the standard Unix program @code{ls} with Lisp code."
msgstr ""

#. type: defun
#: files.texi.orig:2661
msgid "As a technical detail, when @var{switches} contains the long @samp{--dired} option, @code{insert-directory} treats it specially, for the sake of dired.  However, the normally equivalent short @samp{-D} option is just passed on to @code{insert-directory-program}, as any other option."
msgstr ""

#. type: defvar
#: files.texi.orig:2663
#, no-wrap
msgid "insert-directory-program"
msgstr ""

#. type: defvar
#: files.texi.orig:2667
msgid "This variable's value is the program to run to generate a directory listing for the function @code{insert-directory}.  It is ignored on systems which generate the listing with Lisp code."
msgstr ""

#. type: section
#: files.texi.orig:2670
#, no-wrap
msgid "Creating, Copying and Deleting Directories"
msgstr ""

#. type: cindex
#: files.texi.orig:2671
#, no-wrap
msgid "creating, copying and deleting directories"
msgstr ""

#. type: Plain text
#: files.texi.orig:2678
msgid "Most Emacs Lisp file-manipulation functions get errors when used on files that are directories.  For example, you cannot delete a directory with @code{delete-file}.  These special functions exist to create and delete directories."
msgstr ""

#. type: findex
#: files.texi.orig:2679
#, no-wrap
msgid "mkdir"
msgstr ""

#. type: deffn
#: files.texi.orig:2680
#, no-wrap
msgid "Command make-directory dirname &optional parents"
msgstr ""

#. type: deffn
#: files.texi.orig:2685
msgid "This command creates a directory named @var{dirname}.  If @var{parents} is non-@code{nil}, as is always the case in an interactive call, that means to create the parent directories first, if they don't already exist."
msgstr ""

#. type: deffn
#: files.texi.orig:2687
msgid "@code{mkdir} is an alias for this."
msgstr ""

#. type: deffn
#: files.texi.orig:2689
#, no-wrap
msgid "Command copy-directory dirname newname &optional keep-time parents copy-contents"
msgstr ""

#. type: deffn
#: files.texi.orig:2693
msgid "This command copies the directory named @var{dirname} to @var{newname}.  If @var{newname} names an existing directory, @var{dirname} will be copied to a subdirectory there."
msgstr ""

#. type: deffn
#: files.texi.orig:2696
msgid "It always sets the file modes of the copied files to match the corresponding original file."
msgstr ""

#. type: deffn
#: files.texi.orig:2700
msgid "The third argument @var{keep-time} non-@code{nil} means to preserve the modification time of the copied files.  A prefix arg makes @var{keep-time} non-@code{nil}."
msgstr ""

#. type: deffn
#: files.texi.orig:2704
msgid "The fourth argument @var{parents} says whether to create parent directories if they don't exist.  Interactively, this happens by default."
msgstr ""

#. type: deffn
#: files.texi.orig:2709
msgid "The fifth argument @var{copy-contents}, if non-@code{nil}, means to copy the contents of @var{dirname} directly into @var{newname} if the latter is an existing directory, instead of copying @var{dirname} into it as a subdirectory."
msgstr ""

#. type: deffn
#: files.texi.orig:2713
#, no-wrap
msgid "Command delete-directory dirname &optional recursive trash"
msgstr ""

#. type: deffn
#: files.texi.orig:2719
msgid "This command deletes the directory named @var{dirname}.  The function @code{delete-file} does not work for files that are directories; you must use @code{delete-directory} for them.  If @var{recursive} is @code{nil}, and the directory contains any files, @code{delete-directory} signals an error."
msgstr ""

#. type: deffn
#: files.texi.orig:2722
msgid "@code{delete-directory} only follows symbolic links at the level of parent directories."
msgstr ""

#. type: section
#: files.texi.orig:2732
#, no-wrap
msgid "Making Certain File Names ``Magic''"
msgstr ""

#. type: cindex
#: files.texi.orig:2733
#, no-wrap
msgid "magic file names"
msgstr ""

#. type: Plain text
#: files.texi.orig:2739
msgid "You can implement special handling for certain file names.  This is called making those names @dfn{magic}.  The principal use for this feature is in implementing access to remote files (@pxref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: Plain text
#: files.texi.orig:2744
msgid "To define a kind of magic file name, you must supply a regular expression to define the class of names (all those that match the regular expression), plus a handler that implements all the primitive Emacs file operations for file names that match."
msgstr ""

#. type: cindex
#: files.texi.orig:2745
#, no-wrap
msgid "file handler"
msgstr ""

#. type: vindex
#: files.texi.orig:2746
#, no-wrap
msgid "file-name-handler-alist"
msgstr ""

#. type: Plain text
#: files.texi.orig:2750
msgid "The variable @code{file-name-handler-alist} holds a list of handlers, together with regular expressions that determine when to apply each handler.  Each element has this form:"
msgstr ""

#. type: example
#: files.texi.orig:2753
#, no-wrap
msgid "(@var{regexp} . @var{handler})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2760
msgid "All the Emacs primitives for file access and file name transformation check the given file name against @code{file-name-handler-alist}.  If the file name matches @var{regexp}, the primitives handle that file by calling @var{handler}."
msgstr ""

#. type: Plain text
#: files.texi.orig:2765
msgid "The first argument given to @var{handler} is the name of the primitive, as a symbol; the remaining arguments are the arguments that were passed to that primitive.  (The first of these arguments is most often the file name itself.)  For example, if you do this:"
msgstr ""

#. type: example
#: files.texi.orig:2768
#, no-wrap
msgid "(file-exists-p @var{filename})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2773
msgid "and @var{filename} has handler @var{handler}, then @var{handler} is called like this:"
msgstr ""

#. type: example
#: files.texi.orig:2776
#, no-wrap
msgid "(funcall @var{handler} 'file-exists-p @var{filename})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2781
msgid "When a function takes two or more arguments that must be file names, it checks each of those names for a handler.  For example, if you do this:"
msgstr ""

#. type: example
#: files.texi.orig:2784
#, no-wrap
msgid "(expand-file-name @var{filename} @var{dirname})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2790
msgid "then it checks for a handler for @var{filename} and then for a handler for @var{dirname}.  In either case, the @var{handler} is called like this:"
msgstr ""

#. type: example
#: files.texi.orig:2793
#, no-wrap
msgid "(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2798
msgid "The @var{handler} then needs to figure out whether to handle @var{filename} or @var{dirname}."
msgstr ""

#. type: Plain text
#: files.texi.orig:2803
msgid "If the specified file name matches more than one handler, the one whose match starts last in the file name gets precedence.  This rule is chosen so that handlers for jobs such as uncompression are handled first, before handlers for jobs such as remote file access."
msgstr ""

#. type: Plain text
#: files.texi.orig:2805
msgid "Here are the operations that a magic file name handler gets to handle:"
msgstr ""

#. type: ifnottex
#: files.texi.orig:2857
msgid "@code{access-file}, @code{add-name-to-file}, @code{byte-compiler-base-file-name},@* @code{copy-directory}, @code{copy-file}, @code{delete-directory}, @code{delete-file}, @code{diff-latest-backup-file}, @code{directory-file-name}, @code{directory-files}, @code{directory-files-and-attributes}, @code{dired-compress-file}, @code{dired-uncache},@* @code{expand-file-name}, @code{file-accessible-directory-p}, @code{file-acl}, @code{file-attributes}, @code{file-directory-p}, @code{file-equal-p}, @code{file-executable-p}, @code{file-exists-p}, @code{file-in-directory-p}, @code{file-local-copy}, @code{file-modes}, @code{file-name-all-completions}, @code{file-name-as-directory}, @code{file-name-completion}, @code{file-name-directory}, @code{file-name-nondirectory}, @code{file-name-sans-versions}, @code{file-newer-than-file-p}, @code{file-notify-add-watch}, @code{file-notify-rm-watch}, @code{file-ownership-preserved-p}, @code{file-readable-p}, @code{file-regular-p}, @code{file-remote-p}, @code{file-selinux-context}, @code{file-symlink-p}, @code{file-truename}, @code{file-writable-p}, @code{find-backup-file-name}, @code{get-file-buffer}, @code{insert-directory}, @code{insert-file-contents},@* @code{load}, @code{make-auto-save-file-name}, @code{make-directory}, @code{make-directory-internal}, @code{make-symbolic-link},@* @code{process-file}, @code{rename-file}, @code{set-file-acl}, @code{set-file-modes}, @code{set-file-selinux-context}, @code{set-file-times}, @code{set-visited-file-modtime}, @code{shell-command}, @code{start-file-process}, @code{substitute-in-file-name},@* @code{unhandled-file-name-directory}, @code{vc-registered}, @code{verify-visited-file-modtime},@* @code{write-region}."
msgstr ""

#. type: flushleft
#: files.texi.orig:2910
#, no-wrap
msgid ""
"@code{access-file}, @code{add-name-to-file},\n"
"@code{byte-com@discretionary{}{}{}piler-base-file-name},\n"
"@code{copy-directory}, @code{copy-file},\n"
"@code{delete-directory}, @code{delete-file},\n"
"@code{diff-latest-backup-file},\n"
"@code{directory-file-name},\n"
"@code{directory-files},\n"
"@code{directory-files-and-at@discretionary{}{}{}tributes},\n"
"@code{dired-compress-file}, @code{dired-uncache},\n"
"@code{expand-file-name},\n"
"@code{file-accessible-direc@discretionary{}{}{}tory-p},\n"
"@code{file-acl},\n"
"@code{file-attributes},\n"
"@code{file-direc@discretionary{}{}{}tory-p},\n"
"@code{file-equal-p},\n"
"@code{file-executable-p}, @code{file-exists-p},\n"
"@code{file-in-directory-p},\n"
"@code{file-local-copy},\n"
"@code{file-modes}, @code{file-name-all-completions},\n"
"@code{file-name-as-directory},\n"
"@code{file-name-completion},\n"
"@code{file-name-directory},\n"
"@code{file-name-nondirec@discretionary{}{}{}tory},\n"
"@code{file-name-sans-versions}, @code{file-newer-than-file-p},\n"
"@code{file-notify-add-watch}, @code{file-notify-rm-watch},\n"
"@code{file-ownership-pre@discretionary{}{}{}served-p},\n"
"@code{file-readable-p}, @code{file-regular-p},\n"
"@code{file-remote-p}, @code{file-selinux-context},\n"
"@code{file-symlink-p}, @code{file-truename}, @code{file-writable-p},\n"
"@code{find-backup-file-name},\n"
"@code{get-file-buffer},\n"
"@code{insert-directory},\n"
"@code{insert-file-contents},\n"
"@code{load},\n"
"@code{make-auto-save-file-name},\n"
"@code{make-direc@discretionary{}{}{}tory},\n"
"@code{make-direc@discretionary{}{}{}tory-internal},\n"
"@code{make-symbolic-link},\n"
"@code{process-file},\n"
"@code{rename-file}, @code{set-file-acl}, @code{set-file-modes},\n"
"@code{set-file-selinux-context}, @code{set-file-times},\n"
"@code{set-visited-file-modtime}, @code{shell-command},\n"
"@code{start-file-process},\n"
"@code{substitute-in-file-name},\n"
"@code{unhandled-file-name-directory},\n"
"@code{vc-regis@discretionary{}{}{}tered},\n"
"@code{verify-visited-file-modtime},\n"
"@code{write-region}.\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2917
msgid "Handlers for @code{insert-file-contents} typically need to clear the buffer's modified flag, with @code{(set-buffer-modified-p nil)}, if the @var{visit} argument is non-@code{nil}.  This also has the effect of unlocking the buffer if it is locked."
msgstr ""

#. type: Plain text
#: files.texi.orig:2924
msgid "The handler function must handle all of the above operations, and possibly others to be added in the future.  It need not implement all these operations itself---when it has nothing special to do for a certain operation, it can reinvoke the primitive, to handle the operation ``in the usual way''.  It should always reinvoke the primitive for an operation it does not recognize.  Here's one way to do this:"
msgstr ""

#. type: smallexample
#: files.texi.orig:2939
#, no-wrap
msgid ""
"(defun my-file-handler (operation &rest args)\n"
"  ;; @r{First check for the specific operations}\n"
"  ;; @r{that we have special handling for.}\n"
"  (cond ((eq operation 'insert-file-contents) @dots{})\n"
"        ((eq operation 'write-region) @dots{})\n"
"        @dots{}\n"
"        ;; @r{Handle any operation we don't know about.}\n"
"        (t (let ((inhibit-file-name-handlers\n"
"                  (cons 'my-file-handler\n"
"                        (and (eq inhibit-file-name-operation operation)\n"
"                             inhibit-file-name-handlers)))\n"
"                 (inhibit-file-name-operation operation))\n"
"             (apply operation args)))))\n"
msgstr ""

#. type: Plain text
#: files.texi.orig:2950
msgid "When a handler function decides to call the ordinary Emacs primitive for the operation at hand, it needs to prevent the primitive from calling the same handler once again, thus leading to an infinite recursion.  The example above shows how to do this, with the variables @code{inhibit-file-name-handlers} and @code{inhibit-file-name-operation}.  Be careful to use them exactly as shown above; the details are crucial for proper behavior in the case of multiple handlers, and for operations that have two file names that may each have handlers."
msgstr ""

#. type: kindex
#: files.texi.orig:2951
#, no-wrap
msgid "safe-magic (@r{property})"
msgstr ""

#. type: Plain text
#: files.texi.orig:2960
msgid "Handlers that don't really do anything special for actual access to the file---such as the ones that implement completion of host names for remote file names---should have a non-@code{nil} @code{safe-magic} property.  For instance, Emacs normally ``protects'' directory names it finds in @code{PATH} from becoming magic, if they look like magic file names, by prefixing them with @samp{/:}.  But if the handler that would be used for them has a non-@code{nil} @code{safe-magic} property, the @samp{/:} is not added."
msgstr ""

#. type: kindex
#: files.texi.orig:2961
#, no-wrap
msgid "operations (@r{property})"
msgstr ""

#. type: Plain text
#: files.texi.orig:2969
msgid "A file name handler can have an @code{operations} property to declare which operations it handles in a nontrivial way.  If this property has a non-@code{nil} value, it should be a list of operations; then only those operations will call the handler.  This avoids inefficiency, but its main purpose is for autoloaded handler functions, so that they won't be loaded except when they have real work to do."
msgstr ""

#. type: Plain text
#: files.texi.orig:2977
msgid "Simply deferring all operations to the usual primitives does not work.  For instance, if the file name handler applies to @code{file-exists-p}, then it must handle @code{load} itself, because the usual @code{load} code won't work properly in that case.  However, if the handler uses the @code{operations} property to say it doesn't handle @code{file-exists-p}, then it need not handle @code{load} nontrivially."
msgstr ""

#. type: defvar
#: files.texi.orig:2978
#, no-wrap
msgid "inhibit-file-name-handlers"
msgstr ""

#. type: defvar
#: files.texi.orig:2981
msgid "This variable holds a list of handlers whose use is presently inhibited for a certain operation."
msgstr ""

#. type: defvar
#: files.texi.orig:2983
#, no-wrap
msgid "inhibit-file-name-operation"
msgstr ""

#. type: defvar
#: files.texi.orig:2985
msgid "The operation for which certain handlers are presently inhibited."
msgstr ""

#. type: defun
#: files.texi.orig:2987
#, no-wrap
msgid "find-file-name-handler file operation"
msgstr ""

#. type: defun
#: files.texi.orig:2995
msgid "This function returns the handler function for file name @var{file}, or @code{nil} if there is none.  The argument @var{operation} should be the operation to be performed on the file---the value you will pass to the handler as its first argument when you call it.  If @var{operation} equals @code{inhibit-file-name-operation}, or if it is not found in the @code{operations} property of the handler, this function returns @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:2997
#, no-wrap
msgid "file-local-copy filename"
msgstr ""

#. type: defun
#: files.texi.orig:3005
msgid "This function copies file @var{filename} to an ordinary non-magic file on the local machine, if it isn't on the local machine already.  Magic file names should handle the @code{file-local-copy} operation if they refer to files on other machines.  A magic file name that is used for other purposes than remote file access should not handle @code{file-local-copy}; then this function will treat the file as local."
msgstr ""

#. type: defun
#: files.texi.orig:3009
msgid "If @var{filename} is local, whether magic or not, this function does nothing and returns @code{nil}.  Otherwise it returns the file name of the local copy file."
msgstr ""

#. type: defun
#: files.texi.orig:3011
#, no-wrap
msgid "file-remote-p filename &optional identification connected"
msgstr ""

#. type: defun
#: files.texi.orig:3016
msgid "This function tests whether @var{filename} is a remote file.  If @var{filename} is local (not remote), the return value is @code{nil}.  If @var{filename} is indeed remote, the return value is a string that identifies the remote system."
msgstr ""

#. type: defun
#: files.texi.orig:3021
msgid "This identifier string can include a host name and a user name, as well as characters designating the method used to access the remote system.  For example, the remote identifier string for the filename @code{/sudo::/some/file} is @code{/sudo:root@@localhost:}."
msgstr ""

#. type: defun
#: files.texi.orig:3028
msgid "If @code{file-remote-p} returns the same identifier for two different filenames, that means they are stored on the same file system and can be accessed locally with respect to each other.  This means, for example, that it is possible to start a remote process accessing both files at the same time.  Implementers of file handlers need to ensure this principle is valid."
msgstr ""

#. type: defun
#: files.texi.orig:3035
msgid "@var{identification} specifies which part of the identifier shall be returned as string.  @var{identification} can be the symbol @code{method}, @code{user} or @code{host}; any other value is handled like @code{nil} and means to return the complete identifier string.  In the example above, the remote @code{user} identifier string would be @code{root}."
msgstr ""

#. type: defun
#: files.texi.orig:3040
msgid "If @var{connected} is non-@code{nil}, this function returns @code{nil} even if @var{filename} is remote, if Emacs has no network connection to its host.  This is useful when you want to avoid the delay of making connections when they don't exist."
msgstr ""

#. type: defun
#: files.texi.orig:3042
#, no-wrap
msgid "unhandled-file-name-directory filename"
msgstr ""

#. type: defun
#: files.texi.orig:3049
msgid "This function returns the name of a directory that is not magic.  It uses the directory part of @var{filename} if that is not magic.  For a magic file name, it invokes the file name handler, which therefore decides what value to return.  If @var{filename} is not accessible from a local process, then the file name handler should indicate it by returning @code{nil}."
msgstr ""

#. type: defun
#: files.texi.orig:3053
msgid "This is useful for running a subprocess; every subprocess must have a non-magic directory to serve as its current directory, and this function is a good way to come up with one."
msgstr ""

#. type: defopt
#: files.texi.orig:3055
#, no-wrap
msgid "remote-file-name-inhibit-cache"
msgstr ""

#. type: defopt
#: files.texi.orig:3059
msgid "The attributes of remote files can be cached for better performance.  If they are changed outside of Emacs's control, the cached values become invalid, and must be reread."
msgstr ""

#. type: defopt
#: files.texi.orig:3065
msgid "When this variable is set to @code{nil}, cached values are never expired.  Use this setting with caution, only if you are sure nothing other than Emacs ever changes the remote files.  If it is set to @code{t}, cached values are never used.  This is the safest value, but could result in performance degradation."
msgstr ""

#. type: defopt
#: files.texi.orig:3071
msgid "A compromise is to set it to a positive number.  This means that cached values are used for that amount of seconds since they were cached.  If a remote file is checked regularly, it might be a good idea to let-bind this variable to a value less than the time period between consecutive checks.  For example:"
msgstr ""

#. type: example
#: files.texi.orig:3079
#, no-wrap
msgid ""
"(defun display-time-file-nonempty-p (file)\n"
"  (let ((remote-file-name-inhibit-cache\n"
"         (- display-time-interval 5)))\n"
"    (and (file-exists-p file)\n"
"         (< 0 (nth 7 (file-attributes\n"
"                       (file-chase-links file)))))))\n"
msgstr ""

#. type: section
#: files.texi.orig:3083
#, no-wrap
msgid "File Format Conversion"
msgstr ""

#. type: cindex
#: files.texi.orig:3085
#, no-wrap
msgid "file format conversion"
msgstr ""

#. type: cindex
#: files.texi.orig:3086
#, no-wrap
msgid "encoding file formats"
msgstr ""

#. type: cindex
#: files.texi.orig:3087
#, no-wrap
msgid "decoding file formats"
msgstr ""

#. type: cindex
#: files.texi.orig:3088
#, no-wrap
msgid "text properties in files"
msgstr ""

#. type: cindex
#: files.texi.orig:3089
#, no-wrap
msgid "saving text properties"
msgstr ""

#. type: Plain text
#: files.texi.orig:3096
msgid "Emacs performs several steps to convert the data in a buffer (text, text properties, and possibly other information) to and from a representation suitable for storing into a file.  This section describes the fundamental functions that perform this @dfn{format conversion}, namely @code{insert-file-contents} for reading a file into a buffer, and @code{write-region} for writing a buffer into a file."
msgstr ""

#. type: menuentry
#: files.texi.orig:3101
msgid "Overview: Format Conversion Overview"
msgstr ""

#. type: menuentry
#: files.texi.orig:3101
msgid "@code{insert-file-contents} and @code{write-region}."
msgstr ""

#. type: menuentry
#: files.texi.orig:3101
msgid "Round-Trip: Format Conversion Round-Trip"
msgstr ""

#. type: menuentry
#: files.texi.orig:3101
msgid "Using @code{format-alist}."
msgstr ""

#. type: menuentry
#: files.texi.orig:3101
msgid "Piecemeal: Format Conversion Piecemeal"
msgstr ""

#. type: menuentry
#: files.texi.orig:3101
msgid "Specifying non-paired conversion."
msgstr ""

#. type: node
#: files.texi.orig:3103
#, no-wrap
msgid "Format Conversion Overview"
msgstr ""

#. type: subsection
#: files.texi.orig:3104
#, no-wrap
msgid "Overview"
msgstr ""

#. type: Plain text
#: files.texi.orig:3107
msgid "The function @code{insert-file-contents}:"
msgstr ""

#. type: item
#: files.texi.orig:3109
#, no-wrap
msgid "initially, inserts bytes from the file into the buffer;"
msgstr ""

#. type: item
#: files.texi.orig:3110
#, no-wrap
msgid "decodes bytes to characters as appropriate;"
msgstr ""

#. type: item
#: files.texi.orig:3111
#, no-wrap
msgid "processes formats as defined by entries in @code{format-alist}; and"
msgstr ""

#. type: item
#: files.texi.orig:3112
#, no-wrap
msgid "calls functions in @code{after-insert-file-functions}."
msgstr ""

#. type: Plain text
#: files.texi.orig:3117
msgid "The function @code{write-region}:"
msgstr ""

#. type: item
#: files.texi.orig:3119
#, no-wrap
msgid "initially, calls functions in @code{write-region-annotate-functions};"
msgstr ""

#. type: item
#: files.texi.orig:3120
#, no-wrap
msgid "processes formats as defined by entries in @code{format-alist};"
msgstr ""

#. type: item
#: files.texi.orig:3121
#, no-wrap
msgid "encodes characters to bytes as appropriate; and"
msgstr ""

#. type: item
#: files.texi.orig:3122
#, no-wrap
msgid "modifies the file with the bytes."
msgstr ""

#. type: Plain text
#: files.texi.orig:3130
msgid "This shows the symmetry of the lowest-level operations; reading and writing handle things in opposite order.  The rest of this section describes the two facilities surrounding the three variables named above, as well as some related functions.  @ref{Coding Systems}, for details on character encoding and decoding."
msgstr ""

#. type: node
#: files.texi.orig:3131
#, no-wrap
msgid "Format Conversion Round-Trip"
msgstr ""

#. type: subsection
#: files.texi.orig:3132
#, no-wrap
msgid "Round-Trip Specification"
msgstr ""

#. type: Plain text
#: files.texi.orig:3140
msgid "The most general of the two facilities is controlled by the variable @code{format-alist}, a list of @dfn{file format} specifications, which describe textual representations used in files for the data in an Emacs buffer.  The descriptions for reading and writing are paired, which is why we call this ``round-trip'' specification (@pxref{Format Conversion Piecemeal}, for non-paired specification)."
msgstr ""

#. type: defvar
#: files.texi.orig:3141
#, no-wrap
msgid "format-alist"
msgstr ""

#. type: defvar
#: files.texi.orig:3144
msgid "This list contains one format definition for each defined file format.  Each format definition is a list of this form:"
msgstr ""

#. type: example
#: files.texi.orig:3147
#, no-wrap
msgid "(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} @var{modify} @var{mode-fn} @var{preserve})\n"
msgstr ""

#. type: cindex
#: files.texi.orig:3150
#, no-wrap
msgid "format definition"
msgstr ""

#. type: Plain text
#: files.texi.orig:3153
msgid "Here is what the elements in a format definition mean:"
msgstr ""

#. type: item
#: files.texi.orig:3155
#, no-wrap
msgid "name"
msgstr ""

#. type: table
#: files.texi.orig:3157
msgid "The name of this format."
msgstr ""

#. type: item
#: files.texi.orig:3158
#, no-wrap
msgid "doc-string"
msgstr ""

#. type: table
#: files.texi.orig:3160
msgid "A documentation string for the format."
msgstr ""

#. type: item
#: files.texi.orig:3161
#, no-wrap
msgid "regexp"
msgstr ""

#. type: table
#: files.texi.orig:3164
msgid "A regular expression which is used to recognize files represented in this format.  If @code{nil}, the format is never applied automatically."
msgstr ""

#. type: item
#: files.texi.orig:3165
#, no-wrap
msgid "from-fn"
msgstr ""

#. type: table
#: files.texi.orig:3168
msgid "A shell command or function to decode data in this format (to convert file data into the usual Emacs data representation)."
msgstr ""

#. type: table
#: files.texi.orig:3171
msgid "A shell command is represented as a string; Emacs runs the command as a filter to perform the conversion."
msgstr ""

#. type: table
#: files.texi.orig:3177
msgid "If @var{from-fn} is a function, it is called with two arguments, @var{begin} and @var{end}, which specify the part of the buffer it should convert.  It should convert the text by editing it in place.  Since this can change the length of the text, @var{from-fn} should return the modified end position."
msgstr ""

#. type: table
#: files.texi.orig:3181
msgid "One responsibility of @var{from-fn} is to make sure that the beginning of the file no longer matches @var{regexp}.  Otherwise it is likely to get called again."
msgstr ""

#. type: item
#: files.texi.orig:3182
#, no-wrap
msgid "to-fn"
msgstr ""

#. type: table
#: files.texi.orig:3185
msgid "A shell command or function to encode data in this format---that is, to convert the usual Emacs data representation into this format."
msgstr ""

#. type: table
#: files.texi.orig:3188
msgid "If @var{to-fn} is a string, it is a shell command; Emacs runs the command as a filter to perform the conversion."
msgstr ""

#. type: table
#: files.texi.orig:3193
msgid "If @var{to-fn} is a function, it is called with three arguments: @var{begin} and @var{end}, which specify the part of the buffer it should convert, and @var{buffer}, which specifies which buffer.  There are two ways it can do the conversion:"
msgstr ""

#. type: itemize
#: files.texi.orig:3198
msgid "By editing the buffer in place.  In this case, @var{to-fn} should return the end-position of the range of text, as modified."
msgstr ""

#. type: itemize
#: files.texi.orig:3205
msgid "By returning a list of annotations.  This is a list of elements of the form @code{(@var{position} . @var{string})}, where @var{position} is an integer specifying the relative position in the text to be written, and @var{string} is the annotation to add there.  The list must be sorted in order of position when @var{to-fn} returns it."
msgstr ""

#. type: itemize
#: files.texi.orig:3209
msgid "When @code{write-region} actually writes the text from the buffer to the file, it intermixes the specified annotations at the corresponding positions.  All this takes place without modifying the buffer."
msgstr ""

#. type: item
#: files.texi.orig:3211
#, no-wrap
msgid "modify"
msgstr ""

#. type: table
#: files.texi.orig:3214
msgid "A flag, @code{t} if the encoding function modifies the buffer, and @code{nil} if it works by returning a list of annotations."
msgstr ""

#. type: item
#: files.texi.orig:3215
#, no-wrap
msgid "mode-fn"
msgstr ""

#. type: table
#: files.texi.orig:3219
msgid "A minor-mode function to call after visiting a file converted from this format.  The function is called with one argument, the integer 1; that tells a minor-mode function to enable the mode."
msgstr ""

#. type: item
#: files.texi.orig:3220
#, no-wrap
msgid "preserve"
msgstr ""

#. type: table
#: files.texi.orig:3223
msgid "A flag, @code{t} if @code{format-write-file} should not remove this format from @code{buffer-file-format}."
msgstr ""

#. type: Plain text
#: files.texi.orig:3231
msgid "The function @code{insert-file-contents} automatically recognizes file formats when it reads the specified file.  It checks the text of the beginning of the file against the regular expressions of the format definitions, and if it finds a match, it calls the decoding function for that format.  Then it checks all the known formats over again.  It keeps checking them until none of them is applicable."
msgstr ""

#. type: Plain text
#: files.texi.orig:3237
msgid "Visiting a file, with @code{find-file-noselect} or the commands that use it, performs conversion likewise (because it calls @code{insert-file-contents}); it also calls the mode function for each format that it decodes.  It stores a list of the format names in the buffer-local variable @code{buffer-file-format}."
msgstr ""

#. type: defvar
#: files.texi.orig:3238
#, no-wrap
msgid "buffer-file-format"
msgstr ""

#. type: defvar
#: files.texi.orig:3243
msgid "This variable states the format of the visited file.  More precisely, this is a list of the file format names that were decoded in the course of visiting the current buffer's file.  It is always buffer-local in all buffers."
msgstr ""

#. type: Plain text
#: files.texi.orig:3248
msgid "When @code{write-region} writes data into a file, it first calls the encoding functions for the formats listed in @code{buffer-file-format}, in the order of appearance in the list."
msgstr ""

#. type: deffn
#: files.texi.orig:3249
#, no-wrap
msgid "Command format-write-file file format &optional confirm"
msgstr ""

#. type: deffn
#: files.texi.orig:3261
msgid "This command writes the current buffer contents into the file @var{file} in a format based on @var{format}, which is a list of format names.  It constructs the actual format starting from @var{format}, then appending any elements from the value of @code{buffer-file-format} with a non-@code{nil} @var{preserve} flag (see above), if they are not already present in @var{format}.  It then updates @code{buffer-file-format} with this format, making it the default for future saves.  Except for the @var{format} argument, this command is similar to @code{write-file}.  In particular, @var{confirm} has the same meaning and interactive treatment as the corresponding argument to @code{write-file}.  @xref{Definition of write-file}."
msgstr ""

#. type: deffn
#: files.texi.orig:3263
#, no-wrap
msgid "Command format-find-file file format"
msgstr ""

#. type: deffn
#: files.texi.orig:3267
msgid "This command finds the file @var{file}, converting it according to format @var{format}.  It also makes @var{format} the default if the buffer is saved later."
msgstr ""

#. type: deffn
#: files.texi.orig:3271 files.texi.orig:3286
msgid "The argument @var{format} is a list of format names.  If @var{format} is @code{nil}, no conversion takes place.  Interactively, typing just @key{RET} for @var{format} specifies @code{nil}."
msgstr ""

#. type: deffn
#: files.texi.orig:3273
#, no-wrap
msgid "Command format-insert-file file format &optional beg end"
msgstr ""

#. type: deffn
#: files.texi.orig:3278
msgid "This command inserts the contents of file @var{file}, converting it according to format @var{format}.  If @var{beg} and @var{end} are non-@code{nil}, they specify which part of the file to read, as in @code{insert-file-contents} (@pxref{Reading from Files})."
msgstr ""

#. type: deffn
#: files.texi.orig:3282
msgid "The return value is like what @code{insert-file-contents} returns: a list of the absolute file name and the length of the data inserted (after conversion)."
msgstr ""

#. type: defvar
#: files.texi.orig:3288
#, no-wrap
msgid "buffer-auto-save-file-format"
msgstr ""

#. type: defvar
#: files.texi.orig:3296
msgid "This variable specifies the format to use for auto-saving.  Its value is a list of format names, just like the value of @code{buffer-file-format}; however, it is used instead of @code{buffer-file-format} for writing auto-save files.  If the value is @code{t}, the default, auto-saving uses the same format as a regular save in the same buffer.  This variable is always buffer-local in all buffers."
msgstr ""

#. type: node
#: files.texi.orig:3298
#, no-wrap
msgid "Format Conversion Piecemeal"
msgstr ""

#. type: subsection
#: files.texi.orig:3299
#, no-wrap
msgid "Piecemeal Specification"
msgstr ""

#. type: Plain text
#: files.texi.orig:3305
msgid "In contrast to the round-trip specification described in the previous subsection (@pxref{Format Conversion Round-Trip}), you can use the variables @code{after-insert-file-functions} and @code{write-region-annotate-functions} to separately control the respective reading and writing conversions."
msgstr ""

#. type: Plain text
#: files.texi.orig:3311
msgid "Conversion starts with one representation and produces another representation.  When there is only one conversion to do, there is no conflict about what to start with.  However, when there are multiple conversions involved, conflict may arise when two conversions need to start with the same data."
msgstr ""

#. type: Plain text
#: files.texi.orig:3319
msgid "This situation is best understood in the context of converting text properties during @code{write-region}.  For example, the character at position 42 in a buffer is @samp{X} with a text property @code{foo}.  If the conversion for @code{foo} is done by inserting into the buffer, say, @samp{FOO:}, then that changes the character at position 42 from @samp{X} to @samp{F}.  The next conversion will start with the wrong data straight away."
msgstr ""

#. type: Plain text
#: files.texi.orig:3324
msgid "To avoid conflict, cooperative conversions do not modify the buffer, but instead specify @dfn{annotations}, a list of elements of the form @code{(@var{position} . @var{string})}, sorted in order of increasing @var{position}."
msgstr ""

#. type: Plain text
#: files.texi.orig:3330
msgid "If there is more than one conversion, @code{write-region} merges their annotations destructively into one sorted list.  Later, when the text from the buffer is actually written to the file, it intermixes the specified annotations at the corresponding positions.  All this takes place without modifying the buffer."
msgstr ""

#. type: Plain text
#: files.texi.orig:3346
msgid "In contrast, when reading, the annotations intermixed with the text are handled immediately.  @code{insert-file-contents} sets point to the beginning of some text to be converted, then calls the conversion functions with the length of that text.  These functions should always return with point at the beginning of the inserted text.  This approach makes sense for reading because annotations removed by the first converter can't be mistakenly processed by a later converter.  Each conversion function should scan for the annotations it recognizes, remove the annotation, modify the buffer text (to set a text property, for example), and return the updated length of the text, as it stands after those changes.  The value returned by one function becomes the argument to the next function."
msgstr ""

#. type: defvar
#: files.texi.orig:3347
#, no-wrap
msgid "write-region-annotate-functions"
msgstr ""

#. type: defvar
#: files.texi.orig:3352
msgid "A list of functions for @code{write-region} to call.  Each function in the list is called with two arguments: the start and end of the region to be written.  These functions should not alter the contents of the buffer.  Instead, they should return annotations."
msgstr ""

#. type: defvar
#: files.texi.orig:3360
msgid "As a special case, a function may return with a different buffer current.  Emacs takes this to mean that the current buffer contains altered text to be output.  It therefore changes the @var{start} and @var{end} arguments of the @code{write-region} call, giving them the values of @code{point-min} and @code{point-max} in the new buffer, respectively.  It also discards all previous annotations, because they should have been dealt with by this function."
msgstr ""

#. type: defvar
#: files.texi.orig:3362
#, no-wrap
msgid "write-region-post-annotation-function"
msgstr ""

#. type: defvar
#: files.texi.orig:3366
msgid "The value of this variable, if non-@code{nil}, should be a function.  This function is called, with no arguments, after @code{write-region} has completed."
msgstr ""

#. type: defvar
#: files.texi.orig:3372
msgid "If any function in @code{write-region-annotate-functions} returns with a different buffer current, Emacs calls @code{write-region-post-annotation-function} more than once.  Emacs calls it with the last buffer that was current, and again with the buffer before that, and so on back to the original buffer."
msgstr ""

#. type: defvar
#: files.texi.orig:3377
msgid "Thus, a function in @code{write-region-annotate-functions} can create a buffer, give this variable the local value of @code{kill-buffer} in that buffer, set up the buffer with altered text, and make the buffer current.  The buffer will be killed after @code{write-region} is done."
msgstr ""

#. type: defvar
#: files.texi.orig:3379
#, no-wrap
msgid "after-insert-file-functions"
msgstr ""

#. type: defvar
#: files.texi.orig:3387
msgid "Each function in this list is called by @code{insert-file-contents} with one argument, the number of characters inserted, and with point at the beginning of the inserted text.  Each function should leave point unchanged, and return the new character count describing the inserted text as modified by the function."
msgstr ""

#. type: Plain text
#: files.texi.orig:3393
msgid "We invite users to write Lisp programs to store and retrieve text properties in files, using these hooks, and thus to experiment with various data formats and find good ones.  Eventually we hope users will produce good, general extensions we can install in Emacs."
msgstr ""

#. type: Plain text
#: files.texi.orig:3397
msgid "We suggest not trying to handle arbitrary Lisp objects as text property names or values---because a program that general is probably difficult to write, and slow.  Instead, choose a set of possible data types that are reasonably flexible, and not too hard to encode."
msgstr ""
