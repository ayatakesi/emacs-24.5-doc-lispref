@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Frames
@chapter Frames
@cindex frame

  @dfn{フレーム(frame)}とは、1つ以上のEmacsウィンドウを含むスクリーンオブジェクトです(@ref{Windows}を参照)。これは、グラフィカル環境では``ウィンドウ''と呼ばれる類のオブジェクトです。しかし、Emacsはこの単語を異なる方法で使用しているので、ここではそれを``ウィンドウ''と呼ぶことはできません。Emacs
Lispにおいて@dfn{フレームオブジェクト(frame
object)}とは、スクリーン上のフレームを表すLispオブジェクトです。@ref{Frame Type}を参照してください。

  フレームには最初、1つのメインウィンドウおよび/またはミニバッファーウィンドウが含まれます。メインウィンドウは、より小さいウィンドウに垂直、または水平に分割することができます。@ref{Splitting
Windows}を参照してください。

@cindex terminal
  @dfn{端末(terminal)}とは、1つ以上のEmacsフレームを表示する能力のあるデバイスのことです。Emacs
Lispにおいて、@dfn{端末オブジェクト(terminal object)}とは端末を表すLispオブジェクトです。@ref{Terminal
Type}を参照してください。

@cindex text terminal
@cindex graphical terminal
@cindex graphical display
  端末には@dfn{テキスト端末(text terminals)}と@dfn{グラフィカル端末(graphical
terminals)}という、2つのクラスがあります。テキスト端末はグラフィック能力をもたないディスプレイで、@command{xterm}やその他の端末エミュレーターが含まれます。テキスト端末上では、それぞれのEmacsフレームは、その端末のスクリーン全体を占有します。たとえ追加のフレームを作成してそれらを切り替えることができたとしても、端末が表示するのは一度に1つのフレームだけです。一方でグラフィカル端末は、X
Window
Systemのようなグラフィカルディスプレイシステムにより管理されています。これにより、Emacsは同一ディスプレイ上に複数のフレームを同時に表示することができます。

  GNUおよびUnix
systemsシステムでは、単一のEmacsセッション内で、そのEmacsがテキスト端末とグラフィカル端末のいずれで開始されたかに関わらず、任意の利用可能な端末上で、追加のフレームを作成することができます。Emacsは、グラフィカル端末とテキスト端末の両方を、同時に表示することができます。
これはたとえば、リモート地から同じセッションに接続する際などに便利でしょう。@ref{Multiple Terminals}を参照してください。

@defun framep object
この述語(predicate)は、@var{object}がフレームなら非@code{nil}、それ以外は@code{nil}をリターンする。フレームにたいしては、フレームが使用するディスプレイの種類の値となる:

@table @code
@item t
そのフレームはテキスト端末上で表示されている。
@item x
そのフレームはXグラフィカル端末上で表示されている。
@item w32
そのフレームはMS-Windowsグラフィカル端末上で表示されている。
@item ns
そのフレームはGNUStepまたはMacintosh Cocoaグラフィカル端末上で表示されている。
@item pc
そのフレームはMS-DOS端末上で表示されている。
@end table
@end defun

@defun frame-terminal &optional frame
この関数は、@var{frame}を表示する端末オブジェクトをリターンする。@var{frame}が@code{nil}または未指定の場合のデフォルトは、選択されたフレームである。
@end defun

@defun terminal-live-p object
この述語は、@var{object}が生きた(削除されていない)端末なら非@code{nil}、それ以外は@code{nil}をリターンする。生きた端末にたいしては、リターン値はその端末上で表示されているフレームの種類を示す。可能な値は、上述の@code{framep}と同様。
@end defun

@menu
* Creating Frames::          追加のフレームの作成。
* Multiple Terminals::       異なる複数デバイス上での表示。
* Frame Parameters::         フレームのサイズ、位置、フォント等の制御。
* Terminal Parameters::      端末上のすべてのフレームにたいして一般的なパラメーター。
* Frame Titles::             フレームタイトルの自動的な更新。
* Deleting Frames::          明示的に削除されるまでフレームは存続する。
* Finding All Frames::       すべての既存フレームを調べる方法。
* Minibuffers and Frames::   フレームが使用するミニバッファーを見つける方法。
* Input Focus::              選択されたフレームの指定。
* Visibility of Frames::     フレームは可視、不可視、またはアイコン化されているかもしれない。
* Raising and Lowering::     フレームを前面に移動して他のウィンドウを隠し、背面に移動して他のウィンドウがフレームを隠す。
* Frame Configurations::     すべてのフレームの状態の保存。
* Mouse Tracking::           マウス移動時のイベントの取得。
* Mouse Position::           マウスの場所や移動を問い合わせる。
* Pop-Up Menus::             ユーザーに選択させるためのメニューの表示。
* Dialog Boxes::             yes/noを問い合わせるためのボックスの表示。
* Pointer Shape::            マウスポインターのシェイプの指定。
* Window System Selections::  他のXクライアントとのテキストの転送。
* Drag and Drop::            ドラッグアンドドロップの実装の内部。
* Color Names::              カラー名定義の取得。
* Text Terminal Colors::     テキスト端末のカラーの定義。
* Resources::                サーバーからのリソース値の取得。
* Display Feature Testing::  端末の機能の判定。
@end menu

@node Creating Frames
@section Creating Frames
@cindex frame creation

新たにフレームを作成するためには、関数@code{make-frame}を呼び出します。

@deffn Command make-frame &optional alist
この関数は、カレントバッファーを表示するフレームを作成して、それをリターンする。

@var{alist}引数は、新たなフレームのフレームパラメーターを指定するalistである。@ref{Frame
Parameters}を参照のこと。@var{alist}内で@code{terminal}パラメーターを指定した場合、新たなフレームはその端末上で作成される。それ以外の場合、@var{alist}内で@code{window-system}フレームパラメーターを指定した場合、それはフレームがテキスト端末とグラフィカル端末のどちらで表示されるべきかを決定する。@ref{Window
Systems}を参照のこと。どちらも指定されない場合、新たなフレームは選択されたフレームと同じ端末上に作成される。

@var{alist}で指定されなかったパラメーターのデフォルトは、alist
@code{default-frame-alist}内の値となる。そこでも指定されないパラメーターのデフォルトは、Xリソース、またはそのオペレーティングシステムで同等のものの値となる(@ref{X
Resources,, X Resources, emacs, The GNU Emacs Manual}を参照)。フレームが作成された後、Emacsは
@code{frame-inherited-parameters}(以下参照)内にリストされたすべてのパラメーターを適用して、引数にないものは@code{make-frame}呼び出し時に選択されていたフレームから値を取得する。

マルチモニターディスプレイ(@ref{Multiple
Terminals}を参照)では、ウィンドウマネージャーが@var{alist}内の位置パラメーター(@ref{Position
Parameters}を参照)の指定とは異なる位置にフレームを配置するかもしれないことに注意。たとえば、ウィンドウの大きな部分、いわゆる@dfn{支配モニター(dominating
monitor)}上のフレームを表示するポリシーをもつウィンドウマネージャーがいくつかあります。

この関数自体はーが、新たなフレームを選択されたフレームにする訳ではない。@xref{Input
Focus}を参照のこと。以前に選択されていたフレームは、選択されたままである。しかしグラフィカル端末上では、ウィンドウシステム自身の理由により、新たなフレームが選択されるかもしれない。
@end deffn

@defvar before-make-frame-hook
@code{make-frame}がフレームを作成する前に、それにより実行されるノーマルフック。
@end defvar

@defvar after-make-frame-functions
@code{make-frame}がフレームを作成した後に、それにより実行されるアブノーマルフック。@code{after-make-frame-functions}内の各関数は、作成された直後のフレームを単一の引数として受け取る。
@end defvar

@defvar frame-inherited-parameters
この変数は、カレントで選択されているフレームから継承して新たに作成されたフレームのフレームパラメーターのリストを指定する。リスト内の各要素は@code{make-frame}の引数として与えられなかったパラメーター(シンボル)であり、@code{make-frame}は新たに作成されたフレームのそのパラメーターに、選択されたフレームの値をセットする。
@end defvar

@node Multiple Terminals
@section Multiple Terminals
@cindex multiple terminals
@cindex multi-tty
@cindex multiple X displays
@cindex displays, multiple

  Emacsは、それぞれの端末を@dfn{端末オブジェクト(terminal object)}というデータ型で表します(@ref{Terminal
Type}を参照)。GNUおよびUnixシステムでは、Emacsはそれぞれのセッション内で複数の端末を同時に実行できます。その他のシステムでは、単一の端末だけが使用できます。端末オブジェクトはそれぞれ、以下の属性をもちます:

@itemize @bullet
@item
その端末により使用されるデバイスの名前(たとえば@samp{:0.0}や@file{/dev/tty})。

@item
その端末により使用される端末とキーボードのコーディングシステム。@ref{Terminal I/O Encoding}を参照のこと。

@item
その端末に関連付けられたディスプレイの種類。これは、関数@code{terminal-live-p}によりリターンされるシンボル(たとえば@code{x}、@code{t}、@code{w32}、@code{ns}、@code{pc})である。@ref{Frames}を参照のこと。

@item
端末パラメーターのリスト。@ref{Terminal Parameters}を参照のこと。
@end itemize

  端末オブジェクトを作成するプリミティブはありません。@code{make-frame-on-display}(以下参照)を呼び出したときなど、Emacsは必要に応じてそれらを作成します。

@defun terminal-name &optional terminal
この関数は、@var{terminal}により使用されるデバイスのファイル名をリターンする。@var{terminal}が省略または@code{nil}の場合のデフォルトは、選択されたフレームの端末である。@var{terminal}はフレームでもよく、その場合はそのフレームの端末となる。
@end defun

@defun terminal-list
この関数は、すべての生きた端末オブジェクトのリストをリターンする。
@end defun

@defun get-device-terminal device
この関数は、@var{device}により与えられたデバイス名の端末をリターンする。@var{device}が文字列の場合は端末デバイス名、または@samp{@var{host}:@var{server}.@var{screen}}という形式のXディスプレイ名のいずれかを指定できる。@var{device}の場合、この関数はそのフレームの端末をリターンする。@code{nil}は選択されたフレームを意味する。最後に、もし@var{device}が生きた端末を表す端末オブジェクトなら、その端末がリターンされる。引数がこれらのいずれとも異なる場合、この関数はエラーをシグナルする。
@end defun

@defun delete-terminal &optional terminal force
この関数は、@var{terminal}上のすべてのフレームを削除して、それらが使用していたリソースを解放する。これらはアブノーマルフック@code{delete-terminal-functions}を実行し、各関数の引数として@var{terminal}を渡す。

@var{terminal}が省略または@code{nil}の場合のデフォルトは、選択されたフレームの端末である。@var{terminal}はフレームでもよく、その場合はそのフレームの端末を意味する。

この関数は通常、唯一アクティブな端末の削除を試みるとエラーをシグナルするが、@var{force}が非@code{nil}なら、これを行うことができる。端末上で最後のフレームを削除した際、Emacsは自動的にこの関数を呼び出す(@ref{Deleting
Frames}を参照)。
@end defun

@defvar delete-terminal-functions
@code{delete-terminal}により実行されるアブノーマルフック。各関数は、@code{delete-terminal}に渡された@var{terminal}を、唯一の引数として受け取る。技術的な詳細により、この関数は端末の削除の直前、または直後のいずれかに呼び出される。
@end defvar

@cindex terminal-local variables
  数は多くありませんが、いくつかのLisp変数は@dfn{端末ローカル(terminal-local)}です。つまり、それらは端末それぞれにたいして、個別にバインディングをもちます。いかなるときも、実際に効果をもつバインディングは、カレントで選択されたフレームに属する端末にたいして1つだけです。これらの変数には@code{default-minibuffer-frame}、@code{defining-kbd-macro}、@code{last-kbd-macro}、@code{system-key-alist}が含まれます。これらは常に端末ローカルであり、決してバッファーローカル(@ref{Buffer-Local
Variables}を参照)にはできません。

  GNUおよびUnixシステムでは、Xディスプレイはそれぞれ別のグラフィカル端末になります。Xウィンドウシステム内でEmacsが開始された際は環境変数@env{DISPLAY}、または@samp{--display}オプション(@ref{Initial
Options,,, emacs, The GNU Emacs
Manual}を参照)により指定されたXディスプレイを使用します。Emacsはコマンド@code{make-frame-on-display}を通じて、別のXディスプレイに接続できます。それぞれのXディスプレイは各自、選択されたフレームとミニバッファーをもちます。しかしあらゆる瞬間(@ref{Input
Focus}を参照)において、それらのフレームのうちの1つだけが、``@emph{いわゆる}選択されたフレーム''になります。@command{emacsclient}との対話することにより、Emacsが別のテキスト端末と接続することさえ可能です。@ref{Emacs
Server,,, emacs, The GNU Emacs Manual}を参照してください。

@cindex X display names
@cindex display name on X
  1つのXサーバーが、1つ以上のディスプレイを処理できます。各Xディスプレイには、@samp{@var{hostname}:@var{displaynumber}.@var{screennumber}}という3つの部分からなる名前があります。1つ目の部分の@var{hostname}は、その端末が物理的に接続されるマシン名です。2つ目の部分の@var{displaynumber}は、同じキーボードとポインティングデバイス(マウスやタブレット等)を共有するマシンに接続された、1つ以上のモニターを識別するための、0基準の番号です。3つ目の部分の@var{screennumber}は、そのXサーバー上の単一のモニターコレクション(a
single monitor
collection)の一部である、0基準のスクリーン番号(個別のモニター)です。1つのサーバー配下にある2つ以上のスクリーンを使用する際、Emacsはそれらの名前の同一部分から、それらが単一のキーボードを共有することを知ることができるのです。

  MS-WindowsのようにXウィンドウシステムを使用しないシステムは、Xディスプレイの概念をサポートせず、各ホスト上には1つのディスプレイだけがあります。これらのシステム上のディスプレイ名は、上述したような3つの部分からなる名前にしたがいません。たとえば、MS-Windowsシステム上のディスプレイ名は文字列定数@samp{w32}です。これは互換性のために存在するものであり、ディスプレイ名を期待する関数にこれを渡すことができます。

@deffn Command make-frame-on-display display &optional parameters
この関数は、@var{display}上に新たにフレームを作成して、それをリターンする。その他のフレームパラメーターは、alist
@var{parameters}から取得する。@var{display}はXディスプレイの名前(文字列)であること。

この関数は、フレーム作成前にEmacsがグラフィックを表示するために``セットアップ''されることを保証する。たとえば、Emacsが(テキスト端末上で開始された等で)Xリソースを未処理なら、この時点で処理を行う。他のすべての点においては、この関数は@code{make-frame}(@ref{Creating
Frames}を参照)と同様に振る舞う。
@end deffn

@defun x-display-list
この関数は、EmacsがどのXディスプレイに接続したかを識別するリストをリターンする。このリストの要素は文字列で、それぞれがディスプレイ名を表す。
@end defun

@defun x-open-connection display &optional xrm-string must-succeed
この関数は、ディスプレイ上にフレームを作成することなく、Xディスプレイ@var{display}への接続をオープンする。通常は、@code{make-frame-on-display}が自動的に呼び出すので、Emacs
Lispプログラムがこの関数を呼び出す必要はない。これを呼び出す唯一の理由は、与えられたXディスプレイにたいして通信を確立できるかどうかチェックするためである。

オプション引数@var{xrm-string}が非@code{nil}なら、それは@file{.Xresources}ファイル内で使用されるフォーマットと同一な、リソース名とリソース値である。@ref{X
Resources,, X Resources, emacs, The GNU Emacs
Manual}を参照のこと。これらの値はそのXサーバー上で記録されたリソース値をオーバーライドして、このディスプレイ上で作成されるすべてのEmacsフレームにたいして適用される。以下は、この文字列がどのようなものかを示す例である:

@example
"*BorderWidth: 3\n*InternalBorder: 2\n"
@end example

@var{must-succeed}が非@code{nil}なら、接続オープンの失敗によりEmacsが終了させられる。それ以外の場合は、通常のLispエラーとなる。
@end defun

@defun x-close-connection display
この関数は、ディスプレイ@var{display}への接続をクローズする。これを行う前にまず、そのディスプレイ上でオープンしたすべてのフレームを削除しなければならない(@ref{Deleting
Frames}を参照)。
@end defun

@cindex multi-monitor
  ``マルチモニター''のセットアップにおいて、単一のXディスプレイが複数の物理モニターに出力される場合があります。そのようなセットアップを取得するために、関数@code{display-monitor-attributes-list}と@code{frame-monitor-attributes}を使用できます。

@defun display-monitor-attributes-list &optional display
この関数は、@var{display}上の物理モニターの属性のリストをリターンする。@var{display}にはディスプレイ名(文字列)、端末、フレームを指定でき、省略または@code{nil}の場合のデフォルトは、選択されたフレームのディスプレイである。このリストの各要素は、物理モニターの属性を表す連想リストである。1つ目の要素はプライマリーモニターである。以下は属性のキーと値である:

@table @samp
@item geometry
@samp{(@var{x} @var{y} @var{width}
@var{height})}のような、ピクセル単位でのそのモニターのスクリーンの左上隅の位置、そのサイズ。そのモニターがプライマリーモニターでない場合は、いくつかの座標が負になり得る。

@item workarea
@samp{(@var{x} @var{y} @var{width}
@var{height})}のような、ピクセル単位でのワークエリア(``使用可能''なスペース)の左上隅の位置と、そのサイズ。これはワークエリアから除外され得る、ウィンドウマネージャーのさまざまな機能(dock、taskbar等)が占めるスペースの分、@samp{geometry}とは異なるかもしれない。そのような機能が実際にワークエリアから差し引かれるかどうかは、そのプラットフォームと環境に依存する。繰り返しになるが、そのモニターがプライマリーモニターでない場合、いくつかの座標は負になり得る。

@item mm-size
@samp{(@var{width} @var{height})}<のような、ミリメートル単位での幅と高さ。

@item frames
その物理モニターが支配(dominate)するフレームのリスト(以下参照)。

@item name
@var{string}のような、その物理モニターの名前。

@item source
@var{string}のような、マルチモニターの情報ソース(例: @samp{XRandr}、@samp{Xinerama}等)。
@end table

@var{x}、@var{y}、@var{width}、@var{height}は整数。@samp{name}と@samp{source}は欠落しているかもしれない。

あるモニター内にフレームの最大領域がある、または(フレームがどの物理モニターに跨がらないなら)そのモニターがフレームに最も近いとき、フレームは物理モニターにより@dfn{支配(dominate)}される。グラフィカルなディスプレイ内の(ツールチップではない)すべてのフレームは、たとえそのフレームが複数の物理モニターに跨がる(または物理モニター上にない)としても、(可視か否かによらず)正確に1つの物理モニターにより支配される。

以下は、2つのモニターディスプレイ上でこの関数により生成されたデータの例である:

@lisp
  (display-monitor-attributes-list)
  @result{}
  (((geometry 0 0 1920 1080) ;; @r{左手側プライマリーモニター}
    (workarea 0 0 1920 1050) ;; @r{タスクバーが幾分かの高さを占有}
    (mm-size 677 381)
    (name . "DISPLAY1")
    (frames #<frame emacs@@host *Messages* 0x11578c0>
            #<frame emacs@@host *scratch* 0x114b838>))
   ((geometry 1920 0 1680 1050) ;; @r{右手側モニター}
    (workarea 1920 0 1680 1050) ;; @r{スクリーン全体を使用可}
    (mm-size 593 370)
    (name . "DISPLAY2")
    (frames)))
@end lisp

@end defun

@defun frame-monitor-attributes &optional frame
この関数は、 @var{frame}を支配(上記参照)する物理モニターの属性をリターンする。
@var{frame}のデフォルトは選択されたフレームである。
@end defun

@node Frame Parameters
@section Frame Parameters
@cindex frame parameters

  フレームはに、その外見と挙動を制御する、多くのパラメーターがあります。フレームがどのようなパラメーターをもつかは、そのフレームが使用するディスプレイのメカニズムに依存します。

  フレームパラメーターは主に、グラフィカルディスプレイのために存在します。ほとんどのフレームパラメーターは、テキスト端末上のフレームに適用時は効果がありません。テキスト端末上のフレームでは、何か特別なことを行うパラメーターは@code{height}、@code{width}、@code{name}、@code{title}、@code{menu-bar-lines}、@code{buffer-list}、@code{buffer-predicate}だけです。その端末がカラーをサポートには@code{foreground-color}、@code{background-color}、@code{background-mode}、@code{display-type}などのパラメーターも意味をもちます。その端末が透過フレーム(frame
transparency)をサポートする場合には、パラメーター@code{alpha}も意味をもちます。

@menu
* Parameter Access::         フレームのパラメーターの変更方法。
* Initial Parameters::       フレーム作成時に指定するフレームパラメーター。
* Window Frame Parameters::  ウィンドウシステムにたいするフレームパラメーターのリスト。
* Size and Position::        フレームのサイズと位置の変更。
* Geometry::                 ジオメトリー仕様の解析。
@end menu

@node Parameter Access
@subsection Access to Frame Parameters

以下の関数により、フレームのパラメーター値の読み取りと変更ができます。

@defun frame-parameter frame parameter
この関数は、@var{frame}のパラメーター@var{parameter}(シンボル)の値をリターンする。@var{frame}が@code{nil}なら、選択されたフレームのパラメーターをリターンする。@var{frame}が@var{parameter}にたいするセッティングをもたない場合、この関数は@code{nil}をリターンする。
@end defun

@defun frame-parameters &optional frame
関数@code{frame-parameters}は、@var{frame}のすべてのパラメーターとその値をリストするalistをリターンする。@var{frame}が省略または@code{nil}の場合は、選択されたフレームのパラメーターをリターンする。
@end defun

@defun modify-frame-parameters frame alist
この関数は、@var{alist}の要素にもとづきフレーム@var{frame}のパラメーターを変更する。@var{alist}内の要素はそれぞれ@code{(@var{parm}
. @var{value})}という形式をもち、ここで@var{parm}はパラメーターを名付けるシンボルである。
@var{alist}内に指定されないパラメーターの値は変更されない。@var{frame}が@code{nil}の場合のデフォルトは、選択されたフレームである。
@end defun

@defun set-frame-parameter frame parm value
この関数は、フレームパラメーター@var{parm}に、指定された@var{value}をセットする。@var{frame}が@code{nil}の場合のデフォルトは、選択されたフレームである。
@end defun

@defun modify-all-frames-parameters alist
この関数は、
@var{alist}に応じて既存のフレームすべてのフレームパラメーターを変更してから、今後に作成されるフレームに同じパラメーター値を適用するために、@code{default-frame-alist}(と必要なら@code{initial-frame-alist})を変更する。
@end defun

@node Initial Parameters
@subsection Initial Frame Parameters
@cindex parameters of initial frame

initファイル(@ref{Init
File}を参照)内で@code{initial-frame-alist}をセットすることにより、フレームの初期スタートアップにパラメーターを指定できます。

@defopt initial-frame-alist
この変数の値は、初期フレーム作成時に使用されるパラメーター値のalistである。以降のフレームを変更することなく、初期フレームの外見を指定するために、この変数を使用できる。要素はそれぞれ以下の形式をもつ:

@example
(@var{parameter} . @var{value})
@end example

Emacsは、initファイル読み取り前に初期フレームを作成する。After reading that file, Emacs checks
@code{initial-frame-alist}をチェックして、すでに作成済みの初期フレームに、変更する値に含まれるパラメーターのセッティングを適用する。

これらのセッティングがフレームのジオメトリーと外見に影響する場合には、間違った外見のフレームを見た後、指定した外見に変更されるのを目にするだろう。これが煩わしい場合は、Xリソースで同じジオメトリーと外見を指定できる。これらは、フレーム作成前に効果をもつ。@ref{X
Resources,, X Resources, emacs, The GNU Emacs Manual}を参照されたい。

Xリソースセッティングは通常、すべての!に適用される。初期フレームのために、あるXリソースを単独で指定して、それ以降のフレームには適用したくない場合は、次の方法によりこれを達成できる。それ以降のフレームにたいするXリソースをオーバーライドするために、@code{default-frame-alist}内でパラメーターを指定してから、それらが初期フレームに影響するのを防ぐために、@code{initial-frame-alist}内の同じパラメーターにたいして、Xリソースにマッチする値を指定すればよい。
@end defopt

@cindex minibuffer-only frame
これらのパラメーターに@code{(minibuffer
.
nil)}が含まれるなら、それは初期フレームがミニバッファーをもつべきではないことを示します。この場合、Emacsは同じように@dfn{ミニバッファーオンリーフレーム(minibuffer-only
frame)}を別個作成します。

@defopt minibuffer-frame-alist
この変数の値は、初期ミニバッファーオンリーフレーム(@code{initial-frame-alist}がミニバッファーのないフレームを指定する場合にEmacsが作成するミニバッファーオンリーフレームのこと)を作成時に使用されるパラメーター値のalistである。
@end defopt

@defopt default-frame-alist
これは、すべてのEmacsフレーム(最初のフレームとそれ以降のフレーム)にたいして、フレームパラメーターのデフォルト値を指定するalistである。Xウィンドウシステム使用時には、大抵はXリソースで同じ結果を得られる。

この変数のセットは既存フレームに影響しない。さらに、別フレームにバッファーを表示する関数は、自身のパラメーターを提供することにより、デフォルトパラメーターをオーバーライドできる。
@end defopt

フレームの外見を指定するコマンドラインオプションとともにEmacsを呼び出した場合、これらのオプションは@code{initial-frame-alist}または@code{default-frame-alist}のいずれかに要素を追加することにより、効果を発揮します。@samp{--geometry}や@samp{--maximized}のような、初期フレームだけに影響するオプションは@code{initial-frame-alist}、その他のオプションは@code{default-frame-alist}に要素を追加します。@ref{Emacs
Invocation,, Command Line Arguments for Emacs Invocation, emacs, The GNU
Emacs Manual}を参照してください。

@node Window Frame Parameters
@subsection Window Frame Parameters
@cindex frame parameters for windowed displays

  フレームがどんなパラメーターをもつかは、どのようなディスプレイのメカニズムがそれを使用するかに依存します。このセクションでは、一部、またはすべての端末種類において特別な意味をもつパラメーターを説明します。これらのうち@code{name}、@code{title}、@code{height}、@code{width}、@code{buffer-list}、@code{buffer-predicate}は端末フレームにおいて有意な情報を提供し、@code{tty-color-mode}はテキスト端末上のフレームにたいして意味があります。

@menu
* Basic Parameters::         基本的なパラメーター。
* Position Parameters::      スクリーン上のフレームの位置。
* Size Parameters::          フレームのサイズ。
* Layout Parameters::        フレームのパーツのサイズと、一部パーツの有効化と無効化。
* Buffer Parameters::        表示済みまたは表示されるべきバッファーはどれか。
* Management Parameters::    ウィンドウマネージャーとの対話。
* Cursor Parameters::        カーソルの外見の制御。
* Font and Color Parameters::  フレームテキストにたいするフォントとカラー。
@end menu

@node Basic Parameters
@subsubsection Basic Parameters

  以下のフレームパラメーターは、フレームに関してもっとも基本的な情報を提供します。@code{title}と@code{name}は、すべての端末において意味をもちます。

@table @code
@vindex display, a frame parameter
@item display
このフレームをオープンするためのディスプレイ。これは環境変数@env{DISPLAY}のような、@samp{@var{host}:@var{dpy}.@var{screen}}という形式の文字列であること。ディスプレイ名についての詳細は、@xref{Multiple
Terminals}を参照のこと。

@vindex display-type, a frame parameter
@item display-type
このパラメーターは、このフレーム内で使用できる利用可能なカラーの範囲を記述する。値は@code{color}、@code{grayscale}、@code{mono}のいずれか。

@vindex title, a frame parameter
@item title
フレームが非@code{nil}のtitleをもつ場合、それはフレーム上端にあるウィンドウシステムのタイトルバーに表示され、@code{mode-line-frame-identification}に@samp{%F}(@ref{%-Constructs}を参照)を使用していればそのフレーム内のウィンドウのモードラインにも表示される。これは通常、Emacsがウィンドウシステムを使用しておらず、かつ同時に1つのフレームのみ表示可能なケースが該当する。@ref{Frame
Titles}を参照のこと。

@vindex name, a frame parameter
@item name
そのフレームの名前。@code{title}が未指定または@code{nil}なら、フレーム名はフレームタイトルにたいしてデフォルトの役割りを果たす。nameを指定しない場合、Emacsは自動的にフレーム名をセットする(@ref{Frame
Titles}を参照)。

フレーム作成時に明示的にフレーム名を指定した場合は、そのフレームにたいしてXリソースを照合する際にも、(Emacs実行可能形式名のかわりに)その名前が使用される。

@item explicit-name
フレーム作成時にフレーム名が明示的に指定された場合、このパラメーターはその名前になるだろう。明示的に名付けられなかった場合、このパラメーターは@code{nil}になる。
@end table

@node Position Parameters
@subsubsection Position Parameters
@cindex window position on display
@cindex frame position

  位置パラメーターの値は通常はピクセル単位ですが、テキスト端末ではピクセル単位のかわりに文字数か行数で数えられます。

@table @code
@vindex left, a frame parameter
@item left
スクリーンの左(右)端からフレームの左(右)端までの、ピクセル単位での位置。値は:

@table @asis
@item 整数
正の整数は、スクリーン左端をフレーム左端に、負の整数はフレーム右端をスクリーン右端に関連付ける。

@item @code{(+ @var{pos})}
これは、スクリーン左端にたいしフレーム左端の相対的位置を指定する。整数@var{pos}は正および負の値をとり得る。負の値はスクリーン外側、または(マルチモニターディスプレイにたいしては)プライマリーモニター以外のモニター上の位置を指定する。

@item @code{(- @var{pos})}
これは、スクリーン右端にたいしフレーム右端の相対的位置を指定する。整数@var{pos}は正および負の値をとり得る。負の値はスクリーン外側、または(マルチモニターディスプレイにたいしては)プライマリーモニター以外のモニター上の位置を指定する。
@end table

プログラム指定の位置を無視するウィンドウマネージャーがいくつかある。指定した位置が無視されない保証を望む場合は、パラメーター@code{user-position}にも同様に非@code{nil}値を指定すること。

@vindex top, a frame parameter
@item top
スクリーン上(下)端にたいして、上(下)端のスクリーン位置をピクセル単位で指定する。方向が水平ではなく垂直である点を除き、これは@code{left}と同様に機能する。

@vindex icon-left, a frame parameter
@item icon-left
スクリーン左端から数えた、フレームアイコン左端のピクセル単位のスクリーン位置。ウィンドウマネージャーがこの機能をサポートすれば、これはフレームをアイコン化したとき効果を発揮する。このパラメーターに値を指定する場合は@code{icon-top}にも値を指定しなければならず、その逆も真である。

@vindex icon-top, a frame parameter
@item icon-top
スクリーン上端から数えた、フレームアイコン上端のピクセル単位のスクリーン位置。ウィンドウマネージャーがこの機能をサポートすれば、これはフレームをアイコン化したとき効果を発揮する。

@vindex user-position, a frame parameter
@item user-position
フレームを作成してパラメーター@code{left}と@code{top}で位置を指定する際は、指定した位置がユーザー指定(人間であるユーザーにより明示的に要求された位置)なのか、それとも単なるプログラム指定(プログラムにより選択された位置)なのかを告げるために、このパラメーターを使用する。非@code{nil}値は、それがユーザー指定の位置であることを告げる。

@cindex window positions and window managers
ウィンドウマネージャーは一般的にユーザー指定位置に留意し、プログラム指定位置にも幾分か留意する。しかし、多くはプログラム指定位置を無視してウィンドウをウィンドウマネージャーのデフォルトの方法で配すか、ユーザーのマウスによる配置に任せる。@code{twm}を含むウィンドウマネージャーのいくつかは、プログラム指定位置にしたがうか無視するかをユーザーの指定に任せる。

@code{make-frame}を呼び出す際、パラメーター@code{left}および@code{top}の値がそのユーザーにより示される嗜好を表すなら、このパラメーターに非@code{nil}値を、それ以外は@code{nil}を指定するべきである。
@end table

@node Size Parameters
@subsubsection Size Parameters
@cindex window size on display

  フレームパラメーターはフレームのサイズを文字単位で指定します。グラフィカルなディスプレイ上では、@code{default}フェイスがこれら文字単位の実際のピクセルサイズを決定します(@ref{Face
Attributes}を参照)。

@table @code
@vindex height, a frame parameter
@item height
文字単位によるフレームコンテンツの高さ(ピクセル単位で高さを取得するには@code{frame-pixel-height}を呼び出す。@ref{Size
and Position}を参照のこと)。

@vindex width, a frame parameter
@item width
文字単位によるフレームコンテンツの幅(ピクセル単位で幅を取得するには@code{frame-pixel-width}を呼び出す。@ref{Size
and Position}を参照のこと)。

@vindex user-size, a frame parameter
@item user-size
これは、サイズパラメーター@code{height}および@code{width}にたいして、@code{user-position}(@ref{Position
Parameters, user-position}を参照)が@code{top}および@code{left}が行うのと同じことを行う。

@cindex full-screen frames
@vindex fullscreen, a frame parameter
@item fullscreen
幅または高さ、もしくはその両方を最大化することを指定する。値@code{fullwidth}は、可能な限り幅を広く、値@code{fullheight}は高さを可能な限り高く、値@code{fullboth}は幅と高さをスクリーンサイズにセット、値@code{maximized}はフレームを最大化することを指定する。@code{maximized}と@code{fullboth}の違いは、前者がマウスでそのウィンドウマネージャーによる装飾をドラッグしてサイズ変更が可能なのにたいし、後者は実際のスクリーン全体を覆うためマウスによるサイズ変更ができないことである。

いくつかのウィンドウマネージャーでは、フレームを``maximized''または``fullscreen''にするために、変数@code{frame-resize-pixelwise}を非@code{nil}値にカスタマイズする必要があるかもしれない。

@end table

@node Layout Parameters
@subsubsection Layout Parameters
@cindex layout parameters of frames
@cindex frame layout parameters

  以下のフレームパラメーターにより、フレームのさまざまなパーツを有効または無効にしたり、サイズを制御できます。

@table @code
@vindex border-width, a frame parameter
@item border-width
ピクセル単位でのフレームのボーダー幅。

@vindex internal-border-width, a frame parameter
@item internal-border-width
テキスト(またはフリンジ)とフレームボーダーとのピクセル単位による距離。

@vindex vertical-scroll-bars, a frame parameter
@item vertical-scroll-bars
フレームが垂直スクロール用のスクロールバーをもつべきか否か、スクロールバーをフレームのどちら側に置くか。可能な値は@code{left}、@code{right}、スクロールバーなしは@code{nil}。

@ignore
@vindex horizontal-scroll-bars, a frame parameter
@item horizontal-scroll-bars
Whether the frame has scroll bars for horizontal scrolling
(non-@code{nil} means yes).  Horizontal scroll bars are not currently
implemented.
@end ignore

@vindex scroll-bar-width, a frame parameter
@item scroll-bar-width
垂直スクロールバーのピクセル単位による幅。@code{nil}はデフォルト幅の使用を意味する。

@vindex left-fringe, a frame parameter
@vindex right-fringe, a frame parameter
@item left-fringe
@itemx right-fringe
そのフレーム内のウィンドウの左右フリンジのデフォルト幅(@ref{Fringes}を参照)。いずれかが0なら、対応するフリンジを削除する効果がある。
If either of these is zero, that effectively removes the corresponding
fringe.

これら2つのフレームパラメーターの値を問い合わせるために@code{frame-parameter}を使用する際、リターン値は常に整数となる。@code{nil}値を渡して@code{set-frame-parameter}を使用する際は、実際のデフォルト値8ピクセルが課せられる。

合成済みフリンジ幅は列数の合計数まで加算されなければならないので、@code{frame-parameter}の応答値は指定値より大きくなるかもしれない。左右のフリンジ間には、余分な幅が均等に配分される。しかし、フリンジのいずれか幅に負の整数を指定することにより、フリンジに正確な幅を強制できる。どちらのフリンジ幅も負の場合は、左フリンジだけが指定された幅となる。

@vindex right-divider-width, a frame parameter
@item right-divider-width
フレーム上のすべてのウィンドウの右ディバイダー(@ref{Window
Dividers}を参照)用に予約される、ピクセル単位の幅(厚さ)。値0は右ディバイダーを描画しないことを意味する。

@vindex bottom-divider-width, a frame parameter
@item bottom-divider-width
フレーム上のすべてのウィンドウの下ディバイダー(@ref{Window
Dividers}を参照)用に予約される、ピクセル単位の幅(厚さ)。値0は下ディバイダーを描画しないことを意味する。

@vindex menu-bar-lines frame parameter
@item menu-bar-lines
メニューバー用にフレーム上端に割り当てる行数。Menu Barモードが有効の場合のデフォルトは1、それ以外は0である。@ref{Menu
Bars,,,emacs, The GNU Emacs Manual}を参照のこと。

@vindex tool-bar-lines frame parameter
@item tool-bar-lines
ツールバー用に使用する行数。Tool Barモードが有効の場合のデフォルトは1、それ以外は0である。@xref{Tool Bars,,,emacs,
The GNU Emacs Manual}を参照のこと。

@vindex tool-bar-position frame parameter
@item tool-bar-position
ツールバーの位置。現在のところGTKツールバーのみ。可能な値は@code{top}、@code{bottom}、@code{left}、@code{right}。デフォルトは@code{top}。

@vindex line-spacing, a frame parameter
@item line-spacing
各テキスト行配下に残す、ピクセル単位の追加スペース(正の整数)。詳細は@ref{Line Height}を参照のこと。
@end table

@node Buffer Parameters
@subsubsection Buffer Parameters
@cindex frame, which buffers to display
@cindex buffers to display on frame

  以下は、フレーム内でどのバッファーが表示されているか、されるべきかを扱うためのフレームパラメーターで、すべての種類の端末上で意味があります。

@table @code
@vindex minibuffer, a frame parameter
@item minibuffer
そのフレームが自身のミニバッファーをもつか否か。もつ場合は@code{t}、もたない場合は@code{nil}、@code{only}ならそのフレームが正にミニバッファーであることを意味する。値が(別フレーム内の)ミニバッファーウィンドウの場合、そのフレームはそのミニバッファーを使用する。

このフレームパラメーターはフレーム作成時に効果があち、その後は変更できない。

@vindex buffer-predicate, a frame parameter
@item buffer-predicate
このフレームにたいする、buffer-predicate関数。関数@code{other-buffer}は、どのバッファーを考慮すべきか決定するために、(選択されたフレームから)この述語が@code{nil}でなければ、これを使用する。これは各バッファーにたいして、そのバッファーを唯一の引数として、この述語を1回呼び出す。この述語が非@code{nil}値をリターンしたら、そのバッファーは考慮される。

@vindex buffer-list, a frame parameter
@item buffer-list
そのフレーム内で選択されているバッファーの、もっとも最近選択されたバッファーが先頭になるような順のリスト。

@vindex unsplittable, a frame parameter
@item unsplittable
非@code{nil}なら、このフレームのウィンドウは決して自動的に分割されることはない。
@end table

@node Management Parameters
@subsubsection Window Management Parameters
@cindex window manager interaction, and frame parameters

  以下のフレームパラメーターは、ウィンドウマネージャーとフレームとの相互作用のさまざまな面を制御します。これらは、テキスト端末上では効果がありません。

@table @code
@vindex visibility, a frame parameter
@item visibility
フレームの可視性(visibility)の状態。可能な値は3つあり、@code{nil}は不可視、@code{t}は可視、@code{icon}はアイコン化されていることを意味する。@ref{Visibility
of Frames}を参照のこと。

@vindex auto-raise, a frame parameter
@item auto-raise
非@code{nil}なら、Emacsはそのフレーム選択時に自動的にそれを前面に移動(raise)する。これを許さないウィンドウマネージャーがいくつかある。

@vindex auto-lower, a frame parameter
@item auto-lower
非@code{nil}なら、Emacsはそのフレームの選択解除時に自動的にそれを背面に移動(lower)する。これを許さないウィンドウマネージャーがいくつかある。

@vindex icon-type, a frame parameter
@item icon-type
そのフレームに使用するアイコンのタイプ。値が文字列の場合、それは使用するビットマップを含むファイルを指定し、@code{nil}はアイコンなしを指定する(何を表示するかはウィンドウマネージャーが決定する)。その他の非@code{nil}値は、デフォルトのEmacsアイコンを指定する。

@vindex icon-name, a frame parameter
@item icon-name
このフレームにたいするアイコンで使用する名前。アイコンを表示する場合は、その際に表示される。これが@code{nil}なら、フレームのタイトルが使用される。

@vindex window-id, a frame parameter
@item window-id
グラフィカルディスプレイがこのフレームにたいして使用するID番号。Emacsは、フレーム作成時にこのパラメーターを割り当てる。このパラメーターを変更しても、実際のID番号に効果はない。

@vindex outer-window-id, a frame parameter
@item outer-window-id
そのフレームが存在する最外殻のウィンドウシステムのウィンドウのID番号。@code{window-id}と同様、このパラメーターを変更しても実際の効果はない。

@vindex wait-for-wm, a frame parameter
@item wait-for-wm
非@code{nil}なら、ジオメトリー変更を確認するために、ウィンドウマネージャーを待機するようXtに指示する。Fvwm2およびKDEのバージョンを含むウィンドウマネージャーのいくつかは確認に失敗するので、Xtがハングする。これらウィンドウマネージャーのハングを防ぐために、これを@code{nil}にセットする。

@vindex sticky, a frame parameter
@item sticky
非@code{nil}なら、仮想デスクトップを伴うシステム上のすべての仮想デスクトップ上で、そのフレームが可視になる。

@ignore
@vindex parent-id, a frame parameter
@item parent-id
@c ??? Not yet working.
The X window number of the window that should be the parent of this one.
Specifying this lets you create an Emacs window inside some other
application's window.  (It is not certain this will be implemented; try
it and see if it works.)
@end ignore
@end table

@node Cursor Parameters
@subsubsection Cursor Parameters
@cindex cursor, and frame parameters

  このフレームパラメーター!、カーソルの外見を制御します。

@table @code
@vindex cursor-type, a frame parameter
@item cursor-type
カーソルの表示方法。適正な値は:

@table @code
@item box
塗りつぶされた四角形(filled box)を表示する(デフォルト)。
@item hollow
中抜きの四角形(hollow box)を表示する。
@item nil
カーソルウィンドウ表示しない。
@item bar
文字間に垂直バー(vertical bar)を表示する。
@item (bar . @var{width})
文字間に幅が@var{width}ピクセルの垂直バー(vertical bar)を表示する。
@item hbar
文字間に水平バー(horizontal bar)を表示する。
@item (hbar . @var{height})
文字間に高さが@var{height}ピクセルの水平バー(horizontal bar)を表示する。
@end table
@end table

@vindex cursor-type
フレームパラメーター@code{cursor-type}は、変数@code{cursor-type}および@code{cursor-in-non-selected-windows}によりオーバーライドされるかもしれません。

@defvar cursor-type
このバッファーローカル変数は、選択されたウィンドウ内で表示されているそのバッファーのカーソルの外見を制御する。この値が@code{t}なら、それはフレームパラメーター@code{cursor-type}で指定されたカーソルのーを使用することを意味する。それ以外では、値は上記リストのカーソルタイプのいずれかであるべきで、これはフレームパラメーター@code{cursor-type}をオーバーライドする。
@end defvar

@defopt cursor-in-non-selected-windows
このバッファーローカル変数は、選択されていないウィンドウ内でのカーソルの外見を制御する。これは、フレームパラメーター@code{cursor-type}と同じ値をサポートする。さらに、@code{nil}は選択されていないウィンドウ内にはカーソルを表示せず、@code{t}は通常のカーソルタイプの標準的な変更(塗りつぶされた四角形は中抜きの四角形に、バーはより細いバーにする)の使用を意味する。
@end defopt

@defopt blink-cursor-alist
この変数は、カーソルのブリンク(blink: 点滅)方法を指定する。各要素は@code{(@var{on-state}
.
@var{off-state})}という形式をもつ。カーソルタイプが@var{on-state}と等しい(@code{equal}を用いて比較)ときは常に、これに対応する@var{off-state}がブリンクが``off''の際のカーソルの外見を指定する。@var{on-state}と@var{off-state}はどちらもフレームパラメーター@code{cursor-type}に適した値であること。

それぞれのカーソルタイプのブリンク方法にたいして、そのタイプがここで@var{on-state}として指定されていなければ、さまざまなデフォルトが存在する。フレームパラメーター@code{cursor-type}で指定した際に限り、この変数内での変更は即座に効果を発揮しない。
@end defopt

@node Font and Color Parameters
@subsubsection Font and Color Parameters
@cindex font and color, frame parameters

  以下のフレームパラメーターは、フォントとカラーの使用を制御します。

@table @code
@vindex font-backend, a frame parameter
@item font-backend
フレーム内でフォントの描画に使用するための@dfn{フォントバックエンド(font
backends)}を指定する、優先順のシンボルのリスト。Xでは現在のところ、@code{x}(X core font
driver)と@code{xft}(Xft font
driver)の2つの利用可能なフォントバックエンドがある。MS-Windowsでは現在のところ、@code{gdi}と@code{uniscribe}の2つの利用可能なフォントバックエンドがある(@ref{Windows
Fonts,,, emacs, The GNU Emacs
Manual}を参照)。その他のシステムでは利用可能なフォントバックエンドは1つだけなので、このフレームパラメーターを変更しても意味がない。

@vindex background-mode, a frame parameter
@item background-mode
このパラメーターは@code{dark}か@code{light}のいずれかで、それぞれバックグラウンドを暗く(dark)するか、明るく(light)するかに対応する。

@vindex tty-color-mode, a frame parameter
@item tty-color-mode
@cindex standard colors for character terminals
このパラメーターは端末上で使用するカラーモードを指定し、、そのシステムの端末機能データベース(terminal capabilities
database、termcap)により与えられた端末のカラーサポートを、その値でオーバーライドする。値にはシンボルか数値を指定できる。数値の場合は、使用するカラー数(および間接的にはそれぞれのカラーを生成するためのコマンド)を指定する。たとえば@code{(tty-color-mode
. 8)}は、標準的なテキストカラーにたいしてANSIエスケープシーケンスの使用を指定する。値-1はカラーサポートをオフに切り替える。

このパラメーターの値がシンボルの場合、それは@code{tty-color-mode-alist}の値を通じた数値を指定するもので、かわりにそのシンボルに割り当てられた数値が使用される。

@vindex screen-gamma, a frame parameter
@item screen-gamma
@cindex gamma correction
これが数値の場合、Emacsはすべてのカラーの輝度を調整する``ガンマ補正(gamma
correction)''を行う。値はディスプレイのスクリーンのガンマであること。

通常のPCモニター／あスクリーンガンマが2.2なので、EmacsおよびXウィンドウのカラー値は一般的にそのガンマ値のモニター上で正しく表示するよう校正されている。@code{screen-gamma}にたいして2.2を指定した場合、それは補正が不必要であることを意味する。その他の値は、通常のモニター上でガンマ値2.2で表示されるであろう、補正されたカラーがスクリーン上に表示されるように意図された補正を要求する。

モニターが表示するカラーが明るすぎる場合は、@code{screen-gamma}に2.2より小さい値を指定するべきである。これは、カラーをより暗くする補正を要求する。スクリーンガンマの値1.5は、LCDカラーディスプレイにたいして、よい結果を与えるだろう。

@vindex alpha, a frame parameter
@item alpha
@cindex opacity, frame
@cindex transparency, frame
@vindex frame-alpha-lower-limit
このパラメーターは、可変透明度(variable opacity)をサポートするグラフィカルディスプレイ上での、そのフレームの透明度を指定する(訳注:
opacityを訳すと逆の不透明度だが、このような場合は一般的に透明度と訳すようなので、それに倣う)。これは0から100の整数であるべきで、0は完全な透明、100hは完全な不透明を意味する。@code{nil}値をもつこともでき、これはEmacsにフレームのopacityをセットしない(ウィンドウマネージャーに委ねる)よう告げる。

フレームが完全に見えなくなるのを防ぐために、変数@code{frame-alpha-lower-limit}は透明度の最低限度を定義する。フレームパラメーターの値がこの変数の値より小さい場合、Emacsは後者を使用する。デフォルトの@code{frame-alpha-lower-limit}は20。

フレームパラメーター@code{alpha}にはコンスセル@code{(@samp{active}
.
@samp{inactive})}も指定できる。ここで、@samp{active}は選択時のフレームの透明度、@samp{inactive}は未選択時の透明度である。
@end table

以下は、特定のフェイスの特定のフェイス属性と自動的に等しくなるので、凖時代遅れとなったフレームパラメーターです(@ref{Standard
Faces,,, emacs, The Emacs Manual}を参照)。

@table @code
@vindex font, a frame parameter
@item font
フレーム内でテキストを表示するためのフォントの名前。これはシステムで有効なフォント名、またはEmacsフォントセット名(@ref{Fontsets}を参照)のいずれかであるような文字列である。これは、@code{default}フェイスの@code{font}属性と等価である。

@vindex foreground-color, a frame parameter
@item foreground-color
文字のイメージに使用するカラー。これは、@code{default}フェイスの@code{:foreground}属性と等価である。

@vindex background-color, a frame parameter
@item background-color
文字のバックグラウンドに使用するカラー。これは、@code{default}フェイスの@code{:background}属性と等価である。

@vindex mouse-color, a frame parameter
@item mouse-color
マウスポインターのカラー。これは@code{mouse}フェイスの@code{:background}属性と等価である。

@vindex cursor-color, a frame parameter
@item cursor-color
ポイントを表示するカーソルのカラー。これは、@code{cursor}フェイスの@code{:background}属性と等価である。

@vindex border-color, a frame parameter
@item border-color
これは、フレームのボーダーのカラーと等価である。これは、@code{border}フェイスの@code{:background}属性と等価である。

@vindex scroll-bar-foreground, a frame parameter
@item scroll-bar-foreground
非@code{nil}の場合は、スクロールバーのフォアグラウンドカラー。これは、@code{scroll-bar}フェイスの@code{:foreground}属性と等価である。

@vindex scroll-bar-background, a frame parameter
@item scroll-bar-background
非@code{nil}の場合は、スクロールバーのバックグラウンドカラー。これは、@code{scroll-bar}フェイスの@code{:background}属性と等価である。
@end table

@node Size and Position
@subsection Frame Size And Position
@cindex size of frame
@cindex screen size
@cindex frame size
@cindex resize frame

  フレームパラメーター@code{left}、@code{top}、@code{height}、@code{width}を使用することにより、フレームのサイズと位置の読み取りや変更ができます。未指定のジオメトリーパラメーターは、それが何であれウィンドウマネージャーの通常の方法により選択されます。

  以下はサイズやポジションの特別な機能にたいして動作します(正確には、これらの関数により使用される``選択されたフレーム''にたいして動作するという意味。@ref{Input
Focus}を参照のこと)。

@defun set-frame-position frame left top
この関数は、@var{frame}の左上隅を@var{left}、@var{top}にセットする。これらの引数はピクセル単位で、通常はスクリーンの左上隅から測られる。

負のパラメーター値は、スクリーン下端から上方向にウィンドウ下端、またはスクリーン右端から左方向にウィンドウ右端の位置である。この値が常に左上隅から数えるようにして、負の引数ならフレームの一部をスクリーン左上隅の外側に配置するようにしたほうがよいのだろうが、今更これを変更するのは賢明と思えない。
@end defun

@defun frame-height &optional frame
@defunx frame-width &optional frame
これらの関数は、行または列で測った@var{frame}の高さまたは幅をリターンする。@var{frame}を指定しないと選択されたフレームを使用する。
@end defun

@defun frame-pixel-height &optional frame
@defunx frame-pixel-width &optional frame
これらの関数は、ピクセルで測った@var{frame}の主要表示領域の高さまたは幅をリターンする。@var{frame}を指定しないと選択されたフレームを使用する。テキスト端末では、結果はピクセルではなく文字単位となる。

これらの値には各ウィンドウの内枠ボーダー(internal
borders)、スクロールバー、フリンジ(これらはフレーム自体ではなく個別のウィンドウに属す)が含まれる。高さの正確な値は、そのウィンドウシステムと使用するツールキットに依存する。GTK+では、高さにツールバーやメニューバーは含まれない。MotifとLucidのツールキットでは、ツールバーは含まれるが、メニューバーは含まれない。ツールキットなしのグラフィカルなバージョンでは、ツールバーとメニューバーの両方が含まれる。テキスト端末の場合は、結果にメニューバーが含まれる。
@end defun

@defun frame-char-height &optional frame
@defunx frame-char-width &optional frame
これらの関数は、ピクセルで測った@var{frame}の高さまたは幅をリターンする。値は選択されたフォントに依存する。@var{frame}を指定しないと選択されたフレームを使用する。
@end defun

@defopt frame-resize-pixelwise
このオプションが@code{nil}なら、フレームのサイズは、通常はそのフレームの@code{frame-char-height}と@code{frame-char-width}のカレント値の倍数に丸められる。非@code{nil}の場合、丸めは行われずフレームのサイズはピクセル単位で増加/減少が可能になる。

これをセットすることにより、次回のリサイズ処理では、ウィンドウマネージャーにこれに相当するサイズのヒントを渡す。これは、ユーザーの初期ファイル内でのみこの変数をセットすべきで、アプリケーションが一時的にこれをバインドすべきではないことを意味する。

このオプションにたいして@code{nil}値がもつ正確な意味は、使用されるツールキットに依存する。マウスによるフレームボーダーのドラッグは、通常は文字単位で行われる。文字サイズの整数倍ではないフレームサイズを引数として@code{set-frame-size}(以下参照)を呼び出すと、もしかしたら丸められたり(GTK+)、あるいは受容される(Lucid、Motif、MS-Windows)かもしれない。

いくつかのウィンドウマネージャーでは、フレームを本当に``最大化''あるいは``全画面''で表示させるためには、これを非@code{nil}にセットする必要があるかもしれない。
@end defopt

@defun set-frame-size frame width height pixelwise
この関数は、文字単位で@var{frame}のサイズをセットする。@var{width}は列数で新たな幅を指定し、@var{height}は行数で新たな高さを指定する。

オプション引数@var{pixelwise}が非@code{nil}の場合は、かわりにピクセル単位で新たな幅と高さを測ることを意味する。@code{frame-resize-pixelwise}が@code{nil}の場合、それが文字の整数倍でフレームサイズを増加あるいは減少させないなら、この要求を完全には尊重せずに拒絶するツールキットがいくつかあることに注意されたい。
@end defun

@defun set-frame-height frame height &optional pretend pixelwise
この関数は、@var{frame}を高さ@var{height}行にリサイズする。@var{frame}内の既存ウィンドウのサイズは、フレームにフィットするよう比例して変更される。

@var{pretend}が非@code{nil}の場合、Emacsは@var{frame}内で@var{height}行の出力を表示するが、そのフレームの実際の高さにたいする値は変更しない。これはテキスト端末上でのみ有用である。端末が実際に実装するより小さい高さの使用は、より小さいスクリーン上での振る舞いの再現したり、スクリーン全体を使用時の端末の誤動作を観察するとき有用かもしれない。フレームの高さを``実際''のようにセットするのは、常に機能するとは限らない。なぜなら、テキスト端末上でのカーソルを正しく配置するために、正確な実サイズを知る必要があるかもしれないからである。

オプションの第4引数@var{pixelwise}が非@code{nil}なら、それは@var{frame}の高さが@var{height}ピクセル高くなることを意味する。@code{frame-resize-pixelwise}が@code{nil}の場合、それが文字の整数倍でフレームサイズを増加あるいは減少させないなら、この要求を完全には尊重せずに拒絶するツールキットがいくつかあることに注意されたい。
@end defun

@defun set-frame-width frame width &optional pretend pixelwise
この関数は、文字単位で@var{frame}の幅をセットする。引数@var{pretend}は、@code{set-frame-height}のときと同じ意味をもつ。

オプションの第4引数@var{pixelwise}が非@code{nil}なら、それは@var{frame}の幅が@var{height}ピクセル広くなることを意味する。@code{frame-resize-pixelwise}が@code{nil}の場合、それが文字の整数倍でフレームサイズを増加あるいは減少させないなら、この要求を完全には尊重せずに拒絶するツールキットがいくつかあることに注意されたい。
@end defun

@c FIXME?  Belongs more in Emacs manual than here?
@c But, e.g., fit-window-to-buffer is in this manual.
ウィンドウ1つだけを表示するフレームの場合は、コマンド@code{fit-frame-to-buffer}を使用してそのフレームをウィンドウのバッファーにフィットさせることができます。

@deffn Command fit-frame-to-buffer &optional frame max-height min-height max-width min-width only
このコマンドは、@var{frame}内のバッファーのコンテンツを正確に表示するために、@var{frame}のサイズを調整する。@var{frame}には任意の生きたフレームを指定でき、デフォルトは選択されたフレームである。この調整は、@var{frame}のルートウィンドウが生きている場合のみ行われる。引数@var{max-height}、@var{min-height}、@var{max-width}、@var{min-width}は@var{frame}のルートウィンドウの新たなトータルサイズの境界を指定する。@var{min-height}と@var{min-width}のデフォルトは、@code{window-min-height}および@code{window-min-width}である。

オプション引数@var{only}が@code{vertically}の場合、この関数はフレームを垂直方向にたいしてだけリサイズするだろう。@var{only}が@code{horizontally}なら、水平方向だけにリサイズする。
@end deffn

@code{fit-frame-to-buffer}の挙動は、以下にリストに挙げた2つのオプションにより制御できます。

@defopt fit-frame-to-buffer-margins
このオプションは、@code{fit-frame-to-buffer}によりフィットされるフレーム周囲のマージンを指定する。このようなマージンは、たとえばフレームがタスクバーとオーバーラップするのを防ぐのに有用かもしれない。

これは、フィットされるフレームの上下左右にフリーのまま残すピクセル数を指定する。デフォルトは@code{nil}で、これは上下左右にマージンを使用しないことを意味する。ここで指定した値は、フレームの@code{fit-frame-to-buffer-margins}パラメーターが与えられていれば、それにオーバーライドされるかもしれない。
@end defopt

@defopt fit-frame-to-buffer-sizes
このオプションは、@code{fit-frame-to-buffer}にたいしてサイズの境界を指定する。これは、自身のバッファーにフィットされるすべてのフレームのルートウィンドウの最小/最大の行数および最小/最大の列数のトータルを指定する。これらの値のいずれかが非@code{nil}なら、@code{fit-frame-to-buffer}の相当する引数をオーバーライドする。
@end defopt


@node Geometry
@subsection Geometry

  以下は、Xスタイルのウィンドウジオメトリー指定によるアクションのデータを調べる方法です:

@defun x-parse-geometry geom
@cindex geometry specification
関数@code{x-parse-geometry}は、標準的なXウィンドウのジオメトリー文字列を、@code{make-frame}の引数の一部として使用できるalistに変換する。

このalistは@var{geom}内で指定されたパラメーターと、そのパラメーターに指定された値を記述する。各要素は@code{(@var{parameter}
.
@var{value})}のような形式である。可能な@var{parameter}の値は@code{left}、@code{top}、@code{width}、@code{height}である。

サイズのパラメーターの値は整数でなければならない。位置のパラメーター@code{left}および@code{top}の名前に関しては、かわりに右端または下端の位置を示す値もいくつかあるので、完全に正確ではない。位置パラメーターにたいして可能な@var{value}は前述(@ref{Position
Parameters}を参照)したような整数、リスト@code{(+ @var{pos})}、リスト@code{(- @var{pos})}である。

以下は例である:

@example
(x-parse-geometry "35x70+0-0")
     @result{} ((height . 70) (width . 35)
         (top - 0) (left . 0))
@end example
@end defun

@node Terminal Parameters
@section Terminal Parameters
@cindex terminal parameters

  端末はそれぞれ、関連するパラメーターのリストをもっています。これら@dfn{端末パラメーター(terminal
parameters)}は主に、端末ローカル変数を格納するための便利な手段ですが、いくつかの端末パラメーターは特別な意味をもっています。

  このセクションでは、端末のパラメーター値の読み取りや変更を行う関数を説明します。これらはすべて引数として端末かフレームいずれかを受け入れます。フレームの場合、それはそのフレームの端末の使用を意味します。引数@code{nil}は、選択されたフレームの端末という意味です。

@defun terminal-parameters &optional terminal
この関数は、@var{terminal}nのすべてのパラメーターとその値をリストするalistをリターンする。
@end defun

@defun terminal-parameter terminal parameter
この関数は、@var{terminal}のパラメーター@var{parameter}(シンボル)の値をリターンする。@var{terminal}が@var{parameter}にたいするセッティングをもたない場合、この関数は@code{nil}をリターンする。
@end defun

@defun set-terminal-parameter terminal parameter value
この関数は、@var{terminal}のパラメーター@var{parm}に指定された@var{value}をセットして、そのパラメーターの以前の値をリターンする。
@end defun

以下は、特別な意味をもついくつかの端末パラメーターのリストです:

@table @code
@item background-mode
端末のバックグラウンドカラーの区分で、@code{light}か@code{dark}のいずれか。
@item normal-erase-is-backspace
値は1か0で、これはその端末上で@code{normal-erase-is-backspace-mode}がオンまたはオフのいずれに切り替えられたかに依存する。@ref{DEL
Does Not Delete,,, emacs, The Emacs Manual}を参照のこと。
@item terminal-initted
端末の初期化後に、端末固有の初期化関数にセットされる。
@end table

@node Frame Titles
@section Frame Titles
@cindex frame title

  それぞれのフレームには@code{name}というパラメーターがあります。これは、ウィンドウシステムが通常フレーム上端に表示するフレームタイトルにたいする、デフォルトとしての役割をもちます。フレームプロパティ@code{name}をセットすることにより、明示的に名前を指定できます。

  通常は名前を明示的に指定せず、Emacsが変数@code{frame-title-format}に格納されたテンプレートにもとづき、自動的にフレーム名を計算します。Emacsはフレームが再表示されるたびに、毎回名前を再計算します。

@defvar frame-title-format
この変数は、フレーム名が明示的に指定されないときに、フレーム名を計算する方法を指定する。この変数の値は、実際には@code{mode-line-format}のようなモードライン構成(mode
line construct)だが、@samp{%c}および@samp{%l}の構成は無視される。@ref{Mode Line Data}を参照のこと。
@end defvar

@defvar icon-title-format
この変数は、フレームタイトルを明示的に指定しないときの、アイコン化されたフレームの名前の計算方法を指定する。このタイトルはアイコン自体に表示される。
@end defvar

@defvar multiple-frames
この変数はEmacsにより自動的にセットされる。フレームが2つ以上(ミニバッファーのみのフレームと不可視のフレームは勘定に入らない)のとき、値は@code{t}となる。@code{frame-title-format}のデフォルト値は、フレームが複数存在する場合のみ、フレーム名にバッファー名を入れるために、@code{multiple-frames}を使用する。

この変数の値は、@code{frame-title-format}と@code{icon-title-format}の処理中を除き、正確である保証はない。
@end defvar

@node Deleting Frames
@section Deleting Frames
@cindex deleting frames

  @dfn{生きたフレーム(live
frame)}とは、削除されていないフレームのことです。フレームが削除される際は、たとえそれへの参照元がなくなるまでLispオブジェクトとして存在し続けるとしても、端末ディスプレイからは削除されます。

@deffn Command delete-frame &optional frame force
@vindex delete-frame-functions
この関数は、フレーム@var{frame}を削除する。@var{frame}がツールチップでなければ、まずフック@code{delete-frame-functions}を実行する(フックの各関数は唯一の引数として@var{frame}を受け取る)。デフォルトでは、@var{frame}は選択されたフレームである。

ミニバッファーが別のフレームに使用されているフレームは削除できない。通常、他のフレームすべてが不可視の場合、フレームは削除できないが、@var{force}が非@code{nil}なら、削除が可能になる。
@end deffn

@defun frame-live-p frame
関数@code{frame-live-p}は、フレーム@var{frame}が削除されていなければ、非@code{nil}をリターンする。リターンされ得る非@code{nil}の値は、@code{framep}と同様である。@ref{Frames}を参照のこと。
@end defun

  いくつかのウィンドウマネージャーは、ウィンドウを削除するコマンドを提供します。これらは、そのウィンドウを操作するプログラムに特別なメッセージを送ることにより機能します。Emacsがそれらメッセージのいずれかを受け取ったときは、@code{delete-frame}イベントを生成します。このイベントの通常の定義は、関数@code{delete-frame}を呼び出すコマンドです。@ref{Misc
Events}を参照してください。

@node Finding All Frames
@section Finding All Frames
@cindex frames, scanning all

@defun frame-list
この関数は、すべての生きたフレーム(削除されていないフレーム)のリストをリターンする。これはバッファーにたいする@code{buffer-list}に類似しており、すべての端末上のフレームが含まれる。リターンされるリストは新たに作成されたものであり、このリストを変更してもEmacs内部への影響はない。
@end defun

@defun visible-frame-list
この関数はカレントで可視なフレームだけのリストをリターンする。@xref{Visibility of
Frames}を参照のこと。テキスト端末上のフレームは、実際に表示されるのが選択されたフレームだけだとしても、常に``可視''であるとみなされる。
@end defun

@defun next-frame &optional frame minibuf
この関数は、カレントディスプレイ上そすべてのフレームを、任意のフレームを開始点としいぇ巡回するのに便利である。これは、そのその巡回サイクル上で@var{frame}の``次''に該当するフレームをリターンする。@var{frame}が省略または@code{nil}の場合のデフォルトは、選択されたフレーム(@ref{Input
Focus}を参照)である。

2つ目の引数@var{minibuf}は、どのフレームを考慮するかを示す:

@table @asis
@item @code{nil}
ミニバッファーのみのフレームを除外。
@item @code{visible}
すべての可視フレームを考慮する。
@item 0
すべての可視およびアイコン化されたフレームを考慮する。
@item ウィンドウ
特定のウィンドウをミニバッファーとして使用するフレームだけを考慮する。
@item その他
すべてのフレームを考慮する。
@end table
@end defun

@defun previous-frame &optional frame minibuf
@code{next-frame}と同様だが、すべてのフレームを逆方向に巡回する。
@end defun

  @ref{Cyclic Window
Ordering}の@code{next-window}と@code{previous-window}も参照してください。

@node Minibuffers and Frames
@section Minibuffers and Frames

通常は、それぞれのフレームは下端に自身のミニバッファーウィンドウをもち、そのフレームが選択された際は常にそれを使用します。フレームにミニバッファーがある場合は、@code{minibuffer-window}でそれを取得できます(@ref{Definition
of minibuffer-window}を参照)。

@cindex frame without a minibuffer
しかし、ミニバッファーのないフレームの作成も可能です。そのようなフレームは、別のフレームのミニバッファーウィンドウを使用しなければなりません。フレーム作成時に、(別フレーム上にある)使用するミニバッファーを明示的に指定できます。これを行わない場合は、変数@code{default-minibuffer-frame}の値のフレーム内でミニバッファーを探します。この値は、ミニバッファーをもつフレームにしてください。

ミニバッファーのみのフレームを使用する場合は、ミニバッファーにエンター時にそのフレームを前面に移動(raise)したいと思うかもしれません。その場合は、変数@code{minibuffer-auto-raise}に@code{t}をセットします。@ref{Raising
and Lowering}を参照してください。

@defvar default-minibuffer-frame
この変数は、デフォルトでミニバッファーウィンドウとして使用するフレームを指定する。これは、既存のフレームには影響しない。これはカレント端末にたいして常にローカルで、バッファーローカルにはできない。@ref{Multiple
Terminals}を参照のこと。
@end defvar

@node Input Focus
@section Input Focus
@cindex input focus
@c @cindex selected frame    Duplicates selected-frame, same for selected-window.

どんなときでも、Emacs内のただ1つのフレームが@dfn{選択されたフレーム(selected
frame)}です。選択されたウィンドウは、常に選択されたフレーム上にあります。

Emacsがフレームを複数端末(@ref{Multiple
Terminals}を参照)上に表示する際、各端末は自身の選択されたフレームをもちます。しかし、それらのうち1つだけが、``@emph{いわゆる}選択されたフレーム''であり、それはもっとも最近に入力があった端末に属すフレームです。つまり、特定の端末からのコマンドをEmacsが実行する際は、その端末上の1つが選択されたフレームです。Emacsが実行するコマンドは常に1つだけなので、選択されたフレームは常に1つだけだと考える必要があります。このフレームこそ、このマニュアルで@dfn{選択されたフレーム}と呼ぶフレームです。選択されたフレームを表示するディスプレイは、@dfn{選択されたフレームのディスプレイ(selected
frame's display)}です。

@defun selected-frame
この関数は選択されたフレームをリターンする。
@end defun

いくつかのウィンドウシステムおよびウィンドウマネージャーは、マウスがあるウィンドウオブジェクトにキーボード入力をダイレクトします。それ以外は、さまざまなウィンドウオブジェクトに@dfn{フォーカスをシフト(shift
the
focus)}するために、明示的なクリックやコマンドを要求します。どちらの方法でも、Emacsはフォーカスをもつフレームを自動的に追跡します。Lisp関数から別フレームに明示的に切り替えるためには、@code{select-frame-set-input-focus}を呼び出します。

関数@code{select-frame}を呼び出すことにより、Lispプログラムが``一時的''にフレームを切り替えることもできます。これは、そのウィンドウシステムのフォーカス概念を変更はしません。変更ではなく、何らかの方法により制御が再確認(reasserted)されるまで、ウィンドウマネージャーの制御から抜け出す(escape)のです。

テキスト端末使用時は、その端末上で一度に表示できるフレームは1つだけなので、@code{select-frame}呼び出し後、次回の再表示で新たに選択されたフレームが実際に表示されます。このフレームは、次の@code{select-frame}呼び出しまで、選択されたままです。テキスト端末上の各フレームは、バッファー名の前に表示される番号をもちます(@ref{Mode
Line Variables}を参照)。

@defun select-frame-set-input-focus frame &optional norecord
この関数は、@var{frame}を選択、(他のフレームのせいで不明瞭な場合には)それを前面に移動(raise)して、Xサーバーのフォーカス授与を試みる。テキスト端末上では、次回再表示時に端末スクリーン全体に新たにフレームが表示される。オプション引数@var{norecord}は、@code{select-frame}(下記参照)のときと同じ意味をもつ。この関数のリターン値に意味はない。
@end defun

@deffn Command select-frame frame &optional norecord
この関数は、フレーム@var{frame}を選択し、Xサーバーのフォーカスがあればそれを一時的に無視する。@var{frame}にたいする選択は、次回ユーザーが別フレームに何かを行うか、この関数の次回呼び出しまで継続する(ウィンドウシステムを使用する場合は、以前に選択されていたフレームに依然としてウィンドウシステムの入力フォーカスがあるかもしれないので、コマンドループからリターン後に、そのフレームが選択されたフレームとしてリストアされるかもしれない)。

指定された@var{frame}は選択されたフレームとなり、その端末が選択された端末になる。その後、この関数は@var{frame}内で選択されていたウィンドウを第1引数、@var{norecord}を第2引数でサブルーチンとして@code{select-window}を呼び出す(したがって、@var{norecord}が非@code{nil}なら、もっとも最近に選択されたウィンドウおよびバッファーリストの変更を避ける)。@ref{Selecting
Windows}を参照のこと。

この関数は@var{frame}、または@var{frame}が削除されていれば@code{nil}をリターンする。

一般的には、実行後に端末を戻すよう切り替えることなく、別の端末に切り替えるのが可能な手段として@code{select-frame}を決して使用すべきではない。
@end deffn

Emacsは、サーバーおよびウィンドウマネージャーのリクエストとしてフレーム選択をアレンジすることにより、ウィンドウシステムと協調します。これは、適切なときに@dfn{フォーカス(focus)}と呼ばれる特殊な入力イベントを生成することにより行われます。コマンドループは、@code{handle-switch-frame}を呼び出してフォーカスイベントを処理します。@ref{Focus
Events}を参照してください。

@deffn Command handle-switch-frame frame
この関数は、フレーム@var{frame}選択によりフォーカスイベントを処理する。

フォーカスイベントは通常、このコマンドを呼び出すことにより、その処理を行う。他の理由でこれを呼び出しではならない。
@end deffn

@defun redirect-frame-focus frame &optional focus-frame
この関数は、@var{frame}から@var{focus-frame}にフォーカスをリダイレクトする。これは、@var{frame}にかわって@var{focus-frame}が以降のキーストロークとイベントを受け取るであろうことを意味する。そのようなイベント後は、@code{last-event-frame}の値は@var{focus-frame}になるだろう。また、@var{frame}を指定したswitch-frameイベントも、かわりに
@var{focus-frame}を選択するだろう。

@var{focus-frame}が省略または@code{nil}の場合は、@var{frame}にたいするすべての既存のリダイレクションがキャンセルされ、したがって@var{frame}が自身のイベントを再度受け取ることになる。

フォーカスリダイレクトの用途の1つは、ミニバッファーをもたないフレームにたいしてである。これらのフレームは、別フレーム上のミニバッファーを使用する。別フレーム上のミニバッファーをアクティブにすることは、そのフレームにフォーカスをリダイレクトすることである。これは、たとえマウスがミニバッファーをアクティブにしたフレーム内に留まっていても、ミニバッファーが属すフレームにフォーカスを置く。

フレーム選択は、フォーカスリダイレクションの変更も可能にする。@code{foo}が選択されているときにフレーム@code{bar}を選択することにより、@code{foo}を指すすべてのリダイレクションは、かわりに@code{bar}を指す。これは、ユーザーが@code{select-window}を使用してあるフレームから別のフレームに切り替えた際に、フォーカスのリダイレクトが正しく機能することを可能にする。

これは、フォーカスが自身にリダイレクトされたフレームが、フォーカスがリダイレクトされていないフレームとは異なう扱いを受けることを意味する。前者にたいして@code{select-frame}は影響するが、後者には影響がない。

このリダイレクションは、それを変更するために@code{redirect-frame-focus}が呼び出されるまで継続する。
@end defun

@defvar focus-in-hook
これは、Emacsフレームが入力フォーカスを得た際に実行されるノーマルフックである。
@end defvar

@defvar focus-out-hook
これは、Emacsフレームが入力フォーカスを失った際に実行されるノーマルフックである。
@end defvar

@defopt focus-follows-mouse
これは、ユーザーがマウスを移動した際に、ウィンドウマネージャーがフォーカスを転送するかどうかをEmacsに告げるためのオプションである。非@code{nil}なら、フォーカスは転送される。その場合、コマンド@code{other-frame}は新たに選択されたフレームと一貫性のある位置にマウスを移動する。
@end defopt

@node Visibility of Frames
@section Visibility of Frames
@cindex visible frame
@cindex invisible frame
@cindex iconified frame
@cindex minimized frame
@cindex frame visibility

グラフィカルなディスプレイ上のフレームは@dfn{可視(visible)}、@dfn{不可視(invisible)}、または@dfn{アイコン化(iconified)}されているかもしれません。可視なら、そのコンテンツは通常の方法により表示されます。アイコン化されている場合、そのコンテンツは表示されませんが、ビュー内にフレームを戻すための小さいアイコンがどこかにあります(いくつかのウィンドウマネージャーは、この状態を@dfn{アイコン化}ではなく@dfn{最小化}と呼ぶが、Emacsの見地ではこれらは同等である)。フレームが不可視なら、それはまったく表示されません。

  テキスト端末では、いつでも実際に表示されるのはただ1つの選択されたフレームだけなので、可視性に意味はありません。

@defun frame-visible-p frame
この関数は、フレーム@var{frame}の可視性の状態をリターンする。値は、@var{frame}が可視なら@code{t}、不可視なら@code{nil}、アイコン化されている場合は@code{icon}になる。

テキスト端末上では、たとえ1つのフレームだけが表示されているとしても、この関数の目的にたいしては、すべてのフレームが``可視''とみなされる。@ref{Raising
and Lowering}を参照のこと。
@end defun

@deffn Command iconify-frame &optional frame
この関数は、フレーム@var{frame}をアイコン化する。@var{frame}を省略した場合は、選択されたフレームをアイコン化する。
@end deffn

@deffn Command make-frame-visible &optional frame
この関数は、フレーム@var{frame}を可視にする。@var{frame}を省略した場合は、選択されたフレームを可視にする。これはフレームを前面に移動しないが、望むなら@code{raise-frame}でそれを行うことができる(@ref{Raising
and Lowering}を参照)。
@end deffn

@deffn Command make-frame-invisible &optional frame force
この関数は、フレーム@var{frame}を不可視にする。@var{frame}を省略した場合は、選択されたフレームを不可視にする。

@var{force}が@code{nil}なら、この関数は他のすべてのフレームが不可視の場合は、@var{frame}を不可視にするのを拒絶する。
@end deffn

  フレームの可視性の状態は、フレームパラメーターとしても利用可能である。つまりフレームパラメーターとして読み取りと変更ができる。@ref{Management
Parameters}を参照のこと。ウィンドウマネージャーによりユーザーがフレームのアイコン化や非アイコン化を行うこともできる。これは、Emacsが何らかの制御を及ぼすのが可能なレベルより下のレベルにおいて発生するが、Emacsはそのような変化を追跡するために使用するイベントを提供する。@ref{Misc
Events}を参照のこと。

@node Raising and Lowering
@section Raising and Lowering Frames

@cindex raising a frame
@cindex lowering a frame
  ほとんどのウィンドウシステムは、デスクトップというメタファー(metaphor:
比喩的概念)を使用します。このメタファーの一部は、システムレベルのウィンドウ(Emacsではフレーム)が、スクリーン表面に向かって、概念的3次元の垂直方向に積まれていくというアイデアです。2つが重なる箇所では、より高い一方が、より低い一方を覆い隠します。関数@code{raise-frame}および@code{lower-frame}を使用して、フレームを@dfn{前面に移動(raise:
より高い位置へ上げる)}したり@dfn{背面に移動(lower: より低い位置へ移動)}したりすることができます。

@deffn Command raise-frame &optional frame
この関数は、フレーム@var{frame}(デフォルトは選択されたフレーム)を前面に移動する。@var{frame}が不可視もしくはアイコン化されている場合は、それを可視にする。
@end deffn

@deffn Command lower-frame &optional frame
この関数は、フレーム@var{frame}(デフォルトは選択されたフレーム)を背面に移動する。
@end deffn

@defopt minibuffer-auto-raise
これが非@code{nil}なら、ミニバッファーをアクティブにすることにより、ミニバッファーウィンドウのあるフレームが前面に移動される。
@end defopt

  ウィンドウシステム上では、フレームパラメーターを使用して、(フレーム選択時に)auto-raising、(フレーム選択解除時に)auto-loweringを有効にできます。@ref{Management
Parameters}を参照してください。

@cindex top frame
  フレームを前面または背面に移動するという概念は、テキスト端末のフレームにも適用できます。各テキスト端末上で、一度に表示されるのは、常に最前面のフレームだけです。

@defun tty-top-frame terminal
この関数は、@var{terminal}上の最前面のフレームをリターンする。@var{terminal}は端末オブジェクト、フレーム(そのフレームの端末を意味する)、または@code{nil}(選択されたフレームの端末を意味する)であること。これがテキスト端末を参照しなければ、リターン値は@code{nil}となる。
@end defun

@node Frame Configurations
@section Frame Configurations
@cindex frame configuration

  @dfn{フレーム構成(frame
configuration)}はフレームのカレント配置、すべてのプロパティ、および各ウィンドウのウィンドウ構成(@ref{Window
Configurations}を参照)を記録します。

@defun current-frame-configuration
この関数は、フレームのカレント配置およびそのコンテンツを記述するフレーム構成のリストをリターンする。
@end defun

@defun set-frame-configuration configuration &optional nodelete
この関数は、フレームの状態を@var{configuration}の記述にリストアする。しかし、この関数は削除されたフレームはリストアしない。

通常、この関数は@var{configuration}内にリストされない既存フレームすべてを削除する。しかし@var{nodelete}が非@code{nil}なら、希望しないそれらフレームはかわりにアイコン化される。
@end defun

@node Mouse Tracking
@section Mouse Tracking
@cindex mouse tracking
@c @cindex tracking the mouse   Duplicates track-mouse

  マウスを@dfn{トラック(track:
追跡)}するのが有用なことが時折あります。マウスのトラックとは、マウスの位置を示す何かを表示して、マウス移動とともにそのインジケーターを移動する、という意味です。効果的にマウスをトラックするためには、マウスが実際に移動するまで待機する手段が必要になります。

  マウスをトラックする便利なのは、マウスのモーション(motion:
移動)を表すイベントを問い合わせる方法です。その後は、そのイベントを待機することにより、モーションを待機できます。加えて、発生し得る他の類のイベントも、簡単に処理できます。ボタンのリリースのような何か他のイベントだけを待機してマウスを永久にトラックするは通常は望ましくないので、これは有用です。

@defspec track-mouse body@dots{}
このスペシャルフォームは、マウスモーションイベントの生成を有効にして、@var{body}を実行する。通常、@var{body}はモーションイベントを読み取るために@code{read-event}を使用し、それに対応して表示を変更する。マウスモーションイベントのフォーマットについては、@ref{Motion
Events}を参照のこと。

@code{track-mouse}の値は、@var{body}内の最後のフォームの値である。ボタンのリリースを示すup-event、またはトラックを止めるべきタイミングを意味する類のイベントを確認した際にはリターンするよう、@var{body}をデザインするべきである。
@end defspec

マウスモーションをトラックする通常の目的は、それ以降に発生するボタンのプッシュやリリースをカレント位置に示すことです。

多くの場合は、テキストプロパティ@code{mouse-face}(@ref{Special
Properties}を参照)を使用することにより、マウスをトラックする必要性を回避できます。これは、より低レベルで機能し、かつLispレベルのマウストラッキングよりスムーズに実行されます。

@ignore
@c These are not implemented yet.

These functions change the screen appearance instantaneously.  The
effect is transient, only until the next ordinary Emacs redisplay.  That
is OK for mouse tracking, since it doesn't make sense for mouse tracking
to change the text, and the body of @code{track-mouse} normally reads
the events itself and does not do redisplay.

@defun x-contour-region window beg end
This function draws lines to make a box around the text from @var{beg}
to @var{end}, in window @var{window}.
@end defun

@defun x-uncontour-region window beg end
This function erases the lines that would make a box around the text
from @var{beg} to @var{end}, in window @var{window}.  Use it to remove
a contour that you previously made by calling @code{x-contour-region}.
@end defun

@defun x-draw-rectangle frame left top right bottom
This function draws a hollow rectangle on frame @var{frame} with the
specified edge coordinates, all measured in pixels from the inside top
left corner.  It uses the cursor color, the one used for indicating the
location of point.
@end defun

@defun x-erase-rectangle frame left top right bottom
This function erases a hollow rectangle on frame @var{frame} with the
specified edge coordinates, all measured in pixels from the inside top
left corner.  Erasure means redrawing the text and background that
normally belong in the specified rectangle.
@end defun
@end ignore

@node Mouse Position
@section Mouse Position
@cindex mouse position
@cindex position of mouse

  関数@code{mouse-position}および@code{set-mouse-position}は、マウスのカレント位置にたいするアクセスを提供します。

@defun mouse-position
この関数は、マウス位置の記述をリターンする。値は@code{(@var{frame} @var{x}
. @var{y})}のような形式で、@var{x}と@var{y}は@var{frame}内部の左上隅から相対的な位置を文字単位で与える整数である。
@end defun

@defvar mouse-position-function
非@code{nil}なら、この変数の値は@code{mouse-position}にたいして呼び出される関数である。@code{mouse-position}はリターン直前には、自身の通常のリターン値を唯一の引数としてこの関数を呼び出し、それが何であれその関数がリターンしたものをリターンする。

このアブノーマルフックは、@file{xt-mouse.el}のようにLispレベルでマウス処理を行う必要があるパッケージのために存在する。
@end defvar

@defun set-mouse-position frame x y
この関数は、フレーム@var{frame}内の位置@var{x}、@var{y}に@dfn{マウスをワープ}させる。引数@var{x}と@var{y}は、@var{frame}内部の左上隅から相対的な位置を文字単位で与える整数である。@var{frame}が不可視なら、この関数は何も行わない。リターン値に意味はない。
@end defun

@defun mouse-pixel-position
この関数は@code{mouse-position}と似ているが、文字単位ではなくピクセル単位の座標をリターンする。
@end defun

@defun set-mouse-pixel-position frame x y
この関数は@code{set-mouse-position}のようにマウスをワープするが、@var{x}と@var{y}が文字単位ではなくピクセル単位であることを除く。これらの座標が、そのフレーム内にあることは要求されない。

@var{frame}が不可視なら、この関数は何も行わない。リターン値に意味はない。
@end defun

@defun frame-pointer-visible-p &optional frame
この述語関数は、@var{frame}上に表示されたマウスポインターが可視なら非@code{nil}、それ以外は@code{nil}をリターンする。@var{frame}が省略または@code{nil}なら、それは選択されたフレームを意味する。これは、@code{make-pointer-invisible}が@code{t}にセットされているとき有用である。これにより、ポインターが隠されていることを知ることができる。@ref{Mouse
Avoidance,,,emacs, The Emacs Manual}を参照のこと。
@end defun

@need 3000

@node Pop-Up Menus
@section Pop-Up Menus
@cindex menus, popup

  Lispプログラムはポップアップメニューを表示できるので、ユーザーはマウスで候補を選択できます。テキスト端末上では、マウスが利用不可なら、キーボードのモーションキー@kbd{C-n}、@kbd{C-p}、上矢印キー、下矢印キーで候補を選択できます。

@defun x-popup-menu position menu
この関数は、ポップアップメニューを表示して、ユーザーが何を選択したかの指標をリターンする。

引数@var{position}は、メニュー左上隅をスクリーン上どこに置くか指定する。これはマウスボタンイベント(ユーザーがボタンを操作した位置にメニューを置くよう告げる)、または以下の形式のリストのいずれかである:

@example
((@var{xoffset} @var{yoffset}) @var{window})
@end example

@noindent
ここで、@var{xoffset}と@var{yoffset}は@var{window}左上隅からピクセル単位で測られた座標である。@var{window}はウィンドウ、またはフレームかもしれない。

@var{position}が@code{t}の場合、それはマウスのカレント位置の使用を意味する(テキスト端末上でマウスが利用不可ならフレーム左上隅)。@var{position}が@code{nil}なら、それは実際にメニューをポップアップせずに、@var{menu}内で指定されたキーマップと等価なキーバインディングを事前に計算することを意味する。

引数@var{menu}は、メニュー内で何を表示するかを告げる。これはキーマップまたはキーマップのリストを指定できる(@ref{Menu
Keymaps}を参照)。この場合、リターン値はユーザー選択に対応するイベントのリストである。選択がサブメニュー内で発生した場合、このリストには複数の要素がある(@code{x-popup-menu}はそのイベントシーケンスにバインドされたコマンドを実際には実行しないことに注意)。テキスト端末、およびメニュータイトルをサポートするツールキットでは、@var{menu}がキーマップならタイトルは@var{menu}のプロンプト文字列、@var{menu}がキーマップのリストなら最初のキーマップのプロンプト文字列から取得される(@ref{Defining
Menus}を参照)。

かわりに、@var{menu}は以下の形式をもつこともできる:

@example
(@var{title} @var{pane1} @var{pane2}...)
@end example

@noindent
ここで、それぞれのpaneは以下の形式のリストである

@example
(@var{title} @var{item1} @var{item2}...)
@end example

それぞれ@var{item}は、コンスセル@code{(@var{line}
.
@var{value})}であること。ここで@var{line}は文字列、@var{value}は@var{line}が選択された場合にリターンされる値である。メニューキーマップと異なり、@code{nil}の@var{value}は選択不可のメニューアイテムを作成しない。かわりに、それぞれの@var{item}にコンスセルではなく文字列を指定できる。これは選択不可のメニューアイテムを作成する。

たとえば有効な選択からマウスを外してクリックしたり、@kbd{C-g}をタイプすることにより、有効な選択を行うことなくユーザーがメニューを取り除いた場合は、通常はquitして@code{x-popup-menu}はリターンしない。しかし、@var{position}がマウスボタンイベント(ユーザーがマウスでメニューを呼び出したことを示す)なら、quitは起こらず@code{x-popup-menu}はリターンする。
@end defun

  @strong{使用上の注意:
}メニューキーマップで定義したプレフィクスキー処理を行えるなら、メニューの表示に@code{x-popup-menu}を使用しないでください。メニューの実装にメニューキーマップを使用する場合は、@kbd{C-h
c}および@kbd{C-h
a}でメニュー内の個別アイテムの確認、およびそれらにたいするヘルプを提供できます。かわりに@code{x-popup-menu}を呼び出すコマンドを定義することによりメニューを実装した場合、ヘルプ機能はそのコマンド内部で何が起こっているか知ることができず、そのメニューアイテムのヘルプを何も与えられません。

  マウス移動によりサブメニュー間を切り替えるメニューバーのメカニズムは、それが@code{x-popup-menu}を呼び出すか確認するために、コマンドの定義を見ることができません。したがって、@code{x-popup-menu}を使用してサブメニューの実装を試みた場合、それは統合された方式でメニューバーとともに機能しません。メニューバーのすべてのサブメニューは、親メニューのメニューキーマップにより実装され、決して@code{x-popup-menu}で実装されないのは、これが理由です。@ref{Menu
Bar}を参照してください。

  メニューバーのサブメニューのコンテンツを変化させたい場合にも、その実装には依然としてメニューキーマップを使用するべきです。コンテンツを変化させるためには、必要に応じてメニューキーマップのコンテンツを更新するために、フック関数を@code{menu-bar-update-hook}に追加してください。

@node Dialog Boxes
@section Dialog Boxes
@cindex dialog boxes

  ダイアログボックスとはポップアップメニューの一種です。外見は多少異なり、常にフレーム中央に表示され、階層を1つしかもたず1つ以上のボタンがあります。ユーザーが``yes''、``no''、および別の少数の候補で応答ができる質問を尋ねるのが、ダイアログボックスの主な用途です。単一のボタンでは、ユーザーに重要な情報の確認を強いることもできます。関数@code{y-or-n-p}および@code{yes-or-no-p}は、マウスのクリックにより呼び出されたコマンドから呼び出された際は、キーボードのかわりにダイアログボックスを使用します。

@defun x-popup-dialog position contents &optional header
この関数は、ポップアップダイアログボックスを表示して、ユーザーが何を選択したかの指標をリターンする。引数@var{contents}は、提供するための候補を指定する。これは、以下のフォーマットをもつ:

@example
(@var{title} (@var{string} . @var{value})@dots{})
@end example

@noindent
これは、@code{x-popup-menu}にたいして単一paneを指定するリストのように見える。

リターン値は、選択された候補の@var{value}である。

@code{x-popup-menu}の場合と同様、このリストの要素はコンスセル@code{(@var{string}
. @var{value})}のかわりに、単なる文字列かもしれない。これは、選択不可のボックスを作成する。

このリスト内に@code{nil}がある場合、それは左手側と右手側のアイテムを分ける。つまり、@code{nil}より前のアイテムは左、@code{nil}より後のアイテムは右に表示される。リスト内に@code{nil}を含めない場合は、およそ半数づつが両サイドに表示される。

ダイアログボックスは、常にフレームの中央に表示される。引数@var{position}は、どのフレームかを指定する。可能な値は@code{x-popup-menu}の場合と同様だが、正確な座標や個別のウィンドウは問題ではなく、フレームだけが問題となる。

@var{header}が非@code{nil}ならボックスのフレームタイトルは@samp{Information}、それ以外は@samp{Question}になる。前者は@code{message-box}(@pxref{message-box}を参照)にたいして使用される(テキスト端末上ではボックスタイトルは表示されない)。

いくつかの構成では、Emacsは本当のダイアログボックスを表示できないので、かわりにフレーム中央のポップアップメニュー内に同じアイテムを表示する。

たとえばウィンドウマネージャーを使用して、有効な選択を行うことなくユーザーがダイアログボックスを取り除いた場合は、通常はquitして@code{x-popup-dialog}はリターンしない。
@end defun

@node Pointer Shape
@section Pointer Shape
@cindex pointer shape
@cindex mouse pointer shape

  テキストプロパティ@code{pointer}や、イメージならイメージプロパティ@code{:pointer}および@code{:map}を使用して、特定のテキストやイメージにたいしてマウスポインターのスタイルを指定できます。これらのプロパティに使用できる値は@code{text}(または@code{nil})、@code{arrow}、@code{hand}、@code{vdrag}、@code{hdrag}、@code{modeline}、@code{hourglass}です。@code{text}は、テキスト上で使用される、通常のマウスポインタースタイルを意味します。

  ウィンドウの空部分(void parts:
バッファーコンテンツのどの部分にも対応しない部分)の上では、マウスポインターは通常@code{arrow}スタイルを使用しますが、@code{void-text-area-pointer}をセットすることにより、異なるスタイルを指定できます。

@defopt void-text-area-pointer
この変数は、空テキストエリアにたいするマウスポインタースタイルを指定する。このエリアには、行末の後や、バッファー終端行の下が含まれる。デフォルトでは、@code{arrow}(non-text)ポインタースタイルを使用。
@end defopt

  Xを使用する際は、変数@code{x-pointer-shape}をセットすることにより、@code{text}の本当の外見を指定できます。

@defvar x-pointer-shape
この変数は、Emacsフレーム内で@code{text}ポインタースタイルに通常使用するポインターシェイプを指定する。
@end defvar

@defvar x-sensitive-text-pointer-shape
この変数は、マウスがマウスセンシティブテキスト上にあるときのポインターシェイプを指定する。
@end defvar

  これらの変数は、新たに作成されるフレームに影響します。通常これらは既存のフレームに効果はありませんが、フレームのマウスカラーのインストール時には、これら2つ変数のカレント値もインストールされます。@ref{Font
and Color Parameters}を参照してください。

  これらのポインターシェイプのいずれかを指定するために使用可能な値は、ファイル@file{lisp/term/x-win.el}内で定義されています。それらのリストを確認するには、@kbd{M-x
apropos @key{RET} x-pointer @key{RET}}を使用してください。

@node Window System Selections
@section Window System Selections
@cindex selection (for window systems)
@cindex clipboard
@cindex primary selection
@cindex secondary selection

  Xウィンドウシステムでは、異なるアプリケーション間のデータ転送は、@dfn{選択(selections)}により行われます。Xは任意の数の@dfn{選択タイプ(selection
types)}を定義し、それぞれが独自にデータを格納できます。しかし、一般的に使用されるのは@dfn{クリップボード(clipboard)}、@dfn{プライマリー選択(primary
selection)}、@dfn{セカンダリー選択(secondary
selection)}の3つだけです。これら3つの選択を使用するEmacsコマンドについては、@ref{Cut and Paste,, Cut and
Paste, emacs, The GNU Emacs
Manual}を参照してください。このセクションでは、X選択の読み取りとセットを行う、低レベル関数について説明します。

@deffn Command x-set-selection type data
この関数は、X選択をセットする。これは、選択タイプ@var{type}と、それに割り当てる値@var{data}の、2つの引数をとる。

@var{type}はシンボルであること。通常は@code{PRIMARY}、@code{SECONDARY}、@code{CLIPBOARD}のいずれかである。これらは、Xウィンドウシステムの慣例に対応する大文字のシンボル名である。@var{type}が@code{nil}なら、それは@code{PRIMARY}を意味する。

@var{data}が@code{nil}なら、それはその選択をクリアーすることを意味する。それ以外では、@var{data}は文字列、シンボル、整数(2つの整数からなるコンスかリスト)、オーバーレイ、同じバッファーを指す2つのマーカーのコンスを指定できる。オーバーレイとマーカーのペアは、そのオーバーレイまたはマーカー間のテキストを意味する。引数@var{data}には、非ベクターの選択の値のベクターも指定できる。

この関数は@var{data}をリターンする。
@end deffn

@defun x-get-selection &optional type data-type
この関数は、Emacsおよび別のXクライアントによりセットアップされた選択にアクセスする。これは@var{type}と@var{data-type}の、2つの引数をとる。@var{type}は選択のタイプで、デフォルトは@code{PRIMARY}。

@var{data-type}引数は、別のXクライアントから取得したrawデータをLispデータに変換するための、データ変換に使用する形式を指定する。意味のある値には@code{TEXT}、@code{STRING}、@code{UTF8_STRING}、@code{TARGETS}、@code{LENGTH}、@code{DELETE}、@code{FILE_NAME}、@code{CHARACTER_POSITION}、@code{NAME}、@code{LINE_NUMBER}、@code{COLUMN_NUMBER}、@code{OWNER_OS}、@code{HOST_NAME}、@code{USER}、@code{CLASS}、@code{ATOM}、@code{INTEGER}が含まれる(これらは、対応するX慣習の大文字シンボル名である)。@var{data-type}のデフォルトは@code{STRING}。
@end defun

@defopt selection-coding-system
この変数は、選択やクリップボードに読み書きする際のコーディングシステムを指定する。@ref{Coding
Systems}を参照してください。デフォルトは@code{compound-text-with-extensions}で、これはX11が通常使用するテキスト表現に変換する。
@end defopt

@cindex clipboard support (for MS-Windows)
EmacsがMS-Windows上で実行されている際は、一般的にX選択はサポートしませんが、クリップボードはサポートします。MS-Windowsでは、@code{x-get-selection}および@code{x-set-selection}は、テキストデータタイプだけをサポートします。クリップボードが他のタイプのデータを保持している場合、Emacsはクリップボードを空として扱います。

@node Drag and Drop
@section Drag and Drop
@cindex drag and drop

@vindex x-dnd-test-function
@vindex x-dnd-known-types
  ユーザーが別のアプリケーションからEmacsに何かをドラッグをした際、その別アプリケーションはEmacsがドラッグされたデータを処理可能か告げることを期待します。変数@code{x-dnd-test-function}は、何を応答するか決定するために、Emacsにより使用されます。デフォルト値は@code{x-dnd-default-test-function}で、これはドロップされたデータのタイプが@code{x-dnd-known-types}内にあれば、ドロップを受け入れます。何か別の条件にもとづいてEmacsにドロップを許容または拒絶させたい場合は、@code{x-dnd-test-function}および/または@code{x-dnd-known-types}をカスタマイズできます。

@vindex x-dnd-types-alist
  Emacsが異なるタイプのドロップを処理する方法を変更したり、新たなタイプを追加したい場合は、@code{x-dnd-types-alist}をカスタマイズします。これには、他のアプリケーションがドラッグアンドドロップに使用するのが何のタイプなのか、詳細な知識が要求されます。

@vindex dnd-protocol-alist
  EmacsにURLがドロップされたとき、それはファイルかもしれませんが、他のURLタイプ(ftp、http、...)であるかもしれません。Emacsはまず、そのURLに何を行うべきか判断するために、@code{dnd-protocol-alist}をチェックします。それにマッチがなく、かつ@code{browse-url-browser-function}がalistなら、Emacsはそこでマッチを探します。それでもマッチが見つからなければ、そのURLにたいするテキストを挿入します。これらの変数をカスタマイズすれば、Emacsの挙動を変更できます。

@node Color Names
@section Color Names

@cindex color names
@cindex specify color
@cindex numerical RGB color specification
  カラー名(color
name)とは、カラーを指定するテキスト(通常は文字列)です。@samp{black}、@samp{white}、@samp{red}等が指定できます。定義された名前のリストは、@kbd{M-x
list-colors-display}を使用して確認できます。@samp{#@var{rgb}}や@samp{RGB:@var{r}/@var{g}/@var{b}}のような、数値的な形式でカラーを指定することもできます。ここで、@var{r}は赤(red)、@var{g}は緑(green)、@var{b}は青(blue)のレベルを指定します。1桁、2桁、3桁、または4桁の16進数を@var{r}に使用できます。その後、@var{g}と@var{b}には同じ桁数の16進数を同様に使用しなければなりません。これにより、総桁数が3､6､9､または12桁の16進数となります(カラーの数値的なRGB指定についての詳細は、Xウィンドウシステムのドキュメントを参照されたい)。

  以下の関数は、有効なカラー名と、それらの外見を判断する手段を提供します。以下で説明するように、その値は@dfn{選択されたフレーム(selected
frame)}に依存する場合があります。``選択されたフレーム''という用語の意味については、@ref{Input Focus}を参照してください。

  補完付きでカラー名のユーザー入力を読み取るには、@code{read-color}を使用します(@ref{High-Level Completion,
read-color}を参照)。

@defun color-defined-p color &optional frame
この関数は、カラー名が有意かどうかを報告する。もし有意なら@code{t}、それ以外は@code{nil}をリターンする。引数@var{frame}は、どのフレームの表示にたいして問い合わせるかを指定する。@var{frame}が省略または@code{nil}の場合は、選択されたフレームが使用される。

これは、使用しているディスプレイがそのカラーをサポートするかどうかは告げないことに注意。X使用時には、すべての種類のディスプレイ上のすべての定義されたカラーを問い合わせることができ、何らかの結果(通常は可能な限り近いカラー)を得ることができるでしょう。あるフレームが特定のカラーを実際に表示できるかどうか判断するためには、@code{color-supported-p}(以下参照)を使用してください。

@findex x-color-defined-p
この関数は、以前は@code{x-color-defined-p}と呼ばれており、その名前は今でもエイリアスとしてサポートされている。
@end defun

@defun defined-colors &optional frame
この関数は、@var{frame}(デフォルトは選択されたフレーム)上で定義かつサポートされるカラー名のリストをリターンする。@var{frame}がカラーをサポートしなければ、値は@code{nil}となる。

@findex x-defined-colors
この関数は、以前は@code{x-defined-colors}と呼ばれており、その名前は今でもエイリアスとしてサポートされている。
@end defun

@defun color-supported-p color &optional frame background-p
これは、@var{frame}が実際にカラー@var{color}(または最低でもそれに近いカラー)を表示可能なら@code{t}をリターンする。@var{frame}が省略または@code{nil}なら、この問いは選択されたフレームに適用される。

フォアグラウンドおよびバックグラウンドにたいして異なるカラーセットをサポートする端末がいくつかある。@var{background-p}が非@code{nil}の場合、それは@var{color}がバックグラウンドとして、それ以外はフォアグラウンドとして使用可能かどうかを問うことを意味する。

引数@var{color}は、有効なカラー名でなければならない。
@end defun

@defun color-gray-p color &optional frame
これは、@var{color}が@var{frame}のディスプレイ上の定義として、グレイスケールなら@code{t}をリターンする。@var{frame}が省略または@code{nil}なら、この問いは選択されたフレームに適用される。@var{color}が有効なカラー名でなければ、この関数は@code{nil}をリターンする。
@end defun

@defun color-values color &optional frame
@cindex rgb value
この関数は、@var{frame}上で理想的には@var{color}がどのように見えるべきかを記述する値をリターンする。@var{color}が定義済みの場合、値は赤、緑、青の割合を与える3つの整数からなるリストである。それぞれの整数の範囲は原則として0から65535だが、この範囲全体を使用しないディスプレイもいくつか存在するだろう。この3要素のリストは、カラーの@dfn{RGB値(rgb
values)}と呼ばれる。

@var{color}が未定義なら、値は@code{nil}である。

@example
(color-values "black")
     @result{} (0 0 0)
(color-values "white")
     @result{} (65280 65280 65280)
(color-values "red")
     @result{} (65280 0 0)
(color-values "pink")
     @result{} (65280 49152 51968)
(color-values "hungry")
     @result{} nil
@end example

カラーの値は、@var{frame}のディスプレイにたいしてリターンされる。@var{frame}が省略または@code{nil}の場合、この情報は選択されたフレームのディスプレイにたいしてリターンされる。このフレームがカラーを表示できない場合、値は@code{nil}となる。

@findex x-color-values
この関数は、以前は@code{x-color-values}と呼ばれており、その名前は今でもエイリアスとしてサポートされている。
@end defun

@node Text Terminal Colors
@section Text Terminal Colors
@cindex colors on text terminals

  Text terminals usually support only a small number of colors, and the
computer uses small integers to select colors on the terminal.  This means
that the computer cannot reliably tell what the selected color looks like;
instead, you have to inform your application which small integers correspond
to which colors.  However, Emacs does know the standard set of colors and
will try to use them automatically.

  The functions described in this section control how terminal colors are used
by Emacs.

  Several of these functions use or return @dfn{rgb values}, described in
@ref{Color Names}.

  These functions accept a display (either a frame or the name of a terminal)
as an optional argument.  We hope in the future to make Emacs support
different colors on different text terminals; then this argument will
specify which terminal to operate on (the default being the selected frame's
terminal; @pxref{Input Focus}).  At present, though, the @var{frame}
argument has no effect.

@defun tty-color-define name number &optional rgb frame
This function associates the color name @var{name} with color number
@var{number} on the terminal.

The optional argument @var{rgb}, if specified, is an rgb value, a list of
three numbers that specify what the color actually looks like.  If you do
not specify @var{rgb}, then this color cannot be used by
@code{tty-color-approximate} to approximate other colors, because Emacs will
not know what it looks like.
@end defun

@defun tty-color-clear &optional frame
This function clears the table of defined colors for a text terminal.
@end defun

@defun tty-color-alist &optional frame
This function returns an alist recording the known colors supported by a
text terminal.

Each element has the form @code{(@var{name} @var{number} . @var{rgb})} or
@code{(@var{name} @var{number})}.  Here, @var{name} is the color name,
@var{number} is the number used to specify it to the terminal.  If present,
@var{rgb} is a list of three color values (for red, green, and blue) that
says what the color actually looks like.
@end defun

@defun tty-color-approximate rgb &optional frame
This function finds the closest color, among the known colors supported for
@var{display}, to that described by the rgb value @var{rgb} (a list of color
values).  The return value is an element of @code{tty-color-alist}.
@end defun

@defun tty-color-translate color &optional frame
This function finds the closest color to @var{color} among the known colors
supported for @var{display} and returns its index (an integer).  If the name
@var{color} is not defined, the value is @code{nil}.
@end defun

@node Resources
@section X Resources

This section describes some of the functions and variables for querying and
using X resources, or their equivalent on your operating system.  @xref{X
Resources,, X Resources, emacs, The GNU Emacs Manual}, for more information
about X resources.

@defun x-get-resource attribute class &optional component subclass
The function @code{x-get-resource} retrieves a resource value from the X
Window defaults database.

Resources are indexed by a combination of a @dfn{key} and a @dfn{class}.
This function searches using a key of the form
@samp{@var{instance}.@var{attribute}} (where @var{instance} is the name
under which Emacs was invoked), and using @samp{Emacs.@var{class}} as the
class.

The optional arguments @var{component} and @var{subclass} add to the key and
the class, respectively.  You must specify both of them or neither.  If you
specify them, the key is
@samp{@var{instance}.@var{component}.@var{attribute}}, and the class is
@samp{Emacs.@var{class}.@var{subclass}}.
@end defun

@defvar x-resource-class
This variable specifies the application name that @code{x-get-resource}
should look up.  The default value is @code{"Emacs"}.  You can examine X
resources for application names other than ``Emacs'' by binding this
variable to some other string, around a call to @code{x-get-resource}.
@end defvar

@defvar x-resource-name
This variable specifies the instance name that @code{x-get-resource} should
look up.  The default value is the name Emacs was invoked with, or the value
specified with the @samp{-name} or @samp{-rn} switches.
@end defvar

To illustrate some of the above, suppose that you have the line:

@example
xterm.vt100.background: yellow
@end example

@noindent
in your X resources file (whose name is usually @file{~/.Xdefaults} or
@file{~/.Xresources}).  Then:

@example
@group
(let ((x-resource-class "XTerm") (x-resource-name "xterm"))
  (x-get-resource "vt100.background" "VT100.Background"))
     @result{} "yellow"
@end group
@group
(let ((x-resource-class "XTerm") (x-resource-name "xterm"))
  (x-get-resource "background" "VT100" "vt100" "Background"))
     @result{} "yellow"
@end group
@end example

@defvar inhibit-x-resources
If this variable is non-@code{nil}, Emacs does not look up X resources, and
X resources do not have any effect when creating new frames.
@end defvar

@node Display Feature Testing
@section Display Feature Testing
@cindex display feature testing

  The functions in this section describe the basic capabilities of a
particular display.  Lisp programs can use them to adapt their behavior to
what the display can do.  For example, a program that ordinarily uses a
popup menu could use the minibuffer if popup menus are not supported.

  The optional argument @var{display} in these functions specifies which
display to ask the question about.  It can be a display name, a frame (which
designates the display that frame is on), or @code{nil} (which refers to the
selected frame's display, @pxref{Input Focus}).

  @xref{Color Names}, @ref{Text Terminal Colors}, for other functions to
obtain information about displays.

@defun display-popup-menus-p &optional display
This function returns @code{t} if popup menus are supported on
@var{display}, @code{nil} if not.  Support for popup menus requires that the
mouse be available, since the menu is popped up by clicking the mouse on
some portion of the Emacs display.
@end defun

@defun display-graphic-p &optional display
This function returns @code{t} if @var{display} is a graphic display capable
of displaying several frames and several different fonts at once.  This is
true for displays that use a window system such as X, and false for text
terminals.
@end defun

@defun display-mouse-p &optional display
@cindex mouse, availability
This function returns @code{t} if @var{display} has a mouse available,
@code{nil} if not.
@end defun

@defun display-color-p &optional display
@findex x-display-color-p
This function returns @code{t} if the screen is a color screen.  It used to
be called @code{x-display-color-p}, and that name is still supported as an
alias.
@end defun

@defun display-grayscale-p &optional display
This function returns @code{t} if the screen can display shades of gray.
(All color displays can do this.)
@end defun

@defun display-supports-face-attributes-p attributes &optional display
@anchor{Display Face Attribute Testing}
This function returns non-@code{nil} if all the face attributes in
@var{attributes} are supported (@pxref{Face Attributes}).

The definition of `supported' is somewhat heuristic, but basically means
that a face containing all the attributes in @var{attributes}, when merged
with the default face for display, can be represented in a way that's

@enumerate
@item
different in appearance than the default face, and

@item
`close in spirit' to what the attributes specify, if not exact.
@end enumerate

Point (2) implies that a @code{:weight black} attribute will be satisfied by
any display that can display bold, as will @code{:foreground "yellow"} as
long as some yellowish color can be displayed, but @code{:slant italic} will
@emph{not} be satisfied by the tty display code's automatic substitution of
a `dim' face for italic.
@end defun

@defun display-selections-p &optional display
This function returns @code{t} if @var{display} supports selections.
Windowed displays normally support selections, but they may also be
supported in some other cases.
@end defun

@defun display-images-p &optional display
This function returns @code{t} if @var{display} can display images.
Windowed displays ought in principle to handle images, but some systems lack
the support for that.  On a display that does not support images, Emacs
cannot display a tool bar.
@end defun

@defun display-screens &optional display
This function returns the number of screens associated with the display.
@end defun

@defun display-pixel-height &optional display
This function returns the height of the screen in pixels.  On a character
terminal, it gives the height in characters.

For graphical terminals, note that on ``multi-monitor'' setups this refers
to the pixel height for all physical monitors associated with
@var{display}.  @xref{Multiple Terminals}.
@end defun

@defun display-pixel-width &optional display
This function returns the width of the screen in pixels.  On a character
terminal, it gives the width in characters.

For graphical terminals, note that on ``multi-monitor'' setups this refers
to the pixel width for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defun display-mm-height &optional display
This function returns the height of the screen in millimeters, or @code{nil}
if Emacs cannot get that information.

For graphical terminals, note that on ``multi-monitor'' setups this refers
to the height for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defun display-mm-width &optional display
This function returns the width of the screen in millimeters, or @code{nil}
if Emacs cannot get that information.

For graphical terminals, note that on ``multi-monitor'' setups this refers
to the width for all physical monitors associated with @var{display}.
@xref{Multiple Terminals}.
@end defun

@defopt display-mm-dimensions-alist
This variable allows the user to specify the dimensions of graphical
displays returned by @code{display-mm-height} and @code{display-mm-width} in
case the system provides incorrect values.
@end defopt

@cindex backing store
@defun display-backing-store &optional display
This function returns the backing store capability of the display.  Backing
store means recording the pixels of windows (and parts of windows) that are
not exposed, so that when exposed they can be displayed very quickly.

Values can be the symbols @code{always}, @code{when-mapped}, or
@code{not-useful}.  The function can also return @code{nil} when the
question is inapplicable to a certain kind of display.
@end defun

@cindex SaveUnder feature
@defun display-save-under &optional display
This function returns non-@code{nil} if the display supports the SaveUnder
feature.  That feature is used by pop-up windows to save the pixels they
obscure, so that they can pop down quickly.
@end defun

@defun display-planes &optional display
This function returns the number of planes the display supports.  This is
typically the number of bits per pixel.  For a tty display, it is log to
base two of the number of colors supported.
@end defun

@defun display-visual-class &optional display
This function returns the visual class for the screen.  The value is one of
the symbols @code{static-gray} (a limited, unchangeable number of grays),
@code{gray-scale} (a full range of grays), @code{static-color} (a limited,
unchangeable number of colors), @code{pseudo-color} (a limited number of
colors), @code{true-color} (a full range of colors), and @code{direct-color}
(a full range of colors).
@end defun

@defun display-color-cells &optional display
This function returns the number of color cells the screen supports.
@end defun

  These functions obtain additional information about the window system in use
where Emacs shows the specified @var{display}.  (Their names begin with
@code{x-} for historical reasons.)

@defun x-server-version &optional display
This function returns the list of version numbers of the GUI window system
running on @var{display}, such as the X server on GNU and Unix systems.  The
value is a list of three integers: the major and minor version numbers of
the protocol, and the distributor-specific release number of the window
system software itself.  On GNU and Unix systems, these are normally the
version of the X protocol and the distributor-specific release number of the
X server software.  On MS-Windows, this is the version of the Windows OS.
@end defun

@defun x-server-vendor &optional display
This function returns the ``vendor'' that provided the window system
software (as a string).  On GNU and Unix systems this really means whoever
distributes the X server.  On MS-Windows this is the vendor ID string of the
Windows OS (Microsoft).

When the developers of X labeled software distributors as ``vendors'', they
showed their false assumption that no system could ever be developed and
distributed noncommercially.
@end defun

@ignore
@defvar x-no-window-manager
This variable's value is @code{t} if no X window manager is in use.
@end defvar
@end ignore

@ignore
@item
The functions @code{x-pixel-width} and @code{x-pixel-height} return the
width and height of an X Window frame, measured in pixels.
@end ignore
