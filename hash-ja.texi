@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1999, 2001-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Hash Tables
@chapter ハッシュテーブル
@cindex hash tables
@cindex lookup tables

  ハッシュテーブル(hash
table)は、非常に高速なルックアップテーブルの一種で、キーを対応する値にマップするという点では、alist(@ref{Association
Lists}を参照してください)に似ています。ハッシュテーブルは、以下の点でalistと異なります:

@itemize @bullet
@item
ハッシュテーブルでのルックアップ(lookup: 照合)は、巨大なテーブルにたいして非常に高速です ---
実際のところ、ルックアップに必要な時間は、そのテーブルにいくつの要素が格納されているかとは、基本的に@emph{無関係}です。ハッシュテーブルには多少の一定なオーバーヘッドがあるので、小さいテーブル(数十の要素)では、alistのほうが高速でしょう。

@item
ハッシュテーブル内の対応には、特定の順序はありません。

@item
2つのalistが共通の末尾(tail)を共有する方法のように、2つのハッシュテーブル間で構造を共有する方法はありません。
@end itemize

  Emacs
Lispは、それらを処理する一連の関数とともに、一般的な用途のハッシュテーブルデータ型を提供します。ハッシュテーブルは特別なプリント表現をもち、それは@samp{#s}と、その後にハッシュテーブルのプロパティーと内容お指定するリストが続きます。@ref{Creating
Hash}を参照してください。(用語``ハッシュ表記(hash
notation)''は、プリント表現の最初に@samp{#}を使用する、入力構文をもたないオブジェクトのことを指し、これは用語``ハッシュテーブル(hash
table)''にたいしては使用されません。@ref{Printed Representation}を参照してください。)

  obarray(オブジェクト配列)もハッシュテーブルの一種ですが、これらは異なる型のオブジェクトで、intern(インターン)されたシンボルを記録するためだけに使用されます(@ref{Creating
Symbols}を参照してください)。

@menu
* Creating Hash::            ハッシュテーブルを作成する関数。
* Hash Access::              ハッシュテーブルの内容の読み書き。
* Defining Hash::            新たな比較方法の定義。
* Other Hash::               その他。
@end menu

@node Creating Hash
@section ハッシュテーブルの作成
@cindex creating hash tables

  ハッシュテーブルを作成する基本的な関数は、@code{make-hash-table}です。

@defun make-hash-table &rest keyword-args
この関数は、指定された引数に対応する、新しいハッシュテーブルを作成します。引数は、キーワード(特別に認識される独自のシンボル)と、それに対応する値を交互に指定することにより構成されます。

@code{make-hash-table}では、いくつかのキーワードが意味をもちますが、実際に知る必要があるのは、@code{:test}と@code{:weakness}の2つだけです。

@table @code
@item :test @var{test}
これは、このハッシュテーブルにたいしてキーを照合する方法を指定します。デフォルトは@code{eql}であり、他の代替としては@code{eq}や@code{equal}があります:

@table @code
@item eql
キーが数字の場合、それらが@code{equal}であれば、つまり、それらの値が等しく、どちらも整数、あるいはどちらも浮動少数の場合は``同一''です。それ以外では、2つの別々のオブジェクトは、決して``同一''になりません。

@item eq
2つの個別のLispオブジェクトはすべて、``別''のキーです。

@item equal
2つの個別のLispオブジェクトにたいして、それらが@code{equal}の場合、``同一''のキーです。
@end table

@var{test}にたいして追加の選択肢を定義するために、@code{define-hash-table-test} (@ref{Defining
Hash}を参照してください)を使用することができます。

@item :weakness @var{weak}
ハッシュテーブルのweakness(強度)は、ハッシュテーブル内に存在するキーと値を、ガーベージコレクションから保護するかどうかを指定します。

値@var{weak}は、@code{nil}、@code{key}、@code{value}、@code{key-or-value}、@code{key-and-value}、または@code{t}(@code{key-and-value}のエイリアス)のうちの1つを指定しなければなりません。@var{weak}が@code{key}の場合、そのハッシュテーブルは、(キーが他の場所で参照されていなければ)ハッシュテーブルのキーがガーベージコレクトされるのを妨げません。ある特定のキーがガーベージコレクトされた場合、それに対応する連想は、ハッシュテーブルから削除されます。

@var{weak}が@code{value}の場合、そのハッシュテーブルは、(値が他の場所で参照されていなければ)ハッシュテーブルの値がガベージコレクトされるのを妨げません。あるP特定の値がガーベージコレクトされた場合、それに対応する連想は、ハッシュテーブルから削除されます。

@var{weak}が@code{key-and-value}(または@code{t})の場合、その連想を保護するために、キーと値の両方が生きていなければなりません。したがって、そのハッシュテーブルは、キーと値のどちらかをガーベージコレクトから守ることはしません。キーか値のどちらか一方がガーベージコレクトされたら、その連想は削除されます。

@var{weak}が@code{key-or-value}の場合、キーか値のどちらか一方で、その連想を保護することができます。したがって、キーと値の両方がガベージコレクトされたときだけ(それがハッシュテーブル自体にたいする参照でなければ)、ハッシュテーブルからその連想が削除されます。

@var{weak}にたいするデフォルトは@code{nil}なので、ハッシュテーブルから参照されているキーと値のすべては、ガーベージコレクションから保護されます。

@item :size @var{size}
これは、そのハッシュテーブルに連想を保管しようと計画している、連想の数にたいするヒントを指定します。数が概算で判っている場合、この方法でそれを指定することにより、処理を少し効率的にすることができます。小さすぎるサイズを指定した場合、そのハッシュテーブルは必要に応じて自動的に拡張子マスが、これを行なうには時間が余計にかかります。

デフォルトのサイズは65です。

@item :rehash-size @var{rehash-size}
ハッシュテーブルに連想を追加するとき、そのテーブルが``一杯(full)''の場合、テーブルは自動的に拡張します。この値は、そのときどれだけハッシュテーブルを拡張するかを指定します。

@var{rehash-size}が整数の場合(それは正であるべきです)、通常のサイズに@var{rehash-size}を加えることにより、ハッシュテーブルが拡張されます。@var{rehash-size}が浮動小数の場合(1より大きい方がよい)は、古いサイズにその数を乗じることにより、ガッシュテーブルが拡張されます。

デフォルト値は1.5です。

@item :rehash-threshold @var{threshold}
これは、ハッシュテーブルが``一杯(full)''(なのでもっと大きく拡張する必要がある)だと判断される基準を指定します。@var{threshold}の値は、1以下の、正の浮動小数点数であるべきです。実際のエントリー数が、通常のサイズにたいする指定した割合を超えた場合、そのハッシュテーブルは``一杯''になります。@var{threshold}のデフォルトは、0.8です。
@end table
@end defun

@defun makehash &optional test
この関数は@code{make-hash-table}と同じですが、異なるスタイルの引数リストを指定します。引数@var{test}は、キーを照合する方法を指定します。

この関数は時代遅れです。かわりに@code{make-hash-table}を使用してください。
@end defun

ハッシュテーブルのプリント表現を使用して、新しいハッシュテーブルを作成することもできます。指定されたハッシュテーブル内の各要素が、有効な入力構文(@ref{Printed
Representation}を参照してください)をもっていれば、Lispリーダーをこのプリント表現を読み取ることができます。たとえば以下は、値@code{val1}(シンボル)と@code{300}(数字)に関連づけられた、キー@code{key1}と@code{key2}(両方ともシンボル)を、新しいハッシュテーブルを指定します。

@example
#s(hash-table size 30 data (key1 val1 key2 300))
@end example

@noindent
ハッシュテーブルのプリント表現は、@samp{#s}と、その後の@samp{hash-table}で始まるリストにより構成されます。このリストの残りの部分は、そのハッシュテーブルのプロパティーと初期内容を指定する、0個以上のプロパティーと値のペアで構成されるべきです。プロパティーと値は、そのまま読み取られます。有効なプロパティー名は、@code{size}、@code{test}、@code{weakness}、@code{rehash-size}、@code{rehash-threshold}、および@code{data}です。@code{data}プロパティーは、初期ないようにたいするキーと値のペアのリストであるべきです。他のプロパティーは、上記で説明した@code{make-hash-table}のキーワード(@code{:size}、@code{:test}など)と同じ意味をもちます。

バッファーやフレームのような、入力構文をもたないオブジェクトを含む初期内容をもつハッシュテーブルを指定できないことに注意してください。そのようなオブジェクトは、ハッシュテーブルが作成された後に追加します。

@node Hash Access
@section ハッシュテーブルへのアクセス
@cindex accessing hash tables
@cindex hash table access

  このセクションでは、ハッシュテーブルにアクセスしたり、連想を保管する関数を説明します。一般的に、比較方法による制限がない限り、任意のLispオブジェクトをハッシュキーとして使用できます。

@defun gethash key table &optional default
この関数は@var{table}の@var{key}を照合して、それに関連づけられた@var{value} ---
@var{table}内に@var{key}をもつ連想が存在しない場合は@var{default} --- をreturnします。
@end defun

@defun puthash key value table
この関数は、@var{table}内に、値@var{value}をもつ@var{key}の連想を挿入します。@var{table}がすでに@var{key}の連想をもつ場合、@var{value}により古い連想値が置き換えられます。
@end defun

@defun remhash key table
この関数は、@var{table}に@var{key}の連想がある場合は、それを削除します。@var{key}が連想をもたない場合、@code{remhash}は何も行ないません。

@b{Common Lispに関する注意: }Common
Lispでは、@code{remhash}が実際に連想を削除したときは非@code{nil}、それ以外は@code{nil}をreturnします。Emacs
Lispでは、@code{remhash}は常に@code{nil}をreturnします。
@end defun

@defun clrhash table
この関数は、ハッシュテーブル@var{table}からすべての連想を削除するので、そのハッシュテーブルは空になります。これはハッシュテーブルの@dfn{クリーニング(clearing)}とも呼ばれます。

@b{Common Lispに関する注意: }Common
Lispでは、@code{clrhash}は空の@var{table}をreturnします。Emacs
Lispでは@code{nil}をreturnします。
@end defun

@defun maphash function table
@anchor{Definition of maphash}
この関数は、@var{table}内の各連想にたいして、1度ずつ@var{function}を呼び出します。関数@var{function}は2つの引数
--- @var{table}にリストされた@var{key}と、それに関連づけられた@var{value} ---
をとるべきです。@code{maphash}は@code{nil}をreturnします。
@end defun

@node Defining Hash
@section ハッシュの比較の定義
@cindex hash code
@cindex define hash comparisons

  @code{define-hash-table-test}により、キーを照合する新しい方法を定義できます。この機能を使用するには、ハッシュテーブルの動作方法と、@dfn{ハッシュコード(hash
code)}の意味を理解する必要があります。

  概念的にはハッシュテーブルを、1つの連想を保持できるスロットがたくさんある巨大な配列として考えることができます。キーを照合するには、まず@code{gethash}が、キーから整数のハッシュコード(hash
code)を計算します。配列内のインデックスを生成するために、@code{gethash}は、配列の長さにより、この整数のmoduloを得ます。それからキーが見つかったかどうか確認するために、そのスロット、もし必要なら近くのスロットを探します。

  したがってキー照合の新しい方法を定義するためには、キーからハッシュコードを計算する関数と、2つのキーを直接比較する関数の両方が必要です。

@defun define-hash-table-test name test-fn hash-fn
この関数は、@var{name}という名前の、新たなハッシュテーブルテストを定義します。

この方法で@var{name}を定義した後では、@code{make-hash-table}の引数@var{test}にこれを使用することができます。それを行なう場合、そのハッシュテーブルはキー値の比較に@var{test-fn}、キー値から``ハッシュコード''を計算するために@var{hash-fn}を使用することになります。

関数@var{test-fn}は2つの引数(2つのキー)をとり、それらが``同一''と判断されたときは非@code{nil}をreturnします。

関数@var{hash-fn}は1つの引数(キー)をとり、そのキーの``ハッシュコード''(整数)をreturnします。よい結果を得るために、この関数は負の整数を含む整数の全範囲を、ハッシュコードに使用するべきです。

指定された関数は、プロパティー@code{hash-table-test}の配下の、@var{name}というプロパティーリストに格納されます。そのプロパティーの値形式は、@code{(@var{test-fn}
@var{hash-fn})}です。
@end defun

@defun sxhash obj
この関数は、Lispオブジェクト@var{obj}にたいするハッシュコードをreturnします。return値は、@var{obj}と、それが指す別のLispオブジェクトの内容を表す整数です。

2つのオブジェクト@var{obj1}と@var{obj2}がequalの場合、@code{(sxhash
@var{obj1})}と@code{(sxhash @var{obj2})}は同じ整数になります。

2つのオブジェクトがequalでない場合、通常は@code{sxhash}がreturnする値は異なりますが、常に異なるとは限りません。稀にですが(運次第)、@code{sxhash}が同じ結果を与える、2つの異なって見えるオブジェクトに遭遇するかもしれません。
@end defun

  以下は、大の字小文字を区別しない、文字列のキーをもつハッシュテーブルを作成する例です。

@example
(defun case-fold-string= (a b)
  (eq t (compare-strings a nil nil b nil nil t)))
(defun case-fold-string-hash (a)
  (sxhash (upcase a)))

(define-hash-table-test 'case-fold
  'case-fold-string= 'case-fold-string-hash)

(make-hash-table :test 'case-fold)
@end example

  以下は、事前に定義されたテスト値@code{equal}と等価なテストを行なうハッシュテーブルを定義できるという例です。キーは任意のLispオブジェクトで、equalに見えるオブジェクトは、同じキーと判断されます。

@example
(define-hash-table-test 'contents-hash 'equal 'sxhash)

(make-hash-table :test 'contents-hash)
@end example

@node Other Hash
@section ハッシュテーブルのためのその他関数

  以下は、ハッシュテーブルに機能する他の関数です。

@defun hash-table-p table
この関数は、@var{table}がハッシュテーブルオブジェクトの場合は、非@code{nil}をreturnします。
@end defun

@defun copy-hash-table table
この関数は、@var{table}のコピーを作成してreturnします。そのテーブル自体がコピーされたものである場合だけ、キーと値が共有されます。
@end defun

@defun hash-table-count table
この関数は@var{table}内の実際のエントリー数をreturnします。
@end defun

@defun hash-table-test table
この関数は、ハッシュを行なう方法と、キーを比較する方法を指定するために、@var{table}が作成されたときに与えられた@var{test}の値をreturnします。@ref{Creating
Hash}の@code{make-hash-table}を参照してください。
@end defun

@defun hash-table-weakness table
この関数は、ハッシュテーブル@var{table}に指定された@var{weak}の値をreturnします。
@end defun

@defun hash-table-rehash-size table
この関数は、@var{table}のrehash-sizeをreturnします。
@end defun

@defun hash-table-rehash-threshold table
この関数は、@var{table}のrehash-thresholdをreturnします。
@end defun

@defun hash-table-size table
この関数は、@var{table}の現在の定義されたサイズをreturnします。
@end defun
