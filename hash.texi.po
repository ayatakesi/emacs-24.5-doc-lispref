# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-26 13:34+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: hash.texi.orig:5 hash.texi.orig:6
#, no-wrap
msgid "Hash Tables"
msgstr ""

#. type: cindex
#: hash.texi.orig:7
#, no-wrap
msgid "hash tables"
msgstr ""

#. type: cindex
#: hash.texi.orig:8
#, no-wrap
msgid "lookup tables"
msgstr ""

#. type: Plain text
#: hash.texi.orig:13
msgid ""
"A hash table is a very fast kind of lookup table, somewhat like an alist "
"(@pxref{Association Lists}) in that it maps keys to corresponding values.  "
"It differs from an alist in these ways:"
msgstr ""

#. type: itemize
#: hash.texi.orig:21
msgid ""
"Lookup in a hash table is extremely fast for large tables---in fact, the "
"time required is essentially @emph{independent} of how many elements are "
"stored in the table.  For smaller tables (a few tens of elements)  alists "
"may still be faster because hash tables have a more-or-less constant "
"overhead."
msgstr ""

#. type: itemize
#: hash.texi.orig:24
msgid "The correspondences in a hash table are in no particular order."
msgstr ""

#. type: itemize
#: hash.texi.orig:28
msgid ""
"There is no way to share structure between two hash tables, the way two "
"alists can share a common tail."
msgstr ""

#. type: Plain text
#: hash.texi.orig:38
msgid ""
"Emacs Lisp provides a general-purpose hash table data type, along with a "
"series of functions for operating on them.  Hash tables have a special "
"printed representation, which consists of @samp{#s} followed by a list "
"specifying the hash table properties and contents.  @xref{Creating Hash}.  "
"(Note that the term ``hash notation'', which refers to the initial @samp{#} "
"character used in the printed representations of objects with no read "
"representation, has nothing to do with the term ``hash table''.  "
"@xref{Printed Representation}.)"
msgstr ""

#. type: Plain text
#: hash.texi.orig:42
msgid ""
"Obarrays are also a kind of hash table, but they are a different type of "
"object and are used only for recording interned symbols (@pxref{Creating "
"Symbols})."
msgstr ""

#. type: node
#: hash.texi.orig:48 hash.texi.orig:50
#, no-wrap
msgid "Creating Hash"
msgstr ""

#. type: menuentry
#: hash.texi.orig:48
msgid "Functions to create hash tables."
msgstr ""

#. type: node
#: hash.texi.orig:48 hash.texi.orig:189
#, no-wrap
msgid "Hash Access"
msgstr ""

#. type: menuentry
#: hash.texi.orig:48
msgid "Reading and writing the hash table contents."
msgstr ""

#. type: node
#: hash.texi.orig:48 hash.texi.orig:238
#, no-wrap
msgid "Defining Hash"
msgstr ""

#. type: menuentry
#: hash.texi.orig:48
msgid "Defining new comparison methods."
msgstr ""

#. type: node
#: hash.texi.orig:48 hash.texi.orig:318
#, no-wrap
msgid "Other Hash"
msgstr ""

#. type: menuentry
#: hash.texi.orig:48
msgid "Miscellaneous."
msgstr ""

#. type: section
#: hash.texi.orig:51
#, no-wrap
msgid "Creating Hash Tables"
msgstr ""

#. type: cindex
#: hash.texi.orig:52
#, no-wrap
msgid "creating hash tables"
msgstr ""

#. type: Plain text
#: hash.texi.orig:56
msgid "The principal function for creating a hash table is @code{make-hash-table}."
msgstr ""

#. type: defun
#: hash.texi.orig:57
#, no-wrap
msgid "make-hash-table &rest keyword-args"
msgstr ""

#. type: defun
#: hash.texi.orig:62
msgid ""
"This function creates a new hash table according to the specified "
"arguments.  The arguments should consist of alternating keywords (particular "
"symbols recognized specially) and values corresponding to them."
msgstr ""

#. type: defun
#: hash.texi.orig:65
msgid ""
"Several keywords make sense in @code{make-hash-table}, but the only two that "
"you really need to know about are @code{:test} and @code{:weakness}."
msgstr ""

#. type: item
#: hash.texi.orig:67
#, no-wrap
msgid ":test @var{test}"
msgstr ""

#. type: table
#: hash.texi.orig:71
msgid ""
"This specifies the method of key lookup for this hash table.  The default is "
"@code{eql}; @code{eq} and @code{equal} are other alternatives:"
msgstr ""

#. type: item
#: hash.texi.orig:73
#, no-wrap
msgid "eql"
msgstr ""

#. type: table
#: hash.texi.orig:78
msgid ""
"Keys which are numbers are ``the same'' if they are @code{equal}, that is, "
"if they are equal in value and either both are integers or both are floating "
"point; otherwise, two distinct objects are never ``the same''."
msgstr ""

#. type: item
#: hash.texi.orig:79
#, no-wrap
msgid "eq"
msgstr ""

#. type: table
#: hash.texi.orig:81
msgid "Any two distinct Lisp objects are ``different'' as keys."
msgstr ""

#. type: item
#: hash.texi.orig:82
#, no-wrap
msgid "equal"
msgstr ""

#. type: table
#: hash.texi.orig:85
msgid ""
"Two Lisp objects are ``the same'', as keys, if they are equal according to "
"@code{equal}."
msgstr ""

#. type: table
#: hash.texi.orig:89
msgid ""
"You can use @code{define-hash-table-test} (@pxref{Defining Hash}) to define "
"additional possibilities for @var{test}."
msgstr ""

#. type: item
#: hash.texi.orig:90
#, no-wrap
msgid ":weakness @var{weak}"
msgstr ""

#. type: table
#: hash.texi.orig:93
msgid ""
"The weakness of a hash table specifies whether the presence of a key or "
"value in the hash table preserves it from garbage collection."
msgstr ""

#. type: table
#: hash.texi.orig:101
msgid ""
"The value, @var{weak}, must be one of @code{nil}, @code{key}, @code{value}, "
"@code{key-or-value}, @code{key-and-value}, or @code{t} which is an alias for "
"@code{key-and-value}.  If @var{weak} is @code{key} then the hash table does "
"not prevent its keys from being collected as garbage (if they are not "
"referenced anywhere else); if a particular key does get collected, the "
"corresponding association is removed from the hash table."
msgstr ""

#. type: table
#: hash.texi.orig:106
msgid ""
"If @var{weak} is @code{value}, then the hash table does not prevent values "
"from being collected as garbage (if they are not referenced anywhere else); "
"if a particular value does get collected, the corresponding association is "
"removed from the hash table."
msgstr ""

#. type: table
#: hash.texi.orig:112
msgid ""
"If @var{weak} is @code{key-and-value} or @code{t}, both the key and the "
"value must be live in order to preserve the association.  Thus, the hash "
"table does not protect either keys or values from garbage collection; if "
"either one is collected as garbage, that removes the association."
msgstr ""

#. type: table
#: hash.texi.orig:117
msgid ""
"If @var{weak} is @code{key-or-value}, either the key or the value can "
"preserve the association.  Thus, associations are removed from the hash "
"table when both their key and value would be collected as garbage (if not "
"for references from weak hash tables)."
msgstr ""

#. type: table
#: hash.texi.orig:120
msgid ""
"The default for @var{weak} is @code{nil}, so that all keys and values "
"referenced in the hash table are preserved from garbage collection."
msgstr ""

#. type: item
#: hash.texi.orig:121
#, no-wrap
msgid ":size @var{size}"
msgstr ""

#. type: table
#: hash.texi.orig:127
msgid ""
"This specifies a hint for how many associations you plan to store in the "
"hash table.  If you know the approximate number, you can make things a "
"little more efficient by specifying it this way.  If you specify too small a "
"size, the hash table will grow automatically when necessary, but doing that "
"takes some extra time."
msgstr ""

#. type: table
#: hash.texi.orig:129
msgid "The default size is 65."
msgstr ""

#. type: item
#: hash.texi.orig:130
#, no-wrap
msgid ":rehash-size @var{rehash-size}"
msgstr ""

#. type: table
#: hash.texi.orig:134
msgid ""
"When you add an association to a hash table and the table is ``full'', it "
"grows automatically.  This value specifies how to make the hash table "
"larger, at that time."
msgstr ""

#. type: table
#: hash.texi.orig:140
msgid ""
"If @var{rehash-size} is an integer, it should be positive, and the hash "
"table grows by adding that much to the nominal size.  If @var{rehash-size} "
"is floating point, it had better be greater than 1, and the hash table grows "
"by multiplying the old size by that number."
msgstr ""

#. type: table
#: hash.texi.orig:142
msgid "The default value is 1.5."
msgstr ""

#. type: item
#: hash.texi.orig:143
#, no-wrap
msgid ":rehash-threshold @var{threshold}"
msgstr ""

#. type: table
#: hash.texi.orig:149
msgid ""
"This specifies the criterion for when the hash table is ``full'' (so it "
"should be made larger).  The value, @var{threshold}, should be a positive "
"floating-point number, no greater than 1.  The hash table is ``full'' "
"whenever the actual number of entries exceeds this fraction of the nominal "
"size.  The default for @var{threshold} is 0.8."
msgstr ""

#. type: defun
#: hash.texi.orig:152
#, no-wrap
msgid "makehash &optional test"
msgstr ""

#. type: defun
#: hash.texi.orig:156
msgid ""
"This is equivalent to @code{make-hash-table}, but with a different style "
"argument list.  The argument @var{test} specifies the method of key lookup."
msgstr ""

#. type: defun
#: hash.texi.orig:158
msgid "This function is obsolete. Use @code{make-hash-table} instead."
msgstr ""

#. type: Plain text
#: hash.texi.orig:167
msgid ""
"You can also create a new hash table using the printed representation for "
"hash tables.  The Lisp reader can read this printed representation, provided "
"each element in the specified hash table has a valid read syntax "
"(@pxref{Printed Representation}).  For instance, the following specifies a "
"new hash table containing the keys @code{key1} and @code{key2} (both "
"symbols) associated with @code{val1} (a symbol) and @code{300} (a number) "
"respectively."
msgstr ""

#. type: example
#: hash.texi.orig:170
#, no-wrap
msgid "#s(hash-table size 30 data (key1 val1 key2 300))\n"
msgstr ""

#. type: Plain text
#: hash.texi.orig:184
msgid ""
"The printed representation for a hash table consists of @samp{#s} followed "
"by a list beginning with @samp{hash-table}.  The rest of the list should "
"consist of zero or more property-value pairs specifying the hash table's "
"properties and initial contents.  The properties and values are read "
"literally.  Valid property names are @code{size}, @code{test}, "
"@code{weakness}, @code{rehash-size}, @code{rehash-threshold}, and "
"@code{data}.  The @code{data} property should be a list of key-value pairs "
"for the initial contents; the other properties have the same meanings as the "
"matching @code{make-hash-table} keywords (@code{:size}, @code{:test}, etc.), "
"described above."
msgstr ""

#. type: Plain text
#: hash.texi.orig:188
msgid ""
"Note that you cannot specify a hash table whose initial contents include "
"objects that have no read syntax, such as buffers and frames.  Such objects "
"may be added to the hash table after it is created."
msgstr ""

#. type: section
#: hash.texi.orig:190
#, no-wrap
msgid "Hash Table Access"
msgstr ""

#. type: cindex
#: hash.texi.orig:191
#, no-wrap
msgid "accessing hash tables"
msgstr ""

#. type: cindex
#: hash.texi.orig:192
#, no-wrap
msgid "hash table access"
msgstr ""

#. type: Plain text
#: hash.texi.orig:198
msgid ""
"This section describes the functions for accessing and storing associations "
"in a hash table.  In general, any Lisp object can be used as a hash key, "
"unless the comparison method imposes limits.  Any Lisp object can also be "
"used as the value."
msgstr ""

#. type: defun
#: hash.texi.orig:199
#, no-wrap
msgid "gethash key table &optional default"
msgstr ""

#. type: defun
#: hash.texi.orig:203
msgid ""
"This function looks up @var{key} in @var{table}, and returns its associated "
"@var{value}---or @var{default}, if @var{key} has no association in "
"@var{table}."
msgstr ""

#. type: defun
#: hash.texi.orig:205
#, no-wrap
msgid "puthash key value table"
msgstr ""

#. type: defun
#: hash.texi.orig:209
msgid ""
"This function enters an association for @var{key} in @var{table}, with value "
"@var{value}.  If @var{key} already has an association in @var{table}, "
"@var{value} replaces the old associated value."
msgstr ""

#. type: defun
#: hash.texi.orig:211
#, no-wrap
msgid "remhash key table"
msgstr ""

#. type: defun
#: hash.texi.orig:215
msgid ""
"This function removes the association for @var{key} from @var{table}, if "
"there is one.  If @var{key} has no association, @code{remhash} does nothing."
msgstr ""

#. type: defun
#: hash.texi.orig:219
msgid ""
"@b{Common Lisp note:} In Common Lisp, @code{remhash} returns non-@code{nil} "
"if it actually removed an association and @code{nil} otherwise.  In Emacs "
"Lisp, @code{remhash} always returns @code{nil}."
msgstr ""

#. type: defun
#: hash.texi.orig:221
#, no-wrap
msgid "clrhash table"
msgstr ""

#. type: defun
#: hash.texi.orig:225
msgid ""
"This function removes all the associations from hash table @var{table}, so "
"that it becomes empty.  This is also called @dfn{clearing} the hash table."
msgstr ""

#. type: defun
#: hash.texi.orig:228
msgid ""
"@b{Common Lisp note:} In Common Lisp, @code{clrhash} returns the empty "
"@var{table}.  In Emacs Lisp, it returns @code{nil}."
msgstr ""

#. type: defun
#: hash.texi.orig:230
#, no-wrap
msgid "maphash function table"
msgstr ""

#. type: anchor{#1}
#: hash.texi.orig:236
msgid "Definition of maphash"
msgstr ""

#. type: defun
#: hash.texi.orig:236
msgid ""
"This function calls @var{function} once for each of the associations in "
"@var{table}.  The function @var{function} should accept two arguments---a "
"@var{key} listed in @var{table}, and its associated @var{value}.  "
"@code{maphash} returns @code{nil}."
msgstr ""

#. type: section
#: hash.texi.orig:239
#, no-wrap
msgid "Defining Hash Comparisons"
msgstr ""

#. type: cindex
#: hash.texi.orig:240
#, no-wrap
msgid "hash code"
msgstr ""

#. type: cindex
#: hash.texi.orig:241
#, no-wrap
msgid "define hash comparisons"
msgstr ""

#. type: Plain text
#: hash.texi.orig:246
msgid ""
"You can define new methods of key lookup by means of "
"@code{define-hash-table-test}.  In order to use this feature, you need to "
"understand how hash tables work, and what a @dfn{hash code} means."
msgstr ""

#. type: Plain text
#: hash.texi.orig:253
msgid ""
"You can think of a hash table conceptually as a large array of many slots, "
"each capable of holding one association.  To look up a key, @code{gethash} "
"first computes an integer, the hash code, from the key.  It reduces this "
"integer modulo the length of the array, to produce an index in the array.  "
"Then it looks in that slot, and if necessary in other nearby slots, to see "
"if it has found the key being sought."
msgstr ""

#. type: Plain text
#: hash.texi.orig:257
msgid ""
"Thus, to define a new method of key lookup, you need to specify both a "
"function to compute the hash code from a key, and a function to compare two "
"keys directly."
msgstr ""

#. type: defun
#: hash.texi.orig:258
#, no-wrap
msgid "define-hash-table-test name test-fn hash-fn"
msgstr ""

#. type: defun
#: hash.texi.orig:260
msgid "This function defines a new hash table test, named @var{name}."
msgstr ""

#. type: defun
#: hash.texi.orig:265
msgid ""
"After defining @var{name} in this way, you can use it as the @var{test} "
"argument in @code{make-hash-table}.  When you do that, the hash table will "
"use @var{test-fn} to compare key values, and @var{hash-fn} to compute a "
"``hash code'' from a key value."
msgstr ""

#. type: defun
#: hash.texi.orig:268
msgid ""
"The function @var{test-fn} should accept two arguments, two keys, and return "
"non-@code{nil} if they are considered ``the same''."
msgstr ""

#. type: defun
#: hash.texi.orig:273
msgid ""
"The function @var{hash-fn} should accept one argument, a key, and return an "
"integer that is the ``hash code'' of that key.  For good results, the "
"function should use the whole range of integers for hash codes, including "
"negative integers."
msgstr ""

#. type: defun
#: hash.texi.orig:277
msgid ""
"The specified functions are stored in the property list of @var{name} under "
"the property @code{hash-table-test}; the property value's form is "
"@code{(@var{test-fn} @var{hash-fn})}."
msgstr ""

#. type: defun
#: hash.texi.orig:279
#, no-wrap
msgid "sxhash obj"
msgstr ""

#. type: defun
#: hash.texi.orig:283
msgid ""
"This function returns a hash code for Lisp object @var{obj}.  This is an "
"integer which reflects the contents of @var{obj} and the other Lisp objects "
"it points to."
msgstr ""

#. type: defun
#: hash.texi.orig:286
msgid ""
"If two objects @var{obj1} and @var{obj2} are equal, then @code{(sxhash "
"@var{obj1})} and @code{(sxhash @var{obj2})} are the same integer."
msgstr ""

#. type: defun
#: hash.texi.orig:291
msgid ""
"If the two objects are not equal, the values returned by @code{sxhash} are "
"usually different, but not always; once in a rare while, by luck, you will "
"encounter two distinct-looking objects that give the same result from "
"@code{sxhash}."
msgstr ""

#. type: Plain text
#: hash.texi.orig:295
msgid ""
"This example creates a hash table whose keys are strings that are compared "
"case-insensitively."
msgstr ""

#. type: example
#: hash.texi.orig:301
#, no-wrap
msgid ""
"(defun case-fold-string= (a b)\n"
"  (eq t (compare-strings a nil nil b nil nil t)))\n"
"(defun case-fold-string-hash (a)\n"
"  (sxhash (upcase a)))\n"
"\n"
msgstr ""

#. type: example
#: hash.texi.orig:304
#, no-wrap
msgid ""
"(define-hash-table-test 'case-fold\n"
"  'case-fold-string= 'case-fold-string-hash)\n"
"\n"
msgstr ""

#. type: example
#: hash.texi.orig:306
#, no-wrap
msgid "(make-hash-table :test 'case-fold)\n"
msgstr ""

#. type: Plain text
#: hash.texi.orig:311
msgid ""
"Here is how you could define a hash table test equivalent to the predefined "
"test value @code{equal}.  The keys can be any Lisp object, and equal-looking "
"objects are considered the same key."
msgstr ""

#. type: example
#: hash.texi.orig:314
#, no-wrap
msgid ""
"(define-hash-table-test 'contents-hash 'equal 'sxhash)\n"
"\n"
msgstr ""

#. type: example
#: hash.texi.orig:316
#, no-wrap
msgid "(make-hash-table :test 'contents-hash)\n"
msgstr ""

#. type: section
#: hash.texi.orig:319
#, no-wrap
msgid "Other Hash Table Functions"
msgstr ""

#. type: Plain text
#: hash.texi.orig:322
msgid "Here are some other functions for working with hash tables."
msgstr ""

#. type: defun
#: hash.texi.orig:323
#, no-wrap
msgid "hash-table-p table"
msgstr ""

#. type: defun
#: hash.texi.orig:325
msgid "This returns non-@code{nil} if @var{table} is a hash table object."
msgstr ""

#. type: defun
#: hash.texi.orig:327
#, no-wrap
msgid "copy-hash-table table"
msgstr ""

#. type: defun
#: hash.texi.orig:330
msgid ""
"This function creates and returns a copy of @var{table}.  Only the table "
"itself is copied---the keys and values are shared."
msgstr ""

#. type: defun
#: hash.texi.orig:332
#, no-wrap
msgid "hash-table-count table"
msgstr ""

#. type: defun
#: hash.texi.orig:334
msgid "This function returns the actual number of entries in @var{table}."
msgstr ""

#. type: defun
#: hash.texi.orig:336
#, no-wrap
msgid "hash-table-test table"
msgstr ""

#. type: defun
#: hash.texi.orig:340
msgid ""
"This returns the @var{test} value that was given when @var{table} was "
"created, to specify how to hash and compare keys.  See "
"@code{make-hash-table} (@pxref{Creating Hash})."
msgstr ""

#. type: defun
#: hash.texi.orig:342
#, no-wrap
msgid "hash-table-weakness table"
msgstr ""

#. type: defun
#: hash.texi.orig:345
msgid ""
"This function returns the @var{weak} value that was specified for hash table "
"@var{table}."
msgstr ""

#. type: defun
#: hash.texi.orig:347
#, no-wrap
msgid "hash-table-rehash-size table"
msgstr ""

#. type: defun
#: hash.texi.orig:349
msgid "This returns the rehash size of @var{table}."
msgstr ""

#. type: defun
#: hash.texi.orig:351
#, no-wrap
msgid "hash-table-rehash-threshold table"
msgstr ""

#. type: defun
#: hash.texi.orig:353
msgid "This returns the rehash threshold of @var{table}."
msgstr ""

#. type: defun
#: hash.texi.orig:355
#, no-wrap
msgid "hash-table-size table"
msgstr ""

#. type: defun
#: hash.texi.orig:357
msgid "This returns the current nominal size of @var{table}."
msgstr ""
