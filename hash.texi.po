# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-10-18 18:01+0900\n"
"PO-Revision-Date: 2019-10-17 21:56+0900\n"
"Last-Translator: Takeshi Ayanokoji <takeshi.ayanokoji@gmail.com>\n"
"Language-Team: Japanese <takeshi.ayanokoji@gmail.com>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: original_texis/hash.texi:5 original_texis/hash.texi:6
#, no-wrap
msgid "Hash Tables"
msgstr "Hash Tables"

#. type: cindex
#: original_texis/hash.texi:7
#, no-wrap
msgid "hash tables"
msgstr "hash tables"

#. type: cindex
#: original_texis/hash.texi:8
#, no-wrap
msgid "lookup tables"
msgstr "lookup tables"

#. type: Plain text
#: original_texis/hash.texi:13
msgid "A hash table is a very fast kind of lookup table, somewhat like an alist (@pxref{Association Lists}) in that it maps keys to corresponding values.  It differs from an alist in these ways:"
msgstr "ハッシュテーブル(hash table)は、非常に高速なルックアップテーブルの一種で、キーを対応する値にマップするという点では、alist(@ref{Association Lists}を参照してください)に似ています。ハッシュテーブルは、以下の点でalistと異なります:"

#. type: itemize
#: original_texis/hash.texi:21
msgid "Lookup in a hash table is extremely fast for large tables---in fact, the time required is essentially @emph{independent} of how many elements are stored in the table.  For smaller tables (a few tens of elements)  alists may still be faster because hash tables have a more-or-less constant overhead."
msgstr "ハッシュテーブルでのルックアップ(lookup: 照合)は、巨大なテーブルにたいして非常に高速です --- 実際のところ、ルックアップに必要な時間は、そのテーブルにいくつの要素が格納されているかとは、基本的に@emph{無関係}です。ハッシュテーブルには多少の一定なオーバーヘッドがあるので、小さいテーブル(数十の要素)では、alistのほうが高速でしょう。"

#. type: itemize
#: original_texis/hash.texi:24
msgid "The correspondences in a hash table are in no particular order."
msgstr "ハッシュテーブル内の対応には、特定の順序はありません。"

#. type: itemize
#: original_texis/hash.texi:28
msgid "There is no way to share structure between two hash tables, the way two alists can share a common tail."
msgstr "2つのalistが共通の末尾(tail)を共有する方法のように、2つのハッシュテーブル間で構造を共有する方法はありません。"

#. type: Plain text
#: original_texis/hash.texi:38
msgid "Emacs Lisp provides a general-purpose hash table data type, along with a series of functions for operating on them.  Hash tables have a special printed representation, which consists of @samp{#s} followed by a list specifying the hash table properties and contents.  @xref{Creating Hash}.  (Note that the term ``hash notation'', which refers to the initial @samp{#} character used in the printed representations of objects with no read representation, has nothing to do with the term ``hash table''.  @xref{Printed Representation}.)"
msgstr "Emacs Lispは、それらを処理する一連の関数とともに、一般的な用途のハッシュテーブルデータ型を提供します。ハッシュテーブルは特別なプリント表現をもち、それは@samp{#s}と、その後にハッシュテーブルのプロパティーと内容お指定するリストが続きます。@ref{Creating Hash}を参照してください。(用語``ハッシュ表記(hash notation)''は、プリント表現の最初に@samp{#}を使用する、入力構文をもたないオブジェクトのことを指し、これは用語``ハッシュテーブル(hash table)''にたいしては使用されません。@ref{Printed Representation}を参照してください。)"

#. type: Plain text
#: original_texis/hash.texi:42
msgid "Obarrays are also a kind of hash table, but they are a different type of object and are used only for recording interned symbols (@pxref{Creating Symbols})."
msgstr "obarray(オブジェクト配列)もハッシュテーブルの一種ですが、これらは異なる型のオブジェクトで、intern(インターン)されたシンボルを記録するためだけに使用されます(@ref{Creating Symbols}を参照してください)。"

#. type: node
#: original_texis/hash.texi:48 original_texis/hash.texi:50
#, no-wrap
msgid "Creating Hash"
msgstr "Creating Hash"

#. type: menuentry
#: original_texis/hash.texi:48
msgid "Functions to create hash tables."
msgstr "ハッシュテーブルを作成する関数。"

#. type: node
#: original_texis/hash.texi:48 original_texis/hash.texi:189
#, no-wrap
msgid "Hash Access"
msgstr "Hash Access"

#. type: menuentry
#: original_texis/hash.texi:48
msgid "Reading and writing the hash table contents."
msgstr "ハッシュテーブルの内容の読み書き。"

#. type: node
#: original_texis/hash.texi:48 original_texis/hash.texi:238
#, no-wrap
msgid "Defining Hash"
msgstr "Defining Hash"

#. type: menuentry
#: original_texis/hash.texi:48
msgid "Defining new comparison methods."
msgstr "新たな比較方法の定義。"

#. type: node
#: original_texis/hash.texi:48 original_texis/hash.texi:318
#, no-wrap
msgid "Other Hash"
msgstr "Other Hash"

#. type: menuentry
#: original_texis/hash.texi:48
msgid "Miscellaneous."
msgstr "その他。"

#. type: section
#: original_texis/hash.texi:51
#, no-wrap
msgid "Creating Hash Tables"
msgstr "Creating Hash Tables"

#. type: cindex
#: original_texis/hash.texi:52
#, no-wrap
msgid "creating hash tables"
msgstr "creating hash tables"

#. type: Plain text
#: original_texis/hash.texi:56
msgid "The principal function for creating a hash table is @code{make-hash-table}."
msgstr "ハッシュテーブルを作成する基本的な関数は、@code{make-hash-table}です。"

#. type: defun
#: original_texis/hash.texi:57
#, no-wrap
msgid "make-hash-table &rest keyword-args"
msgstr "make-hash-table &rest keyword-args"

#. type: defun
#: original_texis/hash.texi:62
msgid "This function creates a new hash table according to the specified arguments.  The arguments should consist of alternating keywords (particular symbols recognized specially) and values corresponding to them."
msgstr "この関数は、指定された引数に対応する、新しいハッシュテーブルを作成します。引数は、キーワード(特別に認識される独自のシンボル)と、それに対応する値を交互に指定することにより構成されます。"

#. type: defun
#: original_texis/hash.texi:65
msgid "Several keywords make sense in @code{make-hash-table}, but the only two that you really need to know about are @code{:test} and @code{:weakness}."
msgstr "@code{make-hash-table}では、いくつかのキーワードが意味をもちますが、実際に知る必要があるのは、@code{:test}と@code{:weakness}の2つだけです。"

#. type: item
#: original_texis/hash.texi:67
#, no-wrap
msgid ":test @var{test}"
msgstr ":test @var{test}"

#. type: table
#: original_texis/hash.texi:71
msgid "This specifies the method of key lookup for this hash table.  The default is @code{eql}; @code{eq} and @code{equal} are other alternatives:"
msgstr "これは、このハッシュテーブルにたいしてキーを照合する方法を指定します。デフォルトは@code{eql}であり、他の代替としては@code{eq}や@code{equal}があります:"

#. type: item
#: original_texis/hash.texi:73
#, no-wrap
msgid "eql"
msgstr "eql"

#. type: table
#: original_texis/hash.texi:78
msgid "Keys which are numbers are ``the same'' if they are @code{equal}, that is, if they are equal in value and either both are integers or both are floating point; otherwise, two distinct objects are never ``the same''."
msgstr "キーが数字の場合、それらが@code{equal}であれば、つまり、それらの値が等しく、どちらも整数、あるいはどちらも浮動少数の場合は``同一''です。それ以外では、2つの別々のオブジェクトは、決して``同一''になりません。"

#. type: item
#: original_texis/hash.texi:79
#, no-wrap
msgid "eq"
msgstr "eq"

#. type: table
#: original_texis/hash.texi:81
msgid "Any two distinct Lisp objects are ``different'' as keys."
msgstr "2つの個別のLispオブジェクトはすべて、``別''のキーです。"

#. type: item
#: original_texis/hash.texi:82
#, no-wrap
msgid "equal"
msgstr "equal"

#. type: table
#: original_texis/hash.texi:85
msgid "Two Lisp objects are ``the same'', as keys, if they are equal according to @code{equal}."
msgstr "2つの個別のLispオブジェクトにたいして、それらが@code{equal}の場合、``同一''のキーです。"

#. type: table
#: original_texis/hash.texi:89
msgid "You can use @code{define-hash-table-test} (@pxref{Defining Hash}) to define additional possibilities for @var{test}."
msgstr "@var{test}にたいして追加の選択肢を定義するために、@code{define-hash-table-test} (@ref{Defining Hash}を参照してください)を使用することができます。"

#. type: item
#: original_texis/hash.texi:90
#, no-wrap
msgid ":weakness @var{weak}"
msgstr ":weakness @var{weak}"

#. type: table
#: original_texis/hash.texi:93
msgid "The weakness of a hash table specifies whether the presence of a key or value in the hash table preserves it from garbage collection."
msgstr "ハッシュテーブルのweakness(強度)は、ハッシュテーブル内に存在するキーと値を、ガーベージコレクションから保護するかどうかを指定します。"

#. type: table
#: original_texis/hash.texi:101
msgid "The value, @var{weak}, must be one of @code{nil}, @code{key}, @code{value}, @code{key-or-value}, @code{key-and-value}, or @code{t} which is an alias for @code{key-and-value}.  If @var{weak} is @code{key} then the hash table does not prevent its keys from being collected as garbage (if they are not referenced anywhere else); if a particular key does get collected, the corresponding association is removed from the hash table."
msgstr "値@var{weak}は、@code{nil}、@code{key}、@code{value}、@code{key-or-value}、@code{key-and-value}、または@code{t}(@code{key-and-value}のエイリアス)のうちの1つを指定しなければなりません。@var{weak}が@code{key}の場合、そのハッシュテーブルは、(キーが他の場所で参照されていなければ)ハッシュテーブルのキーがガーベージコレクトされるのを妨げません。ある特定のキーがガーベージコレクトされた場合、それに対応する連想は、ハッシュテーブルから削除されます。"

#. type: table
#: original_texis/hash.texi:106
msgid "If @var{weak} is @code{value}, then the hash table does not prevent values from being collected as garbage (if they are not referenced anywhere else); if a particular value does get collected, the corresponding association is removed from the hash table."
msgstr "@var{weak}が@code{value}の場合、そのハッシュテーブルは、(値が他の場所で参照されていなければ)ハッシュテーブルの値がガベージコレクトされるのを妨げません。あるP特定の値がガーベージコレクトされた場合、それに対応する連想は、ハッシュテーブルから削除されます。"

#. type: table
#: original_texis/hash.texi:112
msgid "If @var{weak} is @code{key-and-value} or @code{t}, both the key and the value must be live in order to preserve the association.  Thus, the hash table does not protect either keys or values from garbage collection; if either one is collected as garbage, that removes the association."
msgstr "@var{weak}が@code{key-and-value}(または@code{t})の場合、その連想を保護するために、キーと値の両方が生きていなければなりません。したがって、そのハッシュテーブルは、キーと値のどちらかをガーベージコレクトから守ることはしません。キーか値のどちらか一方がガーベージコレクトされたら、その連想は削除されます。"

#. type: table
#: original_texis/hash.texi:117
msgid "If @var{weak} is @code{key-or-value}, either the key or the value can preserve the association.  Thus, associations are removed from the hash table when both their key and value would be collected as garbage (if not for references from weak hash tables)."
msgstr "@var{weak}が@code{key-or-value}の場合、キーか値のどちらか一方で、その連想を保護することができます。したがって、キーと値の両方がガベージコレクトされたときだけ(それがハッシュテーブル自体にたいする参照でなければ)、ハッシュテーブルからその連想が削除されます。"

#. type: table
#: original_texis/hash.texi:120
msgid "The default for @var{weak} is @code{nil}, so that all keys and values referenced in the hash table are preserved from garbage collection."
msgstr "@var{weak}にたいするデフォルトは@code{nil}なので、ハッシュテーブルから参照されているキーと値のすべては、ガーベージコレクションから保護されます。"

#. type: item
#: original_texis/hash.texi:121
#, no-wrap
msgid ":size @var{size}"
msgstr ":size @var{size}"

#. type: table
#: original_texis/hash.texi:127
msgid "This specifies a hint for how many associations you plan to store in the hash table.  If you know the approximate number, you can make things a little more efficient by specifying it this way.  If you specify too small a size, the hash table will grow automatically when necessary, but doing that takes some extra time."
msgstr "これは、そのハッシュテーブルに連想を保管しようと計画している、連想の数にたいするヒントを指定します。数が概算で判っている場合、この方法でそれを指定することにより、処理を少し効率的にすることができます。小さすぎるサイズを指定した場合、そのハッシュテーブルは必要に応じて自動的に拡張子マスが、これを行なうには時間が余計にかかります。"

#. type: table
#: original_texis/hash.texi:129
msgid "The default size is 65."
msgstr "デフォルトのサイズは65です。"

#. type: item
#: original_texis/hash.texi:130
#, no-wrap
msgid ":rehash-size @var{rehash-size}"
msgstr ":rehash-size @var{rehash-size}"

#. type: table
#: original_texis/hash.texi:134
msgid "When you add an association to a hash table and the table is ``full'', it grows automatically.  This value specifies how to make the hash table larger, at that time."
msgstr "ハッシュテーブルに連想を追加するとき、そのテーブルが``一杯(full)''の場合、テーブルは自動的に拡張します。この値は、そのときどれだけハッシュテーブルを拡張するかを指定します。"

#. type: table
#: original_texis/hash.texi:140
msgid "If @var{rehash-size} is an integer, it should be positive, and the hash table grows by adding that much to the nominal size.  If @var{rehash-size} is floating point, it had better be greater than 1, and the hash table grows by multiplying the old size by that number."
msgstr "@var{rehash-size}が整数の場合(それは正であるべきです)、通常のサイズに@var{rehash-size}を加えることにより、ハッシュテーブルが拡張されます。@var{rehash-size}が浮動小数の場合(1より大きい方がよい)は、古いサイズにその数を乗じることにより、ガッシュテーブルが拡張されます。"

#. type: table
#: original_texis/hash.texi:142
msgid "The default value is 1.5."
msgstr "デフォルト値は1.5です。"

#. type: item
#: original_texis/hash.texi:143
#, no-wrap
msgid ":rehash-threshold @var{threshold}"
msgstr ":rehash-threshold @var{threshold}"

#. type: table
#: original_texis/hash.texi:149
msgid "This specifies the criterion for when the hash table is ``full'' (so it should be made larger).  The value, @var{threshold}, should be a positive floating-point number, no greater than 1.  The hash table is ``full'' whenever the actual number of entries exceeds this fraction of the nominal size.  The default for @var{threshold} is 0.8."
msgstr "これは、ハッシュテーブルが``一杯(full)''(なのでもっと大きく拡張する必要がある)だと判断される基準を指定します。@var{threshold}の値は、1以下の、正の浮動小数点数であるべきです。実際のエントリー数が、通常のサイズにたいする指定した割合を超えた場合、そのハッシュテーブルは``一杯''になります。@var{threshold}のデフォルトは、0.8です。"

#. type: defun
#: original_texis/hash.texi:152
#, no-wrap
msgid "makehash &optional test"
msgstr "makehash &optional test"

#. type: defun
#: original_texis/hash.texi:156
msgid "This is equivalent to @code{make-hash-table}, but with a different style argument list.  The argument @var{test} specifies the method of key lookup."
msgstr "この関数は@code{make-hash-table}と同じですが、異なるスタイルの引数リストを指定します。引数@var{test}は、キーを照合する方法を指定します。"

#. type: defun
#: original_texis/hash.texi:158
msgid "This function is obsolete. Use @code{make-hash-table} instead."
msgstr "この関数は時代遅れです。かわりに@code{make-hash-table}を使用してください。"

#. type: Plain text
#: original_texis/hash.texi:167
msgid "You can also create a new hash table using the printed representation for hash tables.  The Lisp reader can read this printed representation, provided each element in the specified hash table has a valid read syntax (@pxref{Printed Representation}).  For instance, the following specifies a new hash table containing the keys @code{key1} and @code{key2} (both symbols) associated with @code{val1} (a symbol) and @code{300} (a number) respectively."
msgstr "ハッシュテーブルのプリント表現を使用して、新しいハッシュテーブルを作成することもできます。指定されたハッシュテーブル内の各要素が、有効な入力構文(@ref{Printed Representation}を参照してください)をもっていれば、Lispリーダーをこのプリント表現を読み取ることができます。たとえば以下は、値@code{val1}(シンボル)と@code{300}(数字)に関連づけられた、キー@code{key1}と@code{key2}(両方ともシンボル)を、新しいハッシュテーブルを指定します。"

#. type: example
#: original_texis/hash.texi:170
#, no-wrap
msgid "#s(hash-table size 30 data (key1 val1 key2 300))\n"
msgstr "#s(hash-table size 30 data (key1 val1 key2 300))\n"

#. type: Plain text
#: original_texis/hash.texi:184
msgid "The printed representation for a hash table consists of @samp{#s} followed by a list beginning with @samp{hash-table}.  The rest of the list should consist of zero or more property-value pairs specifying the hash table's properties and initial contents.  The properties and values are read literally.  Valid property names are @code{size}, @code{test}, @code{weakness}, @code{rehash-size}, @code{rehash-threshold}, and @code{data}.  The @code{data} property should be a list of key-value pairs for the initial contents; the other properties have the same meanings as the matching @code{make-hash-table} keywords (@code{:size}, @code{:test}, etc.), described above."
msgstr "ハッシュテーブルのプリント表現は、@samp{#s}と、その後の@samp{hash-table}で始まるリストにより構成されます。このリストの残りの部分は、そのハッシュテーブルのプロパティーと初期内容を指定する、0個以上のプロパティーと値のペアで構成されるべきです。プロパティーと値は、そのまま読み取られます。有効なプロパティー名は、@code{size}、@code{test}、@code{weakness}、@code{rehash-size}、@code{rehash-threshold}、および@code{data}です。@code{data}プロパティーは、初期ないようにたいするキーと値のペアのリストであるべきです。他のプロパティーは、上記で説明した@code{make-hash-table}のキーワード(@code{:size}、@code{:test}など)と同じ意味をもちます。"

#. type: Plain text
#: original_texis/hash.texi:188
msgid "Note that you cannot specify a hash table whose initial contents include objects that have no read syntax, such as buffers and frames.  Such objects may be added to the hash table after it is created."
msgstr "バッファーやフレームのような、入力構文をもたないオブジェクトを含む初期内容をもつハッシュテーブルを指定できないことに注意してください。そのようなオブジェクトは、ハッシュテーブルが作成された後に追加します。"

#. type: section
#: original_texis/hash.texi:190
#, no-wrap
msgid "Hash Table Access"
msgstr "Hash Table Access"

#. type: cindex
#: original_texis/hash.texi:191
#, no-wrap
msgid "accessing hash tables"
msgstr "accessing hash tables"

#. type: cindex
#: original_texis/hash.texi:192
#, no-wrap
msgid "hash table access"
msgstr "hash table access"

#. type: Plain text
#: original_texis/hash.texi:198
msgid "This section describes the functions for accessing and storing associations in a hash table.  In general, any Lisp object can be used as a hash key, unless the comparison method imposes limits.  Any Lisp object can also be used as the value."
msgstr "このセクションでは、ハッシュテーブルにアクセスしたり、連想を保管する関数を説明します。一般的に、比較方法による制限がない限り、任意のLispオブジェクトをハッシュキーとして使用できます。"

#. type: defun
#: original_texis/hash.texi:199
#, no-wrap
msgid "gethash key table &optional default"
msgstr "gethash key table &optional default"

#. type: defun
#: original_texis/hash.texi:203
msgid "This function looks up @var{key} in @var{table}, and returns its associated @var{value}---or @var{default}, if @var{key} has no association in @var{table}."
msgstr "この関数は@var{table}の@var{key}を照合して、それに関連づけられた@var{value} --- @var{table}内に@var{key}をもつ連想が存在しない場合は@var{default} --- をreturnします。"

#. type: defun
#: original_texis/hash.texi:205
#, no-wrap
msgid "puthash key value table"
msgstr "puthash key value table"

#. type: defun
#: original_texis/hash.texi:209
msgid "This function enters an association for @var{key} in @var{table}, with value @var{value}.  If @var{key} already has an association in @var{table}, @var{value} replaces the old associated value."
msgstr "この関数は、@var{table}内に、値@var{value}をもつ@var{key}の連想を挿入します。@var{table}がすでに@var{key}の連想をもつ場合、@var{value}により古い連想値が置き換えられます。"

#. type: defun
#: original_texis/hash.texi:211
#, no-wrap
msgid "remhash key table"
msgstr "remhash key table"

#. type: defun
#: original_texis/hash.texi:215
msgid "This function removes the association for @var{key} from @var{table}, if there is one.  If @var{key} has no association, @code{remhash} does nothing."
msgstr "この関数は、@var{table}に@var{key}の連想がある場合は、それを削除します。@var{key}が連想をもたない場合、@code{remhash}は何も行ないません。"

#. type: defun
#: original_texis/hash.texi:219
msgid "@b{Common Lisp note:} In Common Lisp, @code{remhash} returns non-@code{nil} if it actually removed an association and @code{nil} otherwise.  In Emacs Lisp, @code{remhash} always returns @code{nil}."
msgstr "@b{Common Lispに関する注意: }Common Lispでは、@code{remhash}が実際に連想を削除したときは非@code{nil}、それ以外は@code{nil}をreturnします。Emacs Lispでは、@code{remhash}は常に@code{nil}をreturnします。"

#. type: defun
#: original_texis/hash.texi:221
#, no-wrap
msgid "clrhash table"
msgstr "clrhash table"

#. type: defun
#: original_texis/hash.texi:225
msgid "This function removes all the associations from hash table @var{table}, so that it becomes empty.  This is also called @dfn{clearing} the hash table."
msgstr "この関数は、ハッシュテーブル@var{table}からすべての連想を削除するので、そのハッシュテーブルは空になります。これはハッシュテーブルの@dfn{クリーニング(clearing)}とも呼ばれます。"

#. type: defun
#: original_texis/hash.texi:228
msgid "@b{Common Lisp note:} In Common Lisp, @code{clrhash} returns the empty @var{table}.  In Emacs Lisp, it returns @code{nil}."
msgstr "@b{Common Lispに関する注意: }Common Lispでは、@code{clrhash}は空の@var{table}をreturnします。Emacs Lispでは@code{nil}をreturnします。"

#. type: defun
#: original_texis/hash.texi:230
#, no-wrap
msgid "maphash function table"
msgstr "maphash function table"

#. type: anchor{#1}
#: original_texis/hash.texi:236
msgid "Definition of maphash"
msgstr "Definition of maphash"

#. type: defun
#: original_texis/hash.texi:236
msgid "This function calls @var{function} once for each of the associations in @var{table}.  The function @var{function} should accept two arguments---a @var{key} listed in @var{table}, and its associated @var{value}.  @code{maphash} returns @code{nil}."
msgstr "この関数は、@var{table}内の各連想にたいして、一度ずつ@var{function}を呼び出します。関数@var{function}は2つの引数 --- @var{table}にリストされた@var{key}と、それに関連づけられた@var{value} --- をとるべきです。@code{maphash}は@code{nil}をreturnします。"

#. type: section
#: original_texis/hash.texi:239
#, no-wrap
msgid "Defining Hash Comparisons"
msgstr "Defining Hash Comparisons"

#. type: cindex
#: original_texis/hash.texi:240
#, no-wrap
msgid "hash code"
msgstr "hash code"

#. type: cindex
#: original_texis/hash.texi:241
#, no-wrap
msgid "define hash comparisons"
msgstr "define hash comparisons"

#. type: Plain text
#: original_texis/hash.texi:246
msgid "You can define new methods of key lookup by means of @code{define-hash-table-test}.  In order to use this feature, you need to understand how hash tables work, and what a @dfn{hash code} means."
msgstr "@code{define-hash-table-test}により、キーを照合する新しい方法を定義できます。この機能を使用するには、ハッシュテーブルの動作方法と、@dfn{ハッシュコード(hash code)}の意味を理解する必要があります。"

#. type: Plain text
#: original_texis/hash.texi:253
msgid "You can think of a hash table conceptually as a large array of many slots, each capable of holding one association.  To look up a key, @code{gethash} first computes an integer, the hash code, from the key.  It reduces this integer modulo the length of the array, to produce an index in the array.  Then it looks in that slot, and if necessary in other nearby slots, to see if it has found the key being sought."
msgstr "概念的にはハッシュテーブルを、1つの連想を保持できるスロットがたくさんある巨大な配列として考えることができます。キーを照合するには、まず@code{gethash}が、キーから整数のハッシュコード(hash code)を計算します。配列内のインデックスを生成するために、@code{gethash}は、配列の長さにより、この整数のmoduloを得ます。それからキーが見つかったかどうか確認するために、そのスロット、もし必要なら近くのスロットを探します。"

#. type: Plain text
#: original_texis/hash.texi:257
msgid "Thus, to define a new method of key lookup, you need to specify both a function to compute the hash code from a key, and a function to compare two keys directly."
msgstr "したがってキー照合の新しい方法を定義するためには、キーからハッシュコードを計算する関数と、2つのキーを直接比較する関数の両方が必要です。"

#. type: defun
#: original_texis/hash.texi:258
#, no-wrap
msgid "define-hash-table-test name test-fn hash-fn"
msgstr "define-hash-table-test name test-fn hash-fn"

#. type: defun
#: original_texis/hash.texi:260
msgid "This function defines a new hash table test, named @var{name}."
msgstr "この関数は、@var{name}という名前の、新たなハッシュテーブルテストを定義します。"

#. type: defun
#: original_texis/hash.texi:265
msgid "After defining @var{name} in this way, you can use it as the @var{test} argument in @code{make-hash-table}.  When you do that, the hash table will use @var{test-fn} to compare key values, and @var{hash-fn} to compute a ``hash code'' from a key value."
msgstr "この方法で@var{name}を定義した後では、@code{make-hash-table}の引数@var{test}にこれを使用することができます。それを行なう場合、そのハッシュテーブルはキー値の比較に@var{test-fn}、キー値から``ハッシュコード''を計算するために@var{hash-fn}を使用することになります。"

#. type: defun
#: original_texis/hash.texi:268
msgid "The function @var{test-fn} should accept two arguments, two keys, and return non-@code{nil} if they are considered ``the same''."
msgstr "関数@var{test-fn}は2つの引数(2つのキー)をとり、それらが``同一''と判断されたときは非@code{nil}をreturnします。"

#. type: defun
#: original_texis/hash.texi:273
msgid "The function @var{hash-fn} should accept one argument, a key, and return an integer that is the ``hash code'' of that key.  For good results, the function should use the whole range of integers for hash codes, including negative integers."
msgstr "関数@var{hash-fn}は1つの引数(キー)をとり、そのキーの``ハッシュコード''(整数)をreturnします。よい結果を得るために、この関数は負の整数を含む整数の全範囲を、ハッシュコードに使用するべきです。"

#. type: defun
#: original_texis/hash.texi:277
msgid "The specified functions are stored in the property list of @var{name} under the property @code{hash-table-test}; the property value's form is @code{(@var{test-fn} @var{hash-fn})}."
msgstr "指定された関数は、プロパティー@code{hash-table-test}の配下の、@var{name}というプロパティーリストに格納されます。そのプロパティーの値形式は、@code{(@var{test-fn} @var{hash-fn})}です。"

#. type: defun
#: original_texis/hash.texi:279
#, no-wrap
msgid "sxhash obj"
msgstr "sxhash obj"

#. type: defun
#: original_texis/hash.texi:283
msgid "This function returns a hash code for Lisp object @var{obj}.  This is an integer which reflects the contents of @var{obj} and the other Lisp objects it points to."
msgstr "この関数は、Lispオブジェクト@var{obj}にたいするハッシュコードをreturnします。return値は、@var{obj}と、それが指す別のLispオブジェクトの内容を表す整数です。"

#. type: defun
#: original_texis/hash.texi:286
msgid "If two objects @var{obj1} and @var{obj2} are equal, then @code{(sxhash @var{obj1})} and @code{(sxhash @var{obj2})} are the same integer."
msgstr "2つのオブジェクト@var{obj1}と@var{obj2}がequalの場合、@code{(sxhash @var{obj1})}と@code{(sxhash @var{obj2})}は同じ整数になります。"

#. type: defun
#: original_texis/hash.texi:291
msgid "If the two objects are not equal, the values returned by @code{sxhash} are usually different, but not always; once in a rare while, by luck, you will encounter two distinct-looking objects that give the same result from @code{sxhash}."
msgstr "2つのオブジェクトがequalでない場合、通常は@code{sxhash}がreturnする値は異なりますが、常に異なるとは限りません。稀にですが(運次第)、@code{sxhash}が同じ結果を与える、2つの異なって見えるオブジェクトに遭遇するかもしれません。"

#. type: Plain text
#: original_texis/hash.texi:295
msgid "This example creates a hash table whose keys are strings that are compared case-insensitively."
msgstr "以下は、大の字小文字を区別しない、文字列のキーをもつハッシュテーブルを作成する例です。"

#. type: example
#: original_texis/hash.texi:301
#, no-wrap
msgid ""
"(defun case-fold-string= (a b)\n"
"  (eq t (compare-strings a nil nil b nil nil t)))\n"
"(defun case-fold-string-hash (a)\n"
"  (sxhash (upcase a)))\n"
"\n"
msgstr ""
"(defun case-fold-string= (a b)\n"
"  (eq t (compare-strings a nil nil b nil nil t)))\n"
"(defun case-fold-string-hash (a)\n"
"  (sxhash (upcase a)))\n"
"\n"

#. type: example
#: original_texis/hash.texi:304
#, no-wrap
msgid ""
"(define-hash-table-test 'case-fold\n"
"  'case-fold-string= 'case-fold-string-hash)\n"
"\n"
msgstr ""
"(define-hash-table-test 'case-fold\n"
"  'case-fold-string= 'case-fold-string-hash)\n"
"\n"

#. type: example
#: original_texis/hash.texi:306
#, no-wrap
msgid "(make-hash-table :test 'case-fold)\n"
msgstr "(make-hash-table :test 'case-fold)\n"

#. type: Plain text
#: original_texis/hash.texi:311
msgid "Here is how you could define a hash table test equivalent to the predefined test value @code{equal}.  The keys can be any Lisp object, and equal-looking objects are considered the same key."
msgstr "以下は、事前に定義されたテスト値@code{equal}と等価なテストを行なうハッシュテーブルを定義できるという例です。キーは任意のLispオブジェクトで、equalに見えるオブジェクトは、同じキーと判断されます。"

#. type: example
#: original_texis/hash.texi:314
#, no-wrap
msgid ""
"(define-hash-table-test 'contents-hash 'equal 'sxhash)\n"
"\n"
msgstr ""
"(define-hash-table-test 'contents-hash 'equal 'sxhash)\n"
"\n"

#. type: example
#: original_texis/hash.texi:316
#, no-wrap
msgid "(make-hash-table :test 'contents-hash)\n"
msgstr "(make-hash-table :test 'contents-hash)\n"

#. type: section
#: original_texis/hash.texi:319
#, no-wrap
msgid "Other Hash Table Functions"
msgstr "Other Hash Table Functions"

#. type: Plain text
#: original_texis/hash.texi:322
msgid "Here are some other functions for working with hash tables."
msgstr "以下は、ハッシュテーブルに機能する他の関数です。"

#. type: defun
#: original_texis/hash.texi:323
#, no-wrap
msgid "hash-table-p table"
msgstr "hash-table-p table"

#. type: defun
#: original_texis/hash.texi:325
msgid "This returns non-@code{nil} if @var{table} is a hash table object."
msgstr "この関数は、@var{table}がハッシュテーブルオブジェクトの場合は、非@code{nil}をreturnします。"

#. type: defun
#: original_texis/hash.texi:327
#, no-wrap
msgid "copy-hash-table table"
msgstr "copy-hash-table table"

#. type: defun
#: original_texis/hash.texi:330
msgid "This function creates and returns a copy of @var{table}.  Only the table itself is copied---the keys and values are shared."
msgstr "この関数は、@var{table}のコピーを作成してreturnします。そのテーブル自体がコピーされたものである場合だけ、キーと値が共有されます。"

#. type: defun
#: original_texis/hash.texi:332
#, no-wrap
msgid "hash-table-count table"
msgstr "hash-table-count table"

#. type: defun
#: original_texis/hash.texi:334
msgid "This function returns the actual number of entries in @var{table}."
msgstr "この関数は@var{table}内の実際のエントリー数をreturnします。"

#. type: defun
#: original_texis/hash.texi:336
#, no-wrap
msgid "hash-table-test table"
msgstr "hash-table-test table"

#. type: defun
#: original_texis/hash.texi:340
msgid "This returns the @var{test} value that was given when @var{table} was created, to specify how to hash and compare keys.  See @code{make-hash-table} (@pxref{Creating Hash})."
msgstr "この関数は、ハッシュを行なう方法と、キーを比較する方法を指定するために、@var{table}が作成されたときに与えられた@var{test}の値をreturnします。@ref{Creating Hash}の@code{make-hash-table}を参照してください。"

#. type: defun
#: original_texis/hash.texi:342
#, no-wrap
msgid "hash-table-weakness table"
msgstr "hash-table-weakness table"

#. type: defun
#: original_texis/hash.texi:345
msgid "This function returns the @var{weak} value that was specified for hash table @var{table}."
msgstr "この関数は、ハッシュテーブル@var{table}に指定された@var{weak}の値をreturnします。"

#. type: defun
#: original_texis/hash.texi:347
#, no-wrap
msgid "hash-table-rehash-size table"
msgstr "hash-table-rehash-size table"

#. type: defun
#: original_texis/hash.texi:349
msgid "This returns the rehash size of @var{table}."
msgstr "この関数は、@var{table}のrehash-sizeをreturnします。"

#. type: defun
#: original_texis/hash.texi:351
#, no-wrap
msgid "hash-table-rehash-threshold table"
msgstr "hash-table-rehash-threshold table"

#. type: defun
#: original_texis/hash.texi:353
msgid "This returns the rehash threshold of @var{table}."
msgstr "この関数は、@var{table}のrehash-thresholdをreturnします。"

#. type: defun
#: original_texis/hash.texi:355
#, no-wrap
msgid "hash-table-size table"
msgstr "hash-table-size table"

#. type: defun
#: original_texis/hash.texi:357
msgid "This returns the current nominal size of @var{table}."
msgstr "この関数は、@var{table}の現在の定義されたサイズをreturnします。"
