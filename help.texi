@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Documentation
@chapter Documentation
@cindex documentation strings

  GNU
Emacsには便利なビルトインのヘルプ機能があり、それらのほとんどは、関数や変数のドキュメント文字列に付属するドキュメント文字列の情報が由来です。このチャプターでは、Lispプログラムからドキュメント文字列にアクセスする方法について説明します。

  ドキュメント文字列のコンテンツは、ある種の慣習にしたがうべきです。特に、最初の行は、その関数または変数を簡単に説明する1つ、または2つの完全なセンテンスであるべきです。よいドキュメント文字列を記述する方法については、@ref{Documentation
Tips}を参照してください。

  Emacs向けのドキュメント文字列は、Emacsマニュアルと同じものではないことに注意してください。マニュアルは、Texinfo言語で記述された独自のソースファイルをもちます。それにたいしドキュメント文字列は、それが適用される関数および変数の定義内で指定されます。ドキュメント文字列をコレクションしても、それはマニュアルとしては不十分です。なぜなら、よいマニュアルとは、そのやり方でまとめられたものではなく、議論のトピックという観点によりまとめられているからです。

  ドキュメント文字列を表示するコマンドについては、@ref{Help, , Help, emacs, The GNU Emacs
Manual}を参照してください。

@menu
* Documentation Basics::     ドキュメント文字列が定義、格納される場所。
* Accessing Documentation::  Lispプログラムがドキュメント文字列にアクセスする方法。
* Keys in Documentation::    カレントキーバインディングの置き換え。
* Describing Characters::    非プリント文字やキーシーケンスをプリント可能な記述にする。
* Help Functions::           Emacsヘルプ機能により使用されるサブルーチン。
@end menu

@node Documentation Basics
@section Documentation Basics
@cindex documentation conventions
@cindex writing a documentation string
@cindex string, writing a doc string

  ドキュメント文字列は、テキストをダブルクォート文字で囲んだ、文字列にたいするLisp構文を使用して記述されます。実はこれは実際のLisp文字列です。関数または変数の定義内の適切な箇所に文字列があると、それは関数または変数のドキュメントの役割を果たします。

@cindex @code{function-documentation} property
  関数定義(@code{lambda}や@code{defun}フォーム)の中では、ドキュメント文字列は引数リストの後に指定され、通常は関数オブジェクト内に直接格納されます。@ref{Function
Documentation}を参照してください。関数名の@code{function-documentation}プロパティに関数ドキュメントをputすることもできます(@ref{Accessing
Documentation}を参照)。

@cindex @code{variable-documentation} property
  変数定義(@code{defvar}フォーム)の中では、ドキュメント文字列は初期値の後に指定されます。@ref{Defining
Variables}を参照してください。この文字列は、その変数の@code{variable-documentation}プロパティに格納されます。

@cindex @file{DOC} (documentation) file
  Emacsがメモリー内にドキュメント文字列を保持しないときがあります。それには、2つの状況があります。1つ目はメモリーを節約するためで、事前ロードされた関数および変数(プリミティブを含む)のドキュメントは、@code{doc-directory}で指定されたディレクトリー内の、@file{DOC}という名前のファイルに保持されます(@ref{Accessing
Documentation}を参照)。2つ目は関数または変数がバイトコンパイルされたファイルからロードされたときで、Emacsはそれらのドキュメント文字列のロードを無効にします(@ref{Docs
and Compilation}を参照)。どちらの場合も、ある関数にたいしてユーザーが@kbd{C-h
f}(@code{describe-function})を呼び出したときなど、Emacsは必要なときだけファイルのドキュメント文字列を照会します。

  ドキュメント文字列には、ユーザーがドキュメントを閲覧するときのみ照会されるキーバインディングを参照する、特別な@dfn{キー置換シーケンス(key
substitution
sequences)}を含めることができます。これにより、たとえユーザーがデフォルトのキーバインディングを変更していても、ヘルプコマンドが正しいキーを表示できるようになります。

  オートロードされたコマンド(@ref{Autoload}を参照)のドキュメント文字列では、これらのキー置換シーケンスは特別な効果をもち、そのコマンドにたいする@kbd{C-h
f}により、オートロードをトリガーします(これは@file{*Help*}バッファー内のハイパーリンクを正しくセットアップするために必要となる)。

@node Accessing Documentation
@section Access to Documentation Strings
@cindex accessing documentation strings

@defun documentation-property symbol property &optional verbatim
この関数は、プロパティ@var{property}配下の@var{symbol}のプロパティリスト内に記録されたドキュメント文字列をリターンする。ほとんどの場合、これは@var{property}を@code{variable-documentation}にして、変数のドキュメント文字列の照会に使用される。しかし、カスタマイゼーショングループのような、他の種類のドキュメント照会にも使用できる(が、関数のドキュメントには、以下の@code{documentation}関数を使用する)。

そのプロパティの値が@file{DOC}ファイルやバイトコンパイル済みファイルに格納されたドキュメント文字列を参照する場合、この関数はその文字列を照会して、それをリターンする。

プロパティの値が@code{nil}や文字列以外で、ファイル内のテキストも参照しない場合は、文字列を取得するLisp式として評価される。

最終的に、この関数はキーバインディングを置換するために、文字列を@code{substitute-command-keys}に引き渡す(@ref{Keys
in Documentation}を参照)。@var{verbatim}が非@code{nil}の場合、このステップはスキップされる。

@smallexample
@group
(documentation-property 'command-line-processed
   'variable-documentation)
     @result{} "Non-nil once command line has been processed"
@end group
@group
(symbol-plist 'command-line-processed)
     @result{} (variable-documentation 188902)
@end group
@group
(documentation-property 'emacs 'group-documentation)
     @result{} "Customization of the One True Editor."
@end group
@end smallexample
@end defun

@defun documentation function &optional verbatim
この関数は、@var{function}のドキュメント文字列をリターンする。この関数はマクロ、名前付きキーボードマクロ、およびスペシャルフォームも通常の関数と同様に処理する。

@var{function}がシンボルの場合は、そのシンボルの@code{function-documentation}プロパティを最初に調べる。それが非@code{nil}値をもつなら、その値(プロパティの値が文字列以外の場合は、それを評価した値)がドキュメントとなる。

@var{function}がシンボル以外、あるいは@code{function-documentation}プロパティをもたない場合、@code{documentation}は必要ならファイルを読み込んで、実際の関数定義のドキュメント文字列を抽出する。

最後に、@var{verbatim}が@code{nil}なら、この関数は@code{substitute-command-keys}を呼び出す。結果はリターンするための文字列である。

@code{documentation}関数は、@var{function}が関数定義をもたない場合は、@code{void-function}エラーをシグナルする。しかし、関数定義がドキュメントをもたない場合は問題ない。その場合、@code{documentation}は@code{nil}をリターンする。
@end defun

@defun face-documentation face
この関数は、@var{face}のドキュメント文字列をフェイスとしてリターンする。
@end defun

以下は、@code{documentation}と@code{documentation-property}を使用した例で、いくつかのシンボルのドキュメント文字列を@file{*Help*}バッファー内に表示します。

@anchor{describe-symbols example}
@smallexample
@group
(defun describe-symbols (pattern)
  "PATTERNにマッチするEmacs Lispシンボルを説明する。
名前にPATTERNをもつすべてのシンボルの説明が
`*Help*'バッファーに表示される。"
  (interactive "sDescribe symbols matching: ")
  (let ((describe-func
         (function
          (lambda (s)
@end group
@group
            ;; @r{シンボルの説明をプリントする}
            (if (fboundp s)             ; @r{これは関数}
                (princ
                 (format "%s\t%s\n%s\n\n" s
                   (if (commandp s)
                       (let ((keys (where-is-internal s)))
                         (if keys
                             (concat
                              "Keys: "
                              (mapconcat 'key-description
                                         keys " "))
                           "Keys: none"))
                     "Function")
@end group
@group
                   (or (documentation s)
                       "not documented"))))

            (if (boundp s)              ; @r{これは変数}
@end group
@group
                (princ
                 (format "%s\t%s\n%s\n\n" s
                   (if (custom-variable-p s)
                       "Option " "Variable")
@end group
@group
                   (or (documentation-property
                         s 'variable-documentation)
                       "not documented")))))))
        sym-list)
@end group

@group
    ;; @r{PATTERNにマッチするシンボルのリストを構築}
    (mapatoms (function
               (lambda (sym)
                 (if (string-match pattern (symbol-name sym))
                     (setq sym-list (cons sym sym-list))))))
@end group

@group
    ;; @r{データを表示}
    (help-setup-xref (list 'describe-symbols pattern) (interactive-p))
    (with-help-window (help-buffer)
      (mapcar describe-func (sort sym-list 'string<)))))
@end group
@end smallexample

  @code{describe-symbols}関数は@code{apropos}のように機能しますが、より多くの情報を提供します。

@smallexample
@group
(describe-symbols "goal")

---------- Buffer: *Help* ----------
goal-column     Option
Semipermanent goal column for vertical motion, as set by @dots{}
@end group
@c Do not blithely break or fill these lines.
@c That makes them incorrect.

@group
set-goal-column Keys: C-x C-n
Set the current horizontal position as a goal for C-n and C-p.
@end group
@c DO NOT put a blank line here!  That is factually inaccurate!
@group
Those commands will move to this position in the line moved to
rather than trying to keep the same horizontal position.
With a non-nil argument, clears out the goal column
so that C-n and C-p resume vertical motion.
The goal column is stored in the variable `goal-column'.
@end group

@group
temporary-goal-column   Variable
Current goal column for vertical motion.
It is the column where point was
at the start of current run of vertical motion commands.
When the `track-eol' feature is doing its job, the value is 9999.
---------- Buffer: *Help* ----------
@end group
@end smallexample

@anchor{Definition of Snarf-documentation}
@defun Snarf-documentation filename
この関数は、Emacsビルド時の実行可能なEmacsダンプ直前に使用される。これは、ファイル@var{filename}内に格納されたドキュメント文字列の位置を探して、メモリー上の関数定義および変数のプロパティリスト内にそれらの位置を記録する。@ref{Building
Emacs}を参照のこと。

Emacsは、@file{emacs/etc}ディレクトリーから、ファイル@var{filename}を読み込む。その後、ダンプされたEmacs実行時に、ディレクトリー@code{doc-directory}内の同じファイルを照会する。@var{filename}は通常@code{"DOC"}である。
@end defun

@defvar doc-directory
この変数は、ビルトインおよび事前ロードされた関数および変数のドキュメント文字列を含む、ファイル@code{"DOC"}があるべきディレクトリーの名前を保持する。

ほとんどの場合、これは@code{data-directory}と同一である。実際にインストールしたEmacsではなく、EmacswpeyビルドしたディレクトリーからEmacsを実行したときは、異なるかもしれない。@ref{Definition
of data-directory}を参照のこと。
@end defvar

@node Keys in Documentation
@section Substituting Key Bindings in Documentation
@cindex documentation, keys in
@cindex keys in documentation strings
@cindex substituting keys in documentation
@cindex key substitution sequence

  ドキュメント文字列がキーシーケンスを参照する際、それらはカレントである実際のキーバインディングを使用するべきです。これらは、以下で説明する特別なキーシーケンスを使用して行うことができます。通常の方法によるドキュメント文字列へのアクセスは、これらの特別なキーシーケンスをカレントキーバインディングに置き換えます。これは、@code{substitute-command-keys}を呼び出すことにより行われます。あなた自身がこの関数を呼び出すこともできます。

  以下は、それら特別なシーケンスと、その意味についてのリストです:

@table @code
@item \[@var{command}]
これは、@var{command}を呼び出すキーシーケンス、または@var{command}がキーバインディングをもたない場合は@samp{M-x
@var{command}}である。

@item \@{@var{mapvar}@}
これは、変数@var{mapvar}の値であるようなキーマップの要約を意味する。この要約は、@code{describe-bindings}を用いて作成される。

@item \<@var{mapvar}>
これ自体は、何のテキストも意味せず、副作用のためだけに使用される。これは、このドキュメント文字列内にある、後続のすべての@samp{\[@var{command}]}にたいするキーマップとして、@var{mapvar}の値を指定する。

@item \=
これは、後続の文字をクォートして、無効にする。したがって、@samp{\=\[}は@samp{\[}、@samp{\=\=}は@samp{\=}を出力に配する。
@end table

@strong{注意してください:} Emacs Lisp内の文字列として記述する際は、@samp{\}を2つ記述しなければなりません。

@defun substitute-command-keys string
この関数は、上述の特別なシーケンスを@var{string}からスキャンして、それらが意味するもので置き換え、その結果を文字列としてリターンする。これにより、そのユーザー自身がカスタマイズした、実際のキーシーケンスを参照するドキュメントが表示できる。

@cindex advertised binding
あるコマンドが複数のバインディングをもつ場合、通常この関数は最初に見つかったバインディングを使用する。以下のようにして、コマンドのシンボルプロパティ@code{:advertised-binding}に割り当てることにより、特定のキーバインディングを指定できる:

@smallexample
(put 'undo :advertised-binding [?\C-/])
@end smallexample

@noindent
@code{:advertised-binding}プロパティは、メニューアイテム(@ref{Menu
Bar}を参照)に表示されるバインディングにも影響する。コマンドが実際にもたないキーバインディングを指定した場合、このプロパティは無視される。
@end defun

  以下は、特別なキーシーケンスの例である:

@smallexample
@group
(substitute-command-keys
   "再帰編集者abortするには、次をタイプする: \\[abort-recursive-edit]")
@result{} "再帰編集者abortするには、次をタイプする: C-]"
@end group

@group
(substitute-command-keys
   "ミニバッファーにたいして定義されたキーは:
  \\@{minibuffer-local-must-match-map@}")
@result{} "ミニバッファーにたいして定義されたキーは:
@end group

?               minibuffer-completion-help
SPC             minibuffer-complete-word
TAB             minibuffer-complete
C-j             minibuffer-complete-and-exit
RET             minibuffer-complete-and-exit
C-g             abort-recursive-edit
"

@group
(substitute-command-keys
   "ミニバッファーにたいして再帰編集をabortするには、次をタイプ:
\\<minibuffer-local-must-match-map>\\[abort-recursive-edit].")
@result{} "ミニバッファーにたいして再帰編集をabortするには、次をタイプ: C-g."
@end group
@end smallexample

  ドキュメント文字列内のテキストにたいしては、他にも特別な慣習があります。たとえば、このマニュアルの関数、変数、およびセクションで参照できます。詳細は@ref{Documentation
Tips}を参照してください。

@node Describing Characters
@section Describing Characters for Help Messages
@cindex describe characters and events

  以下の関数はイベント、キーシーケンス、文字をテキスト表記(textual
descriptions)に変換します。これらの変換された表記は、メッセージ内に任意のテキスト文字やキーシーケンスを含める場合に有用です。なぜなら非プリント文字や空白文字は、プリント文字シーケンスに変換されるからです。空白文字以外のプリント文字は、その文字自身が表記になります。

@defun key-description sequence &optional prefix
@cindex Emacs event standard notation
この関数は、@var{sequence}内の入力イベントにたいして、Emacsの標準表記を含む文字列をリターンする。@var{prefix}が非@code{nil}の場合、それは@var{sequence}に前置される入力イベントシーケンスであり、リターン値にも含まれる。引数はどちらも文字列、ベクター、またはリストかもしれない。有効なイベントに関する詳細は、@ref{Input
Events}を参照のこと。

@smallexample
@group
(key-description [?\M-3 delete])
     @result{} "M-3 <delete>"
@end group
@group
(key-description [delete] "\M-3")
     @result{} "M-3 <delete>"
@end group
@end smallexample

  以下の@code{single-key-description}の例も参照されたい。
@end defun

@defun single-key-description event &optional no-angles
@cindex event printing
@cindex character printing
@cindex control character printing
@cindex meta character printing
この関数は、キーボード入力にたいするEmacsの標準表記として、@var{event}を表記する文字列をリターンする。通常のプリント文字はその文字自身で表れるが、コントロール文字は@samp{C-}で始まる文字列、メタ文字は@samp{M-}で始まる文字列、スペース、タブなどは@samp{SPC}や@samp{TAB}のように変換される。ファンクションキーのシンボルは、@samp{<@dots{}>}のように角カッコ(angle
brackets)の内側に表れる。リストであるようなイベントは、そのリストの@sc{car}内のシンボル名が、角カッコの内側に表れる。

オプション引数@var{no-angles}が非@code{nil}の場合、ファンクションキーおよびイベントシンボルを括る角カッコは省略される。これは、角カッコを使用しない古いバージョンのEmacsとの互換性のためである。

@smallexample
@group
(single-key-description ?\C-x)
     @result{} "C-x"
@end group
@group
(key-description "\C-x \M-y \n \t \r \f123")
     @result{} "C-x SPC M-y SPC C-j SPC TAB SPC RET SPC C-l 1 2 3"
@end group
@group
(single-key-description 'delete)
     @result{} "<delete>"
@end group
@group
(single-key-description 'C-mouse-1)
     @result{} "<C-mouse-1>"
@end group
@group
(single-key-description 'C-mouse-1 t)
     @result{} "C-mouse-1"
@end group
@end smallexample
@end defun

@defun text-char-description character
この関数は、テキスト内に出現する文字にたいするEmacsの標準表記として、@var{character}を表記する文字列をリターンする。これは@code{single-key-description}と似ているが、コントロール文字にカレットが前置されて表される点が異なる(これはEmacsバッファー内でコントロール文字を表示する通常の方法である)。他にも、@code{single-key-description}が2**27ビットをメタ文字とするのにたいし、@code{text-char-description}は2**7ビットをメタ文字とする点が異なる。

@smallexample
@group
(text-char-description ?\C-c)
     @result{} "^C"
@end group
@group
(text-char-description ?\M-m)
     @result{} "\xed"
@end group
@group
(text-char-description ?\C-\M-m)
     @result{} "\x8d"
@end group
@group
(text-char-description (+ 128 ?m))
     @result{} "M-m"
@end group
@group
(text-char-description (+ 128 ?\C-m))
     @result{} "M-^M"
@end group
@end smallexample
@end defun

@deffn Command read-kbd-macro string &optional need-vector
この関数は主にキーボードマクロを操作するために使用されるが、@code{key-description}の大雑把な意味で逆の処理にも使用できる。キー表記を含むスペース区切りの文字列でこれを呼び出すと、それに対応するイベントを含む文字列、またはベクターをリターンする。(これは単一の有効なキーシーケンスであるか否かは問わず、何のイベントを使用するかに依存する。@ref{Key
Sequences}を参照されたい。) @var{need-vector}が非@code{nil}の場合、リターン値は常にベクターになる。
@end deffn

@node Help Functions
@section Help Functions
@cindex help functions

  Emacsは、さまざまなビルトインのヘルプ関数を提供し、それらはすべてプレフィックス@kbd{C-h}のサブコマンドとして、ユーザーがアクセスできます。それらについての詳細は、@ref{Help,
, Help, emacs, The GNU Emacs
Manual}を参照してください。ここでは、同様な情報についてプログラムレベルのインターフェイスを説明します。

@deffn Command apropos pattern &optional do-all
この関数は、名前にaproposパターン(apropos pattern: 適切なパターン)
@var{pattern}を含む、``重要''なすべてのシンボルを探す。マッチに使用されるaproposパターンは単語、最低2つはマッチしなければならないスペース区切りの単語、または(特別な正規表現文字があれば)正規表現のいずれかである。あるシンボルが関数、変数、フェイスとしての定義、あるいはプロパティをもつ場合、そのシンボルは``重要''とされる。

関数は、以下のような要素のリストをリターンする:

@example
(@var{symbol} @var{score} @var{function-doc} @var{variable-doc}
 @var{plist-doc} @var{widget-doc} @var{face-doc} @var{group-doc})
@end example

ここで、@var{score}はマッチの面からそのシンボルがどれだけ重要に見えるかを比較する整数である。残りの各要素は、@var{symbol}にたいする関数、変数、...等のドキュメント文字列(または@code{nil})である。

これは@file{*Apropos*}という名前のバッファーにもシンボルを表示し、その際各行にはドキュメント文字列の先頭から取得した1行説明とともに表示される。

@var{do-all}が非@code{nil}、またはユーザーオプション@code{apropos-do-all}が非@code{nil}の場合、@code{apropos}は見つかった関数のキーバインディングも表示する。これは重要なものだけでなく、のinternされた@emph{すべて}のシンボルも表示する(同様にリターン値としてもそれらをリストする)。
@end deffn

@defvar help-map
この変数の値は、Helpキー@kbd{C-h}に続く文字にたいするローカルキーマップである。
@end defvar

@deffn {Prefix Command} help-command
このシンボルは関数ではなく、関数定義セルには@code{help-map}として知られる、キーマップを保持する。これは、@file{help.el}内で以下のように定義されている:

@smallexample
@group
(define-key global-map (string help-char) 'help-command)
(fset 'help-command help-map)
@end group
@end smallexample
@end deffn

@defopt help-char
この変数の値は、ヘルプ文字(help character:
Helpを意味する文字としてEmacsが認識する文字)である。デフォルトでは、@kbd{C-h}を意味する8が値である。この文字を読み取った際、@code{help-form}が非@code{nil}のLisp式ならば、Emacsはその式を評価して、結果が文字列の場合はウィンドウ内にそれを表示する。

通常、@code{help-form}の値は@code{nil}である。その場合、ヘルプ文字はコマンド入力のレベルにおいて特別な意味を有せず、通常の方法におけるキーシーケンスの一部となる。@kbd{C-h}の標準的なキーバインディングは、複数の汎用目的をもつヘルプ機能のプレフィックスキーである。

ヘルプ文字は、プレフィックスキーの後でも特別な意味をもつ。ヘルプ文字がプレフィックスキーのサブコマンドとしてバインディングをもたない場合は、そのプレフィックスキーのすべてのサブコマンドのリストを表示する、@code{describe-prefix-bindings}を実行する。
@end defopt

@defopt help-event-list
この変数の値は、``ヘルプ文字''の代役を果たすイベント型のリストである。これらのイベントは、@code{help-char}で指定されるイベントと同様に処理される。
@end defopt

@defvar help-form
この変数が非@code{nil}の場合、その値は文字@code{help-char}が読み取られるたびに評価されるフォームである。そのフォームの評価により文字列が生成された場合は、その文字列が表示される。

@code{read-event}、@code{read-char-choice}、@code{read-char}を呼び出すコマンドは、それが入力を行う間は、恐らく@code{help-form}を非@code{nil}にバインドすべきであろう(@kbd{C-h}が他の意味をもつ場合は、これを行うべきではない)。この式を評価した結果は、何にたいする入力なのか、そしてそれを正しくエンターする方法を説明する文字列であること。

ミニバッファーへのエントリーにより、この変数は@code{minibuffer-help-form}の値にバインドされる(@ref{Definition
of minibuffer-help-form}を参照)。
@end defvar

@defvar prefix-help-command
この変数は、プレフィックスキーにたいするヘルプをプリントする関数を保持する。その関数は、ユーザーが後にヘルプ文字を伴うプレフィックスキーをタイプし、そのヘルプ文字がプレフィックスの後のバインディングをもたないたときに呼び出される。この変数のデフォルト値は@code{describe-prefix-bindings}である。
@end defvar

@deffn Command describe-prefix-bindings
この関数は、もっとも最近のプレフィックスキーのサブコマンドすべてにたいするリストを表示する。プレフィックスの説明は、そのキーシーケンスの最後のイベントを除くすべてから構成される(最後のイベントは、恐らくヘルプ文字であろう)。
@end deffn

  以下の2つの関数は、``electric''モードのように制御を放棄することなくヘルプを提供したいモードを意図しています。これらは、通常のヘルプ関数と区別するため、名前が@samp{Helper}で始まります。

@deffn Command Helper-describe-bindings
このコマンドは、ローカルキーマップとグローバルキーマップの両方のキーバインディングすべてのリストを含むヘルプバッファーを表示するウィンドウをポップアップする。これは@code{describe-bindings}を呼び出すことにより機能する。
@end deffn

@deffn Command Helper-help
このコマンドは、カレントモードにたいするヘルプを提供する。これはミニバッファー内でメッセージ@samp{Help (Type ? for further
options)}とともにユーザーに入力を求め、その後キーバインディングが何か、何を意図するモードなのかを探すための助けを提供する。これは@code{nil}をリターンする。

@vindex Helper-help-map
これは、マップ@code{Helper-help-map}を変更することによりカスタマイズできる。
@end deffn

@defvar data-directory
@anchor{Definition of data-directory}
この変数は、Emacsに付随する特定のドキュメントおよびテキストファイルを探すディレクトリーの名前を保持する。
@end defvar

@defun help-buffer
この関数は、ヘルプバッファーの名前(通常は@file{*Help*})をリターンする。そのようなバッファーが存在しない場合は、最初にそれを作成する。
@end defun

@vindex help-window-select
@defmac with-help-window buffer-name body@dots{}
このマクロは、@code{with-output-to-temp-buffer}(@ref{Temporary
Displays}を参照)のように@var{body}を評価して、そのフォームが生成したすべての出力を、@var{buffer-name}という名前のバッファーに挿入する(@var{buffer-name}は、通常は関数@code{help-buffer}によりリターンされる値であるべきだろう)。これは、指定されたバッファーをHelpモードに置き、ヘルプウィンドウをquit、およびスクロールする方法を告げるメッセージを表示する。これは、ユーザーオプション@code{help-window-select}のカレント値が適切にセットされていれば、ヘルプウィンドウの選択も行う。これは@var{body}内の最後の値をリターンする。
@end defmac

@defun help-setup-xref item interactive-p
この関数は、@file{*Help*}バッファー内のクロスリファレンスデータを更新する。このクロスリファレンスは、ユーザーが@samp{Back}ボタンまたは@samp{Forward}ボタン上でクリックした際に、ヘルプ情報の再生成に使用される。@file{*Help*}バッファーを使用するほとんどのコマンドは、バッファーをクリアーする前に、この関数を呼び出すべきである。@var{item}引数は、@code{(@var{function}
.
@var{args})}という形式であること。ここで、@var{function}は引数リスト@var{args}で呼び出されるヘルプバッファーを再生成する関数である。コマンド呼び出しがinteractiveに行われた場合、@var{interactive-p}引数は非@code{nil}である。この場合、@file{*Help*}バッファーの@samp{Back}ボタンにたいするitemのスタックはクリアーされる。
@end defun

@code{help-buffer}、@code{with-help-window}、@code{help-setup-xref}の使用例は、@ref{describe-symbols
example}を参照してください。

@defmac make-help-screen fname help-line help-text help-map
このマクロは、提供するサブコマンドのリストを表示するプレフィックスキーのように振る舞う、@var{fname}という名前のヘルプコマンドを定義する。

呼び出された際、@var{fname}はウィンドウ内に@var{help-text}を表示してから、@var{help-map}に応じてキーシーケンスの読み取りと実行を行う。文字列@var{help-text}は、@var{help-map}内で利用可能なバインディングを説明すべきである。

コマンド@var{fname}は、@var{help-text}の表示をスクロールすることによる、自身のいくつかのイベントを処理するために定義される。@var{fname}がこれらのスペシャルイベントのいずれかを読み取った際は、スクロールを行った後で他のイベントを読み取る。自身が処理する以外のイベントを読み取り、そのイベントが@var{help-map}内にバインディングを有す際は、そのキーのバインディングを実行した後リターンする。

引数@var{help-line}は、@var{help-map}内の候補の1行要約であること。Emacsのカレントバージョンでは、オプション@code{three-step-help}を@code{t}にセットした場合のみ、この引数が使用される。

このマクロは、@kbd{C-h C-h}にバインドされるコマンド@code{help-for-help}内で使用される。
@end defmac

@defopt three-step-help
この変数が非@code{nil}の場合、@code{make-help-screen}で定義されたコマンドは、最初にエコーエリア内に自身の@var{help-line}文字列を表示し、ユーザーが再度ヘルプ文字をタイプした場合のみ、長い@var{help-text}文字列を表示する。
@end defopt
