@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Documentation
@chapter Documentation
@cindex documentation strings

  GNU
Emacsには便利なビルトインのヘルプ機能があり、それらのほとんどは、関数や変数のドキュメント文字列に付属するドキュメント文字列の情報が由来です。このチャプターでは、Lispプログラムからドキュメント文字列にアクセスする方法について説明します。

  ドキュメント文字列のコンテンツは、ある種の慣習にしたがうべきです。特に、最初の行は、その関数または変数を簡単に説明する1つ、または2つの完全なセンテンスであるべきです。よいドキュメント文字列を記述する方法については、@ref{Documentation
Tips}を参照してください。

  Emacs向けのドキュメント文字列は、Emacsマニュアルと同じものではないことに注意してください。マニュアルは、Texinfo言語で記述された独自のソースファイルをもちます。それにたいしドキュメント文字列は、それが適用される関数および変数の定義内で指定されます。ドキュメント文字列をコレクションしても、それはマニュアルとしては不十分です。なぜなら、よいマニュアルとは、そのやり方でまとめられたものではなく、議論のトピックという観点によりまとめられているからです。

  ドキュメント文字列を表示するコマンドについては、@ref{Help, , Help, emacs, The GNU Emacs
Manual}を参照してください。

@menu
* Documentation Basics::     ドキュメント文字列が定義、格納される場所。
* Accessing Documentation::  Lispプログラムがドキュメント文字列にアクセスする方法。
* Keys in Documentation::    カレントキーバインディングの置き換え。
* Describing Characters::    非プリント文字やキーシーケンスをプリント可能な記述にする。
* Help Functions::           Emacsヘルプ機能により使用されるサブルーチン。
@end menu

@node Documentation Basics
@section Documentation Basics
@cindex documentation conventions
@cindex writing a documentation string
@cindex string, writing a doc string

  ドキュメント文字列は、テキストをダブルクォート文字で囲んだ、文字列にたいするLisp構文を使用して記述されます。実はこれは実際のLisp文字列です。関数または変数の定義内の適切な箇所に文字列があると、それは関数または変数のドキュメントの役割を果たします。

@cindex @code{function-documentation} property
  関数定義(@code{lambda}や@code{defun}フォーム)の中では、ドキュメント文字列は引数リストの後に指定され、通常は関数オブジェクト内に直接格納されます。@ref{Function
Documentation}を参照してください。関数名の@code{function-documentation}プロパティに関数ドキュメントをputすることもできます(@ref{Accessing
Documentation}を参照)。

@cindex @code{variable-documentation} property
  変数定義(@code{defvar}フォーム)の中では、ドキュメント文字列は初期値の後に指定されます。@ref{Defining
Variables}を参照してください。この文字列は、その変数の@code{variable-documentation}プロパティに格納されます。

@cindex @file{DOC} (documentation) file
  Emacsがメモリー内にドキュメント文字列を保持しないときがあります。それには、2つの状況があります。1つ目はメモリーを節約するためで、事前ロードされた関数および変数(プリミティブを含む)のドキュメントは、@code{doc-directory}で指定されたディレクトリー内の、@file{DOC}という名前のファイルに保持されます(@ref{Accessing
Documentation}を参照)。2つ目は関数または変数がバイトコンパイルされたファイルからロードされたときで、Emacsはそれらのドキュメント文字列のロードを無効にします(@ref{Docs
and Compilation}を参照)。どちらの場合も、ある関数にたいしてユーザーが@kbd{C-h
f}(@code{describe-function})を呼び出したときなど、Emacsは必要なときだけファイルのドキュメント文字列を照会します。

  ドキュメント文字列には、ユーザーがドキュメントを閲覧するときのみ照会されるキーバインディングを参照する、特別な@dfn{キー置換シーケンス(key
substitution
sequences)}を含めることができます。これにより、たとえユーザーがデフォルトのキーバインディングを変更していても、ヘルプコマンドが正しいキーを表示できるようになります。

  オートロードされたコマンド(@ref{Autoload}を参照)のドキュメント文字列では、これらのキー置換シーケンスは特別な効果をもち、そのコマンドにたいする@kbd{C-h
f}により、オートロードをトリガーします(これは@file{*Help*}バッファー内のハイパーリンクを正しくセットアップするために必要となる)。

@node Accessing Documentation
@section Access to Documentation Strings
@cindex accessing documentation strings

@defun documentation-property symbol property &optional verbatim
この関数は、プロパティ@var{property}配下の@var{symbol}のプロパティリスト内に記録されたドキュメント文字列をリターンする。ほとんどの場合、これは@var{property}を@code{variable-documentation}にして、変数のドキュメント文字列の照会に使用される。しかし、カスタマイゼーショングループのような、他の種類のドキュメント照会にも使用できる(が、関数のドキュメントには、以下の@code{documentation}関数を使用する)。

そのプロパティの値が@file{DOC}ファイルやバイトコンパイル済みファイルに格納されたドキュメント文字列を参照する場合、この関数はその文字列を照会して、それをリターンする。

プロパティの値が@code{nil}や文字列以外で、ファイル内のテキストも参照しない場合は、文字列を取得するLisp式として評価される。

最終的に、この関数はキーバインディングを置換するために、文字列を@code{substitute-command-keys}に引き渡す(@ref{Keys
in Documentation}を参照)。@var{verbatim}が非@code{nil}の場合、このステップはスキップされる。

@smallexample
@group
(documentation-property 'command-line-processed
   'variable-documentation)
     @result{} "Non-nil once command line has been processed"
@end group
@group
(symbol-plist 'command-line-processed)
     @result{} (variable-documentation 188902)
@end group
@group
(documentation-property 'emacs 'group-documentation)
     @result{} "Customization of the One True Editor."
@end group
@end smallexample
@end defun

@defun documentation function &optional verbatim
この関数は、@var{function}のドキュメント文字列をリターンする。この関数はマクロ、名前付きキーボードマクロ、およびスペシャルフォームも通常の関数と同様に処理する。

@var{function}がシンボルの場合は、そのシンボルの@code{function-documentation}プロパティを最初に調べる。それが非@code{nil}値をもつなら、その値(プロパティの値が文字列以外の場合は、それを評価した値)がドキュメントとなる。

@var{function}がシンボル以外、あるいは@code{function-documentation}プロパティをもたない場合、@code{documentation}は必要ならファイルを読み込んで、実際の関数定義のドキュメント文字列を抽出する。

最後に、@var{verbatim}が@code{nil}なら、この関数は@code{substitute-command-keys}を呼び出す。結果はリターンするための文字列である。

@code{documentation}関数は、@var{function}が関数定義をもたない場合は、@code{void-function}エラーをシグナルする。しかし、関数定義がドキュメントをもたない場合は問題ない。その場合、@code{documentation}は@code{nil}をリターンする。
@end defun

@defun face-documentation face
この関数は、@var{face}のドキュメント文字列をフェイスとしてリターンする。
@end defun

以下は、@code{documentation}と@code{documentation-property}を使用した例で、いくつかのシンボルのドキュメント文字列を@file{*Help*}バッファー内に表示します。

@anchor{describe-symbols example}
@smallexample
@group
(defun describe-symbols (pattern)
  "PATTERNにマッチするEmacs Lispシンボルを説明する。
名前にPATTERNをもつすべてのシンボルの説明が
`*Help*'バッファーに表示される。"
  (interactive "sDescribe symbols matching: ")
  (let ((describe-func
         (function
          (lambda (s)
@end group
@group
            ;; @r{シンボルの説明をプリントする}
            (if (fboundp s)             ; @r{これは関数}
                (princ
                 (format "%s\t%s\n%s\n\n" s
                   (if (commandp s)
                       (let ((keys (where-is-internal s)))
                         (if keys
                             (concat
                              "Keys: "
                              (mapconcat 'key-description
                                         keys " "))
                           "Keys: none"))
                     "Function")
@end group
@group
                   (or (documentation s)
                       "not documented"))))

            (if (boundp s)              ; @r{これは変数}
@end group
@group
                (princ
                 (format "%s\t%s\n%s\n\n" s
                   (if (custom-variable-p s)
                       "Option " "Variable")
@end group
@group
                   (or (documentation-property
                         s 'variable-documentation)
                       "not documented")))))))
        sym-list)
@end group

@group
    ;; @r{PATTERNにマッチするシンボルのリストを構築}
    (mapatoms (function
               (lambda (sym)
                 (if (string-match pattern (symbol-name sym))
                     (setq sym-list (cons sym sym-list))))))
@end group

@group
    ;; @r{データを表示}
    (help-setup-xref (list 'describe-symbols pattern) (interactive-p))
    (with-help-window (help-buffer)
      (mapcar describe-func (sort sym-list 'string<)))))
@end group
@end smallexample

  @code{describe-symbols}関数は@code{apropos}のように機能しますが、より多くの情報を提供します。

@smallexample
@group
(describe-symbols "goal")

---------- Buffer: *Help* ----------
goal-column     Option
Semipermanent goal column for vertical motion, as set by @dots{}
@end group
@c Do not blithely break or fill these lines.
@c That makes them incorrect.

@group
set-goal-column Keys: C-x C-n
Set the current horizontal position as a goal for C-n and C-p.
@end group
@c DO NOT put a blank line here!  That is factually inaccurate!
@group
Those commands will move to this position in the line moved to
rather than trying to keep the same horizontal position.
With a non-nil argument, clears out the goal column
so that C-n and C-p resume vertical motion.
The goal column is stored in the variable `goal-column'.
@end group

@group
temporary-goal-column   Variable
Current goal column for vertical motion.
It is the column where point was
at the start of current run of vertical motion commands.
When the `track-eol' feature is doing its job, the value is 9999.
---------- Buffer: *Help* ----------
@end group
@end smallexample

@anchor{Definition of Snarf-documentation}
@defun Snarf-documentation filename
この関数は、Emacsビルド時の実行可能なEmacsダンプ直前に使用される。これは、ファイル@var{filename}内に格納されたドキュメント文字列の位置を探して、メモリー上の関数定義および変数のプロパティリスト内にそれらの位置を記録する。@ref{Building
Emacs}を参照のこと。

Emacsは、@file{emacs/etc}ディレクトリーから、ファイル@var{filename}を読み込む。その後、ダンプされたEmacs実行時に、ディレクトリー@code{doc-directory}内の同じファイルを照会する。@var{filename}は通常@code{"DOC"}である。
@end defun

@defvar doc-directory
この変数は、ビルトインおよび事前ロードされた関数および変数のドキュメント文字列を含む、ファイル@code{"DOC"}があるべきディレクトリーの名前を保持する。

ほとんどの場合、これは@code{data-directory}と同一である。実際にインストールしたEmacsではなく、EmacswpeyビルドしたディレクトリーからEmacsを実行したときは、異なるかもしれない。@ref{Definition
of data-directory}を参照のこと。
@end defvar

@node Keys in Documentation
@section Substituting Key Bindings in Documentation
@cindex documentation, keys in
@cindex keys in documentation strings
@cindex substituting keys in documentation
@cindex key substitution sequence

  ドキュメント文字列がキーシーケンスを参照する際、それらはカレントである実際のキーバインディングを使用するべきです。これらは、以下で説明する特別なキーシーケンスを使用して行うことができます。通常の方法によるドキュメント文字列へのアクセスは、これらの特別なキーシーケンスをカレントキーバインディングに置き換えます。これは、@code{substitute-command-keys}を呼び出すことにより行われます。あなた自身がこの関数を呼び出すこともできます。

  以下は、それら特別なシーケンスと、その意味についてのリストです:

@table @code
@item \[@var{command}]
stands for a key sequence that will invoke @var{command}, or @samp{M-x
@var{command}} if @var{command} has no key bindings.

@item \@{@var{mapvar}@}
これは、変数@var{mapvar}の値であるようなキーマップの要約を意味する。この要約は、@code{describe-bindings}を用いて作成される。

@item \<@var{mapvar}>
これ自体は、何のテキストも意味せず、副作用のためだけに使用される。これは、このドキュメント文字列内にある、後続のすべての@samp{\[@var{command}]}にたいするキーマップとして、@var{mapvar}の値を指定する。

@item \=
これは、後続の文字をクォートして、無効にする。したがって、@samp{\=\[}は@samp{\[}、@samp{\=\=}は@samp{\=}を出力に配する。
@end table

@strong{注意してください:} Emacs Lisp内の文字列として記述する際は、@samp{\}を2つ記述しなければなりません。

@defun substitute-command-keys string
この関数は、上述の特別なシーケンスを@var{string}からスキャンして、それらが意味するもので置き換え、その結果を文字列としてリターンする。これにより、そのユーザー自身がカスタマイズした、実際のキーシーケンスを参照するドキュメントが表示できる。

@cindex advertised binding
あるコマンドが複数のバインディングをもつ場合、通常この関数は最初に見つかったバインディングを使用する。以下のようにして、コマンドのシンボルプロパティ@code{:advertised-binding}に割り当てることにより、特定のキーバインディングを指定できる:

@smallexample
(put 'undo :advertised-binding [?\C-/])
@end smallexample

@noindent
@code{:advertised-binding}プロパティは、メニューアイテム(@ref{Menu
Bar}を参照)に表示されるバインディングにも影響する。コマンドが実際にもたないキーバインディングを指定した場合、このプロパティは無視される。
@end defun

  以下は、特別なキーシーケンスの例である:

@smallexample
@group
(substitute-command-keys
   "再帰編集者abortするには、次をタイプする: \\[abort-recursive-edit]")
@result{} "再帰編集者abortするには、次をタイプする: C-]"
@end group

@group
(substitute-command-keys
   "ミニバッファーにたいして定義されたキーは:
  \\@{minibuffer-local-must-match-map@}")
@result{} "ミニバッファーにたいして定義されたキーは:
@end group

?               minibuffer-completion-help
SPC             minibuffer-complete-word
TAB             minibuffer-complete
C-j             minibuffer-complete-and-exit
RET             minibuffer-complete-and-exit
C-g             abort-recursive-edit
"

@group
(substitute-command-keys
   "ミニバッファーにたいして再帰編集をabortするには、次をタイプ:
\\<minibuffer-local-must-match-map>\\[abort-recursive-edit].")
@result{} "ミニバッファーにたいして再帰編集をabortするには、次をタイプ: C-g."
@end group
@end smallexample

  ドキュメント文字列内のテキストにたいしては、他にも特別な慣習があります。たとえば、このマニュアルの関数、変数、およびセクションで参照できます。詳細は@ref{Documentation
Tips}を参照してください。

@node Describing Characters
@section Describing Characters for Help Messages
@cindex describe characters and events

  以下の関数はイベント、キーシーケンス、文字をテキスト表記(textual
descriptions)に変換します。これらの変換された表記は、メッセージ内に任意のテキスト文字やキーシーケンスを含める場合に有用です。なぜなら非プリント文字や空白文字は、プリント文字シーケンスに変換されるからです。空白文字以外のプリント文字は、その文字自身が表記になります。

@defun key-description sequence &optional prefix
@cindex Emacs event standard notation
この関数は、@var{sequence}内の入力イベントにたいして、Emacsの標準表記を含む文字列をリターンする。@var{prefix}が非@code{nil}の場合、それは@var{sequence}に前置される入力イベントシーケンスであり、リターン値にも含まれる。引数はどちらも文字列、ベクター、またはリストかもしれない。有効なイベントに関する詳細は、@ref{Input
Events}を参照のこと。

@smallexample
@group
(key-description [?\M-3 delete])
     @result{} "M-3 <delete>"
@end group
@group
(key-description [delete] "\M-3")
     @result{} "M-3 <delete>"
@end group
@end smallexample

  以下の@code{single-key-description}の例も参照されたい。
@end defun

@defun single-key-description event &optional no-angles
@cindex event printing
@cindex character printing
@cindex control character printing
@cindex meta character printing
この関数は、キーボード入力にたいするEmacsの標準表記として、@var{event}を表記する文字列をリターンする。通常のプリント文字はその文字自身で表れるが、コントロール文字は@samp{C-}で始まる文字列、メタ文字は@samp{M-}で始まる文字列、スペース、タブなどは@samp{SPC}や@samp{TAB}のように変換される。ファンクションキーのシンボルは、@samp{<@dots{}>}のように角カッコ(angle
brackets)の内側に表れる。リストであるようなイベントは、そのリストの@sc{car}内のシンボル名が、角カッコの内側に表れる。

オプション引数@var{no-angles}が非@code{nil}の場合、ファンクションキーおよびイベントシンボルを括る角カッコは省略される。これは、角カッコを使用しない古いバージョンのEmacsとの互換性のためである。

@smallexample
@group
(single-key-description ?\C-x)
     @result{} "C-x"
@end group
@group
(key-description "\C-x \M-y \n \t \r \f123")
     @result{} "C-x SPC M-y SPC C-j SPC TAB SPC RET SPC C-l 1 2 3"
@end group
@group
(single-key-description 'delete)
     @result{} "<delete>"
@end group
@group
(single-key-description 'C-mouse-1)
     @result{} "<C-mouse-1>"
@end group
@group
(single-key-description 'C-mouse-1 t)
     @result{} "C-mouse-1"
@end group
@end smallexample
@end defun

@defun text-char-description character
この関数は、テキスト内に出現する文字にたいするEmacsの標準表記として、@var{character}を表記する文字列をリターンする。これは@code{single-key-description}と似ているが、コントロール文字にカレットが前置されて表される点が異なる(これはEmacsバッファー内でコントロール文字を表示する通常の方法である)。他にも、@code{single-key-description}が2**27ビットをメタ文字とするのにたいし、@code{text-char-description}は2**7ビットをメタ文字とする点が異なる。

@smallexample
@group
(text-char-description ?\C-c)
     @result{} "^C"
@end group
@group
(text-char-description ?\M-m)
     @result{} "\xed"
@end group
@group
(text-char-description ?\C-\M-m)
     @result{} "\x8d"
@end group
@group
(text-char-description (+ 128 ?m))
     @result{} "M-m"
@end group
@group
(text-char-description (+ 128 ?\C-m))
     @result{} "M-^M"
@end group
@end smallexample
@end defun

@deffn Command read-kbd-macro string &optional need-vector
この関数は主にキーボードマクロを操作するために使用されるが、@code{key-description}の大雑把な意味で逆の処理にも使用できる。キー表記を含むスペース区切りの文字列でこれを呼び出すと、それに対応するイベントを含む文字列、またはベクターをリターンする。(これは単一の有効なキーシーケンスであるか否かは問わず、何のイベントを使用するかに依存する。@ref{Key
Sequences}を参照されたい。) @var{need-vector}が非@code{nil}の場合、リターン値は常にベクターになる。
@end deffn

@node Help Functions
@section Help Functions
@cindex help functions

  Emacs provides a variety of built-in help functions, all accessible to the
user as subcommands of the prefix @kbd{C-h}.  For more information about
them, see @ref{Help, , Help, emacs, The GNU Emacs Manual}.  Here we describe
some program-level interfaces to the same information.

@deffn Command apropos pattern &optional do-all
This function finds all ``meaningful'' symbols whose names contain a match
for the apropos pattern @var{pattern}.  An apropos pattern is either a word
to match, a space-separated list of words of which at least two must match,
or a regular expression (if any special regular expression characters
occur).  A symbol is ``meaningful'' if it has a definition as a function,
variable, or face, or has properties.

The function returns a list of elements that look like this:

@example
(@var{symbol} @var{score} @var{function-doc} @var{variable-doc}
 @var{plist-doc} @var{widget-doc} @var{face-doc} @var{group-doc})
@end example

Here, @var{score} is an integer measure of how important the symbol seems to
be as a match.  Each of the remaining elements is a documentation string, or
@code{nil}, for @var{symbol} as a function, variable, etc.

It also displays the symbols in a buffer named @file{*Apropos*}, each with a
one-line description taken from the beginning of its documentation string.

If @var{do-all} is non-@code{nil}, or if the user option
@code{apropos-do-all} is non-@code{nil}, then @code{apropos} also shows key
bindings for the functions that are found; it also shows @emph{all} interned
symbols, not just meaningful ones (and it lists them in the return value as
well).
@end deffn

@defvar help-map
The value of this variable is a local keymap for characters following the
Help key, @kbd{C-h}.
@end defvar

@deffn {Prefix Command} help-command
This symbol is not a function; its function definition cell holds the keymap
known as @code{help-map}.  It is defined in @file{help.el} as follows:

@smallexample
@group
(define-key global-map (string help-char) 'help-command)
(fset 'help-command help-map)
@end group
@end smallexample
@end deffn

@defopt help-char
The value of this variable is the help character---the character that Emacs
recognizes as meaning Help.  By default, its value is 8, which stands for
@kbd{C-h}.  When Emacs reads this character, if @code{help-form} is a
non-@code{nil} Lisp expression, it evaluates that expression, and displays
the result in a window if it is a string.

Usually the value of @code{help-form} is @code{nil}.  Then the help
character has no special meaning at the level of command input, and it
becomes part of a key sequence in the normal way.  The standard key binding
of @kbd{C-h} is a prefix key for several general-purpose help features.

The help character is special after prefix keys, too.  If it has no binding
as a subcommand of the prefix key, it runs @code{describe-prefix-bindings},
which displays a list of all the subcommands of the prefix key.
@end defopt

@defopt help-event-list
The value of this variable is a list of event types that serve as
alternative ``help characters''.  These events are handled just like the
event specified by @code{help-char}.
@end defopt

@defvar help-form
If this variable is non-@code{nil}, its value is a form to evaluate whenever
the character @code{help-char} is read.  If evaluating the form produces a
string, that string is displayed.

A command that calls @code{read-event}, @code{read-char-choice}, or
@code{read-char} probably should bind @code{help-form} to a non-@code{nil}
expression while it does input.  (The time when you should not do this is
when @kbd{C-h} has some other meaning.)  Evaluating this expression should
result in a string that explains what the input is for and how to enter it
properly.

Entry to the minibuffer binds this variable to the value of
@code{minibuffer-help-form} (@pxref{Definition of minibuffer-help-form}).
@end defvar

@defvar prefix-help-command
This variable holds a function to print help for a prefix key.  The function
is called when the user types a prefix key followed by the help character,
and the help character has no binding after that prefix.  The variable's
default value is @code{describe-prefix-bindings}.
@end defvar

@deffn Command describe-prefix-bindings
This function calls @code{describe-bindings} to display a list of all the
subcommands of the prefix key of the most recent key sequence.  The prefix
described consists of all but the last event of that key sequence.  (The
last event is, presumably, the help character.)
@end deffn

  The following two functions are meant for modes that want to provide help
without relinquishing control, such as the ``electric'' modes.  Their names
begin with @samp{Helper} to distinguish them from the ordinary help
functions.

@deffn Command Helper-describe-bindings
This command pops up a window displaying a help buffer containing a listing
of all of the key bindings from both the local and global keymaps.  It works
by calling @code{describe-bindings}.
@end deffn

@deffn Command Helper-help
This command provides help for the current mode.  It prompts the user in the
minibuffer with the message @samp{Help (Type ? for further options)}, and
then provides assistance in finding out what the key bindings are, and what
the mode is intended for.  It returns @code{nil}.

@vindex Helper-help-map
This can be customized by changing the map @code{Helper-help-map}.
@end deffn

@defvar data-directory
@anchor{Definition of data-directory}
This variable holds the name of the directory in which Emacs finds certain
documentation and text files that come with Emacs.
@end defvar

@defun help-buffer
This function returns the name of the help buffer, which is normally
@file{*Help*}; if such a buffer does not exist, it is first created.
@end defun

@vindex help-window-select
@defmac with-help-window buffer-name body@dots{}
This macro evaluates @var{body} like @code{with-output-to-temp-buffer}
(@pxref{Temporary Displays}), inserting any output produced by its forms
into a buffer named @var{buffer-name}.  (Usually, @var{buffer-name} should
be the value returned by the function @code{help-buffer}.)  It also puts the
specified buffer into Help mode and displays a message telling the user how
to quit and scroll the help window.  It selects the help window if the
current value of the user option @code{help-window-select} has been set
accordingly.  It returns the last value in @var{body}.
@end defmac

@defun help-setup-xref item interactive-p
This function updates the cross reference data in the @file{*Help*} buffer,
which is used to regenerate the help information when the user clicks on the
@samp{Back} or @samp{Forward} buttons.  Most commands that use the
@file{*Help*} buffer should invoke this function before clearing the
buffer.  The @var{item} argument should have the form @code{(@var{function}
. @var{args})}, where @var{function} is a function to call, with argument
list @var{args}, to regenerate the help buffer.  The @var{interactive-p}
argument is non-@code{nil} if the calling command was invoked interactively;
in that case, the stack of items for the @file{*Help*} buffer's @samp{Back}
buttons is cleared.
@end defun

@xref{describe-symbols example}, for an example of using @code{help-buffer},
@code{with-help-window}, and @code{help-setup-xref}.

@defmac make-help-screen fname help-line help-text help-map
This macro defines a help command named @var{fname} that acts like a prefix
key that shows a list of the subcommands it offers.

When invoked, @var{fname} displays @var{help-text} in a window, then reads
and executes a key sequence according to @var{help-map}.  The string
@var{help-text} should describe the bindings available in @var{help-map}.

The command @var{fname} is defined to handle a few events itself, by
scrolling the display of @var{help-text}.  When @var{fname} reads one of
those special events, it does the scrolling and then reads another event.
When it reads an event that is not one of those few, and which has a binding
in @var{help-map}, it executes that key's binding and then returns.

The argument @var{help-line} should be a single-line summary of the
alternatives in @var{help-map}.  In the current version of Emacs, this
argument is used only if you set the option @code{three-step-help} to
@code{t}.

This macro is used in the command @code{help-for-help} which is the binding
of @kbd{C-h C-h}.
@end defmac

@defopt three-step-help
If this variable is non-@code{nil}, commands defined with
@code{make-help-screen} display their @var{help-line} strings in the echo
area at first, and display the longer @var{help-text} strings only if the
user types the help character again.
@end defopt
