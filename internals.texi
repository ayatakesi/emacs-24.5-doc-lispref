@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1993, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node GNU Emacs Internals
@appendix GNU Emacs Internals

このチャプターでは、実行可能なEmacs実行可能形式を事前ロードされたLispライブラリーとともにダンプする方法と、ストレージが割り当てられる方法、およびCプログラマーが興味をもつかもしれないGNU
Emacsの内部的な側面のいくつかを説明します。

@menu
* Building Emacs::           ダンプ済みEmacsの作成方法。
* Pure Storage::             その場かぎりの事前ロードされたLisp関数を共有する。
* Garbage Collection::       Lispオブジェクトの使用されないスペースの回収。
* Memory Usage::             これまでに作成されたLispオブジェクトの総サイズの情報。
* C Dialect::                Emacsを記述するC系言語は何か。
* Writing Emacs Primitives::  Emacs用にCコードを記述する。
* Object Internals::         バッファー、ウィンドウ、プロセスのデーラフォーマット。
* C Integer Types::          Emacs内部でCの整数型が使用される方法。
@end menu

@node Building Emacs
@section Building Emacs
@cindex building Emacs
@pindex temacs

  このセクションでは、Emacs実行可能形式のビルドに関するステップの説明をします。makefileがこれらすべてを自動的に行うので、Emacsをビイルドおよびインストールするために、この題材を知る必要はありません。この情報は、Emacs開発者にとって適切です。

   @file{src}ディレクトリー内のCソースファイルをコンパイルすることにより、@file{temacs}と呼ばれる実行可能形式ファイルが生成されます。これは@dfn{bare
impure Emacs()裸で不純なEmacs}とも呼ばれます。これにはEmacs
LispインタープリターとI/Oルーチンが含まれますが、編集コマンドは含まれません。

@cindex @file{loadup.el}
  コマンド@w{@command{temacs -l
loadup}}は@file{temacs}を実行して、それが@file{loadup.el}をロードするよう計らいます。@code{loadup}ライブラリーは、通常のEmacs編集環境をセットアップする、追加のLispライブラリーをロードします。このステップの後には、そのEmacs実行可能形式は@dfn{bare(裸)}ではなくなります。

@cindex dumping Emacs
  標準的なLispファイルのロードには若干の時間を要するので、ユーザーが直接@file{temacs}実行可能形式を実行することは、通常はありません。そのかわり、Emacsビルドの最終ステップとして、コマンド@samp{temacs
-batch -l loadup
dump}が実行されます。特別な引数@samp{dump}により、@command{temacs}は@file{emacs}と呼ばれる実行可能形式のプログラムにダンプされます。これには、標準的なLispファイルがすべて事前ロードされています。(引数@samp{-batch}は@file{temacs}がその端末上でデータの初期化を試みることを防げるので、端末情報のテーブルはダンプされたEmacsでは空になる。)

@cindex preloaded Lisp files
@vindex preloaded-file-list
  ダンプされた@file{emacs}実行可能形式(@dfn{純粋}なEmacsとも呼ばれる)が、インストールされるEmacsになります。変数@code{preloaded-file-list}には、ダンプ済みEmacsに事前ロードされるLispファイルのリストが格納されています。新たなオペレーティングシステムにEmacsをポートする際、そのOSがダンプを実装していなければ、Emacsは起動時に毎回@file{loadup.el}をロードしなければなりません。

@cindex @file{site-load.el}
  @file{site-load.el}という名前のライブラリーを記述することにより、事前ロードするファイルを追加指定できます。追加するファイルを保持するための純粋なスペース@var{n}バイトを追加するように、以下の定義

@example
#define SITELOAD_PURESIZE_EXTRA @var{n}
@end example

@noindent
でEmacsをリビルドする必要があるでしょう。@file{src/puresize.h}を参考にしてください(十分大きくなるまで、20000▽ずつ増加させる)。しかし、追加ファイルの事前ロードの優位は、マシンの高速化により減少します。現代的なマシンでは、通常はお勧めしません。

  @file{loadup.el}が@file{site-load.el}を読み込んだ後に@code{Snarf-documentation}を呼び出すことにより、それらが格納された場所のファイル@file{etc/DOC}内にある、プリミティブと事前ロードされる関数(と変数)のドキュメント文字列を探します(@ref{Definition
of Snarf-documentation,, Accessing Documentation}を参照)。

@cindex @file{site-init.el}
@cindex preloading additional functions and variables
  @file{site-init.el}という名前のライブラリー名に配置することにより、ダンプ直前に実行する他のLisp式を指定できます。このファイルは、ドキュメント文字列を見つけた後に実行されます。

  関数または変数の定義を事前ロードしたい場合には、それを行うために、3つの方法があります。それらにより定義ロードして、その後のEmacs実行時にドキュメント文字列をアクセス可能にします:

@itemize @bullet
@item
@file{etc/DOC}の生成時にそれらのファイルをスキャンするよう計らい、それらを@file{site-load.el}でロードする。

@item
ファイルを@file{site-init.el}でロードして、Emacsインストール時にLispファイルのインストール先ディレクトリーに、そのファイルをコピーする。

@item
それらの各ファイルで、ローカル変数として@code{byte-compile-dynamic-docstrings}に@code{nil}値を指定して、それらを@file{site-load.el}か@file{site-init.el}でロードする(この手法には、Emacsが毎回そのドキュメント文字列用のスペースを確保するという欠点がある)。
@end itemize

@cindex change @code{load-path} at configure time
@cindex @option{--enable-locallisppath} option to @command{configure}
  通常の未変更のEmacsでユーザーが期待する何らかの機能を変更するような何かを、@file{site-load.el}または@file{site-init.el}内に配置することはお勧めしません。あなたのサイトで通常の機能をオーバーライドしなければならないと感じた場合には、@file{default.el}でそれを行えば、ユーザーが望む場合にあなたの変更をオーバーライドできます。@ref{Startup
Summary}を参照してください。@file{site-load.el}か@file{site-init.el}のいずれかが@code{load-path}を変更する場合、その変更はダンプ後に失われます。@ref{Library
Search}を参照してください。@code{load-path}を永続的に変更するには、@command{configure}の@option{--enable-locallisppath}オプションを指定してください。

  事前ロード可能なパッケージでは、その後のEmacsスタートアップまで、特定の評価を遅延させのが必要(または便利)なことがあります。そのようなケースの大半は、カスタマイズ可能な変数の値に関するものです。たとえば@code{tutorial-directory}は、事前ロードされる@file{startup.el}内で定義される変数です。これのデフォルト値は、@code{data-directory}にもとづいてセットされます。この変数はEmacsダンプ時ではなく、スタート時に@code{data-directory}の値を必要とします。なぜならEmacs実行可能形式はダンプされたものなので、恐らく異なる場所にインストールされます。

@defun custom-initialize-delay symbol value
この関数は、次回のEmacs開始まで@var{symbol}の初期化を遅延する。通常は、カスタマイズ可能変数の@code{:initialize}プロパティとしてこの関数を指定することにより使用する(引数@var{value}はフォームCustom由来の互換性のためだけに提供されており使用しない)。
@end defun

@code{custom-initialize-delay}が提供するより一般的な機能を要するような稀なケースでは、@code{before-init-hook}を使用できます(@ref{Startup
Summary}を参照)。

@defun dump-emacs to-file from-file
@cindex unexec
この関数は、Emacsのカレント状態を、実行可能ファイル@var{to-file}にダンプする。これは@var{from-file}(通常はファイル@file{temacs})からシンボルを取得する。

すでにダンプ済みのEmacs内でこの関数を使用する場合には、@samp{-batch}でEmacsを実行しなければならない。
@end defun

@node Pure Storage
@section Pure Storage
@cindex pure storage

  Emacs Lispはユーザー作成Lispオブジェクトにたいして、@dfn{通常ストレージ(normal
storage)}と@dfn{純粋ストレージ(pure
storage)}という、2種のストレージをもちます。通常ストレージは、Emacsセッションが維持される間に、新たにデータが作成される場所です。純粋ストレージは、事前ロードされた標準Lispファイル内の、特定のデータのために使用されます。このデータは実際のEmacs使用中に決して変更されるべきではないデータです。

  純粋ストレージは、@command{temacs}が標準的な事前ローLispライブラリーのロード中だけ割り当てられます。ファイル@file{emacs}では、このメモリースペースは読み取り専用とマークされるので、そのマシン上で実行中のすべてのEmacsジョブで共有できます。純粋ストレージは拡張できません。Emacsのコンパイル時に固定された量が割り当てられ、それが事前ロードされるライブラリーにたいして不足なら、@file{temacs}はそれに収まらない部分を動的メモリーに割り当てます。結果イメージは動作するでしょうが、この状況ではメモリーリークとなるので、ガーベージコレクション(@ref{Garbage
Collection}を参照)は無効です。そのような通常なら発生しないオーバーフローは、あなたが事前ロードライブラリの追加や、標準的な事前ロードライブラリに追加を試みないかぎり発生しません。Emacsはオーバーロードの開始時に、オーバーロードに関する警告を表示するでしょう。これが発生したら、ファイル@file{src/puresize.h}内のコンパイルパラメーターを@code{SYSTEM_PURESIZE_EXTRA}を増やして、Emacsをリビルドする必要があります。

@defun purecopy object
この関数は純粋ストレージに@var{object}のコピーを作成して、それをリターンする。これは同じ文字で新たに文字列を作成することにより文字列をコピーするが、純粋ストレージではテキストプロパティはない。これはベクターとコンスセルのコンテンツを、再帰的にコピーする。シンボルのような他のオブジェクトのコピーは作成しないが、それらを未変更でリターンする。マーカーのコピーを試みると、エラーをシグナルする。

この関数は、Emacsのビルド中とダンプ中を除き、何もしない。通常は事前ロードされるLispファイル内でのみ呼び出される。
@end defun

@defvar pure-bytes-used
この変数の値は、これまでに割り当てられた純粋ストレージのバイト数である。ダンプされたEmacsでは、通常は利用可能な純粋ストレージの総量とほとんど同じであり、もしそうでないならわたしたちは事前割り当てをもっと少なくするだろう。
@end defvar

@defvar purify-flag
この変数は、@code{defun}が純粋ストレージにその関数定義のコピーを作成するべきか否かを判断する。これが非@code{nil}なら、その関数の定義は純粋ストレージにコピーされる。

このフラグは、Emacsのビルド用の基本的な関数の初回ロード中は@code{t}となる。実行可能形式としてEmacsをダンプすることにより、ダンプ前後の実際の値とは無関係に、常にこの変数に@code{nil}が書き込まれる。

実行中のEmacsで、このフラグを変更しないこと。
@end defvar

@node Garbage Collection
@section Garbage Collection

@cindex memory allocation
  プログラムがリストを作成するときや、(ライブライのロード等により)ユーザーが新しい関数を定義する際、そのデータは通常ストレージに配置されます。通常ストレージが少なくなると、Emacsはもっとメモリーを割り当てるようオペレーティングシステムに要求します。シンボル、コンスセル、小さいベクター、マーカー等のような別のタイプのLispオブジェクトは、メモリー内の個別のブロックに隔離されます(大きいベクター、長い文字列、バッファー、および他の特定の編集タイプは非常に巨大であり、1つのオブジェクトにたいして個別のブロックが割り当てられ、小さな文字列は8kバイトのブロック、小さいベクターは4kバイトのブロックにパックされる)。

@cindex vector-like objects, storage
@cindex storage of vector-like Lisp objects
  基本的なベクトではないウィンドウ、バッファー、フレームがあたかもベクターであるかのように管理されています。対応するCデータ構造体には@code{struct
vectorlike_header}フィールドが含まれ、そのメンバー@code{size}には@code{enum
pvec_type}で列挙されたサブタイプ、その構造体が含む@code{Lisp_Object}フィールドの数に関する情報、および残りのデータのサイズが含まれます。この情報は、オブジェクトのメモリーフットプリントの計算に必要であり、ベクターブロックの繰り返し処理の際のベクター割り当てコードにより使用されます。

@cindex garbage collection
  しばらくの間いくつかのストレージを使用して、(たとえば)バッファーのkillやあるオブジェクトを指す最後のポインターの削除によりそれを開放するのは、非常に一般的なことです。この放棄されたストレージを再利用するために、Emacsは@dfn{ガーベージコレクター(garbage
collector)}を提供します。ガーベージコレクターは、いまだLispプログラムからアクセス可能なすべてのLispオブジェクトを検索、マークすることにより動作します。これを開始するには、すべてのシンボル、それらの値と関連付けられている関数定義、現在スタック上にあるすべてのデータをアクセス可能と仮定します。別のアクセス可能オブジェクトを介して間接的に到達できるスベテのオブジェクトも、アクセス可能とみなされます。

  マーキングが終了して、それでもマークされないオブジェクトはすべてガーベージ(garbage:
ごみ)です。Lispプログラムかユーザーの行為かに関わらず、それらに到達する手段はもはや存在しないので、それらを参照することは不可能です。誰もそれを失うことはないので、それらのスペースは再利用されることになります。ガーベージコレクターの2つ目の((``スイープ(sweep:
一掃'')))のフェーズでは、それらの再利用を計らいます。

@c ??? Maybe add something describing weak hash tables here?

@cindex free list
  スイープフェーズは将来の割り当て用に、シンボルやマーカーと同様に、未使用のコンスセルを@dfn{フリーリスト(free
list)}上に配置します。これは、アクセス可能な文字列は少数の8kブロックを占有するように圧縮して、その後に他の8kブロックを開放します。ベクターブロックから到達不可能はベクターは、可能なかぎり最大のフリーエリアを作成するために統合し、フリーエリアが完全な4kブロックに跨がるようなら、そのブロックは開放されます。それ以外なら、そのフリーエリアはフリーリスト配列に記録されます。これは、各エントリーが同サイズのエリアのフリーリストに対応します。巨大なベクター、バッファー、その他の巨大なオブジェクトは、個別に割り当てと開放が行われます。

@cindex CL note---allocate more storage
@quotation
@b{Common Lispに関する注意:} 他のLispと異なり、GNU Emacs
Lispはフリーリストが空のときにガーベージコレクターを呼び出さない。かわりに、単にオペレーティングシステムに更なるストレージの割り当てを要求して、@code{gc-cons-threshold}バイトを使い切るまで処理を継続する。

これは特定のLispプログラムの範囲の実行直前に、明示的にガーベージコレクターを呼び出せば、その範囲の実行中はガーベージコレクターが実行されないだろうと確信できることを意味する(そのプログラム範囲が2回目のガーベージコレクションを強制するほど、多くのスペースを使用しないという前提)。
@end quotation

@deffn Command garbage-collect
このコマンドはガーベージコレクションを実行して、使用中のスペース量の情報をリターンする(前回のガーベージコレクション以降、@code{gc-cons-threshold}バイトより多いLispデータを使用した場合には、自然にガーベージコレクションが発生することもあり得る)。

@code{garbage-collect}は使用中のスペース量の情報をリストでリターンする。これの各エントリーは@samp{(@var{name}
@var{size}
@var{used})}という形式をもつ。このエントリーで@var{name}はそのエントリーが対応するオブジェクトの種類を記述するシンボル、@var{size}はそれが使用するバイト数、@var{used}はヒープ内で生きていることが解ったオブケウトの数、オプションの@var{free}は、生きていないがEmacsが将来の割り当て用に保持しているオブジェクトの数である。全体的な結果は以下のようになる:

@example
((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})
 (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})
 (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})
 (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})
 (@code{string-bytes} @var{byte-size} @var{used-bytes})
 (@code{vectors} @var{vector-size} @var{used-vectors})
 (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})
 (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})
 (@code{intervals} @var{interval-size} @var{used-intervals} @var{free-intervals})
 (@code{buffers} @var{buffer-size} @var{used-buffers})
 (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))
@end example

以下に例を示す:

@example
(garbage-collect)
      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)
                 (miscs 40 34 56) (strings 32 2942 2607)
                 (string-bytes 1 78607) (vectors 16 7247)
                 (vector-slots 8 341609 29474) (floats 8 71 102)
                 (intervals 56 27 26) (buffers 944 8)
                 (heap 1024 11715 2678))
@end example

以下は、各要素を説明するためのテーブルである。最後の@code{heap}エントリーはオプションであり、背景の@code{malloc}実装が@code{mallinfo}関数を提供する場合のみ与えられることに注意。

@table @var
@item cons-size
コンスセルの内部的サイズ(@code{sizeof (struct Lisp_Cons)})。

@item used-conses
使用中のコンスセルの数。

@item free-conses
オペレーティングシステムから取得したスペースにあるが、カレントで未使用のコンスセルの数。

@item symbol-size
シンボルの内部的サイズ(@code{sizeof (struct Lisp_Symbol)})。

@item used-symbols
使用中のシンボルの数。

@item free-symbols
オペレーティングシステムから取得したスペースにあるが、カレントで未使用のシンボルの数。

@item misc-size
雑多なエンティティーの内部的なサイズ。@code{sizeof (union Lisp_Misc)}は@code{enum
Lisp_Misc_Type}に列挙された最大タイプのサイズ。

@item used-miscs
使用中の雑多なエンティティーの数。これらのエンティティーにはマーカー、オーバーレイに加えて、ユーザーにとって不可視な特定オブジェクトが含まれる。

@item free-miscs
オペレーティングシステムから取得したスペースにあるが、カレントで未使用の雑多なオブジェクトの数。

@item string-size
文字列ヘッダーの内部的サイズ(@code{sizeof (struct Lisp_String)})。

@item used-strings
使用中の文字列ヘッダーの数。

@item free-strings
オペレーティングシステムから取得したスペースにあるが、カレントで未使用の文字列ヘッダーの数。

@item byte-size
これは利便性のために使用され、@code{sizeof (char)}と同じ。

@item used-bytes
すべての文字列データの総バイト数。

@item vector-size
ベクターヘッダーの内部的サイズ(@code{sizeof (struct Lisp_Vector)})。

@item used-vectors
ベクターブロックから割り当てられたベクターブロック数。

@item slot-size
ベクタースロットの内部的なサイズで、常に@code{sizeof (Lisp_Object)}と等しい。

@item used-slots
使用されているすべてのベクターのスロット数。

@item free-slots
すべてのベクターブロックのフリースロットの数。

@item float-size
浮動小数点数オブジェクトの内部的なサイズ(@code{sizeof (struct
Lisp_Float)})。(ネイティブプラットフォームの@code{float}や@code{double}と混同しないこと。)

@item used-floats
使用中の浮動小数点数の数。

@item free-floats
オペレーティングシステムから取得したスペースにあるが、カレントで未使用の浮動小数点数の数。

@item interval-size
インターバルオブジェクト(interval object)の内部的なサイズ(@code{sizeof (struct interval)})。

@item used-intervals
使用中のインターバルの数。

@item free-intervals
オペレーティングシステムから取得したスペースにあるが、カレントで未使用のインターバルの数。

@item buffer-size
バッファーの内部的なサイズ(@code{sizeof (struct
buffer)})。(@code{buffer-size}関数がリターンする値と混同しないこと。)

@item used-buffers
使用中のバッファーオブジェクトの数。これにはユーザーからは不可視のkillされたバッファー、つまりリスト@code{all_buffers}内のバッファーすべてが含まれる。

@item unit-size
ヒープスペースを計る単位で、常に1024バイトと等しい。

@item total-size
@var{unit-size}単位での総ヒープサイズ。

@item free-size
@var{unit-size}単位での、カレントで未使用のヒープスペース。
@end table

純粋スペース(@ref{Pure
Storage}を参照)内にオーバーフローがあれば、実際にガーベージコレクションを行うことは不可能なので、@code{garbage-collect}は@code{nil}をリターンする。
@end deffn

@defopt garbage-collection-messages
この変数が非@code{nil}なら、Emacsはガーベージコレクションの最初と最後にメッセージを表示する。デフォルト値は@code{nil}。
@end defopt

@defvar post-gc-hook
これはガーベージコレクションの終わりに実行される、ノーマルフックである。ガーベージコレクションは、このフックの関数の実行中は抑制されるので、慎重に記述されたい。
@end defvar

@defopt gc-cons-threshold
この変数の値は、別のガーベージコレクションをトリガーするために、ガーベージコレクション後にLispオブジェクト用に割り当てなければならない、ストレージのバイト数である。特定ノオブジェクトタイプに関する情報を取得するために、@code{garbage-collect}がリターンした結果を使用できる。バッファーのコンテンツに割り当てられたスペースは、勘定に入らない。後続のガーベージコレクションは、このthreshold(閾値)が消費されても即座には実行されず、次回にLispインタープリターが呼び出されたときのみ実行されることに注意。

thresholdの初期値は@code{GC_DEFAULT_THRESHOLD}で、これは@file{alloc.c}内で定義されている。これは@code{word_size}単位で定義されているので、デフォルトの32ビット設定では400,000800,000、64ビット設定ではになる。大きい値を指定すると、ガーベージコレクションの頻度が下る。これはガーベージコレクションにより費やされる時間を減少させるが、メモリーの総使用量は増大する。大量のLispデータを作成するプログラムの実行時には、これを行いたいと思うかもしれない。

@code{GC_DEFAULT_THRESHOLD}の1/10まで下げた小さな値を指定することにより、より頻繁にガーベージコレクションを発生させることができる。この最小値より小さい値は、後続のガーベージコレクションで、@code{garbage-collect}がthresholdを最小値に戻すときまでしか効果をもたないだろう。
@end defopt

@defopt gc-cons-percentage
この変数の値は、ガーベージコレクション発生するまでのコンス(訳注:
これは@code{gc-cons-threshold}や@code{gc-cons-percentage}の@samp{-cons-}のことで、これらの変数が定義されている@file{alloc.c}内では、Lisp方言での@samp{cons}をより一般化したメモリー割り当てプロセスのことを指すようです)の量を、カレントヒープサイズにたいする割り合いで指定する。この条件と@code{gc-cons-threshold}を並行して適用し、条件が両方満足されたときだけ、ガーベージコレクションが発生する。

ヒープサイズ増加にともない、ガーベージコレクションの処理時間は増大する。したがって、ガーベージコレクションの頻度割合を減らすのが望ましいことがある。
@end defopt

  @code{garbage-collect}がリターンする値は、データ型に分類されたLispデータノめもりー使用量を記述します。それと対照的に関数@code{memory-limit}は、Emacsがカレントで使用中の総メモリー量の情報を提供します。

@defun memory-limit
この関数は、Emacsが割り当てたメモリーの最後のバイトアドレスを1024で除した値をリターンする。その値を1024で除しているのは、Lisp整数に収まるようにするためである。

あなたのアクションがメモリー使用に与える影響について、大まかなアイデアを得るために、これを使用することができる。
@end defun

@defvar memory-full
この変数は、Lispオブジェクト用のメモリーが不足に近い状態なら@code{t}、それ以外なら@code{nil}となる。
@end defvar

@defun memory-use-counts
これはそのEmacsセッションで作成されたオブジェクト数をカウントしたリストである。これらのカウンターはそれぞれ、特定の種類のオブジェクトを数える。詳細はドキュメント文字列を参照のこと。
@end defun

@defvar gcs-done
この変数は、そのEmacsセッションでそれまでに行われたガーベージコレクションの合計回数である。
@end defvar

@defvar gc-elapsed
この変数は、そのEmacsセッションでガーベージコレクションの間に費やされた経過時間を、浮動小数点数で表した総秒数である。
@end defvar

@node Memory Usage
@section Memory Usage
@cindex memory usage

  These functions and variables give information about the total amount of
memory allocation that Emacs has done, broken down by data type.  Note the
difference between these and the values returned by @code{garbage-collect};
those count objects that currently exist, but these count the number or size
of all allocations, including those for objects that have since been freed.

@defvar cons-cells-consed
The total number of cons cells that have been allocated so far in this Emacs
session.
@end defvar

@defvar floats-consed
The total number of floats that have been allocated so far in this Emacs
session.
@end defvar

@defvar vector-cells-consed
The total number of vector cells that have been allocated so far in this
Emacs session.
@end defvar

@defvar symbols-consed
The total number of symbols that have been allocated so far in this Emacs
session.
@end defvar

@defvar string-chars-consed
The total number of string characters that have been allocated so far in
this session.
@end defvar

@defvar misc-objects-consed
The total number of miscellaneous objects that have been allocated so far in
this session.  These include markers and overlays, plus certain objects not
visible to users.
@end defvar

@defvar intervals-consed
The total number of intervals that have been allocated so far in this Emacs
session.
@end defvar

@defvar strings-consed
The total number of strings that have been allocated so far in this Emacs
session.
@end defvar

@node C Dialect
@section C Dialect
@cindex C programming language

The C part of Emacs is portable to C89: C99-specific features such as
@samp{<stdbool.h>} and @samp{inline} are not used without a check, typically
at configuration time, and the Emacs build procedure provides a substitute
implementation if necessary.  Some C99 features, such as declarations after
statements, are too difficult to provide substitutes for, so they are
avoided entirely.

At some point in the not-too-distant future the base C dialect will change
from C89 to C99, and eventually it will no doubt change to C11.

@node Writing Emacs Primitives
@section Writing Emacs Primitives
@cindex primitive function internals
@cindex writing Emacs primitives

  Lisp primitives are Lisp functions implemented in C@.  The details of
interfacing the C function so that Lisp can call it are handled by a few C
macros.  The only way to really understand how to write new C code is to
read the source, but we can explain some things here.

  An example of a special form is the definition of @code{or}, from
@file{eval.c}.  (An ordinary function would have the same general
appearance.)

@cindex garbage collection protection
@smallexample
@group
DEFUN ("or", For, Sor, 0, UNEVALLED, 0,
  doc: /* Eval args until one of them yields non-nil, then return
that value.
The remaining args are not evalled at all.
If all args return nil, return nil.
@end group
@group
usage: (or CONDITIONS ...)  */)
  (Lisp_Object args)
@{
  register Lisp_Object val = Qnil;
  struct gcpro gcpro1;
@end group

@group
  GCPRO1 (args);
@end group

@group
  while (CONSP (args))
    @{
      val = eval_sub (XCAR (args));
      if (!NILP (val))
        break;
      args = XCDR (args);
    @}
@end group

@group
  UNGCPRO;
  return val;
@}
@end group
@end smallexample

@cindex @code{DEFUN}, C macro to define Lisp primitives
  Let's start with a precise explanation of the arguments to the @code{DEFUN}
macro.  Here is a template for them:

@example
DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})
@end example

@table @var
@item lname
This is the name of the Lisp symbol to define as the function name; in the
example above, it is @code{or}.

@item fname
This is the C function name for this function.  This is the name that is
used in C code for calling the function.  The name is, by convention,
@samp{F} prepended to the Lisp name, with all dashes (@samp{-}) in the Lisp
name changed to underscores.  Thus, to call this function from C code, call
@code{For}.

@item sname
This is a C variable name to use for a structure that holds the data for the
subr object that represents the function in Lisp.  This structure conveys
the Lisp symbol name to the initialization routine that will create the
symbol and store the subr object as its definition.  By convention, this
name is always @var{fname} with @samp{F} replaced with @samp{S}.

@item min
This is the minimum number of arguments that the function requires.  The
function @code{or} allows a minimum of zero arguments.

@item max
This is the maximum number of arguments that the function accepts, if there
is a fixed maximum.  Alternatively, it can be @code{UNEVALLED}, indicating a
special form that receives unevaluated arguments, or @code{MANY}, indicating
an unlimited number of evaluated arguments (the equivalent of
@code{&rest}).  Both @code{UNEVALLED} and @code{MANY} are macros.  If
@var{max} is a number, it must be more than @var{min} but less than 8.

@cindex interactive specification in primitives
@item interactive
This is an interactive specification, a string such as might be used as the
argument of @code{interactive} in a Lisp function.  In the case of
@code{or}, it is 0 (a null pointer), indicating that @code{or} cannot be
called interactively.  A value of @code{""} indicates a function that should
receive no arguments when called interactively.  If the value begins with a
@samp{"(}, the string is evaluated as a Lisp form.  For example:

@example
@group
DEFUN ("foo", Ffoo, Sfoo, 0, UNEVALLED,
       "(list (read-char-by-name \"Insert character: \")\
              (prefix-numeric-value current-prefix-arg)\
              t))",
  doc: /* @dots{} /*)
@end group
@end example

@item doc
This is the documentation string.  It uses C comment syntax rather than C
string syntax because comment syntax requires nothing special to include
multiple lines.  The @samp{doc:} identifies the comment that follows as the
documentation string.  The @samp{/*} and @samp{*/} delimiters that begin and
end the comment are not part of the documentation string.

If the last line of the documentation string begins with the keyword
@samp{usage:}, the rest of the line is treated as the argument list for
documentation purposes.  This way, you can use different argument names in
the documentation string from the ones used in the C code.  @samp{usage:} is
required if the function has an unlimited number of arguments.

All the usual rules for documentation strings in Lisp code
(@pxref{Documentation Tips}) apply to C code documentation strings too.
@end table

  After the call to the @code{DEFUN} macro, you must write the argument list
for the C function, including the types for the arguments.  If the primitive
accepts a fixed maximum number of Lisp arguments, there must be one C
argument for each Lisp argument, and each argument must be of type
@code{Lisp_Object}.  (Various macros and functions for creating values of
type @code{Lisp_Object} are declared in the file @file{lisp.h}.)  If the
primitive has no upper limit on the number of Lisp arguments, it must have
exactly two C arguments: the first is the number of Lisp arguments, and the
second is the address of a block containing their values.  These have types
@code{int} and @w{@code{Lisp_Object *}} respectively.  Since
@code{Lisp_Object} can hold any Lisp object of any data type, you can
determine the actual data type only at run time; so if you want a primitive
to accept only a certain type of argument, you must check the type
explicitly using a suitable predicate (@pxref{Type Predicates}).
@cindex type checking internals

@cindex @code{GCPRO} and @code{UNGCPRO}
@cindex protect C variables from garbage collection
  Within the function @code{For} itself, note the use of the macros
@code{GCPRO1} and @code{UNGCPRO}.  These macros are defined for the sake of
the few platforms which do not use Emacs' default stack-marking garbage
collector.  The @code{GCPRO1} macro ``protects'' a variable from garbage
collection, explicitly informing the garbage collector that that variable
and all its contents must be as accessible.  GC protection is necessary in
any function which can perform Lisp evaluation by calling @code{eval_sub} or
@code{Feval} as a subroutine, either directly or indirectly.

  It suffices to ensure that at least one pointer to each object is
GC-protected.  Thus, a particular local variable can do without protection
if it is certain that the object it points to will be preserved by some
other pointer (such as another local variable that has a @code{GCPRO}).
Otherwise, the local variable needs a @code{GCPRO}.

  The macro @code{GCPRO1} protects just one local variable.  If you want to
protect two variables, use @code{GCPRO2} instead; repeating @code{GCPRO1}
will not work.  Macros @code{GCPRO3}, @code{GCPRO4}, @code{GCPRO5}, and
@code{GCPRO6} also exist.  All these macros implicitly use local variables
such as @code{gcpro1}; you must declare these explicitly, with type
@code{struct gcpro}.  Thus, if you use @code{GCPRO2}, you must declare
@code{gcpro1} and @code{gcpro2}.

  @code{UNGCPRO} cancels the protection of the variables that are protected in
the current function.  It is necessary to do this explicitly.

  You must not use C initializers for static or global variables unless the
variables are never written once Emacs is dumped.  These variables with
initializers are allocated in an area of memory that becomes read-only (on
certain operating systems) as a result of dumping Emacs.  @xref{Pure
Storage}.

@cindex @code{defsubr}, Lisp symbol for a primitive
  Defining the C function is not enough to make a Lisp primitive available;
you must also create the Lisp symbol for the primitive and store a suitable
subr object in its function cell.  The code looks like this:

@example
defsubr (&@var{sname});
@end example

@noindent
Here @var{sname} is the name you used as the third argument to @code{DEFUN}.

  If you add a new primitive to a file that already has Lisp primitives
defined in it, find the function (near the end of the file) named
@code{syms_of_@var{something}}, and add the call to @code{defsubr} there.
If the file doesn't have this function, or if you create a new file, add to
it a @code{syms_of_@var{filename}} (e.g., @code{syms_of_myfile}).  Then find
the spot in @file{emacs.c} where all of these functions are called, and add
a call to @code{syms_of_@var{filename}} there.

@anchor{Defining Lisp variables in C}
@vindex byte-boolean-vars
@cindex defining Lisp variables in C
@cindex @code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}
  The function @code{syms_of_@var{filename}} is also the place to define any C
variables that are to be visible as Lisp variables.  @code{DEFVAR_LISP}
makes a C variable of type @code{Lisp_Object} visible in Lisp.
@code{DEFVAR_INT} makes a C variable of type @code{int} visible in Lisp with
a value that is always an integer.  @code{DEFVAR_BOOL} makes a C variable of
type @code{int} visible in Lisp with a value that is either @code{t} or
@code{nil}.  Note that variables defined with @code{DEFVAR_BOOL} are
automatically added to the list @code{byte-boolean-vars} used by the byte
compiler.

@cindex defining customization variables in C
  If you want to make a Lisp variables that is defined in C behave like one
declared with @code{defcustom}, add an appropriate entry to
@file{cus-start.el}.

@cindex @code{staticpro}, protection from GC
  If you define a file-scope C variable of type @code{Lisp_Object}, you must
protect it from garbage-collection by calling @code{staticpro} in
@code{syms_of_@var{filename}}, like this:

@example
staticpro (&@var{variable});
@end example

  Here is another example function, with more complicated arguments.  This
comes from the code in @file{window.c}, and it demonstrates the use of
macros and functions to manipulate Lisp objects.

@smallexample
@group
DEFUN ("coordinates-in-window-p", Fcoordinates_in_window_p,
  Scoordinates_in_window_p, 2, 2, 0,
  doc: /* Return non-nil if COORDINATES are in WINDOW.
  ...
@end group
@group
  or `right-margin' is returned.  */)
  (register Lisp_Object coordinates, Lisp_Object window)
@{
  struct window *w;
  struct frame *f;
  int x, y;
  Lisp_Object lx, ly;
@end group

@group
  CHECK_LIVE_WINDOW (window);
  w = XWINDOW (window);
  f = XFRAME (w->frame);
  CHECK_CONS (coordinates);
  lx = Fcar (coordinates);
  ly = Fcdr (coordinates);
  CHECK_NUMBER_OR_FLOAT (lx);
  CHECK_NUMBER_OR_FLOAT (ly);
  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH(f);
  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH(f);
@end group

@group
  switch (coordinates_in_window (w, x, y))
    @{
    case ON_NOTHING:            /* NOT in window at all. */
      return Qnil;
@end group

    ...

@group
    case ON_MODE_LINE:          /* In mode line of window. */
      return Qmode_line;
@end group

    ...

@group
    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */
      /* Historically we are supposed to return nil in this case.  */
      return Qnil;
@end group

@group
    default:
      abort ();
    @}
@}
@end group
@end smallexample

  Note that C code cannot call functions by name unless they are defined in
C@.  The way to call a function written in Lisp is to use @code{Ffuncall},
which embodies the Lisp function @code{funcall}.  Since the Lisp function
@code{funcall} accepts an unlimited number of arguments, in C it takes two:
the number of Lisp-level arguments, and a one-dimensional array containing
their values.  The first Lisp-level argument is the Lisp function to call,
and the rest are the arguments to pass to it.  Since @code{Ffuncall} can
call the evaluator, you must protect pointers from garbage collection around
the call to @code{Ffuncall}.

  The C functions @code{call0}, @code{call1}, @code{call2}, and so on, provide
handy ways to call a Lisp function conveniently with a fixed number of
arguments.  They work by calling @code{Ffuncall}.

  @file{eval.c} is a very good file to look through for examples;
@file{lisp.h} contains the definitions for some important macros and
functions.

  If you define a function which is side-effect free, update the code in
@file{byte-opt.el} that binds @code{side-effect-free-fns} and
@code{side-effect-and-error-free-fns} so that the compiler optimizer knows
about it.

@node Object Internals
@section Object Internals
@cindex object internals

  Emacs Lisp provides a rich set of the data types.  Some of them, like cons
cells, integers and strings, are common to nearly all Lisp dialects.  Some
others, like markers and buffers, are quite special and needed to provide
the basic support to write editor commands in Lisp.  To implement such a
variety of object types and provide an efficient way to pass objects between
the subsystems of an interpreter, there is a set of C data structures and a
special type to represent the pointers to all of them, which is known as
@dfn{tagged pointer}.

  In C, the tagged pointer is an object of type @code{Lisp_Object}.  Any
initialized variable of such a type always holds the value of one of the
following basic data types: integer, symbol, string, cons cell, float,
vectorlike or miscellaneous object.  Each of these data types has the
corresponding tag value.  All tags are enumerated by @code{enum Lisp_Type}
and placed into a 3-bit bitfield of the @code{Lisp_Object}.  The rest of the
bits is the value itself.  Integers are immediate, i.e., directly
represented by those @dfn{value bits}, and all other objects are represented
by the C pointers to a corresponding object allocated from the heap.  Width
of the @code{Lisp_Object} is platform- and configuration-dependent: usually
it's equal to the width of an underlying platform pointer (i.e., 32-bit on a
32-bit machine and 64-bit on a 64-bit one), but also there is a special
configuration where @code{Lisp_Object} is 64-bit but all pointers are
32-bit.  The latter trick was designed to overcome the limited range of
values for Lisp integers on a 32-bit system by using 64-bit @code{long long}
type for @code{Lisp_Object}.

  The following C data structures are defined in @file{lisp.h} to represent
the basic data types beyond integers:

@table @code
@item struct Lisp_Cons
Cons cell, an object used to construct lists.

@item struct Lisp_String
String, the basic object to represent a sequence of characters.

@item struct Lisp_Vector
Array, a fixed-size set of Lisp objects which may be accessed by an index.

@item struct Lisp_Symbol
Symbol, the unique-named entity commonly used as an identifier.

@item struct Lisp_Float
Floating-point value.

@item union Lisp_Misc
Miscellaneous kinds of objects which don't fit into any of the above.
@end table

  These types are the first-class citizens of an internal type system.  Since
the tag space is limited, all other types are the subtypes of either
@code{Lisp_Vectorlike} or @code{Lisp_Misc}.  Vector subtypes are enumerated
by @code{enum pvec_type}, and nearly all complex objects like windows,
buffers, frames, and processes fall into this category.  The rest of special
types, including markers and overlays, are enumerated by @code{enum
Lisp_Misc_Type} and form the set of subtypes of @code{Lisp_Misc}.

  Below there is a description of a few subtypes of @code{Lisp_Vectorlike}.
Buffer object represents the text to display and edit.  Window is the part
of display structure which shows the buffer or used as a container to
recursively place other windows on the same frame.  (Do not confuse Emacs
Lisp window object with the window as an entity managed by the user
interface system like X; in Emacs terminology, the latter is called frame.)
Finally, process object is used to manage the subprocesses.

@menu
* Buffer Internals::         Components of a buffer structure.
* Window Internals::         Components of a window structure.
* Process Internals::        Components of a process structure.
@end menu

@node Buffer Internals
@subsection Buffer Internals
@cindex internals, of buffer
@cindex buffer internals

  Two structures (see @file{buffer.h}) are used to represent buffers in C@.
The @code{buffer_text} structure contains fields describing the text of a
buffer; the @code{buffer} structure holds other fields.  In the case of
indirect buffers, two or more @code{buffer} structures reference the same
@code{buffer_text} structure.

Here are some of the fields in @code{struct buffer_text}:

@table @code
@item beg
The address of the buffer contents.

@item gpt
@itemx gpt_byte
The character and byte positions of the buffer gap.  @xref{Buffer Gap}.

@item z
@itemx z_byte
The character and byte positions of the end of the buffer text.

@item gap_size
The size of buffer's gap.  @xref{Buffer Gap}.

@item modiff
@itemx save_modiff
@itemx chars_modiff
@itemx overlay_modiff
These fields count the number of buffer-modification events performed in
this buffer.  @code{modiff} is incremented after each buffer-modification
event, and is never otherwise changed; @code{save_modiff} contains the value
of @code{modiff} the last time the buffer was visited or saved;
@code{chars_modiff} counts only modifications to the characters in the
buffer, ignoring all other kinds of changes; and @code{overlay_modiff}
counts only modifications to the overlays.

@item beg_unchanged
@itemx end_unchanged
The number of characters at the start and end of the text that are known to
be unchanged since the last complete redisplay.

@item unchanged_modified
@itemx overlay_unchanged_modified
The values of @code{modiff} and @code{overlay_modiff}, respectively, after
the last complete redisplay.  If their current values match @code{modiff} or
@code{overlay_modiff}, that means @code{beg_unchanged} and
@code{end_unchanged} contain no useful information.

@item markers
The markers that refer to this buffer.  This is actually a single marker,
and successive elements in its marker @code{chain} are the other markers
referring to this buffer text.

@item intervals
The interval tree which records the text properties of this buffer.
@end table

Some of the fields of @code{struct buffer} are:

@table @code
@item header
A header of type @code{struct vectorlike_header} is common to all vectorlike
objects.

@item own_text
A @code{struct buffer_text} structure that ordinarily holds the buffer
contents.  In indirect buffers, this field is not used.

@item text
A pointer to the @code{buffer_text} structure for this buffer.  In an
ordinary buffer, this is the @code{own_text} field above.  In an indirect
buffer, this is the @code{own_text} field of the base buffer.

@item next
A pointer to the next buffer, in the chain of all buffers, including killed
buffers.  This chain is used only for allocation and garbage collection, in
order to collect killed buffers properly.

@item pt
@itemx pt_byte
The character and byte positions of point in a buffer.

@item begv
@itemx begv_byte
The character and byte positions of the beginning of the accessible range of
text in the buffer.

@item zv
@itemx zv_byte
The character and byte positions of the end of the accessible range of text
in the buffer.

@item base_buffer
In an indirect buffer, this points to the base buffer.  In an ordinary
buffer, it is null.

@item local_flags
This field contains flags indicating that certain variables are local in
this buffer.  Such variables are declared in the C code using
@code{DEFVAR_PER_BUFFER}, and their buffer-local bindings are stored in
fields in the buffer structure itself.  (Some of these fields are described
in this table.)

@item modtime
The modification time of the visited file.  It is set when the file is
written or read.  Before writing the buffer into a file, this field is
compared to the modification time of the file to see if the file has changed
on disk.  @xref{Buffer Modification}.

@item auto_save_modified
The time when the buffer was last auto-saved.

@item last_window_start
The @code{window-start} position in the buffer as of the last time the
buffer was displayed in a window.

@item clip_changed
This flag indicates that narrowing has changed in the buffer.
@xref{Narrowing}.

@item prevent_redisplay_optimizations_p
This flag indicates that redisplay optimizations should not be used to
display this buffer.

@item overlay_center
This field holds the current overlay center position.  @xref{Managing
Overlays}.

@item overlays_before
@itemx overlays_after
These fields hold, respectively, a list of overlays that end at or before
the current overlay center, and a list of overlays that end after the
current overlay center.  @xref{Managing Overlays}.  @code{overlays_before}
is sorted in order of decreasing end position, and @code{overlays_after} is
sorted in order of increasing beginning position.

@c FIXME? the following are now all Lisp_Object BUFFER_INTERNAL_FIELD (foo).

@item name
A Lisp string that names the buffer.  It is guaranteed to be unique.
@xref{Buffer Names}.

@item save_length
The length of the file this buffer is visiting, when last read or saved.
This and other fields concerned with saving are not kept in the
@code{buffer_text} structure because indirect buffers are never saved.

@item directory
The directory for expanding relative file names.  This is the value of the
buffer-local variable @code{default-directory} (@pxref{File Name
Expansion}).

@item filename
The name of the file visited in this buffer, or @code{nil}.  This is the
value of the buffer-local variable @code{buffer-file-name} (@pxref{Buffer
File Name}).

@item undo_list
@itemx backed_up
@itemx auto_save_file_name
@itemx auto_save_file_format
@itemx read_only
@itemx file_format
@itemx file_truename
@itemx invisibility_spec
@itemx display_count
@itemx display_time
These fields store the values of Lisp variables that are automatically
buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable
names have the additional prefix @code{buffer-} and have underscores
replaced with dashes.  For instance, @code{undo_list} stores the value of
@code{buffer-undo-list}.

@item mark
The mark for the buffer.  The mark is a marker, hence it is also included on
the list @code{markers}.  @xref{The Mark}.

@item local_var_alist
The association list describing the buffer-local variable bindings of this
buffer, not including the built-in buffer-local bindings that have special
slots in the buffer object.  (Those slots are omitted from this table.)
@xref{Buffer-Local Variables}.

@item major_mode
Symbol naming the major mode of this buffer, e.g., @code{lisp-mode}.

@item mode_name
Pretty name of the major mode, e.g., @code{"Lisp"}.

@item keymap
@itemx abbrev_table
@itemx syntax_table
@itemx category_table
@itemx display_table
These fields store the buffer's local keymap (@pxref{Keymaps}), abbrev table
(@pxref{Abbrev Tables}), syntax table (@pxref{Syntax Tables}), category
table (@pxref{Categories}), and display table (@pxref{Display Tables}).

@item downcase_table
@itemx upcase_table
@itemx case_canon_table
These fields store the conversion tables for converting text to lower case,
upper case, and for canonicalizing text for case-fold search.  @xref{Case
Tables}.

@item minor_modes
An alist of the minor modes of this buffer.

@item pt_marker
@itemx begv_marker
@itemx zv_marker
These fields are only used in an indirect buffer, or in a buffer that is the
base of an indirect buffer.  Each holds a marker that records @code{pt},
@code{begv}, and @code{zv} respectively, for this buffer when the buffer is
not current.

@item mode_line_format
@itemx header_line_format
@itemx case_fold_search
@itemx tab_width
@itemx fill_column
@itemx left_margin
@itemx auto_fill_function
@itemx truncate_lines
@itemx word_wrap
@itemx ctl_arrow
@itemx bidi_display_reordering
@itemx bidi_paragraph_direction
@itemx selective_display
@itemx selective_display_ellipses
@itemx overwrite_mode
@itemx abbrev_mode
@itemx mark_active
@itemx enable_multibyte_characters
@itemx buffer_file_coding_system
@itemx cache_long_line_scans
@itemx point_before_scroll
@itemx left_fringe_width
@itemx right_fringe_width
@itemx fringes_outside_margins
@itemx scroll_bar_width
@itemx indicate_empty_lines
@itemx indicate_buffer_boundaries
@itemx fringe_indicator_alist
@itemx fringe_cursor_alist
@itemx scroll_up_aggressively
@itemx scroll_down_aggressively
@itemx cursor_type
@itemx cursor_in_non_selected_windows
These fields store the values of Lisp variables that are automatically
buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable
names have underscores replaced with dashes.  For instance,
@code{mode_line_format} stores the value of @code{mode-line-format}.

@item last_selected_window
This is the last window that was selected with this buffer in it, or
@code{nil} if that window no longer displays this buffer.
@end table

@node Window Internals
@subsection Window Internals
@cindex internals, of window
@cindex window internals

  The fields of a window (for a complete list, see the definition of
@code{struct window} in @file{window.h}) include:

@table @code
@item frame
The frame that this window is on.

@item mini_p
Non-@code{nil} if this window is a minibuffer window.

@item parent
Internally, Emacs arranges windows in a tree; each group of siblings has a
parent window whose area includes all the siblings.  This field points to a
window's parent.

Parent windows do not display buffers, and play little role in display
except to shape their child windows.  Emacs Lisp programs usually have no
access to the parent windows; they operate on the windows at the leaves of
the tree, which actually display buffers.

@c FIXME: These two slots and the `buffer' slot below were replaced
@c with a single slot `contents' on 2013-03-28.  --xfq
@item hchild
@itemx vchild
These fields contain the window's leftmost child and its topmost child
respectively.  @code{hchild} is used if the window is subdivided
horizontally by child windows, and @code{vchild} if it is subdivided
vertically.  In a live window, only one of @code{hchild}, @code{vchild}, and
@code{buffer} (q.v.@:) is non-@code{nil}.

@item next
@itemx prev
The next sibling and previous sibling of this window.  @code{next} is
@code{nil} if the window is the right-most or bottom-most in its group;
@code{prev} is @code{nil} if it is the left-most or top-most in its group.

@item left_col
The left-hand edge of the window, measured in columns, relative to the
leftmost column in the frame (column 0).

@item top_line
The top edge of the window, measured in lines, relative to the topmost line
in the frame (line 0).

@item total_cols
@itemx total_lines
The width and height of the window, measured in columns and lines
respectively.  The width includes the scroll bar and fringes, and/or the
separator line on the right of the window (if any).

@item buffer
The buffer that the window is displaying.

@item start
A marker pointing to the position in the buffer that is the first character
displayed in the window.

@item pointm
@cindex window point internals
This is the value of point in the current buffer when this window is
selected; when it is not selected, it retains its previous value.

@item force_start
If this flag is non-@code{nil}, it says that the window has been scrolled
explicitly by the Lisp program.  This affects what the next redisplay does
if point is off the screen: instead of scrolling the window to show the text
around point, it moves point to a location that is on the screen.

@item frozen_window_start_p
This field is set temporarily to 1 to indicate to redisplay that
@code{start} of this window should not be changed, even if point gets
invisible.

@item start_at_line_beg
Non-@code{nil} means current value of @code{start} was the beginning of a
line when it was chosen.

@item use_time
This is the last time that the window was selected.  The function
@code{get-lru-window} uses this field.

@item sequence_number
A unique number assigned to this window when it was created.

@item last_modified
The @code{modiff} field of the window's buffer, as of the last time a
redisplay completed in this window.

@item last_overlay_modified
The @code{overlay_modiff} field of the window's buffer, as of the last time
a redisplay completed in this window.

@item last_point
The buffer's value of point, as of the last time a redisplay completed in
this window.

@item last_had_star
A non-@code{nil} value means the window's buffer was ``modified'' when the
window was last updated.

@item vertical_scroll_bar
This window's vertical scroll bar.

@item left_margin_cols
@itemx right_margin_cols
The widths of the left and right margins in this window.  A value of
@code{nil} means no margin.

@item left_fringe_width
@itemx right_fringe_width
The widths of the left and right fringes in this window.  A value of
@code{nil} or @code{t} means use the values of the frame.

@item fringes_outside_margins
A non-@code{nil} value means the fringes outside the display margins;
othersize they are between the margin and the text.

@item window_end_pos
This is computed as @code{z} minus the buffer position of the last glyph in
the current matrix of the window.  The value is only valid if
@code{window_end_valid} is not @code{nil}.

@item window_end_bytepos
The byte position corresponding to @code{window_end_pos}.

@item window_end_vpos
The window-relative vertical position of the line containing
@code{window_end_pos}.

@item window_end_valid
This field is set to a non-@code{nil} value if @code{window_end_pos} is
truly valid.  This is @code{nil} if nontrivial redisplay is pre-empted,
since in that case the display that @code{window_end_pos} was computed for
did not get onto the screen.

@item cursor
A structure describing where the cursor is in this window.

@item last_cursor
The value of @code{cursor} as of the last redisplay that finished.

@item phys_cursor
A structure describing where the cursor of this window physically is.

@item phys_cursor_type
@c FIXME What is this?
@c itemx phys_cursor_ascent
@itemx phys_cursor_height
@itemx phys_cursor_width
The type, height, and width of the cursor that was last displayed on this
window.

@item phys_cursor_on_p
This field is non-zero if the cursor is physically on.

@item cursor_off_p
Non-zero means the cursor in this window is logically off.  This is used for
blinking the cursor.

@item last_cursor_off_p
This field contains the value of @code{cursor_off_p} as of the time of the
last redisplay.

@item must_be_updated_p
This is set to 1 during redisplay when this window must be updated.

@item hscroll
This is the number of columns that the display in the window is scrolled
horizontally to the left.  Normally, this is 0.

@item vscroll
Vertical scroll amount, in pixels.  Normally, this is 0.

@item dedicated
Non-@code{nil} if this window is dedicated to its buffer.

@item display_table
The window's display table, or @code{nil} if none is specified for it.

@item update_mode_line
Non-@code{nil} means this window's mode line needs to be updated.

@item base_line_number
The line number of a certain position in the buffer, or @code{nil}.  This is
used for displaying the line number of point in the mode line.

@item base_line_pos
The position in the buffer for which the line number is known, or @code{nil}
meaning none is known.  If it is a buffer, don't display the line number as
long as the window shows that buffer.

@item column_number_displayed
The column number currently displayed in this window's mode line, or
@code{nil} if column numbers are not being displayed.

@item current_matrix
@itemx desired_matrix
Glyph matrices describing the current and desired display of this window.
@end table

@node Process Internals
@subsection Process Internals
@cindex internals, of process
@cindex process internals

  The fields of a process (for a complete list, see the definition of
@code{struct Lisp_Process} in @file{process.h}) include:

@table @code
@item name
A string, the name of the process.

@item command
A list containing the command arguments that were used to start this
process.  For a network or serial process, it is @code{nil} if the process
is running or @code{t} if the process is stopped.

@item filter
A function used to accept output from the process.

@item sentinel
A function called whenever the state of the process changes.

@item buffer
The associated buffer of the process.

@item pid
An integer, the operating system's process @acronym{ID}.  Pseudo-processes
such as network or serial connections use a value of 0.

@item childp
A flag, @code{t} if this is really a child process.  For a network or serial
connection, it is a plist based on the arguments to
@code{make-network-process} or @code{make-serial-process}.

@item mark
A marker indicating the position of the end of the last output from this
process inserted into the buffer.  This is often but not always the end of
the buffer.

@item kill_without_query
If this is non-zero, killing Emacs while this process is still running does
not ask for confirmation about killing the process.

@item raw_status
The raw process status, as returned by the @code{wait} system call.

@item status
The process status, as @code{process-status} should return it.

@item tick
@itemx update_tick
If these two fields are not equal, a change in the status of the process
needs to be reported, either by running the sentinel or by inserting a
message in the process buffer.

@item pty_flag
Non-@code{nil} if communication with the subprocess uses a pty; @code{nil}
if it uses a pipe.

@item infd
The file descriptor for input from the process.

@item outfd
The file descriptor for output to the process.

@item tty_name
The name of the terminal that the subprocess is using, or @code{nil} if it
is using pipes.

@item decode_coding_system
Coding-system for decoding the input from this process.

@item decoding_buf
A working buffer for decoding.

@item decoding_carryover
Size of carryover in decoding.

@item encode_coding_system
Coding-system for encoding the output to this process.

@item encoding_buf
A working buffer for encoding.

@item inherit_coding_system_flag
Flag to set @code{coding-system} of the process buffer from the coding
system used to decode process output.

@item type
Symbol indicating the type of process: @code{real}, @code{network},
@code{serial}.

@end table

@node C Integer Types
@section C Integer Types
@cindex integer types (C programming language)

Here are some guidelines for use of integer types in the Emacs C source
code.  These guidelines sometimes give competing advice; common sense is
advised.

@itemize @bullet
@item
Avoid arbitrary limits.  For example, avoid @code{int len = strlen (s);}
unless the length of @code{s} is required for other reasons to fit in
@code{int} range.

@item
Do not assume that signed integer arithmetic wraps around on overflow.  This
is no longer true of Emacs porting targets: signed integer overflow has
undefined behavior in practice, and can dump core or even cause earlier or
later code to behave ``illogically''.  Unsigned overflow does wrap around
reliably, modulo a power of two.

@item
Prefer signed types to unsigned, as code gets confusing when signed and
unsigned types are combined.  Many other guidelines assume that types are
signed; in the rarer cases where unsigned types are needed, similar advice
may apply to the unsigned counterparts (e.g., @code{size_t} instead of
@code{ptrdiff_t}, or @code{uintptr_t} instead of @code{intptr_t}).

@item
Prefer @code{int} for Emacs character codes, in the range 0 ..@: 0x3FFFFF.

@item
Prefer @code{ptrdiff_t} for sizes, i.e., for integers bounded by the maximum
size of any individual C object or by the maximum number of elements in any
C array.  This is part of Emacs's general preference for signed types.
Using @code{ptrdiff_t} limits objects to @code{PTRDIFF_MAX} bytes, but
larger objects would cause trouble anyway since they would break pointer
subtraction, so this does not impose an arbitrary limit.

@item
Prefer @code{intptr_t} for internal representations of pointers, or for
integers bounded only by the number of objects that can exist at any given
time or by the total number of bytes that can be allocated.  Currently Emacs
sometimes uses other types when @code{intptr_t} would be better; fixing this
is lower priority, as the code works as-is on Emacs's current porting
targets.

@item
Prefer the Emacs-defined type @code{EMACS_INT} for representing values
converted to or from Emacs Lisp fixnums, as fixnum arithmetic is based on
@code{EMACS_INT}.

@item
When representing a system value (such as a file size or a count of seconds
since the Epoch), prefer the corresponding system type (e.g., @code{off_t},
@code{time_t}).  Do not assume that a system type is signed, unless this
assumption is known to be safe.  For example, although @code{off_t} is
always signed, @code{time_t} need not be.

@item
Prefer the Emacs-defined type @code{printmax_t} for representing values that
might be any signed integer that can be printed, using a
@code{printf}-family function.

@item
Prefer @code{intmax_t} for representing values that might be any signed
integer value.

@item
Prefer @code{bool}, @code{false} and @code{true} for booleans.  Using
@code{bool} can make programs easier to read and a bit faster than using
@code{int}.  Although it is also OK to use @code{int}, @code{0} and
@code{1}, this older style is gradually being phased out.  When using
@code{bool}, respect the limitations of the replacement implementation of
@code{bool}, as documented in the source file @file{lib/stdbool.in.h}, so
that Emacs remains portable to pre-C99 platforms.  In particular, boolean
bitfields should be of type @code{bool_bf}, not @code{bool}, so that they
work correctly even when compiling Objective C with standard GCC.

@item
In bitfields, prefer @code{unsigned int} or @code{signed int} to @code{int},
as @code{int} is less portable: it might be signed, and might not be.
Single-bit bit fields should be @code{unsigned int} or @code{bool_bf} so
that their values are 0 or 1.
@end itemize

@c FIXME Mention src/globals.h somewhere in this file?
