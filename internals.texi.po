# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-10-05 03:38+0900\n"
"PO-Revision-Date: 2019-10-07 19:38+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: appendix
#: internals.texi.orig:6 internals.texi.orig:7
#, no-wrap
msgid "GNU Emacs Internals"
msgstr "GNU Emacs Internals"

#. type: Plain text
#: internals.texi.orig:12
msgid "This chapter describes how the runnable Emacs executable is dumped with the preloaded Lisp libraries in it, how storage is allocated, and some internal aspects of GNU Emacs that may be of interest to C programmers."
msgstr "このチャプターでは、実行可能なEmacs実行可能形式を事前ロードされたLispライブラリーとともにダンプする方法と、ストレージが割り当てられる方法、およびCプログラマーが興味をもつかもしれないGNU Emacsの内部的な側面のいくつかを説明します。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:24 internals.texi.orig:25
#, no-wrap
msgid "Building Emacs"
msgstr "Building Emacs"

#. type: menuentry
#: internals.texi.orig:22
msgid "How the dumped Emacs is made."
msgstr "ダンプ済みEmacsの作成方法。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:160 internals.texi.orig:161
#, no-wrap
msgid "Pure Storage"
msgstr "Pure Storage"

#. type: menuentry
#: internals.texi.orig:22
msgid "Kludge to make preloaded Lisp functions shareable."
msgstr "その場かぎりの事前ロードされたLisp関数を共有する。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:220 internals.texi.orig:221
#, no-wrap
msgid "Garbage Collection"
msgstr "Garbage Collection"

#. type: menuentry
#: internals.texi.orig:22
msgid "Reclaiming space for Lisp objects no longer used."
msgstr "Lispオブジェクトの使用されないスペースの回収。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:527 internals.texi.orig:528
#, no-wrap
msgid "Memory Usage"
msgstr "Memory Usage"

#. type: menuentry
#: internals.texi.orig:22
msgid "Info about total size of Lisp objects made so far."
msgstr "これまでに作成されたLispオブジェクトの総サイズの情報。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:579 internals.texi.orig:580
#, no-wrap
msgid "C Dialect"
msgstr "C Dialect"

#. type: menuentry
#: internals.texi.orig:22
msgid "What C variant Emacs is written in."
msgstr "Emacsを記述するC系言語は何か。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:593 internals.texi.orig:594
#, no-wrap
msgid "Writing Emacs Primitives"
msgstr "Writing Emacs Primitives"

#. type: menuentry
#: internals.texi.orig:22
msgid "Writing C code for Emacs."
msgstr "Emacs用にCコードを記述する。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:918 internals.texi.orig:919
#, no-wrap
msgid "Object Internals"
msgstr "Object Internals"

#. type: menuentry
#: internals.texi.orig:22
msgid "Data formats of buffers, windows, processes."
msgstr "バッファー、ウィンドウ、プロセスのデーラフォーマット。"

#. type: section
#: internals.texi.orig:22 internals.texi.orig:1563 internals.texi.orig:1564
#, no-wrap
msgid "C Integer Types"
msgstr "C Integer Types"

#. type: menuentry
#: internals.texi.orig:22
msgid "How C integer types are used inside Emacs."
msgstr "Emacs内部でCの整数型が使用される方法。"

#. type: cindex
#: internals.texi.orig:26
#, no-wrap
msgid "building Emacs"
msgstr "building Emacs"

#. type: pindex
#: internals.texi.orig:27
#, no-wrap
msgid "temacs"
msgstr "temacs"

#. type: Plain text
#: internals.texi.orig:33
msgid "This section explains the steps involved in building the Emacs executable.  You don't have to know this material to build and install Emacs, since the makefiles do all these things automatically.  This information is pertinent to Emacs developers."
msgstr "このセクションでは、Emacs実行可能形式のビルドに関するステップの説明をします。makefileがこれらすべてを自動的に行うので、Emacsをビイルドおよびインストールするために、この題材を知る必要はありません。この情報は、Emacs開発者にとって適切です。"

#. type: Plain text
#: internals.texi.orig:38
msgid "Compilation of the C source files in the @file{src} directory produces an executable file called @file{temacs}, also called a @dfn{bare impure Emacs}.  It contains the Emacs Lisp interpreter and I/O routines, but not the editing commands."
msgstr "@file{src}ディレクトリー内のCソースファイルをコンパイルすることにより、@file{temacs}と呼ばれる実行可能形式ファイルが生成されます。これは@dfn{bare impure Emacs()裸で不純なEmacs}とも呼ばれます。これにはEmacs LispインタープリターとI/Oルーチンが含まれますが、編集コマンドは含まれません。"

#. type: file{#1}
#: internals.texi.orig:39
#, no-wrap
msgid "loadup.el"
msgstr "loadup.el"

#. type: Plain text
#: internals.texi.orig:45
msgid "The command @w{@command{temacs -l loadup}} would run @file{temacs} and direct it to load @file{loadup.el}.  The @code{loadup} library loads additional Lisp libraries, which set up the normal Emacs editing environment.  After this step, the Emacs executable is no longer @dfn{bare}."
msgstr "コマンド@w{@command{temacs -l loadup}}は@file{temacs}を実行して、それが@file{loadup.el}をロードするよう計らいます。@code{loadup}ライブラリーは、通常のEmacs編集環境をセットアップする、追加のLispライブラリーをロードします。このステップの後には、そのEmacs実行可能形式は@dfn{bare(裸)}ではなくなります。"

#. type: cindex
#: internals.texi.orig:46
#, no-wrap
msgid "dumping Emacs"
msgstr "dumping Emacs"

#. type: Plain text
#: internals.texi.orig:56
msgid "Because it takes some time to load the standard Lisp files, the @file{temacs} executable usually isn't run directly by users.  Instead, as one of the last steps of building Emacs, the command @samp{temacs -batch -l loadup dump} is run.  The special @samp{dump} argument causes @command{temacs} to dump out an executable program, called @file{emacs}, which has all the standard Lisp files preloaded.  (The @samp{-batch} argument prevents @file{temacs} from trying to initialize any of its data on the terminal, so that the tables of terminal information are empty in the dumped Emacs.)"
msgstr "標準的なLispファイルのロードには若干の時間を要するので、ユーザーが直接@file{temacs}実行可能形式を実行することは、通常はありません。そのかわり、Emacsビルドの最終ステップとして、コマンド@samp{temacs -batch -l loadup dump}が実行されます。特別な引数@samp{dump}により、@command{temacs}は@file{emacs}と呼ばれる実行可能形式のプログラムにダンプされます。これには、標準的なLispファイルがすべて事前ロードされています。(引数@samp{-batch}は@file{temacs}がその端末上でデータの初期化を試みることを防げるので、端末情報のテーブルはダンプされたEmacsでは空になる。)"

#. type: cindex
#: internals.texi.orig:57
#, no-wrap
msgid "preloaded Lisp files"
msgstr "preloaded Lisp files"

#. type: vindex
#: internals.texi.orig:58
#, no-wrap
msgid "preloaded-file-list"
msgstr "preloaded-file-list"

#. type: Plain text
#: internals.texi.orig:65
msgid "The dumped @file{emacs} executable (also called a @dfn{pure} Emacs)  is the one which is installed.  The variable @code{preloaded-file-list} stores a list of the Lisp files preloaded into the dumped Emacs.  If you port Emacs to a new operating system, and are not able to implement dumping, then Emacs must load @file{loadup.el} each time it starts."
msgstr "ダンプされた@file{emacs}実行可能形式(@dfn{純粋}なEmacsとも呼ばれる)が、インストールされるEmacsになります。変数@code{preloaded-file-list}には、ダンプ済みEmacsに事前ロードされるLispファイルのリストが格納されています。新たなオペレーティングシステムにEmacsをポートする際、そのOSがダンプを実装していなければ、Emacsは起動時に毎回@file{loadup.el}をロードしなければなりません。"

#. type: file{#1}
#: internals.texi.orig:66
#, no-wrap
msgid "site-load.el"
msgstr "site-load.el"

#. type: Plain text
#: internals.texi.orig:70
msgid "You can specify additional files to preload by writing a library named @file{site-load.el} that loads them.  You may need to rebuild Emacs with an added definition"
msgstr "@file{site-load.el}という名前のライブラリーを記述することにより、事前ロードするファイルを追加指定できます。追加するファイルを保持するための純粋なスペース@var{n}バイトを追加するように、以下の定義"

#. type: example
#: internals.texi.orig:73
#, no-wrap
msgid "#define SITELOAD_PURESIZE_EXTRA @var{n}\n"
msgstr "#define SITELOAD_PURESIZE_EXTRA @var{n}\n"

#. type: Plain text
#: internals.texi.orig:81
msgid "to make @var{n} added bytes of pure space to hold the additional files; see @file{src/puresize.h}.  (Try adding increments of 20000 until it is big enough.)  However, the advantage of preloading additional files decreases as machines get faster.  On modern machines, it is usually not advisable."
msgstr "でEmacsをリビルドする必要があるでしょう。@file{src/puresize.h}を参考にしてください(十分大きくなるまで、20000▽ずつ増加させる)。しかし、追加ファイルの事前ロードの優位は、マシンの高速化により減少します。現代的なマシンでは、通常はお勧めしません。"

#. type: Plain text
#: internals.texi.orig:87
msgid "After @file{loadup.el} reads @file{site-load.el}, it finds the documentation strings for primitive and preloaded functions (and variables) in the file @file{etc/DOC} where they are stored, by calling @code{Snarf-documentation} (@pxref{Definition of Snarf-documentation,, Accessing Documentation})."
msgstr "@file{loadup.el}が@file{site-load.el}を読み込んだ後に@code{Snarf-documentation}を呼び出すことにより、それらが格納された場所のファイル@file{etc/DOC}内にある、プリミティブと事前ロードされる関数(と変数)のドキュメント文字列を探します(@ref{Definition of Snarf-documentation,, Accessing Documentation}を参照)。"

#. type: file{#1}
#: internals.texi.orig:88
#, no-wrap
msgid "site-init.el"
msgstr "site-init.el"

#. type: cindex
#: internals.texi.orig:89
#, no-wrap
msgid "preloading additional functions and variables"
msgstr "preloading additional functions and variables"

#. type: Plain text
#: internals.texi.orig:93
msgid "You can specify other Lisp expressions to execute just before dumping by putting them in a library named @file{site-init.el}.  This file is executed after the documentation strings are found."
msgstr "@file{site-init.el}という名前のライブラリー名に配置することにより、ダンプ直前に実行する他のLisp式を指定できます。このファイルは、ドキュメント文字列を見つけた後に実行されます。"

#. type: Plain text
#: internals.texi.orig:97
msgid "If you want to preload function or variable definitions, there are three ways you can do this and make their documentation strings accessible when you subsequently run Emacs:"
msgstr "関数または変数の定義を事前ロードしたい場合には、それを行うために、3つの方法があります。それらにより定義ロードして、その後のEmacs実行時にドキュメント文字列をアクセス可能にします:"

#. type: itemize
#: internals.texi.orig:102
msgid "Arrange to scan these files when producing the @file{etc/DOC} file, and load them with @file{site-load.el}."
msgstr "@file{etc/DOC}の生成時にそれらのファイルをスキャンするよう計らい、それらを@file{site-load.el}でロードする。"

#. type: itemize
#: internals.texi.orig:106
msgid "Load the files with @file{site-init.el}, then copy the files into the installation directory for Lisp files when you install Emacs."
msgstr "ファイルを@file{site-init.el}でロードして、Emacsインストール時にLispファイルのインストール先ディレクトリーに、そのファイルをコピーする。"

#. type: itemize
#: internals.texi.orig:113
msgid "Specify a @code{nil} value for @code{byte-compile-dynamic-docstrings} as a local variable in each of these files, and load them with either @file{site-load.el} or @file{site-init.el}.  (This method has the drawback that the documentation strings take up space in Emacs all the time.)"
msgstr "それらの各ファイルで、ローカル変数として@code{byte-compile-dynamic-docstrings}に@code{nil}値を指定して、それらを@file{site-load.el}か@file{site-init.el}でロードする(この手法には、Emacsが毎回そのドキュメント文字列用のスペースを確保するという欠点がある)。"

#. type: cindex
#: internals.texi.orig:115
#, no-wrap
msgid "change @code{load-path} at configure time"
msgstr "change @code{load-path} at configure time"

#. type: cindex
#: internals.texi.orig:116
#, no-wrap
msgid "@option{--enable-locallisppath} option to @command{configure}"
msgstr "@option{--enable-locallisppath} option to @command{configure}"

#. type: Plain text
#: internals.texi.orig:127
msgid "It is not advisable to put anything in @file{site-load.el} or @file{site-init.el} that would alter any of the features that users expect in an ordinary unmodified Emacs.  If you feel you must override normal features for your site, do it with @file{default.el}, so that users can override your changes if they wish.  @xref{Startup Summary}.  Note that if either @file{site-load.el} or @file{site-init.el} changes @code{load-path}, the changes will be lost after dumping.  @xref{Library Search}.  To make a permanent change to @code{load-path}, use the @option{--enable-locallisppath} option of @command{configure}."
msgstr "通常の未変更のEmacsでユーザーが期待する何らかの機能を変更するような何かを、@file{site-load.el}または@file{site-init.el}内に配置することはお勧めしません。あなたのサイトで通常の機能をオーバーライドしなければならないと感じた場合には、@file{default.el}でそれを行えば、ユーザーが望む場合にあなたの変更をオーバーライドできます。@ref{Startup Summary}を参照してください。@file{site-load.el}か@file{site-init.el}のいずれかが@code{load-path}を変更する場合、その変更はダンプ後に失われます。@ref{Library Search}を参照してください。@code{load-path}を永続的に変更するには、@command{configure}の@option{--enable-locallisppath}オプションを指定してください。"

#. type: Plain text
#: internals.texi.orig:137
msgid "In a package that can be preloaded, it is sometimes necessary (or useful) to delay certain evaluations until Emacs subsequently starts up.  The vast majority of such cases relate to the values of customizable variables.  For example, @code{tutorial-directory} is a variable defined in @file{startup.el}, which is preloaded.  The default value is set based on @code{data-directory}.  The variable needs to access the value of @code{data-directory} when Emacs starts, not when it is dumped, because the Emacs executable has probably been installed in a different location since it was dumped."
msgstr "事前ロード可能なパッケージでは、その後のEmacsスタートアップまで、特定の評価を遅延させのが必要(または便利)なことがあります。そのようなケースの大半は、カスタマイズ可能な変数の値に関するものです。たとえば@code{tutorial-directory}は、事前ロードされる@file{startup.el}内で定義される変数です。これのデフォルト値は、@code{data-directory}にもとづいてセットされます。この変数はEmacsダンプ時ではなく、スタート時に@code{data-directory}の値を必要とします。なぜならEmacs実行可能形式はダンプされたものなので、恐らく異なる場所にインストールされます。"

#. type: defun
#: internals.texi.orig:138
#, no-wrap
msgid "custom-initialize-delay symbol value"
msgstr "custom-initialize-delay symbol value"

#. type: defun
#: internals.texi.orig:144
msgid "This function delays the initialization of @var{symbol} to the next Emacs start.  You normally use this function by specifying it as the @code{:initialize} property of a customizable variable.  (The argument @var{value} is unused, and is provided only for compatibility with the form Custom expects.)"
msgstr "この関数は、次回のEmacs開始まで@var{symbol}の初期化を遅延する。通常は、カスタマイズ可能変数の@code{:initialize}プロパティとしてこの関数を指定することにより使用する(引数@var{value}はフォームCustom由来の互換性のためだけに提供されており使用しない)。"

#. type: Plain text
#: internals.texi.orig:149
msgid "In the unlikely event that you need a more general functionality than @code{custom-initialize-delay} provides, you can use @code{before-init-hook} (@pxref{Startup Summary})."
msgstr "@code{custom-initialize-delay}が提供するより一般的な機能を要するような稀なケースでは、@code{before-init-hook}を使用できます(@ref{Startup Summary}を参照)。"

#. type: defun
#: internals.texi.orig:150
#, no-wrap
msgid "dump-emacs to-file from-file"
msgstr "dump-emacs to-file from-file"

#. type: cindex
#: internals.texi.orig:151
#, no-wrap
msgid "unexec"
msgstr "unexec"

#. type: defun
#: internals.texi.orig:155
msgid "This function dumps the current state of Emacs into an executable file @var{to-file}.  It takes symbols from @var{from-file} (this is normally the executable file @file{temacs})."
msgstr "この関数は、Emacsのカレント状態を、実行可能ファイル@var{to-file}にダンプする。これは@var{from-file}(通常はファイル@file{temacs})からシンボルを取得する。"

#. type: defun
#: internals.texi.orig:158
msgid "If you want to use this function in an Emacs that was already dumped, you must run Emacs with @samp{-batch}."
msgstr "すでにダンプ済みのEmacs内でこの関数を使用する場合には、@samp{-batch}でEmacsを実行しなければならない。"

#. type: cindex
#: internals.texi.orig:162
#, no-wrap
msgid "pure storage"
msgstr "pure storage"

#. type: Plain text
#: internals.texi.orig:170
msgid "Emacs Lisp uses two kinds of storage for user-created Lisp objects: @dfn{normal storage} and @dfn{pure storage}.  Normal storage is where all the new data created during an Emacs session are kept (@pxref{Garbage Collection}).  Pure storage is used for certain data in the preloaded standard Lisp files---data that should never change during actual use of Emacs."
msgstr "Emacs Lispはユーザー作成Lispオブジェクトにたいして、@dfn{通常ストレージ(normal storage)}と@dfn{純粋ストレージ(pure storage)}という、2種のストレージをもちます。通常ストレージは、Emacsセッションが維持される間に、新たにデータが作成される場所です。純粋ストレージは、事前ロードされた標準Lispファイル内の、特定のデータのために使用されます。このデータは実際のEmacs使用中に決して変更されるべきではないデータです。"

#. type: Plain text
#: internals.texi.orig:186
msgid "Pure storage is allocated only while @command{temacs} is loading the standard preloaded Lisp libraries.  In the file @file{emacs}, it is marked as read-only (on operating systems that permit this), so that the memory space can be shared by all the Emacs jobs running on the machine at once.  Pure storage is not expandable; a fixed amount is allocated when Emacs is compiled, and if that is not sufficient for the preloaded libraries, @file{temacs} allocates dynamic memory for the part that didn't fit.  The resulting image will work, but garbage collection (@pxref{Garbage Collection}) is disabled in this situation, causing a memory leak.  Such an overflow normally won't happen unless you try to preload additional libraries or add features to the standard ones.  Emacs will display a warning about the overflow when it starts.  If this happens, you should increase the compilation parameter @code{SYSTEM_PURESIZE_EXTRA} in the file @file{src/puresize.h} and rebuild Emacs."
msgstr "純粋ストレージは、@command{temacs}が標準的な事前ローLispライブラリーのロード中だけ割り当てられます。ファイル@file{emacs}では、このメモリースペースは読み取り専用とマークされるので、そのマシン上で実行中のすべてのEmacsジョブで共有できます。純粋ストレージは拡張できません。Emacsのコンパイル時に固定された量が割り当てられ、それが事前ロードされるライブラリーにたいして不足なら、@file{temacs}はそれに収まらない部分を動的メモリーに割り当てます。結果イメージは動作するでしょうが、この状況ではメモリーリークとなるので、ガーベージコレクション(@ref{Garbage Collection}を参照)は無効です。そのような通常なら発生しないオーバーフローは、あなたが事前ロードライブラリの追加や、標準的な事前ロードライブラリに追加を試みないかぎり発生しません。Emacsはオーバーロードの開始時に、オーバーロードに関する警告を表示するでしょう。これが発生したら、ファイル@file{src/puresize.h}内のコンパイルパラメーターを@code{SYSTEM_PURESIZE_EXTRA}を増やして、Emacsをリビルドする必要があります。"

#. type: defun
#: internals.texi.orig:187
#, no-wrap
msgid "purecopy object"
msgstr "purecopy object"

#. type: defun
#: internals.texi.orig:194
msgid "This function makes a copy in pure storage of @var{object}, and returns it.  It copies a string by simply making a new string with the same characters, but without text properties, in pure storage.  It recursively copies the contents of vectors and cons cells.  It does not make copies of other objects such as symbols, but just returns them unchanged.  It signals an error if asked to copy markers."
msgstr "この関数は純粋ストレージに@var{object}のコピーを作成して、それをリターンする。これは同じ文字で新たに文字列を作成することにより文字列をコピーするが、純粋ストレージではテキストプロパティはない。これはベクターとコンスセルのコンテンツを、再帰的にコピーする。シンボルのような他のオブジェクトのコピーは作成しないが、それらを未変更でリターンする。マーカーのコピーを試みると、エラーをシグナルする。"

#. type: defun
#: internals.texi.orig:197
msgid "This function is a no-op except while Emacs is being built and dumped; it is usually called only in preloaded Lisp files."
msgstr "この関数は、Emacsのビルド中とダンプ中を除き、何もしない。通常は事前ロードされるLispファイル内でのみ呼び出される。"

#. type: defvar
#: internals.texi.orig:199
#, no-wrap
msgid "pure-bytes-used"
msgstr "pure-bytes-used"

#. type: defvar
#: internals.texi.orig:204
msgid "The value of this variable is the number of bytes of pure storage allocated so far.  Typically, in a dumped Emacs, this number is very close to the total amount of pure storage available---if it were not, we would preallocate less."
msgstr "この変数の値は、これまでに割り当てられた純粋ストレージのバイト数である。ダンプされたEmacsでは、通常は利用可能な純粋ストレージの総量とほとんど同じであり、もしそうでないならわたしたちは事前割り当てをもっと少なくするだろう。"

#. type: defvar
#: internals.texi.orig:206
#, no-wrap
msgid "purify-flag"
msgstr "purify-flag"

#. type: defvar
#: internals.texi.orig:210
msgid "This variable determines whether @code{defun} should make a copy of the function definition in pure storage.  If it is non-@code{nil}, then the function definition is copied into pure storage."
msgstr "この変数は、@code{defun}が純粋ストレージにその関数定義のコピーを作成するべきか否かを判断する。これが非@code{nil}なら、その関数の定義は純粋ストレージにコピーされる。"

#. type: defvar
#: internals.texi.orig:216
msgid "This flag is @code{t} while loading all of the basic functions for building Emacs initially (allowing those functions to be shareable and non-collectible).  Dumping Emacs as an executable always writes @code{nil} in this variable, regardless of the value it actually has before and after dumping."
msgstr "このフラグは、Emacsのビルド用の基本的な関数の初回ロード中は@code{t}となる。実行可能形式としてEmacsをダンプすることにより、ダンプ前後の実際の値とは無関係に、常にこの変数に@code{nil}が書き込まれる。"

#. type: defvar
#: internals.texi.orig:218
msgid "You should not change this flag in a running Emacs."
msgstr "実行中のEmacsで、このフラグを変更しないこと。"

#. type: cindex
#: internals.texi.orig:223
#, no-wrap
msgid "memory allocation"
msgstr "memory allocation"

#. type: Plain text
#: internals.texi.orig:233
msgid "When a program creates a list or the user defines a new function (such as by loading a library), that data is placed in normal storage.  If normal storage runs low, then Emacs asks the operating system to allocate more memory.  Different types of Lisp objects, such as symbols, cons cells, small vectors, markers, etc., are segregated in distinct blocks in memory.  (Large vectors, long strings, buffers and certain other editing types, which are fairly large, are allocated in individual blocks, one per object; small strings are packed into blocks of 8k bytes, and small vectors are packed into blocks of 4k bytes)."
msgstr "プログラムがリストを作成するときや、(ライブライのロード等により)ユーザーが新しい関数を定義する際、そのデータは通常ストレージに配置されます。通常ストレージが少なくなると、Emacsはもっとメモリーを割り当てるようオペレーティングシステムに要求します。シンボル、コンスセル、小さいベクター、マーカー等のような別のタイプのLispオブジェクトは、メモリー内の個別のブロックに隔離されます(大きいベクター、長い文字列、バッファー、および他の特定の編集タイプは非常に巨大であり、1つのオブジェクトにたいして個別のブロックが割り当てられ、小さな文字列は8kバイトのブロック、小さいベクターは4kバイトのブロックにパックされる)。"

#. type: cindex
#: internals.texi.orig:234
#, no-wrap
msgid "vector-like objects, storage"
msgstr "vector-like objects, storage"

#. type: cindex
#: internals.texi.orig:235
#, no-wrap
msgid "storage of vector-like Lisp objects"
msgstr "storage of vector-like Lisp objects"

#. type: Plain text
#: internals.texi.orig:244
msgid "Beyond the basic vector, a lot of objects like window, buffer, and frame are managed as if they were vectors.  The corresponding C data structures include the @code{struct vectorlike_header} field whose @code{size} member contains the subtype enumerated by @code{enum pvec_type} and an information about how many @code{Lisp_Object} fields this structure contains and what the size of the rest data is.  This information is needed to calculate the memory footprint of an object, and used by the vector allocation code while iterating over the vector blocks."
msgstr "基本的なベクトではないウィンドウ、バッファー、フレームがあたかもベクターであるかのように管理されています。対応するCデータ構造体には@code{struct vectorlike_header}フィールドが含まれ、そのメンバー@code{size}には@code{enum pvec_type}で列挙されたサブタイプ、その構造体が含む@code{Lisp_Object}フィールドの数に関する情報、および残りのデータのサイズが含まれます。この情報は、オブジェクトのメモリーフットプリントの計算に必要であり、ベクターブロックの繰り返し処理の際のベクター割り当てコードにより使用されます。"

#. type: cindex
#: internals.texi.orig:245
#, no-wrap
msgid "garbage collection"
msgstr "garbage collection"

#. type: Plain text
#: internals.texi.orig:255
msgid "It is quite common to use some storage for a while, then release it by (for example) killing a buffer or deleting the last pointer to an object.  Emacs provides a @dfn{garbage collector} to reclaim this abandoned storage.  The garbage collector operates by finding and marking all Lisp objects that are still accessible to Lisp programs.  To begin with, it assumes all the symbols, their values and associated function definitions, and any data presently on the stack, are accessible.  Any objects that can be reached indirectly through other accessible objects are also accessible."
msgstr "しばらくの間いくつかのストレージを使用して、(たとえば)バッファーのkillやあるオブジェクトを指す最後のポインターの削除によりそれを開放するのは、非常に一般的なことです。この放棄されたストレージを再利用するために、Emacsは@dfn{ガーベージコレクター(garbage collector)}を提供します。ガーベージコレクターは、いまだLispプログラムからアクセス可能なすべてのLispオブジェクトを検索、マークすることにより動作します。これを開始するには、すべてのシンボル、それらの値と関連付けられている関数定義、現在スタック上にあるすべてのデータをアクセス可能と仮定します。別のアクセス可能オブジェクトを介して間接的に到達できるスベテのオブジェクトも、アクセス可能とみなされます。"

#. type: Plain text
#: internals.texi.orig:261
msgid "When marking is finished, all objects still unmarked are garbage.  No matter what the Lisp program or the user does, it is impossible to refer to them, since there is no longer a way to reach them.  Their space might as well be reused, since no one will miss them.  The second (``sweep'') phase of the garbage collector arranges to reuse them."
msgstr "マーキングが終了して、それでもマークされないオブジェクトはすべてガーベージ(garbage: ごみ)です。Lispプログラムかユーザーの行為かに関わらず、それらに到達する手段はもはや存在しないので、それらを参照することは不可能です。誰もそれを失うことはないので、それらのスペースは再利用されることになります。ガーベージコレクターの2つ目の((``スイープ(sweep: 一掃'')))のフェーズでは、それらの再利用を計らいます。"

#. type: cindex
#: internals.texi.orig:264
#, no-wrap
msgid "free list"
msgstr "free list"

#. type: Plain text
#: internals.texi.orig:274
msgid "The sweep phase puts unused cons cells onto a @dfn{free list} for future allocation; likewise for symbols and markers.  It compacts the accessible strings so they occupy fewer 8k blocks; then it frees the other 8k blocks.  Unreachable vectors from vector blocks are coalesced to create largest possible free areas; if a free area spans a complete 4k block, that block is freed.  Otherwise, the free area is recorded in a free list array, where each entry corresponds to a free list of areas of the same size.  Large vectors, buffers, and other large objects are allocated and freed individually."
msgstr "スイープフェーズは将来の割り当て用に、シンボルやマーカーと同様に、未使用のコンスセルを@dfn{フリーリスト(free list)}上に配置します。これは、アクセス可能な文字列は少数の8kブロックを占有するように圧縮して、その後に他の8kブロックを開放します。ベクターブロックから到達不可能はベクターは、可能なかぎり最大のフリーエリアを作成するために統合し、フリーエリアが完全な4kブロックに跨がるようなら、そのブロックは開放されます。それ以外なら、そのフリーエリアはフリーリスト配列に記録されます。これは、各エントリーが同サイズのエリアのフリーリストに対応します。巨大なベクター、バッファー、その他の巨大なオブジェクトは、個別に割り当てと開放が行われます。"

#. type: cindex
#: internals.texi.orig:275
#, no-wrap
msgid "CL note---allocate more storage"
msgstr "CL note---allocate more storage"

#. type: quotation
#: internals.texi.orig:282
msgid "@b{Common Lisp note:} Unlike other Lisps, GNU Emacs Lisp does not call the garbage collector when the free list is empty.  Instead, it simply requests the operating system to allocate more storage, and processing continues until @code{gc-cons-threshold} bytes have been used."
msgstr "@b{Common Lispに関する注意:} 他のLispと異なり、GNU Emacs Lispはフリーリストが空のときにガーベージコレクターを呼び出さない。かわりに、単にオペレーティングシステムに更なるストレージの割り当てを要求して、@code{gc-cons-threshold}バイトを使い切るまで処理を継続する。"

#. type: quotation
#: internals.texi.orig:288
msgid "This means that you can make sure that the garbage collector will not run during a certain portion of a Lisp program by calling the garbage collector explicitly just before it (provided that portion of the program does not use so much space as to force a second garbage collection)."
msgstr "これは特定のLispプログラムの範囲の実行直前に、明示的にガーベージコレクターを呼び出せば、その範囲の実行中はガーベージコレクターが実行されないだろうと確信できることを意味する(そのプログラム範囲が2回目のガーベージコレクションを強制するほど、多くのスペースを使用しないという前提)。"

#. type: deffn
#: internals.texi.orig:290
#, no-wrap
msgid "Command garbage-collect"
msgstr "Command garbage-collect"

#. type: deffn
#: internals.texi.orig:295
msgid "This command runs a garbage collection, and returns information on the amount of space in use.  (Garbage collection can also occur spontaneously if you use more than @code{gc-cons-threshold} bytes of Lisp data since the previous garbage collection.)"
msgstr "このコマンドはガーベージコレクションを実行して、使用中のスペース量の情報をリターンする(前回のガーベージコレクション以降、@code{gc-cons-threshold}バイトより多いLispデータを使用した場合には、自然にガーベージコレクションが発生することもあり得る)。"

#. type: deffn
#: internals.texi.orig:304
msgid "@code{garbage-collect} returns a list with information on amount of space in use, where each entry has the form @samp{(@var{name} @var{size} @var{used})} or @samp{(@var{name} @var{size} @var{used} @var{free})}.  In the entry, @var{name} is a symbol describing the kind of objects this entry represents, @var{size} is the number of bytes used by each one, @var{used} is the number of those objects that were found live in the heap, and optional @var{free} is the number of those objects that are not live but that Emacs keeps around for future allocations.  So an overall result is:"
msgstr "@code{garbage-collect}は使用中のスペース量の情報をリストでリターンする。これの各エントリーは@samp{(@var{name} @var{size} @var{used})}という形式をもつ。このエントリーで@var{name}はそのエントリーが対応するオブジェクトの種類を記述するシンボル、@var{size}はそれが使用するバイト数、@var{used}はヒープ内で生きていることが解ったオブケウトの数、オプションの@var{free}は、生きていないがEmacsが将来の割り当て用に保持しているオブジェクトの数である。全体的な結果は以下のようになる:"

#. type: example
#: internals.texi.orig:317
#, no-wrap
msgid ""
"((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})\n"
" (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})\n"
" (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})\n"
" (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})\n"
" (@code{string-bytes} @var{byte-size} @var{used-bytes})\n"
" (@code{vectors} @var{vector-size} @var{used-vectors})\n"
" (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})\n"
" (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})\n"
" (@code{intervals} @var{interval-size} @var{used-intervals} @var{free-intervals})\n"
" (@code{buffers} @var{buffer-size} @var{used-buffers})\n"
" (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))\n"
msgstr ""
"((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})\n"
" (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})\n"
" (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})\n"
" (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})\n"
" (@code{string-bytes} @var{byte-size} @var{used-bytes})\n"
" (@code{vectors} @var{vector-size} @var{used-vectors})\n"
" (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})\n"
" (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})\n"
" (@code{intervals} @var{interval-size} @var{used-intervals} @var{free-intervals})\n"
" (@code{buffers} @var{buffer-size} @var{used-buffers})\n"
" (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))\n"

#. type: deffn
#: internals.texi.orig:320
msgid "Here is an example:"
msgstr "以下に例を示す:"

#. type: example
#: internals.texi.orig:329
#, no-wrap
msgid ""
"(garbage-collect)\n"
"      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)\n"
"                 (miscs 40 34 56) (strings 32 2942 2607)\n"
"                 (string-bytes 1 78607) (vectors 16 7247)\n"
"                 (vector-slots 8 341609 29474) (floats 8 71 102)\n"
"                 (intervals 56 27 26) (buffers 944 8)\n"
"                 (heap 1024 11715 2678))\n"
msgstr ""
"(garbage-collect)\n"
"      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)\n"
"                 (miscs 40 34 56) (strings 32 2942 2607)\n"
"                 (string-bytes 1 78607) (vectors 16 7247)\n"
"                 (vector-slots 8 341609 29474) (floats 8 71 102)\n"
"                 (intervals 56 27 26) (buffers 944 8)\n"
"                 (heap 1024 11715 2678))\n"

#. type: deffn
#: internals.texi.orig:334
msgid "Below is a table explaining each element.  Note that last @code{heap} entry is optional and present only if an underlying @code{malloc} implementation provides @code{mallinfo} function."
msgstr "以下は、各要素を説明するためのテーブルである。最後の@code{heap}エントリーはオプションであり、背景の@code{malloc}実装が@code{mallinfo}関数を提供する場合のみ与えられることに注意。"

#. type: item
#: internals.texi.orig:336
#, no-wrap
msgid "cons-size"
msgstr "cons-size"

#. type: table
#: internals.texi.orig:338
msgid "Internal size of a cons cell, i.e., @code{sizeof (struct Lisp_Cons)}."
msgstr "コンスセルの内部的サイズ(@code{sizeof (struct Lisp_Cons)})。"

#. type: item
#: internals.texi.orig:339
#, no-wrap
msgid "used-conses"
msgstr "used-conses"

#. type: table
#: internals.texi.orig:341
msgid "The number of cons cells in use."
msgstr "使用中のコンスセルの数。"

#. type: item
#: internals.texi.orig:342
#, no-wrap
msgid "free-conses"
msgstr "free-conses"

#. type: table
#: internals.texi.orig:345
msgid "The number of cons cells for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるが、カレントで未使用のコンスセルの数。"

#. type: item
#: internals.texi.orig:346
#, no-wrap
msgid "symbol-size"
msgstr "symbol-size"

#. type: table
#: internals.texi.orig:348
msgid "Internal size of a symbol, i.e., @code{sizeof (struct Lisp_Symbol)}."
msgstr "シンボルの内部的サイズ(@code{sizeof (struct Lisp_Symbol)})。"

#. type: item
#: internals.texi.orig:349
#, no-wrap
msgid "used-symbols"
msgstr "used-symbols"

#. type: table
#: internals.texi.orig:351
msgid "The number of symbols in use."
msgstr "使用中のシンボルの数。"

#. type: item
#: internals.texi.orig:352
#, no-wrap
msgid "free-symbols"
msgstr "free-symbols"

#. type: table
#: internals.texi.orig:355
msgid "The number of symbols for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるが、カレントで未使用のシンボルの数。"

#. type: item
#: internals.texi.orig:356
#, no-wrap
msgid "misc-size"
msgstr "misc-size"

#. type: table
#: internals.texi.orig:360
msgid "Internal size of a miscellaneous entity, i.e., @code{sizeof (union Lisp_Misc)}, which is a size of the largest type enumerated in @code{enum Lisp_Misc_Type}."
msgstr "雑多なエンティティーの内部的なサイズ。@code{sizeof (union Lisp_Misc)}は@code{enum Lisp_Misc_Type}に列挙された最大タイプのサイズ。"

#. type: item
#: internals.texi.orig:361
#, no-wrap
msgid "used-miscs"
msgstr "used-miscs"

#. type: table
#: internals.texi.orig:364
msgid "The number of miscellaneous objects in use.  These include markers and overlays, plus certain objects not visible to users."
msgstr "使用中の雑多なエンティティーの数。これらのエンティティーにはマーカー、オーバーレイに加えて、ユーザーにとって不可視な特定オブジェクトが含まれる。"

#. type: item
#: internals.texi.orig:365
#, no-wrap
msgid "free-miscs"
msgstr "free-miscs"

#. type: table
#: internals.texi.orig:368
msgid "The number of miscellaneous objects for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるが、カレントで未使用の雑多なオブジェクトの数。"

#. type: item
#: internals.texi.orig:369
#, no-wrap
msgid "string-size"
msgstr "string-size"

#. type: table
#: internals.texi.orig:371
msgid "Internal size of a string header, i.e., @code{sizeof (struct Lisp_String)}."
msgstr "文字列ヘッダーの内部的サイズ(@code{sizeof (struct Lisp_String)})。"

#. type: item
#: internals.texi.orig:372
#, no-wrap
msgid "used-strings"
msgstr "used-strings"

#. type: table
#: internals.texi.orig:374
msgid "The number of string headers in use."
msgstr "使用中の文字列ヘッダーの数。"

#. type: item
#: internals.texi.orig:375
#, no-wrap
msgid "free-strings"
msgstr "free-strings"

#. type: table
#: internals.texi.orig:378
msgid "The number of string headers for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるが、カレントで未使用の文字列ヘッダーの数。"

#. type: item
#: internals.texi.orig:379
#, no-wrap
msgid "byte-size"
msgstr "byte-size"

#. type: table
#: internals.texi.orig:381
msgid "This is used for convenience and equals to @code{sizeof (char)}."
msgstr "これは利便性のために使用され、@code{sizeof (char)}と同じ。"

#. type: item
#: internals.texi.orig:382
#, no-wrap
msgid "used-bytes"
msgstr "used-bytes"

#. type: table
#: internals.texi.orig:384
msgid "The total size of all string data in bytes."
msgstr "すべての文字列データの総バイト数。"

#. type: item
#: internals.texi.orig:385
#, no-wrap
msgid "vector-size"
msgstr "vector-size"

#. type: table
#: internals.texi.orig:387
msgid "Internal size of a vector header, i.e., @code{sizeof (struct Lisp_Vector)}."
msgstr "ベクターヘッダーの内部的サイズ(@code{sizeof (struct Lisp_Vector)})。"

#. type: item
#: internals.texi.orig:388
#, no-wrap
msgid "used-vectors"
msgstr "used-vectors"

#. type: table
#: internals.texi.orig:390
msgid "The number of vector headers allocated from the vector blocks."
msgstr "ベクターブロックから割り当てられたベクターブロック数。"

#. type: item
#: internals.texi.orig:391
#, no-wrap
msgid "slot-size"
msgstr "slot-size"

#. type: table
#: internals.texi.orig:393
msgid "Internal size of a vector slot, always equal to @code{sizeof (Lisp_Object)}."
msgstr "ベクタースロットの内部的なサイズで、常に@code{sizeof (Lisp_Object)}と等しい。"

#. type: item
#: internals.texi.orig:394
#, no-wrap
msgid "used-slots"
msgstr "used-slots"

#. type: table
#: internals.texi.orig:396
msgid "The number of slots in all used vectors."
msgstr "使用されているすべてのベクターのスロット数。"

#. type: item
#: internals.texi.orig:397
#, no-wrap
msgid "free-slots"
msgstr "free-slots"

#. type: table
#: internals.texi.orig:399
msgid "The number of free slots in all vector blocks."
msgstr "すべてのベクターブロックのフリースロットの数。"

#. type: item
#: internals.texi.orig:400
#, no-wrap
msgid "float-size"
msgstr "float-size"

#. type: table
#: internals.texi.orig:403
msgid "Internal size of a float object, i.e., @code{sizeof (struct Lisp_Float)}.  (Do not confuse it with the native platform @code{float} or @code{double}.)"
msgstr "浮動小数点数オブジェクトの内部的なサイズ(@code{sizeof (struct Lisp_Float)})。(ネイティブプラットフォームの@code{float}や@code{double}と混同しないこと。)"

#. type: item
#: internals.texi.orig:404
#, no-wrap
msgid "used-floats"
msgstr "used-floats"

#. type: table
#: internals.texi.orig:406
msgid "The number of floats in use."
msgstr "使用中の浮動小数点数の数。"

#. type: item
#: internals.texi.orig:407
#, no-wrap
msgid "free-floats"
msgstr "free-floats"

#. type: table
#: internals.texi.orig:410
msgid "The number of floats for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるが、カレントで未使用の浮動小数点数の数。"

#. type: item
#: internals.texi.orig:411
#, no-wrap
msgid "interval-size"
msgstr "interval-size"

#. type: table
#: internals.texi.orig:413
msgid "Internal size of an interval object, i.e., @code{sizeof (struct interval)}."
msgstr "インターバルオブジェクト(interval object)の内部的なサイズ(@code{sizeof (struct interval)})。"

#. type: item
#: internals.texi.orig:414
#, no-wrap
msgid "used-intervals"
msgstr "used-intervals"

#. type: table
#: internals.texi.orig:416
msgid "The number of intervals in use."
msgstr "使用中のインターバルの数。"

#. type: item
#: internals.texi.orig:417
#, no-wrap
msgid "free-intervals"
msgstr "free-intervals"

#. type: table
#: internals.texi.orig:420
msgid "The number of intervals for which space has been obtained from the operating system, but that are not currently being used."
msgstr "オペレーティングシステムから取得したスペースにあるが、カレントで未使用のインターバルの数。"

#. type: item
#: internals.texi.orig:421
#, no-wrap
msgid "buffer-size"
msgstr "buffer-size"

#. type: table
#: internals.texi.orig:424
msgid "Internal size of a buffer, i.e., @code{sizeof (struct buffer)}.  (Do not confuse with the value returned by @code{buffer-size} function.)"
msgstr "バッファーの内部的なサイズ(@code{sizeof (struct buffer)})。(@code{buffer-size}関数がリターンする値と混同しないこと。)"

#. type: item
#: internals.texi.orig:425
#, no-wrap
msgid "used-buffers"
msgstr "used-buffers"

#. type: table
#: internals.texi.orig:428
msgid "The number of buffer objects in use.  This includes killed buffers invisible to users, i.e., all buffers in @code{all_buffers} list."
msgstr "使用中のバッファーオブジェクトの数。これにはユーザーからは不可視のkillされたバッファー、つまりリスト@code{all_buffers}内のバッファーすべてが含まれる。"

#. type: item
#: internals.texi.orig:429
#, no-wrap
msgid "unit-size"
msgstr "unit-size"

#. type: table
#: internals.texi.orig:431
msgid "The unit of heap space measurement, always equal to 1024 bytes."
msgstr "ヒープスペースを計る単位で、常に1024バイトと等しい。"

#. type: item
#: internals.texi.orig:432
#, no-wrap
msgid "total-size"
msgstr "total-size"

#. type: table
#: internals.texi.orig:434
msgid "Total heap size, in @var{unit-size} units."
msgstr "@var{unit-size}単位での総ヒープサイズ。"

#. type: item
#: internals.texi.orig:435
#, no-wrap
msgid "free-size"
msgstr "free-size"

#. type: table
#: internals.texi.orig:437
msgid "Heap space which is not currently used, in @var{unit-size} units."
msgstr "@var{unit-size}単位での、カレントで未使用のヒープスペース。"

#. type: deffn
#: internals.texi.orig:442
msgid "If there was overflow in pure space (@pxref{Pure Storage}), @code{garbage-collect} returns @code{nil}, because a real garbage collection cannot be done."
msgstr "純粋スペース(@ref{Pure Storage}を参照)内にオーバーフローがあれば、実際にガーベージコレクションを行うことは不可能なので、@code{garbage-collect}は@code{nil}をリターンする。"

#. type: defopt
#: internals.texi.orig:444
#, no-wrap
msgid "garbage-collection-messages"
msgstr "garbage-collection-messages"

#. type: defopt
#: internals.texi.orig:448
msgid "If this variable is non-@code{nil}, Emacs displays a message at the beginning and end of garbage collection.  The default value is @code{nil}."
msgstr "この変数が非@code{nil}なら、Emacsはガーベージコレクションの最初と最後にメッセージを表示する。デフォルト値は@code{nil}。"

#. type: defvar
#: internals.texi.orig:450
#, no-wrap
msgid "post-gc-hook"
msgstr "post-gc-hook"

#. type: defvar
#: internals.texi.orig:454
msgid "This is a normal hook that is run at the end of garbage collection.  Garbage collection is inhibited while the hook functions run, so be careful writing them."
msgstr "これはガーベージコレクションの終わりに実行される、ノーマルフックである。ガーベージコレクションは、このフックの関数の実行中は抑制されるので、慎重に記述されたい。"

#. type: defopt
#: internals.texi.orig:456
#, no-wrap
msgid "gc-cons-threshold"
msgstr "gc-cons-threshold"

#. type: defopt
#: internals.texi.orig:465
msgid "The value of this variable is the number of bytes of storage that must be allocated for Lisp objects after one garbage collection in order to trigger another garbage collection.  You can use the result returned by @code{garbage-collect} to get an information about size of the particular object type; space allocated to the contents of buffers does not count.  Note that the subsequent garbage collection does not happen immediately when the threshold is exhausted, but only the next time the Lisp interpreter is called."
msgstr "この変数の値は、別のガーベージコレクションをトリガーするために、ガーベージコレクション後にLispオブジェクト用に割り当てなければならない、ストレージのバイト数である。特定ノオブジェクトタイプに関する情報を取得するために、@code{garbage-collect}がリターンした結果を使用できる。バッファーのコンテンツに割り当てられたスペースは、勘定に入らない。後続のガーベージコレクションは、このthreshold(閾値)が消費されても即座には実行されず、次回にLispインタープリターが呼び出されたときのみ実行されることに注意。"

#. type: defopt
#: internals.texi.orig:473
msgid "The initial threshold value is @code{GC_DEFAULT_THRESHOLD}, defined in @file{alloc.c}.  Since it's defined in @code{word_size} units, the value is 400,000 for the default 32-bit configuration and 800,000 for the 64-bit one.  If you specify a larger value, garbage collection will happen less often.  This reduces the amount of time spent garbage collecting, but increases total memory use.  You may want to do this when running a program that creates lots of Lisp data."
msgstr "thresholdの初期値は@code{GC_DEFAULT_THRESHOLD}で、これは@file{alloc.c}内で定義されている。これは@code{word_size}単位で定義されているので、デフォルトの32ビット設定では400,000800,000、64ビット設定ではになる。大きい値を指定すると、ガーベージコレクションの頻度が下る。これはガーベージコレクションにより費やされる時間を減少させるが、メモリーの総使用量は増大する。大量のLispデータを作成するプログラムの実行時には、これを行いたいと思うかもしれない。"

#. type: defopt
#: internals.texi.orig:478
msgid "You can make collections more frequent by specifying a smaller value, down to 1/10th of @code{GC_DEFAULT_THRESHOLD}.  A value less than this minimum will remain in effect only until the subsequent garbage collection, at which time @code{garbage-collect} will set the threshold back to the minimum."
msgstr "@code{GC_DEFAULT_THRESHOLD}の1/10まで下げた小さな値を指定することにより、より頻繁にガーベージコレクションを発生させることができる。この最小値より小さい値は、後続のガーベージコレクションで、@code{garbage-collect}がthresholdを最小値に戻すときまでしか効果をもたないだろう。"

#. type: defopt
#: internals.texi.orig:480
#, no-wrap
msgid "gc-cons-percentage"
msgstr "gc-cons-percentage"

#. type: defopt
#: internals.texi.orig:485
msgid "The value of this variable specifies the amount of consing before a garbage collection occurs, as a fraction of the current heap size.  This criterion and @code{gc-cons-threshold} apply in parallel, and garbage collection occurs only when both criteria are satisfied."
msgstr "この変数の値は、ガーベージコレクション発生するまでのコンス(訳注: これは@code{gc-cons-threshold}や@code{gc-cons-percentage}の@samp{-cons-}のことで、これらの変数が定義されている@file{alloc.c}内では、Lisp方言での@samp{cons}をより一般化したメモリー割り当てプロセスのことを指すようです)の量を、カレントヒープサイズにたいする割り合いで指定する。この条件と@code{gc-cons-threshold}を並行して適用し、条件が両方満足されたときだけ、ガーベージコレクションが発生する。"

#. type: defopt
#: internals.texi.orig:489
msgid "As the heap size increases, the time to perform a garbage collection increases.  Thus, it can be desirable to do them less frequently in proportion."
msgstr "ヒープサイズ増加にともない、ガーベージコレクションの処理時間は増大する。したがって、ガーベージコレクションの頻度割合を減らすのが望ましいことがある。"

#. type: Plain text
#: internals.texi.orig:495
msgid "The value returned by @code{garbage-collect} describes the amount of memory used by Lisp data, broken down by data type.  By contrast, the function @code{memory-limit} provides information on the total amount of memory Emacs is currently using."
msgstr "@code{garbage-collect}がリターンする値は、データ型に分類されたLispデータノめもりー使用量を記述します。それと対照的に関数@code{memory-limit}は、Emacsがカレントで使用中の総メモリー量の情報を提供します。"

#. type: defun
#: internals.texi.orig:496
#, no-wrap
msgid "memory-limit"
msgstr "memory-limit"

#. type: defun
#: internals.texi.orig:500
msgid "This function returns the address of the last byte Emacs has allocated, divided by 1024.  We divide the value by 1024 to make sure it fits in a Lisp integer."
msgstr "この関数は、Emacsが割り当てたメモリーの最後のバイトアドレスを1024で除した値をリターンする。その値を1024で除しているのは、Lisp整数に収まるようにするためである。"

#. type: defun
#: internals.texi.orig:503
msgid "You can use this to get a general idea of how your actions affect the memory usage."
msgstr "あなたのアクションがメモリー使用に与える影響について、大まかなアイデアを得るために、これを使用することができる。"

#. type: defvar
#: internals.texi.orig:505
#, no-wrap
msgid "memory-full"
msgstr "memory-full"

#. type: defvar
#: internals.texi.orig:508
msgid "This variable is @code{t} if Emacs is nearly out of memory for Lisp objects, and @code{nil} otherwise."
msgstr "この変数は、Lispオブジェクト用のメモリーが不足に近い状態なら@code{t}、それ以外なら@code{nil}となる。"

#. type: defun
#: internals.texi.orig:510
#, no-wrap
msgid "memory-use-counts"
msgstr "memory-use-counts"

#. type: defun
#: internals.texi.orig:514
msgid "This returns a list of numbers that count the number of objects created in this Emacs session.  Each of these counters increments for a certain kind of object.  See the documentation string for details."
msgstr "これはそのEmacsセッションで作成されたオブジェクト数をカウントしたリストである。これらのカウンターはそれぞれ、特定の種類のオブジェクトを数える。詳細はドキュメント文字列を参照のこと。"

#. type: defvar
#: internals.texi.orig:516
#, no-wrap
msgid "gcs-done"
msgstr "gcs-done"

#. type: defvar
#: internals.texi.orig:519
msgid "This variable contains the total number of garbage collections done so far in this Emacs session."
msgstr "この変数は、そのEmacsセッションでそれまでに行われたガーベージコレクションの合計回数である。"

#. type: defvar
#: internals.texi.orig:521
#, no-wrap
msgid "gc-elapsed"
msgstr "gc-elapsed"

#. type: defvar
#: internals.texi.orig:525
msgid "This variable contains the total number of seconds of elapsed time during garbage collection so far in this Emacs session, as a floating-point number."
msgstr "この変数は、そのEmacsセッションでガーベージコレクションの間に費やされた経過時間を、浮動小数点数で表した総秒数である。"

#. type: cindex
#: internals.texi.orig:529
#, no-wrap
msgid "memory usage"
msgstr "memory usage"

#. type: Plain text
#: internals.texi.orig:537
msgid "These functions and variables give information about the total amount of memory allocation that Emacs has done, broken down by data type.  Note the difference between these and the values returned by @code{garbage-collect}; those count objects that currently exist, but these count the number or size of all allocations, including those for objects that have since been freed."
msgstr "以下の関数と変数は、Emacsが行なったメモリー割り当ての総量に関する情報を、データ型ごとに分類して提供します。これらの関数や変数と、@code{garbage-collect}がリターンする値との違いに注意してください。@code{garbage-collect}はカレントで存在するオブジェクトを数えますが、以下の関数および変数はすでに開放されたオブジェクトを含めて、すべての割り当ての数またはサイズを数えます。"

#. type: defvar
#: internals.texi.orig:538
#, no-wrap
msgid "cons-cells-consed"
msgstr "cons-cells-consed"

#. type: defvar
#: internals.texi.orig:541
msgid "The total number of cons cells that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションで、それまでに割り当てられたコンスセルの総数。"

#. type: defvar
#: internals.texi.orig:543
#, no-wrap
msgid "floats-consed"
msgstr "floats-consed"

#. type: defvar
#: internals.texi.orig:546
msgid "The total number of floats that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションで、それまでに割り当てられた浮動小数点数の総数。"

#. type: defvar
#: internals.texi.orig:548
#, no-wrap
msgid "vector-cells-consed"
msgstr "vector-cells-consed"

#. type: defvar
#: internals.texi.orig:551
msgid "The total number of vector cells that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションで、それまでに割り当てられたベクターセル"

#. type: defvar
#: internals.texi.orig:553
#, no-wrap
msgid "symbols-consed"
msgstr "symbols-consed"

#. type: defvar
#: internals.texi.orig:556
msgid "The total number of symbols that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションで、それまでに割り当てられたシンボルの総数。"

#. type: defvar
#: internals.texi.orig:558
#, no-wrap
msgid "string-chars-consed"
msgstr "string-chars-consed"

#. type: defvar
#: internals.texi.orig:561
msgid "The total number of string characters that have been allocated so far in this session."
msgstr "そのEmacsセッションで、それまでに割り当てられた文字列の文字の総数。"

#. type: defvar
#: internals.texi.orig:563
#, no-wrap
msgid "misc-objects-consed"
msgstr "misc-objects-consed"

#. type: defvar
#: internals.texi.orig:567
msgid "The total number of miscellaneous objects that have been allocated so far in this session.  These include markers and overlays, plus certain objects not visible to users."
msgstr "そのEmacsセッションで、それまでに割り当てられた雑多なオブジェクトの総数。これにはマーカー、オーバーレイに加えて、ユーザーには不可視な特定のオブジェクトが含まれる。"

#. type: defvar
#: internals.texi.orig:569
#, no-wrap
msgid "intervals-consed"
msgstr "intervals-consed"

#. type: defvar
#: internals.texi.orig:572
msgid "The total number of intervals that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションで、それまでに割り当てられたインターバルの総数。"

#. type: defvar
#: internals.texi.orig:574
#, no-wrap
msgid "strings-consed"
msgstr "strings-consed"

#. type: defvar
#: internals.texi.orig:577
msgid "The total number of strings that have been allocated so far in this Emacs session."
msgstr "そのEmacsセッションで、それまでに割り当てられた文字列の総数。"

#. type: cindex
#: internals.texi.orig:581
#, no-wrap
msgid "C programming language"
msgstr "C programming language"

#. type: Plain text
#: internals.texi.orig:589
msgid "The C part of Emacs is portable to C89: C99-specific features such as @samp{<stdbool.h>} and @samp{inline} are not used without a check, typically at configuration time, and the Emacs build procedure provides a substitute implementation if necessary.  Some C99 features, such as declarations after statements, are too difficult to provide substitutes for, so they are avoided entirely."
msgstr "EmacsのC部分は、C89にたいして移植性があります。@samp{<stdbool.h>}や@samp{inline}のようなC99固有の機能は、通常configure時に行われるチェックなしでは使用しておらず、Emacsのビルド手順は必要なら代替えの実装を提供します。ステートメントの後の宣言のような、その他のC99機能は代替えの提供が非常に困難なので、すべて回避されています。"

#. type: Plain text
#: internals.texi.orig:592
msgid "At some point in the not-too-distant future the base C dialect will change from C89 to C99, and eventually it will no doubt change to C11."
msgstr "そう遠くない将来のある時点で、基本となるC方言はC89からC99に変更され、最終的には間違いなくC11に変更されるでしょう。"

#. type: cindex
#: internals.texi.orig:595
#, no-wrap
msgid "primitive function internals"
msgstr "primitive function internals"

#. type: cindex
#: internals.texi.orig:596
#, no-wrap
msgid "writing Emacs primitives"
msgstr "writing Emacs primitives"

#. type: Plain text
#: internals.texi.orig:602
msgid "Lisp primitives are Lisp functions implemented in C@.  The details of interfacing the C function so that Lisp can call it are handled by a few C macros.  The only way to really understand how to write new C code is to read the source, but we can explain some things here."
msgstr "Lispプリミティブとは、Cで実装されたLisp関数です。Lispから呼び出せるように、C関数インターフェースの詳細は、Cのマクロで処理されます。新たなCコードの記述のしかたを真に理解するには、ソースを読むのが唯一の方法ですが、ここではいくつかの事について説明します。"

#. type: Plain text
#: internals.texi.orig:606
msgid "An example of a special form is the definition of @code{or}, from @file{eval.c}.  (An ordinary function would have the same general appearance.)"
msgstr "スペシャルフォームの例として、以下は@file{eval.c}の@code{or}です(通常の関数は、同様の一般的な外観をもつ)。"

#. type: cindex
#: internals.texi.orig:607
#, no-wrap
msgid "garbage collection protection"
msgstr "garbage collection protection"

#. type: group
#: internals.texi.orig:615
#, no-wrap
msgid ""
"DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,\n"
"  doc: /* Eval args until one of them yields non-nil, then return\n"
"that value.\n"
"The remaining args are not evalled at all.\n"
"If all args return nil, return nil.\n"
msgstr ""
"DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,\n"
"  doc: /* Eval args until one of them yields non-nil, then return\n"
"that value.\n"
"The remaining args are not evalled at all.\n"
"If all args return nil, return nil.\n"

#. type: group
#: internals.texi.orig:622
#, no-wrap
msgid ""
"usage: (or CONDITIONS ...)  */)\n"
"  (Lisp_Object args)\n"
"@{\n"
"  register Lisp_Object val = Qnil;\n"
"  struct gcpro gcpro1;\n"
msgstr ""
"usage: (or CONDITIONS ...)  */)\n"
"  (Lisp_Object args)\n"
"@{\n"
"  register Lisp_Object val = Qnil;\n"
"  struct gcpro gcpro1;\n"

#. type: group
#: internals.texi.orig:626
#, no-wrap
msgid "  GCPRO1 (args);\n"
msgstr "  GCPRO1 (args);\n"

#. type: group
#: internals.texi.orig:636
#, no-wrap
msgid ""
"  while (CONSP (args))\n"
"    @{\n"
"      val = eval_sub (XCAR (args));\n"
"      if (!NILP (val))\n"
"        break;\n"
"      args = XCDR (args);\n"
"    @}\n"
msgstr ""
"  while (CONSP (args))\n"
"    @{\n"
"      val = eval_sub (XCAR (args));\n"
"      if (!NILP (val))\n"
"        break;\n"
"      args = XCDR (args);\n"
"    @}\n"

#. type: group
#: internals.texi.orig:642
#, no-wrap
msgid ""
"  UNGCPRO;\n"
"  return val;\n"
"@}\n"
msgstr ""
"  UNGCPRO;\n"
"  return val;\n"
"@}\n"

#. type: cindex
#: internals.texi.orig:645
#, no-wrap
msgid "@code{DEFUN}, C macro to define Lisp primitives"
msgstr "@code{DEFUN}, C macro to define Lisp primitives"

#. type: Plain text
#: internals.texi.orig:648
msgid "Let's start with a precise explanation of the arguments to the @code{DEFUN} macro.  Here is a template for them:"
msgstr "では@code{DEFUN}マクロの引数について、詳細に説明しましょう。以下は、それらのテンプレートです:"

#. type: example
#: internals.texi.orig:651
#, no-wrap
msgid "DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})\n"
msgstr "DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})\n"

#. type: item
#: internals.texi.orig:654
#, no-wrap
msgid "lname"
msgstr "lname"

#. type: table
#: internals.texi.orig:657
msgid "This is the name of the Lisp symbol to define as the function name; in the example above, it is @code{or}."
msgstr "これは、関数名として定義する、Lispシンボル名である。上記例では@code{or}。"

#. type: item
#: internals.texi.orig:658
#, no-wrap
msgid "fname"
msgstr "fname"

#. type: table
#: internals.texi.orig:664
msgid "This is the C function name for this function.  This is the name that is used in C code for calling the function.  The name is, by convention, @samp{F} prepended to the Lisp name, with all dashes (@samp{-}) in the Lisp name changed to underscores.  Thus, to call this function from C code, call @code{For}."
msgstr "これは、その関数のC関数名である。これはCコードでその関数を呼び出すために使用される名前である。名前は慣習として@samp{F}の後にLisp名をつけ、Lisp名のすべてのダッシュ(@samp{-})は、アンダースコアに変更する。つまりCコードから呼び出す場合は、@code{For}を呼び出す。"

#. type: item
#: internals.texi.orig:665
#, no-wrap
msgid "sname"
msgstr "sname"

#. type: table
#: internals.texi.orig:672
msgid "This is a C variable name to use for a structure that holds the data for the subr object that represents the function in Lisp.  This structure conveys the Lisp symbol name to the initialization routine that will create the symbol and store the subr object as its definition.  By convention, this name is always @var{fname} with @samp{F} replaced with @samp{S}."
msgstr "これは、Lispでその関数を表すsubrオブジェクト用に、データ保持のための構造体に使用されるC変数名である。この構造体は、そのシンボルを作成してそれの定義にsubrオブジェクトを格納する初期化ルーチンにおいて、Lispシンボル名を伝達する。慣習により、これは常に@var{fname}の@samp{F}を@samp{S}に置き換えた名前になる"

#. type: item
#: internals.texi.orig:673
#, no-wrap
msgid "min"
msgstr "min"

#. type: table
#: internals.texi.orig:676
msgid "This is the minimum number of arguments that the function requires.  The function @code{or} allows a minimum of zero arguments."
msgstr "これは、その関数が要求する、引数の最小個数である。関数@code{or}は、最小で0個の関数を受け入れる。"

#. type: item
#: internals.texi.orig:677
#, no-wrap
msgid "max"
msgstr "max"

#. type: table
#: internals.texi.orig:685
msgid "This is the maximum number of arguments that the function accepts, if there is a fixed maximum.  Alternatively, it can be @code{UNEVALLED}, indicating a special form that receives unevaluated arguments, or @code{MANY}, indicating an unlimited number of evaluated arguments (the equivalent of @code{&rest}).  Both @code{UNEVALLED} and @code{MANY} are macros.  If @var{max} is a number, it must be more than @var{min} but less than 8."
msgstr "これは、その関数が受け入れる引数の最大個数が定数なら、引数の最大個数である。または@code{UNEVALLED}ならそれは未評価の引数を受け取るスペシャルフォームを示し、@code{MANY}なら評価される引数の個数に制限がないことを意味する(@code{&rest}と等価)。@code{UNEVALLED}と@code{MANY}は、いずれもマクロである。@var{max}が数字ならそれは@var{min}より大きく、8より小さいこと。"

#. type: cindex
#: internals.texi.orig:686
#, no-wrap
msgid "interactive specification in primitives"
msgstr "interactive specification in primitives"

#. type: item
#: internals.texi.orig:687
#, no-wrap
msgid "interactive"
msgstr "interactive"

#. type: table
#: internals.texi.orig:695
msgid "This is an interactive specification, a string such as might be used as the argument of @code{interactive} in a Lisp function.  In the case of @code{or}, it is 0 (a null pointer), indicating that @code{or} cannot be called interactively.  A value of @code{\"\"} indicates a function that should receive no arguments when called interactively.  If the value begins with a @samp{\"(}, the string is evaluated as a Lisp form.  For example:"
msgstr "これはLisp関数で@code{interactive}の引数として使用されるような、インタラクティブ仕様である(文字列)。@code{or}の場合は0(nullポインター)で、それは@code{or}がインタラクティブに呼び出せないことを示す。値@code{\"\"}は、インタラクティブに呼び出し時、関数が引き受けるべきではないことを示す。値が@samp{\"(}で始まる場合、その文字列はLispフォームとして評価される。たとえば:"

#. type: group
#: internals.texi.orig:703
#, no-wrap
msgid ""
"DEFUN (\"foo\", Ffoo, Sfoo, 0, UNEVALLED,\n"
"       \"(list (read-char-by-name \\\"Insert character: \\\")\\\n"
"              (prefix-numeric-value current-prefix-arg)\\\n"
"              t))\",\n"
"  doc: /* @dots{} /*)\n"
msgstr ""
"DEFUN (\"foo\", Ffoo, Sfoo, 0, UNEVALLED,\n"
"       \"(list (read-char-by-name \\\"Insert character: \\\")\\\n"
"              (prefix-numeric-value current-prefix-arg)\\\n"
"              t))\",\n"
"  doc: /* @dots{} /*)\n"

#. type: item
#: internals.texi.orig:706
#, no-wrap
msgid "doc"
msgstr "doc"

#. type: table
#: internals.texi.orig:713
msgid "This is the documentation string.  It uses C comment syntax rather than C string syntax because comment syntax requires nothing special to include multiple lines.  The @samp{doc:} identifies the comment that follows as the documentation string.  The @samp{/*} and @samp{*/} delimiters that begin and end the comment are not part of the documentation string."
msgstr "これはドキュメント文字列である。複数行を含むために特別なことを要しないので、これにはCの文字列構文ではなく、Cコメント構文を使用する。@samp{doc:}の後のコメントは、ドキュメント文字列として認識する。コメントの開始と終了の区切り文字@samp{/*}と@samp{*/}は、ドキュメント文字列の一部にはならない。"

#. type: table
#: internals.texi.orig:720
msgid "If the last line of the documentation string begins with the keyword @samp{usage:}, the rest of the line is treated as the argument list for documentation purposes.  This way, you can use different argument names in the documentation string from the ones used in the C code.  @samp{usage:} is required if the function has an unlimited number of arguments."
msgstr "ドキュメント文字列の最後の行がキーワード@samp{usage:}で始まる場合、その行の残りの部分は引数リストをドキュメント化するためのものとして扱われる。この方法により、Cコード内で使用される引数名とは異なる引数名を、ドキュメント文字列内で使用することができる。その関数の引数の個数に制限がない場合、@samp{usage:}は必須。"

#. type: table
#: internals.texi.orig:724
msgid "All the usual rules for documentation strings in Lisp code (@pxref{Documentation Tips}) apply to C code documentation strings too."
msgstr "Lispコードでのドキュメント文字列にたいする通常ルールのすべて(@ref{Documentation Tips}を参照)は、Cコードのドキュメント文字列にも適用される。"

#. type: Plain text
#: internals.texi.orig:741
msgid "After the call to the @code{DEFUN} macro, you must write the argument list for the C function, including the types for the arguments.  If the primitive accepts a fixed maximum number of Lisp arguments, there must be one C argument for each Lisp argument, and each argument must be of type @code{Lisp_Object}.  (Various macros and functions for creating values of type @code{Lisp_Object} are declared in the file @file{lisp.h}.)  If the primitive has no upper limit on the number of Lisp arguments, it must have exactly two C arguments: the first is the number of Lisp arguments, and the second is the address of a block containing their values.  These have types @code{int} and @w{@code{Lisp_Object *}} respectively.  Since @code{Lisp_Object} can hold any Lisp object of any data type, you can determine the actual data type only at run time; so if you want a primitive to accept only a certain type of argument, you must check the type explicitly using a suitable predicate (@pxref{Type Predicates})."
msgstr "@code{DEFUN}マクロ呼び出しの後には、そのC関数にたいする引数リストを、その引数のタイプを含めて記述しなければなりません。そのプリミティブがLispで固定された最大個数をもつ引数を受け入れるなら、Lisp引数それぞれにたいして1つのC引数をもち、各引数のタイプは@code{Lisp_Object}でなければなりません(ファイル@file{lisp.h}では、タイプ@code{Lisp_Object}の値を作成する種々のマクロと関数が宣言されている)。そのプリミティブのLispの最大引数個数に上限がない場合、それは正確に2つのC引数をもたなければなりません。1つ目はLisp引数の個数で、2つ目はそれらの値を含むブロックのアドレスです。これらはそれぞれ@code{int}、@w{@code{Lisp_Object *}}のタイプをもちます。@code{Lisp_Object}は任意のデータ型と任意のLispオブジェクトを保持できるので、実行時のみ実際のデータ型を判断できます。特定のタイプの引数だけを受け入れるプリミティブを記述したい場合は、適切な述語を使用してタイプを明確にチェックしなければなりません(@ref{Type Predicates}を参照)。"

#. type: cindex
#: internals.texi.orig:741
#, no-wrap
msgid "type checking internals"
msgstr "type checking internals"

#. type: cindex
#: internals.texi.orig:743
#, no-wrap
msgid "@code{GCPRO} and @code{UNGCPRO}"
msgstr "@code{GCPRO} and @code{UNGCPRO}"

#. type: cindex
#: internals.texi.orig:744
#, no-wrap
msgid "protect C variables from garbage collection"
msgstr "protect C variables from garbage collection"

#. type: Plain text
#: internals.texi.orig:754
msgid "Within the function @code{For} itself, note the use of the macros @code{GCPRO1} and @code{UNGCPRO}.  These macros are defined for the sake of the few platforms which do not use Emacs' default stack-marking garbage collector.  The @code{GCPRO1} macro ``protects'' a variable from garbage collection, explicitly informing the garbage collector that that variable and all its contents must be as accessible.  GC protection is necessary in any function which can perform Lisp evaluation by calling @code{eval_sub} or @code{Feval} as a subroutine, either directly or indirectly."
msgstr "関数@code{For}自身の中では、マクロ@code{GCPRO1}と@code{UNGCPRO}の使用に注意してください。これらのマクロは、Emacsのデフォルトであるスタックマーキングを使用したガーベージコレクションを使用しない、いくつかのプラットフォームのために定義されています。@code{GCPRO1}マクロは、ガーベージコレクションにその変数とコンテンツすべてがアクセス可能でなければならないと、明示的にガーベージコレクションに通知して、ガーベージコレクションから変数を``保護''します。直接または間接的に、サブルーチンとして@code{eval_sub}か@code{Feval}を呼び出してLisp評価を行うかもしれないすべての関数で、GC保護は必要です。"

#. type: Plain text
#: internals.texi.orig:761
msgid "It suffices to ensure that at least one pointer to each object is GC-protected.  Thus, a particular local variable can do without protection if it is certain that the object it points to will be preserved by some other pointer (such as another local variable that has a @code{GCPRO}).  Otherwise, the local variable needs a @code{GCPRO}."
msgstr "各オブジェクトにたいして、それを指すポインターが少なくとも1つあれば、GCからの保護を確実に満足することができます。つまり、ある特定のローカル変数が、(@code{GCPRO}をもつ別のローカル変数のような)別のポインターにより保護されるであろうオブジュクトを指すことが確実なら、保護なしでこれを行うことができます。それ以外なら、そのローカル変数には@code{GCPRO}が必要になります。"

#. type: Plain text
#: internals.texi.orig:769
msgid "The macro @code{GCPRO1} protects just one local variable.  If you want to protect two variables, use @code{GCPRO2} instead; repeating @code{GCPRO1} will not work.  Macros @code{GCPRO3}, @code{GCPRO4}, @code{GCPRO5}, and @code{GCPRO6} also exist.  All these macros implicitly use local variables such as @code{gcpro1}; you must declare these explicitly, with type @code{struct gcpro}.  Thus, if you use @code{GCPRO2}, you must declare @code{gcpro1} and @code{gcpro2}."
msgstr "マクロ@code{GCPRO1}は、ただ1つのローカル変数を保護します。2つの変数を保護したい場合には、かわりに@code{GCPRO2}を使用します。@code{GCPRO1}を繰り返しても、機能しないでしょう。@code{GCPRO3}、@code{GCPRO4}、@code{GCPRO5}、@code{GCPRO6}のマクロもあります。これらのマクロのすべては、@code{gcpro1}のようなローカル変数を暗黙に使用します。あなたはこれらをタイプ@code{struct gcpro}で、明示的に宣言しなければなりません。つまり@code{GCPRO2}を使用するなら、@code{gcpro1}と@code{gcpro2}を宣言しなければなりません。"

#. type: Plain text
#: internals.texi.orig:773
msgid "@code{UNGCPRO} cancels the protection of the variables that are protected in the current function.  It is necessary to do this explicitly."
msgstr "@code{UNGCPRO}は、カレントの関数内で保護された、変数の保護を取り消します。これは明示的に行う必要があります。"

#. type: Plain text
#: internals.texi.orig:779
msgid "You must not use C initializers for static or global variables unless the variables are never written once Emacs is dumped.  These variables with initializers are allocated in an area of memory that becomes read-only (on certain operating systems) as a result of dumping Emacs.  @xref{Pure Storage}."
msgstr "一度Emacsがダンプされた後に、その変数に何か書き込まれているときには、その静的変数またはグローバル変数に、Cの初期化を使用してはなりません。初期化されたこれらの変数は、Emacsのダンプの結果として、(特定のオペレーティングシステムでは)読み取り専用となるメモリーエリアに割り当てられます。@ref{Pure Storage}を参照してください。"

#. type: cindex
#: internals.texi.orig:780
#, no-wrap
msgid "@code{defsubr}, Lisp symbol for a primitive"
msgstr "@code{defsubr}, Lisp symbol for a primitive"

#. type: Plain text
#: internals.texi.orig:785
msgid "Defining the C function is not enough to make a Lisp primitive available; you must also create the Lisp symbol for the primitive and store a suitable subr object in its function cell.  The code looks like this:"
msgstr "C関数の定義だけでは、Lispプリミティブを利用可能にするのに十分ではありません。そのプリミティブにたいしてLispシンボルを作成して、その関数セルに適切なsubrオブジェクトを格納しなければなりません。このコードは以下のようになるでしょう:"

#. type: example
#: internals.texi.orig:788
#, no-wrap
msgid "defsubr (&@var{sname});\n"
msgstr "defsubr (&@var{sname});\n"

#. type: Plain text
#: internals.texi.orig:792
msgid "Here @var{sname} is the name you used as the third argument to @code{DEFUN}."
msgstr "ここで@var{sname}は、@code{DEFUN}の3つ目の引数として使用する名前です。"

#. type: Plain text
#: internals.texi.orig:801
msgid "If you add a new primitive to a file that already has Lisp primitives defined in it, find the function (near the end of the file) named @code{syms_of_@var{something}}, and add the call to @code{defsubr} there.  If the file doesn't have this function, or if you create a new file, add to it a @code{syms_of_@var{filename}} (e.g., @code{syms_of_myfile}).  Then find the spot in @file{emacs.c} where all of these functions are called, and add a call to @code{syms_of_@var{filename}} there."
msgstr "すでにLispプリミティブが定義されたファイルにプリミティブを追加する場合には、(そのファイル終端付近にある)@code{syms_of_@var{something}}という名前の関数を探して、そこに@code{defsubr}の呼び出しを追加してください。そのファイルにこの関数がない、または新たなファイルを作成する場合には、それに@code{syms_of_@var{filename}}(例: @code{syms_of_myfile})を追加します。それから@file{emacs.c}で、それらの関数すべてが呼び出されるが呼び出される箇所を探して、そこに@code{syms_of_@var{filename}}の呼び出しを追加してください。"

#. type: anchor{#1}
#: internals.texi.orig:803
msgid "Defining Lisp variables in C"
msgstr "Defining Lisp variables in C"

#. type: vindex
#: internals.texi.orig:803
#, no-wrap
msgid "byte-boolean-vars"
msgstr "byte-boolean-vars"

#. type: cindex
#: internals.texi.orig:804
#, no-wrap
msgid "defining Lisp variables in C"
msgstr "defining Lisp variables in C"

#. type: cindex
#: internals.texi.orig:805
#, no-wrap
msgid "@code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}"
msgstr "@code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}"

#. type: Plain text
#: internals.texi.orig:815
msgid "The function @code{syms_of_@var{filename}} is also the place to define any C variables that are to be visible as Lisp variables.  @code{DEFVAR_LISP} makes a C variable of type @code{Lisp_Object} visible in Lisp.  @code{DEFVAR_INT} makes a C variable of type @code{int} visible in Lisp with a value that is always an integer.  @code{DEFVAR_BOOL} makes a C variable of type @code{int} visible in Lisp with a value that is either @code{t} or @code{nil}.  Note that variables defined with @code{DEFVAR_BOOL} are automatically added to the list @code{byte-boolean-vars} used by the byte compiler."
msgstr "関数@code{syms_of_@var{filename}}は、Lisp変数として可視となるすべてのC変数を定義する場所でもあります。@code{DEFVAR_LISP}はタイプ@code{Lisp_Object}のC変数を、Lispから可視にします。@code{DEFVAR_INT}はタイプ@code{int}のC変数を、常に整数となる値をもつようにして、Lispから可視にします。@code{DEFVAR_BOOL}はタイプ@code{int}のC変数を、常に@code{t}か@code{nil}のいずれかとなる値をもつようにして、Lispから可視にします。@code{DEFVAR_BOOL}で定義された変数は、バイトコンパイラーに使用されるリスト@code{byte-boolean-vars}に、自動的に追加されることに注意してください。"

#. type: cindex
#: internals.texi.orig:816
#, no-wrap
msgid "defining customization variables in C"
msgstr "defining customization variables in C"

#. type: Plain text
#: internals.texi.orig:820
msgid "If you want to make a Lisp variables that is defined in C behave like one declared with @code{defcustom}, add an appropriate entry to @file{cus-start.el}."
msgstr "Cで定義されたLisp変数を、@code{defcustom}で宣言された変数のように振る舞わせたい場合は、@file{cus-start.el}に適切なエントリーを追加してください。"

#. type: cindex
#: internals.texi.orig:821
#, no-wrap
msgid "@code{staticpro}, protection from GC"
msgstr "@code{staticpro}, protection from GC"

#. type: Plain text
#: internals.texi.orig:825
msgid "If you define a file-scope C variable of type @code{Lisp_Object}, you must protect it from garbage-collection by calling @code{staticpro} in @code{syms_of_@var{filename}}, like this:"
msgstr "タイプ@code{Lisp_Object}のファイルをスコープとするC変数を定義する場合には、以下のように@code{syms_of_@var{filename}}内で@code{staticpro}を呼び出して、ガーベージコレクションからそれを保護しなければなりません:"

#. type: example
#: internals.texi.orig:828
#, no-wrap
msgid "staticpro (&@var{variable});\n"
msgstr "staticpro (&@var{variable});\n"

#. type: Plain text
#: internals.texi.orig:833
msgid "Here is another example function, with more complicated arguments.  This comes from the code in @file{window.c}, and it demonstrates the use of macros and functions to manipulate Lisp objects."
msgstr "以下は、より複雑な引数をもつ別の関数例です。これは@file{window.c}からのコードで、Lispオブジェクトを操作するためのマクロと関数の使用を示すものです。"

#. type: group
#: internals.texi.orig:840
#, no-wrap
msgid ""
"DEFUN (\"coordinates-in-window-p\", Fcoordinates_in_window_p,\n"
"  Scoordinates_in_window_p, 2, 2, 0,\n"
"  doc: /* Return non-nil if COORDINATES are in WINDOW.\n"
"  ...\n"
msgstr ""
"DEFUN (\"coordinates-in-window-p\", Fcoordinates_in_window_p,\n"
"  Scoordinates_in_window_p, 2, 2, 0,\n"
"  doc: /* Return non-nil if COORDINATES are in WINDOW.\n"
"  ...\n"

#. type: group
#: internals.texi.orig:849
#, no-wrap
msgid ""
"  or `right-margin' is returned.  */)\n"
"  (register Lisp_Object coordinates, Lisp_Object window)\n"
"@{\n"
"  struct window *w;\n"
"  struct frame *f;\n"
"  int x, y;\n"
"  Lisp_Object lx, ly;\n"
msgstr ""
"  or `right-margin' is returned.  */)\n"
"  (register Lisp_Object coordinates, Lisp_Object window)\n"
"@{\n"
"  struct window *w;\n"
"  struct frame *f;\n"
"  int x, y;\n"
"  Lisp_Object lx, ly;\n"

#. type: group
#: internals.texi.orig:862
#, no-wrap
msgid ""
"  CHECK_LIVE_WINDOW (window);\n"
"  w = XWINDOW (window);\n"
"  f = XFRAME (w->frame);\n"
"  CHECK_CONS (coordinates);\n"
"  lx = Fcar (coordinates);\n"
"  ly = Fcdr (coordinates);\n"
"  CHECK_NUMBER_OR_FLOAT (lx);\n"
"  CHECK_NUMBER_OR_FLOAT (ly);\n"
"  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
"  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
msgstr ""
"  CHECK_LIVE_WINDOW (window);\n"
"  w = XWINDOW (window);\n"
"  f = XFRAME (w->frame);\n"
"  CHECK_CONS (coordinates);\n"
"  lx = Fcar (coordinates);\n"
"  ly = Fcdr (coordinates);\n"
"  CHECK_NUMBER_OR_FLOAT (lx);\n"
"  CHECK_NUMBER_OR_FLOAT (ly);\n"
"  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
"  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"

#. type: group
#: internals.texi.orig:869
#, no-wrap
msgid ""
"  switch (coordinates_in_window (w, x, y))\n"
"    @{\n"
"    case ON_NOTHING:            /* NOT in window at all. */\n"
"      return Qnil;\n"
msgstr ""
"  switch (coordinates_in_window (w, x, y))\n"
"    @{\n"
"    case ON_NOTHING:            /* NOT in window at all. */\n"
"      return Qnil;\n"

#. type: smallexample
#: internals.texi.orig:872 internals.texi.orig:879
#, no-wrap
msgid ""
"    ...\n"
"\n"
msgstr "    ...\n\n"

#. type: group
#: internals.texi.orig:876
#, no-wrap
msgid ""
"    case ON_MODE_LINE:          /* In mode line of window. */\n"
"      return Qmode_line;\n"
msgstr ""
"    case ON_MODE_LINE:          /* In mode line of window. */\n"
"      return Qmode_line;\n"

#. type: group
#: internals.texi.orig:884
#, no-wrap
msgid ""
"    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */\n"
"      /* Historically we are supposed to return nil in this case.  */\n"
"      return Qnil;\n"
msgstr ""
"    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */\n"
"      /* Historically we are supposed to return nil in this case.  */\n"
"      return Qnil;\n"

#. type: group
#: internals.texi.orig:891
#, no-wrap
msgid ""
"    default:\n"
"      abort ();\n"
"    @}\n"
"@}\n"
msgstr ""
"    default:\n"
"      abort ();\n"
"    @}\n"
"@}\n"

#. type: Plain text
#: internals.texi.orig:904
msgid "Note that C code cannot call functions by name unless they are defined in C@.  The way to call a function written in Lisp is to use @code{Ffuncall}, which embodies the Lisp function @code{funcall}.  Since the Lisp function @code{funcall} accepts an unlimited number of arguments, in C it takes two: the number of Lisp-level arguments, and a one-dimensional array containing their values.  The first Lisp-level argument is the Lisp function to call, and the rest are the arguments to pass to it.  Since @code{Ffuncall} can call the evaluator, you must protect pointers from garbage collection around the call to @code{Ffuncall}."
msgstr "Cコードは、それらがCで記述されていなければ、名前で呼び出すことはできないことに注意してください。Lispで記述された関数を呼び出すには、関数@code{funcall}を具現化した@code{Ffuncall}を使用します。Lisp関数@code{funcall}は個数制限なしの引数を受け付けるので、Cでの引数はLispレベルでの引数個数と、それらの値を含む1次元配列という、2個の引数になります。Lispレベルでの1つ目の引数は呼び出す関数で、残りはそれに渡す引数です。@code{Ffuncall}は評価機能(evaluator)を呼び出すかもしれないので、@code{Ffuncall}の呼び出し前後でガーベージコレクションからポインターを保護しなければなりません。"

#. type: Plain text
#: internals.texi.orig:908
msgid "The C functions @code{call0}, @code{call1}, @code{call2}, and so on, provide handy ways to call a Lisp function conveniently with a fixed number of arguments.  They work by calling @code{Ffuncall}."
msgstr "C関数@code{call0}、@code{call1}、@code{call2}、...は個数が固定された引数でLisp関数を手軽に呼び出す、便利な方法を提供します。これらは@code{Ffuncall}を呼び出すことにより機能します。"

#. type: Plain text
#: internals.texi.orig:912
msgid "@file{eval.c} is a very good file to look through for examples; @file{lisp.h} contains the definitions for some important macros and functions."
msgstr "@file{eval.c}は例を探すには、よいファイルです。@file{lisp.h}には、重要なマクロと関数の定義がいくつか含まれています。"

#. type: Plain text
#: internals.texi.orig:917
msgid "If you define a function which is side-effect free, update the code in @file{byte-opt.el} that binds @code{side-effect-free-fns} and @code{side-effect-and-error-free-fns} so that the compiler optimizer knows about it."
msgstr "副作用をもたない関数を定義する場合には、コンパイラーのオプティマイザーに知らせるために@code{side-effect-free-fns}と@code{side-effect-and-error-free-fns}をバインドする、@file{byte-opt.el}内のコードを更新してください。"

#. type: cindex
#: internals.texi.orig:920
#, no-wrap
msgid "object internals"
msgstr "object internals"

#. type: Plain text
#: internals.texi.orig:930
msgid "Emacs Lisp provides a rich set of the data types.  Some of them, like cons cells, integers and strings, are common to nearly all Lisp dialects.  Some others, like markers and buffers, are quite special and needed to provide the basic support to write editor commands in Lisp.  To implement such a variety of object types and provide an efficient way to pass objects between the subsystems of an interpreter, there is a set of C data structures and a special type to represent the pointers to all of them, which is known as @dfn{tagged pointer}."
msgstr "Emacs Lispは豊富なデータタイプのセットを提供します。コンスセル、整数、文字列のようにこれらのいくつかは、ほとんどすべてのLisp方言で一般的です。マーカやバッファーのようなそれ以外のものは、Lisp内でエディターコマンドを記述するための基本的サポートを提供するために、極めて特別で必要なものです。そのような種々のオブジェクトタイプを実装して、インタープリターのサブシステムとの間でオブジェクトを渡す効果的な方法を提供するに、Cデータ構造体セットとそれらすべてにたいするポインターを表す、@dfn{タグ付きポインター(tagged pointer)}と呼ばれる、特別なタイプが存在します。"

#. type: Plain text
#: internals.texi.orig:947
msgid "In C, the tagged pointer is an object of type @code{Lisp_Object}.  Any initialized variable of such a type always holds the value of one of the following basic data types: integer, symbol, string, cons cell, float, vectorlike or miscellaneous object.  Each of these data types has the corresponding tag value.  All tags are enumerated by @code{enum Lisp_Type} and placed into a 3-bit bitfield of the @code{Lisp_Object}.  The rest of the bits is the value itself.  Integers are immediate, i.e., directly represented by those @dfn{value bits}, and all other objects are represented by the C pointers to a corresponding object allocated from the heap.  Width of the @code{Lisp_Object} is platform- and configuration-dependent: usually it's equal to the width of an underlying platform pointer (i.e., 32-bit on a 32-bit machine and 64-bit on a 64-bit one), but also there is a special configuration where @code{Lisp_Object} is 64-bit but all pointers are 32-bit.  The latter trick was designed to overcome the limited range of values for Lisp integers on a 32-bit system by using 64-bit @code{long long} type for @code{Lisp_Object}."
msgstr "Cでは、タグ付きポインターは、タイプ@code{Lisp_Object}のオブジェクトです。そのようなタイプの初期化された変数は、基本的なデータタイプである整数、シンボル、文字列、コンスセル、浮動小数点数、ベクター類似オブジェクトや、その他の雑多なオブジェクトのいずれかを、常に値として保持します。これらのデータタイプのそれぞれは、対応するタグ値をもちます。すべてのタグは@code{enum Lisp_Type}により列挙され、@code{Lisp_Object}の3ビットのビットフィールソに配置されます。残りのビットは、それ自身の値です。整数は即値(@dfn{値ビット}で直接表される)、他のすべてのオブジェクトは、ヒープに割り当てられた対応するオブジェクトへのCポインターで表されます。@code{Lisp_Object}のサイズはプラットフォームと設定に依存します。これは通常は背景プラットフォームのポインターと等しい(32ビットマシンなら32ビット、64ビットマシンなら64ビット)ですが、@code{Lisp_Object}が64ビットでも、すべてのポインターが32ビットのような特別な構成もあります。後者は@code{Lisp_Object}にたいして、64ビットの@code{long long}タイプを使用することにより、32ビットシステム上のLisp整数にたいする、値範囲の制限を乗り越えるためにデザインされたトリックです。"

#. type: Plain text
#: internals.texi.orig:950
msgid "The following C data structures are defined in @file{lisp.h} to represent the basic data types beyond integers:"
msgstr "以下のCデータ構造体は、整数ではない基本的なデータタイプを表すために、@file{lisp.h}で定義されています:"

#. type: item
#: internals.texi.orig:952
#, no-wrap
msgid "struct Lisp_Cons"
msgstr "struct Lisp_Cons"

#. type: table
#: internals.texi.orig:954
msgid "Cons cell, an object used to construct lists."
msgstr "コンスセル。リストを構築するために使用されるオブジェクトである。"

#. type: item
#: internals.texi.orig:955
#, no-wrap
msgid "struct Lisp_String"
msgstr "struct Lisp_String"

#. type: table
#: internals.texi.orig:957
msgid "String, the basic object to represent a sequence of characters."
msgstr "文字列。文字シーケンスを表す基本的オブジェクトである。"

#. type: item
#: internals.texi.orig:958
#, no-wrap
msgid "struct Lisp_Vector"
msgstr "struct Lisp_Vector"

#. type: table
#: internals.texi.orig:960
msgid "Array, a fixed-size set of Lisp objects which may be accessed by an index."
msgstr "配列。インデックスによりアクセスできる、固定サイズのLispオブジェクトのセットである。"

#. type: item
#: internals.texi.orig:961
#, no-wrap
msgid "struct Lisp_Symbol"
msgstr "struct Lisp_Symbol"

#. type: table
#: internals.texi.orig:963
msgid "Symbol, the unique-named entity commonly used as an identifier."
msgstr "シンボル。一般的に識別子として使用される一意な名前のエンティティである。"

#. type: item
#: internals.texi.orig:964
#, no-wrap
msgid "struct Lisp_Float"
msgstr "struct Lisp_Float"

#. type: table
#: internals.texi.orig:966
msgid "Floating-point value."
msgstr "Floating-point value."

#. type: item
#: internals.texi.orig:967
#, no-wrap
msgid "union Lisp_Misc"
msgstr "union Lisp_Misc"

#. type: table
#: internals.texi.orig:969
msgid "Miscellaneous kinds of objects which don't fit into any of the above."
msgstr "上記のいずれにも適合しない、雑多な種類のオブジェクト。"

#. type: Plain text
#: internals.texi.orig:978
msgid "These types are the first-class citizens of an internal type system.  Since the tag space is limited, all other types are the subtypes of either @code{Lisp_Vectorlike} or @code{Lisp_Misc}.  Vector subtypes are enumerated by @code{enum pvec_type}, and nearly all complex objects like windows, buffers, frames, and processes fall into this category.  The rest of special types, including markers and overlays, are enumerated by @code{enum Lisp_Misc_Type} and form the set of subtypes of @code{Lisp_Misc}."
msgstr "これらのタイプは、内部的タイプシステムの一級クラスの市民です。タグスペースは限られているので、他のすべてのタイプは@code{Lisp_Vectorlike}か@code{Lisp_Misc}のサブクラスです。サブタイプのベクターは@code{enum pvec_type}により列挙されておりウィンドウ、バッファー、フレーム、プロセスのようなほとんどすべての複雑なオブジェクトは、このカテゴリーに分類されます。マーカーとオーバーレイを含む残りのスペシャルタイプは、@code{enum Lisp_Misc_Type}により列挙されており、@code{Lisp_Misc}のサブタイプセットを形成します。"

#. type: Plain text
#: internals.texi.orig:986
msgid "Below there is a description of a few subtypes of @code{Lisp_Vectorlike}.  Buffer object represents the text to display and edit.  Window is the part of display structure which shows the buffer or used as a container to recursively place other windows on the same frame.  (Do not confuse Emacs Lisp window object with the window as an entity managed by the user interface system like X; in Emacs terminology, the latter is called frame.)  Finally, process object is used to manage the subprocesses."
msgstr "@code{Lisp_Vectorlike}のいくつかのサブタイプを説明します。バッファーオブジェクトは、表示および編集を行うテキストを表します。ウィンドウはバッファーを表示したり、同一フレーム上で再帰的に他のウィンドウを配置するためのコンテナーに使用される、表示構造の一部です(Emacs Lispのウィンドウオブジェクトと、Xのようなユーザーインターフェースシステムに管理されるエンティティとしてのウィンドウを混同しないこと。Emacsの用語では後者はフレームと呼ばれる)。最後に、プロセスオブジェクトは、サブプロセスの管理に使用されます。"

#. type: subsection
#: internals.texi.orig:991 internals.texi.orig:993 internals.texi.orig:994
#, no-wrap
msgid "Buffer Internals"
msgstr "Buffer Internals"

#. type: menuentry
#: internals.texi.orig:991
msgid "Components of a buffer structure."
msgstr "バッファー構造体の構成子。"

#. type: subsection
#: internals.texi.orig:991 internals.texi.orig:1261 internals.texi.orig:1262
#, no-wrap
msgid "Window Internals"
msgstr "Window Internals"

#. type: menuentry
#: internals.texi.orig:991
msgid "Components of a window structure."
msgstr "ウィンドウ構造体の構成子。"

#. type: subsection
#: internals.texi.orig:991 internals.texi.orig:1468 internals.texi.orig:1469
#, no-wrap
msgid "Process Internals"
msgstr "Process Internals"

#. type: menuentry
#: internals.texi.orig:991
msgid "Components of a process structure."
msgstr "プロセス構造体の構成子。"

#. type: cindex
#: internals.texi.orig:995
#, no-wrap
msgid "internals, of buffer"
msgstr "internals, of buffer"

#. type: cindex
#: internals.texi.orig:996
#, no-wrap
msgid "buffer internals"
msgstr "buffer internals"

#. type: Plain text
#: internals.texi.orig:1003
msgid "Two structures (see @file{buffer.h}) are used to represent buffers in C@.  The @code{buffer_text} structure contains fields describing the text of a buffer; the @code{buffer} structure holds other fields.  In the case of indirect buffers, two or more @code{buffer} structures reference the same @code{buffer_text} structure."
msgstr "2つの構造体(@file{buffer.h}を参照)は、Cでバッファーを表すために使用されます。@code{buffer_text}構造体には、バッファーのテキストを記述するフィールドが含まれます。@code{buffer}構造体は他のフィールドを保持します。インダイレクトバッファーの場合には、2つ以上の@code{buffer}構造体が、同じ@code{buffer_text}構造体を参照します。"

#. type: Plain text
#: internals.texi.orig:1005
msgid "Here are some of the fields in @code{struct buffer_text}:"
msgstr "以下に@code{struct buffer_text}内のフィールドをいくつか示します:"

#. type: item
#: internals.texi.orig:1007
#, no-wrap
msgid "beg"
msgstr "beg"

#. type: table
#: internals.texi.orig:1009
msgid "The address of the buffer contents."
msgstr "バッファーコンテンツのアドレス。"

#. type: item
#: internals.texi.orig:1010
#, no-wrap
msgid "gpt"
msgstr "gpt"

#. type: itemx
#: internals.texi.orig:1011
#, no-wrap
msgid "gpt_byte"
msgstr "gpt_byte"

#. type: table
#: internals.texi.orig:1014
msgid "The character and byte positions of the buffer gap.  @xref{Buffer Gap}."
msgstr "バッファーのギャップの文字位置とバイト位置。@ref{Buffer Gap}を参照のこと。"

#. type: item
#: internals.texi.orig:1015
#, no-wrap
msgid "z"
msgstr "z"

#. type: itemx
#: internals.texi.orig:1016
#, no-wrap
msgid "z_byte"
msgstr "z_byte"

#. type: table
#: internals.texi.orig:1018
msgid "The character and byte positions of the end of the buffer text."
msgstr "バッファーテキストの終端の文字位置とバイト位置。"

#. type: item
#: internals.texi.orig:1019
#, no-wrap
msgid "gap_size"
msgstr "gap_size"

#. type: table
#: internals.texi.orig:1021
msgid "The size of buffer's gap.  @xref{Buffer Gap}."
msgstr "バッファーのギャップのサイズ。@ref{Buffer Gap}を参照のこと。"

#. type: item
#: internals.texi.orig:1022
#, no-wrap
msgid "modiff"
msgstr "modiff"

#. type: itemx
#: internals.texi.orig:1023
#, no-wrap
msgid "save_modiff"
msgstr "save_modiff"

#. type: itemx
#: internals.texi.orig:1024
#, no-wrap
msgid "chars_modiff"
msgstr "chars_modiff"

#. type: itemx
#: internals.texi.orig:1025
#, no-wrap
msgid "overlay_modiff"
msgstr "overlay_modiff"

#. type: table
#: internals.texi.orig:1034
msgid "These fields count the number of buffer-modification events performed in this buffer.  @code{modiff} is incremented after each buffer-modification event, and is never otherwise changed; @code{save_modiff} contains the value of @code{modiff} the last time the buffer was visited or saved; @code{chars_modiff} counts only modifications to the characters in the buffer, ignoring all other kinds of changes; and @code{overlay_modiff} counts only modifications to the overlays."
msgstr "これらのフィールドは、そのバッファーで行われた、バッファー変更イベントの数をカウントする。@code{modiff}はバッファー変更イベントのたびに増分され、それ以外では決して変化しない。@code{save_modiff}には、そのバッファーが最後にvisitまたは保存されたときの、@code{modiff}の値が含まれる。@code{chars_modiff}は、そのバッファー内の文字にたいする変更だけをカウントし、その他すべての種類の変更を無視する。@code{overlay_modiff}は、オーバーレイにたいする変更だけをカウントする。"

#. type: item
#: internals.texi.orig:1035
#, no-wrap
msgid "beg_unchanged"
msgstr "beg_unchanged"

#. type: itemx
#: internals.texi.orig:1036
#, no-wrap
msgid "end_unchanged"
msgstr "end_unchanged"

#. type: table
#: internals.texi.orig:1039
msgid "The number of characters at the start and end of the text that are known to be unchanged since the last complete redisplay."
msgstr "最後の再表示完了以降に、未変更だと解っているテキストの、開始と終了の箇所での文字数。"

#. type: item
#: internals.texi.orig:1040
#, no-wrap
msgid "unchanged_modified"
msgstr "unchanged_modified"

#. type: itemx
#: internals.texi.orig:1041
#, no-wrap
msgid "overlay_unchanged_modified"
msgstr "overlay_unchanged_modified"

#. type: table
#: internals.texi.orig:1047
msgid "The values of @code{modiff} and @code{overlay_modiff}, respectively, after the last complete redisplay.  If their current values match @code{modiff} or @code{overlay_modiff}, that means @code{beg_unchanged} and @code{end_unchanged} contain no useful information."
msgstr "それぞれ、最後に再表示が完了した後の@code{modiff}と@code{overlay_modiff}の値。これらのカレント値が@code{modiff}や@code{overlay_modiff}とマッチしたら、それは@code{beg_unchanged}と@code{end_unchanged}に有用な情報が含まれないことを意味する。"

#. type: item
#: internals.texi.orig:1048
#, no-wrap
msgid "markers"
msgstr "markers"

#. type: table
#: internals.texi.orig:1052
msgid "The markers that refer to this buffer.  This is actually a single marker, and successive elements in its marker @code{chain} are the other markers referring to this buffer text."
msgstr "このバッファーを参照するマーカー。これは実際には単一のマーカーであり、自身のマーカー``チェーン''内の一連の要素が、そのバッファー内のテキストを参照する他のマーカーになる。"

#. type: item
#: internals.texi.orig:1053
#, no-wrap
msgid "intervals"
msgstr "intervals"

#. type: table
#: internals.texi.orig:1055
msgid "The interval tree which records the text properties of this buffer."
msgstr "そのバッファーのテキストプロパティを記録する、インターバルツリー。"

#. type: Plain text
#: internals.texi.orig:1058
msgid "Some of the fields of @code{struct buffer} are:"
msgstr "@code{struct buffer}のいくつかのフィールドを以下に示します:"

#. type: item
#: internals.texi.orig:1060
#, no-wrap
msgid "header"
msgstr "header"

#. type: table
#: internals.texi.orig:1063
msgid "A header of type @code{struct vectorlike_header} is common to all vectorlike objects."
msgstr "タイプ@code{struct vectorlike_header}のヘッダーは、すべてのベクター類似のオブジェクトに共通。"

#. type: item
#: internals.texi.orig:1064
#, no-wrap
msgid "own_text"
msgstr "own_text"

#. type: table
#: internals.texi.orig:1067
msgid "A @code{struct buffer_text} structure that ordinarily holds the buffer contents.  In indirect buffers, this field is not used."
msgstr "構造体@code{struct buffer_text}は、通常はバッファーのコンテンツを保持する。インダイレクトバッファーでは、このフィールドは使用されない。"

#. type: item
#: internals.texi.orig:1068
#, no-wrap
msgid "text"
msgstr "text"

#. type: table
#: internals.texi.orig:1072
msgid "A pointer to the @code{buffer_text} structure for this buffer.  In an ordinary buffer, this is the @code{own_text} field above.  In an indirect buffer, this is the @code{own_text} field of the base buffer."
msgstr "そのバッファーの@code{buffer_text}構造体へのポインター。通常のバッファーでは、上述の@code{own_text}フィールドである。インダイレクトバッファーでは、そのベースバッファーの@code{own_text}フィールドになる。"

#. type: item
#: internals.texi.orig:1073 internals.texi.orig:1296
#, no-wrap
msgid "next"
msgstr "next"

#. type: table
#: internals.texi.orig:1077
msgid "A pointer to the next buffer, in the chain of all buffers, including killed buffers.  This chain is used only for allocation and garbage collection, in order to collect killed buffers properly."
msgstr "killされたバッファーを含むすべてのバッファーのチェーン内において、次のバッファーへのポインター。このチェーンは、killされたバッファーを正しく回収するために、割り当てとガーベージコレクションのためだけに使用される。"

#. type: item
#: internals.texi.orig:1078
#, no-wrap
msgid "pt"
msgstr "pt"

#. type: itemx
#: internals.texi.orig:1079
#, no-wrap
msgid "pt_byte"
msgstr "pt_byte"

#. type: table
#: internals.texi.orig:1081
msgid "The character and byte positions of point in a buffer."
msgstr "バッファー内のポイントの文字位置とバイト位置。"

#. type: item
#: internals.texi.orig:1082
#, no-wrap
msgid "begv"
msgstr "begv"

#. type: itemx
#: internals.texi.orig:1083
#, no-wrap
msgid "begv_byte"
msgstr "begv_byte"

#. type: table
#: internals.texi.orig:1086
msgid "The character and byte positions of the beginning of the accessible range of text in the buffer."
msgstr "そのバッファー内のアクセス可能範囲の、先頭位置の文字位置とバイト位置。"

#. type: item
#: internals.texi.orig:1087
#, no-wrap
msgid "zv"
msgstr "zv"

#. type: itemx
#: internals.texi.orig:1088
#, no-wrap
msgid "zv_byte"
msgstr "zv_byte"

#. type: table
#: internals.texi.orig:1091
msgid "The character and byte positions of the end of the accessible range of text in the buffer."
msgstr "そのバッファー内のアクセス可能範囲の、終端位置の文字位置とバイト位置。"

#. type: item
#: internals.texi.orig:1092
#, no-wrap
msgid "base_buffer"
msgstr "base_buffer"

#. type: table
#: internals.texi.orig:1095
msgid "In an indirect buffer, this points to the base buffer.  In an ordinary buffer, it is null."
msgstr "インダイレクトバッファーでは、これはベースバッファーのポイントである。通常のバッファーではnull。"

#. type: item
#: internals.texi.orig:1096
#, no-wrap
msgid "local_flags"
msgstr "local_flags"

#. type: table
#: internals.texi.orig:1102
msgid "This field contains flags indicating that certain variables are local in this buffer.  Such variables are declared in the C code using @code{DEFVAR_PER_BUFFER}, and their buffer-local bindings are stored in fields in the buffer structure itself.  (Some of these fields are described in this table.)"
msgstr "このフィールドは、そのバッファー内でローカルな変数にたいして、それを示すフラグを含む。そのような変数はCコードでは@code{DEFVAR_PER_BUFFER}を使用して宣言され、それらのバッファーローカルなバインディングは、このバッファー構造体自身内のフィールドに格納される(これらのフィールドのいくつかは、このテーブル内で説明されておる)。"

#. type: item
#: internals.texi.orig:1103
#, no-wrap
msgid "modtime"
msgstr "modtime"

#. type: table
#: internals.texi.orig:1108
msgid "The modification time of the visited file.  It is set when the file is written or read.  Before writing the buffer into a file, this field is compared to the modification time of the file to see if the file has changed on disk.  @xref{Buffer Modification}."
msgstr "visitされているファイルの変更時刻。これは、そのファイルの書き込みおよび読み込み時にセットされる。そのバッファーをファイルに書き込む前に、そのファイルがディスク上で変更されていないことを確認するために、このフィールドとそのファイルの変更時刻を比較する。@ref{Buffer Modification}を参照のこと。"

#. type: item
#: internals.texi.orig:1109
#, no-wrap
msgid "auto_save_modified"
msgstr "auto_save_modified"

#. type: table
#: internals.texi.orig:1111
msgid "The time when the buffer was last auto-saved."
msgstr "そのバッファーが最後に自動保存さらたときの時刻。"

#. type: item
#: internals.texi.orig:1112
#, no-wrap
msgid "last_window_start"
msgstr "last_window_start"

#. type: table
#: internals.texi.orig:1115
msgid "The @code{window-start} position in the buffer as of the last time the buffer was displayed in a window."
msgstr "そのバッファー最後にウィンドウに表示されたときの、の@code{window-start}位置。"

#. type: item
#: internals.texi.orig:1116
#, no-wrap
msgid "clip_changed"
msgstr "clip_changed"

#. type: table
#: internals.texi.orig:1119
msgid "This flag indicates that narrowing has changed in the buffer.  @xref{Narrowing}."
msgstr "このフラグは、そのバッファーでのナローイングが変更されているかを示す。@ref{Narrowing}を参照のこと。"

#. type: item
#: internals.texi.orig:1120
#, no-wrap
msgid "prevent_redisplay_optimizations_p"
msgstr "prevent_redisplay_optimizations_p"

#. type: table
#: internals.texi.orig:1123
msgid "This flag indicates that redisplay optimizations should not be used to display this buffer."
msgstr "このフラグは、そのバッファーの表示において、再表示最適化が使用されるべきではないことを示す。"

#. type: item
#: internals.texi.orig:1124
#, no-wrap
msgid "overlay_center"
msgstr "overlay_center"

#. type: table
#: internals.texi.orig:1127
msgid "This field holds the current overlay center position.  @xref{Managing Overlays}."
msgstr "このフィールドは、カレントオーバーレイの中心位置を保持する。@ref{Managing Overlays}を参照のこと。"

#. type: item
#: internals.texi.orig:1128
#, no-wrap
msgid "overlays_before"
msgstr "overlays_before"

#. type: itemx
#: internals.texi.orig:1129
#, no-wrap
msgid "overlays_after"
msgstr "overlays_after"

#. type: table
#: internals.texi.orig:1136
msgid "These fields hold, respectively, a list of overlays that end at or before the current overlay center, and a list of overlays that end after the current overlay center.  @xref{Managing Overlays}.  @code{overlays_before} is sorted in order of decreasing end position, and @code{overlays_after} is sorted in order of increasing beginning position."
msgstr "これらのフィールドは、カレントオーバーレイ中心、またはその前で終わるオーバーレイのリスト、およびカレントオーバーレイの後で終わるオーバーレイのリストである。@ref{Managing Overlays}を参照のこと。@code{overlays_before}は終端位置の記述順に格納され、@code{overlays_after}は先頭位置増加順で格納される。"

#. type: item
#: internals.texi.orig:1139 internals.texi.orig:1477
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: internals.texi.orig:1142
msgid "A Lisp string that names the buffer.  It is guaranteed to be unique.  @xref{Buffer Names}."
msgstr "そのバッファーを命名するLisp文字列。これは一意であることが保証されている。@ref{Buffer Names}を参照のこと。"

#. type: item
#: internals.texi.orig:1143
#, no-wrap
msgid "save_length"
msgstr "save_length"

#. type: table
#: internals.texi.orig:1148
msgid "The length of the file this buffer is visiting, when last read or saved.  This and other fields concerned with saving are not kept in the @code{buffer_text} structure because indirect buffers are never saved."
msgstr "そのバッファーがvisitしているファイルを、最後に読み込みまたは保存したときの長さ。インダイレクトバッファーは決して保存されることはないので、保存に関して、このフィールドとその他のフィールドは、@code{buffer_text}構造体で維持されない"

#. type: item
#: internals.texi.orig:1149
#, no-wrap
msgid "directory"
msgstr "directory"

#. type: table
#: internals.texi.orig:1152
msgid "The directory for expanding relative file names.  This is the value of the buffer-local variable @code{default-directory} (@pxref{File Name Expansion})."
msgstr "相対ファイル名を展開するディレクトリー。これはバッファーローカル変数@code{default-directory}の値である(@ref{File Name Expansion}を参照)。"

#. type: item
#: internals.texi.orig:1153
#, no-wrap
msgid "filename"
msgstr "filename"

#. type: table
#: internals.texi.orig:1157
msgid "The name of the file visited in this buffer, or @code{nil}.  This is the value of the buffer-local variable @code{buffer-file-name} (@pxref{Buffer File Name})."
msgstr "そのバッファーがvisitしているファイルの名前。これは、バッファーローカル変数@code{buffer-file-name}の値である(@ref{Buffer File Name}を参照)。"

#. type: item
#: internals.texi.orig:1158
#, no-wrap
msgid "undo_list"
msgstr "undo_list"

#. type: itemx
#: internals.texi.orig:1159
#, no-wrap
msgid "backed_up"
msgstr "backed_up"

#. type: itemx
#: internals.texi.orig:1160
#, no-wrap
msgid "auto_save_file_name"
msgstr "auto_save_file_name"

#. type: itemx
#: internals.texi.orig:1161
#, no-wrap
msgid "auto_save_file_format"
msgstr "auto_save_file_format"

#. type: itemx
#: internals.texi.orig:1162
#, no-wrap
msgid "read_only"
msgstr "read_only"

#. type: itemx
#: internals.texi.orig:1163
#, no-wrap
msgid "file_format"
msgstr "file_format"

#. type: itemx
#: internals.texi.orig:1164
#, no-wrap
msgid "file_truename"
msgstr "file_truename"

#. type: itemx
#: internals.texi.orig:1165
#, no-wrap
msgid "invisibility_spec"
msgstr "invisibility_spec"

#. type: itemx
#: internals.texi.orig:1166
#, no-wrap
msgid "display_count"
msgstr "display_count"

#. type: itemx
#: internals.texi.orig:1167
#, no-wrap
msgid "display_time"
msgstr "display_time"

#. type: table
#: internals.texi.orig:1173
msgid "These fields store the values of Lisp variables that are automatically buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable names have the additional prefix @code{buffer-} and have underscores replaced with dashes.  For instance, @code{undo_list} stores the value of @code{buffer-undo-list}."
msgstr "これらのフィールドは、自動的にバッファーローカル(@ref{Buffer-Local Variables}を参照)になるLisp変数の値を格納する。これらに対応する変数は、名前に追加のプレフィクス@code{buffer-}がつき、アンダースコアがダッシュで置換される。たとえば@code{undo_list}は、@code{buffer-undo-list}の値を格納する。"

#. type: item
#: internals.texi.orig:1174 internals.texi.orig:1503
#, no-wrap
msgid "mark"
msgstr "mark"

#. type: table
#: internals.texi.orig:1177
msgid "The mark for the buffer.  The mark is a marker, hence it is also included on the list @code{markers}.  @xref{The Mark}."
msgstr "そのバッファーにたいするマーク。マークはマーカーなので、リスト@code{markers}内にも含まれる。@ref{The Mark}を参照のこと。"

#. type: item
#: internals.texi.orig:1178
#, no-wrap
msgid "local_var_alist"
msgstr "local_var_alist"

#. type: table
#: internals.texi.orig:1183
msgid "The association list describing the buffer-local variable bindings of this buffer, not including the built-in buffer-local bindings that have special slots in the buffer object.  (Those slots are omitted from this table.)  @xref{Buffer-Local Variables}."
msgstr "この連想リストは、そのバッファーのバッファーローカル変数のバインディングを記述する。これにはバッファーオブジェクト内に特別なスロットをもつ、ビルトインのバッファーローカルなバインディングは含まれない(このテーブルでは、それらのスロットは省略している)。@ref{Buffer-Local Variables}を参照のこと。"

#. type: item
#: internals.texi.orig:1184
#, no-wrap
msgid "major_mode"
msgstr "major_mode"

#. type: table
#: internals.texi.orig:1186
msgid "Symbol naming the major mode of this buffer, e.g., @code{lisp-mode}."
msgstr "そのバッファーのメジャーモードを命名するシンボル(例: @code{lisp-mode})。"

#. type: item
#: internals.texi.orig:1187
#, no-wrap
msgid "mode_name"
msgstr "mode_name"

#. type: table
#: internals.texi.orig:1189
msgid "Pretty name of the major mode, e.g., @code{\"Lisp\"}."
msgstr "そのメジャーモードの愛称(例: @code{\"Lisp\"})。"

#. type: item
#: internals.texi.orig:1190
#, no-wrap
msgid "keymap"
msgstr "keymap"

#. type: itemx
#: internals.texi.orig:1191
#, no-wrap
msgid "abbrev_table"
msgstr "abbrev_table"

#. type: itemx
#: internals.texi.orig:1192
#, no-wrap
msgid "syntax_table"
msgstr "syntax_table"

#. type: itemx
#: internals.texi.orig:1193
#, no-wrap
msgid "category_table"
msgstr "category_table"

#. type: item
#: internals.texi.orig:1194 internals.texi.orig:1444
#, no-wrap
msgid "display_table"
msgstr "display_table"

#. type: table
#: internals.texi.orig:1199
msgid "These fields store the buffer's local keymap (@pxref{Keymaps}), abbrev table (@pxref{Abbrev Tables}), syntax table (@pxref{Syntax Tables}), category table (@pxref{Categories}), and display table (@pxref{Display Tables})."
msgstr "これらのフィールドは、そのバッファーのローカルキーマップ(@ref{Keymaps}を参照)、abbrevテーブル(@ref{Abbrev Tables}を参照)、構文テーブル(@ref{Syntax Tables}を参照)、カテゴリーテーブル(@ref{Categories}を参照)、ディスプレーテーブル(@ref{Display Tables}を参照)を格納する。"

#. type: item
#: internals.texi.orig:1200
#, no-wrap
msgid "downcase_table"
msgstr "downcase_table"

#. type: itemx
#: internals.texi.orig:1201
#, no-wrap
msgid "upcase_table"
msgstr "upcase_table"

#. type: itemx
#: internals.texi.orig:1202
#, no-wrap
msgid "case_canon_table"
msgstr "case_canon_table"

#. type: table
#: internals.texi.orig:1206
msgid "These fields store the conversion tables for converting text to lower case, upper case, and for canonicalizing text for case-fold search.  @xref{Case Tables}."
msgstr "これらのフィールドはテキストを小文字、大文字、およびcase-fold検索でのテキストの正規化の変換テーブルを格納する。@ref{Case Tables}を参照のこと。"

#. type: item
#: internals.texi.orig:1207
#, no-wrap
msgid "minor_modes"
msgstr "minor_modes"

#. type: table
#: internals.texi.orig:1209
msgid "An alist of the minor modes of this buffer."
msgstr "そのバッファーのマイナーモードのalist。"

#. type: item
#: internals.texi.orig:1210
#, no-wrap
msgid "pt_marker"
msgstr "pt_marker"

#. type: itemx
#: internals.texi.orig:1211
#, no-wrap
msgid "begv_marker"
msgstr "begv_marker"

#. type: itemx
#: internals.texi.orig:1212
#, no-wrap
msgid "zv_marker"
msgstr "zv_marker"

#. type: table
#: internals.texi.orig:1217
msgid "These fields are only used in an indirect buffer, or in a buffer that is the base of an indirect buffer.  Each holds a marker that records @code{pt}, @code{begv}, and @code{zv} respectively, for this buffer when the buffer is not current."
msgstr "これらのフィールドはインダイレクトバッファー、またはインダイレクトバッファーのベースバッファーであるようなバッファーでのみ使用される。これらはそれぞれ、そのバッファーがカレントでないときに、そのバッファーにたいする@code{pt}、@code{begv}、@code{zv}を記録するマーカーを保持する。"

#. type: item
#: internals.texi.orig:1218
#, no-wrap
msgid "mode_line_format"
msgstr "mode_line_format"

#. type: itemx
#: internals.texi.orig:1219
#, no-wrap
msgid "header_line_format"
msgstr "header_line_format"

#. type: itemx
#: internals.texi.orig:1220
#, no-wrap
msgid "case_fold_search"
msgstr "case_fold_search"

#. type: itemx
#: internals.texi.orig:1221
#, no-wrap
msgid "tab_width"
msgstr "tab_width"

#. type: itemx
#: internals.texi.orig:1222
#, no-wrap
msgid "fill_column"
msgstr "fill_column"

#. type: itemx
#: internals.texi.orig:1223
#, no-wrap
msgid "left_margin"
msgstr "left_margin"

#. type: itemx
#: internals.texi.orig:1224
#, no-wrap
msgid "auto_fill_function"
msgstr "auto_fill_function"

#. type: itemx
#: internals.texi.orig:1225
#, no-wrap
msgid "truncate_lines"
msgstr "truncate_lines"

#. type: itemx
#: internals.texi.orig:1226
#, no-wrap
msgid "word_wrap"
msgstr "word_wrap"

#. type: itemx
#: internals.texi.orig:1227
#, no-wrap
msgid "ctl_arrow"
msgstr "ctl_arrow"

#. type: itemx
#: internals.texi.orig:1228
#, no-wrap
msgid "bidi_display_reordering"
msgstr "bidi_display_reordering"

#. type: itemx
#: internals.texi.orig:1229
#, no-wrap
msgid "bidi_paragraph_direction"
msgstr "bidi_paragraph_direction"

#. type: itemx
#: internals.texi.orig:1230
#, no-wrap
msgid "selective_display"
msgstr "selective_display"

#. type: itemx
#: internals.texi.orig:1231
#, no-wrap
msgid "selective_display_ellipses"
msgstr "selective_display_ellipses"

#. type: itemx
#: internals.texi.orig:1232
#, no-wrap
msgid "overwrite_mode"
msgstr "overwrite_mode"

#. type: itemx
#: internals.texi.orig:1233
#, no-wrap
msgid "abbrev_mode"
msgstr "abbrev_mode"

#. type: itemx
#: internals.texi.orig:1234
#, no-wrap
msgid "mark_active"
msgstr "mark_active"

#. type: itemx
#: internals.texi.orig:1235
#, no-wrap
msgid "enable_multibyte_characters"
msgstr "enable_multibyte_characters"

#. type: itemx
#: internals.texi.orig:1236
#, no-wrap
msgid "buffer_file_coding_system"
msgstr "buffer_file_coding_system"

#. type: itemx
#: internals.texi.orig:1237
#, no-wrap
msgid "cache_long_line_scans"
msgstr "cache_long_line_scans"

#. type: itemx
#: internals.texi.orig:1238
#, no-wrap
msgid "point_before_scroll"
msgstr "point_before_scroll"

#. type: item
#: internals.texi.orig:1239 internals.texi.orig:1376
#, no-wrap
msgid "left_fringe_width"
msgstr "left_fringe_width"

#. type: itemx
#: internals.texi.orig:1240 internals.texi.orig:1377
#, no-wrap
msgid "right_fringe_width"
msgstr "right_fringe_width"

#. type: item
#: internals.texi.orig:1241 internals.texi.orig:1381
#, no-wrap
msgid "fringes_outside_margins"
msgstr "fringes_outside_margins"

#. type: itemx
#: internals.texi.orig:1242
#, no-wrap
msgid "scroll_bar_width"
msgstr "scroll_bar_width"

#. type: itemx
#: internals.texi.orig:1243
#, no-wrap
msgid "indicate_empty_lines"
msgstr "indicate_empty_lines"

#. type: itemx
#: internals.texi.orig:1244
#, no-wrap
msgid "indicate_buffer_boundaries"
msgstr "indicate_buffer_boundaries"

#. type: itemx
#: internals.texi.orig:1245
#, no-wrap
msgid "fringe_indicator_alist"
msgstr "fringe_indicator_alist"

#. type: itemx
#: internals.texi.orig:1246
#, no-wrap
msgid "fringe_cursor_alist"
msgstr "fringe_cursor_alist"

#. type: itemx
#: internals.texi.orig:1247
#, no-wrap
msgid "scroll_up_aggressively"
msgstr "scroll_up_aggressively"

#. type: itemx
#: internals.texi.orig:1248
#, no-wrap
msgid "scroll_down_aggressively"
msgstr "scroll_down_aggressively"

#. type: itemx
#: internals.texi.orig:1249
#, no-wrap
msgid "cursor_type"
msgstr "cursor_type"

#. type: itemx
#: internals.texi.orig:1250
#, no-wrap
msgid "cursor_in_non_selected_windows"
msgstr "cursor_in_non_selected_windows"

#. type: table
#: internals.texi.orig:1255
msgid "These fields store the values of Lisp variables that are automatically buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable names have underscores replaced with dashes.  For instance, @code{mode_line_format} stores the value of @code{mode-line-format}."
msgstr "これらのフィールドは、自動的にバッファーローカル(@ref{Buffer-Local Variables}を参照)になるLisp変数の値を格納する。これらに対応する変数は、名前のアンダースコアがダッシュで置換される。たとえば@code{mode_line_format}は、@code{mode-line-format}の値を格納する。"

#. type: item
#: internals.texi.orig:1256
#, no-wrap
msgid "last_selected_window"
msgstr "last_selected_window"

#. type: table
#: internals.texi.orig:1259
msgid "This is the last window that was selected with this buffer in it, or @code{nil} if that window no longer displays this buffer."
msgstr "これは、最後に選択されていたときにそのバッファーを表示していたウィンドウ、またはそのウィンドウがすでにそのバッファーを表示していなければ@code{nil}である。"

#. type: cindex
#: internals.texi.orig:1263
#, no-wrap
msgid "internals, of window"
msgstr ""

#. type: cindex
#: internals.texi.orig:1264
#, no-wrap
msgid "window internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1268
msgid "The fields of a window (for a complete list, see the definition of @code{struct window} in @file{window.h}) include:"
msgstr ""

#. type: item
#: internals.texi.orig:1270
#, no-wrap
msgid "frame"
msgstr ""

#. type: table
#: internals.texi.orig:1272
msgid "The frame that this window is on."
msgstr ""

#. type: item
#: internals.texi.orig:1273
#, no-wrap
msgid "mini_p"
msgstr ""

#. type: table
#: internals.texi.orig:1275
msgid "Non-@code{nil} if this window is a minibuffer window."
msgstr ""

#. type: item
#: internals.texi.orig:1276
#, no-wrap
msgid "parent"
msgstr ""

#. type: table
#: internals.texi.orig:1280
msgid "Internally, Emacs arranges windows in a tree; each group of siblings has a parent window whose area includes all the siblings.  This field points to a window's parent."
msgstr ""

#. type: table
#: internals.texi.orig:1285
msgid "Parent windows do not display buffers, and play little role in display except to shape their child windows.  Emacs Lisp programs usually have no access to the parent windows; they operate on the windows at the leaves of the tree, which actually display buffers."
msgstr ""

#. type: item
#: internals.texi.orig:1288
#, no-wrap
msgid "hchild"
msgstr ""

#. type: itemx
#: internals.texi.orig:1289
#, no-wrap
msgid "vchild"
msgstr ""

#. type: table
#: internals.texi.orig:1295
msgid "These fields contain the window's leftmost child and its topmost child respectively.  @code{hchild} is used if the window is subdivided horizontally by child windows, and @code{vchild} if it is subdivided vertically.  In a live window, only one of @code{hchild}, @code{vchild}, and @code{buffer} (q.v.@:) is non-@code{nil}."
msgstr ""

#. type: itemx
#: internals.texi.orig:1297
#, no-wrap
msgid "prev"
msgstr ""

#. type: table
#: internals.texi.orig:1302
msgid "The next sibling and previous sibling of this window.  @code{next} is @code{nil} if the window is the right-most or bottom-most in its group; @code{prev} is @code{nil} if it is the left-most or top-most in its group."
msgstr ""

#. type: item
#: internals.texi.orig:1303
#, no-wrap
msgid "left_col"
msgstr ""

#. type: table
#: internals.texi.orig:1306
msgid "The left-hand edge of the window, measured in columns, relative to the leftmost column in the frame (column 0)."
msgstr ""

#. type: item
#: internals.texi.orig:1307
#, no-wrap
msgid "top_line"
msgstr ""

#. type: table
#: internals.texi.orig:1310
msgid "The top edge of the window, measured in lines, relative to the topmost line in the frame (line 0)."
msgstr ""

#. type: item
#: internals.texi.orig:1311
#, no-wrap
msgid "total_cols"
msgstr ""

#. type: itemx
#: internals.texi.orig:1312
#, no-wrap
msgid "total_lines"
msgstr ""

#. type: table
#: internals.texi.orig:1316
msgid "The width and height of the window, measured in columns and lines respectively.  The width includes the scroll bar and fringes, and/or the separator line on the right of the window (if any)."
msgstr ""

#. type: item
#: internals.texi.orig:1317 internals.texi.orig:1491
#, no-wrap
msgid "buffer"
msgstr ""

#. type: table
#: internals.texi.orig:1319
msgid "The buffer that the window is displaying."
msgstr ""

#. type: item
#: internals.texi.orig:1320
#, no-wrap
msgid "start"
msgstr ""

#. type: table
#: internals.texi.orig:1323
msgid "A marker pointing to the position in the buffer that is the first character displayed in the window."
msgstr ""

#. type: item
#: internals.texi.orig:1324
#, no-wrap
msgid "pointm"
msgstr ""

#. type: cindex
#: internals.texi.orig:1325
#, no-wrap
msgid "window point internals"
msgstr ""

#. type: table
#: internals.texi.orig:1328
msgid "This is the value of point in the current buffer when this window is selected; when it is not selected, it retains its previous value."
msgstr ""

#. type: item
#: internals.texi.orig:1329
#, no-wrap
msgid "force_start"
msgstr ""

#. type: table
#: internals.texi.orig:1335
msgid "If this flag is non-@code{nil}, it says that the window has been scrolled explicitly by the Lisp program.  This affects what the next redisplay does if point is off the screen: instead of scrolling the window to show the text around point, it moves point to a location that is on the screen."
msgstr ""

#. type: item
#: internals.texi.orig:1336
#, no-wrap
msgid "frozen_window_start_p"
msgstr ""

#. type: table
#: internals.texi.orig:1340
msgid "This field is set temporarily to 1 to indicate to redisplay that @code{start} of this window should not be changed, even if point gets invisible."
msgstr ""

#. type: item
#: internals.texi.orig:1341
#, no-wrap
msgid "start_at_line_beg"
msgstr ""

#. type: table
#: internals.texi.orig:1344
msgid "Non-@code{nil} means current value of @code{start} was the beginning of a line when it was chosen."
msgstr ""

#. type: item
#: internals.texi.orig:1345
#, no-wrap
msgid "use_time"
msgstr ""

#. type: table
#: internals.texi.orig:1348
msgid "This is the last time that the window was selected.  The function @code{get-lru-window} uses this field."
msgstr ""

#. type: item
#: internals.texi.orig:1349
#, no-wrap
msgid "sequence_number"
msgstr ""

#. type: table
#: internals.texi.orig:1351
msgid "A unique number assigned to this window when it was created."
msgstr ""

#. type: item
#: internals.texi.orig:1352
#, no-wrap
msgid "last_modified"
msgstr ""

#. type: table
#: internals.texi.orig:1355
msgid "The @code{modiff} field of the window's buffer, as of the last time a redisplay completed in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1356
#, no-wrap
msgid "last_overlay_modified"
msgstr ""

#. type: table
#: internals.texi.orig:1359
msgid "The @code{overlay_modiff} field of the window's buffer, as of the last time a redisplay completed in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1360
#, no-wrap
msgid "last_point"
msgstr ""

#. type: table
#: internals.texi.orig:1363
msgid "The buffer's value of point, as of the last time a redisplay completed in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1364
#, no-wrap
msgid "last_had_star"
msgstr ""

#. type: table
#: internals.texi.orig:1367
msgid "A non-@code{nil} value means the window's buffer was ``modified'' when the window was last updated."
msgstr ""

#. type: item
#: internals.texi.orig:1368
#, no-wrap
msgid "vertical_scroll_bar"
msgstr ""

#. type: table
#: internals.texi.orig:1370
msgid "This window's vertical scroll bar."
msgstr ""

#. type: item
#: internals.texi.orig:1371
#, no-wrap
msgid "left_margin_cols"
msgstr ""

#. type: itemx
#: internals.texi.orig:1372
#, no-wrap
msgid "right_margin_cols"
msgstr ""

#. type: table
#: internals.texi.orig:1375
msgid "The widths of the left and right margins in this window.  A value of @code{nil} means no margin."
msgstr ""

#. type: table
#: internals.texi.orig:1380
msgid "The widths of the left and right fringes in this window.  A value of @code{nil} or @code{t} means use the values of the frame."
msgstr ""

#. type: table
#: internals.texi.orig:1384
msgid "A non-@code{nil} value means the fringes outside the display margins; othersize they are between the margin and the text."
msgstr ""

#. type: item
#: internals.texi.orig:1385
#, no-wrap
msgid "window_end_pos"
msgstr ""

#. type: table
#: internals.texi.orig:1389
msgid "This is computed as @code{z} minus the buffer position of the last glyph in the current matrix of the window.  The value is only valid if @code{window_end_valid} is not @code{nil}."
msgstr ""

#. type: item
#: internals.texi.orig:1390
#, no-wrap
msgid "window_end_bytepos"
msgstr ""

#. type: table
#: internals.texi.orig:1392
msgid "The byte position corresponding to @code{window_end_pos}."
msgstr ""

#. type: item
#: internals.texi.orig:1393
#, no-wrap
msgid "window_end_vpos"
msgstr ""

#. type: table
#: internals.texi.orig:1396
msgid "The window-relative vertical position of the line containing @code{window_end_pos}."
msgstr ""

#. type: item
#: internals.texi.orig:1397
#, no-wrap
msgid "window_end_valid"
msgstr ""

#. type: table
#: internals.texi.orig:1402
msgid "This field is set to a non-@code{nil} value if @code{window_end_pos} is truly valid.  This is @code{nil} if nontrivial redisplay is pre-empted, since in that case the display that @code{window_end_pos} was computed for did not get onto the screen."
msgstr ""

#. type: item
#: internals.texi.orig:1403
#, no-wrap
msgid "cursor"
msgstr ""

#. type: table
#: internals.texi.orig:1405
msgid "A structure describing where the cursor is in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1406
#, no-wrap
msgid "last_cursor"
msgstr ""

#. type: table
#: internals.texi.orig:1408
msgid "The value of @code{cursor} as of the last redisplay that finished."
msgstr ""

#. type: item
#: internals.texi.orig:1409
#, no-wrap
msgid "phys_cursor"
msgstr ""

#. type: table
#: internals.texi.orig:1411
msgid "A structure describing where the cursor of this window physically is."
msgstr ""

#. type: item
#: internals.texi.orig:1412
#, no-wrap
msgid "phys_cursor_type"
msgstr ""

#. type: itemx
#: internals.texi.orig:1415
#, no-wrap
msgid "phys_cursor_height"
msgstr ""

#. type: itemx
#: internals.texi.orig:1416
#, no-wrap
msgid "phys_cursor_width"
msgstr ""

#. type: table
#: internals.texi.orig:1419
msgid "The type, height, and width of the cursor that was last displayed on this window."
msgstr ""

#. type: item
#: internals.texi.orig:1420
#, no-wrap
msgid "phys_cursor_on_p"
msgstr ""

#. type: table
#: internals.texi.orig:1422
msgid "This field is non-zero if the cursor is physically on."
msgstr ""

#. type: item
#: internals.texi.orig:1423
#, no-wrap
msgid "cursor_off_p"
msgstr ""

#. type: table
#: internals.texi.orig:1426
msgid "Non-zero means the cursor in this window is logically off.  This is used for blinking the cursor."
msgstr ""

#. type: item
#: internals.texi.orig:1427
#, no-wrap
msgid "last_cursor_off_p"
msgstr ""

#. type: table
#: internals.texi.orig:1430
msgid "This field contains the value of @code{cursor_off_p} as of the time of the last redisplay."
msgstr ""

#. type: item
#: internals.texi.orig:1431
#, no-wrap
msgid "must_be_updated_p"
msgstr ""

#. type: table
#: internals.texi.orig:1433
msgid "This is set to 1 during redisplay when this window must be updated."
msgstr ""

#. type: item
#: internals.texi.orig:1434
#, no-wrap
msgid "hscroll"
msgstr ""

#. type: table
#: internals.texi.orig:1437
msgid "This is the number of columns that the display in the window is scrolled horizontally to the left.  Normally, this is 0."
msgstr ""

#. type: item
#: internals.texi.orig:1438
#, no-wrap
msgid "vscroll"
msgstr ""

#. type: table
#: internals.texi.orig:1440
msgid "Vertical scroll amount, in pixels.  Normally, this is 0."
msgstr ""

#. type: item
#: internals.texi.orig:1441
#, no-wrap
msgid "dedicated"
msgstr ""

#. type: table
#: internals.texi.orig:1443
msgid "Non-@code{nil} if this window is dedicated to its buffer."
msgstr ""

#. type: table
#: internals.texi.orig:1446
msgid "The window's display table, or @code{nil} if none is specified for it."
msgstr ""

#. type: item
#: internals.texi.orig:1447
#, no-wrap
msgid "update_mode_line"
msgstr ""

#. type: table
#: internals.texi.orig:1449
msgid "Non-@code{nil} means this window's mode line needs to be updated."
msgstr ""

#. type: item
#: internals.texi.orig:1450
#, no-wrap
msgid "base_line_number"
msgstr ""

#. type: table
#: internals.texi.orig:1453
msgid "The line number of a certain position in the buffer, or @code{nil}.  This is used for displaying the line number of point in the mode line."
msgstr ""

#. type: item
#: internals.texi.orig:1454
#, no-wrap
msgid "base_line_pos"
msgstr ""

#. type: table
#: internals.texi.orig:1458
msgid "The position in the buffer for which the line number is known, or @code{nil} meaning none is known.  If it is a buffer, don't display the line number as long as the window shows that buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1459
#, no-wrap
msgid "column_number_displayed"
msgstr ""

#. type: table
#: internals.texi.orig:1462
msgid "The column number currently displayed in this window's mode line, or @code{nil} if column numbers are not being displayed."
msgstr ""

#. type: item
#: internals.texi.orig:1463
#, no-wrap
msgid "current_matrix"
msgstr ""

#. type: itemx
#: internals.texi.orig:1464
#, no-wrap
msgid "desired_matrix"
msgstr ""

#. type: table
#: internals.texi.orig:1466
msgid "Glyph matrices describing the current and desired display of this window."
msgstr ""

#. type: cindex
#: internals.texi.orig:1470
#, no-wrap
msgid "internals, of process"
msgstr ""

#. type: cindex
#: internals.texi.orig:1471
#, no-wrap
msgid "process internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1475
msgid "The fields of a process (for a complete list, see the definition of @code{struct Lisp_Process} in @file{process.h}) include:"
msgstr ""

#. type: table
#: internals.texi.orig:1479
msgid "A string, the name of the process."
msgstr ""

#. type: item
#: internals.texi.orig:1480
#, no-wrap
msgid "command"
msgstr ""

#. type: table
#: internals.texi.orig:1484
msgid "A list containing the command arguments that were used to start this process.  For a network or serial process, it is @code{nil} if the process is running or @code{t} if the process is stopped."
msgstr ""

#. type: item
#: internals.texi.orig:1485
#, no-wrap
msgid "filter"
msgstr ""

#. type: table
#: internals.texi.orig:1487
msgid "A function used to accept output from the process."
msgstr ""

#. type: item
#: internals.texi.orig:1488
#, no-wrap
msgid "sentinel"
msgstr ""

#. type: table
#: internals.texi.orig:1490
msgid "A function called whenever the state of the process changes."
msgstr ""

#. type: table
#: internals.texi.orig:1493
msgid "The associated buffer of the process."
msgstr ""

#. type: item
#: internals.texi.orig:1494
#, no-wrap
msgid "pid"
msgstr ""

#. type: table
#: internals.texi.orig:1497
msgid "An integer, the operating system's process @acronym{ID}.  Pseudo-processes such as network or serial connections use a value of 0."
msgstr ""

#. type: item
#: internals.texi.orig:1498
#, no-wrap
msgid "childp"
msgstr ""

#. type: table
#: internals.texi.orig:1502
msgid "A flag, @code{t} if this is really a child process.  For a network or serial connection, it is a plist based on the arguments to @code{make-network-process} or @code{make-serial-process}."
msgstr ""

#. type: table
#: internals.texi.orig:1507
msgid "A marker indicating the position of the end of the last output from this process inserted into the buffer.  This is often but not always the end of the buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1508
#, no-wrap
msgid "kill_without_query"
msgstr ""

#. type: table
#: internals.texi.orig:1511
msgid "If this is non-zero, killing Emacs while this process is still running does not ask for confirmation about killing the process."
msgstr ""

#. type: item
#: internals.texi.orig:1512
#, no-wrap
msgid "raw_status"
msgstr ""

#. type: table
#: internals.texi.orig:1514
msgid "The raw process status, as returned by the @code{wait} system call."
msgstr ""

#. type: item
#: internals.texi.orig:1515
#, no-wrap
msgid "status"
msgstr ""

#. type: table
#: internals.texi.orig:1517
msgid "The process status, as @code{process-status} should return it."
msgstr ""

#. type: item
#: internals.texi.orig:1518
#, no-wrap
msgid "tick"
msgstr ""

#. type: itemx
#: internals.texi.orig:1519
#, no-wrap
msgid "update_tick"
msgstr ""

#. type: table
#: internals.texi.orig:1523
msgid "If these two fields are not equal, a change in the status of the process needs to be reported, either by running the sentinel or by inserting a message in the process buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1524
#, no-wrap
msgid "pty_flag"
msgstr ""

#. type: table
#: internals.texi.orig:1527
msgid "Non-@code{nil} if communication with the subprocess uses a pty; @code{nil} if it uses a pipe."
msgstr ""

#. type: item
#: internals.texi.orig:1528
#, no-wrap
msgid "infd"
msgstr ""

#. type: table
#: internals.texi.orig:1530
msgid "The file descriptor for input from the process."
msgstr ""

#. type: item
#: internals.texi.orig:1531
#, no-wrap
msgid "outfd"
msgstr ""

#. type: table
#: internals.texi.orig:1533
msgid "The file descriptor for output to the process."
msgstr ""

#. type: item
#: internals.texi.orig:1534
#, no-wrap
msgid "tty_name"
msgstr ""

#. type: table
#: internals.texi.orig:1537
msgid "The name of the terminal that the subprocess is using, or @code{nil} if it is using pipes."
msgstr ""

#. type: item
#: internals.texi.orig:1538
#, no-wrap
msgid "decode_coding_system"
msgstr ""

#. type: table
#: internals.texi.orig:1540
msgid "Coding-system for decoding the input from this process."
msgstr ""

#. type: item
#: internals.texi.orig:1541
#, no-wrap
msgid "decoding_buf"
msgstr ""

#. type: table
#: internals.texi.orig:1543
msgid "A working buffer for decoding."
msgstr ""

#. type: item
#: internals.texi.orig:1544
#, no-wrap
msgid "decoding_carryover"
msgstr ""

#. type: table
#: internals.texi.orig:1546
msgid "Size of carryover in decoding."
msgstr ""

#. type: item
#: internals.texi.orig:1547
#, no-wrap
msgid "encode_coding_system"
msgstr ""

#. type: table
#: internals.texi.orig:1549
msgid "Coding-system for encoding the output to this process."
msgstr ""

#. type: item
#: internals.texi.orig:1550
#, no-wrap
msgid "encoding_buf"
msgstr ""

#. type: table
#: internals.texi.orig:1552
msgid "A working buffer for encoding."
msgstr ""

#. type: item
#: internals.texi.orig:1553
#, no-wrap
msgid "inherit_coding_system_flag"
msgstr ""

#. type: table
#: internals.texi.orig:1556
msgid "Flag to set @code{coding-system} of the process buffer from the coding system used to decode process output."
msgstr ""

#. type: item
#: internals.texi.orig:1557
#, no-wrap
msgid "type"
msgstr ""

#. type: table
#: internals.texi.orig:1560
msgid "Symbol indicating the type of process: @code{real}, @code{network}, @code{serial}."
msgstr ""

#. type: cindex
#: internals.texi.orig:1565
#, no-wrap
msgid "integer types (C programming language)"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1570
msgid "Here are some guidelines for use of integer types in the Emacs C source code.  These guidelines sometimes give competing advice; common sense is advised."
msgstr ""

#. type: itemize
#: internals.texi.orig:1576
msgid "Avoid arbitrary limits.  For example, avoid @code{int len = strlen (s);} unless the length of @code{s} is required for other reasons to fit in @code{int} range."
msgstr ""

#. type: itemize
#: internals.texi.orig:1583
msgid "Do not assume that signed integer arithmetic wraps around on overflow.  This is no longer true of Emacs porting targets: signed integer overflow has undefined behavior in practice, and can dump core or even cause earlier or later code to behave ``illogically''.  Unsigned overflow does wrap around reliably, modulo a power of two."
msgstr ""

#. type: itemize
#: internals.texi.orig:1591
msgid "Prefer signed types to unsigned, as code gets confusing when signed and unsigned types are combined.  Many other guidelines assume that types are signed; in the rarer cases where unsigned types are needed, similar advice may apply to the unsigned counterparts (e.g., @code{size_t} instead of @code{ptrdiff_t}, or @code{uintptr_t} instead of @code{intptr_t})."
msgstr ""

#. type: itemize
#: internals.texi.orig:1594
msgid "Prefer @code{int} for Emacs character codes, in the range 0 ..@: 0x3FFFFF."
msgstr ""

#. type: itemize
#: internals.texi.orig:1603
msgid "Prefer @code{ptrdiff_t} for sizes, i.e., for integers bounded by the maximum size of any individual C object or by the maximum number of elements in any C array.  This is part of Emacs's general preference for signed types.  Using @code{ptrdiff_t} limits objects to @code{PTRDIFF_MAX} bytes, but larger objects would cause trouble anyway since they would break pointer subtraction, so this does not impose an arbitrary limit."
msgstr ""

#. type: itemize
#: internals.texi.orig:1611
msgid "Prefer @code{intptr_t} for internal representations of pointers, or for integers bounded only by the number of objects that can exist at any given time or by the total number of bytes that can be allocated.  Currently Emacs sometimes uses other types when @code{intptr_t} would be better; fixing this is lower priority, as the code works as-is on Emacs's current porting targets."
msgstr ""

#. type: itemize
#: internals.texi.orig:1616
msgid "Prefer the Emacs-defined type @code{EMACS_INT} for representing values converted to or from Emacs Lisp fixnums, as fixnum arithmetic is based on @code{EMACS_INT}."
msgstr ""

#. type: itemize
#: internals.texi.orig:1623
msgid "When representing a system value (such as a file size or a count of seconds since the Epoch), prefer the corresponding system type (e.g., @code{off_t}, @code{time_t}).  Do not assume that a system type is signed, unless this assumption is known to be safe.  For example, although @code{off_t} is always signed, @code{time_t} need not be."
msgstr ""

#. type: itemize
#: internals.texi.orig:1628
msgid "Prefer the Emacs-defined type @code{printmax_t} for representing values that might be any signed integer that can be printed, using a @code{printf}-family function."
msgstr ""

#. type: itemize
#: internals.texi.orig:1632
msgid "Prefer @code{intmax_t} for representing values that might be any signed integer value."
msgstr ""

#. type: itemize
#: internals.texi.orig:1644
msgid "Prefer @code{bool}, @code{false} and @code{true} for booleans.  Using @code{bool} can make programs easier to read and a bit faster than using @code{int}.  Although it is also OK to use @code{int}, @code{0} and @code{1}, this older style is gradually being phased out.  When using @code{bool}, respect the limitations of the replacement implementation of @code{bool}, as documented in the source file @file{lib/stdbool.in.h}, so that Emacs remains portable to pre-C99 platforms.  In particular, boolean bitfields should be of type @code{bool_bf}, not @code{bool}, so that they work correctly even when compiling Objective C with standard GCC."
msgstr ""

#. type: itemize
#: internals.texi.orig:1650
msgid "In bitfields, prefer @code{unsigned int} or @code{signed int} to @code{int}, as @code{int} is less portable: it might be signed, and might not be.  Single-bit bit fields should be @code{unsigned int} or @code{bool_bf} so that their values are 0 or 1."
msgstr ""
