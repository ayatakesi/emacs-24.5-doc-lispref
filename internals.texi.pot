# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-10-05 03:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: appendix
#: internals.texi.orig:6 internals.texi.orig:7
#, no-wrap
msgid "GNU Emacs Internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:12
msgid ""
"This chapter describes how the runnable Emacs executable is dumped with the "
"preloaded Lisp libraries in it, how storage is allocated, and some internal "
"aspects of GNU Emacs that may be of interest to C programmers."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:24 internals.texi.orig:25
#, no-wrap
msgid "Building Emacs"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "How the dumped Emacs is made."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:160 internals.texi.orig:161
#, no-wrap
msgid "Pure Storage"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "Kludge to make preloaded Lisp functions shareable."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:220 internals.texi.orig:221
#, no-wrap
msgid "Garbage Collection"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "Reclaiming space for Lisp objects no longer used."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:527 internals.texi.orig:528
#, no-wrap
msgid "Memory Usage"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "Info about total size of Lisp objects made so far."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:579 internals.texi.orig:580
#, no-wrap
msgid "C Dialect"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "What C variant Emacs is written in."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:593 internals.texi.orig:594
#, no-wrap
msgid "Writing Emacs Primitives"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "Writing C code for Emacs."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:918 internals.texi.orig:919
#, no-wrap
msgid "Object Internals"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "Data formats of buffers, windows, processes."
msgstr ""

#. type: section
#: internals.texi.orig:22 internals.texi.orig:1563 internals.texi.orig:1564
#, no-wrap
msgid "C Integer Types"
msgstr ""

#. type: menuentry
#: internals.texi.orig:22
msgid "How C integer types are used inside Emacs."
msgstr ""

#. type: cindex
#: internals.texi.orig:26
#, no-wrap
msgid "building Emacs"
msgstr ""

#. type: pindex
#: internals.texi.orig:27
#, no-wrap
msgid "temacs"
msgstr ""

#. type: Plain text
#: internals.texi.orig:33
msgid ""
"This section explains the steps involved in building the Emacs executable.  "
"You don't have to know this material to build and install Emacs, since the "
"makefiles do all these things automatically.  This information is pertinent "
"to Emacs developers."
msgstr ""

#. type: Plain text
#: internals.texi.orig:38
msgid ""
"Compilation of the C source files in the @file{src} directory produces an "
"executable file called @file{temacs}, also called a @dfn{bare impure "
"Emacs}.  It contains the Emacs Lisp interpreter and I/O routines, but not "
"the editing commands."
msgstr ""

#. type: file{#1}
#: internals.texi.orig:39
#, no-wrap
msgid "loadup.el"
msgstr ""

#. type: Plain text
#: internals.texi.orig:45
msgid ""
"The command @w{@command{temacs -l loadup}} would run @file{temacs} and "
"direct it to load @file{loadup.el}.  The @code{loadup} library loads "
"additional Lisp libraries, which set up the normal Emacs editing "
"environment.  After this step, the Emacs executable is no longer @dfn{bare}."
msgstr ""

#. type: cindex
#: internals.texi.orig:46
#, no-wrap
msgid "dumping Emacs"
msgstr ""

#. type: Plain text
#: internals.texi.orig:56
msgid ""
"Because it takes some time to load the standard Lisp files, the "
"@file{temacs} executable usually isn't run directly by users.  Instead, as "
"one of the last steps of building Emacs, the command @samp{temacs -batch -l "
"loadup dump} is run.  The special @samp{dump} argument causes "
"@command{temacs} to dump out an executable program, called @file{emacs}, "
"which has all the standard Lisp files preloaded.  (The @samp{-batch} "
"argument prevents @file{temacs} from trying to initialize any of its data on "
"the terminal, so that the tables of terminal information are empty in the "
"dumped Emacs.)"
msgstr ""

#. type: cindex
#: internals.texi.orig:57
#, no-wrap
msgid "preloaded Lisp files"
msgstr ""

#. type: vindex
#: internals.texi.orig:58
#, no-wrap
msgid "preloaded-file-list"
msgstr ""

#. type: Plain text
#: internals.texi.orig:65
msgid ""
"The dumped @file{emacs} executable (also called a @dfn{pure} Emacs)  is the "
"one which is installed.  The variable @code{preloaded-file-list} stores a "
"list of the Lisp files preloaded into the dumped Emacs.  If you port Emacs "
"to a new operating system, and are not able to implement dumping, then Emacs "
"must load @file{loadup.el} each time it starts."
msgstr ""

#. type: file{#1}
#: internals.texi.orig:66
#, no-wrap
msgid "site-load.el"
msgstr ""

#. type: Plain text
#: internals.texi.orig:70
msgid ""
"You can specify additional files to preload by writing a library named "
"@file{site-load.el} that loads them.  You may need to rebuild Emacs with an "
"added definition"
msgstr ""

#. type: example
#: internals.texi.orig:73
#, no-wrap
msgid "#define SITELOAD_PURESIZE_EXTRA @var{n}\n"
msgstr ""

#. type: Plain text
#: internals.texi.orig:81
msgid ""
"to make @var{n} added bytes of pure space to hold the additional files; see "
"@file{src/puresize.h}.  (Try adding increments of 20000 until it is big "
"enough.)  However, the advantage of preloading additional files decreases as "
"machines get faster.  On modern machines, it is usually not advisable."
msgstr ""

#. type: Plain text
#: internals.texi.orig:87
msgid ""
"After @file{loadup.el} reads @file{site-load.el}, it finds the documentation "
"strings for primitive and preloaded functions (and variables) in the file "
"@file{etc/DOC} where they are stored, by calling @code{Snarf-documentation} "
"(@pxref{Definition of Snarf-documentation,, Accessing Documentation})."
msgstr ""

#. type: file{#1}
#: internals.texi.orig:88
#, no-wrap
msgid "site-init.el"
msgstr ""

#. type: cindex
#: internals.texi.orig:89
#, no-wrap
msgid "preloading additional functions and variables"
msgstr ""

#. type: Plain text
#: internals.texi.orig:93
msgid ""
"You can specify other Lisp expressions to execute just before dumping by "
"putting them in a library named @file{site-init.el}.  This file is executed "
"after the documentation strings are found."
msgstr ""

#. type: Plain text
#: internals.texi.orig:97
msgid ""
"If you want to preload function or variable definitions, there are three "
"ways you can do this and make their documentation strings accessible when "
"you subsequently run Emacs:"
msgstr ""

#. type: itemize
#: internals.texi.orig:102
msgid ""
"Arrange to scan these files when producing the @file{etc/DOC} file, and load "
"them with @file{site-load.el}."
msgstr ""

#. type: itemize
#: internals.texi.orig:106
msgid ""
"Load the files with @file{site-init.el}, then copy the files into the "
"installation directory for Lisp files when you install Emacs."
msgstr ""

#. type: itemize
#: internals.texi.orig:113
msgid ""
"Specify a @code{nil} value for @code{byte-compile-dynamic-docstrings} as a "
"local variable in each of these files, and load them with either "
"@file{site-load.el} or @file{site-init.el}.  (This method has the drawback "
"that the documentation strings take up space in Emacs all the time.)"
msgstr ""

#. type: cindex
#: internals.texi.orig:115
#, no-wrap
msgid "change @code{load-path} at configure time"
msgstr ""

#. type: cindex
#: internals.texi.orig:116
#, no-wrap
msgid "@option{--enable-locallisppath} option to @command{configure}"
msgstr ""

#. type: Plain text
#: internals.texi.orig:127
msgid ""
"It is not advisable to put anything in @file{site-load.el} or "
"@file{site-init.el} that would alter any of the features that users expect "
"in an ordinary unmodified Emacs.  If you feel you must override normal "
"features for your site, do it with @file{default.el}, so that users can "
"override your changes if they wish.  @xref{Startup Summary}.  Note that if "
"either @file{site-load.el} or @file{site-init.el} changes @code{load-path}, "
"the changes will be lost after dumping.  @xref{Library Search}.  To make a "
"permanent change to @code{load-path}, use the "
"@option{--enable-locallisppath} option of @command{configure}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:137
msgid ""
"In a package that can be preloaded, it is sometimes necessary (or useful) to "
"delay certain evaluations until Emacs subsequently starts up.  The vast "
"majority of such cases relate to the values of customizable variables.  For "
"example, @code{tutorial-directory} is a variable defined in "
"@file{startup.el}, which is preloaded.  The default value is set based on "
"@code{data-directory}.  The variable needs to access the value of "
"@code{data-directory} when Emacs starts, not when it is dumped, because the "
"Emacs executable has probably been installed in a different location since "
"it was dumped."
msgstr ""

#. type: defun
#: internals.texi.orig:138
#, no-wrap
msgid "custom-initialize-delay symbol value"
msgstr ""

#. type: defun
#: internals.texi.orig:144
msgid ""
"This function delays the initialization of @var{symbol} to the next Emacs "
"start.  You normally use this function by specifying it as the "
"@code{:initialize} property of a customizable variable.  (The argument "
"@var{value} is unused, and is provided only for compatibility with the form "
"Custom expects.)"
msgstr ""

#. type: Plain text
#: internals.texi.orig:149
msgid ""
"In the unlikely event that you need a more general functionality than "
"@code{custom-initialize-delay} provides, you can use @code{before-init-hook} "
"(@pxref{Startup Summary})."
msgstr ""

#. type: defun
#: internals.texi.orig:150
#, no-wrap
msgid "dump-emacs to-file from-file"
msgstr ""

#. type: cindex
#: internals.texi.orig:151
#, no-wrap
msgid "unexec"
msgstr ""

#. type: defun
#: internals.texi.orig:155
msgid ""
"This function dumps the current state of Emacs into an executable file "
"@var{to-file}.  It takes symbols from @var{from-file} (this is normally the "
"executable file @file{temacs})."
msgstr ""

#. type: defun
#: internals.texi.orig:158
msgid ""
"If you want to use this function in an Emacs that was already dumped, you "
"must run Emacs with @samp{-batch}."
msgstr ""

#. type: cindex
#: internals.texi.orig:162
#, no-wrap
msgid "pure storage"
msgstr ""

#. type: Plain text
#: internals.texi.orig:170
msgid ""
"Emacs Lisp uses two kinds of storage for user-created Lisp objects: "
"@dfn{normal storage} and @dfn{pure storage}.  Normal storage is where all "
"the new data created during an Emacs session are kept (@pxref{Garbage "
"Collection}).  Pure storage is used for certain data in the preloaded "
"standard Lisp files---data that should never change during actual use of "
"Emacs."
msgstr ""

#. type: Plain text
#: internals.texi.orig:186
msgid ""
"Pure storage is allocated only while @command{temacs} is loading the "
"standard preloaded Lisp libraries.  In the file @file{emacs}, it is marked "
"as read-only (on operating systems that permit this), so that the memory "
"space can be shared by all the Emacs jobs running on the machine at once.  "
"Pure storage is not expandable; a fixed amount is allocated when Emacs is "
"compiled, and if that is not sufficient for the preloaded libraries, "
"@file{temacs} allocates dynamic memory for the part that didn't fit.  The "
"resulting image will work, but garbage collection (@pxref{Garbage "
"Collection}) is disabled in this situation, causing a memory leak.  Such an "
"overflow normally won't happen unless you try to preload additional "
"libraries or add features to the standard ones.  Emacs will display a "
"warning about the overflow when it starts.  If this happens, you should "
"increase the compilation parameter @code{SYSTEM_PURESIZE_EXTRA} in the file "
"@file{src/puresize.h} and rebuild Emacs."
msgstr ""

#. type: defun
#: internals.texi.orig:187
#, no-wrap
msgid "purecopy object"
msgstr ""

#. type: defun
#: internals.texi.orig:194
msgid ""
"This function makes a copy in pure storage of @var{object}, and returns it.  "
"It copies a string by simply making a new string with the same characters, "
"but without text properties, in pure storage.  It recursively copies the "
"contents of vectors and cons cells.  It does not make copies of other "
"objects such as symbols, but just returns them unchanged.  It signals an "
"error if asked to copy markers."
msgstr ""

#. type: defun
#: internals.texi.orig:197
msgid ""
"This function is a no-op except while Emacs is being built and dumped; it is "
"usually called only in preloaded Lisp files."
msgstr ""

#. type: defvar
#: internals.texi.orig:199
#, no-wrap
msgid "pure-bytes-used"
msgstr ""

#. type: defvar
#: internals.texi.orig:204
msgid ""
"The value of this variable is the number of bytes of pure storage allocated "
"so far.  Typically, in a dumped Emacs, this number is very close to the "
"total amount of pure storage available---if it were not, we would "
"preallocate less."
msgstr ""

#. type: defvar
#: internals.texi.orig:206
#, no-wrap
msgid "purify-flag"
msgstr ""

#. type: defvar
#: internals.texi.orig:210
msgid ""
"This variable determines whether @code{defun} should make a copy of the "
"function definition in pure storage.  If it is non-@code{nil}, then the "
"function definition is copied into pure storage."
msgstr ""

#. type: defvar
#: internals.texi.orig:216
msgid ""
"This flag is @code{t} while loading all of the basic functions for building "
"Emacs initially (allowing those functions to be shareable and "
"non-collectible).  Dumping Emacs as an executable always writes @code{nil} "
"in this variable, regardless of the value it actually has before and after "
"dumping."
msgstr ""

#. type: defvar
#: internals.texi.orig:218
msgid "You should not change this flag in a running Emacs."
msgstr ""

#. type: cindex
#: internals.texi.orig:223
#, no-wrap
msgid "memory allocation"
msgstr ""

#. type: Plain text
#: internals.texi.orig:233
msgid ""
"When a program creates a list or the user defines a new function (such as by "
"loading a library), that data is placed in normal storage.  If normal "
"storage runs low, then Emacs asks the operating system to allocate more "
"memory.  Different types of Lisp objects, such as symbols, cons cells, small "
"vectors, markers, etc., are segregated in distinct blocks in memory.  (Large "
"vectors, long strings, buffers and certain other editing types, which are "
"fairly large, are allocated in individual blocks, one per object; small "
"strings are packed into blocks of 8k bytes, and small vectors are packed "
"into blocks of 4k bytes)."
msgstr ""

#. type: cindex
#: internals.texi.orig:234
#, no-wrap
msgid "vector-like objects, storage"
msgstr ""

#. type: cindex
#: internals.texi.orig:235
#, no-wrap
msgid "storage of vector-like Lisp objects"
msgstr ""

#. type: Plain text
#: internals.texi.orig:244
msgid ""
"Beyond the basic vector, a lot of objects like window, buffer, and frame are "
"managed as if they were vectors.  The corresponding C data structures "
"include the @code{struct vectorlike_header} field whose @code{size} member "
"contains the subtype enumerated by @code{enum pvec_type} and an information "
"about how many @code{Lisp_Object} fields this structure contains and what "
"the size of the rest data is.  This information is needed to calculate the "
"memory footprint of an object, and used by the vector allocation code while "
"iterating over the vector blocks."
msgstr ""

#. type: cindex
#: internals.texi.orig:245
#, no-wrap
msgid "garbage collection"
msgstr ""

#. type: Plain text
#: internals.texi.orig:255
msgid ""
"It is quite common to use some storage for a while, then release it by (for "
"example) killing a buffer or deleting the last pointer to an object.  Emacs "
"provides a @dfn{garbage collector} to reclaim this abandoned storage.  The "
"garbage collector operates by finding and marking all Lisp objects that are "
"still accessible to Lisp programs.  To begin with, it assumes all the "
"symbols, their values and associated function definitions, and any data "
"presently on the stack, are accessible.  Any objects that can be reached "
"indirectly through other accessible objects are also accessible."
msgstr ""

#. type: Plain text
#: internals.texi.orig:261
msgid ""
"When marking is finished, all objects still unmarked are garbage.  No matter "
"what the Lisp program or the user does, it is impossible to refer to them, "
"since there is no longer a way to reach them.  Their space might as well be "
"reused, since no one will miss them.  The second (``sweep'') phase of the "
"garbage collector arranges to reuse them."
msgstr ""

#. type: cindex
#: internals.texi.orig:264
#, no-wrap
msgid "free list"
msgstr ""

#. type: Plain text
#: internals.texi.orig:274
msgid ""
"The sweep phase puts unused cons cells onto a @dfn{free list} for future "
"allocation; likewise for symbols and markers.  It compacts the accessible "
"strings so they occupy fewer 8k blocks; then it frees the other 8k blocks.  "
"Unreachable vectors from vector blocks are coalesced to create largest "
"possible free areas; if a free area spans a complete 4k block, that block is "
"freed.  Otherwise, the free area is recorded in a free list array, where "
"each entry corresponds to a free list of areas of the same size.  Large "
"vectors, buffers, and other large objects are allocated and freed "
"individually."
msgstr ""

#. type: cindex
#: internals.texi.orig:275
#, no-wrap
msgid "CL note---allocate more storage"
msgstr ""

#. type: quotation
#: internals.texi.orig:282
msgid ""
"@b{Common Lisp note:} Unlike other Lisps, GNU Emacs Lisp does not call the "
"garbage collector when the free list is empty.  Instead, it simply requests "
"the operating system to allocate more storage, and processing continues "
"until @code{gc-cons-threshold} bytes have been used."
msgstr ""

#. type: quotation
#: internals.texi.orig:288
msgid ""
"This means that you can make sure that the garbage collector will not run "
"during a certain portion of a Lisp program by calling the garbage collector "
"explicitly just before it (provided that portion of the program does not use "
"so much space as to force a second garbage collection)."
msgstr ""

#. type: deffn
#: internals.texi.orig:290
#, no-wrap
msgid "Command garbage-collect"
msgstr ""

#. type: deffn
#: internals.texi.orig:295
msgid ""
"This command runs a garbage collection, and returns information on the "
"amount of space in use.  (Garbage collection can also occur spontaneously if "
"you use more than @code{gc-cons-threshold} bytes of Lisp data since the "
"previous garbage collection.)"
msgstr ""

#. type: deffn
#: internals.texi.orig:304
msgid ""
"@code{garbage-collect} returns a list with information on amount of space in "
"use, where each entry has the form @samp{(@var{name} @var{size} @var{used})} "
"or @samp{(@var{name} @var{size} @var{used} @var{free})}.  In the entry, "
"@var{name} is a symbol describing the kind of objects this entry represents, "
"@var{size} is the number of bytes used by each one, @var{used} is the number "
"of those objects that were found live in the heap, and optional @var{free} "
"is the number of those objects that are not live but that Emacs keeps around "
"for future allocations.  So an overall result is:"
msgstr ""

#. type: example
#: internals.texi.orig:317
#, no-wrap
msgid ""
"((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})\n"
" (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})\n"
" (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})\n"
" (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})\n"
" (@code{string-bytes} @var{byte-size} @var{used-bytes})\n"
" (@code{vectors} @var{vector-size} @var{used-vectors})\n"
" (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})\n"
" (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})\n"
" (@code{intervals} @var{interval-size} @var{used-intervals} "
"@var{free-intervals})\n"
" (@code{buffers} @var{buffer-size} @var{used-buffers})\n"
" (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))\n"
msgstr ""

#. type: deffn
#: internals.texi.orig:320
msgid "Here is an example:"
msgstr ""

#. type: example
#: internals.texi.orig:329
#, no-wrap
msgid ""
"(garbage-collect)\n"
"      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)\n"
"                 (miscs 40 34 56) (strings 32 2942 2607)\n"
"                 (string-bytes 1 78607) (vectors 16 7247)\n"
"                 (vector-slots 8 341609 29474) (floats 8 71 102)\n"
"                 (intervals 56 27 26) (buffers 944 8)\n"
"                 (heap 1024 11715 2678))\n"
msgstr ""

#. type: deffn
#: internals.texi.orig:334
msgid ""
"Below is a table explaining each element.  Note that last @code{heap} entry "
"is optional and present only if an underlying @code{malloc} implementation "
"provides @code{mallinfo} function."
msgstr ""

#. type: item
#: internals.texi.orig:336
#, no-wrap
msgid "cons-size"
msgstr ""

#. type: table
#: internals.texi.orig:338
msgid "Internal size of a cons cell, i.e., @code{sizeof (struct Lisp_Cons)}."
msgstr ""

#. type: item
#: internals.texi.orig:339
#, no-wrap
msgid "used-conses"
msgstr ""

#. type: table
#: internals.texi.orig:341
msgid "The number of cons cells in use."
msgstr ""

#. type: item
#: internals.texi.orig:342
#, no-wrap
msgid "free-conses"
msgstr ""

#. type: table
#: internals.texi.orig:345
msgid ""
"The number of cons cells for which space has been obtained from the "
"operating system, but that are not currently being used."
msgstr ""

#. type: item
#: internals.texi.orig:346
#, no-wrap
msgid "symbol-size"
msgstr ""

#. type: table
#: internals.texi.orig:348
msgid "Internal size of a symbol, i.e., @code{sizeof (struct Lisp_Symbol)}."
msgstr ""

#. type: item
#: internals.texi.orig:349
#, no-wrap
msgid "used-symbols"
msgstr ""

#. type: table
#: internals.texi.orig:351
msgid "The number of symbols in use."
msgstr ""

#. type: item
#: internals.texi.orig:352
#, no-wrap
msgid "free-symbols"
msgstr ""

#. type: table
#: internals.texi.orig:355
msgid ""
"The number of symbols for which space has been obtained from the operating "
"system, but that are not currently being used."
msgstr ""

#. type: item
#: internals.texi.orig:356
#, no-wrap
msgid "misc-size"
msgstr ""

#. type: table
#: internals.texi.orig:360
msgid ""
"Internal size of a miscellaneous entity, i.e., @code{sizeof (union "
"Lisp_Misc)}, which is a size of the largest type enumerated in @code{enum "
"Lisp_Misc_Type}."
msgstr ""

#. type: item
#: internals.texi.orig:361
#, no-wrap
msgid "used-miscs"
msgstr ""

#. type: table
#: internals.texi.orig:364
msgid ""
"The number of miscellaneous objects in use.  These include markers and "
"overlays, plus certain objects not visible to users."
msgstr ""

#. type: item
#: internals.texi.orig:365
#, no-wrap
msgid "free-miscs"
msgstr ""

#. type: table
#: internals.texi.orig:368
msgid ""
"The number of miscellaneous objects for which space has been obtained from "
"the operating system, but that are not currently being used."
msgstr ""

#. type: item
#: internals.texi.orig:369
#, no-wrap
msgid "string-size"
msgstr ""

#. type: table
#: internals.texi.orig:371
msgid "Internal size of a string header, i.e., @code{sizeof (struct Lisp_String)}."
msgstr ""

#. type: item
#: internals.texi.orig:372
#, no-wrap
msgid "used-strings"
msgstr ""

#. type: table
#: internals.texi.orig:374
msgid "The number of string headers in use."
msgstr ""

#. type: item
#: internals.texi.orig:375
#, no-wrap
msgid "free-strings"
msgstr ""

#. type: table
#: internals.texi.orig:378
msgid ""
"The number of string headers for which space has been obtained from the "
"operating system, but that are not currently being used."
msgstr ""

#. type: item
#: internals.texi.orig:379
#, no-wrap
msgid "byte-size"
msgstr ""

#. type: table
#: internals.texi.orig:381
msgid "This is used for convenience and equals to @code{sizeof (char)}."
msgstr ""

#. type: item
#: internals.texi.orig:382
#, no-wrap
msgid "used-bytes"
msgstr ""

#. type: table
#: internals.texi.orig:384
msgid "The total size of all string data in bytes."
msgstr ""

#. type: item
#: internals.texi.orig:385
#, no-wrap
msgid "vector-size"
msgstr ""

#. type: table
#: internals.texi.orig:387
msgid "Internal size of a vector header, i.e., @code{sizeof (struct Lisp_Vector)}."
msgstr ""

#. type: item
#: internals.texi.orig:388
#, no-wrap
msgid "used-vectors"
msgstr ""

#. type: table
#: internals.texi.orig:390
msgid "The number of vector headers allocated from the vector blocks."
msgstr ""

#. type: item
#: internals.texi.orig:391
#, no-wrap
msgid "slot-size"
msgstr ""

#. type: table
#: internals.texi.orig:393
msgid "Internal size of a vector slot, always equal to @code{sizeof (Lisp_Object)}."
msgstr ""

#. type: item
#: internals.texi.orig:394
#, no-wrap
msgid "used-slots"
msgstr ""

#. type: table
#: internals.texi.orig:396
msgid "The number of slots in all used vectors."
msgstr ""

#. type: item
#: internals.texi.orig:397
#, no-wrap
msgid "free-slots"
msgstr ""

#. type: table
#: internals.texi.orig:399
msgid "The number of free slots in all vector blocks."
msgstr ""

#. type: item
#: internals.texi.orig:400
#, no-wrap
msgid "float-size"
msgstr ""

#. type: table
#: internals.texi.orig:403
msgid ""
"Internal size of a float object, i.e., @code{sizeof (struct Lisp_Float)}.  "
"(Do not confuse it with the native platform @code{float} or @code{double}.)"
msgstr ""

#. type: item
#: internals.texi.orig:404
#, no-wrap
msgid "used-floats"
msgstr ""

#. type: table
#: internals.texi.orig:406
msgid "The number of floats in use."
msgstr ""

#. type: item
#: internals.texi.orig:407
#, no-wrap
msgid "free-floats"
msgstr ""

#. type: table
#: internals.texi.orig:410
msgid ""
"The number of floats for which space has been obtained from the operating "
"system, but that are not currently being used."
msgstr ""

#. type: item
#: internals.texi.orig:411
#, no-wrap
msgid "interval-size"
msgstr ""

#. type: table
#: internals.texi.orig:413
msgid "Internal size of an interval object, i.e., @code{sizeof (struct interval)}."
msgstr ""

#. type: item
#: internals.texi.orig:414
#, no-wrap
msgid "used-intervals"
msgstr ""

#. type: table
#: internals.texi.orig:416
msgid "The number of intervals in use."
msgstr ""

#. type: item
#: internals.texi.orig:417
#, no-wrap
msgid "free-intervals"
msgstr ""

#. type: table
#: internals.texi.orig:420
msgid ""
"The number of intervals for which space has been obtained from the operating "
"system, but that are not currently being used."
msgstr ""

#. type: item
#: internals.texi.orig:421
#, no-wrap
msgid "buffer-size"
msgstr ""

#. type: table
#: internals.texi.orig:424
msgid ""
"Internal size of a buffer, i.e., @code{sizeof (struct buffer)}.  (Do not "
"confuse with the value returned by @code{buffer-size} function.)"
msgstr ""

#. type: item
#: internals.texi.orig:425
#, no-wrap
msgid "used-buffers"
msgstr ""

#. type: table
#: internals.texi.orig:428
msgid ""
"The number of buffer objects in use.  This includes killed buffers invisible "
"to users, i.e., all buffers in @code{all_buffers} list."
msgstr ""

#. type: item
#: internals.texi.orig:429
#, no-wrap
msgid "unit-size"
msgstr ""

#. type: table
#: internals.texi.orig:431
msgid "The unit of heap space measurement, always equal to 1024 bytes."
msgstr ""

#. type: item
#: internals.texi.orig:432
#, no-wrap
msgid "total-size"
msgstr ""

#. type: table
#: internals.texi.orig:434
msgid "Total heap size, in @var{unit-size} units."
msgstr ""

#. type: item
#: internals.texi.orig:435
#, no-wrap
msgid "free-size"
msgstr ""

#. type: table
#: internals.texi.orig:437
msgid "Heap space which is not currently used, in @var{unit-size} units."
msgstr ""

#. type: deffn
#: internals.texi.orig:442
msgid ""
"If there was overflow in pure space (@pxref{Pure Storage}), "
"@code{garbage-collect} returns @code{nil}, because a real garbage collection "
"cannot be done."
msgstr ""

#. type: defopt
#: internals.texi.orig:444
#, no-wrap
msgid "garbage-collection-messages"
msgstr ""

#. type: defopt
#: internals.texi.orig:448
msgid ""
"If this variable is non-@code{nil}, Emacs displays a message at the "
"beginning and end of garbage collection.  The default value is @code{nil}."
msgstr ""

#. type: defvar
#: internals.texi.orig:450
#, no-wrap
msgid "post-gc-hook"
msgstr ""

#. type: defvar
#: internals.texi.orig:454
msgid ""
"This is a normal hook that is run at the end of garbage collection.  Garbage "
"collection is inhibited while the hook functions run, so be careful writing "
"them."
msgstr ""

#. type: defopt
#: internals.texi.orig:456
#, no-wrap
msgid "gc-cons-threshold"
msgstr ""

#. type: defopt
#: internals.texi.orig:465
msgid ""
"The value of this variable is the number of bytes of storage that must be "
"allocated for Lisp objects after one garbage collection in order to trigger "
"another garbage collection.  You can use the result returned by "
"@code{garbage-collect} to get an information about size of the particular "
"object type; space allocated to the contents of buffers does not count.  "
"Note that the subsequent garbage collection does not happen immediately when "
"the threshold is exhausted, but only the next time the Lisp interpreter is "
"called."
msgstr ""

#. type: defopt
#: internals.texi.orig:473
msgid ""
"The initial threshold value is @code{GC_DEFAULT_THRESHOLD}, defined in "
"@file{alloc.c}.  Since it's defined in @code{word_size} units, the value is "
"400,000 for the default 32-bit configuration and 800,000 for the 64-bit "
"one.  If you specify a larger value, garbage collection will happen less "
"often.  This reduces the amount of time spent garbage collecting, but "
"increases total memory use.  You may want to do this when running a program "
"that creates lots of Lisp data."
msgstr ""

#. type: defopt
#: internals.texi.orig:478
msgid ""
"You can make collections more frequent by specifying a smaller value, down "
"to 1/10th of @code{GC_DEFAULT_THRESHOLD}.  A value less than this minimum "
"will remain in effect only until the subsequent garbage collection, at which "
"time @code{garbage-collect} will set the threshold back to the minimum."
msgstr ""

#. type: defopt
#: internals.texi.orig:480
#, no-wrap
msgid "gc-cons-percentage"
msgstr ""

#. type: defopt
#: internals.texi.orig:485
msgid ""
"The value of this variable specifies the amount of consing before a garbage "
"collection occurs, as a fraction of the current heap size.  This criterion "
"and @code{gc-cons-threshold} apply in parallel, and garbage collection "
"occurs only when both criteria are satisfied."
msgstr ""

#. type: defopt
#: internals.texi.orig:489
msgid ""
"As the heap size increases, the time to perform a garbage collection "
"increases.  Thus, it can be desirable to do them less frequently in "
"proportion."
msgstr ""

#. type: Plain text
#: internals.texi.orig:495
msgid ""
"The value returned by @code{garbage-collect} describes the amount of memory "
"used by Lisp data, broken down by data type.  By contrast, the function "
"@code{memory-limit} provides information on the total amount of memory Emacs "
"is currently using."
msgstr ""

#. type: defun
#: internals.texi.orig:496
#, no-wrap
msgid "memory-limit"
msgstr ""

#. type: defun
#: internals.texi.orig:500
msgid ""
"This function returns the address of the last byte Emacs has allocated, "
"divided by 1024.  We divide the value by 1024 to make sure it fits in a Lisp "
"integer."
msgstr ""

#. type: defun
#: internals.texi.orig:503
msgid ""
"You can use this to get a general idea of how your actions affect the memory "
"usage."
msgstr ""

#. type: defvar
#: internals.texi.orig:505
#, no-wrap
msgid "memory-full"
msgstr ""

#. type: defvar
#: internals.texi.orig:508
msgid ""
"This variable is @code{t} if Emacs is nearly out of memory for Lisp objects, "
"and @code{nil} otherwise."
msgstr ""

#. type: defun
#: internals.texi.orig:510
#, no-wrap
msgid "memory-use-counts"
msgstr ""

#. type: defun
#: internals.texi.orig:514
msgid ""
"This returns a list of numbers that count the number of objects created in "
"this Emacs session.  Each of these counters increments for a certain kind of "
"object.  See the documentation string for details."
msgstr ""

#. type: defvar
#: internals.texi.orig:516
#, no-wrap
msgid "gcs-done"
msgstr ""

#. type: defvar
#: internals.texi.orig:519
msgid ""
"This variable contains the total number of garbage collections done so far "
"in this Emacs session."
msgstr ""

#. type: defvar
#: internals.texi.orig:521
#, no-wrap
msgid "gc-elapsed"
msgstr ""

#. type: defvar
#: internals.texi.orig:525
msgid ""
"This variable contains the total number of seconds of elapsed time during "
"garbage collection so far in this Emacs session, as a floating-point number."
msgstr ""

#. type: cindex
#: internals.texi.orig:529
#, no-wrap
msgid "memory usage"
msgstr ""

#. type: Plain text
#: internals.texi.orig:537
msgid ""
"These functions and variables give information about the total amount of "
"memory allocation that Emacs has done, broken down by data type.  Note the "
"difference between these and the values returned by @code{garbage-collect}; "
"those count objects that currently exist, but these count the number or size "
"of all allocations, including those for objects that have since been freed."
msgstr ""

#. type: defvar
#: internals.texi.orig:538
#, no-wrap
msgid "cons-cells-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:541
msgid ""
"The total number of cons cells that have been allocated so far in this Emacs "
"session."
msgstr ""

#. type: defvar
#: internals.texi.orig:543
#, no-wrap
msgid "floats-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:546
msgid ""
"The total number of floats that have been allocated so far in this Emacs "
"session."
msgstr ""

#. type: defvar
#: internals.texi.orig:548
#, no-wrap
msgid "vector-cells-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:551
msgid ""
"The total number of vector cells that have been allocated so far in this "
"Emacs session."
msgstr ""

#. type: defvar
#: internals.texi.orig:553
#, no-wrap
msgid "symbols-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:556
msgid ""
"The total number of symbols that have been allocated so far in this Emacs "
"session."
msgstr ""

#. type: defvar
#: internals.texi.orig:558
#, no-wrap
msgid "string-chars-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:561
msgid ""
"The total number of string characters that have been allocated so far in "
"this session."
msgstr ""

#. type: defvar
#: internals.texi.orig:563
#, no-wrap
msgid "misc-objects-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:567
msgid ""
"The total number of miscellaneous objects that have been allocated so far in "
"this session.  These include markers and overlays, plus certain objects not "
"visible to users."
msgstr ""

#. type: defvar
#: internals.texi.orig:569
#, no-wrap
msgid "intervals-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:572
msgid ""
"The total number of intervals that have been allocated so far in this Emacs "
"session."
msgstr ""

#. type: defvar
#: internals.texi.orig:574
#, no-wrap
msgid "strings-consed"
msgstr ""

#. type: defvar
#: internals.texi.orig:577
msgid ""
"The total number of strings that have been allocated so far in this Emacs "
"session."
msgstr ""

#. type: cindex
#: internals.texi.orig:581
#, no-wrap
msgid "C programming language"
msgstr ""

#. type: Plain text
#: internals.texi.orig:589
msgid ""
"The C part of Emacs is portable to C89: C99-specific features such as "
"@samp{<stdbool.h>} and @samp{inline} are not used without a check, typically "
"at configuration time, and the Emacs build procedure provides a substitute "
"implementation if necessary.  Some C99 features, such as declarations after "
"statements, are too difficult to provide substitutes for, so they are "
"avoided entirely."
msgstr ""

#. type: Plain text
#: internals.texi.orig:592
msgid ""
"At some point in the not-too-distant future the base C dialect will change "
"from C89 to C99, and eventually it will no doubt change to C11."
msgstr ""

#. type: cindex
#: internals.texi.orig:595
#, no-wrap
msgid "primitive function internals"
msgstr ""

#. type: cindex
#: internals.texi.orig:596
#, no-wrap
msgid "writing Emacs primitives"
msgstr ""

#. type: Plain text
#: internals.texi.orig:602
msgid ""
"Lisp primitives are Lisp functions implemented in C@.  The details of "
"interfacing the C function so that Lisp can call it are handled by a few C "
"macros.  The only way to really understand how to write new C code is to "
"read the source, but we can explain some things here."
msgstr ""

#. type: Plain text
#: internals.texi.orig:606
msgid ""
"An example of a special form is the definition of @code{or}, from "
"@file{eval.c}.  (An ordinary function would have the same general "
"appearance.)"
msgstr ""

#. type: cindex
#: internals.texi.orig:607
#, no-wrap
msgid "garbage collection protection"
msgstr ""

#. type: group
#: internals.texi.orig:615
#, no-wrap
msgid ""
"DEFUN (\"or\", For, Sor, 0, UNEVALLED, 0,\n"
"  doc: /* Eval args until one of them yields non-nil, then return\n"
"that value.\n"
"The remaining args are not evalled at all.\n"
"If all args return nil, return nil.\n"
msgstr ""

#. type: group
#: internals.texi.orig:622
#, no-wrap
msgid ""
"usage: (or CONDITIONS ...)  */)\n"
"  (Lisp_Object args)\n"
"@{\n"
"  register Lisp_Object val = Qnil;\n"
"  struct gcpro gcpro1;\n"
msgstr ""

#. type: group
#: internals.texi.orig:626
#, no-wrap
msgid "  GCPRO1 (args);\n"
msgstr ""

#. type: group
#: internals.texi.orig:636
#, no-wrap
msgid ""
"  while (CONSP (args))\n"
"    @{\n"
"      val = eval_sub (XCAR (args));\n"
"      if (!NILP (val))\n"
"        break;\n"
"      args = XCDR (args);\n"
"    @}\n"
msgstr ""

#. type: group
#: internals.texi.orig:642
#, no-wrap
msgid ""
"  UNGCPRO;\n"
"  return val;\n"
"@}\n"
msgstr ""

#. type: cindex
#: internals.texi.orig:645
#, no-wrap
msgid "@code{DEFUN}, C macro to define Lisp primitives"
msgstr ""

#. type: Plain text
#: internals.texi.orig:648
msgid ""
"Let's start with a precise explanation of the arguments to the @code{DEFUN} "
"macro.  Here is a template for them:"
msgstr ""

#. type: example
#: internals.texi.orig:651
#, no-wrap
msgid ""
"DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, "
"@var{interactive}, @var{doc})\n"
msgstr ""

#. type: item
#: internals.texi.orig:654
#, no-wrap
msgid "lname"
msgstr ""

#. type: table
#: internals.texi.orig:657
msgid ""
"This is the name of the Lisp symbol to define as the function name; in the "
"example above, it is @code{or}."
msgstr ""

#. type: item
#: internals.texi.orig:658
#, no-wrap
msgid "fname"
msgstr ""

#. type: table
#: internals.texi.orig:664
msgid ""
"This is the C function name for this function.  This is the name that is "
"used in C code for calling the function.  The name is, by convention, "
"@samp{F} prepended to the Lisp name, with all dashes (@samp{-}) in the Lisp "
"name changed to underscores.  Thus, to call this function from C code, call "
"@code{For}."
msgstr ""

#. type: item
#: internals.texi.orig:665
#, no-wrap
msgid "sname"
msgstr ""

#. type: table
#: internals.texi.orig:672
msgid ""
"This is a C variable name to use for a structure that holds the data for the "
"subr object that represents the function in Lisp.  This structure conveys "
"the Lisp symbol name to the initialization routine that will create the "
"symbol and store the subr object as its definition.  By convention, this "
"name is always @var{fname} with @samp{F} replaced with @samp{S}."
msgstr ""

#. type: item
#: internals.texi.orig:673
#, no-wrap
msgid "min"
msgstr ""

#. type: table
#: internals.texi.orig:676
msgid ""
"This is the minimum number of arguments that the function requires.  The "
"function @code{or} allows a minimum of zero arguments."
msgstr ""

#. type: item
#: internals.texi.orig:677
#, no-wrap
msgid "max"
msgstr ""

#. type: table
#: internals.texi.orig:685
msgid ""
"This is the maximum number of arguments that the function accepts, if there "
"is a fixed maximum.  Alternatively, it can be @code{UNEVALLED}, indicating a "
"special form that receives unevaluated arguments, or @code{MANY}, indicating "
"an unlimited number of evaluated arguments (the equivalent of "
"@code{&rest}).  Both @code{UNEVALLED} and @code{MANY} are macros.  If "
"@var{max} is a number, it must be more than @var{min} but less than 8."
msgstr ""

#. type: cindex
#: internals.texi.orig:686
#, no-wrap
msgid "interactive specification in primitives"
msgstr ""

#. type: item
#: internals.texi.orig:687
#, no-wrap
msgid "interactive"
msgstr ""

#. type: table
#: internals.texi.orig:695
msgid ""
"This is an interactive specification, a string such as might be used as the "
"argument of @code{interactive} in a Lisp function.  In the case of "
"@code{or}, it is 0 (a null pointer), indicating that @code{or} cannot be "
"called interactively.  A value of @code{\"\"} indicates a function that "
"should receive no arguments when called interactively.  If the value begins "
"with a @samp{\"(}, the string is evaluated as a Lisp form.  For example:"
msgstr ""

#. type: group
#: internals.texi.orig:703
#, no-wrap
msgid ""
"DEFUN (\"foo\", Ffoo, Sfoo, 0, UNEVALLED,\n"
"       \"(list (read-char-by-name \\\"Insert character: \\\")\\\n"
"              (prefix-numeric-value current-prefix-arg)\\\n"
"              t))\",\n"
"  doc: /* @dots{} /*)\n"
msgstr ""

#. type: item
#: internals.texi.orig:706
#, no-wrap
msgid "doc"
msgstr ""

#. type: table
#: internals.texi.orig:713
msgid ""
"This is the documentation string.  It uses C comment syntax rather than C "
"string syntax because comment syntax requires nothing special to include "
"multiple lines.  The @samp{doc:} identifies the comment that follows as the "
"documentation string.  The @samp{/*} and @samp{*/} delimiters that begin and "
"end the comment are not part of the documentation string."
msgstr ""

#. type: table
#: internals.texi.orig:720
msgid ""
"If the last line of the documentation string begins with the keyword "
"@samp{usage:}, the rest of the line is treated as the argument list for "
"documentation purposes.  This way, you can use different argument names in "
"the documentation string from the ones used in the C code.  @samp{usage:} is "
"required if the function has an unlimited number of arguments."
msgstr ""

#. type: table
#: internals.texi.orig:724
msgid ""
"All the usual rules for documentation strings in Lisp code "
"(@pxref{Documentation Tips}) apply to C code documentation strings too."
msgstr ""

#. type: Plain text
#: internals.texi.orig:741
msgid ""
"After the call to the @code{DEFUN} macro, you must write the argument list "
"for the C function, including the types for the arguments.  If the primitive "
"accepts a fixed maximum number of Lisp arguments, there must be one C "
"argument for each Lisp argument, and each argument must be of type "
"@code{Lisp_Object}.  (Various macros and functions for creating values of "
"type @code{Lisp_Object} are declared in the file @file{lisp.h}.)  If the "
"primitive has no upper limit on the number of Lisp arguments, it must have "
"exactly two C arguments: the first is the number of Lisp arguments, and the "
"second is the address of a block containing their values.  These have types "
"@code{int} and @w{@code{Lisp_Object *}} respectively.  Since "
"@code{Lisp_Object} can hold any Lisp object of any data type, you can "
"determine the actual data type only at run time; so if you want a primitive "
"to accept only a certain type of argument, you must check the type "
"explicitly using a suitable predicate (@pxref{Type Predicates})."
msgstr ""

#. type: cindex
#: internals.texi.orig:741
#, no-wrap
msgid "type checking internals"
msgstr ""

#. type: cindex
#: internals.texi.orig:743
#, no-wrap
msgid "@code{GCPRO} and @code{UNGCPRO}"
msgstr ""

#. type: cindex
#: internals.texi.orig:744
#, no-wrap
msgid "protect C variables from garbage collection"
msgstr ""

#. type: Plain text
#: internals.texi.orig:754
msgid ""
"Within the function @code{For} itself, note the use of the macros "
"@code{GCPRO1} and @code{UNGCPRO}.  These macros are defined for the sake of "
"the few platforms which do not use Emacs' default stack-marking garbage "
"collector.  The @code{GCPRO1} macro ``protects'' a variable from garbage "
"collection, explicitly informing the garbage collector that that variable "
"and all its contents must be as accessible.  GC protection is necessary in "
"any function which can perform Lisp evaluation by calling @code{eval_sub} or "
"@code{Feval} as a subroutine, either directly or indirectly."
msgstr ""

#. type: Plain text
#: internals.texi.orig:761
msgid ""
"It suffices to ensure that at least one pointer to each object is "
"GC-protected.  Thus, a particular local variable can do without protection "
"if it is certain that the object it points to will be preserved by some "
"other pointer (such as another local variable that has a @code{GCPRO}).  "
"Otherwise, the local variable needs a @code{GCPRO}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:769
msgid ""
"The macro @code{GCPRO1} protects just one local variable.  If you want to "
"protect two variables, use @code{GCPRO2} instead; repeating @code{GCPRO1} "
"will not work.  Macros @code{GCPRO3}, @code{GCPRO4}, @code{GCPRO5}, and "
"@code{GCPRO6} also exist.  All these macros implicitly use local variables "
"such as @code{gcpro1}; you must declare these explicitly, with type "
"@code{struct gcpro}.  Thus, if you use @code{GCPRO2}, you must declare "
"@code{gcpro1} and @code{gcpro2}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:773
msgid ""
"@code{UNGCPRO} cancels the protection of the variables that are protected in "
"the current function.  It is necessary to do this explicitly."
msgstr ""

#. type: Plain text
#: internals.texi.orig:779
msgid ""
"You must not use C initializers for static or global variables unless the "
"variables are never written once Emacs is dumped.  These variables with "
"initializers are allocated in an area of memory that becomes read-only (on "
"certain operating systems) as a result of dumping Emacs.  @xref{Pure "
"Storage}."
msgstr ""

#. type: cindex
#: internals.texi.orig:780
#, no-wrap
msgid "@code{defsubr}, Lisp symbol for a primitive"
msgstr ""

#. type: Plain text
#: internals.texi.orig:785
msgid ""
"Defining the C function is not enough to make a Lisp primitive available; "
"you must also create the Lisp symbol for the primitive and store a suitable "
"subr object in its function cell.  The code looks like this:"
msgstr ""

#. type: example
#: internals.texi.orig:788
#, no-wrap
msgid "defsubr (&@var{sname});\n"
msgstr ""

#. type: Plain text
#: internals.texi.orig:792
msgid "Here @var{sname} is the name you used as the third argument to @code{DEFUN}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:801
msgid ""
"If you add a new primitive to a file that already has Lisp primitives "
"defined in it, find the function (near the end of the file) named "
"@code{syms_of_@var{something}}, and add the call to @code{defsubr} there.  "
"If the file doesn't have this function, or if you create a new file, add to "
"it a @code{syms_of_@var{filename}} (e.g., @code{syms_of_myfile}).  Then find "
"the spot in @file{emacs.c} where all of these functions are called, and add "
"a call to @code{syms_of_@var{filename}} there."
msgstr ""

#. type: anchor{#1}
#: internals.texi.orig:803
msgid "Defining Lisp variables in C"
msgstr ""

#. type: vindex
#: internals.texi.orig:803
#, no-wrap
msgid "byte-boolean-vars"
msgstr ""

#. type: cindex
#: internals.texi.orig:804
#, no-wrap
msgid "defining Lisp variables in C"
msgstr ""

#. type: cindex
#: internals.texi.orig:805
#, no-wrap
msgid "@code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}"
msgstr ""

#. type: Plain text
#: internals.texi.orig:815
msgid ""
"The function @code{syms_of_@var{filename}} is also the place to define any C "
"variables that are to be visible as Lisp variables.  @code{DEFVAR_LISP} "
"makes a C variable of type @code{Lisp_Object} visible in Lisp.  "
"@code{DEFVAR_INT} makes a C variable of type @code{int} visible in Lisp with "
"a value that is always an integer.  @code{DEFVAR_BOOL} makes a C variable of "
"type @code{int} visible in Lisp with a value that is either @code{t} or "
"@code{nil}.  Note that variables defined with @code{DEFVAR_BOOL} are "
"automatically added to the list @code{byte-boolean-vars} used by the byte "
"compiler."
msgstr ""

#. type: cindex
#: internals.texi.orig:816
#, no-wrap
msgid "defining customization variables in C"
msgstr ""

#. type: Plain text
#: internals.texi.orig:820
msgid ""
"If you want to make a Lisp variables that is defined in C behave like one "
"declared with @code{defcustom}, add an appropriate entry to "
"@file{cus-start.el}."
msgstr ""

#. type: cindex
#: internals.texi.orig:821
#, no-wrap
msgid "@code{staticpro}, protection from GC"
msgstr ""

#. type: Plain text
#: internals.texi.orig:825
msgid ""
"If you define a file-scope C variable of type @code{Lisp_Object}, you must "
"protect it from garbage-collection by calling @code{staticpro} in "
"@code{syms_of_@var{filename}}, like this:"
msgstr ""

#. type: example
#: internals.texi.orig:828
#, no-wrap
msgid "staticpro (&@var{variable});\n"
msgstr ""

#. type: Plain text
#: internals.texi.orig:833
msgid ""
"Here is another example function, with more complicated arguments.  This "
"comes from the code in @file{window.c}, and it demonstrates the use of "
"macros and functions to manipulate Lisp objects."
msgstr ""

#. type: group
#: internals.texi.orig:840
#, no-wrap
msgid ""
"DEFUN (\"coordinates-in-window-p\", Fcoordinates_in_window_p,\n"
"  Scoordinates_in_window_p, 2, 2, 0,\n"
"  doc: /* Return non-nil if COORDINATES are in WINDOW.\n"
"  ...\n"
msgstr ""

#. type: group
#: internals.texi.orig:849
#, no-wrap
msgid ""
"  or `right-margin' is returned.  */)\n"
"  (register Lisp_Object coordinates, Lisp_Object window)\n"
"@{\n"
"  struct window *w;\n"
"  struct frame *f;\n"
"  int x, y;\n"
"  Lisp_Object lx, ly;\n"
msgstr ""

#. type: group
#: internals.texi.orig:862
#, no-wrap
msgid ""
"  CHECK_LIVE_WINDOW (window);\n"
"  w = XWINDOW (window);\n"
"  f = XFRAME (w->frame);\n"
"  CHECK_CONS (coordinates);\n"
"  lx = Fcar (coordinates);\n"
"  ly = Fcdr (coordinates);\n"
"  CHECK_NUMBER_OR_FLOAT (lx);\n"
"  CHECK_NUMBER_OR_FLOAT (ly);\n"
"  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
"  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH(f);\n"
msgstr ""

#. type: group
#: internals.texi.orig:869
#, no-wrap
msgid ""
"  switch (coordinates_in_window (w, x, y))\n"
"    @{\n"
"    case ON_NOTHING:            /* NOT in window at all. */\n"
"      return Qnil;\n"
msgstr ""

#. type: smallexample
#: internals.texi.orig:872 internals.texi.orig:879
#, no-wrap
msgid ""
"    ...\n"
"\n"
msgstr ""

#. type: group
#: internals.texi.orig:876
#, no-wrap
msgid ""
"    case ON_MODE_LINE:          /* In mode line of window. */\n"
"      return Qmode_line;\n"
msgstr ""

#. type: group
#: internals.texi.orig:884
#, no-wrap
msgid ""
"    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */\n"
"      /* Historically we are supposed to return nil in this case.  */\n"
"      return Qnil;\n"
msgstr ""

#. type: group
#: internals.texi.orig:891
#, no-wrap
msgid ""
"    default:\n"
"      abort ();\n"
"    @}\n"
"@}\n"
msgstr ""

#. type: Plain text
#: internals.texi.orig:904
msgid ""
"Note that C code cannot call functions by name unless they are defined in "
"C@.  The way to call a function written in Lisp is to use @code{Ffuncall}, "
"which embodies the Lisp function @code{funcall}.  Since the Lisp function "
"@code{funcall} accepts an unlimited number of arguments, in C it takes two: "
"the number of Lisp-level arguments, and a one-dimensional array containing "
"their values.  The first Lisp-level argument is the Lisp function to call, "
"and the rest are the arguments to pass to it.  Since @code{Ffuncall} can "
"call the evaluator, you must protect pointers from garbage collection around "
"the call to @code{Ffuncall}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:908
msgid ""
"The C functions @code{call0}, @code{call1}, @code{call2}, and so on, provide "
"handy ways to call a Lisp function conveniently with a fixed number of "
"arguments.  They work by calling @code{Ffuncall}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:912
msgid ""
"@file{eval.c} is a very good file to look through for examples; "
"@file{lisp.h} contains the definitions for some important macros and "
"functions."
msgstr ""

#. type: Plain text
#: internals.texi.orig:917
msgid ""
"If you define a function which is side-effect free, update the code in "
"@file{byte-opt.el} that binds @code{side-effect-free-fns} and "
"@code{side-effect-and-error-free-fns} so that the compiler optimizer knows "
"about it."
msgstr ""

#. type: cindex
#: internals.texi.orig:920
#, no-wrap
msgid "object internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:930
msgid ""
"Emacs Lisp provides a rich set of the data types.  Some of them, like cons "
"cells, integers and strings, are common to nearly all Lisp dialects.  Some "
"others, like markers and buffers, are quite special and needed to provide "
"the basic support to write editor commands in Lisp.  To implement such a "
"variety of object types and provide an efficient way to pass objects between "
"the subsystems of an interpreter, there is a set of C data structures and a "
"special type to represent the pointers to all of them, which is known as "
"@dfn{tagged pointer}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:947
msgid ""
"In C, the tagged pointer is an object of type @code{Lisp_Object}.  Any "
"initialized variable of such a type always holds the value of one of the "
"following basic data types: integer, symbol, string, cons cell, float, "
"vectorlike or miscellaneous object.  Each of these data types has the "
"corresponding tag value.  All tags are enumerated by @code{enum Lisp_Type} "
"and placed into a 3-bit bitfield of the @code{Lisp_Object}.  The rest of the "
"bits is the value itself.  Integers are immediate, i.e., directly "
"represented by those @dfn{value bits}, and all other objects are represented "
"by the C pointers to a corresponding object allocated from the heap.  Width "
"of the @code{Lisp_Object} is platform- and configuration-dependent: usually "
"it's equal to the width of an underlying platform pointer (i.e., 32-bit on a "
"32-bit machine and 64-bit on a 64-bit one), but also there is a special "
"configuration where @code{Lisp_Object} is 64-bit but all pointers are "
"32-bit.  The latter trick was designed to overcome the limited range of "
"values for Lisp integers on a 32-bit system by using 64-bit @code{long long} "
"type for @code{Lisp_Object}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:950
msgid ""
"The following C data structures are defined in @file{lisp.h} to represent "
"the basic data types beyond integers:"
msgstr ""

#. type: item
#: internals.texi.orig:952
#, no-wrap
msgid "struct Lisp_Cons"
msgstr ""

#. type: table
#: internals.texi.orig:954
msgid "Cons cell, an object used to construct lists."
msgstr ""

#. type: item
#: internals.texi.orig:955
#, no-wrap
msgid "struct Lisp_String"
msgstr ""

#. type: table
#: internals.texi.orig:957
msgid "String, the basic object to represent a sequence of characters."
msgstr ""

#. type: item
#: internals.texi.orig:958
#, no-wrap
msgid "struct Lisp_Vector"
msgstr ""

#. type: table
#: internals.texi.orig:960
msgid "Array, a fixed-size set of Lisp objects which may be accessed by an index."
msgstr ""

#. type: item
#: internals.texi.orig:961
#, no-wrap
msgid "struct Lisp_Symbol"
msgstr ""

#. type: table
#: internals.texi.orig:963
msgid "Symbol, the unique-named entity commonly used as an identifier."
msgstr ""

#. type: item
#: internals.texi.orig:964
#, no-wrap
msgid "struct Lisp_Float"
msgstr ""

#. type: table
#: internals.texi.orig:966
msgid "Floating-point value."
msgstr ""

#. type: item
#: internals.texi.orig:967
#, no-wrap
msgid "union Lisp_Misc"
msgstr ""

#. type: table
#: internals.texi.orig:969
msgid "Miscellaneous kinds of objects which don't fit into any of the above."
msgstr ""

#. type: Plain text
#: internals.texi.orig:978
msgid ""
"These types are the first-class citizens of an internal type system.  Since "
"the tag space is limited, all other types are the subtypes of either "
"@code{Lisp_Vectorlike} or @code{Lisp_Misc}.  Vector subtypes are enumerated "
"by @code{enum pvec_type}, and nearly all complex objects like windows, "
"buffers, frames, and processes fall into this category.  The rest of special "
"types, including markers and overlays, are enumerated by @code{enum "
"Lisp_Misc_Type} and form the set of subtypes of @code{Lisp_Misc}."
msgstr ""

#. type: Plain text
#: internals.texi.orig:986
msgid ""
"Below there is a description of a few subtypes of @code{Lisp_Vectorlike}.  "
"Buffer object represents the text to display and edit.  Window is the part "
"of display structure which shows the buffer or used as a container to "
"recursively place other windows on the same frame.  (Do not confuse Emacs "
"Lisp window object with the window as an entity managed by the user "
"interface system like X; in Emacs terminology, the latter is called frame.)  "
"Finally, process object is used to manage the subprocesses."
msgstr ""

#. type: subsection
#: internals.texi.orig:991 internals.texi.orig:993 internals.texi.orig:994
#, no-wrap
msgid "Buffer Internals"
msgstr ""

#. type: menuentry
#: internals.texi.orig:991
msgid "Components of a buffer structure."
msgstr ""

#. type: subsection
#: internals.texi.orig:991 internals.texi.orig:1261 internals.texi.orig:1262
#, no-wrap
msgid "Window Internals"
msgstr ""

#. type: menuentry
#: internals.texi.orig:991
msgid "Components of a window structure."
msgstr ""

#. type: subsection
#: internals.texi.orig:991 internals.texi.orig:1468 internals.texi.orig:1469
#, no-wrap
msgid "Process Internals"
msgstr ""

#. type: menuentry
#: internals.texi.orig:991
msgid "Components of a process structure."
msgstr ""

#. type: cindex
#: internals.texi.orig:995
#, no-wrap
msgid "internals, of buffer"
msgstr ""

#. type: cindex
#: internals.texi.orig:996
#, no-wrap
msgid "buffer internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1003
msgid ""
"Two structures (see @file{buffer.h}) are used to represent buffers in C@.  "
"The @code{buffer_text} structure contains fields describing the text of a "
"buffer; the @code{buffer} structure holds other fields.  In the case of "
"indirect buffers, two or more @code{buffer} structures reference the same "
"@code{buffer_text} structure."
msgstr ""

#. type: Plain text
#: internals.texi.orig:1005
msgid "Here are some of the fields in @code{struct buffer_text}:"
msgstr ""

#. type: item
#: internals.texi.orig:1007
#, no-wrap
msgid "beg"
msgstr ""

#. type: table
#: internals.texi.orig:1009
msgid "The address of the buffer contents."
msgstr ""

#. type: item
#: internals.texi.orig:1010
#, no-wrap
msgid "gpt"
msgstr ""

#. type: itemx
#: internals.texi.orig:1011
#, no-wrap
msgid "gpt_byte"
msgstr ""

#. type: table
#: internals.texi.orig:1014
msgid "The character and byte positions of the buffer gap.  @xref{Buffer Gap}."
msgstr ""

#. type: item
#: internals.texi.orig:1015
#, no-wrap
msgid "z"
msgstr ""

#. type: itemx
#: internals.texi.orig:1016
#, no-wrap
msgid "z_byte"
msgstr ""

#. type: table
#: internals.texi.orig:1018
msgid "The character and byte positions of the end of the buffer text."
msgstr ""

#. type: item
#: internals.texi.orig:1019
#, no-wrap
msgid "gap_size"
msgstr ""

#. type: table
#: internals.texi.orig:1021
msgid "The size of buffer's gap.  @xref{Buffer Gap}."
msgstr ""

#. type: item
#: internals.texi.orig:1022
#, no-wrap
msgid "modiff"
msgstr ""

#. type: itemx
#: internals.texi.orig:1023
#, no-wrap
msgid "save_modiff"
msgstr ""

#. type: itemx
#: internals.texi.orig:1024
#, no-wrap
msgid "chars_modiff"
msgstr ""

#. type: itemx
#: internals.texi.orig:1025
#, no-wrap
msgid "overlay_modiff"
msgstr ""

#. type: table
#: internals.texi.orig:1034
msgid ""
"These fields count the number of buffer-modification events performed in "
"this buffer.  @code{modiff} is incremented after each buffer-modification "
"event, and is never otherwise changed; @code{save_modiff} contains the value "
"of @code{modiff} the last time the buffer was visited or saved; "
"@code{chars_modiff} counts only modifications to the characters in the "
"buffer, ignoring all other kinds of changes; and @code{overlay_modiff} "
"counts only modifications to the overlays."
msgstr ""

#. type: item
#: internals.texi.orig:1035
#, no-wrap
msgid "beg_unchanged"
msgstr ""

#. type: itemx
#: internals.texi.orig:1036
#, no-wrap
msgid "end_unchanged"
msgstr ""

#. type: table
#: internals.texi.orig:1039
msgid ""
"The number of characters at the start and end of the text that are known to "
"be unchanged since the last complete redisplay."
msgstr ""

#. type: item
#: internals.texi.orig:1040
#, no-wrap
msgid "unchanged_modified"
msgstr ""

#. type: itemx
#: internals.texi.orig:1041
#, no-wrap
msgid "overlay_unchanged_modified"
msgstr ""

#. type: table
#: internals.texi.orig:1047
msgid ""
"The values of @code{modiff} and @code{overlay_modiff}, respectively, after "
"the last complete redisplay.  If their current values match @code{modiff} or "
"@code{overlay_modiff}, that means @code{beg_unchanged} and "
"@code{end_unchanged} contain no useful information."
msgstr ""

#. type: item
#: internals.texi.orig:1048
#, no-wrap
msgid "markers"
msgstr ""

#. type: table
#: internals.texi.orig:1052
msgid ""
"The markers that refer to this buffer.  This is actually a single marker, "
"and successive elements in its marker @code{chain} are the other markers "
"referring to this buffer text."
msgstr ""

#. type: item
#: internals.texi.orig:1053
#, no-wrap
msgid "intervals"
msgstr ""

#. type: table
#: internals.texi.orig:1055
msgid "The interval tree which records the text properties of this buffer."
msgstr ""

#. type: Plain text
#: internals.texi.orig:1058
msgid "Some of the fields of @code{struct buffer} are:"
msgstr ""

#. type: item
#: internals.texi.orig:1060
#, no-wrap
msgid "header"
msgstr ""

#. type: table
#: internals.texi.orig:1063
msgid ""
"A header of type @code{struct vectorlike_header} is common to all vectorlike "
"objects."
msgstr ""

#. type: item
#: internals.texi.orig:1064
#, no-wrap
msgid "own_text"
msgstr ""

#. type: table
#: internals.texi.orig:1067
msgid ""
"A @code{struct buffer_text} structure that ordinarily holds the buffer "
"contents.  In indirect buffers, this field is not used."
msgstr ""

#. type: item
#: internals.texi.orig:1068
#, no-wrap
msgid "text"
msgstr ""

#. type: table
#: internals.texi.orig:1072
msgid ""
"A pointer to the @code{buffer_text} structure for this buffer.  In an "
"ordinary buffer, this is the @code{own_text} field above.  In an indirect "
"buffer, this is the @code{own_text} field of the base buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1073 internals.texi.orig:1296
#, no-wrap
msgid "next"
msgstr ""

#. type: table
#: internals.texi.orig:1077
msgid ""
"A pointer to the next buffer, in the chain of all buffers, including killed "
"buffers.  This chain is used only for allocation and garbage collection, in "
"order to collect killed buffers properly."
msgstr ""

#. type: item
#: internals.texi.orig:1078
#, no-wrap
msgid "pt"
msgstr ""

#. type: itemx
#: internals.texi.orig:1079
#, no-wrap
msgid "pt_byte"
msgstr ""

#. type: table
#: internals.texi.orig:1081
msgid "The character and byte positions of point in a buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1082
#, no-wrap
msgid "begv"
msgstr ""

#. type: itemx
#: internals.texi.orig:1083
#, no-wrap
msgid "begv_byte"
msgstr ""

#. type: table
#: internals.texi.orig:1086
msgid ""
"The character and byte positions of the beginning of the accessible range of "
"text in the buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1087
#, no-wrap
msgid "zv"
msgstr ""

#. type: itemx
#: internals.texi.orig:1088
#, no-wrap
msgid "zv_byte"
msgstr ""

#. type: table
#: internals.texi.orig:1091
msgid ""
"The character and byte positions of the end of the accessible range of text "
"in the buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1092
#, no-wrap
msgid "base_buffer"
msgstr ""

#. type: table
#: internals.texi.orig:1095
msgid ""
"In an indirect buffer, this points to the base buffer.  In an ordinary "
"buffer, it is null."
msgstr ""

#. type: item
#: internals.texi.orig:1096
#, no-wrap
msgid "local_flags"
msgstr ""

#. type: table
#: internals.texi.orig:1102
msgid ""
"This field contains flags indicating that certain variables are local in "
"this buffer.  Such variables are declared in the C code using "
"@code{DEFVAR_PER_BUFFER}, and their buffer-local bindings are stored in "
"fields in the buffer structure itself.  (Some of these fields are described "
"in this table.)"
msgstr ""

#. type: item
#: internals.texi.orig:1103
#, no-wrap
msgid "modtime"
msgstr ""

#. type: table
#: internals.texi.orig:1108
msgid ""
"The modification time of the visited file.  It is set when the file is "
"written or read.  Before writing the buffer into a file, this field is "
"compared to the modification time of the file to see if the file has changed "
"on disk.  @xref{Buffer Modification}."
msgstr ""

#. type: item
#: internals.texi.orig:1109
#, no-wrap
msgid "auto_save_modified"
msgstr ""

#. type: table
#: internals.texi.orig:1111
msgid "The time when the buffer was last auto-saved."
msgstr ""

#. type: item
#: internals.texi.orig:1112
#, no-wrap
msgid "last_window_start"
msgstr ""

#. type: table
#: internals.texi.orig:1115
msgid ""
"The @code{window-start} position in the buffer as of the last time the "
"buffer was displayed in a window."
msgstr ""

#. type: item
#: internals.texi.orig:1116
#, no-wrap
msgid "clip_changed"
msgstr ""

#. type: table
#: internals.texi.orig:1119
msgid ""
"This flag indicates that narrowing has changed in the buffer.  "
"@xref{Narrowing}."
msgstr ""

#. type: item
#: internals.texi.orig:1120
#, no-wrap
msgid "prevent_redisplay_optimizations_p"
msgstr ""

#. type: table
#: internals.texi.orig:1123
msgid ""
"This flag indicates that redisplay optimizations should not be used to "
"display this buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1124
#, no-wrap
msgid "overlay_center"
msgstr ""

#. type: table
#: internals.texi.orig:1127
msgid ""
"This field holds the current overlay center position.  @xref{Managing "
"Overlays}."
msgstr ""

#. type: item
#: internals.texi.orig:1128
#, no-wrap
msgid "overlays_before"
msgstr ""

#. type: itemx
#: internals.texi.orig:1129
#, no-wrap
msgid "overlays_after"
msgstr ""

#. type: table
#: internals.texi.orig:1136
msgid ""
"These fields hold, respectively, a list of overlays that end at or before "
"the current overlay center, and a list of overlays that end after the "
"current overlay center.  @xref{Managing Overlays}.  @code{overlays_before} "
"is sorted in order of decreasing end position, and @code{overlays_after} is "
"sorted in order of increasing beginning position."
msgstr ""

#. type: item
#: internals.texi.orig:1139 internals.texi.orig:1477
#, no-wrap
msgid "name"
msgstr ""

#. type: table
#: internals.texi.orig:1142
msgid ""
"A Lisp string that names the buffer.  It is guaranteed to be unique.  "
"@xref{Buffer Names}."
msgstr ""

#. type: item
#: internals.texi.orig:1143
#, no-wrap
msgid "save_length"
msgstr ""

#. type: table
#: internals.texi.orig:1148
msgid ""
"The length of the file this buffer is visiting, when last read or saved.  "
"This and other fields concerned with saving are not kept in the "
"@code{buffer_text} structure because indirect buffers are never saved."
msgstr ""

#. type: item
#: internals.texi.orig:1149
#, no-wrap
msgid "directory"
msgstr ""

#. type: table
#: internals.texi.orig:1152
msgid ""
"The directory for expanding relative file names.  This is the value of the "
"buffer-local variable @code{default-directory} (@pxref{File Name "
"Expansion})."
msgstr ""

#. type: item
#: internals.texi.orig:1153
#, no-wrap
msgid "filename"
msgstr ""

#. type: table
#: internals.texi.orig:1157
msgid ""
"The name of the file visited in this buffer, or @code{nil}.  This is the "
"value of the buffer-local variable @code{buffer-file-name} (@pxref{Buffer "
"File Name})."
msgstr ""

#. type: item
#: internals.texi.orig:1158
#, no-wrap
msgid "undo_list"
msgstr ""

#. type: itemx
#: internals.texi.orig:1159
#, no-wrap
msgid "backed_up"
msgstr ""

#. type: itemx
#: internals.texi.orig:1160
#, no-wrap
msgid "auto_save_file_name"
msgstr ""

#. type: itemx
#: internals.texi.orig:1161
#, no-wrap
msgid "auto_save_file_format"
msgstr ""

#. type: itemx
#: internals.texi.orig:1162
#, no-wrap
msgid "read_only"
msgstr ""

#. type: itemx
#: internals.texi.orig:1163
#, no-wrap
msgid "file_format"
msgstr ""

#. type: itemx
#: internals.texi.orig:1164
#, no-wrap
msgid "file_truename"
msgstr ""

#. type: itemx
#: internals.texi.orig:1165
#, no-wrap
msgid "invisibility_spec"
msgstr ""

#. type: itemx
#: internals.texi.orig:1166
#, no-wrap
msgid "display_count"
msgstr ""

#. type: itemx
#: internals.texi.orig:1167
#, no-wrap
msgid "display_time"
msgstr ""

#. type: table
#: internals.texi.orig:1173
msgid ""
"These fields store the values of Lisp variables that are automatically "
"buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable "
"names have the additional prefix @code{buffer-} and have underscores "
"replaced with dashes.  For instance, @code{undo_list} stores the value of "
"@code{buffer-undo-list}."
msgstr ""

#. type: item
#: internals.texi.orig:1174 internals.texi.orig:1503
#, no-wrap
msgid "mark"
msgstr ""

#. type: table
#: internals.texi.orig:1177
msgid ""
"The mark for the buffer.  The mark is a marker, hence it is also included on "
"the list @code{markers}.  @xref{The Mark}."
msgstr ""

#. type: item
#: internals.texi.orig:1178
#, no-wrap
msgid "local_var_alist"
msgstr ""

#. type: table
#: internals.texi.orig:1183
msgid ""
"The association list describing the buffer-local variable bindings of this "
"buffer, not including the built-in buffer-local bindings that have special "
"slots in the buffer object.  (Those slots are omitted from this table.)  "
"@xref{Buffer-Local Variables}."
msgstr ""

#. type: item
#: internals.texi.orig:1184
#, no-wrap
msgid "major_mode"
msgstr ""

#. type: table
#: internals.texi.orig:1186
msgid "Symbol naming the major mode of this buffer, e.g., @code{lisp-mode}."
msgstr ""

#. type: item
#: internals.texi.orig:1187
#, no-wrap
msgid "mode_name"
msgstr ""

#. type: table
#: internals.texi.orig:1189
msgid "Pretty name of the major mode, e.g., @code{\"Lisp\"}."
msgstr ""

#. type: item
#: internals.texi.orig:1190
#, no-wrap
msgid "keymap"
msgstr ""

#. type: itemx
#: internals.texi.orig:1191
#, no-wrap
msgid "abbrev_table"
msgstr ""

#. type: itemx
#: internals.texi.orig:1192
#, no-wrap
msgid "syntax_table"
msgstr ""

#. type: itemx
#: internals.texi.orig:1193
#, no-wrap
msgid "category_table"
msgstr ""

#. type: item
#: internals.texi.orig:1194 internals.texi.orig:1444
#, no-wrap
msgid "display_table"
msgstr ""

#. type: table
#: internals.texi.orig:1199
msgid ""
"These fields store the buffer's local keymap (@pxref{Keymaps}), abbrev table "
"(@pxref{Abbrev Tables}), syntax table (@pxref{Syntax Tables}), category "
"table (@pxref{Categories}), and display table (@pxref{Display Tables})."
msgstr ""

#. type: item
#: internals.texi.orig:1200
#, no-wrap
msgid "downcase_table"
msgstr ""

#. type: itemx
#: internals.texi.orig:1201
#, no-wrap
msgid "upcase_table"
msgstr ""

#. type: itemx
#: internals.texi.orig:1202
#, no-wrap
msgid "case_canon_table"
msgstr ""

#. type: table
#: internals.texi.orig:1206
msgid ""
"These fields store the conversion tables for converting text to lower case, "
"upper case, and for canonicalizing text for case-fold search.  @xref{Case "
"Tables}."
msgstr ""

#. type: item
#: internals.texi.orig:1207
#, no-wrap
msgid "minor_modes"
msgstr ""

#. type: table
#: internals.texi.orig:1209
msgid "An alist of the minor modes of this buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1210
#, no-wrap
msgid "pt_marker"
msgstr ""

#. type: itemx
#: internals.texi.orig:1211
#, no-wrap
msgid "begv_marker"
msgstr ""

#. type: itemx
#: internals.texi.orig:1212
#, no-wrap
msgid "zv_marker"
msgstr ""

#. type: table
#: internals.texi.orig:1217
msgid ""
"These fields are only used in an indirect buffer, or in a buffer that is the "
"base of an indirect buffer.  Each holds a marker that records @code{pt}, "
"@code{begv}, and @code{zv} respectively, for this buffer when the buffer is "
"not current."
msgstr ""

#. type: item
#: internals.texi.orig:1218
#, no-wrap
msgid "mode_line_format"
msgstr ""

#. type: itemx
#: internals.texi.orig:1219
#, no-wrap
msgid "header_line_format"
msgstr ""

#. type: itemx
#: internals.texi.orig:1220
#, no-wrap
msgid "case_fold_search"
msgstr ""

#. type: itemx
#: internals.texi.orig:1221
#, no-wrap
msgid "tab_width"
msgstr ""

#. type: itemx
#: internals.texi.orig:1222
#, no-wrap
msgid "fill_column"
msgstr ""

#. type: itemx
#: internals.texi.orig:1223
#, no-wrap
msgid "left_margin"
msgstr ""

#. type: itemx
#: internals.texi.orig:1224
#, no-wrap
msgid "auto_fill_function"
msgstr ""

#. type: itemx
#: internals.texi.orig:1225
#, no-wrap
msgid "truncate_lines"
msgstr ""

#. type: itemx
#: internals.texi.orig:1226
#, no-wrap
msgid "word_wrap"
msgstr ""

#. type: itemx
#: internals.texi.orig:1227
#, no-wrap
msgid "ctl_arrow"
msgstr ""

#. type: itemx
#: internals.texi.orig:1228
#, no-wrap
msgid "bidi_display_reordering"
msgstr ""

#. type: itemx
#: internals.texi.orig:1229
#, no-wrap
msgid "bidi_paragraph_direction"
msgstr ""

#. type: itemx
#: internals.texi.orig:1230
#, no-wrap
msgid "selective_display"
msgstr ""

#. type: itemx
#: internals.texi.orig:1231
#, no-wrap
msgid "selective_display_ellipses"
msgstr ""

#. type: itemx
#: internals.texi.orig:1232
#, no-wrap
msgid "overwrite_mode"
msgstr ""

#. type: itemx
#: internals.texi.orig:1233
#, no-wrap
msgid "abbrev_mode"
msgstr ""

#. type: itemx
#: internals.texi.orig:1234
#, no-wrap
msgid "mark_active"
msgstr ""

#. type: itemx
#: internals.texi.orig:1235
#, no-wrap
msgid "enable_multibyte_characters"
msgstr ""

#. type: itemx
#: internals.texi.orig:1236
#, no-wrap
msgid "buffer_file_coding_system"
msgstr ""

#. type: itemx
#: internals.texi.orig:1237
#, no-wrap
msgid "cache_long_line_scans"
msgstr ""

#. type: itemx
#: internals.texi.orig:1238
#, no-wrap
msgid "point_before_scroll"
msgstr ""

#. type: item
#: internals.texi.orig:1239 internals.texi.orig:1376
#, no-wrap
msgid "left_fringe_width"
msgstr ""

#. type: itemx
#: internals.texi.orig:1240 internals.texi.orig:1377
#, no-wrap
msgid "right_fringe_width"
msgstr ""

#. type: item
#: internals.texi.orig:1241 internals.texi.orig:1381
#, no-wrap
msgid "fringes_outside_margins"
msgstr ""

#. type: itemx
#: internals.texi.orig:1242
#, no-wrap
msgid "scroll_bar_width"
msgstr ""

#. type: itemx
#: internals.texi.orig:1243
#, no-wrap
msgid "indicate_empty_lines"
msgstr ""

#. type: itemx
#: internals.texi.orig:1244
#, no-wrap
msgid "indicate_buffer_boundaries"
msgstr ""

#. type: itemx
#: internals.texi.orig:1245
#, no-wrap
msgid "fringe_indicator_alist"
msgstr ""

#. type: itemx
#: internals.texi.orig:1246
#, no-wrap
msgid "fringe_cursor_alist"
msgstr ""

#. type: itemx
#: internals.texi.orig:1247
#, no-wrap
msgid "scroll_up_aggressively"
msgstr ""

#. type: itemx
#: internals.texi.orig:1248
#, no-wrap
msgid "scroll_down_aggressively"
msgstr ""

#. type: itemx
#: internals.texi.orig:1249
#, no-wrap
msgid "cursor_type"
msgstr ""

#. type: itemx
#: internals.texi.orig:1250
#, no-wrap
msgid "cursor_in_non_selected_windows"
msgstr ""

#. type: table
#: internals.texi.orig:1255
msgid ""
"These fields store the values of Lisp variables that are automatically "
"buffer-local (@pxref{Buffer-Local Variables}), whose corresponding variable "
"names have underscores replaced with dashes.  For instance, "
"@code{mode_line_format} stores the value of @code{mode-line-format}."
msgstr ""

#. type: item
#: internals.texi.orig:1256
#, no-wrap
msgid "last_selected_window"
msgstr ""

#. type: table
#: internals.texi.orig:1259
msgid ""
"This is the last window that was selected with this buffer in it, or "
"@code{nil} if that window no longer displays this buffer."
msgstr ""

#. type: cindex
#: internals.texi.orig:1263
#, no-wrap
msgid "internals, of window"
msgstr ""

#. type: cindex
#: internals.texi.orig:1264
#, no-wrap
msgid "window internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1268
msgid ""
"The fields of a window (for a complete list, see the definition of "
"@code{struct window} in @file{window.h}) include:"
msgstr ""

#. type: item
#: internals.texi.orig:1270
#, no-wrap
msgid "frame"
msgstr ""

#. type: table
#: internals.texi.orig:1272
msgid "The frame that this window is on."
msgstr ""

#. type: item
#: internals.texi.orig:1273
#, no-wrap
msgid "mini_p"
msgstr ""

#. type: table
#: internals.texi.orig:1275
msgid "Non-@code{nil} if this window is a minibuffer window."
msgstr ""

#. type: item
#: internals.texi.orig:1276
#, no-wrap
msgid "parent"
msgstr ""

#. type: table
#: internals.texi.orig:1280
msgid ""
"Internally, Emacs arranges windows in a tree; each group of siblings has a "
"parent window whose area includes all the siblings.  This field points to a "
"window's parent."
msgstr ""

#. type: table
#: internals.texi.orig:1285
msgid ""
"Parent windows do not display buffers, and play little role in display "
"except to shape their child windows.  Emacs Lisp programs usually have no "
"access to the parent windows; they operate on the windows at the leaves of "
"the tree, which actually display buffers."
msgstr ""

#. type: item
#: internals.texi.orig:1288
#, no-wrap
msgid "hchild"
msgstr ""

#. type: itemx
#: internals.texi.orig:1289
#, no-wrap
msgid "vchild"
msgstr ""

#. type: table
#: internals.texi.orig:1295
msgid ""
"These fields contain the window's leftmost child and its topmost child "
"respectively.  @code{hchild} is used if the window is subdivided "
"horizontally by child windows, and @code{vchild} if it is subdivided "
"vertically.  In a live window, only one of @code{hchild}, @code{vchild}, and "
"@code{buffer} (q.v.@:) is non-@code{nil}."
msgstr ""

#. type: itemx
#: internals.texi.orig:1297
#, no-wrap
msgid "prev"
msgstr ""

#. type: table
#: internals.texi.orig:1302
msgid ""
"The next sibling and previous sibling of this window.  @code{next} is "
"@code{nil} if the window is the right-most or bottom-most in its group; "
"@code{prev} is @code{nil} if it is the left-most or top-most in its group."
msgstr ""

#. type: item
#: internals.texi.orig:1303
#, no-wrap
msgid "left_col"
msgstr ""

#. type: table
#: internals.texi.orig:1306
msgid ""
"The left-hand edge of the window, measured in columns, relative to the "
"leftmost column in the frame (column 0)."
msgstr ""

#. type: item
#: internals.texi.orig:1307
#, no-wrap
msgid "top_line"
msgstr ""

#. type: table
#: internals.texi.orig:1310
msgid ""
"The top edge of the window, measured in lines, relative to the topmost line "
"in the frame (line 0)."
msgstr ""

#. type: item
#: internals.texi.orig:1311
#, no-wrap
msgid "total_cols"
msgstr ""

#. type: itemx
#: internals.texi.orig:1312
#, no-wrap
msgid "total_lines"
msgstr ""

#. type: table
#: internals.texi.orig:1316
msgid ""
"The width and height of the window, measured in columns and lines "
"respectively.  The width includes the scroll bar and fringes, and/or the "
"separator line on the right of the window (if any)."
msgstr ""

#. type: item
#: internals.texi.orig:1317 internals.texi.orig:1491
#, no-wrap
msgid "buffer"
msgstr ""

#. type: table
#: internals.texi.orig:1319
msgid "The buffer that the window is displaying."
msgstr ""

#. type: item
#: internals.texi.orig:1320
#, no-wrap
msgid "start"
msgstr ""

#. type: table
#: internals.texi.orig:1323
msgid ""
"A marker pointing to the position in the buffer that is the first character "
"displayed in the window."
msgstr ""

#. type: item
#: internals.texi.orig:1324
#, no-wrap
msgid "pointm"
msgstr ""

#. type: cindex
#: internals.texi.orig:1325
#, no-wrap
msgid "window point internals"
msgstr ""

#. type: table
#: internals.texi.orig:1328
msgid ""
"This is the value of point in the current buffer when this window is "
"selected; when it is not selected, it retains its previous value."
msgstr ""

#. type: item
#: internals.texi.orig:1329
#, no-wrap
msgid "force_start"
msgstr ""

#. type: table
#: internals.texi.orig:1335
msgid ""
"If this flag is non-@code{nil}, it says that the window has been scrolled "
"explicitly by the Lisp program.  This affects what the next redisplay does "
"if point is off the screen: instead of scrolling the window to show the text "
"around point, it moves point to a location that is on the screen."
msgstr ""

#. type: item
#: internals.texi.orig:1336
#, no-wrap
msgid "frozen_window_start_p"
msgstr ""

#. type: table
#: internals.texi.orig:1340
msgid ""
"This field is set temporarily to 1 to indicate to redisplay that "
"@code{start} of this window should not be changed, even if point gets "
"invisible."
msgstr ""

#. type: item
#: internals.texi.orig:1341
#, no-wrap
msgid "start_at_line_beg"
msgstr ""

#. type: table
#: internals.texi.orig:1344
msgid ""
"Non-@code{nil} means current value of @code{start} was the beginning of a "
"line when it was chosen."
msgstr ""

#. type: item
#: internals.texi.orig:1345
#, no-wrap
msgid "use_time"
msgstr ""

#. type: table
#: internals.texi.orig:1348
msgid ""
"This is the last time that the window was selected.  The function "
"@code{get-lru-window} uses this field."
msgstr ""

#. type: item
#: internals.texi.orig:1349
#, no-wrap
msgid "sequence_number"
msgstr ""

#. type: table
#: internals.texi.orig:1351
msgid "A unique number assigned to this window when it was created."
msgstr ""

#. type: item
#: internals.texi.orig:1352
#, no-wrap
msgid "last_modified"
msgstr ""

#. type: table
#: internals.texi.orig:1355
msgid ""
"The @code{modiff} field of the window's buffer, as of the last time a "
"redisplay completed in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1356
#, no-wrap
msgid "last_overlay_modified"
msgstr ""

#. type: table
#: internals.texi.orig:1359
msgid ""
"The @code{overlay_modiff} field of the window's buffer, as of the last time "
"a redisplay completed in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1360
#, no-wrap
msgid "last_point"
msgstr ""

#. type: table
#: internals.texi.orig:1363
msgid ""
"The buffer's value of point, as of the last time a redisplay completed in "
"this window."
msgstr ""

#. type: item
#: internals.texi.orig:1364
#, no-wrap
msgid "last_had_star"
msgstr ""

#. type: table
#: internals.texi.orig:1367
msgid ""
"A non-@code{nil} value means the window's buffer was ``modified'' when the "
"window was last updated."
msgstr ""

#. type: item
#: internals.texi.orig:1368
#, no-wrap
msgid "vertical_scroll_bar"
msgstr ""

#. type: table
#: internals.texi.orig:1370
msgid "This window's vertical scroll bar."
msgstr ""

#. type: item
#: internals.texi.orig:1371
#, no-wrap
msgid "left_margin_cols"
msgstr ""

#. type: itemx
#: internals.texi.orig:1372
#, no-wrap
msgid "right_margin_cols"
msgstr ""

#. type: table
#: internals.texi.orig:1375
msgid ""
"The widths of the left and right margins in this window.  A value of "
"@code{nil} means no margin."
msgstr ""

#. type: table
#: internals.texi.orig:1380
msgid ""
"The widths of the left and right fringes in this window.  A value of "
"@code{nil} or @code{t} means use the values of the frame."
msgstr ""

#. type: table
#: internals.texi.orig:1384
msgid ""
"A non-@code{nil} value means the fringes outside the display margins; "
"othersize they are between the margin and the text."
msgstr ""

#. type: item
#: internals.texi.orig:1385
#, no-wrap
msgid "window_end_pos"
msgstr ""

#. type: table
#: internals.texi.orig:1389
msgid ""
"This is computed as @code{z} minus the buffer position of the last glyph in "
"the current matrix of the window.  The value is only valid if "
"@code{window_end_valid} is not @code{nil}."
msgstr ""

#. type: item
#: internals.texi.orig:1390
#, no-wrap
msgid "window_end_bytepos"
msgstr ""

#. type: table
#: internals.texi.orig:1392
msgid "The byte position corresponding to @code{window_end_pos}."
msgstr ""

#. type: item
#: internals.texi.orig:1393
#, no-wrap
msgid "window_end_vpos"
msgstr ""

#. type: table
#: internals.texi.orig:1396
msgid ""
"The window-relative vertical position of the line containing "
"@code{window_end_pos}."
msgstr ""

#. type: item
#: internals.texi.orig:1397
#, no-wrap
msgid "window_end_valid"
msgstr ""

#. type: table
#: internals.texi.orig:1402
msgid ""
"This field is set to a non-@code{nil} value if @code{window_end_pos} is "
"truly valid.  This is @code{nil} if nontrivial redisplay is pre-empted, "
"since in that case the display that @code{window_end_pos} was computed for "
"did not get onto the screen."
msgstr ""

#. type: item
#: internals.texi.orig:1403
#, no-wrap
msgid "cursor"
msgstr ""

#. type: table
#: internals.texi.orig:1405
msgid "A structure describing where the cursor is in this window."
msgstr ""

#. type: item
#: internals.texi.orig:1406
#, no-wrap
msgid "last_cursor"
msgstr ""

#. type: table
#: internals.texi.orig:1408
msgid "The value of @code{cursor} as of the last redisplay that finished."
msgstr ""

#. type: item
#: internals.texi.orig:1409
#, no-wrap
msgid "phys_cursor"
msgstr ""

#. type: table
#: internals.texi.orig:1411
msgid "A structure describing where the cursor of this window physically is."
msgstr ""

#. type: item
#: internals.texi.orig:1412
#, no-wrap
msgid "phys_cursor_type"
msgstr ""

#. type: itemx
#: internals.texi.orig:1415
#, no-wrap
msgid "phys_cursor_height"
msgstr ""

#. type: itemx
#: internals.texi.orig:1416
#, no-wrap
msgid "phys_cursor_width"
msgstr ""

#. type: table
#: internals.texi.orig:1419
msgid ""
"The type, height, and width of the cursor that was last displayed on this "
"window."
msgstr ""

#. type: item
#: internals.texi.orig:1420
#, no-wrap
msgid "phys_cursor_on_p"
msgstr ""

#. type: table
#: internals.texi.orig:1422
msgid "This field is non-zero if the cursor is physically on."
msgstr ""

#. type: item
#: internals.texi.orig:1423
#, no-wrap
msgid "cursor_off_p"
msgstr ""

#. type: table
#: internals.texi.orig:1426
msgid ""
"Non-zero means the cursor in this window is logically off.  This is used for "
"blinking the cursor."
msgstr ""

#. type: item
#: internals.texi.orig:1427
#, no-wrap
msgid "last_cursor_off_p"
msgstr ""

#. type: table
#: internals.texi.orig:1430
msgid ""
"This field contains the value of @code{cursor_off_p} as of the time of the "
"last redisplay."
msgstr ""

#. type: item
#: internals.texi.orig:1431
#, no-wrap
msgid "must_be_updated_p"
msgstr ""

#. type: table
#: internals.texi.orig:1433
msgid "This is set to 1 during redisplay when this window must be updated."
msgstr ""

#. type: item
#: internals.texi.orig:1434
#, no-wrap
msgid "hscroll"
msgstr ""

#. type: table
#: internals.texi.orig:1437
msgid ""
"This is the number of columns that the display in the window is scrolled "
"horizontally to the left.  Normally, this is 0."
msgstr ""

#. type: item
#: internals.texi.orig:1438
#, no-wrap
msgid "vscroll"
msgstr ""

#. type: table
#: internals.texi.orig:1440
msgid "Vertical scroll amount, in pixels.  Normally, this is 0."
msgstr ""

#. type: item
#: internals.texi.orig:1441
#, no-wrap
msgid "dedicated"
msgstr ""

#. type: table
#: internals.texi.orig:1443
msgid "Non-@code{nil} if this window is dedicated to its buffer."
msgstr ""

#. type: table
#: internals.texi.orig:1446
msgid "The window's display table, or @code{nil} if none is specified for it."
msgstr ""

#. type: item
#: internals.texi.orig:1447
#, no-wrap
msgid "update_mode_line"
msgstr ""

#. type: table
#: internals.texi.orig:1449
msgid "Non-@code{nil} means this window's mode line needs to be updated."
msgstr ""

#. type: item
#: internals.texi.orig:1450
#, no-wrap
msgid "base_line_number"
msgstr ""

#. type: table
#: internals.texi.orig:1453
msgid ""
"The line number of a certain position in the buffer, or @code{nil}.  This is "
"used for displaying the line number of point in the mode line."
msgstr ""

#. type: item
#: internals.texi.orig:1454
#, no-wrap
msgid "base_line_pos"
msgstr ""

#. type: table
#: internals.texi.orig:1458
msgid ""
"The position in the buffer for which the line number is known, or @code{nil} "
"meaning none is known.  If it is a buffer, don't display the line number as "
"long as the window shows that buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1459
#, no-wrap
msgid "column_number_displayed"
msgstr ""

#. type: table
#: internals.texi.orig:1462
msgid ""
"The column number currently displayed in this window's mode line, or "
"@code{nil} if column numbers are not being displayed."
msgstr ""

#. type: item
#: internals.texi.orig:1463
#, no-wrap
msgid "current_matrix"
msgstr ""

#. type: itemx
#: internals.texi.orig:1464
#, no-wrap
msgid "desired_matrix"
msgstr ""

#. type: table
#: internals.texi.orig:1466
msgid "Glyph matrices describing the current and desired display of this window."
msgstr ""

#. type: cindex
#: internals.texi.orig:1470
#, no-wrap
msgid "internals, of process"
msgstr ""

#. type: cindex
#: internals.texi.orig:1471
#, no-wrap
msgid "process internals"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1475
msgid ""
"The fields of a process (for a complete list, see the definition of "
"@code{struct Lisp_Process} in @file{process.h}) include:"
msgstr ""

#. type: table
#: internals.texi.orig:1479
msgid "A string, the name of the process."
msgstr ""

#. type: item
#: internals.texi.orig:1480
#, no-wrap
msgid "command"
msgstr ""

#. type: table
#: internals.texi.orig:1484
msgid ""
"A list containing the command arguments that were used to start this "
"process.  For a network or serial process, it is @code{nil} if the process "
"is running or @code{t} if the process is stopped."
msgstr ""

#. type: item
#: internals.texi.orig:1485
#, no-wrap
msgid "filter"
msgstr ""

#. type: table
#: internals.texi.orig:1487
msgid "A function used to accept output from the process."
msgstr ""

#. type: item
#: internals.texi.orig:1488
#, no-wrap
msgid "sentinel"
msgstr ""

#. type: table
#: internals.texi.orig:1490
msgid "A function called whenever the state of the process changes."
msgstr ""

#. type: table
#: internals.texi.orig:1493
msgid "The associated buffer of the process."
msgstr ""

#. type: item
#: internals.texi.orig:1494
#, no-wrap
msgid "pid"
msgstr ""

#. type: table
#: internals.texi.orig:1497
msgid ""
"An integer, the operating system's process @acronym{ID}.  Pseudo-processes "
"such as network or serial connections use a value of 0."
msgstr ""

#. type: item
#: internals.texi.orig:1498
#, no-wrap
msgid "childp"
msgstr ""

#. type: table
#: internals.texi.orig:1502
msgid ""
"A flag, @code{t} if this is really a child process.  For a network or serial "
"connection, it is a plist based on the arguments to "
"@code{make-network-process} or @code{make-serial-process}."
msgstr ""

#. type: table
#: internals.texi.orig:1507
msgid ""
"A marker indicating the position of the end of the last output from this "
"process inserted into the buffer.  This is often but not always the end of "
"the buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1508
#, no-wrap
msgid "kill_without_query"
msgstr ""

#. type: table
#: internals.texi.orig:1511
msgid ""
"If this is non-zero, killing Emacs while this process is still running does "
"not ask for confirmation about killing the process."
msgstr ""

#. type: item
#: internals.texi.orig:1512
#, no-wrap
msgid "raw_status"
msgstr ""

#. type: table
#: internals.texi.orig:1514
msgid "The raw process status, as returned by the @code{wait} system call."
msgstr ""

#. type: item
#: internals.texi.orig:1515
#, no-wrap
msgid "status"
msgstr ""

#. type: table
#: internals.texi.orig:1517
msgid "The process status, as @code{process-status} should return it."
msgstr ""

#. type: item
#: internals.texi.orig:1518
#, no-wrap
msgid "tick"
msgstr ""

#. type: itemx
#: internals.texi.orig:1519
#, no-wrap
msgid "update_tick"
msgstr ""

#. type: table
#: internals.texi.orig:1523
msgid ""
"If these two fields are not equal, a change in the status of the process "
"needs to be reported, either by running the sentinel or by inserting a "
"message in the process buffer."
msgstr ""

#. type: item
#: internals.texi.orig:1524
#, no-wrap
msgid "pty_flag"
msgstr ""

#. type: table
#: internals.texi.orig:1527
msgid ""
"Non-@code{nil} if communication with the subprocess uses a pty; @code{nil} "
"if it uses a pipe."
msgstr ""

#. type: item
#: internals.texi.orig:1528
#, no-wrap
msgid "infd"
msgstr ""

#. type: table
#: internals.texi.orig:1530
msgid "The file descriptor for input from the process."
msgstr ""

#. type: item
#: internals.texi.orig:1531
#, no-wrap
msgid "outfd"
msgstr ""

#. type: table
#: internals.texi.orig:1533
msgid "The file descriptor for output to the process."
msgstr ""

#. type: item
#: internals.texi.orig:1534
#, no-wrap
msgid "tty_name"
msgstr ""

#. type: table
#: internals.texi.orig:1537
msgid ""
"The name of the terminal that the subprocess is using, or @code{nil} if it "
"is using pipes."
msgstr ""

#. type: item
#: internals.texi.orig:1538
#, no-wrap
msgid "decode_coding_system"
msgstr ""

#. type: table
#: internals.texi.orig:1540
msgid "Coding-system for decoding the input from this process."
msgstr ""

#. type: item
#: internals.texi.orig:1541
#, no-wrap
msgid "decoding_buf"
msgstr ""

#. type: table
#: internals.texi.orig:1543
msgid "A working buffer for decoding."
msgstr ""

#. type: item
#: internals.texi.orig:1544
#, no-wrap
msgid "decoding_carryover"
msgstr ""

#. type: table
#: internals.texi.orig:1546
msgid "Size of carryover in decoding."
msgstr ""

#. type: item
#: internals.texi.orig:1547
#, no-wrap
msgid "encode_coding_system"
msgstr ""

#. type: table
#: internals.texi.orig:1549
msgid "Coding-system for encoding the output to this process."
msgstr ""

#. type: item
#: internals.texi.orig:1550
#, no-wrap
msgid "encoding_buf"
msgstr ""

#. type: table
#: internals.texi.orig:1552
msgid "A working buffer for encoding."
msgstr ""

#. type: item
#: internals.texi.orig:1553
#, no-wrap
msgid "inherit_coding_system_flag"
msgstr ""

#. type: table
#: internals.texi.orig:1556
msgid ""
"Flag to set @code{coding-system} of the process buffer from the coding "
"system used to decode process output."
msgstr ""

#. type: item
#: internals.texi.orig:1557
#, no-wrap
msgid "type"
msgstr ""

#. type: table
#: internals.texi.orig:1560
msgid ""
"Symbol indicating the type of process: @code{real}, @code{network}, "
"@code{serial}."
msgstr ""

#. type: cindex
#: internals.texi.orig:1565
#, no-wrap
msgid "integer types (C programming language)"
msgstr ""

#. type: Plain text
#: internals.texi.orig:1570
msgid ""
"Here are some guidelines for use of integer types in the Emacs C source "
"code.  These guidelines sometimes give competing advice; common sense is "
"advised."
msgstr ""

#. type: itemize
#: internals.texi.orig:1576
msgid ""
"Avoid arbitrary limits.  For example, avoid @code{int len = strlen (s);} "
"unless the length of @code{s} is required for other reasons to fit in "
"@code{int} range."
msgstr ""

#. type: itemize
#: internals.texi.orig:1583
msgid ""
"Do not assume that signed integer arithmetic wraps around on overflow.  This "
"is no longer true of Emacs porting targets: signed integer overflow has "
"undefined behavior in practice, and can dump core or even cause earlier or "
"later code to behave ``illogically''.  Unsigned overflow does wrap around "
"reliably, modulo a power of two."
msgstr ""

#. type: itemize
#: internals.texi.orig:1591
msgid ""
"Prefer signed types to unsigned, as code gets confusing when signed and "
"unsigned types are combined.  Many other guidelines assume that types are "
"signed; in the rarer cases where unsigned types are needed, similar advice "
"may apply to the unsigned counterparts (e.g., @code{size_t} instead of "
"@code{ptrdiff_t}, or @code{uintptr_t} instead of @code{intptr_t})."
msgstr ""

#. type: itemize
#: internals.texi.orig:1594
msgid "Prefer @code{int} for Emacs character codes, in the range 0 ..@: 0x3FFFFF."
msgstr ""

#. type: itemize
#: internals.texi.orig:1603
msgid ""
"Prefer @code{ptrdiff_t} for sizes, i.e., for integers bounded by the maximum "
"size of any individual C object or by the maximum number of elements in any "
"C array.  This is part of Emacs's general preference for signed types.  "
"Using @code{ptrdiff_t} limits objects to @code{PTRDIFF_MAX} bytes, but "
"larger objects would cause trouble anyway since they would break pointer "
"subtraction, so this does not impose an arbitrary limit."
msgstr ""

#. type: itemize
#: internals.texi.orig:1611
msgid ""
"Prefer @code{intptr_t} for internal representations of pointers, or for "
"integers bounded only by the number of objects that can exist at any given "
"time or by the total number of bytes that can be allocated.  Currently Emacs "
"sometimes uses other types when @code{intptr_t} would be better; fixing this "
"is lower priority, as the code works as-is on Emacs's current porting "
"targets."
msgstr ""

#. type: itemize
#: internals.texi.orig:1616
msgid ""
"Prefer the Emacs-defined type @code{EMACS_INT} for representing values "
"converted to or from Emacs Lisp fixnums, as fixnum arithmetic is based on "
"@code{EMACS_INT}."
msgstr ""

#. type: itemize
#: internals.texi.orig:1623
msgid ""
"When representing a system value (such as a file size or a count of seconds "
"since the Epoch), prefer the corresponding system type (e.g., @code{off_t}, "
"@code{time_t}).  Do not assume that a system type is signed, unless this "
"assumption is known to be safe.  For example, although @code{off_t} is "
"always signed, @code{time_t} need not be."
msgstr ""

#. type: itemize
#: internals.texi.orig:1628
msgid ""
"Prefer the Emacs-defined type @code{printmax_t} for representing values that "
"might be any signed integer that can be printed, using a "
"@code{printf}-family function."
msgstr ""

#. type: itemize
#: internals.texi.orig:1632
msgid ""
"Prefer @code{intmax_t} for representing values that might be any signed "
"integer value."
msgstr ""

#. type: itemize
#: internals.texi.orig:1644
msgid ""
"Prefer @code{bool}, @code{false} and @code{true} for booleans.  Using "
"@code{bool} can make programs easier to read and a bit faster than using "
"@code{int}.  Although it is also OK to use @code{int}, @code{0} and "
"@code{1}, this older style is gradually being phased out.  When using "
"@code{bool}, respect the limitations of the replacement implementation of "
"@code{bool}, as documented in the source file @file{lib/stdbool.in.h}, so "
"that Emacs remains portable to pre-C99 platforms.  In particular, boolean "
"bitfields should be of type @code{bool_bf}, not @code{bool}, so that they "
"work correctly even when compiling Objective C with standard GCC."
msgstr ""

#. type: itemize
#: internals.texi.orig:1650
msgid ""
"In bitfields, prefer @code{unsigned int} or @code{signed int} to @code{int}, "
"as @code{int} is less portable: it might be signed, and might not be.  "
"Single-bit bit fields should be @code{unsigned int} or @code{bool_bf} so "
"that their values are 0 or 1."
msgstr ""
