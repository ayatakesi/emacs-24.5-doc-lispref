# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-10-31 08:31+0900\n"
"PO-Revision-Date: 2018-10-31 08:34+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: markers.texi.orig:6 markers.texi.orig:7
#, no-wrap
msgid "Markers"
msgstr ""

#. type: cindex
#: markers.texi.orig:8
#, no-wrap
msgid "markers"
msgstr ""

#. type: Plain text
#: markers.texi.orig:14
msgid "A @dfn{marker} is a Lisp object used to specify a position in a buffer relative to the surrounding text.  A marker changes its offset from the beginning of the buffer automatically whenever text is inserted or deleted, so that it stays with the two characters on either side of it."
msgstr ""

#. type: section
#: markers.texi.orig:25 markers.texi.orig:27 markers.texi.orig:28
#, no-wrap
msgid "Overview of Markers"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "The components of a marker, and how it relocates."
msgstr ""

#. type: section
#: markers.texi.orig:25 markers.texi.orig:119 markers.texi.orig:120
#, no-wrap
msgid "Predicates on Markers"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "Testing whether an object is a marker."
msgstr ""

#. type: node
#: markers.texi.orig:25 markers.texi.orig:144
#, no-wrap
msgid "Creating Markers"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "Making empty markers or markers at certain places."
msgstr ""

#. type: section
#: markers.texi.orig:25 markers.texi.orig:274 markers.texi.orig:275
#, no-wrap
msgid "Information from Markers"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "Finding the marker's buffer or character position."
msgstr ""

#. type: section
#: markers.texi.orig:25 markers.texi.orig:321 markers.texi.orig:322
#, no-wrap
msgid "Marker Insertion Types"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "Two ways a marker can relocate when you insert where it points."
msgstr ""

#. type: node
#: markers.texi.orig:25 markers.texi.orig:348
#, no-wrap
msgid "Moving Markers"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "Moving the marker to a new buffer or position."
msgstr ""

#. type: section
#: markers.texi.orig:25 markers.texi.orig:400 markers.texi.orig:401
#, no-wrap
msgid "The Mark"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "How \"the mark\" is implemented with a marker."
msgstr ""

#. type: section
#: markers.texi.orig:25 markers.texi.orig:662 markers.texi.orig:663
#, no-wrap
msgid "The Region"
msgstr ""

#. type: menuentry
#: markers.texi.orig:25
msgid "How to access \"the region\"."
msgstr ""

#. type: Plain text
#: markers.texi.orig:37
msgid "A marker specifies a buffer and a position in that buffer.  A marker can be used to represent a position in functions that require one, just as an integer could be used.  In that case, the marker's buffer is normally ignored.  Of course, a marker used in this way usually points to a position in the buffer that the function operates on, but that is entirely the programmer's responsibility.  @xref{Positions}, for a complete description of positions."
msgstr ""

#. type: Plain text
#: markers.texi.orig:47
msgid "A marker has three attributes: the marker position, the marker buffer, and the insertion type.  The marker position is an integer that is equivalent (at a given time) to the marker as a position in that buffer.  But the marker's position value can change during the life of the marker, and often does.  Insertion and deletion of text in the buffer relocate the marker.  The idea is that a marker positioned between two characters remains between those two characters despite insertion and deletion elsewhere in the buffer.  Relocation changes the integer equivalent of the marker."
msgstr ""

#. type: cindex
#: markers.texi.orig:48
#, no-wrap
msgid "marker relocation"
msgstr ""

#. type: Plain text
#: markers.texi.orig:55
msgid "Deleting text around a marker's position leaves the marker between the characters immediately before and after the deleted text.  Inserting text at the position of a marker normally leaves the marker either in front of or after the new text, depending on the marker's @dfn{insertion type} (@pxref{Marker Insertion Types})---unless the insertion is done with @code{insert-before-markers} (@pxref{Insertion})."
msgstr ""

#. type: cindex
#: markers.texi.orig:56
#, no-wrap
msgid "marker garbage collection"
msgstr ""

#. type: Plain text
#: markers.texi.orig:63
msgid "Insertion and deletion in a buffer must check all the markers and relocate them if necessary.  This slows processing in a buffer with a large number of markers.  For this reason, it is a good idea to make a marker point nowhere if you are sure you don't need it any more.  Markers that can no longer be accessed are eventually removed (@pxref{Garbage Collection})."
msgstr ""

#. type: cindex
#: markers.texi.orig:64
#, no-wrap
msgid "markers as numbers"
msgstr ""

#. type: Plain text
#: markers.texi.orig:69
msgid "Because it is common to perform arithmetic operations on a marker position, most of these operations (including @code{+} and @code{-}) accept markers as arguments.  In such cases, the marker stands for its current position."
msgstr ""

#. type: Plain text
#: markers.texi.orig:72
msgid "Here are examples of creating markers, setting markers, and moving point to markers:"
msgstr ""

#. type: group
#: markers.texi.orig:78
#, no-wrap
msgid ""
";; @r{Make a new marker that initially does not point anywhere:}\n"
"(setq m1 (make-marker))\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: group
#: markers.texi.orig:85
#, no-wrap
msgid ""
";; @r{Set @code{m1} to point between the 99th and 100th characters}\n"
";;   @r{in the current buffer:}\n"
"(set-marker m1 100)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:93
#, no-wrap
msgid ""
";; @r{Now insert one character at the beginning of the buffer:}\n"
"(goto-char (point-min))\n"
"     @result{} 1\n"
"(insert \"Q\")\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: markers.texi.orig:99
#, no-wrap
msgid ""
";; @r{@code{m1} is updated appropriately.}\n"
"m1\n"
"     @result{} #<marker at 101 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:110
#, no-wrap
msgid ""
";; @r{Two markers that point to the same position}\n"
";;   @r{are not @code{eq}, but they are @code{equal}.}\n"
"(setq m2 (copy-marker m1))\n"
"     @result{} #<marker at 101 in markers.texi>\n"
"(eq m1 m2)\n"
"     @result{} nil\n"
"(equal m1 m2)\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: markers.texi.orig:116
#, no-wrap
msgid ""
";; @r{When you are finished using a marker, make it point nowhere.}\n"
"(set-marker m1 nil)\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: cindex
#: markers.texi.orig:121
#, no-wrap
msgid "predicates for markers"
msgstr ""

#. type: cindex
#: markers.texi.orig:122
#, no-wrap
msgid "markers, predicates for"
msgstr ""

#. type: Plain text
#: markers.texi.orig:127
msgid "You can test an object to see whether it is a marker, or whether it is either an integer or a marker.  The latter test is useful in connection with the arithmetic functions that work with both markers and integers."
msgstr ""

#. type: defun
#: markers.texi.orig:128
#, no-wrap
msgid "markerp object"
msgstr ""

#. type: defun
#: markers.texi.orig:132
msgid "This function returns @code{t} if @var{object} is a marker, @code{nil} otherwise.  Note that integers are not markers, even though many functions will accept either a marker or an integer."
msgstr ""

#. type: defun
#: markers.texi.orig:134
#, no-wrap
msgid "integer-or-marker-p object"
msgstr ""

#. type: defun
#: markers.texi.orig:137
msgid "This function returns @code{t} if @var{object} is an integer or a marker, @code{nil} otherwise."
msgstr ""

#. type: defun
#: markers.texi.orig:139
#, no-wrap
msgid "number-or-marker-p object"
msgstr ""

#. type: defun
#: markers.texi.orig:142
msgid "This function returns @code{t} if @var{object} is a number (either integer or floating point) or a marker, @code{nil} otherwise."
msgstr ""

#. type: section
#: markers.texi.orig:145
#, no-wrap
msgid "Functions that Create Markers"
msgstr ""

#. type: cindex
#: markers.texi.orig:146
#, no-wrap
msgid "creating markers"
msgstr ""

#. type: cindex
#: markers.texi.orig:147
#, no-wrap
msgid "marker creation"
msgstr ""

#. type: Plain text
#: markers.texi.orig:153
msgid "When you create a new marker, you can make it point nowhere, or point to the present position of point, or to the beginning or end of the accessible portion of the buffer, or to the same place as another given marker."
msgstr ""

#. type: Plain text
#: markers.texi.orig:156
msgid "The next four functions all return markers with insertion type @code{nil}.  @xref{Marker Insertion Types}."
msgstr ""

#. type: defun
#: markers.texi.orig:157
#, no-wrap
msgid "make-marker"
msgstr ""

#. type: defun
#: markers.texi.orig:160
msgid "This function returns a newly created marker that does not point anywhere."
msgstr ""

#. type: group
#: markers.texi.orig:165
#, no-wrap
msgid ""
"(make-marker)\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: defun
#: markers.texi.orig:169
#, no-wrap
msgid "point-marker"
msgstr ""

#. type: defun
#: markers.texi.orig:173
msgid "This function returns a new marker that points to the present position of point in the current buffer.  @xref{Point}.  For an example, see @code{copy-marker}, below."
msgstr ""

#. type: defun
#: markers.texi.orig:175
#, no-wrap
msgid "point-min-marker"
msgstr ""

#. type: defun
#: markers.texi.orig:179
msgid "This function returns a new marker that points to the beginning of the accessible portion of the buffer.  This will be the beginning of the buffer unless narrowing is in effect.  @xref{Narrowing}."
msgstr ""

#. type: defun
#: markers.texi.orig:181
#, no-wrap
msgid "point-max-marker"
msgstr ""

#. type: defun
#: markers.texi.orig:185
msgid "This function returns a new marker that points to the end of the accessible portion of the buffer.  This will be the end of the buffer unless narrowing is in effect.  @xref{Narrowing}."
msgstr ""

#. type: defun
#: markers.texi.orig:189
msgid "Here are examples of this function and @code{point-min-marker}, shown in a buffer containing a version of the source file for the text of this chapter."
msgstr ""

#. type: group
#: markers.texi.orig:196
#, no-wrap
msgid ""
"(point-min-marker)\n"
"     @result{} #<marker at 1 in markers.texi>\n"
"(point-max-marker)\n"
"     @result{} #<marker at 24080 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:201
#, no-wrap
msgid ""
"(narrow-to-region 100 200)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: markers.texi.orig:205
#, no-wrap
msgid ""
"(point-min-marker)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:209
#, no-wrap
msgid ""
"(point-max-marker)\n"
"     @result{} #<marker at 200 in markers.texi>\n"
msgstr ""

#. type: defun
#: markers.texi.orig:213
#, no-wrap
msgid "copy-marker &optional marker-or-integer insertion-type"
msgstr ""

#. type: defun
#: markers.texi.orig:219
msgid "If passed a marker as its argument, @code{copy-marker} returns a new marker that points to the same place and the same buffer as does @var{marker-or-integer}.  If passed an integer as its argument, @code{copy-marker} returns a new marker that points to position @var{marker-or-integer} in the current buffer."
msgstr ""

#. type: defun
#: markers.texi.orig:222
msgid "The new marker's insertion type is specified by the argument @var{insertion-type}.  @xref{Marker Insertion Types}."
msgstr ""

#. type: group
#: markers.texi.orig:236
#, no-wrap
msgid ""
"(copy-marker 0)\n"
"     @result{} #<marker at 1 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:241
#, no-wrap
msgid ""
"(copy-marker 90000)\n"
"     @result{} #<marker at 24080 in markers.texi>\n"
msgstr ""

#. type: defun
#: markers.texi.orig:246
msgid "An error is signaled if @var{marker} is neither a marker nor an integer."
msgstr ""

#. type: Plain text
#: markers.texi.orig:251
msgid "Two distinct markers are considered @code{equal} (even though not @code{eq}) to each other if they have the same position and buffer, or if they both point nowhere."
msgstr ""

#. type: group
#: markers.texi.orig:256
#, no-wrap
msgid ""
"(setq p (point-marker))\n"
"     @result{} #<marker at 2139 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:261
#, no-wrap
msgid ""
"(setq q (copy-marker p))\n"
"     @result{} #<marker at 2139 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:266
#, no-wrap
msgid ""
"(eq p q)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: markers.texi.orig:271
#, no-wrap
msgid ""
"(equal p q)\n"
"     @result{} t\n"
msgstr ""

#. type: cindex
#: markers.texi.orig:276
#, no-wrap
msgid "marker information"
msgstr ""

#. type: Plain text
#: markers.texi.orig:280
msgid "This section describes the functions for accessing the components of a marker object."
msgstr ""

#. type: defun
#: markers.texi.orig:281
#, no-wrap
msgid "marker-position marker"
msgstr ""

#. type: defun
#: markers.texi.orig:284
msgid "This function returns the position that @var{marker} points to, or @code{nil} if it points nowhere."
msgstr ""

#. type: defun
#: markers.texi.orig:286
#, no-wrap
msgid "marker-buffer marker"
msgstr ""

#. type: defun
#: markers.texi.orig:289
msgid "This function returns the buffer that @var{marker} points into, or @code{nil} if it points nowhere."
msgstr ""

#. type: group
#: markers.texi.orig:296
#, no-wrap
msgid ""
"(setq m (make-marker))\n"
"     @result{} #<marker in no buffer>\n"
msgstr ""

#. type: group
#: markers.texi.orig:300
#, no-wrap
msgid ""
"(marker-position m)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: markers.texi.orig:304
#, no-wrap
msgid ""
"(marker-buffer m)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: markers.texi.orig:309
#, no-wrap
msgid ""
"(set-marker m 3770 (current-buffer))\n"
"     @result{} #<marker at 3770 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:313
#, no-wrap
msgid ""
"(marker-buffer m)\n"
"     @result{} #<buffer markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:317
#, no-wrap
msgid ""
"(marker-position m)\n"
"     @result{} 3770\n"
msgstr ""

#. type: cindex
#: markers.texi.orig:324
#, no-wrap
msgid "insertion type of a marker"
msgstr ""

#. type: Plain text
#: markers.texi.orig:331
msgid "When you insert text directly at the place where a marker points, there are two possible ways to relocate that marker: it can point before the inserted text, or point after it.  You can specify which one a given marker should do by setting its @dfn{insertion type}.  Note that use of @code{insert-before-markers} ignores markers' insertion types, always relocating a marker to point after the inserted text."
msgstr ""

#. type: defun
#: markers.texi.orig:332
#, no-wrap
msgid "set-marker-insertion-type marker type"
msgstr ""

#. type: defun
#: markers.texi.orig:337
msgid "This function sets the insertion type of marker @var{marker} to @var{type}.  If @var{type} is @code{t}, @var{marker} will advance when text is inserted at its position.  If @var{type} is @code{nil}, @var{marker} does not advance when text is inserted there."
msgstr ""

#. type: defun
#: markers.texi.orig:339
#, no-wrap
msgid "marker-insertion-type marker"
msgstr ""

#. type: defun
#: markers.texi.orig:341
msgid "This function reports the current insertion type of @var{marker}."
msgstr ""

#. type: Plain text
#: markers.texi.orig:347
msgid "Most functions that create markers, without an argument allowing to specify the insertion type, create them with insertion type @code{nil}.  Also, the mark has, by default, insertion type @code{nil}."
msgstr ""

#. type: section
#: markers.texi.orig:349
#, no-wrap
msgid "Moving Marker Positions"
msgstr ""

#. type: cindex
#: markers.texi.orig:350
#, no-wrap
msgid "moving markers"
msgstr ""

#. type: cindex
#: markers.texi.orig:351
#, no-wrap
msgid "marker, how to move position"
msgstr ""

#. type: Plain text
#: markers.texi.orig:358
msgid "This section describes how to change the position of an existing marker.  When you do this, be sure you know whether the marker is used outside of your program, and, if so, what effects will result from moving it---otherwise, confusing things may happen in other parts of Emacs."
msgstr ""

#. type: defun
#: markers.texi.orig:359
#, no-wrap
msgid "set-marker marker position &optional buffer"
msgstr ""

#. type: defun
#: markers.texi.orig:363
msgid "This function moves @var{marker} to @var{position} in @var{buffer}.  If @var{buffer} is not provided, it defaults to the current buffer."
msgstr ""

#. type: defun
#: markers.texi.orig:373
msgid "If @var{position} is @code{nil} or a marker that points nowhere, then @var{marker} is set to point nowhere."
msgstr ""

#. type: defun
#: markers.texi.orig:375
msgid "The value returned is @var{marker}."
msgstr ""

#. type: group
#: markers.texi.orig:380
#, no-wrap
msgid ""
"(setq m (point-marker))\n"
"     @result{} #<marker at 4714 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:384
#, no-wrap
msgid ""
"(set-marker m 55)\n"
"     @result{} #<marker at 55 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:388
#, no-wrap
msgid ""
"(setq b (get-buffer \"foo\"))\n"
"     @result{} #<buffer foo>\n"
msgstr ""

#. type: group
#: markers.texi.orig:392
#, no-wrap
msgid ""
"(set-marker m 0 b)\n"
"     @result{} #<marker at 1 in foo>\n"
msgstr ""

#. type: defun
#: markers.texi.orig:396
#, no-wrap
msgid "move-marker marker position &optional buffer"
msgstr ""

#. type: defun
#: markers.texi.orig:398
msgid "This is another name for @code{set-marker}."
msgstr ""

#. type: cindex
#: markers.texi.orig:402
#, no-wrap
msgid "mark, the"
msgstr ""

#. type: Plain text
#: markers.texi.orig:409
msgid "Each buffer has a special marker, which is designated @dfn{the mark}.  When a buffer is newly created, this marker exists but does not point anywhere; this means that the mark ``doesn't exist'' in that buffer yet.  Subsequent commands can set the mark."
msgstr ""

#. type: Plain text
#: markers.texi.orig:419
msgid "The mark specifies a position to bound a range of text for many commands, such as @code{kill-region} and @code{indent-rigidly}.  These commands typically act on the text between point and the mark, which is called the @dfn{region}.  If you are writing a command that operates on the region, don't examine the mark directly; instead, use @code{interactive} with the @samp{r} specification.  This provides the values of point and the mark as arguments to the command in an interactive call, but permits other Lisp programs to specify arguments explicitly.  @xref{Interactive Codes}."
msgstr ""

#. type: Plain text
#: markers.texi.orig:426
msgid "Some commands set the mark as a side-effect.  Commands should do this only if it has a potential use to the user, and never for their own internal purposes.  For example, the @code{replace-regexp} command sets the mark to the value of point before doing any replacements, because this enables the user to move back there conveniently after the replace is finished."
msgstr ""

#. type: Plain text
#: markers.texi.orig:435
msgid "Once the mark ``exists'' in a buffer, it normally never ceases to exist.  However, it may become @dfn{inactive}, if Transient Mark mode is enabled.  The buffer-local variable @code{mark-active}, if non-@code{nil}, means that the mark is active.  A command can call the function @code{deactivate-mark} to deactivate the mark directly, or it can request deactivation of the mark upon return to the editor command loop by setting the variable @code{deactivate-mark} to a non-@code{nil} value."
msgstr ""

#. type: Plain text
#: markers.texi.orig:441
msgid "If Transient Mark mode is enabled, certain editing commands that normally apply to text near point, apply instead to the region when the mark is active.  This is the main motivation for using Transient Mark mode.  (Another is that this enables highlighting of the region when the mark is active.  @xref{Display}.)"
msgstr ""

#. type: cindex
#: markers.texi.orig:442
#, no-wrap
msgid "mark ring"
msgstr ""

#. type: Plain text
#: markers.texi.orig:449
msgid "In addition to the mark, each buffer has a @dfn{mark ring} which is a list of markers containing previous values of the mark.  When editing commands change the mark, they should normally save the old value of the mark on the mark ring.  The variable @code{mark-ring-max} specifies the maximum number of entries in the mark ring; once the list becomes this long, adding a new element deletes the last element."
msgstr ""

#. type: Plain text
#: markers.texi.orig:453
msgid "There is also a separate global mark ring, but that is used only in a few particular user-level commands, and is not relevant to Lisp programming.  So we do not describe it here."
msgstr ""

#. type: defun
#: markers.texi.orig:454
#, no-wrap
msgid "mark &optional force"
msgstr ""

#. type: cindex
#: markers.texi.orig:455
#, no-wrap
msgid "current buffer mark"
msgstr ""

#. type: defun
#: markers.texi.orig:458
msgid "This function returns the current buffer's mark position as an integer, or @code{nil} if no mark has ever been set in this buffer."
msgstr ""

#. type: defun
#: markers.texi.orig:464
msgid "If Transient Mark mode is enabled, and @code{mark-even-if-inactive} is @code{nil}, @code{mark} signals an error if the mark is inactive.  However, if @var{force} is non-@code{nil}, then @code{mark} disregards inactivity of the mark, and returns the mark position (or @code{nil})  anyway."
msgstr ""

#. type: defun
#: markers.texi.orig:466
#, no-wrap
msgid "mark-marker"
msgstr ""

#. type: defun
#: markers.texi.orig:471
msgid "This function returns the marker that represents the current buffer's mark.  It is not a copy, it is the marker used internally.  Therefore, changing this marker's position will directly affect the buffer's mark.  Don't do that unless that is the effect you want."
msgstr ""

#. type: group
#: markers.texi.orig:476
#, no-wrap
msgid ""
"(setq m (mark-marker))\n"
"     @result{} #<marker at 3420 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:480
#, no-wrap
msgid ""
"(set-marker m 100)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: group
#: markers.texi.orig:484
#, no-wrap
msgid ""
"(mark-marker)\n"
"     @result{} #<marker at 100 in markers.texi>\n"
msgstr ""

#. type: defun
#: markers.texi.orig:491
msgid "Like any marker, this marker can be set to point at any buffer you like.  If you make it point at any buffer other than the one of which it is the mark, it will yield perfectly consistent, but rather odd, results.  We recommend that you not do it!"
msgstr ""

#. type: defun
#: markers.texi.orig:493
#, no-wrap
msgid "set-mark position"
msgstr ""

#. type: defun
#: markers.texi.orig:496
msgid "This function sets the mark to @var{position}, and activates the mark.  The old value of the mark is @emph{not} pushed onto the mark ring."
msgstr ""

#. type: defun
#: markers.texi.orig:502
msgid "@strong{Please note:} Use this function only if you want the user to see that the mark has moved, and you want the previous mark position to be lost.  Normally, when a new mark is set, the old one should go on the @code{mark-ring}.  For this reason, most applications should use @code{push-mark} and @code{pop-mark}, not @code{set-mark}."
msgstr ""

#. type: defun
#: markers.texi.orig:510
msgid "Novice Emacs Lisp programmers often try to use the mark for the wrong purposes.  The mark saves a location for the user's convenience.  An editing command should not alter the mark unless altering the mark is part of the user-level functionality of the command.  (And, in that case, this effect should be documented.)  To remember a location for internal use in the Lisp program, store it in a Lisp variable.  For example:"
msgstr ""

#. type: group
#: markers.texi.orig:516
#, no-wrap
msgid ""
"(let ((beg (point)))\n"
"  (forward-line 1)\n"
"  (delete-region beg (point))).\n"
msgstr ""

#. type: defun
#: markers.texi.orig:520
#, no-wrap
msgid "push-mark &optional position nomsg activate"
msgstr ""

#. type: defun
#: markers.texi.orig:526
msgid "This function sets the current buffer's mark to @var{position}, and pushes a copy of the previous mark onto @code{mark-ring}.  If @var{position} is @code{nil}, then the value of point is used."
msgstr ""

#. type: defun
#: markers.texi.orig:529
msgid "The function @code{push-mark} normally @emph{does not} activate the mark.  To do that, specify @code{t} for the argument @var{activate}."
msgstr ""

#. type: defun
#: markers.texi.orig:532
msgid "A @samp{Mark set} message is displayed unless @var{nomsg} is non-@code{nil}."
msgstr ""

#. type: defun
#: markers.texi.orig:534
#, no-wrap
msgid "pop-mark"
msgstr ""

#. type: defun
#: markers.texi.orig:542
msgid "This function pops off the top element of @code{mark-ring} and makes that mark become the buffer's actual mark.  This does not move point in the buffer, and it does nothing if @code{mark-ring} is empty.  It deactivates the mark."
msgstr ""

#. type: defopt
#: markers.texi.orig:544
#, no-wrap
msgid "transient-mark-mode"
msgstr ""

#. type: defopt
#: markers.texi.orig:549
msgid "This variable, if non-@code{nil}, enables Transient Mark mode.  In Transient Mark mode, every buffer-modifying primitive sets @code{deactivate-mark}.  As a consequence, most commands that modify the buffer also deactivate the mark."
msgstr ""

#. type: defopt
#: markers.texi.orig:554
msgid "When Transient Mark mode is enabled and the mark is active, many commands that normally apply to the text near point instead apply to the region.  Such commands should use the function @code{use-region-p} to test whether they should operate on the region.  @xref{The Region}."
msgstr ""

#. type: defopt
#: markers.texi.orig:564
msgid "Lisp programs can set @code{transient-mark-mode} to non-@code{nil}, non-@code{t} values to enable Transient Mark mode temporarily.  If the value is @code{lambda}, Transient Mark mode is automatically turned off after any action, such as buffer modification, that would normally deactivate the mark.  If the value is @w{@code{(only . @var{oldval})}}, then @code{transient-mark-mode} is set to the value @var{oldval} after any subsequent command that moves point and is not shift-translated (@pxref{Key Sequence Input, shift-translation}), or after any other action that would normally deactivate the mark."
msgstr ""

#. type: defopt
#: markers.texi.orig:566
#, no-wrap
msgid "mark-even-if-inactive"
msgstr ""

#. type: defopt
#: markers.texi.orig:572
msgid "If this is non-@code{nil}, Lisp programs and the Emacs user can use the mark even when it is inactive.  This option affects the behavior of Transient Mark mode.  When the option is non-@code{nil}, deactivation of the mark turns off region highlighting, but commands that use the mark behave as if the mark were still active."
msgstr ""

#. type: defvar
#: markers.texi.orig:574
#, no-wrap
msgid "deactivate-mark"
msgstr ""

#. type: defvar
#: markers.texi.orig:580
msgid "If an editor command sets this variable non-@code{nil}, then the editor command loop deactivates the mark after the command returns (if Transient Mark mode is enabled).  All the primitives that change the buffer set @code{deactivate-mark}, to deactivate the mark when the command is finished."
msgstr ""

#. type: defvar
#: markers.texi.orig:585
msgid "To write Lisp code that modifies the buffer without causing deactivation of the mark at the end of the command, bind @code{deactivate-mark} to @code{nil} around the code that does the modification.  For example:"
msgstr ""

#. type: example
#: markers.texi.orig:589
#, no-wrap
msgid ""
"(let (deactivate-mark)\n"
"  (insert \" \"))\n"
msgstr ""

#. type: defun
#: markers.texi.orig:592
#, no-wrap
msgid "deactivate-mark &optional force"
msgstr ""

#. type: defun
#: markers.texi.orig:596
msgid "If Transient Mark mode is enabled or @var{force} is non-@code{nil}, this function deactivates the mark and runs the normal hook @code{deactivate-mark-hook}.  Otherwise, it does nothing."
msgstr ""

#. type: defvar
#: markers.texi.orig:598
#, no-wrap
msgid "mark-active"
msgstr ""

#. type: defvar
#: markers.texi.orig:604
msgid "The mark is active when this variable is non-@code{nil}.  This variable is always buffer-local in each buffer.  Do @emph{not} use the value of this variable to decide whether a command that normally operates on text near point should operate on the region instead.  Use the function @code{use-region-p} for that (@pxref{The Region})."
msgstr ""

#. type: defvar
#: markers.texi.orig:606
#, no-wrap
msgid "activate-mark-hook"
msgstr ""

#. type: defvarx
#: markers.texi.orig:607
#, no-wrap
msgid "deactivate-mark-hook"
msgstr ""

#. type: defvar
#: markers.texi.orig:612
msgid "These normal hooks are run, respectively, when the mark becomes active and when it becomes inactive.  The hook @code{activate-mark-hook} is also run at the end of the command loop if the mark is active and it is possible that the region may have changed."
msgstr ""

#. type: defun
#: markers.texi.orig:622
#, no-wrap
msgid "handle-shift-selection"
msgstr ""

#. type: defun
#: markers.texi.orig:629
msgid "This function implements the ``shift-selection'' behavior of point-motion commands.  @xref{Shift Selection,,, emacs, The GNU Emacs Manual}.  It is called automatically by the Emacs command loop whenever a command with a @samp{^} character in its @code{interactive} spec is invoked, before the command itself is executed (@pxref{Interactive Codes, ^})."
msgstr ""

#. type: defun
#: markers.texi.orig:637
msgid "If @code{shift-select-mode} is non-@code{nil} and the current command was invoked via shift translation (@pxref{Key Sequence Input, shift-translation}), this function sets the mark and temporarily activates the region, unless the region was already temporarily activated in this way.  Otherwise, if the region has been activated temporarily, it deactivates the mark and restores the variable @code{transient-mark-mode} to its earlier value."
msgstr ""

#. type: defvar
#: markers.texi.orig:639
#, no-wrap
msgid "mark-ring"
msgstr ""

#. type: defvar
#: markers.texi.orig:642
msgid "The value of this buffer-local variable is the list of saved former marks of the current buffer, most recent first."
msgstr ""

#. type: group
#: markers.texi.orig:649
#, no-wrap
msgid ""
"mark-ring\n"
"@result{} (#<marker at 11050 in markers.texi>\n"
"    #<marker at 10832 in markers.texi>\n"
"    @dots{})\n"
msgstr ""

#. type: defopt
#: markers.texi.orig:653
#, no-wrap
msgid "mark-ring-max"
msgstr ""

#. type: defopt
#: markers.texi.orig:657
msgid "The value of this variable is the maximum size of @code{mark-ring}.  If more marks than this are pushed onto the @code{mark-ring}, @code{push-mark} discards an old mark when it adds a new one."
msgstr ""

#. type: cindex
#: markers.texi.orig:669
#, no-wrap
msgid "region"
msgstr ""

#. type: Plain text
#: markers.texi.orig:675
msgid "The text between point and the mark is known as @dfn{the region}.  Various functions operate on text delimited by point and the mark, but only those functions specifically related to the region itself are described here."
msgstr ""

#. type: Plain text
#: markers.texi.orig:680
msgid "The next two functions signal an error if the mark does not point anywhere.  If Transient Mark mode is enabled and @code{mark-even-if-inactive} is @code{nil}, they also signal an error if the mark is inactive."
msgstr ""

#. type: defun
#: markers.texi.orig:681
#, no-wrap
msgid "region-beginning"
msgstr ""

#. type: defun
#: markers.texi.orig:685
msgid "This function returns the position of the beginning of the region (as an integer).  This is the position of either point or the mark, whichever is smaller."
msgstr ""

#. type: defun
#: markers.texi.orig:687
#, no-wrap
msgid "region-end"
msgstr ""

#. type: defun
#: markers.texi.orig:691
msgid "This function returns the position of the end of the region (as an integer).  This is the position of either point or the mark, whichever is larger."
msgstr ""

#. type: Plain text
#: markers.texi.orig:699
msgid "Instead of using @code{region-beginning} and @code{region-end}, a command designed to operate on a region should normally use @code{interactive} with the @samp{r} specification to find the beginning and end of the region.  This lets other Lisp programs specify the bounds explicitly as arguments.  @xref{Interactive Codes}."
msgstr ""

#. type: defun
#: markers.texi.orig:700
#, no-wrap
msgid "use-region-p"
msgstr ""

#. type: defun
#: markers.texi.orig:705
msgid "This function returns @code{t} if Transient Mark mode is enabled, the mark is active, and there is a valid region in the buffer.  This function is intended to be used by commands that operate on the region, instead of on text near point, when the mark is active."
msgstr ""

#. type: cindex
#: markers.texi.orig:706
#, no-wrap
msgid "empty region"
msgstr ""

#. type: vindex
#: markers.texi.orig:707
#, no-wrap
msgid "use-empty-active-region"
msgstr ""

#. type: defun
#: markers.texi.orig:714
msgid "A region is valid if it has a non-zero size, or if the user option @code{use-empty-active-region} is non-@code{nil} (by default, it is @code{nil}).  The function @code{region-active-p} is similar to @code{use-region-p}, but considers all regions as valid.  In most cases, you should not use @code{region-active-p}, since if the region is empty it is often more appropriate to operate on point."
msgstr ""
