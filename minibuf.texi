@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Minibuffers
@chapter Minibuffers
@cindex arguments, reading
@cindex complex arguments
@cindex minibuffer

  @dfn{ミニバッファー(minibuffer)}とは、単一の数プレフィックス引数より複雑な引数を読み取るためにEmacsコマンドが使用する、特別なバッファーのことです。これらの引数にはファイル名、バッファー名、(@kbd{M-x}での)コマンド名が含まれます。ミニバッファーはフレームの最下行、エコーエリア(@ref{The
Echo Area}を参照)と同じ場所に表示されますが、引数を読み取るときだけ使用されます。

@menu
* Intro to Minibuffers::     ミニバッファーに関する基本的な情報。
* Text from Minibuffer::     そのままのテキスト文字列を読み取る方法。
* Object from Minibuffer::   Lispオブジェクトや式を読み取る方法。
* Minibuffer History::       ユーザーが再利用できるように以前のミニバッファー入力は記録される。
* Initial Input::            ミニバッファーにたいして初期内容を指定する。
* Completion::               補完の呼び出しとカスタマイズ方法。
* Yes-or-No Queries::        問いにたいし単純な答えを求める。
* Multiple Queries::         一連の似たような問いに答える。
* Reading a Password::       端末からパスワードを読み取る。
* Minibuffer Commands::      ミニバッファー内でキーバインドとして使用されるコマンド。
* Minibuffer Windows::       特殊なミニバッファーウィンドウを処理する。
* Minibuffer Contents::      どのようなコマンドがミニバッファーのテキストにアクセスするか。
* Recursive Mini::           ミニバッファーへの再帰的なエントリーが許容されるかどうか。
* Minibuffer Misc::          カスタマイズ用のさまざまなフックや変数。
@end menu

@node Intro to Minibuffers
@section Introduction to Minibuffers

  ほとんどの点において、ミニバッファーは普通のEmacsバッファーです。編集コマンドのようなバッファーにたいするほとんどの操作は、ミニバッファーでも機能します。しかし、バッファーを管理する操作の多くは、ミニバッファーに適用できません。ミニバッファーは常に@w{@samp{
*Minibuf-@var{number}*}}という形式の名前をもち、変更することはできません。ミニバッファーはミニバッファー用の特殊なウィンドウだけに表示されます。これらのウィンドウは常にフレーム最下に表示されます。(フレームにミニバッファーウィンドウがないときや、ミニバッファーウィンドウだけをもつ特殊なフレームもあります。)@ref{Minibuffers
and Frames}を参照してください。

  ミニバッファー内のテキストは常に@dfn{プロンプト文字列(prompt
string)}で始まります。これはミニバッファーを使用しているプログラムが、ユーザーにたいしてどのような種類の入力が求められているか告げるために指定するテキストです。このテキストは意図せずに変更してしまわないように、読み取り専用としてマークされます。このテキストは@code{beginning-of-line}、@code{forward-word}、@code{forward-sentence}、@code{forward-paragraph}を含む特定の移動用関数が、プロンプトと実際のテキストの境界でストップするように、フィールド(@ref{Fields}を参照)としてもマークされています。

@c See http://debbugs.gnu.org/11276
  ミニバッファーのウィンドウは、通常は1行です。ミニバッファーのコンテンツがより多くのスペースを要求する場合は、自動的に拡張されます。ミニバッファーのウィンドウがアクティブな間は、ウィンドウのサイズ変更コマンドで一時的にウィンドウのサイズを変更できます。サイズの変更は、ミニバッファーをexitしたとき、通常のサイズにリバートされます。ミニバッファーがアクティブでないときはフレーム内の他のウィンドウでウィンドウのサイズ変更コマンドを使用するか、マウスでモードラインをドラッグして、ミニバッファーのサイズを永続的に変更できます。(現実装では、これが機能するには@code{resize-mini-windows}が@code{nil}でなければなりません。)
フレームがミニバッファーだけを含む場合は、そのフレームのサイズを変更してミニバッファーのサイズを変更できます。

  ミニバッファーの使用により入力イベントが読み取られ、@code{this-command}や@code{last-command}のような変数の値が変更されます(@ref{Command
Loop Info}を参照)。プログラムにそれらを変更させたくない場合は、ミニバッファーを使用するコードの前後でそれらをバインドするべきです。

  ある状況下では、アクティブなミニバッファーが存在するときでもコマンドがミニバッファーを使用できます。そのようなミニバッファーは@dfn{再帰ミニバッファー(recursive
minibuffer)}と呼ばれます。この場合、最初のミニバッファーは@w{@samp{
*Minibuf-1*}}という名前になります。再帰ミニバッファーはミニバッファー名の最後の数字を増加させて命名されます。(名前はスペースで始まるので、通常のバッファーリストには表示されません。)
再帰ミニバッファーが複数ある場合は、最内の(もっとも最近にエンターされた)ミニバッファーがアクティブなミニバッファーになります。このバッファーが、通常ではミニバッファーと呼ばれるバッファーです。変数@code{enable-recursive-minibuffers}、またはコマンドシンボルのその名前のプロパティをセットすることにより再帰ミニバッファーを許可、または禁止できます(@ref{Recursive
Mini}を参照)。

  他のバッファーと同様、ミニバッファーは特別なキーバインドを指定するためにローカルキーマップ(@ref{Keymaps}を参照)を使用します。ミニバッファーを呼び出す関数も、処理を行うためにローカルマップをセットアップします。補完なしのミニバッファーローカルマップについては、@ref{Text
from Minibuffer}を参照してください。補完つきのミニバッファーローカルマップについては、@ref{Completion
Commands}を参照してください。

@cindex inactive minibuffer
  ミニバッファーが非アクティブのときのメジャーモードは@code{minibuffer-inactive-mode}で、キーマップは@code{minibuffer-inactive-mode-map}です。これらは、実際にはミニバッファーが別フレームにある場合だけ、便利です。@ref{Minibuffers
and Frames}を参照してください。

  Emacsがバッチモードで実行されている場合、ミニバッファーからの読み取りリクエストは、実装にはEmacs開始時に提供された標準入力記述子から行を読み取ります。これは基本的な入力だけをサポートします。特別なミニバッファーの機能(ヒストリー、補完、パスワードのマスクなど)は、バッチモードでは利用できません。

@node Text from Minibuffer
@section Reading Text Strings with the Minibuffer
@cindex minibuffer input, reading text strings

  ミニバッファー入力にたいする基本的なプリミティブは@code{read-from-minibuffer}で、これは文字列とLispオブジェクトの両方からテキスト表現されたフォームを読み取ることができます。関数@code{read-regexp}は、特別な種類の文字列である正規表現式(@ref{Regular
Expressions}を参照)の読み取りに使用されます。コマンドや変数、ファイル名などの読み取りに特化した関数もあります(@ref{Completion}を参照)。

  ほとんどの場合では、Lisp関数の途中でミニバッファー入力関数を呼び出すべきではありません。かわりに@code{interactive}指定されたコマンドの引数読み取りの一部として、すべてのミニバッファー入力を行います。@ref{Defining
Commands}を参照してください。

@defun read-from-minibuffer prompt &optional initial keymap read history default inherit-input-method
この関数は、ミニバッファーから入力を取得するもっとも一般的な手段である。デフォルトでは、任意のテキストを受け入れて、それを文字列としてリターンする。しかし、@var{read}が非@code{nil}の場合は、テキストをLispオブジェクトに変換するために@code{read}を使用する(@ref{Input
Functions}を参照)。

この関数が最初に行うのは、ミニバッファーをアクティブにして、プロンプトに@var{prompt}(文字列でなければならない)を用いてミニバッファーを表示することである。その後に、ユーザーはミニバッファーでテキストを編集できる。

ミニバッファーをexitするためにユーザーがコマンドをタイプするとき、@code{read-from-minibuffer}はミニバッファー内のテキストからリターン値を構築する。通常はそのテキストを含む文字列がリターンされる。しかし、@var{read}が非@code{nil}の場合、@code{read-from-minibuffer}はテキストを読み込んで結果を未評価のLispオブジェクトでリターンする。(読み取りについての詳細は、@xref{Input
Functions}を参照のこと。)

引数@var{default}は、ヒストリーコマンドを通じて利用できるデフォルト値を指定する。値には文字列、文字列リスト、または@code{nil}を指定する。文字列または文字列リストは、ユーザーが@kbd{M-n}で利用可能な``未来のヒストリー(future
history)''になります。

@var{read}が非@code{nil}の場合は、ユーザーの入力が空のときの@code{read}の入力としても、@var{default}が使用される。@var{default}が文字列リストの!は、最初の文字列が入力として使用される。@var{default}が@code{nil}の場合、空の入力は@code{end-of-file}エラーとなる。しかし通常(@var{read}が@code{nil})の場合には、ユーザーの入力が空のとき@code{read-from-minibuffer}は@var{default}を無視して、空文字列@code{""}をリターンする。この点において、この関数はこのチャプターの他のどのミニバッファー入力関数とも異なる。

@var{keymap}が非@code{nil}の場合、そのキーマップはミニバッファー内で使用されるローカルキーマップとなる。@var{keymap}が省略、または@code{nil}の場合は、@code{minibuffer-local-map}の値がキーマップとして使用される。キーマップの指定は、補完のようなさまざまなアプリケーションにたいしてミニバッファーをカスタマイズする、もっとも重要な方法である。

引数@var{history}は、入力の保存やミニバッファー内で使用されるヒストリーコマンドが使用するヒストリーリスト変数を指定する。デフォルトは@code{minibuffer-history}である。同様に、オプションでヒストリーリスト内の開始位置を指定できる。@ref{Minibuffer
History}を参照のこと。

変数@code{minibuffer-allow-text-properties}が非@code{nil}の場合には、リターンされる文字列にはミニバッファーでのすべてのテキストプロパティが含まれる。それ以外では、値がリターンされるときすべてのテキストプロパティが取り除かれる。

引数@var{inherit-input-method}が非@code{nil}の場合には、ミニバッファーにエンターする前にカレントだったバッファーが何であれ、カレントのインプットメソッド(@ref{Input
Methods}を参照)、および@code{enable-multibyte-characters}のセッティング(@ref{Text
Representations}を参照)が継承される。

ほとんどの場合、@var{initial}の使用は推奨されない。非@code{nil}値の使用は、@var{history}にたいするコンスセル指定と組み合わせる場合のみ推奨する。@ref{Initial
Input}を参照のこと。
@end defun

@defun read-string prompt &optional initial history default inherit-input-method
この関数はミニバッファーから文字列を読み取り、それをリターンする。引数@var{prompt}、@var{initial}、@var{history}、@var{inherit-input-method}は@code{read-from-minibuffer}で使用する場合と同様。使用されるキーマップは@code{minibuffer-local-map}である。

オプション引数@var{default}は@code{read-from-minibuffer}の場合と同様に使用されるが、ユーザーの入力が空の場合にリターンするデフォルト値も指定する。@code{read-from-minibuffer}の場合と同様、値は文字列、文字列リスト、または@code{nil}(空文字列と等価)である。@var{default}が文字列のときは、その文字列がデフォルト値になる。文字列リストのときは、最初の文字列がデフォルト値になる。(これらの文字列はすべて``未来のミニバッファーヒストリー(future
minibuffer history)''としてユーザーが利用可能)。

この関数は@code{read-from-minibuffer}を呼び出すことにより機能する。

@smallexample
@group
(read-string @var{prompt} @var{initial} @var{history} @var{default} @var{inherit})
@equiv{}
(let ((value
       (read-from-minibuffer @var{prompt} @var{initial} nil nil
                             @var{history} @var{default} @var{inherit})))
  (if (and (equal value "") @var{default})
      (if (consp @var{default}) (car @var{default}) @var{default})
    value))
@end group
@end smallexample
@end defun

@defun read-regexp prompt &optional defaults history
この関数はミニバッファーから文字列として正規表現を読み取り、それをリターンする。ミニバッファーのプロンプト文字列@var{prompt}が@samp{:}(とその後にオプションの空白文字)で終端されていない場合、この関数はデフォルトのリターン値(空文字列でない場合。以下参照)の前に@samp{:
}を付加する。

オプション引数@var{defaults}は、入力が空の場合にリターンするデフォルト値を制御する。値は文字列、@code{nil}(空文字列と等価)、文字列リスト、シンボルのうちのどれか。

@var{defaults}がシンボルの場合、@code{read-regexp}は変数@code{read-regexp-defaults-function}(以下参照)の値を調べて非@code{nil}のときは、@var{defaults}よりそちらを優先的に使用する。この場合、値は以下のいずれか:

@itemize @minus
@item
@code{regexp-history-last}。これは適切なミニバッファーヒストリーリスト(以下参照)の最初の要素を使用することを意味する。

@item
引数なしの関数。リターン値(@code{nil}、文字列、文字列リストのいずれか)が@var{defaults}の値となる。
@end itemize

これで、@code{read-regexp}が@var{defaults}を処理した結果はリストに確定する(値が@code{nil}または文字列の場合は1要素のリストに変換する)。このリストにたいし、@code{read-regexp}は、以下のような入力として有用な候補をいくつか追加する:

@itemize @minus
@item
ポイント位置の単語またはシンボル。
@item
インクリメンタル検索で最後に使用されたregexp。
@item
インクリメンタル検索で最後に使用された文字列。
@item
問い合わせつき置換コマンドで最後に使用された文字列またはパターン。
@end itemize

これで関数は、ユーザー入力を取得するために@code{read-from-minibuffer}に渡す正規表現のリストを得た。リストの最初の要素は入力が空の場合のデフォルト値である。リストのすべての要素は``未来のミニバッファーヒストリーリスト(future
minibuffer history list)'' (@pxref{Minibuffer History, future list,, emacs,
The GNU Emacs Manual}を参照)としてユーザーが利用可能になる。

オプション引数@var{history}が非@code{nil}の場合、それは使用するミニバッファーヒストリーリストを指定するシンボルである(@ref{Minibuffer
History}を参照)。これが省略、または@code{nil}の場合、ヒストリーリストのデフォルトは@code{regexp-history}となる。
@end defun

@defvar read-regexp-defaults-function
関数@code{read-regexp}は、デフォルトの正規表現リストを決定するために、この変数の値を使用するかもしれない。非@code{nil}の場合、この変数は以下のいずれかである:

@itemize @minus
@item
シンボル@code{regexp-history-last}。

@item
@code{nil}、文字列、文字列リストのいずれかをリターンする引数なしの関数。
@end itemize

@noindent
これらの変数の使い方についての詳細は、上述の@code{read-regexp}を参照のこと。
@end defvar

@defvar minibuffer-allow-text-properties
この変数が@code{nil}の場合、@code{read-from-minibuffer}および@code{read-string}はミニバッファー入力をリターンする前に、すべてのテキストプロパティを取り除く。しかし@code{read-no-blanks-input}(以下参照)、同様に補完つきでミニバッファー入力を行う@code{read-minibuffer}およびそれに関連する関数(@ref{Object
from Minibuffer,, Reading Lisp Objects With the
Minibuffer}を参照)は、この変数の値に関わらず、無条件でテキストプロパティを破棄する。
@end defvar

@defvar minibuffer-local-map
@c avoid page break at anchor; work around Texinfo deficiency
@anchor{Definition of
minibuffer-local-map}これはミニバッファーからの読み取りにたいするデフォルトローカルキーマップである。デフォルトでは以下のバインディングをもつ:

@table @asis
@item @kbd{C-j}
@code{exit-minibuffer}

@item @key{RET}
@code{exit-minibuffer}

@item @kbd{C-g}
@code{abort-recursive-edit}

@item @kbd{M-n}
@itemx @key{DOWN}
@code{next-history-element}

@item @kbd{M-p}
@itemx @key{UP}
@code{previous-history-element}

@item @kbd{M-s}
@code{next-matching-history-element}

@item @kbd{M-r}
@code{previous-matching-history-element}

@ignore
@c Does not seem worth/appropriate mentioning.
@item @kbd{C-@key{TAB}}
@code{file-cache-minibuffer-complete}
@end ignore
@end table
@end defvar

@c In version 18, initial is required
@c Emacs 19 feature
@defun read-no-blanks-input prompt &optional initial inherit-input-method
この関数はミニバッファーから文字列を読み取るが、入力の一部として空白文字を認めず、かわりに空白文字は入力を終端させる。引数@var{prompt}、@var{initial}、@var{inherit-input-method}は@code{read-from-minibuffer}で使用するときと同様。

これは関数@code{read-from-minibuffer}の簡略化されたインターフェイスであり、キーマップ@code{minibuffer-local-ns-map}の値を@var{keymap}引数として、@code{read-from-minibuffer}関数に渡す。キーマップ@code{minibuffer-local-ns-map}は@kbd{C-q}をリバインドしないので、クォートすることにより文字列内にスペースを挿入することが@emph{可能である}。

@code{minibuffer-allow-text-properties}の値に関わらず、この関数はテキストプロパティを破棄する。

@smallexample
@group
(read-no-blanks-input @var{prompt} @var{initial})
@equiv{}
(let (minibuffer-allow-text-properties)
  (read-from-minibuffer @var{prompt} @var{initial} minibuffer-local-ns-map))
@end group
@end smallexample
@end defun

@c Slightly unfortunate name, suggesting it might be related to the
@c Nextstep port...
@defvar minibuffer-local-ns-map
このビルトイン変数は関数@code{read-no-blanks-input}内でミニバッファーローカルキーマップとして使用されるキーマップである。デフォルトでは、@code{minibuffer-local-map}のバインディングに加えて、以下のバインディングが有効になる:

@table @asis
@item @key{SPC}
@cindex @key{SPC} in minibuffer
@code{exit-minibuffer}

@item @key{TAB}
@cindex @key{TAB} in minibuffer
@code{exit-minibuffer}

@item @kbd{?}
@cindex @kbd{?} in minibuffer
@code{self-insert-and-exit}
@end table
@end defvar

@node Object from Minibuffer
@section Reading Lisp Objects with the Minibuffer
@cindex minibuffer input, reading lisp objects

  このセクションでは、ミニバッファーでLispオブジェクトを読み取る関数を説明します。

@defun read-minibuffer prompt &optional initial
この関数はミニバッファーを使用してLispオブジェクトをよみ、それを評価せずにリターンする。引数@var{prompt}と@var{initial}は、@code{read-from-minibuffer}のときと同様に使用する。

これは@code{read-from-minibuffer}関数にたいする簡略化されたインターフェイスである。

@smallexample
@group
(read-minibuffer @var{prompt} @var{initial})
@equiv{}
(let (minibuffer-allow-text-properties)
  (read-from-minibuffer @var{prompt} @var{initial} nil t))
@end group
@end smallexample

以下の例では、初期入力として文字列@code{"(testing)"}を与えている:

@smallexample
@group
(read-minibuffer
 "Enter an expression: " (format "%s" '(testing)))

;; @r{以下はミニバッファーでの表示::}
@end group

@group
---------- Buffer: Minibuffer ----------
Enter an expression: (testing)@point{}
---------- Buffer: Minibuffer ----------
@end group
@end smallexample

@noindent
ユーザーは@key{RET}をタイプして初期入力をデフォルトとして利用したり、入力を編集することができる。
@end defun

@defun eval-minibuffer prompt &optional initial
この関数はミニバッファーを使用してLisp式を読み取り、それを評価して結果をリターンする。引数@var{prompt}と@var{initial}の使い方は、@code{read-from-minibuffer}と同様。

この関数は、@code{read-minibuffer}の呼び出し結果を単に評価する:

@smallexample
@group
(eval-minibuffer @var{prompt} @var{initial})
@equiv{}
(eval (read-minibuffer @var{prompt} @var{initial}))
@end group
@end smallexample
@end defun

@defun edit-and-eval-command prompt form
この関数はミニバッファーでLisp式を読み取り、それを評価して結果をリターンする。このコマンドと@code{eval-minibuffer}の違いは、このコマンドでは初期値としての@var{form}はオプションではなく、テキストの文字列ではないプリント表現に変換されたLispオブジェクトとして扱われることである。これは@code{prin1}でプリントされるので、文字列の場合はテキスト初期値内にダブルクォート文字(@samp{"})が含まれる。@ref{Output
Functions}を参照のこと。

以下の例では、すでに有効なフォームであるようなテキスト初期値として式をユーザーに提案している:

@smallexample
@group
(edit-and-eval-command "Please edit: " '(forward-word 1))

;; @r{前の式を評価した後に、}
;;   @r{ミニバッファーに以下が表示される。:}
@end group

@group
---------- Buffer: Minibuffer ----------
Please edit: (forward-word 1)@point{}
---------- Buffer: Minibuffer ----------
@end group
@end smallexample

@noindent
すぐに@key{RET} をタイプするとミニバッファーをexitして式を評価するので、1単語分ポイントは前進する。
@end defun

@node Minibuffer History
@section Minibuffer History
@cindex minibuffer history
@cindex history list

  @dfn{ミニバッファーヒストリーリスト(minibuffer history
list)}は以前のミニバッファー入力を記録するので、それらを手軽に再利用できます。ミニバッファーヒストリーリストは、(以前に入力された)文字列のリストで、もっとも最近の文字列が先頭になります。

  多数のミニバッファーが個別に存在し、異なる入力の種類に使用されます。それぞれのミニバッファー使用にたいして正しいヒストリーリストを指定するのは、Lispプログラマーの役目です。

  ミニバッファーヒストリーリストは、@code{read-from-minibuffer}および@code{completing-read}のオプション引数@var{history}に指定します。以下が利用できる値です:

@table @asis
@item @var{variable}
ヒストリーリストとして@var{variable}(シンボル)を使用する。

@item (@var{variable} . @var{startpos})
ヒストリーリストとして@var{variable}(シンボル)を使用し、ヒストリー位置の初期値を@var{startpos}(負の整数)とみなす。

@var{startpos}に0を指定するのは、単にシンボル@var{variable}だけを指定するのと等価である。@code{previous-history-element}はミニバッファー内のヒストリーリストの最新の要素を表示するだろう。
正の@var{startpos}を指定した場合、ミニバッファーヒストリー関数は@code{(elt @var{variable}(1-
@var{startpos}))}がミニバッファー内でカレントで表示されているヒストリー要素であるかのように振る舞う。

一貫性を保つため、ミニバッファー入力関数の@var{initial}引数(@ref{Initial
Input}を参照)使用して、ミニバッファーの初期内容となるヒストリー要素も指定すべきである。
@end table

  @var{history}を指定しない場合は、デフォルトのヒストリーリスト@code{minibuffer-history}が使用されます。他の標準的なヒストリーリストについては、以下を参照してください。最初に使用する前に@code{nil}に初期化するだけで、独自のヒストリーリストを作成することもできます。

  @code{read-from-minibuffer}と@code{completing-read}は、どちらも新たな要素を自動的にヒストリーリストに追加して、ユーザーがそのリストのアイテムを再使用するためのコマンドを提供します。ヒストリーリストを使用するためにプログラムが行う必要があるのは、リストの初期化と、使用するときに入力関数にリストの名前を渡すだけです。しかし、ミニバッファー入力関数がリストを使用していないときに、手動でリストを変更しても問題はありません。

  新たな要素をヒストリーリストに追加するEmacs関数は、リストが長くなりすぎたときに古い要素の削除も行うことができます。変数@code{history-length}は、ほとんどのヒストリーリストの最大長を指定する変数です。特定のヒストリーリストにたいして異なる最大長を指定するには、そのヒストリーリストシンボルの@code{history-length}プロパティにその最大長をセットします。変数@code{history-delete-duplicates}には、ヒストリー内の重複を削除するかどうかを指定します。

@defun add-to-history history-var newelt &optional maxelt keep-all
この関数は@var{newelt}が空文字列でなければ、それを新たな要素として変数@var{history-var}に格納されたヒストリーリストに追加して、更新されたヒストリーリストをリターンする。これは@var{maxelt}または@code{history-length}がが非@code{nil}の場合は、リストの長さをその変数の値に制限する(以下参照)。@var{maxelt}に指定できる値の意味は、@code{history-length}の値と同様。

@code{add-to-history}は通常、@code{history-delete-duplicates}が非@code{nil}ならば、ヒストリーリスト内の重複メンバーを削除する。しかし、@var{keep-all}が非@code{nil}の場合、それは重複を削除しないことを意味し、たとえ@var{newelt}が空でもリストに追加する。
@end defun

@defvar history-add-new-input
この変数の値が@code{nil}の場合、ミニバッファーから読み取りを行う標準的な関数は、ヒストリーリストに新たな要素を追加しない。これにより、Lispプログラムが@code{add-to-history}を使用して明示的に入力ヒストリーを管理することになる。デフォルト値は@code{t}。
@end defvar

@defopt history-length
この変数の値は、最大長を独自に指定しないすべてのヒストリーリストの最大長を指定する。値が@code{t}の場合は、最大長がない(古い要素を削除しない)ことを意味する。ヒストリーリスト変数のシンボルの@code{history-length}プロパティが非@code{nil}の場合には、その特定のヒストリーリストにたいする最大長として、そのプロパティ値がこの変数をオーバーライドする。
@end defopt

@defopt history-delete-duplicates
この変数の値が@code{t}の場合、それは新たなヒストリー要素の追加時に、以前からある等しい要素が削除されることを意味する。
@end defopt

  以下は、標準的なミニバッファーヒストリーリスト変数です:

@defvar minibuffer-history
ミニバッファーヒストリー入力にたいするデフォルトのヒストリーリスト。
@end defvar

@defvar query-replace-history
@code{query-replace}の引数(および他のコマンドの同様の引数)にたいするヒストリーリスト。
@end defvar

@defvar file-name-history
ファイル名引数にたいするヒストリーリスト。
@end defvar

@defvar buffer-name-history
バッファー名引数にたいするヒストリーリスト。
@end defvar

@defvar regexp-history
正規表現引数にたいするヒストリーリスト。
@end defvar

@defvar extended-command-history
拡張コマンド名引数にたいするヒストリーリスト。
@end defvar

@defvar shell-command-history
シェルコマンド引数にたいするヒストリーリスト。
@end defvar

@defvar read-expression-history
評価されるためのLisp式引数にたいするヒストリーリスト。
@end defvar

@defvar face-name-history
フェイス引数にたいするヒストリーリスト。
@end defvar

@c Less common: coding-system-history, input-method-history,
@c command-history, grep-history, grep-find-history,
@c read-envvar-name-history, setenv-history, yes-or-no-p-history.

@node Initial Input
@section Initial Input

ミニバッファー入力にたいする関数のいくつかには、@var{initial}と呼ばれる引数があります。これは通常のように空の状態で開始されるのではなく、特定のテキストとともにミニバッファーが開始されることを指定しますが、ほとんどの場合において推奨されない機能です。

@var{initial}が文字列の場合、ミニバッファーはその文字列のテキストを含む状態で開始され、ユーザーがそのテキストの編集を開始するとき、ポイントはテキストの終端にあります。ユーザーがミニバッファーをexitするために単に@key{RET}をタイプした場合には、この入力文字列の初期値をリターン値だと判断します。

@strong{@var{initial}にたいして非@code{nil}値の使用には反対します。}なぜなら初期入力は強要的なインターフェイスだからです。ユーザーにたいして有用なデフォルト入力を提案するためには、ヒストリーリストやデフォルト値の提供のほうが、より便利です。

しかし@var{initial}引数にたいして文字列を指定すべき状況が1つだけあります。それは、@var{history}引数にコンスセルを指定したときです。@ref{Minibuffer
History}を参照してください。

@var{initial}は@code{(@var{string}
.
@var{position})}という形式をとることもできます。これは@var{string}をミニバッファーに挿入するが、その文字列のテキスト中の@var{position}にポイントを配するという意味です。

歴史的な経緯により、@var{position}は異なる関数において実装が統一されていません。@code{completing-read}では@var{position}の値は0基準です。つまり、値0は文字列の先頭で、1は最初の文字の次、...を意味します。しかし@code{read-minibuffer}、およびこの引数をサポートする補完を行わない他のミニバッファー入力関数では、1は文字列の先頭、2は最初の文字の次、...を意味します。

@var{initial}の値としてのコンスセルの使用は、推奨されません。

@node Completion
@section Completion
@cindex completion

@c "This is the sort of English up with which I will not put."
  @dfn{補完(complete,
ompletion)}は省略された形式から始まる名前の残りを充填する機能です。補完はユーザー入力と有効な名前リストを比較して、ユーザーが何をタイプしたかで名前をどの程度一意に判定できるか判断することにより機能します。たとえば@kbd{C-x
b}(@code{switch-to-buffer})とタイプしてから、スイッチしたいバッファー名の最初の数文字をタイプして、その後に@key{TAB}(@code{minibuffer-complete})をタイプすると、Emacsはその名前を可能な限り展開します。

  標準的なEmacsコマンドはシンボル、ファイル、バッファー、プロセスの名前にたいして補完を提案します。このセクションの関数により、他の種類の名前にたいしても補完を実装できます。

  @code{try-completion}関数は補完にたいする基本的なプリミティブです。これは初期文字列にたいして文字列セットをマッチして、最長と判定された補完をリターンします。

  関数@code{completing-read}は、補完にたいする高レベルなインターフェイスを提供します。@code{completing-read}の呼び出しにより、有効な名前リストの判定方法が指定されます。その後にこの関数は補完にたいして有用ないくつかのコマンドにキーバインドするローカルキーマップとともに、ミニバッファーをアクティブ化します。その他の関数は、特定の種類の名前を補完つきで読み取る、簡便なインターフェイスを提供します。

@menu
* Basic Completion::         文字列を補完する低レベル関数。
* Minibuffer Completion::    補完つきでミニバッファーを呼び出す。
* Completion Commands::      補完を行うミニバッファーコマンド。
* High-Level Completion::    特別なケースに有用な補完(バッファー名や変数名などの読み取り)。
* Reading File Names::       ファイル名やシェルコマンドの読み取りに補完を使用する。
* Completion Variables::     補完の挙動を制御する変数。
* Programmed Completion::    独自の補完関数を記述する。
* Completion in Buffers::    通常バッファー内でのテキスト補完。
@end menu

@node Basic Completion
@subsection Basic Completion Functions

  以下の補完関数は、その関数自身ではミニバッファーでなにも行いません。ここでは、ミニバッファーを使用する高レベルの補完機能と並べて、これらの関数について説明します。

@defun try-completion string collection &optional predicate
この関数は@var{collection}内の@var{string}に利用可能なすべての補完の、共通する最長部分文字列をリターンする。

@cindex completion table
@var{collection}は@dfn{補完テーブル(completion
table)}と呼ばれる。値は文字列リスト、コンスセル、obarray、ハッシュテーブル、または補完関数でなければならない。

@code{try-completion}は補完テーブルにより指定された許容できる補完それぞれにたいして、@var{string}と比較を行う。許容できる補完マッチが存在しない場合は、@code{nil}をリターンする。マッチする補完が1つだけで、それが完全一致ならば@code{t}をリターンする。それ以外は、すべてのマッチ可能な補完に共通する最長の初期シーケンス(longest
initial sequence)をリターンする。

@var{collection}がリストの場合、許容できる補完(permissible
completions)はそのリストの要素により指定される。リストの要素は文字列、または@sc{car}が文字列または(@code{symbol-name}により文字列に変換される)シンボルであるようなコンスセルである。リストに他の型の要素が含まれる場合は無視される。

@cindex obarray in completion
@var{collection}がobarray(@ref{Creating
Symbols}を参照)の場合、そのobarray内のすべてのシンボル名が許容できる補完セットを形成する。

@var{collection}がハッシュテーブルの場合には、文字列のキーが利用可能な補完(possible
completions)になる。他のキーは無視される。

@var{collection}として関数を使用することもできる。この場合、この関数だけが補完を処理する役目を担う。つまり@code{try-completion}は、この関数が何をリターンしようとも、それをリターンする。この関数は@var{string}、@var{predicate}、@code{nil}の3つの引数で呼び出される(3つ目の引数は同じ関数を@code{all-completions}でも使用して、どちらの場合でも適切なことを行うためである)。@ref{Programmed
Completion}を参照のこと。

引数@var{predicate}が非@code{nil}の場合、@var{collection}がハッシュテーブルなら1引数、それ以外は2引数の関数でなければならない。これは利用可能なマッチのテストに使用され、マッチは@var{predicate}が非@code{nil}をリターンしたときだけ受け入れられる。@var{predicate}に与えられる引数は文字列、alistのコンスセル(@sc{car}が文字列)、またはobarrayのシンボル(シンボル名では@emph{ない})のうちのどれか。@var{collection}がハッシュテーブルの場合、@var{predicate}は文字列キー(string
key)と関連値(associated value)の2引数で呼び出される。

加えて使いやすいように、補完は@code{completion-regexp-list}内のすべての正規表現にもマッチしなければならない。(@var{collection}が関数の場合は、その関数自身が@code{completion-regexp-list}を処理する必要がある。)

以下の例の1つ目では、文字列@samp{foo}がalistのうち3つの@sc{car}とマッチされている。すべてのマッチは文字@samp{fooba}で始まるので、それが結果となる。2つ目の例では、可能なマッチは1つだけで、しかも完全一致なのでリターン値は@code{t}になる。

@smallexample
@group
(try-completion
 "foo"
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4)))
     @result{} "fooba"
@end group

@group
(try-completion "foo" '(("barfoo" 2) ("foo" 3)))
     @result{} t
@end group
@end smallexample

以下の例では、文字@samp{forw}で始まるシンボルが多数あり、それらはすべて単語@samp{forward}で始まる。ほとんどのシンボルはその後に@samp{-}が続くが、すべてではないので@samp{forward}までしか補完できない。

@smallexample
@group
(try-completion "forw" obarray)
     @result{} "forward"
@end group
@end smallexample

最後に、以下の例では述語@code{test}に渡される利用可能なマッチは3つのうち2つだけである(文字列@samp{foobaz}は短すぎる)。これらは両方とも文字列@samp{foobar}で始まる。

@smallexample
@group
(defun test (s)
  (> (length (car s)) 6))
     @result{} test
@end group
@group
(try-completion
 "foo"
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
 'test)
     @result{} "foobar"
@end group
@end smallexample
@end defun

@c Removed obsolete argument nospace.
@defun all-completions string collection &optional predicate
@c (aside from @var{nospace})
この関数は、@var{string}の利用可能な補完すべてのリストをリターンする。この関数の引数は@code{try-completion}の引数と同じであり、@code{try-completion}が行うのと同じ方法で@code{completion-regexp-list}を使用する。

@ignore
The optional argument @var{nospace} is obsolete.  If it is
non-@code{nil}, completions that start with a space are ignored unless
@var{string} starts with a space.
@end ignore

@var{collection}か関数の場合は@var{string}、@var{predicate}、@code{t}の3つの引数で呼び出される。この場合、その関数がリターンするのが何であれ、@code{all-completions}はそれをリターンする。@ref{Programmed
Completion}を参照のこと。

以下の例は、@code{try-completion}の例の関数@code{test}を使用している。

@smallexample
@group
(defun test (s)
  (> (length (car s)) 6))
     @result{} test
@end group

@group
(all-completions
 "foo"
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
 'test)
     @result{} ("foobar1" "foobar2")
@end group
@end smallexample
@end defun

@defun test-completion string collection &optional predicate
@anchor{Definition of test-completion}
この関数は、@var{string}が@var{collection}および@var{predicate}で指定された有効な補完候補の場合は、@code{nil}をリターンする。引数は@code{try-completion}の引数と同じ。たとえば、@var{collection}が文字列リストの場合は、@var{string}がリスト内に存在し、かつ@var{predicate}を満足すればtrueとなる。

この関数は@code{try-completion}が行うのと同じ方法で、@code{completion-regexp-list}を使用する。

@var{predicate}が非@code{nil}で、@var{collection}が同じ文字列を複数含む場合には、@code{completion-ignore-case}にしたがって@code{compare-strings}で判定して、それらすべてをリターンするか、もしくは何もリターンしない。それ以外では、@code{test-completion}のリターン値は基本的に予測不可能である。

@var{collection}が関数の場合は@var{string}、@var{predicate}、@code{lambda}の3つの引数で呼び出される。それが何をリターンするにせよ、@code{test-completion}はそれをリターンする。
@end defun

@defun completion-boundaries string collection predicate suffix
この関数はポイントの前のテキストが@var{string}、ポイントの後が@var{suffix}と仮定して、@var{collection}が扱うフィールドの境界(boundary)をリターンする。

補完は通常、文字列(string)全体に作用するので、すべての普通のコレクション(collection)にたいして、この関数は常に@code{(0
. (length
@var{suffix}))}をリターンするだろう。しかしファイルにたいする補完などのより複雑な補完は、1回に1フィールド行われる。たとえば、たとえ@code{"/usr/share/doc"}が存在しても、@code{"/usr/sh"}の補完に@code{"/usr/share/"}は含まれるが、@code{"/usr/share/doc"}は含まれないだろう。また、@code{"/usr/sh"}にたいする@code{all-completions}に@code{"/usr/share/"}は含まれず、@code{"share/"}だけが含まれるだろう。@var{string}が@code{"/usr/sh"}、@var{suffix}が@code{"e/doc"}の場合、@code{completion-boundaries}は@code{(5
.
1)}をリターンするだろう。これは、@var{collection}が@code{"/usr/"}の後ろにあり@code{"/doc"}の前にある領域に関する補完情報だけをリターンするであろうことを告げている。
@end defun

補完alistを変数に格納した場合は、変数の@code{risky-local-variable}プロパティに非@code{nil}をセットして、その変数が``risky(危険)''だとマークすべきである。@ref{File
Local Variables}を参照のこと。

@defvar completion-ignore-case
この変数の値が非@code{nil}の場合、補完での大文字小文字の違いは意味をもたない。@code{read-file-name}では、この変数は@code{read-file-name-completion-ignore-case}(@ref{Reading
File
Names}を参照)にオーバーライドされる。@code{read-buffer}では、この変数は@code{read-buffer-completion-ignore-case}(@ref{High-Level
Completion}を参照)にオーバーライドされる。
@end defvar

@defvar completion-regexp-list
これは正規表現のリストである。補完関数はこのリスト内のすべての正規表現にマッチした場合のみ許容できる補完と判断する。@code{case-fold-search}(@ref{Searching
and Case}を参照)では@code{completion-ignore-case}の値にバインドされる。
@end defvar

@defmac lazy-completion-table var fun
この変数は変数@var{var}を補完のためのcollectionとしてlazy(lazy:
力のない、だらけさせる、のろのろした、怠惰な、不精な、眠気を誘う)な方法で初期化する。ここでlazyとは、collection内の実際のコンテンツを必要になるまで計算しないという意味。このマクロは@var{var}に格納する値の生成に使用する。@var{var}を使用して最初に補完を行ったとき、真の値が実際に計算される。これは引数なしで@var{fun}を呼び出すことにより行われる。@var{fun}がリターンする値は、@var{var}の永続的な値となる。

以下は例である:

@smallexample
(defvar foo (lazy-completion-table foo make-my-alist))
@end smallexample
@end defmac

@c FIXME?  completion-table-with-context?
@findex completion-table-case-fold
@findex completion-table-in-turn
@findex completion-table-merge
@findex completion-table-subvert
@findex completion-table-with-quoting
@findex completion-table-with-predicate
@findex completion-table-with-terminator
@cindex completion table, modifying
@cindex completion tables, combining
既存の補完テーブルを受け取り変更したバージョンをリターンする関数が、いくつかあります。@code{completion-table-case-fold}は大文字小文字を区別しない、case-insensitiveなテーブルをリターンします。@code{completion-table-in-turn}と@code{completion-table-merge}は、複数の入力テーブルを、異なる方法で組み合わせます。@code{completion-table-subvert}はテーブルを異なる初期プレフィックス(initial
prefix)で変更します。@code{completion-table-with-quoting}はクォートされたテキストの処理に適したテーブルをリターンします。@code{completion-table-with-predicate}は述語関数(predicate
function)によりフィルターします。@code{completion-table-with-terminator}は終端文字列(terminating
string)を追加します。


@node Minibuffer Completion
@subsection Completion and the Minibuffer
@cindex minibuffer completion
@cindex reading from minibuffer with completion

  このセクションでは、補完つきでミニバッファーから読み取るための、基本的なインターフェイスを説明します。

@defun completing-read prompt collection &optional predicate require-match initial history default inherit-input-method
この関数は、補完の提供によりユーザーを支援して、ミニバッファーから文字列を読み取る。@var{prompt}(文字列でなければならない)のプロンプトとともに、ミニバッファーをアクティブ化する。

実際の補完は、補完テーブル@var{collection}と補完述語@var{predicate}を関数@code{try-completion}(@ref{Basic
Completion}を参照)に渡すことにより行われる。これは補完の使用されるローカルキーマップに特定のコマンドをバインドしたとき発生する。これらのコマンドのいくつかは、@code{test-completion}も呼び出す。したがって、@var{predicate}が非@code{nil}の場合は、@var{collection}と@code{completion-ignore-case}が矛盾しないようにすべきである。@ref{Definition
of test-completion}を参照のこと。

オプション引数@var{require-match}の値は、ユーザーがミニバッファーをexitする方法を決定する。

@itemize @bullet
@item
@code{nil}の場合、通常のミニバッファーexitコマンドは、ミニバッファーの入力と無関係に機能する。

@item
@code{t}の場合は、入力が@var{collection}の要素に補完されるまで、通常のミニバッファーexitコマンドは機能しない。

@item
@code{confirm}の場合、どのような入力でもユーザーはexitできるが、入力が@code{confirm}の要素に補完されていなければ、確認を求められる。

@item
@code{confirm-after-completion}の場合、どのような入力でもユーザーはexitできるが、前のコマンドが補完コマンド(たとえば@code{minibuffer-confirm-exit-commands}の中のコマンドの1つの場合)で、入力の結果が@var{collection}の要素でない場合は、確認を求められる。@ref{Completion
Commands}を参照のこと。

@item
@var{require-match}にたいする他の値は@code{t}と同じふぁが、exitコマンドは補完処理中はexitしない。
@end itemize

しかし、@var{require-match}の値に関わらず、空の入力は常に許される。この場合、@code{completing-read}は@var{default}がリストなら最初の要素、@var{default}が@code{nil}なら@code{""}、または@var{default}をリターンする。文字列および@var{default}内の文字列は、ヒストリーコマンドを通じてユーザーが利用できる。

関数@code{completing-read}は@var{require-match}が@code{nil}の場合はキーマップとして@code{minibuffer-local-completion-map}を、@var{require-match}が非@code{nil}の場合は@code{minibuffer-local-must-match-map}を使用する。@ref{Completion
Commands}を参照のこと。

引数@var{history}は入力の保存とミニバッファーヒストリーコマンドに、どのヒストリーリスト変数を使用するか指定する。デフォルトは@code{minibuffer-history}。@ref{Minibuffer
History}を参照のこと。

@var{initial}は、ほとんどの場合推奨されない。@var{history}にたいするコンスセル指定と組み合わせた場合のみ、非@code{nil}値の使用を推奨する。@ref{Initial
Input}を参照のこと。デフォルト入力にたいしては、かわりに@var{default}を使用する。

引数@var{inherit-input-method}が非@code{nil}の場合には、ミニバッファーにエンターする前にカレントだったバッファーが何であれ、カレントのインプットメソッド(@ref{Input
Methods}を参照)、および@code{enable-multibyte-characters}のセッティング(@ref{Text
Representations}を参照)が継承される。

変数@code{completion-ignore-case}が非@code{nil}の場合、利用可能なマッチにたいして入力を比較するときの補完は、大文字小文字を区別しない。@ref{Basic
Completion}を参照のこと。このモードでの操作では、@var{predicate}も大文字小文字を区別してはならない(さもないと驚くべき結果となるであろう)。

以下は@code{completing-read}を使用した例である:

@smallexample
@group
(completing-read
 "Complete a foo: "
 '(("foobar1" 1) ("barfoo" 2) ("foobaz" 3) ("foobar2" 4))
 nil t "fo")
@end group

@group
;; @r{前の式を評価後に、}
;;   @r{ミニバッファーに以下が表示される。:}

---------- Buffer: Minibuffer ----------
Complete a foo: fo@point{}
---------- Buffer: Minibuffer ----------
@end group
@end smallexample

@noindent
その後ユーザーが@kbd{@key{DEL} @key{DEL} b
@key{RET}}をタイプすると、@code{completing-read}は@code{barfoo}をリターンする。

@code{completing-read}関数は、実際に補完を行うコマンドの情報を渡すために、変数をバインドする。これらの変数は、以降のセクションで説明する。
@end defun

@defvar completing-read-function
この変数の値は関数でなければならず、補完つきの読み取りを実際に行うために@code{completing-read}から呼び出される。この関数は@code{completing-read}と同じ引数を受け入れる。他の関数のバインドして、通常の@code{completing-read}の振る舞いを完全にオーバーライドすることができる。
@end defvar

@node Completion Commands
@subsection Minibuffer Commands that Do Completion

  このセクションでは、補完のためにミニバッファーで使用されるキーマップ、コマンド、ユーザーオプションを説明します。

@defvar minibuffer-completion-table
この変数の値は、ミニバッファー内の補完に使用される補完テーブルである。これは@code{completing-read}が@code{try-completion}に渡す補完テーブルを含むグローバル変数である。@code{minibuffer-complete-word}のような、ミニバッファー補完コマンドにより使用される。
@end defvar

@defvar minibuffer-completion-predicate
この変数の値は@code{completing-read}が@code{try-completion}に渡す述語(predicate)である。この変数は、他のミニバッファー補完関数でも使用される。
@end defvar

@defvar minibuffer-completion-confirm
この変数はミニバッファーをexitする前に、Emacsが確認を求めるかどうかを決定する。@code{completing-read}はこの変数をバインドして、exitする前に関数@code{minibuffer-complete-and-exit}がこの値をチェックする。値が@code{nil}の場合は、確認は求められない。値が@code{confirm}の場合、入力が有効な補完候補でなくてもユーザーはexitするかもしれないが、Emacsは確認を求めない。値が@code{confirm-after-completion}の場合、入力が有効な補完候補でなくてもユーザーはexitするかもしれないが、ユーザーが@code{minibuffer-confirm-exit-commands}内の任意の補完コマンドの直後に入力を確定した場合、Emacsは確認を求める。
@end defvar

@defvar minibuffer-confirm-exit-commands
この変数には、@code{completing-read}の引数@var{require-match}が@code{confirm-after-completion}の場合は、ミニバッファーをexitする前にEmacsが確認を求めるようにさせるコマンドのリストが保持されている。このリストないのコマンドを呼び出した直後にユーザーがミニバッファーのexitを試みると、Emacsは確認を求める。
@end defvar

@deffn Command minibuffer-complete-word
この関数は、ただ1つの単語からミニバッファーを補完する。たとえミニバッファーのコンテンツが1つの補完しかもたない場合でも、@code{minibuffer-complete-word}はその単語に属さない最初の文字を超えた追加はしない。@ref{Syntax
Tables}を参照のこと。
@end deffn

@deffn Command minibuffer-complete
この関数は、可能な限りミニバッファーのコンテンツを補完する。
@end deffn

@deffn Command minibuffer-complete-and-exit
この関数はミニバッファーのコンテンツを補完して、確認が要求されない場合(たとえば@code{minibuffer-completion-confirm}が@code{nil}のとき)はexitする。確認が@emph{要求される}場合には、このコマンドを即座に繰り返すことにより確認が行われないようにする。このコマンドは2回連続で実行された場合は確認なしで機能するようにプログラムされている。
@end deffn

@deffn Command minibuffer-completion-help
この関数は、カレントのミニバッファーのコンテンツで利用可能な補完のリストを作成する。これは@code{all-completions}の引数@var{collection}に変数@code{minibuffer-completion-table}の値を、引数@var{predicate}に@code{minibuffer-completion-predicate}の値を使用して呼び出すことにより機能する。補完リストは、@file{*Completions*}と呼ばれるバッファーのテキストとして表示される。
@end deffn

@defun display-completion-list completions
この関数は@code{standard-output}内のストリーム(通常はバッファー)に@var{completions}を表示する(ストリームについての詳細は、@ref{Read
and
Print}を参照)。引数@var{completions}は通常、@code{all-completions}がリターンする補完リストそのものだが、それである必要はない。要素はシンボルか文字列で、どちらも単にプリントされる。文字列2つのリストでもよく、2つの文字列が結合されたかのようにプリントされる。この場合、1つ目の文字列は実際の補完で、2つ目の文字列は注釈の役目を負う。

この関数は@code{minibuffer-completion-help}により呼び出される。一般的には、以下のように@code{with-output-to-temp-buffer}とともに使用される。

@example
(with-output-to-temp-buffer "*Completions*"
  (display-completion-list
    (all-completions (buffer-string) my-alist)))
@end example
@end defun

@defopt completion-auto-help
この変数が非@code{nil}の場合には、次の文字が一意でないために決定できず補完が完了しないときは常に、補完コマンドは利用可能な補完リストを自動的に表示する。
@end defopt

@defvar minibuffer-local-completion-map
@code{completing-read}の値は、補完の1つが完全に一致することを要求されないときにローカルキーマップとして使用される。デフォルトでは、このキーマップは以下のバインディングを作成する:

@table @asis
@item @kbd{?}
@code{minibuffer-completion-help}

@item @key{SPC}
@code{minibuffer-complete-word}

@item @key{TAB}
@code{minibuffer-complete}
@end table

@noindent
親キーマップとして@code{minibuffer-local-map}を使用する(@ref{Definition of
minibuffer-local-map}を参照)。
@end defvar

@defvar minibuffer-local-must-match-map
@code{completing-read}は、補完の1つの完全な一致が要求されないときのローカルキーマップとして、この値を使用する。したがって@code{exit-minibuffer}にキーがバインドされていなければ、無条件にミニバッファーをexitする。デフォルトでは、このキーマップは以下のバインディングを作成する:

@table @asis
@item @kbd{C-j}
@code{minibuffer-complete-and-exit}

@item @key{RET}
@code{minibuffer-complete-and-exit}
@end table

@noindent
親キーマップは@code{minibuffer-local-completion-map}を使用する。
@end defvar

@defvar minibuffer-local-filename-completion-map
これは単に@key{SPC}を非バインドするsparseキーマップ(sparse:
疎、希薄、まばら)を作成する。これはファイル名にスペースを含めることができるからである。関数@code{read-file-name}は、このキーマップと@code{minibuffer-local-completion-map}か@code{minibuffer-local-must-match-map}のいずれかを組み合わせる。
@end defvar


@node High-Level Completion
@subsection High-Level Completion Functions

  このセクションでは、特定の種類の名前を補完つきで読み取る便利な高レベル関数を説明します。

  ほとんどの場合、Lisp関数の中盤でこれらの関数を呼び出すべきではありません。可能なときは、@code{interactive}指定の内部で呼び出し、ミニバッファーのすべての入力をコマンドの引数読み取りの一部にします。@ref{Defining
Commands}を参照してください。

@defun read-buffer prompt &optional default require-match
この関数はバッファーの名前を読み取り、それを文字列でリターンする。引数@var{default}は、ミニバッファーが空の状態でユーザーがexitした場合にリターンされるデフォルト名として使用される。非@code{nil}の場合は文字列、文字列リスト、またはバッファーを指定する。リストの場合は、リストの先頭の要素がデフォルト値になる。デフォルト値はプロンプトに示されるが、初期入力としてミニバッファーには挿入されない。

引数@var{prompt}は、コロンかスペースで終わる文字列である。@var{default}が非@code{nil}の場合、この関数はデフォルト値つきでミニバッファーから読み取る際の慣習にしたがい、コロンの前の@var{prompt}の中にこれを挿入する。

オプション引数@var{require-match}は、@code{completing-read}のときと同じ。@ref{Minibuffer
Completion}を参照のこと。

以下の例で、ユーザーが@samp{minibuffer.t}とエンターしてから、@key{RET}をタイプする。引数@var{require-match}は@code{t}であり、与えられた入力で始まるバッファー名は@samp{minibuffer.texi}だけなので、その名前が値となる。

@example
(read-buffer "Buffer name: " "foo" t)
@group
;; @r{前の式を評価した後、}
;;   @r{空のミニバッファーに}
;;   @r{以下のプロンプトが表示される:}
@end group

@group
---------- Buffer: Minibuffer ----------
Buffer name (default foo): @point{}
---------- Buffer: Minibuffer ----------
@end group

@group
;; @r{ユーザーが@kbd{minibuffer.t @key{RET}}とタイプする。}
     @result{} "minibuffer.texi"
@end group
@end example
@end defun

@defopt read-buffer-function
この変数が非@code{nil}の場合は、バッファー名を読み取る関数である。@code{read-buffer}は通常行うことを行うかわりに、@code{read-buffer}と同じ引数でその関数を呼び出す。
@end defopt

@defopt read-buffer-completion-ignore-case
この変数が非non-@code{nil}の場合は、補完の処理において@code{read-buffer}は大文字小文字を無視する。
@end defopt

@defun read-command prompt &optional default
この関数はコマンドの名前を読み取り、Lispシンボルとしてそれをリターンする。引数@var{prompt}は、@code{read-from-minibuffer}で使用される場合と同じ。それが何であれ@code{commandp}が@code{t}をリターンすればコマンドであり、コマンド名とは@code{commandp}が@code{t}をリターンするシンボルだということを思い出してほしい。@ref{Interactive
Call}を参照のこと。

引数@var{default}は、ユーザーがnull入力をエンターした場合に何をリターンするか指定する。シンボル、文字列、文字列リストを指定できる。文字列の場合、@code{read-command}はリターンする前にそれをinternする。リストの場合、@code{read-command}はリストの最初の要素をinternする。@var{default}が@code{nil}の場合は、デフォルトが指定されなかったことを意味する。その場合もしユーザーがnull入力をエンターすると、リターン値は@code{(intern
"")}、つまり名前が空文字列のシンボルとなる。

@example
(read-command "Command name? ")

@group
;; @r{前の式を評価した後に、}
;;   @r{空のミニバッファーに以下のプロンプトが表示される:}
@end group

@group
---------- Buffer: Minibuffer ----------
Command name?
---------- Buffer: Minibuffer ----------
@end group
@end example

@noindent
ユーザーが@kbd{forward-c @key{RET}}とタイプした場合、この関数は@code{forward-char}をリターンする。

@code{read-command}関数は、@code{completing-read}の簡略化されたインターフェイスである。実在するLisp変数のセットを補完するために変数@code{obarray}を、コマンド名だけを受け入れるために述語@code{commandp}を使用する。

@cindex @code{commandp} example
@example
@group
(read-command @var{prompt})
@equiv{}
(intern (completing-read @var{prompt} obarray
                         'commandp t nil))
@end group
@end example
@end defun

@defun read-variable prompt &optional default
@anchor{Definition of read-variable}
この変数はカスタマイズ可能な変数の名前を読み取り、それをシンボルとしてリターンする。引数の形式は@code{read-command}の引数と同じ。この関数は、@code{commandp}のかわりに@code{custom-variable-p}を述語に使用する点を除き、@code{read-command}と同様に振る舞う。
@end defun

@deffn Command read-color &optional prompt convert allow-empty display
この関数はカラー指定(カラー名、または@code{#RRRGGGBBB}のような形式のRGB16進値)の文字列を読み取る。これはプロンプトに@var{prompt}(デフォルトは@code{"Color
(name or #RGB
triplet):"})を表示して、カラー名にたいする補完を提供する(16進RGB値は補完しない)。標準的なカラー名に加えて、補完候補にはポイント位置のフォアグラウンドカラーとバックグラウンドカラーが含まれる。

Valid RGB values are described in @ref{Color Names}.

この関数のリターン値は、ミニバッファー内でユーザーがタイプした文字列である。しかし、インタラクティブに呼び出されたとき、またはオプション引数@var{convert}が非@code{nil}の場合は、入力されたカラー名のかわりに、それに対応するRGB値文字列をリターンする。この関数は、入力に有効なカラー指定を求める。@var{allow-empty}が非@code{nil}でユーザーがnull入力をエンターした場合は、空のカラー名が許される。

インタラクティブに呼び出されたとき、または@var{display}が非@code{nil}の場合には、エコーエリアにもリターン値が表示される。
@end deffn

  @ref{User-Chosen Coding
Systems}の関数@code{read-coding-system}と@code{read-non-nil-coding-system}、および@ref{Input
Methods}の@code{read-input-method-name}も参照のこと。

@node Reading File Names
@subsection Reading File Names
@cindex read file names
@cindex prompt for file name

  The high-level completion functions @code{read-file-name},
@code{read-directory-name}, and @code{read-shell-command} are designed to
read file names, directory names, and shell commands, respectively.  They
provide special features, including automatic insertion of the default
directory.

@defun read-file-name prompt &optional directory default require-match initial predicate
This function reads a file name, prompting with @var{prompt} and providing
completion.

As an exception, this function reads a file name using a graphical file
dialog instead of the minibuffer, if all of the following are true:

@enumerate
@item
It is invoked via a mouse command.

@item
The selected frame is on a graphical display supporting such dialogs.

@item
The variable @code{use-dialog-box} is non-@code{nil}.  @xref{Dialog Boxes,,
Dialog Boxes, emacs, The GNU Emacs Manual}.

@item
The @var{directory} argument, described below, does not specify a remote
file.  @xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.
@end enumerate

@noindent
The exact behavior when using a graphical file dialog is
platform-dependent.  Here, we simply document the behavior when using the
minibuffer.

@code{read-file-name} does not automatically expand the returned file name.
You must call @code{expand-file-name} yourself if an absolute file name is
required.

オプション引数@var{require-match}は、@code{completing-read}のときと同じ。@ref{Minibuffer
Completion}を参照のこと。

The argument @var{directory} specifies the directory to use for completing
relative file names.  It should be an absolute directory name.  If the
variable @code{insert-default-directory} is non-@code{nil}, @var{directory}
is also inserted in the minibuffer as initial input.  It defaults to the
current buffer's value of @code{default-directory}.

If you specify @var{initial}, that is an initial file name to insert in the
buffer (after @var{directory}, if that is inserted).  In this case, point
goes at the beginning of @var{initial}.  The default for @var{initial} is
@code{nil}---don't insert any file name.  To see what @var{initial} does,
try the command @kbd{C-x C-v} in a buffer visiting a file.  @strong{Please
note:} we recommend using @var{default} rather than @var{initial} in most
cases.

If @var{default} is non-@code{nil}, then the function returns @var{default}
if the user exits the minibuffer with the same non-empty contents that
@code{read-file-name} inserted initially.  The initial minibuffer contents
are always non-empty if @code{insert-default-directory} is non-@code{nil},
as it is by default.  @var{default} is not checked for validity, regardless
of the value of @var{require-match}.  However, if @var{require-match} is
non-@code{nil}, the initial minibuffer contents should be a valid file (or
directory) name.  Otherwise @code{read-file-name} attempts completion if the
user exits without any editing, and does not return @var{default}.
@var{default} is also available through the history commands.

If @var{default} is @code{nil}, @code{read-file-name} tries to find a
substitute default to use in its place, which it treats in exactly the same
way as if it had been specified explicitly.  If @var{default} is @code{nil},
but @var{initial} is non-@code{nil}, then the default is the absolute file
name obtained from @var{directory} and @var{initial}.  If both @var{default}
and @var{initial} are @code{nil} and the buffer is visiting a file,
@code{read-file-name} uses the absolute file name of that file as default.
If the buffer is not visiting a file, then there is no default.  In that
case, if the user types @key{RET} without any editing, @code{read-file-name}
simply returns the pre-inserted contents of the minibuffer.

If the user types @key{RET} in an empty minibuffer, this function returns an
empty string, regardless of the value of @var{require-match}.  This is, for
instance, how the user can make the current buffer visit no file using
@kbd{M-x set-visited-file-name}.

If @var{predicate} is non-@code{nil}, it specifies a function of one
argument that decides which file names are acceptable completion
alternatives.  A file name is an acceptable value if @var{predicate} returns
non-@code{nil} for it.

Here is an example of using @code{read-file-name}:

@example
@group
(read-file-name "The file is ")

;; @r{前の式を評価した後に、}
;;   @r{ミニバッファーに以下が表示される。:}
@end group

@group
---------- Buffer: Minibuffer ----------
The file is /gp/gnu/elisp/@point{}
---------- Buffer: Minibuffer ----------
@end group
@end example

@noindent
Typing @kbd{manual @key{TAB}} results in the following:

@example
@group
---------- Buffer: Minibuffer ----------
The file is /gp/gnu/elisp/manual.texi@point{}
---------- Buffer: Minibuffer ----------
@end group
@end example

@c Wordy to avoid overfull hbox in smallbook mode.
@noindent
If the user types @key{RET}, @code{read-file-name} returns the file name as
the string @code{"/gp/gnu/elisp/manual.texi"}.
@end defun

@defvar read-file-name-function
If non-@code{nil}, this should be a function that accepts the same arguments
as @code{read-file-name}.  When @code{read-file-name} is called, it calls
this function with the supplied arguments instead of doing its usual work.
@end defvar

@defopt read-file-name-completion-ignore-case
If this variable is non-@code{nil}, @code{read-file-name} ignores case when
performing completion.
@end defopt

@defun read-directory-name prompt &optional directory default require-match initial
This function is like @code{read-file-name} but allows only directory names
as completion alternatives.

If @var{default} is @code{nil} and @var{initial} is non-@code{nil},
@code{read-directory-name} constructs a substitute default by combining
@var{directory} (or the current buffer's default directory if
@var{directory} is @code{nil}) and @var{initial}.  If both @var{default} and
@var{initial} are @code{nil}, this function uses @var{directory} as
substitute default, or the current buffer's default directory if
@var{directory} is @code{nil}.
@end defun

@defopt insert-default-directory
This variable is used by @code{read-file-name}, and thus, indirectly, by
most commands reading file names.  (This includes all commands that use the
code letters @samp{f} or @samp{F} in their interactive form.
@xref{Interactive Codes,, Code Characters for interactive}.)  Its value
controls whether @code{read-file-name} starts by placing the name of the
default directory in the minibuffer, plus the initial file name, if any.  If
the value of this variable is @code{nil}, then @code{read-file-name} does
not place any initial input in the minibuffer (unless you specify initial
input with the @var{initial} argument).  In that case, the default directory
is still used for completion of relative file names, but is not displayed.

If this variable is @code{nil} and the initial minibuffer contents are
empty, the user may have to explicitly fetch the next history element to
access a default value.  If the variable is non-@code{nil}, the initial
minibuffer contents are always non-empty and the user can always request a
default value by immediately typing @key{RET} in an unedited minibuffer.
(See above.)

For example:

@example
@group
;; @r{Here the minibuffer starts out with the default directory.}
(let ((insert-default-directory t))
  (read-file-name "The file is "))
@end group

@group
---------- Buffer: Minibuffer ----------
The file is ~lewis/manual/@point{}
---------- Buffer: Minibuffer ----------
@end group

@group
;; @r{Here the minibuffer is empty and only the prompt}
;;   @r{appears on its line.}
(let ((insert-default-directory nil))
  (read-file-name "The file is "))
@end group

@group
---------- Buffer: Minibuffer ----------
The file is @point{}
---------- Buffer: Minibuffer ----------
@end group
@end example
@end defopt

@defun read-shell-command prompt &optional initial history &rest args
This function reads a shell command from the minibuffer, prompting with
@var{prompt} and providing intelligent completion.  It completes the first
word of the command using candidates that are appropriate for command names,
and the rest of the command words as file names.

This function uses @code{minibuffer-local-shell-command-map} as the keymap
for minibuffer input.  The @var{history} argument specifies the history list
to use; if is omitted or @code{nil}, it defaults to
@code{shell-command-history} (@pxref{Minibuffer History,
shell-command-history}).  The optional argument @var{initial} specifies the
initial content of the minibuffer (@pxref{Initial Input}).  The rest of
@var{args}, if present, are used as the @var{default} and
@var{inherit-input-method} arguments in @code{read-from-minibuffer}
(@pxref{Text from Minibuffer}).
@end defun

@defvar minibuffer-local-shell-command-map
This keymap is used by @code{read-shell-command} for completing command and
file names that are part of a shell command.  It uses
@code{minibuffer-local-map} as its parent keymap, and binds @key{TAB} to
@code{completion-at-point}.
@end defvar

@node Completion Variables
@subsection Completion Variables

  Here are some variables that can be used to alter the default completion
behavior.

@cindex completion styles
@defopt completion-styles
The value of this variable is a list of completion style (symbols) to use
for performing completion.  A @dfn{completion style} is a set of rules for
generating completions.  Each symbol occurring this list must have a
corresponding entry in @code{completion-styles-alist}.
@end defopt

@defvar completion-styles-alist
This variable stores a list of available completion styles.  Each element in
the list has the form

@example
(@var{style} @var{try-completion} @var{all-completions} @var{doc})
@end example

@noindent
Here, @var{style} is the name of the completion style (a symbol), which may
be used in the @code{completion-styles} variable to refer to this style;
@var{try-completion} is the function that does the completion;
@var{all-completions} is the function that lists the completions; and
@var{doc} is a string describing the completion style.

The @var{try-completion} and @var{all-completions} functions should each
accept four arguments: @var{string}, @var{collection}, @var{predicate}, and
@var{point}.  The @var{string}, @var{collection}, and @var{predicate}
arguments have the same meanings as in @code{try-completion} (@pxref{Basic
Completion}), and the @var{point} argument is the position of point within
@var{string}.  Each function should return a non-@code{nil} value if it
performed its job, and @code{nil} if it did not (e.g., if there is no way to
complete @var{string} according to the completion style).

When the user calls a completion command like @code{minibuffer-complete}
(@pxref{Completion Commands}), Emacs looks for the first style listed in
@code{completion-styles} and calls its @var{try-completion} function.  If
this function returns @code{nil}, Emacs moves to the next listed completion
style and calls its @var{try-completion} function, and so on until one of
the @var{try-completion} functions successfully performs completion and
returns a non-@code{nil} value.  A similar procedure is used for listing
completions, via the @var{all-completions} functions.

@xref{Completion Styles,,, emacs, The GNU Emacs Manual}, for a description
of the available completion styles.
@end defvar

@defopt completion-category-overrides
This variable specifies special completion styles and other completion
behaviors to use when completing certain types of text.  Its value should be
an alist with elements of the form @code{(@var{category} . @var{alist})}.
@var{category} is a symbol describing what is being completed; currently,
the @code{buffer}, @code{file}, and @code{unicode-name} categories are
defined, but others can be defined via specialized completion functions
(@pxref{Programmed Completion}).  @var{alist} is an association list
describing how completion should behave for the corresponding category.  The
following alist keys are supported:

@table @code
@item styles
The value should be a list of completion styles (symbols).

@item cycle
The value should be a value for @code{completion-cycle-threshold}
(@pxref{Completion Options,,, emacs, The GNU Emacs Manual}) for this
category.
@end table

@noindent
Additional alist entries may be defined in the future.
@end defopt

@defvar completion-extra-properties
This variable is used to specify extra properties of the current completion
command.  It is intended to be let-bound by specialized completion
commands.  Its value should be a list of property and value pairs.  The
following properties are supported:

@table @code
@item :annotation-function
The value should be a function to add annotations in the completions
buffer.  This function must accept one argument, a completion, and should
either return @code{nil} or a string to be displayed next to the completion.

@item :exit-function
The value should be a function to run after performing completion.  The
function should accept two arguments, @var{string} and @var{status}, where
@var{string} is the text to which the field was completed, and @var{status}
indicates what kind of operation happened: @code{finished} if text is now
complete, @code{sole} if the text cannot be further completed but completion
is not finished, or @code{exact} if the text is a valid completion but may
be further completed.
@end table
@end defvar

@node Programmed Completion
@subsection Programmed Completion
@cindex programmed completion

  Sometimes it is not possible or convenient to create an alist or an obarray
containing all the intended possible completions ahead of time.  In such a
case, you can supply your own function to compute the completion of a given
string.  This is called @dfn{programmed completion}.  Emacs uses programmed
completion when completing file names (@pxref{File Name Completion}), among
many other cases.

  To use this feature, pass a function as the @var{collection} argument to
@code{completing-read}.  The function @code{completing-read} arranges to
pass your completion function along to @code{try-completion},
@code{all-completions}, and other basic completion functions, which will
then let your function do all the work.

  The completion function should accept three arguments:

@itemize @bullet
@item
The string to be completed.

@item
A predicate function with which to filter possible matches, or @code{nil} if
none.  The function should call the predicate for each possible match, and
ignore the match if the predicate returns @code{nil}.

@item
A flag specifying the type of completion operation to perform.  This is one
of the following four values:

@table @code
@item nil
This specifies a @code{try-completion} operation.  The function should
return @code{t} if the specified string is a unique and exact match; if
there is more than one match, it should return the common substring of all
matches (if the string is an exact match for one completion alternative but
also matches other longer alternatives, the return value is the string); if
there are no matches, it should return @code{nil}.

@item t
This specifies an @code{all-completions} operation.  The function should
return a list of all possible completions of the specified string.

@item lambda
This specifies a @code{test-completion} operation.  The function should
return @code{t} if the specified string is an exact match for some
completion alternative; @code{nil} otherwise.

@item (boundaries . @var{suffix})
This specifies a @code{completion-boundaries} operation.  The function
should return @code{(boundaries @var{start} . @var{end})}, where @var{start}
is the position of the beginning boundary in the specified string, and
@var{end} is the position of the end boundary in @var{suffix}.

@item metadata
This specifies a request for information about the state of the current
completion.  The return value should have the form @code{(metadata
. @var{alist})}, where @var{alist} is an alist whose elements are described
below.
@end table

@noindent
If the flag has any other value, the completion function should return
@code{nil}.
@end itemize

The following is a list of metadata entries that a completion function may
return in response to a @code{metadata} flag argument:

@table @code
@item category
The value should be a symbol describing what kind of text the completion
function is trying to complete.  If the symbol matches one of the keys in
@code{completion-category-overrides}, the usual completion behavior is
overridden.  @xref{Completion Variables}.

@item annotation-function
The value should be a function for @dfn{annotating} completions.  The
function should take one argument, @var{string}, which is a possible
completion.  It should return a string, which is displayed after the
completion @var{string} in the @file{*Completions*} buffer.

@item display-sort-function
The value should be a function for sorting completions.  The function should
take one argument, a list of completion strings, and return a sorted list of
completion strings.  It is allowed to alter the input list destructively.

@item cycle-sort-function
The value should be a function for sorting completions, when
@code{completion-cycle-threshold} is non-@code{nil} and the user is cycling
through completion alternatives.  @xref{Completion Options,,, emacs, The GNU
Emacs Manual}.  Its argument list and return value are the same as for
@code{display-sort-function}.
@end table

@defun completion-table-dynamic function
This function is a convenient way to write a function that can act as a
programmed completion function.  The argument @var{function} should be a
function that takes one argument, a string, and returns an alist of possible
completions of it.  You can think of @code{completion-table-dynamic} as a
transducer between that interface and the interface for programmed
completion functions.
@end defun

@defun completion-table-with-cache function &optional ignore-case
This is a wrapper for @code{completion-table-dynamic} that saves the last
argument-result pair.  This means that multiple lookups with the same
argument only need to call @var{function} once.  This can be useful when a
slow operation is involved, such as calling an external process.
@end defun

@node Completion in Buffers
@subsection Completion in Ordinary Buffers
@cindex inline completion

@findex completion-at-point
  Although completion is usually done in the minibuffer, the completion
facility can also be used on the text in ordinary Emacs buffers.  In many
major modes, in-buffer completion is performed by the @kbd{C-M-i} or
@kbd{M-@key{TAB}} command, bound to @code{completion-at-point}.
@xref{Symbol Completion,,, emacs, The GNU Emacs Manual}.  This command uses
the abnormal hook variable @code{completion-at-point-functions}:

@defvar completion-at-point-functions
The value of this abnormal hook should be a list of functions, which are
used to compute a completion table for completing the text at point.  It can
be used by major modes to provide mode-specific completion tables
(@pxref{Major Mode Conventions}).

When the command @code{completion-at-point} runs, it calls the functions in
the list one by one, without any argument.  Each function should return
@code{nil} if it is unable to produce a completion table for the text at
point.  Otherwise it should return a list of the form

@example
(@var{start} @var{end} @var{collection} . @var{props})
@end example

@noindent
@var{start} and @var{end} delimit the text to complete (which should enclose
point).  @var{collection} is a completion table for completing that text, in
a form suitable for passing as the second argument to @code{try-completion}
(@pxref{Basic Completion}); completion alternatives will be generated from
this completion table in the usual way, via the completion styles defined in
@code{completion-styles} (@pxref{Completion Variables}).  @var{props} is a
property list for additional information; any of the properties in
@code{completion-extra-properties} are recognized (@pxref{Completion
Variables}), as well as the following additional ones:

@table @code
@item :predicate
The value should be a predicate that completion candidates need to satisfy.

@item :exclusive
If the value is @code{no}, then if the completion table fails to match the
text at point, @code{completion-at-point} moves on to the next function in
@code{completion-at-point-functions} instead of reporting a completion
failure.
@end table

A function in @code{completion-at-point-functions} may also return a
function.  In that case, that returned function is called, with no argument,
and it is entirely responsible for performing the completion.  We discourage
this usage; it is intended to help convert old code to using
@code{completion-at-point}.

The first function in @code{completion-at-point-functions} to return a
non-@code{nil} value is used by @code{completion-at-point}.  The remaining
functions are not called.  The exception to this is when there is an
@code{:exclusive} specification, as described above.
@end defvar

  The following function provides a convenient way to perform completion on an
arbitrary stretch of text in an Emacs buffer:

@defun completion-in-region start end collection &optional predicate
This function completes the text in the current buffer between the positions
@var{start} and @var{end}, using @var{collection}.  The argument
@var{collection} has the same meaning as in @code{try-completion}
(@pxref{Basic Completion}).

This function inserts the completion text directly into the current buffer.
Unlike @code{completing-read} (@pxref{Minibuffer Completion}), it does not
activate the minibuffer.

For this function to work, point must be somewhere between @var{start} and
@var{end}.
@end defun


@node Yes-or-No Queries
@section Yes-or-No Queries
@cindex asking the user questions
@cindex querying the user
@cindex yes-or-no questions

  This section describes functions used to ask the user a yes-or-no question.
The function @code{y-or-n-p} can be answered with a single character; it is
useful for questions where an inadvertent wrong answer will not have serious
consequences.  @code{yes-or-no-p} is suitable for more momentous questions,
since it requires three or four characters to answer.

   If either of these functions is called in a command that was invoked using
the mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command
Loop Info}) is either @code{nil} or a list---then it uses a dialog box or
pop-up menu to ask the question.  Otherwise, it uses keyboard input.  You
can force use either of the mouse or of keyboard input by binding
@code{last-nonmenu-event} to a suitable value around the call.

  Strictly speaking, @code{yes-or-no-p} uses the minibuffer and
@code{y-or-n-p} does not; but it seems best to describe them together.

@defun y-or-n-p prompt
This function asks the user a question, expecting input in the echo area.
It returns @code{t} if the user types @kbd{y}, @code{nil} if the user types
@kbd{n}.  This function also accepts @key{SPC} to mean yes and @key{DEL} to
mean no.  It accepts @kbd{C-]} to mean ``quit'', like @kbd{C-g}, because the
question might look like a minibuffer and for that reason the user might try
to use @kbd{C-]} to get out.  The answer is a single character, with no
@key{RET} needed to terminate it.  Upper and lower case are equivalent.

``Asking the question'' means printing @var{prompt} in the echo area,
followed by the string @w{@samp{(y or n) }}.  If the input is not one of the
expected answers (@kbd{y}, @kbd{n}, @kbd{@key{SPC}}, @kbd{@key{DEL}}, or
something that quits), the function responds @samp{Please answer y or n.},
and repeats the request.

This function does not actually use the minibuffer, since it does not allow
editing of the answer.  It actually uses the echo area (@pxref{The Echo
Area}), which uses the same screen space as the minibuffer.  The cursor
moves to the echo area while the question is being asked.

The answers and their meanings, even @samp{y} and @samp{n}, are not
hardwired, and are specified by the keymap @code{query-replace-map}
(@pxref{Search and Replace}).  In particular, if the user enters the special
responses @code{recenter}, @code{scroll-up}, @code{scroll-down},
@code{scroll-other-window}, or @code{scroll-other-window-down} (respectively
bound to @kbd{C-l}, @kbd{C-v}, @kbd{M-v}, @kbd{C-M-v} and @kbd{C-M-S-v} in
@code{query-replace-map}), this function performs the specified window
recentering or scrolling operation, and poses the question again.

@noindent
We show successive lines of echo area messages, but only one actually
appears on the screen at a time.
@end defun

@defun y-or-n-p-with-timeout prompt seconds default
Like @code{y-or-n-p}, except that if the user fails to answer within
@var{seconds} seconds, this function stops waiting and returns
@var{default}.  It works by setting up a timer; see @ref{Timers}.  The
argument @var{seconds} should be a number.
@end defun

@defun yes-or-no-p prompt
This function asks the user a question, expecting input in the minibuffer.
It returns @code{t} if the user enters @samp{yes}, @code{nil} if the user
types @samp{no}.  The user must type @key{RET} to finalize the response.
Upper and lower case are equivalent.

@code{yes-or-no-p} starts by displaying @var{prompt} in the echo area,
followed by @w{@samp{(yes or no) }}.  The user must type one of the expected
responses; otherwise, the function responds @samp{Please answer yes or no.},
waits about two seconds and repeats the request.

@code{yes-or-no-p} requires more work from the user than @code{y-or-n-p} and
is appropriate for more crucial decisions.

以下は例である:

@smallexample
@group
(yes-or-no-p "Do you really want to remove everything? ")

;; @r{前の式を評価した後、}
;;   @r{空のミニバッファーに}
;;   @r{以下のプロンプトが表示される:}
@end group

@group
---------- Buffer: minibuffer ----------
Do you really want to remove everything? (yes or no)
---------- Buffer: minibuffer ----------
@end group
@end smallexample

@noindent
If the user first types @kbd{y @key{RET}}, which is invalid because this
function demands the entire word @samp{yes}, it responds by displaying these
prompts, with a brief pause between them:

@smallexample
@group
---------- Buffer: minibuffer ----------
Please answer yes or no.
Do you really want to remove everything? (yes or no)
---------- Buffer: minibuffer ----------
@end group
@end smallexample
@end defun

@node Multiple Queries
@section Asking Multiple Y-or-N Questions
@cindex multiple yes-or-no questions

  When you have a series of similar questions to ask, such as ``Do you want to
save this buffer'' for each buffer in turn, you should use
@code{map-y-or-n-p} to ask the collection of questions, rather than asking
each question individually.  This gives the user certain convenient
facilities such as the ability to answer the whole series at once.

@defun map-y-or-n-p prompter actor list &optional help action-alist no-cursor-in-echo-area
This function asks the user a series of questions, reading a
single-character answer in the echo area for each one.

The value of @var{list} specifies the objects to ask questions about.  It
should be either a list of objects or a generator function.  If it is a
function, it should expect no arguments, and should return either the next
object to ask about, or @code{nil}, meaning to stop asking questions.

The argument @var{prompter} specifies how to ask each question.  If
@var{prompter} is a string, the question text is computed like this:

@example
(format @var{prompter} @var{object})
@end example

@noindent
where @var{object} is the next object to ask about (as obtained from
@var{list}).

If not a string, @var{prompter} should be a function of one argument (the
next object to ask about) and should return the question text.  If the value
is a string, that is the question to ask the user.  The function can also
return @code{t}, meaning do act on this object (and don't ask the user), or
@code{nil}, meaning ignore this object (and don't ask the user).

The argument @var{actor} says how to act on the answers that the user
gives.  It should be a function of one argument, and it is called with each
object that the user says yes for.  Its argument is always an object
obtained from @var{list}.

If the argument @var{help} is given, it should be a list of this form:

@example
(@var{singular} @var{plural} @var{action})
@end example

@noindent
where @var{singular} is a string containing a singular noun that describes
the objects conceptually being acted on, @var{plural} is the corresponding
plural noun, and @var{action} is a transitive verb describing what
@var{actor} does.

If you don't specify @var{help}, the default is @code{("object" "objects"
"act on")}.

Each time a question is asked, the user may enter @kbd{y}, @kbd{Y}, or
@key{SPC} to act on that object; @kbd{n}, @kbd{N}, or @key{DEL} to skip that
object; @kbd{!} to act on all following objects; @key{ESC} or @kbd{q} to
exit (skip all following objects); @kbd{.} (period) to act on the current
object and then exit; or @kbd{C-h} to get help.  These are the same answers
that @code{query-replace} accepts.  The keymap @code{query-replace-map}
defines their meaning for @code{map-y-or-n-p} as well as for
@code{query-replace}; see @ref{Search and Replace}.

You can use @var{action-alist} to specify additional possible answers and
what they mean.  It is an alist of elements of the form @code{(@var{char}
@var{function} @var{help})}, each of which defines one additional answer.
In this element, @var{char} is a character (the answer); @var{function} is a
function of one argument (an object from @var{list}); @var{help} is a
string.

When the user responds with @var{char}, @code{map-y-or-n-p} calls
@var{function}.  If it returns non-@code{nil}, the object is considered
``acted upon'', and @code{map-y-or-n-p} advances to the next object in
@var{list}.  If it returns @code{nil}, the prompt is repeated for the same
object.

Normally, @code{map-y-or-n-p} binds @code{cursor-in-echo-area} while
prompting.  But if @var{no-cursor-in-echo-area} is non-@code{nil}, it does
not do that.

If @code{map-y-or-n-p} is called in a command that was invoked using the
mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command Loop
Info}) is either @code{nil} or a list---then it uses a dialog box or pop-up
menu to ask the question.  In this case, it does not use keyboard input or
the echo area.  You can force use either of the mouse or of keyboard input
by binding @code{last-nonmenu-event} to a suitable value around the call.

The return value of @code{map-y-or-n-p} is the number of objects acted on.
@end defun
@c FIXME  An example of this would be more useful than all the
@c preceding examples of simple things.

@node Reading a Password
@section Reading a Password
@cindex passwords, reading

  To read a password to pass to another program, you can use the function
@code{read-passwd}.

@defun read-passwd prompt &optional confirm default
This function reads a password, prompting with @var{prompt}.  It does not
echo the password as the user types it; instead, it echoes @samp{.} for each
character in the password.  (Note that in batch mode, the input is not
hidden.)

The optional argument @var{confirm}, if non-@code{nil}, says to read the
password twice and insist it must be the same both times.  If it isn't the
same, the user has to type it over and over until the last two times match.

The optional argument @var{default} specifies the default password to return
if the user enters empty input.  If @var{default} is @code{nil}, then
@code{read-passwd} returns the null string in that case.
@end defun

@node Minibuffer Commands
@section Minibuffer Commands

  This section describes some commands meant for use in the minibuffer.

@deffn Command exit-minibuffer
This command exits the active minibuffer.  It is normally bound to keys in
minibuffer local keymaps.
@end deffn

@deffn Command self-insert-and-exit
This command exits the active minibuffer after inserting the last character
typed on the keyboard (found in @code{last-command-event}; @pxref{Command
Loop Info}).
@end deffn

@deffn Command previous-history-element n
This command replaces the minibuffer contents with the value of the
@var{n}th previous (older) history element.
@end deffn

@deffn Command next-history-element n
This command replaces the minibuffer contents with the value of the
@var{n}th more recent history element.
@end deffn

@deffn Command previous-matching-history-element pattern n
This command replaces the minibuffer contents with the value of the
@var{n}th previous (older) history element that matches @var{pattern} (a
regular expression).
@end deffn

@deffn Command next-matching-history-element pattern n
This command replaces the minibuffer contents with the value of the
@var{n}th next (newer) history element that matches @var{pattern} (a regular
expression).
@end deffn

@deffn Command previous-complete-history-element n
This command replaces the minibuffer contents with the value of the
@var{n}th previous (older) history element that completes the current
contents of the minibuffer before the point.
@end deffn

@deffn Command next-complete-history-element n
This command replaces the minibuffer contents with the value of the
@var{n}th next (newer) history element that completes the current contents
of the minibuffer before the point.
@end deffn


@node Minibuffer Windows
@section Minibuffer Windows
@cindex minibuffer windows

  These functions access and select minibuffer windows and test whether they
are active.

@defun active-minibuffer-window
This function returns the currently active minibuffer window, or @code{nil}
if there is none.
@end defun

@defun minibuffer-window &optional frame
@anchor{Definition of minibuffer-window}
This function returns the minibuffer window used for frame @var{frame}.  If
@var{frame} is @code{nil}, that stands for the current frame.  Note that the
minibuffer window used by a frame need not be part of that frame---a frame
that has no minibuffer of its own necessarily uses some other frame's
minibuffer window.
@end defun

@defun set-minibuffer-window window
This function specifies @var{window} as the minibuffer window to use.  This
affects where the minibuffer is displayed if you put text in it without
invoking the usual minibuffer commands.  It has no effect on the usual
minibuffer input functions because they all start by choosing the minibuffer
window according to the current frame.
@end defun

@c Emacs 19 feature
@defun window-minibuffer-p &optional window
This function returns non-@code{nil} if @var{window} is a minibuffer
window.  @var{window} defaults to the selected window.
@end defun

It is not correct to determine whether a given window is a minibuffer by
comparing it with the result of @code{(minibuffer-window)}, because there
can be more than one minibuffer window if there is more than one frame.

@defun minibuffer-window-active-p window
This function returns non-@code{nil} if @var{window} is the currently active
minibuffer window.
@end defun

@node Minibuffer Contents
@section Minibuffer Contents
@cindex access minibuffer contents
@cindex minibuffer contents, accessing

  These functions access the minibuffer prompt and contents.

@defun minibuffer-prompt
This function returns the prompt string of the currently active minibuffer.
If no minibuffer is active, it returns @code{nil}.
@end defun

@defun minibuffer-prompt-end
This function returns the current position of the end of the minibuffer
prompt, if a minibuffer is current.  Otherwise, it returns the minimum valid
buffer position.
@end defun

@defun minibuffer-prompt-width
This function returns the current display-width of the minibuffer prompt, if
a minibuffer is current.  Otherwise, it returns zero.
@end defun

@defun minibuffer-contents
This function returns the editable contents of the minibuffer (that is,
everything except the prompt) as a string, if a minibuffer is current.
Otherwise, it returns the entire contents of the current buffer.
@end defun

@defun minibuffer-contents-no-properties
This is like @code{minibuffer-contents}, except that it does not copy text
properties, just the characters themselves.  @xref{Text Properties}.
@end defun

@defun delete-minibuffer-contents
This function erases the editable contents of the minibuffer (that is,
everything except the prompt), if a minibuffer is current.  Otherwise, it
erases the entire current buffer.
@end defun

@node Recursive Mini
@section Recursive Minibuffers
@cindex recursive minibuffers

  These functions and variables deal with recursive minibuffers
(@pxref{Recursive Editing}):

@defun minibuffer-depth
This function returns the current depth of activations of the minibuffer, a
nonnegative integer.  If no minibuffers are active, it returns zero.
@end defun

@defopt enable-recursive-minibuffers
If this variable is non-@code{nil}, you can invoke commands (such as
@code{find-file}) that use minibuffers even while the minibuffer window is
active.  Such invocation produces a recursive editing level for a new
minibuffer.  The outer-level minibuffer is invisible while you are editing
the inner one.

If this variable is @code{nil}, you cannot invoke minibuffer commands when
the minibuffer window is active, not even if you switch to another window to
do it.
@end defopt

@c Emacs 19 feature
If a command name has a property @code{enable-recursive-minibuffers} that is
non-@code{nil}, then the command can use the minibuffer to read arguments
even if it is invoked from the minibuffer.  A command can also achieve this
by binding @code{enable-recursive-minibuffers} to @code{t} in the
interactive declaration (@pxref{Using Interactive}).  The minibuffer command
@code{next-matching-history-element} (normally @kbd{M-s} in the minibuffer)
does the latter.

@node Minibuffer Misc
@section Minibuffer Miscellany

@defun minibufferp &optional buffer-or-name
This function returns non-@code{nil} if @var{buffer-or-name} is a
minibuffer.  If @var{buffer-or-name} is omitted, it tests the current
buffer.
@end defun

@defvar minibuffer-setup-hook
This is a normal hook that is run whenever the minibuffer is entered.
@xref{Hooks}.
@end defvar

@defvar minibuffer-exit-hook
This is a normal hook that is run whenever the minibuffer is exited.
@xref{Hooks}.
@end defvar

@defvar minibuffer-help-form
@anchor{Definition of minibuffer-help-form}
The current value of this variable is used to rebind @code{help-form}
locally inside the minibuffer (@pxref{Help Functions}).
@end defvar

@defvar minibuffer-scroll-window
@anchor{Definition of minibuffer-scroll-window}
If the value of this variable is non-@code{nil}, it should be a window
object.  When the function @code{scroll-other-window} is called in the
minibuffer, it scrolls this window.
@end defvar

@defun minibuffer-selected-window
This function returns the window that was selected when the minibuffer was
entered.  If selected window is not a minibuffer window, it returns
@code{nil}.
@end defun

@defopt max-mini-window-height
This variable specifies the maximum height for resizing minibuffer windows.
If a float, it specifies a fraction of the height of the frame.  If an
integer, it specifies a number of lines.
@end defopt

@vindex minibuffer-message-timeout
@defun minibuffer-message string &rest args
This function displays @var{string} temporarily at the end of the minibuffer
text, for a few seconds, or until the next input event arrives, whichever
comes first.  The variable @code{minibuffer-message-timeout} specifies the
number of seconds to wait in the absence of input.  It defaults to 2.  If
@var{args} is non-@code{nil}, the actual message is obtained by passing
@var{string} and @var{args} through @code{format}.  @xref{Formatting
Strings}.
@end defun

@deffn Command minibuffer-inactive-mode
This is the major mode used in inactive minibuffers.  It uses keymap
@code{minibuffer-inactive-mode-map}.  This can be useful if the minibuffer
is in a separate frame.  @xref{Minibuffers and Frames}.
@end deffn
