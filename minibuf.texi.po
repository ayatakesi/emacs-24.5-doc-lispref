# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Emacs-24.5\n"
"POT-Creation-Date: 2018-02-08 01:38+0900\n"
"PO-Revision-Date: 2018-02-08 13:12+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: minibuf.texi.orig:6 minibuf.texi.orig:7
#, no-wrap
msgid "Minibuffers"
msgstr "Minibuffers"

#. type: cindex
#: minibuf.texi.orig:8
#, no-wrap
msgid "arguments, reading"
msgstr "arguments, reading"

#. type: cindex
#: minibuf.texi.orig:9
#, no-wrap
msgid "complex arguments"
msgstr "complex arguments"

#. type: cindex
#: minibuf.texi.orig:10
#, no-wrap
msgid "minibuffer"
msgstr "minibuffer"

#. type: Plain text
#: minibuf.texi.orig:19
msgid ""
"A @dfn{minibuffer} is a special buffer that Emacs commands use to read "
"arguments more complicated than the single numeric prefix argument.  These "
"arguments include file names, buffer names, and command names (as in "
"@kbd{M-x}).  The minibuffer is displayed on the bottom line of the frame, in "
"the same place as the echo area (@pxref{The Echo Area}), but only while it "
"is in use for reading an argument."
msgstr "@dfn{ミニバッファー(minibuffer)}とは、単一の数プレフィックス引数より複雑な引数を読み取るためにEmacsコマンドが使用する、特別なバッファーのことです。これらの引数にはファイル名、バッファー名、(@kbd{M-x}での)コマンド名が含まれます。ミニバッファーはフレームの最下行、エコーエリア(@ref{The Echo Area}を参照)と同じ場所に表示されますが、引数を読み取るときだけ使用されます。"

#. type: node
#: minibuf.texi.orig:36 minibuf.texi.orig:38
#, no-wrap
msgid "Intro to Minibuffers"
msgstr "Intro to Minibuffers"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Basic information about minibuffers."
msgstr "ミニバッファーに関する基本的な情報。"

#. type: node
#: minibuf.texi.orig:36 minibuf.texi.orig:108
#, no-wrap
msgid "Text from Minibuffer"
msgstr "Text from Minibuffer"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "How to read a straight text string."
msgstr "そのままのテキスト文字列を読み取る方法。"

#. type: node
#: minibuf.texi.orig:36 minibuf.texi.orig:392
#, no-wrap
msgid "Object from Minibuffer"
msgstr "Object from Minibuffer"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "How to read a Lisp object or expression."
msgstr "Lispオブジェクトや式を読み取る方法。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:488 minibuf.texi.orig:489
#, no-wrap
msgid "Minibuffer History"
msgstr "Minibuffer History"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Recording previous minibuffer inputs so the user can reuse them."
msgstr "ユーザーが再利用できるように以前のミニバッファー入力は記録される。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:623 minibuf.texi.orig:624
#, no-wrap
msgid "Initial Input"
msgstr "Initial Input"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Specifying initial contents for the minibuffer."
msgstr "ミニバッファーにたいして初期内容を指定する。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:661 minibuf.texi.orig:662
#, no-wrap
msgid "Completion"
msgstr "Completion"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "How to invoke and customize completion."
msgstr "補完の呼び出しとカスタマイズ方法。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:1910 minibuf.texi.orig:1911
#, no-wrap
msgid "Yes-or-No Queries"
msgstr "Yes-or-No Queries"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Asking a question with a simple answer."
msgstr "問いにたいし単純な答えを求める。"

#. type: node
#: minibuf.texi.orig:36 minibuf.texi.orig:2024
#, no-wrap
msgid "Multiple Queries"
msgstr "Multiple Queries"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Asking a series of similar questions."
msgstr "一連の似たような問いに答える。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:2121 minibuf.texi.orig:2122
#, no-wrap
msgid "Reading a Password"
msgstr "Reading a Password"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Reading a password from the terminal."
msgstr "端末からパスワードを読み取る。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:2144 minibuf.texi.orig:2145
#, no-wrap
msgid "Minibuffer Commands"
msgstr "Minibuffer Commands"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Commands used as key bindings in minibuffers."
msgstr "ミニバッファー内でキーバインドとして使用されるコマンド。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:2196 minibuf.texi.orig:2197
#, no-wrap
msgid "Minibuffer Windows"
msgstr "Minibuffer Windows"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Operating on the special minibuffer windows."
msgstr "特殊なミニバッファーウィンドウを処理する。"

#. type: section
#: minibuf.texi.orig:36 minibuf.texi.orig:2242 minibuf.texi.orig:2243
#, no-wrap
msgid "Minibuffer Contents"
msgstr "Minibuffer Contents"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "How such commands access the minibuffer text."
msgstr "どのようなコマンドがミニバッファーのテキストにアクセスするか。"

#. type: node
#: minibuf.texi.orig:36 minibuf.texi.orig:2283
#, no-wrap
msgid "Recursive Mini"
msgstr "Recursive Mini"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Whether recursive entry to minibuffer is allowed."
msgstr "ミニバッファーへの再帰的なエントリーが許容されるかどうか。"

#. type: node
#: minibuf.texi.orig:36 minibuf.texi.orig:2317
#, no-wrap
msgid "Minibuffer Misc"
msgstr "Minibuffer Misc"

#. type: menuentry
#: minibuf.texi.orig:36
msgid "Various customization hooks and variables."
msgstr "カスタマイズ用のさまざまなフックや変数。"

#. type: section
#: minibuf.texi.orig:39
#, no-wrap
msgid "Introduction to Minibuffers"
msgstr "Introduction to Minibuffers"

#. type: Plain text
#: minibuf.texi.orig:50
msgid ""
"In most ways, a minibuffer is a normal Emacs buffer.  Most operations "
"@emph{within} a buffer, such as editing commands, work normally in a "
"minibuffer.  However, many operations for managing buffers do not apply to "
"minibuffers.  The name of a minibuffer always has the form @w{@samp{ "
"*Minibuf-@var{number}*}}, and it cannot be changed.  Minibuffers are "
"displayed only in special windows used only for minibuffers; these windows "
"always appear at the bottom of a frame.  (Sometimes frames have no "
"minibuffer window, and sometimes a special kind of frame contains nothing "
"but a minibuffer window; see @ref{Minibuffers and Frames}.)"
msgstr "ほとんどの点において、ミニバッファーは普通のEmacsバッファーです。編集コマンドのようなバッファーにたいするほとんどの操作は、ミニバッファーでも機能します。しかし、バッファーを管理する操作の多くは、ミニバッファーに適用できません。ミニバッファーは常に@w{@samp{ *Minibuf-@var{number}*}}という形式の名前をもち、変更することはできません。ミニバッファーはミニバッファー用の特殊なウィンドウだけに表示されます。これらのウィンドウは常にフレーム最下に表示されます。(フレームにミニバッファーウィンドウがないときや、ミニバッファーウィンドウだけをもつ特殊なフレームもあります。)@ref{Minibuffers and Frames}を参照してください。"

#. type: Plain text
#: minibuf.texi.orig:59
msgid ""
"The text in the minibuffer always starts with the @dfn{prompt string}, the "
"text that was specified by the program that is using the minibuffer to tell "
"the user what sort of input to type.  This text is marked read-only so you "
"won't accidentally delete or change it.  It is also marked as a field "
"(@pxref{Fields}), so that certain motion functions, including "
"@code{beginning-of-line}, @code{forward-word}, @code{forward-sentence}, and "
"@code{forward-paragraph}, stop at the boundary between the prompt and the "
"actual text."
msgstr "ミニバッファー内のテキストは常に@dfn{プロンプト文字列(prompt string)}で始まります。これはミニバッファーを使用しているプログラムが、ユーザーにたいしてどのような種類の入力が求められているか告げるために指定するテキストです。このテキストは意図せずに変更してしまわないように、読み取り専用としてマークされます。このテキストは@code{beginning-of-line}、@code{forward-word}、@code{forward-sentence}、@code{forward-paragraph}を含む特定の移動用関数が、プロンプトと実際のテキストの境界でストップするように、フィールド(@ref{Fields}を参照)としてもマークされています。"

#. type: Plain text
#: minibuf.texi.orig:71
msgid ""
"The minibuffer's window is normally a single line; it grows automatically if "
"the contents require more space.  Whilst it is active, you can explicitly "
"resize it temporarily with the window sizing commands; it reverts to its "
"normal size when the minibuffer is exited.  When the minibuffer is not "
"active, you can resize it permanently by using the window sizing commands in "
"the frame's other window, or dragging the mode line with the mouse.  (Due to "
"details of the current implementation, for this to work "
"@code{resize-mini-windows} must be @code{nil}.)  If the frame contains just "
"a minibuffer, you can change the minibuffer's size by changing the frame's "
"size."
msgstr "ミニバッファーのウィンドウは、通常は1行です。ミニバッファーのコンテンツがより多くのスペースを要求する場合は、自動的に拡張されます。ミニバッファーのウィンドウがアクティブな間は、ウィンドウのサイズ変更コマンドで一時的にウィンドウのサイズを変更できます。サイズの変更は、ミニバッファーをexitしたとき、通常のサイズにリバートされます。ミニバッファーがアクティブでないときはフレーム内の他のウィンドウでウィンドウのサイズ変更コマンドを使用するか、マウスでモードラインをドラッグして、ミニバッファーのサイズを永続的に変更できます。(現実装では、これが機能するには@code{resize-mini-windows}が@code{nil}でなければなりません。) フレームがミニバッファーだけを含む場合は、そのフレームのサイズを変更してミニバッファーのサイズを変更できます。"

#. type: Plain text
#: minibuf.texi.orig:76
msgid ""
"Use of the minibuffer reads input events, and that alters the values of "
"variables such as @code{this-command} and @code{last-command} "
"(@pxref{Command Loop Info}).  Your program should bind them around the code "
"that uses the minibuffer, if you do not want that to change them."
msgstr "ミニバッファーの使用により入力イベントが読み取られ、@code{this-command}や@code{last-command}のような変数の値が変更されます(@ref{Command Loop Info}を参照)。プログラムにそれらを変更させたくない場合は、ミニバッファーを使用するコードの前後でそれらをバインドするべきです。"

#. type: Plain text
#: minibuf.texi.orig:88
msgid ""
"Under some circumstances, a command can use a minibuffer even if there is an "
"active minibuffer; such a minibuffer is called a @dfn{recursive "
"minibuffer}.  The first minibuffer is named @w{@samp{ *Minibuf-1*}}.  "
"Recursive minibuffers are named by incrementing the number at the end of the "
"name.  (The names begin with a space so that they won't show up in normal "
"buffer lists.)  Of several recursive minibuffers, the innermost (or most "
"recently entered) is the active minibuffer.  We usually call this ``the'' "
"minibuffer.  You can permit or forbid recursive minibuffers by setting the "
"variable @code{enable-recursive-minibuffers}, or by putting properties of "
"that name on command symbols (@xref{Recursive Mini}.)"
msgstr "ある状況下では、アクティブなミニバッファーが存在するときでもコマンドがミニバッファーを使用できます。そのようなミニバッファーは@dfn{再帰ミニバッファー(recursive minibuffer)}と呼ばれます。この場合、最初のミニバッファーは@w{@samp{ *Minibuf-1*}}という名前になります。再帰ミニバッファーはミニバッファー名の最後の数字を増加させて命名されます。(名前はスペースで始まるので、通常のバッファーリストには表示されません。) 再帰ミニバッファーが複数ある場合は、最内の(もっとも最近にエンターされた)ミニバッファーがアクティブなミニバッファーになります。このバッファーが、通常ではミニバッファーと呼ばれるバッファーです。変数@code{enable-recursive-minibuffers}、またはコマンドシンボルのその名前のプロパティをセットすることにより再帰ミニバッファーを許可、または禁止できます(@ref{Recursive Mini}を参照)。"

#. type: Plain text
#: minibuf.texi.orig:95
msgid ""
"Like other buffers, a minibuffer uses a local keymap (@pxref{Keymaps}) to "
"specify special key bindings.  The function that invokes the minibuffer also "
"sets up its local map according to the job to be done.  @xref{Text from "
"Minibuffer}, for the non-completion minibuffer local maps.  @xref{Completion "
"Commands}, for the minibuffer local maps for completion."
msgstr "他のバッファーと同様、ミニバッファーは特別なキーバインドを指定するためにローカルキーマップ(@ref{Keymaps}を参照)を使用します。ミニバッファーを呼び出す関数も、処理を行うためにローカルマップをセットアップします。補完なしのミニバッファーローカルマップについては、@ref{Text from Minibuffer}を参照してください。補完つきのミニバッファーローカルマップについては、@ref{Completion Commands}を参照してください。"

#. type: cindex
#: minibuf.texi.orig:96
#, no-wrap
msgid "inactive minibuffer"
msgstr "inactive minibuffer"

#. type: Plain text
#: minibuf.texi.orig:101
msgid ""
"When a minibuffer is inactive, its major mode is "
"@code{minibuffer-inactive-mode}, with keymap "
"@code{minibuffer-inactive-mode-map}.  This is only really useful if the "
"minibuffer is in a separate frame.  @xref{Minibuffers and Frames}."
msgstr "ミニバッファーが非アクティブのときのメジャーモードは@code{minibuffer-inactive-mode}で、キーマップは@code{minibuffer-inactive-mode-map}です。これらは、実際にはミニバッファーが別フレームにある場合だけ、便利です。@ref{Minibuffers and Frames}を参照してください。"

#. type: Plain text
#: minibuf.texi.orig:107
msgid ""
"When Emacs is running in batch mode, any request to read from the minibuffer "
"actually reads a line from the standard input descriptor that was supplied "
"when Emacs was started.  This supports only basic input: none of the special "
"minibuffer features (history, completion, password hiding, etc.) are "
"available in batch mode."
msgstr "Emacsがバッチモードで実行されている場合、ミニバッファーからの読み取りリクエストは、実装にはEmacs開始時に提供された標準入力記述子から行を読み取ります。これは基本的な入力だけをサポートします。特別なミニバッファーの機能(ヒストリー、補完、パスワードのマスクなど)は、バッチモードでは利用できません。"

#. type: section
#: minibuf.texi.orig:109
#, no-wrap
msgid "Reading Text Strings with the Minibuffer"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:110
#, no-wrap
msgid "minibuffer input, reading text strings"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:119
msgid ""
"The most basic primitive for minibuffer input is "
"@code{read-from-minibuffer}, which can be used to read either a string or a "
"Lisp object in textual form.  The function @code{read-regexp} is used for "
"reading regular expressions (@pxref{Regular Expressions}), which are a "
"special kind of string.  There are also specialized functions for reading "
"commands, variables, file names, etc.@: (@pxref{Completion})."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:124
msgid ""
"In most cases, you should not call minibuffer input functions in the middle "
"of a Lisp function.  Instead, do all minibuffer input as part of reading the "
"arguments for a command, in the @code{interactive} specification.  "
"@xref{Defining Commands}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:125
#, no-wrap
msgid ""
"read-from-minibuffer prompt &optional initial keymap read history default "
"inherit-input-method"
msgstr ""

#. type: defun
#: minibuf.texi.orig:131
msgid ""
"This function is the most general way to get input from the minibuffer.  By "
"default, it accepts arbitrary text and returns it as a string; however, if "
"@var{read} is non-@code{nil}, then it uses @code{read} to convert the text "
"into a Lisp object (@pxref{Input Functions})."
msgstr ""

#. type: defun
#: minibuf.texi.orig:135
msgid ""
"The first thing this function does is to activate a minibuffer and display "
"it with @var{prompt} (which must be a string) as the prompt.  Then the user "
"can edit text in the minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:142
msgid ""
"When the user types a command to exit the minibuffer, "
"@code{read-from-minibuffer} constructs the return value from the text in the "
"minibuffer.  Normally it returns a string containing that text.  However, if "
"@var{read} is non-@code{nil}, @code{read-from-minibuffer} reads the text and "
"returns the resulting Lisp object, unevaluated.  (@xref{Input Functions}, "
"for information about reading.)"
msgstr ""

#. type: defun
#: minibuf.texi.orig:147
msgid ""
"The argument @var{default} specifies default values to make available "
"through the history commands.  It should be a string, a list of strings, or "
"@code{nil}.  The string or strings become the minibuffer's ``future "
"history'', available to the user with @kbd{M-n}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:156
msgid ""
"If @var{read} is non-@code{nil}, then @var{default} is also used as the "
"input to @code{read}, if the user enters empty input.  If @var{default} is a "
"list of strings, the first string is used as the input.  If @var{default} is "
"@code{nil}, empty input results in an @code{end-of-file} error.  However, in "
"the usual case (where @var{read} is @code{nil}), @code{read-from-minibuffer} "
"ignores @var{default} when the user enters empty input and returns an empty "
"string, @code{\"\"}.  In this respect, it differs from all the other "
"minibuffer input functions in this chapter."
msgstr ""

#. type: defun
#: minibuf.texi.orig:162
msgid ""
"If @var{keymap} is non-@code{nil}, that keymap is the local keymap to use in "
"the minibuffer.  If @var{keymap} is omitted or @code{nil}, the value of "
"@code{minibuffer-local-map} is used as the keymap.  Specifying a keymap is "
"the most important way to customize the minibuffer for various applications "
"such as completion."
msgstr ""

#. type: defun
#: minibuf.texi.orig:167
msgid ""
"The argument @var{history} specifies a history list variable to use for "
"saving the input and for history commands used in the minibuffer.  It "
"defaults to @code{minibuffer-history}.  You can optionally specify a "
"starting position in the history list as well.  @xref{Minibuffer History}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:172
msgid ""
"If the variable @code{minibuffer-allow-text-properties} is non-@code{nil}, "
"then the string that is returned includes whatever text properties were "
"present in the minibuffer.  Otherwise all the text properties are stripped "
"when the value is returned."
msgstr ""

#. type: defun
#: minibuf.texi.orig:178 minibuf.texi.orig:1033
msgid ""
"If the argument @var{inherit-input-method} is non-@code{nil}, then the "
"minibuffer inherits the current input method (@pxref{Input Methods}) and the "
"setting of @code{enable-multibyte-characters} (@pxref{Text Representations}) "
"from whichever buffer was current before entering the minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:182
msgid ""
"Use of @var{initial} is mostly deprecated; we recommend using a "
"non-@code{nil} value only in conjunction with specifying a cons cell for "
"@var{history}.  @xref{Initial Input}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:184
#, no-wrap
msgid "read-string prompt &optional initial history default inherit-input-method"
msgstr ""

#. type: defun
#: minibuf.texi.orig:189
msgid ""
"This function reads a string from the minibuffer and returns it.  The "
"arguments @var{prompt}, @var{initial}, @var{history} and "
"@var{inherit-input-method} are used as in @code{read-from-minibuffer}.  The "
"keymap used is @code{minibuffer-local-map}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:199
msgid ""
"The optional argument @var{default} is used as in "
"@code{read-from-minibuffer}, except that, if non-@code{nil}, it also "
"specifies a default value to return if the user enters null input.  As in "
"@code{read-from-minibuffer} it should be a string, a list of strings, or "
"@code{nil}, which is equivalent to an empty string.  When @var{default} is a "
"string, that string is the default value.  When it is a list of strings, the "
"first string is the default value.  (All these strings are available to the "
"user in the ``future minibuffer history''.)"
msgstr ""

#. type: defun
#: minibuf.texi.orig:202
msgid "This function works by calling the @code{read-from-minibuffer} function:"
msgstr ""

#. type: group
#: minibuf.texi.orig:213
#, no-wrap
msgid ""
"(read-string @var{prompt} @var{initial} @var{history} @var{default} "
"@var{inherit})\n"
"@equiv{}\n"
"(let ((value\n"
"       (read-from-minibuffer @var{prompt} @var{initial} nil nil\n"
"                             @var{history} @var{default} @var{inherit})))\n"
"  (if (and (equal value \"\") @var{default})\n"
"      (if (consp @var{default}) (car @var{default}) @var{default})\n"
"    value))\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:217
#, no-wrap
msgid "read-regexp prompt &optional defaults history"
msgstr ""

#. type: defun
#: minibuf.texi.orig:223
msgid ""
"This function reads a regular expression as a string from the minibuffer and "
"returns it.  If the minibuffer prompt string @var{prompt} does not end in "
"@samp{:} (followed by optional whitespace), the function adds @samp{: } to "
"the end, preceded by the default return value (see below), if that is "
"non-empty."
msgstr ""

#. type: defun
#: minibuf.texi.orig:228
msgid ""
"The optional argument @var{defaults} controls the default value to return if "
"the user enters null input, and should be one of: a string; @code{nil}, "
"which is equivalent to an empty string; a list of strings; or a symbol."
msgstr ""

#. type: defun
#: minibuf.texi.orig:233
msgid ""
"If @var{defaults} is a symbol, @code{read-regexp} consults the value of the "
"variable @code{read-regexp-defaults-function} (see below), and if that is "
"non-@code{nil} uses it in preference to @var{defaults}.  The value in this "
"case should be either:"
msgstr ""

#. type: itemize
#: minibuf.texi.orig:238
msgid ""
"@code{regexp-history-last}, which means to use the first element of the "
"appropriate minibuffer history list (see below)."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:243
msgid ""
"A function of no arguments, whose return value (which should be @code{nil}, "
"a string, or a list of strings) becomes the value of @var{defaults}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:250
msgid ""
"@code{read-regexp} now ensures that the result of processing @var{defaults} "
"is a list (i.e., if the value is @code{nil} or a string, it converts it to a "
"list of one element).  To this list, @code{read-regexp} then appends a few "
"potentially useful candidates for input.  These are:"
msgstr ""

#. type: itemize
#: minibuf.texi.orig:254
msgid "The word or symbol at point."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:256
msgid "The last regexp used in an incremental search."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:258
msgid "The last string used in an incremental search."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:260
msgid "The last string or pattern used in query-replace commands."
msgstr ""

#. type: defun
#: minibuf.texi.orig:268
msgid ""
"The function now has a list of regular expressions that it passes to "
"@code{read-from-minibuffer} to obtain the user's input.  The first element "
"of the list is the default result in case of empty input.  All elements of "
"the list are available to the user as the ``future minibuffer history list'' "
"(@pxref{Minibuffer History, future list,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: defun
#: minibuf.texi.orig:273
msgid ""
"The optional argument @var{history}, if non-@code{nil}, is a symbol "
"specifying a minibuffer history list to use (@pxref{Minibuffer History}).  "
"If it is omitted or @code{nil}, the history list defaults to "
"@code{regexp-history}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:275
#, no-wrap
msgid "read-regexp-defaults-function"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:279
msgid ""
"The function @code{read-regexp} may use the value of this variable to "
"determine its list of default regular expressions.  If non-@code{nil}, the "
"value of this variable should be either:"
msgstr ""

#. type: itemize
#: minibuf.texi.orig:283
msgid "The symbol @code{regexp-history-last}."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:287
msgid ""
"A function of no arguments that returns either @code{nil}, a string, or a "
"list of strings."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:291
msgid "See @code{read-regexp} above for details of how these values are used."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:293
#, no-wrap
msgid "minibuffer-allow-text-properties"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:302
msgid ""
"If this variable is @code{nil}, then @code{read-from-minibuffer} and "
"@code{read-string} strip all text properties from the minibuffer input "
"before returning it.  However, @code{read-no-blanks-input} (see below), as "
"well as @code{read-minibuffer} and related functions (@pxref{Object from "
"Minibuffer,, Reading Lisp Objects With the Minibuffer}), and all functions "
"that do minibuffer input with completion, discard text properties "
"unconditionally, regardless of the value of this variable."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:304
#, no-wrap
msgid "minibuffer-local-map"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:310
msgid ""
"This @anchor{Definition of minibuffer-local-map} is the default local keymap "
"for reading from the minibuffer.  By default, it makes the following "
"bindings:"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:312 minibuf.texi.orig:1206
#, no-wrap
msgid "C-j"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:314 minibuf.texi.orig:317 minibuf.texi.orig:381 minibuf.texi.orig:385
msgid "exit-minibuffer"
msgstr ""

#. type: key{#1}
#: minibuf.texi.orig:315 minibuf.texi.orig:1209
#, no-wrap
msgid "RET"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:318
#, no-wrap
msgid "C-g"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:320
msgid "abort-recursive-edit"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:321
#, no-wrap
msgid "M-n"
msgstr ""

#. type: key{#1}
#: minibuf.texi.orig:322
#, no-wrap
msgid "DOWN"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:324
msgid "next-history-element"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:325
#, no-wrap
msgid "M-p"
msgstr ""

#. type: key{#1}
#: minibuf.texi.orig:326
#, no-wrap
msgid "UP"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:328
msgid "previous-history-element"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:329
#, no-wrap
msgid "M-s"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:331
msgid "next-matching-history-element"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:332
#, no-wrap
msgid "M-r"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:334
msgid "previous-matching-history-element"
msgstr ""

#. type: item
#: minibuf.texi.orig:337
#, no-wrap
msgid "@kbd{C-@key{TAB}}"
msgstr ""

#. type: defun
#: minibuf.texi.orig:345
#, no-wrap
msgid "read-no-blanks-input prompt &optional initial inherit-input-method"
msgstr ""

#. type: defun
#: minibuf.texi.orig:350
msgid ""
"This function reads a string from the minibuffer, but does not allow "
"whitespace characters as part of the input: instead, those characters "
"terminate the input.  The arguments @var{prompt}, @var{initial}, and "
"@var{inherit-input-method} are used as in @code{read-from-minibuffer}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:356
msgid ""
"This is a simplified interface to the @code{read-from-minibuffer} function, "
"and passes the value of the @code{minibuffer-local-ns-map} keymap as the "
"@var{keymap} argument for that function.  Since the keymap "
"@code{minibuffer-local-ns-map} does not rebind @kbd{C-q}, it @emph{is} "
"possible to put a space into the string, by quoting it."
msgstr ""

#. type: defun
#: minibuf.texi.orig:359
msgid ""
"This function discards text properties, regardless of the value of "
"@code{minibuffer-allow-text-properties}."
msgstr ""

#. type: group
#: minibuf.texi.orig:366
#, no-wrap
msgid ""
"(read-no-blanks-input @var{prompt} @var{initial})\n"
"@equiv{}\n"
"(let (minibuffer-allow-text-properties)\n"
"  (read-from-minibuffer @var{prompt} @var{initial} "
"minibuffer-local-ns-map))\n"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:372
#, no-wrap
msgid "minibuffer-local-ns-map"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:376
msgid ""
"This built-in variable is the keymap used as the minibuffer local keymap in "
"the function @code{read-no-blanks-input}.  By default, it makes the "
"following bindings, in addition to those of @code{minibuffer-local-map}:"
msgstr ""

#. type: key{#1}
#: minibuf.texi.orig:378 minibuf.texi.orig:1186
#, no-wrap
msgid "SPC"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:379
#, no-wrap
msgid "@key{SPC} in minibuffer"
msgstr ""

#. type: key{#1}
#: minibuf.texi.orig:382 minibuf.texi.orig:1189
#, no-wrap
msgid "TAB"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:383
#, no-wrap
msgid "@key{TAB} in minibuffer"
msgstr ""

#. type: kbd{#1}
#: minibuf.texi.orig:386 minibuf.texi.orig:1183
#, no-wrap
msgid "?"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:387
#, no-wrap
msgid "@kbd{?} in minibuffer"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:389
msgid "self-insert-and-exit"
msgstr ""

#. type: section
#: minibuf.texi.orig:393
#, no-wrap
msgid "Reading Lisp Objects with the Minibuffer"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:394
#, no-wrap
msgid "minibuffer input, reading lisp objects"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:398
msgid ""
"This section describes functions for reading Lisp objects with the "
"minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:399
#, no-wrap
msgid "read-minibuffer prompt &optional initial"
msgstr ""

#. type: defun
#: minibuf.texi.orig:403
msgid ""
"This function reads a Lisp object using the minibuffer, and returns it "
"without evaluating it.  The arguments @var{prompt} and @var{initial} are "
"used as in @code{read-from-minibuffer}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:406
msgid "This is a simplified interface to the @code{read-from-minibuffer} function:"
msgstr ""

#. type: group
#: minibuf.texi.orig:413
#, no-wrap
msgid ""
"(read-minibuffer @var{prompt} @var{initial})\n"
"@equiv{}\n"
"(let (minibuffer-allow-text-properties)\n"
"  (read-from-minibuffer @var{prompt} @var{initial} nil t))\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:418
msgid ""
"Here is an example in which we supply the string @code{\"(testing)\"} as "
"initial input:"
msgstr ""

#. type: group
#: minibuf.texi.orig:423
#, no-wrap
msgid ""
"(read-minibuffer\n"
" \"Enter an expression: \" (format \"%s\" '(testing)))\n"
"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:425
#, no-wrap
msgid ";; @r{Here is how the minibuffer is displayed:}\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:431
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Enter an expression: (testing)@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:437
msgid ""
"The user can type @key{RET} immediately to use the initial input as a "
"default, or can edit the input."
msgstr ""

#. type: defun
#: minibuf.texi.orig:439
#, no-wrap
msgid "eval-minibuffer prompt &optional initial"
msgstr ""

#. type: defun
#: minibuf.texi.orig:443
msgid ""
"This function reads a Lisp expression using the minibuffer, evaluates it, "
"then returns the result.  The arguments @var{prompt} and @var{initial} are "
"used as in @code{read-from-minibuffer}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:446
msgid ""
"This function simply evaluates the result of a call to "
"@code{read-minibuffer}:"
msgstr ""

#. type: group
#: minibuf.texi.orig:452
#, no-wrap
msgid ""
"(eval-minibuffer @var{prompt} @var{initial})\n"
"@equiv{}\n"
"(eval (read-minibuffer @var{prompt} @var{initial}))\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:456
#, no-wrap
msgid "edit-and-eval-command prompt form"
msgstr ""

#. type: defun
#: minibuf.texi.orig:464
msgid ""
"This function reads a Lisp expression in the minibuffer, evaluates it, then "
"returns the result.  The difference between this command and "
"@code{eval-minibuffer} is that here the initial @var{form} is not optional "
"and it is treated as a Lisp object to be converted to printed representation "
"rather than as a string of text.  It is printed with @code{prin1}, so if it "
"is a string, double-quote characters (@samp{\"})  appear in the initial "
"text.  @xref{Output Functions}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:467
msgid ""
"In the following example, we offer the user an expression with initial text "
"that is already a valid form:"
msgstr ""

#. type: group
#: minibuf.texi.orig:471
#, no-wrap
msgid ""
"(edit-and-eval-command \"Please edit: \" '(forward-word 1))\n"
"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:474 minibuf.texi.orig:1479
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following appears in the minibuffer:}\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:480
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Please edit: (forward-word 1)@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:486
msgid ""
"Typing @key{RET} right away would exit the minibuffer and evaluate the "
"expression, thus moving point forward one word."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:490
#, no-wrap
msgid "minibuffer history"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:491
#, no-wrap
msgid "history list"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:496
msgid ""
"A @dfn{minibuffer history list} records previous minibuffer inputs so the "
"user can reuse them conveniently.  It is a variable whose value is a list of "
"strings (previous inputs), most recent first."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:500
msgid ""
"There are many separate minibuffer history lists, used for different kinds "
"of inputs.  It's the Lisp programmer's job to specify the right history list "
"for each use of the minibuffer."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:504
msgid ""
"You specify a minibuffer history list with the optional @var{history} "
"argument to @code{read-from-minibuffer} or @code{completing-read}.  Here are "
"the possible values for it:"
msgstr ""

#. type: var{#1}
#: minibuf.texi.orig:506
#, no-wrap
msgid "variable"
msgstr ""

#. type: table
#: minibuf.texi.orig:508
msgid "Use @var{variable} (a symbol) as the history list."
msgstr ""

#. type: item
#: minibuf.texi.orig:509
#, no-wrap
msgid "(@var{variable} . @var{startpos})"
msgstr ""

#. type: table
#: minibuf.texi.orig:512
msgid ""
"Use @var{variable} (a symbol) as the history list, and assume that the "
"initial history position is @var{startpos} (a nonnegative integer)."
msgstr ""

#. type: table
#: minibuf.texi.orig:519
msgid ""
"Specifying 0 for @var{startpos} is equivalent to just specifying the symbol "
"@var{variable}.  @code{previous-history-element} will display the most "
"recent element of the history list in the minibuffer.  If you specify a "
"positive @var{startpos}, the minibuffer history functions behave as if "
"@code{(elt @var{variable} (1- @var{startpos}))} were the history element "
"currently shown in the minibuffer."
msgstr ""

#. type: table
#: minibuf.texi.orig:523
msgid ""
"For consistency, you should also specify that element of the history as the "
"initial minibuffer contents, using the @var{initial} argument to the "
"minibuffer input function (@pxref{Initial Input})."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:529
msgid ""
"If you don't specify @var{history}, then the default history list "
"@code{minibuffer-history} is used.  For other standard history lists, see "
"below.  You can also create your own history list variable; just initialize "
"it to @code{nil} before the first use."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:536
msgid ""
"Both @code{read-from-minibuffer} and @code{completing-read} add new elements "
"to the history list automatically, and provide commands to allow the user to "
"reuse items on the list.  The only thing your program needs to do to use a "
"history list is to initialize it and to pass its name to the input functions "
"when you wish.  But it is safe to modify the list by hand when the "
"minibuffer input functions are not using it."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:544
msgid ""
"Emacs functions that add a new element to a history list can also delete old "
"elements if the list gets too long.  The variable @code{history-length} "
"specifies the maximum length for most history lists.  To specify a different "
"maximum length for a particular history list, put the length in the "
"@code{history-length} property of the history list symbol.  The variable "
"@code{history-delete-duplicates} specifies whether to delete duplicates in "
"history."
msgstr ""

#. type: defun
#: minibuf.texi.orig:545
#, no-wrap
msgid "add-to-history history-var newelt &optional maxelt keep-all"
msgstr ""

#. type: defun
#: minibuf.texi.orig:552
msgid ""
"This function adds a new element @var{newelt}, if it isn't the empty string, "
"to the history list stored in the variable @var{history-var}, and returns "
"the updated history list.  It limits the list length to the value of "
"@var{maxelt} (if non-@code{nil}) or @code{history-length} (described "
"below).  The possible values of @var{maxelt} have the same meaning as the "
"values of @code{history-length}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:557
msgid ""
"Normally, @code{add-to-history} removes duplicate members from the history "
"list if @code{history-delete-duplicates} is non-@code{nil}.  However, if "
"@var{keep-all} is non-@code{nil}, that says not to remove duplicates, and to "
"add @var{newelt} to the list even if it is empty."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:559
#, no-wrap
msgid "history-add-new-input"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:564
msgid ""
"If the value of this variable is @code{nil}, standard functions that read "
"from the minibuffer don't add new elements to the history list.  This lets "
"Lisp programs explicitly manage input history by using "
"@code{add-to-history}.  The default value is @code{t}."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:566
#, no-wrap
msgid "history-length"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:573
msgid ""
"The value of this variable specifies the maximum length for all history "
"lists that don't specify their own maximum lengths.  If the value is "
"@code{t}, that means there is no maximum (don't delete old elements).  If a "
"history list variable's symbol has a non-@code{nil} @code{history-length} "
"property, it overrides this variable for that particular history list."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:575
#, no-wrap
msgid "history-delete-duplicates"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:578
msgid ""
"If the value of this variable is @code{t}, that means when adding a new "
"history element, all previous identical elements are deleted."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:581
msgid "Here are some of the standard minibuffer history list variables:"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:582
#, no-wrap
msgid "minibuffer-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:584
msgid "The default history list for minibuffer history input."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:586
#, no-wrap
msgid "query-replace-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:589
msgid ""
"A history list for arguments to @code{query-replace} (and similar arguments "
"to other commands)."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:591
#, no-wrap
msgid "file-name-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:593
msgid "A history list for file-name arguments."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:595
#, no-wrap
msgid "buffer-name-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:597
msgid "A history list for buffer-name arguments."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:599
#, no-wrap
msgid "regexp-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:601
msgid "A history list for regular expression arguments."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:603
#, no-wrap
msgid "extended-command-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:605
msgid "A history list for arguments that are names of extended commands."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:607
#, no-wrap
msgid "shell-command-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:609
msgid "A history list for arguments that are shell commands."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:611
#, no-wrap
msgid "read-expression-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:613
msgid "A history list for arguments that are Lisp expressions to evaluate."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:615
#, no-wrap
msgid "face-name-history"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:617
msgid "A history list for arguments that are faces."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:630
msgid ""
"Several of the functions for minibuffer input have an argument called "
"@var{initial}.  This is a mostly-deprecated feature for specifying that the "
"minibuffer should start out with certain text, instead of empty as usual."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:636
msgid ""
"If @var{initial} is a string, the minibuffer starts out containing the text "
"of the string, with point at the end, when the user starts to edit the "
"text.  If the user simply types @key{RET} to exit the minibuffer, it will "
"use the initial input string to determine the value to return."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:641
msgid ""
"@strong{We discourage use of a non-@code{nil} value for @var{initial}}, "
"because initial input is an intrusive interface.  History lists and default "
"values provide a much more convenient method to offer useful default inputs "
"to the user."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:645
msgid ""
"There is just one situation where you should specify a string for an "
"@var{initial} argument.  This is when you specify a cons cell for the "
"@var{history} argument.  @xref{Minibuffer History}."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:649
msgid ""
"@var{initial} can also be a cons cell of the form @code{(@var{string} "
". @var{position})}.  This means to insert @var{string} in the minibuffer but "
"put point at @var{position} within the string's text."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:658
msgid ""
"As a historical accident, @var{position} was implemented inconsistently in "
"different functions.  In @code{completing-read}, @var{position}'s value is "
"interpreted as origin-zero; that is, a value of 0 means the beginning of the "
"string, 1 means after the first character, etc.  In @code{read-minibuffer}, "
"and the other non-completion minibuffer input functions that support this "
"argument, 1 means the beginning of the string, 2 means after the first "
"character, etc."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:660
msgid "Use of a cons cell as the value for @var{initial} arguments is deprecated."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:663
#, no-wrap
msgid "completion"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:674
msgid ""
"@dfn{Completion} is a feature that fills in the rest of a name starting from "
"an abbreviation for it.  Completion works by comparing the user's input "
"against a list of valid names and determining how much of the name is "
"determined uniquely by what the user has typed.  For example, when you type "
"@kbd{C-x b} (@code{switch-to-buffer}) and then type the first few letters of "
"the name of the buffer to which you wish to switch, and then type @key{TAB} "
"(@code{minibuffer-complete}), Emacs extends the name as far as it can."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:678
msgid ""
"Standard Emacs commands offer completion for names of symbols, files, "
"buffers, and processes; with the functions in this section, you can "
"implement completion for other kinds of names."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:682
msgid ""
"The @code{try-completion} function is the basic primitive for completion: it "
"returns the longest determined completion of a given initial string, with a "
"given set of strings to match against."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:689
msgid ""
"The function @code{completing-read} provides a higher-level interface for "
"completion.  A call to @code{completing-read} specifies how to determine the "
"list of valid names.  The function then activates the minibuffer with a "
"local keymap that binds a few keys to commands useful for completion.  Other "
"functions provide convenient simple interfaces for reading certain kinds of "
"names with completion."
msgstr ""

#. type: node
#: minibuf.texi.orig:701 minibuf.texi.orig:703
#, no-wrap
msgid "Basic Completion"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Low-level functions for completing strings."
msgstr ""

#. type: node
#: minibuf.texi.orig:701 minibuf.texi.orig:956
#, no-wrap
msgid "Minibuffer Completion"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Invoking the minibuffer with completion."
msgstr ""

#. type: node
#: minibuf.texi.orig:701 minibuf.texi.orig:1077
#, no-wrap
msgid "Completion Commands"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Minibuffer commands that do completion."
msgstr ""

#. type: node
#: minibuf.texi.orig:701 minibuf.texi.orig:1225
#, no-wrap
msgid "High-Level Completion"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid ""
"Convenient special cases of completion (reading buffer names, variable "
"names, etc.)."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:701 minibuf.texi.orig:1375 minibuf.texi.orig:1376
#, no-wrap
msgid "Reading File Names"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Using completion to read file names and shell commands."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:701 minibuf.texi.orig:1604 minibuf.texi.orig:1605
#, no-wrap
msgid "Completion Variables"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Variables controlling completion behavior."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:701 minibuf.texi.orig:1709 minibuf.texi.orig:1710
#, no-wrap
msgid "Programmed Completion"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Writing your own completion function."
msgstr ""

#. type: node
#: minibuf.texi.orig:701 minibuf.texi.orig:1828
#, no-wrap
msgid "Completion in Buffers"
msgstr ""

#. type: menuentry
#: minibuf.texi.orig:701
msgid "Completing text in ordinary buffers."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:704
#, no-wrap
msgid "Basic Completion Functions"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:709
msgid ""
"The following completion functions have nothing in themselves to do with "
"minibuffers.  We describe them here to keep them near the higher-level "
"completion features that do use the minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:710
#, no-wrap
msgid "try-completion string collection &optional predicate"
msgstr ""

#. type: defun
#: minibuf.texi.orig:713
msgid ""
"This function returns the longest common substring of all possible "
"completions of @var{string} in @var{collection}."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:714
#, no-wrap
msgid "completion table"
msgstr ""

#. type: defun
#: minibuf.texi.orig:718
msgid ""
"@var{collection} is called the @dfn{completion table}.  Its value must be a "
"list of strings or cons cells, an obarray, a hash table, or a completion "
"function."
msgstr ""

#. type: defun
#: minibuf.texi.orig:725
msgid ""
"@code{try-completion} compares @var{string} against each of the permissible "
"completions specified by the completion table.  If no permissible "
"completions match, it returns @code{nil}.  If there is just one matching "
"completion, and the match is exact, it returns @code{t}.  Otherwise, it "
"returns the longest initial sequence common to all possible matching "
"completions."
msgstr ""

#. type: defun
#: minibuf.texi.orig:731
msgid ""
"If @var{collection} is a list, the permissible completions are specified by "
"the elements of the list, each of which should be either a string, or a cons "
"cell whose @sc{car} is either a string or a symbol (a symbol is converted to "
"a string using @code{symbol-name}).  If the list contains elements of any "
"other type, those are ignored."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:732
#, no-wrap
msgid "obarray in completion"
msgstr ""

#. type: defun
#: minibuf.texi.orig:735
msgid ""
"If @var{collection} is an obarray (@pxref{Creating Symbols}), the names of "
"all symbols in the obarray form the set of permissible completions."
msgstr ""

#. type: defun
#: minibuf.texi.orig:738
msgid ""
"If @var{collection} is a hash table, then the keys that are strings are the "
"possible completions.  Other keys are ignored."
msgstr ""

#. type: defun
#: minibuf.texi.orig:746
msgid ""
"You can also use a function as @var{collection}.  Then the function is "
"solely responsible for performing completion; @code{try-completion} returns "
"whatever this function returns.  The function is called with three "
"arguments: @var{string}, @var{predicate} and @code{nil} (the third argument "
"is so that the same function can be used in @code{all-completions} and do "
"the appropriate thing in either case).  @xref{Programmed Completion}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:757
msgid ""
"If the argument @var{predicate} is non-@code{nil}, then it must be a "
"function of one argument, unless @var{collection} is a hash table, in which "
"case it should be a function of two arguments.  It is used to test each "
"possible match, and the match is accepted only if @var{predicate} returns "
"non-@code{nil}.  The argument given to @var{predicate} is either a string or "
"a cons cell (the @sc{car} of which is a string) from the alist, or a symbol "
"(@emph{not} a symbol name) from the obarray.  If @var{collection} is a hash "
"table, @var{predicate} is called with two arguments, the string key and the "
"associated value."
msgstr ""

#. type: defun
#: minibuf.texi.orig:762
msgid ""
"In addition, to be acceptable, a completion must also match all the regular "
"expressions in @code{completion-regexp-list}.  (Unless @var{collection} is a "
"function, in which case that function has to handle "
"@code{completion-regexp-list} itself.)"
msgstr ""

#. type: defun
#: minibuf.texi.orig:768
msgid ""
"In the first of the following examples, the string @samp{foo} is matched by "
"three of the alist @sc{car}s.  All of the matches begin with the characters "
"@samp{fooba}, so that is the result.  In the second example, there is only "
"one possible match, and it is exact, so the return value is @code{t}."
msgstr ""

#. type: group
#: minibuf.texi.orig:775
#, no-wrap
msgid ""
"(try-completion\n"
" \"foo\"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4)))\n"
"     @result{} \"fooba\"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:780
#, no-wrap
msgid ""
"(try-completion \"foo\" '((\"barfoo\" 2) (\"foo\" 3)))\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:787
msgid ""
"In the following example, numerous symbols begin with the characters "
"@samp{forw}, and all of them begin with the word @samp{forward}.  In most of "
"the symbols, this is followed with a @samp{-}, but not in all, so no more "
"than @samp{forward} can be completed."
msgstr ""

#. type: group
#: minibuf.texi.orig:792
#, no-wrap
msgid ""
"(try-completion \"forw\" obarray)\n"
"     @result{} \"forward\"\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:798
msgid ""
"Finally, in the following example, only two of the three possible matches "
"pass the predicate @code{test} (the string @samp{foobaz} is too short).  "
"Both of those begin with the string @samp{foobar}."
msgstr ""

#. type: group
#: minibuf.texi.orig:804 minibuf.texi.orig:842
#, no-wrap
msgid ""
"(defun test (s)\n"
"  (> (length (car s)) 6))\n"
"     @result{} test\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:811
#, no-wrap
msgid ""
"(try-completion\n"
" \"foo\"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4))\n"
" 'test)\n"
"     @result{} \"foobar\"\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:816
#, no-wrap
msgid "all-completions string collection &optional predicate"
msgstr ""

#. type: defun
#: minibuf.texi.orig:823
msgid ""
"This function returns a list of all possible completions of @var{string}.  "
"The arguments to this function are the same as those of "
"@code{try-completion}, and it uses @code{completion-regexp-list} in the same "
"way that @code{try-completion} does."
msgstr ""

#. type: defun
#: minibuf.texi.orig:833
msgid ""
"If @var{collection} is a function, it is called with three arguments: "
"@var{string}, @var{predicate} and @code{t}; then @code{all-completions} "
"returns whatever the function returns.  @xref{Programmed Completion}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:836
msgid ""
"Here is an example, using the function @code{test} shown in the example for "
"@code{try-completion}:"
msgstr ""

#. type: group
#: minibuf.texi.orig:850
#, no-wrap
msgid ""
"(all-completions\n"
" \"foo\"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4))\n"
" 'test)\n"
"     @result{} (\"foobar1\" \"foobar2\")\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:854
#, no-wrap
msgid "test-completion string collection &optional predicate"
msgstr ""

#. type: anchor{#1}
#: minibuf.texi.orig:862
msgid "Definition of test-completion"
msgstr ""

#. type: defun
#: minibuf.texi.orig:862
msgid ""
"This function returns non-@code{nil} if @var{string} is a valid completion "
"alternative specified by @var{collection} and @var{predicate}.  The "
"arguments are the same as in @code{try-completion}.  For instance, if "
"@var{collection} is a list of strings, this is true if @var{string} appears "
"in the list and @var{predicate} is satisfied."
msgstr ""

#. type: defun
#: minibuf.texi.orig:865
msgid ""
"This function uses @code{completion-regexp-list} in the same way that "
"@code{try-completion} does."
msgstr ""

#. type: defun
#: minibuf.texi.orig:872
msgid ""
"If @var{predicate} is non-@code{nil} and if @var{collection} contains "
"several strings that are equal to each other, as determined by "
"@code{compare-strings} according to @code{completion-ignore-case}, then "
"@var{predicate} should accept either all or none of them.  Otherwise, the "
"return value of @code{test-completion} is essentially unpredictable."
msgstr ""

#. type: defun
#: minibuf.texi.orig:876
msgid ""
"If @var{collection} is a function, it is called with three arguments, the "
"values @var{string}, @var{predicate} and @code{lambda}; whatever it returns, "
"@code{test-completion} returns in turn."
msgstr ""

#. type: defun
#: minibuf.texi.orig:878
#, no-wrap
msgid "completion-boundaries string collection predicate suffix"
msgstr ""

#. type: defun
#: minibuf.texi.orig:882
msgid ""
"This function returns the boundaries of the field on which @var{collection} "
"will operate, assuming that @var{string} holds the text before point and "
"@var{suffix} holds the text after point."
msgstr ""

#. type: defun
#: minibuf.texi.orig:895
msgid ""
"Normally completion operates on the whole string, so for all normal "
"collections, this will always return @code{(0 . (length @var{suffix}))}.  "
"But more complex completion such as completion on files is done one field at "
"a time.  For example, completion of @code{\"/usr/sh\"} will include "
"@code{\"/usr/share/\"} but not @code{\"/usr/share/doc\"} even if "
"@code{\"/usr/share/doc\"} exists.  Also @code{all-completions} on "
"@code{\"/usr/sh\"} will not include @code{\"/usr/share/\"} but only "
"@code{\"share/\"}.  So if @var{string} is @code{\"/usr/sh\"} and "
"@var{suffix} is @code{\"e/doc\"}, @code{completion-boundaries} will return "
"@code{(5 . 1)} which tells us that the @var{collection} will only return "
"completion information that pertains to the area after @code{\"/usr/\"} and "
"before @code{\"/doc\"}."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:900
msgid ""
"If you store a completion alist in a variable, you should mark the variable "
"as ``risky'' by giving it a non-@code{nil} @code{risky-local-variable} "
"property.  @xref{File Local Variables}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:901
#, no-wrap
msgid "completion-ignore-case"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:909
msgid ""
"If the value of this variable is non-@code{nil}, case is not considered "
"significant in completion.  Within @code{read-file-name}, this variable is "
"overridden by @code{read-file-name-completion-ignore-case} (@pxref{Reading "
"File Names}); within @code{read-buffer}, it is overridden by "
"@code{read-buffer-completion-ignore-case} (@pxref{High-Level Completion})."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:911
#, no-wrap
msgid "completion-regexp-list"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:916
msgid ""
"This is a list of regular expressions.  The completion functions only "
"consider a completion acceptable if it matches all regular expressions in "
"this list, with @code{case-fold-search} (@pxref{Searching and Case})  bound "
"to the value of @code{completion-ignore-case}."
msgstr ""

#. type: defmac
#: minibuf.texi.orig:918
#, no-wrap
msgid "lazy-completion-table var fun"
msgstr ""

#. type: defmac
#: minibuf.texi.orig:926
msgid ""
"This macro provides a way to initialize the variable @var{var} as a "
"collection for completion in a lazy way, not computing its actual contents "
"until they are first needed.  You use this macro to produce a value that you "
"store in @var{var}.  The actual computation of the proper value is done the "
"first time you do completion using @var{var}.  It is done by calling "
"@var{fun} with no arguments.  The value @var{fun} returns becomes the "
"permanent value of @var{var}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:928 minibuf.texi.orig:1992
msgid "Here is an example:"
msgstr ""

#. type: smallexample
#: minibuf.texi.orig:931
#, no-wrap
msgid "(defvar foo (lazy-completion-table foo make-my-alist))\n"
msgstr ""

#. type: findex
#: minibuf.texi.orig:935
#, no-wrap
msgid "completion-table-case-fold"
msgstr ""

#. type: findex
#: minibuf.texi.orig:936
#, no-wrap
msgid "completion-table-in-turn"
msgstr ""

#. type: findex
#: minibuf.texi.orig:937
#, no-wrap
msgid "completion-table-merge"
msgstr ""

#. type: findex
#: minibuf.texi.orig:938
#, no-wrap
msgid "completion-table-subvert"
msgstr ""

#. type: findex
#: minibuf.texi.orig:939
#, no-wrap
msgid "completion-table-with-quoting"
msgstr ""

#. type: findex
#: minibuf.texi.orig:940
#, no-wrap
msgid "completion-table-with-predicate"
msgstr ""

#. type: findex
#: minibuf.texi.orig:941
#, no-wrap
msgid "completion-table-with-terminator"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:942
#, no-wrap
msgid "completion table, modifying"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:943
#, no-wrap
msgid "completion tables, combining"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:954
msgid ""
"There are several functions that take an existing completion table and "
"return a modified version.  @code{completion-table-case-fold} returns a "
"case-insensitive table.  @code{completion-table-in-turn} and "
"@code{completion-table-merge} combine multiple input tables in different "
"ways.  @code{completion-table-subvert} alters a table to use a different "
"initial prefix.  @code{completion-table-with-quoting} returns a table "
"suitable for operating on quoted text.  "
"@code{completion-table-with-predicate} filters a table with a predicate "
"function.  @code{completion-table-with-terminator} adds a terminating "
"string."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:957
#, no-wrap
msgid "Completion and the Minibuffer"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:958
#, no-wrap
msgid "minibuffer completion"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:959
#, no-wrap
msgid "reading from minibuffer with completion"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:963
msgid ""
"This section describes the basic interface for reading from the minibuffer "
"with completion."
msgstr ""

#. type: defun
#: minibuf.texi.orig:964
#, no-wrap
msgid ""
"completing-read prompt collection &optional predicate require-match initial "
"history default inherit-input-method"
msgstr ""

#. type: defun
#: minibuf.texi.orig:968
msgid ""
"This function reads a string in the minibuffer, assisting the user by "
"providing completion.  It activates the minibuffer with prompt @var{prompt}, "
"which must be a string."
msgstr ""

#. type: defun
#: minibuf.texi.orig:977
msgid ""
"The actual completion is done by passing the completion table "
"@var{collection} and the completion predicate @var{predicate} to the "
"function @code{try-completion} (@pxref{Basic Completion}).  This happens in "
"certain commands bound in the local keymaps used for completion.  Some of "
"these commands also call @code{test-completion}.  Thus, if @var{predicate} "
"is non-@code{nil}, it should be compatible with @var{collection} and "
"@code{completion-ignore-case}.  @xref{Definition of test-completion}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:980
msgid ""
"The value of the optional argument @var{require-match} determines how the "
"user may exit the minibuffer:"
msgstr ""

#. type: itemize
#: minibuf.texi.orig:985
msgid ""
"If @code{nil}, the usual minibuffer exit commands work regardless of the "
"input in the minibuffer."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:989
msgid ""
"If @code{t}, the usual minibuffer exit commands won't exit unless the input "
"completes to an element of @var{collection}."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:993
msgid ""
"If @code{confirm}, the user can exit with any input, but is asked for "
"confirmation if the input is not an element of @var{collection}."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:1000
msgid ""
"If @code{confirm-after-completion}, the user can exit with any input, but is "
"asked for confirmation if the preceding command was a completion command "
"(i.e., one of the commands in @code{minibuffer-confirm-exit-commands}) and "
"the resulting input is not an element of @var{collection}.  @xref{Completion "
"Commands}."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:1004
msgid ""
"Any other value of @var{require-match} behaves like @code{t}, except that "
"the exit commands won't exit if it performs completion."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1012
msgid ""
"However, empty input is always permitted, regardless of the value of "
"@var{require-match}; in that case, @code{completing-read} returns the first "
"element of @var{default}, if it is a list; @code{\"\"}, if @var{default} is "
"@code{nil}; or @var{default}.  The string or strings in @var{default} are "
"also available to the user through the history commands."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1018
msgid ""
"The function @code{completing-read} uses "
"@code{minibuffer-local-completion-map} as the keymap if @var{require-match} "
"is @code{nil}, and uses @code{minibuffer-local-must-match-map} if "
"@var{require-match} is non-@code{nil}.  @xref{Completion Commands}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1022
msgid ""
"The argument @var{history} specifies which history list variable to use for "
"saving the input and for minibuffer history commands.  It defaults to "
"@code{minibuffer-history}.  @xref{Minibuffer History}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1027
msgid ""
"The argument @var{initial} is mostly deprecated; we recommend using a "
"non-@code{nil} value only in conjunction with specifying a cons cell for "
"@var{history}.  @xref{Initial Input}.  For default input, use @var{default} "
"instead."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1039
msgid ""
"If the variable @code{completion-ignore-case} is non-@code{nil}, completion "
"ignores case when comparing the input against the possible matches.  "
"@xref{Basic Completion}.  In this mode of operation, @var{predicate} must "
"also ignore case, or you will get surprising results."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1041
msgid "Here's an example of using @code{completing-read}:"
msgstr ""

#. type: group
#: minibuf.texi.orig:1048
#, no-wrap
msgid ""
"(completing-read\n"
" \"Complete a foo: \"\n"
" '((\"foobar1\" 1) (\"barfoo\" 2) (\"foobaz\" 3) (\"foobar2\" 4))\n"
" nil t \"fo\")\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1053
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following appears in the minibuffer:}\n"
"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1057
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Complete a foo: fo@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1063
msgid ""
"If the user then types @kbd{@key{DEL} @key{DEL} b @key{RET}}, "
"@code{completing-read} returns @code{barfoo}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1067
msgid ""
"The @code{completing-read} function binds variables to pass information to "
"the commands that actually do completion.  They are described in the "
"following section."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1069
#, no-wrap
msgid "completing-read-function"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1075
msgid ""
"The value of this variable must be a function, which is called by "
"@code{completing-read} to actually do its work.  It should accept the same "
"arguments as @code{completing-read}.  This can be bound to a different "
"function to completely override the normal behavior of "
"@code{completing-read}."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:1078
#, no-wrap
msgid "Minibuffer Commands that Do Completion"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1082
msgid ""
"This section describes the keymaps, commands and user options used in the "
"minibuffer to do completion."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1083
#, no-wrap
msgid "minibuffer-completion-table"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1089
msgid ""
"The value of this variable is the completion table used for completion in "
"the minibuffer.  This is the global variable that contains what "
"@code{completing-read} passes to @code{try-completion}.  It is used by "
"minibuffer completion commands such as @code{minibuffer-complete-word}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1091
#, no-wrap
msgid "minibuffer-completion-predicate"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1095
msgid ""
"This variable's value is the predicate that @code{completing-read} passes to "
"@code{try-completion}.  The variable is also used by the other minibuffer "
"completion functions."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1097
#, no-wrap
msgid "minibuffer-completion-confirm"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1109
msgid ""
"This variable determines whether Emacs asks for confirmation before exiting "
"the minibuffer; @code{completing-read} binds this variable, and the function "
"@code{minibuffer-complete-and-exit} checks the value before exiting.  If the "
"value is @code{nil}, confirmation is not required.  If the value is "
"@code{confirm}, the user may exit with an input that is not a valid "
"completion alternative, but Emacs asks for confirmation.  If the value is "
"@code{confirm-after-completion}, the user may exit with an input that is not "
"a valid completion alternative, but Emacs asks for confirmation if the user "
"submitted the input right after any of the completion commands in "
"@code{minibuffer-confirm-exit-commands}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1111
#, no-wrap
msgid "minibuffer-confirm-exit-commands"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1117
msgid ""
"This variable holds a list of commands that cause Emacs to ask for "
"confirmation before exiting the minibuffer, if the @var{require-match} "
"argument to @code{completing-read} is @code{confirm-after-completion}.  The "
"confirmation is requested if the user attempts to exit the minibuffer "
"immediately after calling any command in this list."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1119
#, no-wrap
msgid "Command minibuffer-complete-word"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1124
msgid ""
"This function completes the minibuffer contents by at most a single word.  "
"Even if the minibuffer contents have only one completion, "
"@code{minibuffer-complete-word} does not add any characters beyond the first "
"character that is not a word constituent.  @xref{Syntax Tables}."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1126
#, no-wrap
msgid "Command minibuffer-complete"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1128
msgid "This function completes the minibuffer contents as far as possible."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1130
#, no-wrap
msgid "Command minibuffer-complete-and-exit"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1137
msgid ""
"This function completes the minibuffer contents, and exits if confirmation "
"is not required, i.e., if @code{minibuffer-completion-confirm} is "
"@code{nil}.  If confirmation @emph{is} required, it is given by repeating "
"this command immediately---the command is programmed to work without "
"confirmation when run twice in succession."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1139
#, no-wrap
msgid "Command minibuffer-completion-help"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1147
msgid ""
"This function creates a list of the possible completions of the current "
"minibuffer contents.  It works by calling @code{all-completions} using the "
"value of the variable @code{minibuffer-completion-table} as the "
"@var{collection} argument, and the value of "
"@code{minibuffer-completion-predicate} as the @var{predicate} argument.  The "
"list of completions is displayed as text in a buffer named "
"@file{*Completions*}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1149
#, no-wrap
msgid "display-completion-list completions"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1159
msgid ""
"This function displays @var{completions} to the stream in "
"@code{standard-output}, usually a buffer.  (@xref{Read and Print}, for more "
"information about streams.)  The argument @var{completions} is normally a "
"list of completions just returned by @code{all-completions}, but it does not "
"have to be.  Each element may be a symbol or a string, either of which is "
"simply printed.  It can also be a list of two strings, which is printed as "
"if the strings were concatenated.  The first of the two strings is the "
"actual completion, the second string serves as annotation."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1163
msgid ""
"This function is called by @code{minibuffer-completion-help}.  A common way "
"to use it is together with @code{with-output-to-temp-buffer}, like this:"
msgstr ""

#. type: example
#: minibuf.texi.orig:1168
#, no-wrap
msgid ""
"(with-output-to-temp-buffer \"*Completions*\"\n"
"  (display-completion-list\n"
"    (all-completions (buffer-string) my-alist)))\n"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1171
#, no-wrap
msgid "completion-auto-help"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1175
msgid ""
"If this variable is non-@code{nil}, the completion commands automatically "
"display a list of possible completions whenever nothing can be completed "
"because the next character is not uniquely determined."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1177
#, no-wrap
msgid "minibuffer-local-completion-map"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1181
msgid ""
"@code{completing-read} uses this value as the local keymap when an exact "
"match of one of the completions is not required.  By default, this keymap "
"makes the following bindings:"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:1185
msgid "minibuffer-completion-help"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:1188
msgid "minibuffer-complete-word"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:1191
msgid "minibuffer-complete"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1196
msgid ""
"and uses @code{minibuffer-local-map} as its parent keymap (@pxref{Definition "
"of minibuffer-local-map})."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1198
#, no-wrap
msgid "minibuffer-local-must-match-map"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1204
msgid ""
"@code{completing-read} uses this value as the local keymap when an exact "
"match of one of the completions is required.  Therefore, no keys are bound "
"to @code{exit-minibuffer}, the command that exits the minibuffer "
"unconditionally.  By default, this keymap makes the following bindings:"
msgstr ""

#. type: code{#1}
#: minibuf.texi.orig:1208 minibuf.texi.orig:1211
msgid "minibuffer-complete-and-exit"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1215
msgid "and uses @code{minibuffer-local-completion-map} as its parent keymap."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1217
#, no-wrap
msgid "minibuffer-local-filename-completion-map"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1222
msgid ""
"This is a sparse keymap that simply unbinds @key{SPC}; because filenames can "
"contain spaces.  The function @code{read-file-name} combines this keymap "
"with either @code{minibuffer-local-completion-map} or "
"@code{minibuffer-local-must-match-map}."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:1226
#, no-wrap
msgid "High-Level Completion Functions"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1230
msgid ""
"This section describes the higher-level convenience functions for reading "
"certain sorts of names with completion."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1235
msgid ""
"In most cases, you should not call these functions in the middle of a Lisp "
"function.  When possible, do all minibuffer input as part of reading the "
"arguments for a command, in the @code{interactive} specification.  "
"@xref{Defining Commands}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1236
#, no-wrap
msgid "read-buffer prompt &optional default require-match"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1244
msgid ""
"This function reads the name of a buffer and returns it as a string.  The "
"argument @var{default} is the default name to use, the value to return if "
"the user exits with an empty minibuffer.  If non-@code{nil}, it should be a "
"string, a list of strings, or a buffer.  If it is a list, the default value "
"is the first element of this list.  It is mentioned in the prompt, but is "
"not inserted in the minibuffer as initial input."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1249
msgid ""
"The argument @var{prompt} should be a string ending with a colon and a "
"space.  If @var{default} is non-@code{nil}, the function inserts it in "
"@var{prompt} before the colon to follow the convention for reading from the "
"minibuffer with a default value (@pxref{Programming Tips})."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1252 minibuf.texi.orig:1421
msgid ""
"The optional argument @var{require-match} has the same meaning as in "
"@code{completing-read}.  @xref{Minibuffer Completion}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1257
msgid ""
"In the following example, the user enters @samp{minibuffer.t}, and then "
"types @key{RET}.  The argument @var{require-match} is @code{t}, and the only "
"buffer name starting with the given input is @samp{minibuffer.texi}, so that "
"name is the value."
msgstr ""

#. type: example
#: minibuf.texi.orig:1260
#, no-wrap
msgid "(read-buffer \"Buffer name: \" \"foo\" t)\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1264 minibuf.texi.orig:2000
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following prompt appears,}\n"
";;   @r{with an empty minibuffer:}\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1270
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Buffer name (default foo): @point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1275
#, no-wrap
msgid ""
";; @r{The user types @kbd{minibuffer.t @key{RET}}.}\n"
"     @result{} \"minibuffer.texi\"\n"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1279
#, no-wrap
msgid "read-buffer-function"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1283
msgid ""
"This variable, if non-@code{nil}, specifies a function for reading buffer "
"names.  @code{read-buffer} calls this function instead of doing its usual "
"work, with the same arguments passed to @code{read-buffer}."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1285
#, no-wrap
msgid "read-buffer-completion-ignore-case"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1288
msgid ""
"If this variable is non-@code{nil}, @code{read-buffer} ignores case when "
"performing completion."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1290
#, no-wrap
msgid "read-command prompt &optional default"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1296
msgid ""
"This function reads the name of a command and returns it as a Lisp symbol.  "
"The argument @var{prompt} is used as in @code{read-from-minibuffer}.  Recall "
"that a command is anything for which @code{commandp} returns @code{t}, and a "
"command name is a symbol for which @code{commandp} returns @code{t}.  "
"@xref{Interactive Call}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1304
msgid ""
"The argument @var{default} specifies what to return if the user enters null "
"input.  It can be a symbol, a string or a list of strings.  If it is a "
"string, @code{read-command} interns it before returning it.  If it is a "
"list, @code{read-command} interns the first element of this list.  If "
"@var{default} is @code{nil}, that means no default has been specified; then "
"if the user enters null input, the return value is @code{(intern \"\")}, "
"that is, a symbol whose name is an empty string."
msgstr ""

#. type: example
#: minibuf.texi.orig:1307
#, no-wrap
msgid ""
"(read-command \"Command name? \")\n"
"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1311
#, no-wrap
msgid ""
";; @r{After evaluation of the preceding expression,}\n"
";;   @r{the following prompt appears with an empty minibuffer:}\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1317
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"Command name?\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1323
msgid ""
"If the user types @kbd{forward-c @key{RET}}, then this function returns "
"@code{forward-char}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1328
msgid ""
"The @code{read-command} function is a simplified interface to "
"@code{completing-read}.  It uses the variable @code{obarray} so as to "
"complete in the set of extant Lisp symbols, and it uses the @code{commandp} "
"predicate so as to accept only command names:"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1329
#, no-wrap
msgid "@code{commandp} example"
msgstr ""

#. type: group
#: minibuf.texi.orig:1336
#, no-wrap
msgid ""
"(read-command @var{prompt})\n"
"@equiv{}\n"
"(intern (completing-read @var{prompt} obarray\n"
"                         'commandp t nil))\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1340
#, no-wrap
msgid "read-variable prompt &optional default"
msgstr ""

#. type: anchor{#1}
#: minibuf.texi.orig:1347
msgid "Definition of read-variable"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1347
msgid ""
"This function reads the name of a customizable variable and returns it as a "
"symbol.  Its arguments have the same form as those of @code{read-command}.  "
"It behaves just like @code{read-command}, except that it uses the predicate "
"@code{custom-variable-p} instead of @code{commandp}."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1349
#, no-wrap
msgid "Command read-color &optional prompt convert allow-empty display"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1356
msgid ""
"This function reads a string that is a color specification, either the "
"color's name or an RGB hex value such as @code{#RRRGGGBBB}.  It prompts with "
"@var{prompt} (default: @code{\"Color (name or #RGB triplet):\"})  and "
"provides completion for color names, but not for hex RGB values.  In "
"addition to names of standard colors, completion candidates include the "
"foreground and background colors at point."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1358
msgid "Valid RGB values are described in @ref{Color Names}."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1366
msgid ""
"The function's return value is the string typed by the user in the "
"minibuffer.  However, when called interactively or if the optional argument "
"@var{convert} is non-@code{nil}, it converts any input color name into the "
"corresponding RGB value string and instead returns that.  This function "
"requires a valid color specification to be input.  Empty color names are "
"allowed when @var{allow-empty} is non-@code{nil} and the user enters null "
"input."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:1369
msgid ""
"Interactively, or when @var{display} is non-@code{nil}, the return value is "
"also displayed in the echo area."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1374
msgid ""
"See also the functions @code{read-coding-system} and "
"@code{read-non-nil-coding-system}, in @ref{User-Chosen Coding Systems}, and "
"@code{read-input-method-name}, in @ref{Input Methods}."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1377
#, no-wrap
msgid "read file names"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1378
#, no-wrap
msgid "prompt for file name"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1385
msgid ""
"The high-level completion functions @code{read-file-name}, "
"@code{read-directory-name}, and @code{read-shell-command} are designed to "
"read file names, directory names, and shell commands, respectively.  They "
"provide special features, including automatic insertion of the default "
"directory."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1386
#, no-wrap
msgid ""
"read-file-name prompt &optional directory default require-match initial "
"predicate"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1389
msgid ""
"This function reads a file name, prompting with @var{prompt} and providing "
"completion."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1393
msgid ""
"As an exception, this function reads a file name using a graphical file "
"dialog instead of the minibuffer, if all of the following are true:"
msgstr ""

#. type: enumerate
#: minibuf.texi.orig:1397
msgid "It is invoked via a mouse command."
msgstr ""

#. type: enumerate
#: minibuf.texi.orig:1400
msgid "The selected frame is on a graphical display supporting such dialogs."
msgstr ""

#. type: enumerate
#: minibuf.texi.orig:1404
msgid ""
"The variable @code{use-dialog-box} is non-@code{nil}.  @xref{Dialog Boxes,, "
"Dialog Boxes, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: enumerate
#: minibuf.texi.orig:1408
msgid ""
"The @var{directory} argument, described below, does not specify a remote "
"file.  @xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1414
msgid ""
"The exact behavior when using a graphical file dialog is "
"platform-dependent.  Here, we simply document the behavior when using the "
"minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1418
msgid ""
"@code{read-file-name} does not automatically expand the returned file name.  "
"You must call @code{expand-file-name} yourself if an absolute file name is "
"required."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1427
msgid ""
"The argument @var{directory} specifies the directory to use for completing "
"relative file names.  It should be an absolute directory name.  If the "
"variable @code{insert-default-directory} is non-@code{nil}, @var{directory} "
"is also inserted in the minibuffer as initial input.  It defaults to the "
"current buffer's value of @code{default-directory}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1435
msgid ""
"If you specify @var{initial}, that is an initial file name to insert in the "
"buffer (after @var{directory}, if that is inserted).  In this case, point "
"goes at the beginning of @var{initial}.  The default for @var{initial} is "
"@code{nil}---don't insert any file name.  To see what @var{initial} does, "
"try the command @kbd{C-x C-v} in a buffer visiting a file.  @strong{Please "
"note:} we recommend using @var{default} rather than @var{initial} in most "
"cases."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1448
msgid ""
"If @var{default} is non-@code{nil}, then the function returns @var{default} "
"if the user exits the minibuffer with the same non-empty contents that "
"@code{read-file-name} inserted initially.  The initial minibuffer contents "
"are always non-empty if @code{insert-default-directory} is non-@code{nil}, "
"as it is by default.  @var{default} is not checked for validity, regardless "
"of the value of @var{require-match}.  However, if @var{require-match} is "
"non-@code{nil}, the initial minibuffer contents should be a valid file (or "
"directory) name.  Otherwise @code{read-file-name} attempts completion if the "
"user exits without any editing, and does not return @var{default}.  "
"@var{default} is also available through the history commands."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1460
msgid ""
"If @var{default} is @code{nil}, @code{read-file-name} tries to find a "
"substitute default to use in its place, which it treats in exactly the same "
"way as if it had been specified explicitly.  If @var{default} is @code{nil}, "
"but @var{initial} is non-@code{nil}, then the default is the absolute file "
"name obtained from @var{directory} and @var{initial}.  If both @var{default} "
"and @var{initial} are @code{nil} and the buffer is visiting a file, "
"@code{read-file-name} uses the absolute file name of that file as default.  "
"If the buffer is not visiting a file, then there is no default.  In that "
"case, if the user types @key{RET} without any editing, @code{read-file-name} "
"simply returns the pre-inserted contents of the minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1465
msgid ""
"If the user types @key{RET} in an empty minibuffer, this function returns an "
"empty string, regardless of the value of @var{require-match}.  This is, for "
"instance, how the user can make the current buffer visit no file using "
"@kbd{M-x set-visited-file-name}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1470
msgid ""
"If @var{predicate} is non-@code{nil}, it specifies a function of one "
"argument that decides which file names are acceptable completion "
"alternatives.  A file name is an acceptable value if @var{predicate} returns "
"non-@code{nil} for it."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1472
msgid "Here is an example of using @code{read-file-name}:"
msgstr ""

#. type: group
#: minibuf.texi.orig:1476
#, no-wrap
msgid ""
"(read-file-name \"The file is \")\n"
"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1485
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is /gp/gnu/elisp/@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1490
msgid "Typing @kbd{manual @key{TAB}} results in the following:"
msgstr ""

#. type: group
#: minibuf.texi.orig:1496
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is /gp/gnu/elisp/manual.texi@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1503
msgid ""
"If the user types @key{RET}, @code{read-file-name} returns the file name as "
"the string @code{\"/gp/gnu/elisp/manual.texi\"}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1505
#, no-wrap
msgid "read-file-name-function"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1510
msgid ""
"If non-@code{nil}, this should be a function that accepts the same arguments "
"as @code{read-file-name}.  When @code{read-file-name} is called, it calls "
"this function with the supplied arguments instead of doing its usual work."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1512
#, no-wrap
msgid "read-file-name-completion-ignore-case"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1515
msgid ""
"If this variable is non-@code{nil}, @code{read-file-name} ignores case when "
"performing completion."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1517
#, no-wrap
msgid "read-directory-name prompt &optional directory default require-match initial"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1520
msgid ""
"This function is like @code{read-file-name} but allows only directory names "
"as completion alternatives."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1528
msgid ""
"If @var{default} is @code{nil} and @var{initial} is non-@code{nil}, "
"@code{read-directory-name} constructs a substitute default by combining "
"@var{directory} (or the current buffer's default directory if "
"@var{directory} is @code{nil}) and @var{initial}.  If both @var{default} and "
"@var{initial} are @code{nil}, this function uses @var{directory} as "
"substitute default, or the current buffer's default directory if "
"@var{directory} is @code{nil}."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1530
#, no-wrap
msgid "insert-default-directory"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1542
msgid ""
"This variable is used by @code{read-file-name}, and thus, indirectly, by "
"most commands reading file names.  (This includes all commands that use the "
"code letters @samp{f} or @samp{F} in their interactive form.  "
"@xref{Interactive Codes,, Code Characters for interactive}.)  Its value "
"controls whether @code{read-file-name} starts by placing the name of the "
"default directory in the minibuffer, plus the initial file name, if any.  If "
"the value of this variable is @code{nil}, then @code{read-file-name} does "
"not place any initial input in the minibuffer (unless you specify initial "
"input with the @var{initial} argument).  In that case, the default directory "
"is still used for completion of relative file names, but is not displayed."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1549
msgid ""
"If this variable is @code{nil} and the initial minibuffer contents are "
"empty, the user may have to explicitly fetch the next history element to "
"access a default value.  If the variable is non-@code{nil}, the initial "
"minibuffer contents are always non-empty and the user can always request a "
"default value by immediately typing @key{RET} in an unedited minibuffer.  "
"(See above.)"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1551
msgid "For example:"
msgstr ""

#. type: group
#: minibuf.texi.orig:1557
#, no-wrap
msgid ""
";; @r{Here the minibuffer starts out with the default directory.}\n"
"(let ((insert-default-directory t))\n"
"  (read-file-name \"The file is \"))\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1563
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is ~lewis/manual/@point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1570
#, no-wrap
msgid ""
";; @r{Here the minibuffer is empty and only the prompt}\n"
";;   @r{appears on its line.}\n"
"(let ((insert-default-directory nil))\n"
"  (read-file-name \"The file is \"))\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:1576
#, no-wrap
msgid ""
"---------- Buffer: Minibuffer ----------\n"
"The file is @point{}\n"
"---------- Buffer: Minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1580
#, no-wrap
msgid "read-shell-command prompt &optional initial history &rest args"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1585
msgid ""
"This function reads a shell command from the minibuffer, prompting with "
"@var{prompt} and providing intelligent completion.  It completes the first "
"word of the command using candidates that are appropriate for command names, "
"and the rest of the command words as file names."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1595
msgid ""
"This function uses @code{minibuffer-local-shell-command-map} as the keymap "
"for minibuffer input.  The @var{history} argument specifies the history list "
"to use; if is omitted or @code{nil}, it defaults to "
"@code{shell-command-history} (@pxref{Minibuffer History, "
"shell-command-history}).  The optional argument @var{initial} specifies the "
"initial content of the minibuffer (@pxref{Initial Input}).  The rest of "
"@var{args}, if present, are used as the @var{default} and "
"@var{inherit-input-method} arguments in @code{read-from-minibuffer} "
"(@pxref{Text from Minibuffer})."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1597
#, no-wrap
msgid "minibuffer-local-shell-command-map"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1602
msgid ""
"This keymap is used by @code{read-shell-command} for completing command and "
"file names that are part of a shell command.  It uses "
"@code{minibuffer-local-map} as its parent keymap, and binds @key{TAB} to "
"@code{completion-at-point}."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1609
msgid ""
"Here are some variables that can be used to alter the default completion "
"behavior."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1610
#, no-wrap
msgid "completion styles"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1611
#, no-wrap
msgid "completion-styles"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1616
msgid ""
"The value of this variable is a list of completion style (symbols) to use "
"for performing completion.  A @dfn{completion style} is a set of rules for "
"generating completions.  Each symbol occurring this list must have a "
"corresponding entry in @code{completion-styles-alist}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1618
#, no-wrap
msgid "completion-styles-alist"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1621
msgid ""
"This variable stores a list of available completion styles.  Each element in "
"the list has the form"
msgstr ""

#. type: example
#: minibuf.texi.orig:1624
#, no-wrap
msgid "(@var{style} @var{try-completion} @var{all-completions} @var{doc})\n"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1633
msgid ""
"Here, @var{style} is the name of the completion style (a symbol), which may "
"be used in the @code{completion-styles} variable to refer to this style; "
"@var{try-completion} is the function that does the completion; "
"@var{all-completions} is the function that lists the completions; and "
"@var{doc} is a string describing the completion style."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1643
msgid ""
"The @var{try-completion} and @var{all-completions} functions should each "
"accept four arguments: @var{string}, @var{collection}, @var{predicate}, and "
"@var{point}.  The @var{string}, @var{collection}, and @var{predicate} "
"arguments have the same meanings as in @code{try-completion} (@pxref{Basic "
"Completion}), and the @var{point} argument is the position of point within "
"@var{string}.  Each function should return a non-@code{nil} value if it "
"performed its job, and @code{nil} if it did not (e.g., if there is no way to "
"complete @var{string} according to the completion style)."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1653
msgid ""
"When the user calls a completion command like @code{minibuffer-complete} "
"(@pxref{Completion Commands}), Emacs looks for the first style listed in "
"@code{completion-styles} and calls its @var{try-completion} function.  If "
"this function returns @code{nil}, Emacs moves to the next listed completion "
"style and calls its @var{try-completion} function, and so on until one of "
"the @var{try-completion} functions successfully performs completion and "
"returns a non-@code{nil} value.  A similar procedure is used for listing "
"completions, via the @var{all-completions} functions."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1656
msgid ""
"@xref{Completion Styles,,, emacs, The GNU Emacs Manual}, for a description "
"of the available completion styles."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1658
#, no-wrap
msgid "completion-category-overrides"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1669
msgid ""
"This variable specifies special completion styles and other completion "
"behaviors to use when completing certain types of text.  Its value should be "
"an alist with elements of the form @code{(@var{category} . @var{alist})}.  "
"@var{category} is a symbol describing what is being completed; currently, "
"the @code{buffer}, @code{file}, and @code{unicode-name} categories are "
"defined, but others can be defined via specialized completion functions "
"(@pxref{Programmed Completion}).  @var{alist} is an association list "
"describing how completion should behave for the corresponding category.  The "
"following alist keys are supported:"
msgstr ""

#. type: item
#: minibuf.texi.orig:1671
#, no-wrap
msgid "styles"
msgstr ""

#. type: table
#: minibuf.texi.orig:1673
msgid "The value should be a list of completion styles (symbols)."
msgstr ""

#. type: item
#: minibuf.texi.orig:1674
#, no-wrap
msgid "cycle"
msgstr ""

#. type: table
#: minibuf.texi.orig:1678
msgid ""
"The value should be a value for @code{completion-cycle-threshold} "
"(@pxref{Completion Options,,, emacs, The GNU Emacs Manual}) for this "
"category."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:1682
msgid "Additional alist entries may be defined in the future."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1684
#, no-wrap
msgid "completion-extra-properties"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1689
msgid ""
"This variable is used to specify extra properties of the current completion "
"command.  It is intended to be let-bound by specialized completion "
"commands.  Its value should be a list of property and value pairs.  The "
"following properties are supported:"
msgstr ""

#. type: item
#: minibuf.texi.orig:1691
#, no-wrap
msgid ":annotation-function"
msgstr ""

#. type: table
#: minibuf.texi.orig:1696
msgid ""
"The value should be a function to add annotations in the completions "
"buffer.  This function must accept one argument, a completion, and should "
"either return @code{nil} or a string to be displayed next to the completion."
msgstr ""

#. type: item
#: minibuf.texi.orig:1697
#, no-wrap
msgid ":exit-function"
msgstr ""

#. type: table
#: minibuf.texi.orig:1706
msgid ""
"The value should be a function to run after performing completion.  The "
"function should accept two arguments, @var{string} and @var{status}, where "
"@var{string} is the text to which the field was completed, and @var{status} "
"indicates what kind of operation happened: @code{finished} if text is now "
"complete, @code{sole} if the text cannot be further completed but completion "
"is not finished, or @code{exact} if the text is a valid completion but may "
"be further completed."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1711
#, no-wrap
msgid "programmed completion"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1719
msgid ""
"Sometimes it is not possible or convenient to create an alist or an obarray "
"containing all the intended possible completions ahead of time.  In such a "
"case, you can supply your own function to compute the completion of a given "
"string.  This is called @dfn{programmed completion}.  Emacs uses programmed "
"completion when completing file names (@pxref{File Name Completion}), among "
"many other cases."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1726
msgid ""
"To use this feature, pass a function as the @var{collection} argument to "
"@code{completing-read}.  The function @code{completing-read} arranges to "
"pass your completion function along to @code{try-completion}, "
"@code{all-completions}, and other basic completion functions, which will "
"then let your function do all the work."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1728
msgid "The completion function should accept three arguments:"
msgstr ""

#. type: itemize
#: minibuf.texi.orig:1732
msgid "The string to be completed."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:1738
msgid ""
"A predicate function with which to filter possible matches, or @code{nil} if "
"none.  The function should call the predicate for each possible match, and "
"ignore the match if the predicate returns @code{nil}."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:1742
msgid ""
"A flag specifying the type of completion operation to perform.  This is one "
"of the following four values:"
msgstr ""

#. type: item
#: minibuf.texi.orig:1744
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: minibuf.texi.orig:1752
msgid ""
"This specifies a @code{try-completion} operation.  The function should "
"return @code{t} if the specified string is a unique and exact match; if "
"there is more than one match, it should return the common substring of all "
"matches (if the string is an exact match for one completion alternative but "
"also matches other longer alternatives, the return value is the string); if "
"there are no matches, it should return @code{nil}."
msgstr ""

#. type: item
#: minibuf.texi.orig:1753
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: minibuf.texi.orig:1757
msgid ""
"This specifies an @code{all-completions} operation.  The function should "
"return a list of all possible completions of the specified string."
msgstr ""

#. type: item
#: minibuf.texi.orig:1758
#, no-wrap
msgid "lambda"
msgstr ""

#. type: table
#: minibuf.texi.orig:1762
msgid ""
"This specifies a @code{test-completion} operation.  The function should "
"return @code{t} if the specified string is an exact match for some "
"completion alternative; @code{nil} otherwise."
msgstr ""

#. type: item
#: minibuf.texi.orig:1763
#, no-wrap
msgid "(boundaries . @var{suffix})"
msgstr ""

#. type: table
#: minibuf.texi.orig:1769
msgid ""
"This specifies a @code{completion-boundaries} operation.  The function "
"should return @code{(boundaries @var{start} . @var{end})}, where @var{start} "
"is the position of the beginning boundary in the specified string, and "
"@var{end} is the position of the end boundary in @var{suffix}."
msgstr ""

#. type: item
#: minibuf.texi.orig:1770
#, no-wrap
msgid "metadata"
msgstr ""

#. type: table
#: minibuf.texi.orig:1775
msgid ""
"This specifies a request for information about the state of the current "
"completion.  The return value should have the form @code{(metadata "
". @var{alist})}, where @var{alist} is an alist whose elements are described "
"below."
msgstr ""

#. type: itemize
#: minibuf.texi.orig:1780
msgid ""
"If the flag has any other value, the completion function should return "
"@code{nil}."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1784
msgid ""
"The following is a list of metadata entries that a completion function may "
"return in response to a @code{metadata} flag argument:"
msgstr ""

#. type: item
#: minibuf.texi.orig:1786
#, no-wrap
msgid "category"
msgstr ""

#. type: table
#: minibuf.texi.orig:1791
msgid ""
"The value should be a symbol describing what kind of text the completion "
"function is trying to complete.  If the symbol matches one of the keys in "
"@code{completion-category-overrides}, the usual completion behavior is "
"overridden.  @xref{Completion Variables}."
msgstr ""

#. type: item
#: minibuf.texi.orig:1792
#, no-wrap
msgid "annotation-function"
msgstr ""

#. type: table
#: minibuf.texi.orig:1797
msgid ""
"The value should be a function for @dfn{annotating} completions.  The "
"function should take one argument, @var{string}, which is a possible "
"completion.  It should return a string, which is displayed after the "
"completion @var{string} in the @file{*Completions*} buffer."
msgstr ""

#. type: item
#: minibuf.texi.orig:1798
#, no-wrap
msgid "display-sort-function"
msgstr ""

#. type: table
#: minibuf.texi.orig:1803
msgid ""
"The value should be a function for sorting completions.  The function should "
"take one argument, a list of completion strings, and return a sorted list of "
"completion strings.  It is allowed to alter the input list destructively."
msgstr ""

#. type: item
#: minibuf.texi.orig:1804
#, no-wrap
msgid "cycle-sort-function"
msgstr ""

#. type: table
#: minibuf.texi.orig:1810
msgid ""
"The value should be a function for sorting completions, when "
"@code{completion-cycle-threshold} is non-@code{nil} and the user is cycling "
"through completion alternatives.  @xref{Completion Options,,, emacs, The GNU "
"Emacs Manual}.  Its argument list and return value are the same as for "
"@code{display-sort-function}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1812
#, no-wrap
msgid "completion-table-dynamic function"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1819
msgid ""
"This function is a convenient way to write a function that can act as a "
"programmed completion function.  The argument @var{function} should be a "
"function that takes one argument, a string, and returns an alist of possible "
"completions of it.  You can think of @code{completion-table-dynamic} as a "
"transducer between that interface and the interface for programmed "
"completion functions."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1821
#, no-wrap
msgid "completion-table-with-cache function &optional ignore-case"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1826
msgid ""
"This is a wrapper for @code{completion-table-dynamic} that saves the last "
"argument-result pair.  This means that multiple lookups with the same "
"argument only need to call @var{function} once.  This can be useful when a "
"slow operation is involved, such as calling an external process."
msgstr ""

#. type: subsection
#: minibuf.texi.orig:1829
#, no-wrap
msgid "Completion in Ordinary Buffers"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1830
#, no-wrap
msgid "inline completion"
msgstr ""

#. type: findex
#: minibuf.texi.orig:1832
#, no-wrap
msgid "completion-at-point"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1840
msgid ""
"Although completion is usually done in the minibuffer, the completion "
"facility can also be used on the text in ordinary Emacs buffers.  In many "
"major modes, in-buffer completion is performed by the @kbd{C-M-i} or "
"@kbd{M-@key{TAB}} command, bound to @code{completion-at-point}.  "
"@xref{Symbol Completion,,, emacs, The GNU Emacs Manual}.  This command uses "
"the abnormal hook variable @code{completion-at-point-functions}:"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1841
#, no-wrap
msgid "completion-at-point-functions"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1846
msgid ""
"The value of this abnormal hook should be a list of functions, which are "
"used to compute a completion table for completing the text at point.  It can "
"be used by major modes to provide mode-specific completion tables "
"(@pxref{Major Mode Conventions})."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1851
msgid ""
"When the command @code{completion-at-point} runs, it calls the functions in "
"the list one by one, without any argument.  Each function should return "
"@code{nil} if it is unable to produce a completion table for the text at "
"point.  Otherwise it should return a list of the form"
msgstr ""

#. type: example
#: minibuf.texi.orig:1854
#, no-wrap
msgid "(@var{start} @var{end} @var{collection} . @var{props})\n"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1867
msgid ""
"@var{start} and @var{end} delimit the text to complete (which should enclose "
"point).  @var{collection} is a completion table for completing that text, in "
"a form suitable for passing as the second argument to @code{try-completion} "
"(@pxref{Basic Completion}); completion alternatives will be generated from "
"this completion table in the usual way, via the completion styles defined in "
"@code{completion-styles} (@pxref{Completion Variables}).  @var{props} is a "
"property list for additional information; any of the properties in "
"@code{completion-extra-properties} are recognized (@pxref{Completion "
"Variables}), as well as the following additional ones:"
msgstr ""

#. type: item
#: minibuf.texi.orig:1869
#, no-wrap
msgid ":predicate"
msgstr ""

#. type: table
#: minibuf.texi.orig:1872
msgid "The value should be a predicate that completion candidates need to satisfy."
msgstr ""

#. type: item
#: minibuf.texi.orig:1873
#, no-wrap
msgid ":exclusive"
msgstr ""

#. type: table
#: minibuf.texi.orig:1878
msgid ""
"If the value is @code{no}, then if the completion table fails to match the "
"text at point, @code{completion-at-point} moves on to the next function in "
"@code{completion-at-point-functions} instead of reporting a completion "
"failure."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1885
msgid ""
"A function in @code{completion-at-point-functions} may also return a "
"function.  In that case, that returned function is called, with no argument, "
"and it is entirely responsible for performing the completion.  We discourage "
"this usage; it is intended to help convert old code to using "
"@code{completion-at-point}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:1890
msgid ""
"The first function in @code{completion-at-point-functions} to return a "
"non-@code{nil} value is used by @code{completion-at-point}.  The remaining "
"functions are not called.  The exception to this is when there is an "
"@code{:exclusive} specification, as described above."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1894
msgid ""
"The following function provides a convenient way to perform completion on an "
"arbitrary stretch of text in an Emacs buffer:"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1895
#, no-wrap
msgid "completion-in-region start end collection &optional predicate"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1900
msgid ""
"This function completes the text in the current buffer between the positions "
"@var{start} and @var{end}, using @var{collection}.  The argument "
"@var{collection} has the same meaning as in @code{try-completion} "
"(@pxref{Basic Completion})."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1904
msgid ""
"This function inserts the completion text directly into the current buffer.  "
"Unlike @code{completing-read} (@pxref{Minibuffer Completion}), it does not "
"activate the minibuffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1907
msgid ""
"For this function to work, point must be somewhere between @var{start} and "
"@var{end}."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1912
#, no-wrap
msgid "asking the user questions"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1913
#, no-wrap
msgid "querying the user"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:1914
#, no-wrap
msgid "yes-or-no questions"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1922
msgid ""
"This section describes functions used to ask the user a yes-or-no question.  "
"The function @code{y-or-n-p} can be answered with a single character; it is "
"useful for questions where an inadvertent wrong answer will not have serious "
"consequences.  @code{yes-or-no-p} is suitable for more momentous questions, "
"since it requires three or four characters to answer."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1930
msgid ""
"If either of these functions is called in a command that was invoked using "
"the mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command "
"Loop Info}) is either @code{nil} or a list---then it uses a dialog box or "
"pop-up menu to ask the question.  Otherwise, it uses keyboard input.  You "
"can force use either of the mouse or of keyboard input by binding "
"@code{last-nonmenu-event} to a suitable value around the call."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:1933
msgid ""
"Strictly speaking, @code{yes-or-no-p} uses the minibuffer and "
"@code{y-or-n-p} does not; but it seems best to describe them together."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1934
#, no-wrap
msgid "y-or-n-p prompt"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1943
msgid ""
"This function asks the user a question, expecting input in the echo area.  "
"It returns @code{t} if the user types @kbd{y}, @code{nil} if the user types "
"@kbd{n}.  This function also accepts @key{SPC} to mean yes and @key{DEL} to "
"mean no.  It accepts @kbd{C-]} to mean ``quit'', like @kbd{C-g}, because the "
"question might look like a minibuffer and for that reason the user might try "
"to use @kbd{C-]} to get out.  The answer is a single character, with no "
"@key{RET} needed to terminate it.  Upper and lower case are equivalent."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1949
msgid ""
"``Asking the question'' means printing @var{prompt} in the echo area, "
"followed by the string @w{@samp{(y or n) }}.  If the input is not one of the "
"expected answers (@kbd{y}, @kbd{n}, @kbd{@key{SPC}}, @kbd{@key{DEL}}, or "
"something that quits), the function responds @samp{Please answer y or n.}, "
"and repeats the request."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1954
msgid ""
"This function does not actually use the minibuffer, since it does not allow "
"editing of the answer.  It actually uses the echo area (@pxref{The Echo "
"Area}), which uses the same screen space as the minibuffer.  The cursor "
"moves to the echo area while the question is being asked."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1964
msgid ""
"The answers and their meanings, even @samp{y} and @samp{n}, are not "
"hardwired, and are specified by the keymap @code{query-replace-map} "
"(@pxref{Search and Replace}).  In particular, if the user enters the special "
"responses @code{recenter}, @code{scroll-up}, @code{scroll-down}, "
"@code{scroll-other-window}, or @code{scroll-other-window-down} (respectively "
"bound to @kbd{C-l}, @kbd{C-v}, @kbd{M-v}, @kbd{C-M-v} and @kbd{C-M-S-v} in "
"@code{query-replace-map}), this function performs the specified window "
"recentering or scrolling operation, and poses the question again."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1968
msgid ""
"We show successive lines of echo area messages, but only one actually "
"appears on the screen at a time."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1970
#, no-wrap
msgid "y-or-n-p-with-timeout prompt seconds default"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1975
msgid ""
"Like @code{y-or-n-p}, except that if the user fails to answer within "
"@var{seconds} seconds, this function stops waiting and returns "
"@var{default}.  It works by setting up a timer; see @ref{Timers}.  The "
"argument @var{seconds} should be a number."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1977
#, no-wrap
msgid "yes-or-no-p prompt"
msgstr ""

#. type: defun
#: minibuf.texi.orig:1982
msgid ""
"This function asks the user a question, expecting input in the minibuffer.  "
"It returns @code{t} if the user enters @samp{yes}, @code{nil} if the user "
"types @samp{no}.  The user must type @key{RET} to finalize the response.  "
"Upper and lower case are equivalent."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1987
msgid ""
"@code{yes-or-no-p} starts by displaying @var{prompt} in the echo area, "
"followed by @w{@samp{(yes or no) }}.  The user must type one of the expected "
"responses; otherwise, the function responds @samp{Please answer yes or no.}, "
"waits about two seconds and repeats the request."
msgstr ""

#. type: defun
#: minibuf.texi.orig:1990
msgid ""
"@code{yes-or-no-p} requires more work from the user than @code{y-or-n-p} and "
"is appropriate for more crucial decisions."
msgstr ""

#. type: group
#: minibuf.texi.orig:1996
#, no-wrap
msgid ""
"(yes-or-no-p \"Do you really want to remove everything? \")\n"
"\n"
msgstr ""

#. type: group
#: minibuf.texi.orig:2006
#, no-wrap
msgid ""
"---------- Buffer: minibuffer ----------\n"
"Do you really want to remove everything? (yes or no)\n"
"---------- Buffer: minibuffer ----------\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2013
msgid ""
"If the user first types @kbd{y @key{RET}}, which is invalid because this "
"function demands the entire word @samp{yes}, it responds by displaying these "
"prompts, with a brief pause between them:"
msgstr ""

#. type: group
#: minibuf.texi.orig:2020
#, no-wrap
msgid ""
"---------- Buffer: minibuffer ----------\n"
"Please answer yes or no.\n"
"Do you really want to remove everything? (yes or no)\n"
"---------- Buffer: minibuffer ----------\n"
msgstr ""

#. type: section
#: minibuf.texi.orig:2025
#, no-wrap
msgid "Asking Multiple Y-or-N Questions"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:2026
#, no-wrap
msgid "multiple yes-or-no questions"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2034
msgid ""
"When you have a series of similar questions to ask, such as ``Do you want to "
"save this buffer'' for each buffer in turn, you should use "
"@code{map-y-or-n-p} to ask the collection of questions, rather than asking "
"each question individually.  This gives the user certain convenient "
"facilities such as the ability to answer the whole series at once."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2035
#, no-wrap
msgid ""
"map-y-or-n-p prompter actor list &optional help action-alist "
"no-cursor-in-echo-area"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2038
msgid ""
"This function asks the user a series of questions, reading a "
"single-character answer in the echo area for each one."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2043
msgid ""
"The value of @var{list} specifies the objects to ask questions about.  It "
"should be either a list of objects or a generator function.  If it is a "
"function, it should expect no arguments, and should return either the next "
"object to ask about, or @code{nil}, meaning to stop asking questions."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2046
msgid ""
"The argument @var{prompter} specifies how to ask each question.  If "
"@var{prompter} is a string, the question text is computed like this:"
msgstr ""

#. type: example
#: minibuf.texi.orig:2049
#, no-wrap
msgid "(format @var{prompter} @var{object})\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2054
msgid ""
"where @var{object} is the next object to ask about (as obtained from "
"@var{list})."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2061
msgid ""
"If not a string, @var{prompter} should be a function of one argument (the "
"next object to ask about) and should return the question text.  If the value "
"is a string, that is the question to ask the user.  The function can also "
"return @code{t}, meaning do act on this object (and don't ask the user), or "
"@code{nil}, meaning ignore this object (and don't ask the user)."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2066
msgid ""
"The argument @var{actor} says how to act on the answers that the user "
"gives.  It should be a function of one argument, and it is called with each "
"object that the user says yes for.  Its argument is always an object "
"obtained from @var{list}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2068
msgid "If the argument @var{help} is given, it should be a list of this form:"
msgstr ""

#. type: example
#: minibuf.texi.orig:2071
#, no-wrap
msgid "(@var{singular} @var{plural} @var{action})\n"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2078
msgid ""
"where @var{singular} is a string containing a singular noun that describes "
"the objects conceptually being acted on, @var{plural} is the corresponding "
"plural noun, and @var{action} is a transitive verb describing what "
"@var{actor} does."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2081
msgid ""
"If you don't specify @var{help}, the default is @code{(\"object\" "
"\"objects\" \"act on\")}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2090
msgid ""
"Each time a question is asked, the user may enter @kbd{y}, @kbd{Y}, or "
"@key{SPC} to act on that object; @kbd{n}, @kbd{N}, or @key{DEL} to skip that "
"object; @kbd{!} to act on all following objects; @key{ESC} or @kbd{q} to "
"exit (skip all following objects); @kbd{.} (period) to act on the current "
"object and then exit; or @kbd{C-h} to get help.  These are the same answers "
"that @code{query-replace} accepts.  The keymap @code{query-replace-map} "
"defines their meaning for @code{map-y-or-n-p} as well as for "
"@code{query-replace}; see @ref{Search and Replace}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2097
msgid ""
"You can use @var{action-alist} to specify additional possible answers and "
"what they mean.  It is an alist of elements of the form @code{(@var{char} "
"@var{function} @var{help})}, each of which defines one additional answer.  "
"In this element, @var{char} is a character (the answer); @var{function} is a "
"function of one argument (an object from @var{list}); @var{help} is a "
"string."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2103
msgid ""
"When the user responds with @var{char}, @code{map-y-or-n-p} calls "
"@var{function}.  If it returns non-@code{nil}, the object is considered "
"``acted upon'', and @code{map-y-or-n-p} advances to the next object in "
"@var{list}.  If it returns @code{nil}, the prompt is repeated for the same "
"object."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2107
msgid ""
"Normally, @code{map-y-or-n-p} binds @code{cursor-in-echo-area} while "
"prompting.  But if @var{no-cursor-in-echo-area} is non-@code{nil}, it does "
"not do that."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2115
msgid ""
"If @code{map-y-or-n-p} is called in a command that was invoked using the "
"mouse---more precisely, if @code{last-nonmenu-event} (@pxref{Command Loop "
"Info}) is either @code{nil} or a list---then it uses a dialog box or pop-up "
"menu to ask the question.  In this case, it does not use keyboard input or "
"the echo area.  You can force use either of the mouse or of keyboard input "
"by binding @code{last-nonmenu-event} to a suitable value around the call."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2117
msgid "The return value of @code{map-y-or-n-p} is the number of objects acted on."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:2123
#, no-wrap
msgid "passwords, reading"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2127
msgid ""
"To read a password to pass to another program, you can use the function "
"@code{read-passwd}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2128
#, no-wrap
msgid "read-passwd prompt &optional confirm default"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2133
msgid ""
"This function reads a password, prompting with @var{prompt}.  It does not "
"echo the password as the user types it; instead, it echoes @samp{.} for each "
"character in the password.  (Note that in batch mode, the input is not "
"hidden.)"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2138
msgid ""
"The optional argument @var{confirm}, if non-@code{nil}, says to read the "
"password twice and insist it must be the same both times.  If it isn't the "
"same, the user has to type it over and over until the last two times match."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2142
msgid ""
"The optional argument @var{default} specifies the default password to return "
"if the user enters empty input.  If @var{default} is @code{nil}, then "
"@code{read-passwd} returns the null string in that case."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2149
msgid "This section describes some commands meant for use in the minibuffer."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2150
#, no-wrap
msgid "Command exit-minibuffer"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2153
msgid ""
"This command exits the active minibuffer.  It is normally bound to keys in "
"minibuffer local keymaps."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2155
#, no-wrap
msgid "Command self-insert-and-exit"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2159
msgid ""
"This command exits the active minibuffer after inserting the last character "
"typed on the keyboard (found in @code{last-command-event}; @pxref{Command "
"Loop Info})."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2161
#, no-wrap
msgid "Command previous-history-element n"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2164
msgid ""
"This command replaces the minibuffer contents with the value of the "
"@var{n}th previous (older) history element."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2166
#, no-wrap
msgid "Command next-history-element n"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2169
msgid ""
"This command replaces the minibuffer contents with the value of the "
"@var{n}th more recent history element."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2171
#, no-wrap
msgid "Command previous-matching-history-element pattern n"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2175
msgid ""
"This command replaces the minibuffer contents with the value of the "
"@var{n}th previous (older) history element that matches @var{pattern} (a "
"regular expression)."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2177
#, no-wrap
msgid "Command next-matching-history-element pattern n"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2181
msgid ""
"This command replaces the minibuffer contents with the value of the "
"@var{n}th next (newer) history element that matches @var{pattern} (a regular "
"expression)."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2183
#, no-wrap
msgid "Command previous-complete-history-element n"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2187
msgid ""
"This command replaces the minibuffer contents with the value of the "
"@var{n}th previous (older) history element that completes the current "
"contents of the minibuffer before the point."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2189
#, no-wrap
msgid "Command next-complete-history-element n"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2193
msgid ""
"This command replaces the minibuffer contents with the value of the "
"@var{n}th next (newer) history element that completes the current contents "
"of the minibuffer before the point."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:2198
#, no-wrap
msgid "minibuffer windows"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2202
msgid ""
"These functions access and select minibuffer windows and test whether they "
"are active."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2203
#, no-wrap
msgid "active-minibuffer-window"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2206
msgid ""
"This function returns the currently active minibuffer window, or @code{nil} "
"if there is none."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2208
#, no-wrap
msgid "minibuffer-window &optional frame"
msgstr ""

#. type: anchor{#1}
#: minibuf.texi.orig:2215
msgid "Definition of minibuffer-window"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2215
msgid ""
"This function returns the minibuffer window used for frame @var{frame}.  If "
"@var{frame} is @code{nil}, that stands for the current frame.  Note that the "
"minibuffer window used by a frame need not be part of that frame---a frame "
"that has no minibuffer of its own necessarily uses some other frame's "
"minibuffer window."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2217
#, no-wrap
msgid "set-minibuffer-window window"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2223
msgid ""
"This function specifies @var{window} as the minibuffer window to use.  This "
"affects where the minibuffer is displayed if you put text in it without "
"invoking the usual minibuffer commands.  It has no effect on the usual "
"minibuffer input functions because they all start by choosing the minibuffer "
"window according to the current frame."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2226
#, no-wrap
msgid "window-minibuffer-p &optional window"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2230
msgid ""
"This function returns non-@code{nil} if @var{window} is a minibuffer "
"window.  @var{window} defaults to the selected window."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2236
msgid ""
"It is not correct to determine whether a given window is a minibuffer by "
"comparing it with the result of @code{(minibuffer-window)}, because there "
"can be more than one minibuffer window if there is more than one frame."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2237
#, no-wrap
msgid "minibuffer-window-active-p window"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2240
msgid ""
"This function returns non-@code{nil} if @var{window} is the currently active "
"minibuffer window."
msgstr ""

#. type: cindex
#: minibuf.texi.orig:2244
#, no-wrap
msgid "access minibuffer contents"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:2245
#, no-wrap
msgid "minibuffer contents, accessing"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2248
msgid "These functions access the minibuffer prompt and contents."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2249
#, no-wrap
msgid "minibuffer-prompt"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2252
msgid ""
"This function returns the prompt string of the currently active minibuffer.  "
"If no minibuffer is active, it returns @code{nil}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2254
#, no-wrap
msgid "minibuffer-prompt-end"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2258
msgid ""
"This function returns the current position of the end of the minibuffer "
"prompt, if a minibuffer is current.  Otherwise, it returns the minimum valid "
"buffer position."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2260
#, no-wrap
msgid "minibuffer-prompt-width"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2263
msgid ""
"This function returns the current display-width of the minibuffer prompt, if "
"a minibuffer is current.  Otherwise, it returns zero."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2265
#, no-wrap
msgid "minibuffer-contents"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2270
msgid ""
"This function returns the editable contents of the minibuffer (that is, "
"everything except the prompt) as a string, if a minibuffer is current.  "
"Otherwise, it returns the entire contents of the current buffer."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2272
#, no-wrap
msgid "minibuffer-contents-no-properties"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2275
msgid ""
"This is like @code{minibuffer-contents}, except that it does not copy text "
"properties, just the characters themselves.  @xref{Text Properties}."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2277
#, no-wrap
msgid "delete-minibuffer-contents"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2281
msgid ""
"This function erases the editable contents of the minibuffer (that is, "
"everything except the prompt), if a minibuffer is current.  Otherwise, it "
"erases the entire current buffer."
msgstr ""

#. type: section
#: minibuf.texi.orig:2284
#, no-wrap
msgid "Recursive Minibuffers"
msgstr ""

#. type: cindex
#: minibuf.texi.orig:2285
#, no-wrap
msgid "recursive minibuffers"
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2289
msgid ""
"These functions and variables deal with recursive minibuffers "
"(@pxref{Recursive Editing}):"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2290
#, no-wrap
msgid "minibuffer-depth"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2294
msgid ""
"This function returns the current depth of activations of the minibuffer, a "
"nonnegative integer.  If no minibuffers are active, it returns zero."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:2296
#, no-wrap
msgid "enable-recursive-minibuffers"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:2302
msgid ""
"If this variable is non-@code{nil}, you can invoke commands (such as "
"@code{find-file}) that use minibuffers even while the minibuffer window is "
"active.  Such invocation produces a recursive editing level for a new "
"minibuffer.  The outer-level minibuffer is invisible while you are editing "
"the inner one."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:2306
msgid ""
"If this variable is @code{nil}, you cannot invoke minibuffer commands when "
"the minibuffer window is active, not even if you switch to another window to "
"do it."
msgstr ""

#. type: Plain text
#: minibuf.texi.orig:2316
msgid ""
"If a command name has a property @code{enable-recursive-minibuffers} that is "
"non-@code{nil}, then the command can use the minibuffer to read arguments "
"even if it is invoked from the minibuffer.  A command can also achieve this "
"by binding @code{enable-recursive-minibuffers} to @code{t} in the "
"interactive declaration (@pxref{Using Interactive}).  The minibuffer command "
"@code{next-matching-history-element} (normally @kbd{M-s} in the minibuffer) "
"does the latter."
msgstr ""

#. type: section
#: minibuf.texi.orig:2318
#, no-wrap
msgid "Minibuffer Miscellany"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2320
#, no-wrap
msgid "minibufferp &optional buffer-or-name"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2324
msgid ""
"This function returns non-@code{nil} if @var{buffer-or-name} is a "
"minibuffer.  If @var{buffer-or-name} is omitted, it tests the current "
"buffer."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2326
#, no-wrap
msgid "minibuffer-setup-hook"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2329
msgid ""
"This is a normal hook that is run whenever the minibuffer is entered.  "
"@xref{Hooks}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2331
#, no-wrap
msgid "minibuffer-exit-hook"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2334
msgid ""
"This is a normal hook that is run whenever the minibuffer is exited.  "
"@xref{Hooks}."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2336
#, no-wrap
msgid "minibuffer-help-form"
msgstr ""

#. type: anchor{#1}
#: minibuf.texi.orig:2340
msgid "Definition of minibuffer-help-form"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2340
msgid ""
"The current value of this variable is used to rebind @code{help-form} "
"locally inside the minibuffer (@pxref{Help Functions})."
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2342
#, no-wrap
msgid "minibuffer-scroll-window"
msgstr ""

#. type: anchor{#1}
#: minibuf.texi.orig:2347
msgid "Definition of minibuffer-scroll-window"
msgstr ""

#. type: defvar
#: minibuf.texi.orig:2347
msgid ""
"If the value of this variable is non-@code{nil}, it should be a window "
"object.  When the function @code{scroll-other-window} is called in the "
"minibuffer, it scrolls this window."
msgstr ""

#. type: defun
#: minibuf.texi.orig:2349
#, no-wrap
msgid "minibuffer-selected-window"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2353
msgid ""
"This function returns the window that was selected when the minibuffer was "
"entered.  If selected window is not a minibuffer window, it returns "
"@code{nil}."
msgstr ""

#. type: defopt
#: minibuf.texi.orig:2355
#, no-wrap
msgid "max-mini-window-height"
msgstr ""

#. type: defopt
#: minibuf.texi.orig:2359
msgid ""
"This variable specifies the maximum height for resizing minibuffer windows.  "
"If a float, it specifies a fraction of the height of the frame.  If an "
"integer, it specifies a number of lines."
msgstr ""

#. type: vindex
#: minibuf.texi.orig:2361
#, no-wrap
msgid "minibuffer-message-timeout"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2362
#, no-wrap
msgid "minibuffer-message string &rest args"
msgstr ""

#. type: defun
#: minibuf.texi.orig:2370
msgid ""
"This function displays @var{string} temporarily at the end of the minibuffer "
"text, for a few seconds, or until the next input event arrives, whichever "
"comes first.  The variable @code{minibuffer-message-timeout} specifies the "
"number of seconds to wait in the absence of input.  It defaults to 2.  If "
"@var{args} is non-@code{nil}, the actual message is obtained by passing "
"@var{string} and @var{args} through @code{format}.  @xref{Formatting "
"Strings}."
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2372
#, no-wrap
msgid "Command minibuffer-inactive-mode"
msgstr ""

#. type: deffn
#: minibuf.texi.orig:2376
msgid ""
"This is the major mode used in inactive minibuffers.  It uses keymap "
"@code{minibuffer-inactive-mode-map}.  This can be useful if the minibuffer "
"is in a separate frame.  @xref{Minibuffers and Frames}."
msgstr ""
