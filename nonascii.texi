@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1998-1999, 2001-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Non-ASCII Characters
@chapter Non-@acronym{ASCII} Characters
@cindex multibyte characters
@cindex characters, multi-byte
@cindex non-@acronym{ASCII} characters

  このチャプターは文字に関する特別な問題と、それらが文字列およびバッファーに格納される方法についてカバーします。

@menu
* Text Representations::     Emacsがテキストを表す方法。
* Disabling Multibyte::      マルチバイト使用を制御する。
* Converting Representations::  ユニバイトとマルチバイトの相互変換。
* Selecting a Representation::  バイトシーケンスをユニバイトやマルチバイトとして扱う。
* Character Codes::          ユニバイトやマルチバイトが個々の文字のコードと関わる方法。
* Character Properties::     文字の挙動と処理を定義する文字属性。
* Character Sets::           利用可能な文字コード空間はさまざまな文字セットに分割される。 
                               The space of possible character codes is 
                               divided into various character sets.
* Scanning Charsets::        バッファーで使用されている文字セットは?
* Translation of Characters::  変換に使用される変換テーブル。
* Coding Systems::           コーディングシステムはファイル保存のための変換である。
* Input Methods::            入力メソッドによりユーザーは特別なキーボードなしで非ASCII文字を入力できる。
* Locales::                  POSIXロケールとの対話。
@end menu

@node Text Representations
@section Text Representations
@cindex text representation

  Emacsのバッファーおよび文字列は、既知のスクリプトで記述されたほとんどすべてのテキストをユーザーがタイプしたり表示できるよう、多種多様な言語の広大な文字レパートリーをサポートします。

@cindex character codepoint
@cindex codespace
@cindex Unicode
  多種多様な文字およびスクリプトをサポートするために、Emacsは@dfn{Unicode標準(Unicode
Standard)}に厳密にしたがいます。Unicode標準は、すべての文字にたいしてそれぞれ、@dfn{コードポイント(codepoint)}と呼ばれる一意な番号を割り当てています。コードポイントの範囲はUnicode、またはUnicode@dfn{コード空間(codespace)}により定義され、範囲は@code{0..#x10FFFF}(16進表記、範囲両端を含む)です。Emacsはこれを、範囲@code{#x110000..#x3FFFFF}のコードポイント範囲に拡張します。この範囲はUnicodeとして統一されていない文字や、文字として解釈できない@dfn{8ビットrawバイト(raw
8-bit bytes)}を表すために使用します。したがって、Emacs内の文字コードポイントは、22ビットの整数になります。

@cindex internal representation of characters
@cindex characters, representation in buffers and strings
@cindex multibyte text
  メモリー節約のため、Emacsはバッファーおよび文字列内のテキスト文字にたいするコードポイントである、22ビットの整数を固定長で保持しません。かわりに、Emacsは文字の内部表現として可変長を使用します。これは、そのコードポイントの値に応じて、各文字を5ビットから8ビットのバイトシーケンスとして格納するものです@footnote{この内部表現は、任意のUnicodeコードポイントを表すための、@dfn{UTF-8}と呼ばれるUnicode標準によるエンコーディングの1つにもとづきますが、8ビットrawバイトおよびUnicodeに統一されていない文字を使用する追加のコードポイントを表現するために、EmacsはUTF-8を拡張しています。}。たとえばすべての@acronym{ASCII}文字は1バイト、Latin-1文字は2バイトといった具合です。わたしたちはこれを、テキストの@dfn{マルチバイト(multibyte)}表現と呼んでいます。

  Emacs外部では、ISO-8859-1、GB-2312、Big-5等のような多種の異なるエンコーディングで文字を表すことができます。Emacsはバッファーまたは文字列へのテキスト読み込み時、およびディスク状のファイルへのテキスト書き込みや他プロセスへの引き渡し時に、これらの外部エンコーディングと、その内部表現の間で適切な変換を行います。

  Emacsがエンコード済みテキストや非テキストデータを、バッファーや文字列に保持、あるいは操作する必要がある場合も時折あります。たとえばEmacsがファイルをvisitする際、まずそのファイルのテキストをそのままバッファーに読み込み、その後にのみそれを内部表現に変換します。この変換前にバッファーに保持されてくださいのは、エンコード済みのテキストです。

@cindex unibyte text
  Emacsに関する限り、エンコードされたテキストは実際のテキストではなく、8ビットrawバイトです。エンコード済みテキストを保持するバッファーおよび文字列は、Emacsがそれらを個々のバイトシーケンスとしてアツカウことから、@dfn{ユニバイト(unibyte)}のバッファーまたは文字列と呼んでいます。Emacsは通常、ユニバイトのバッファーおよび文字列を、@code{\237}のような8進コードで表示します。エンコード済みテキストやバイナリー非テキストデータを処理する場合を除き、ユニバイトバッファーとユニバイト文字列は決して使用しないよう推奨します。

  バッファーにおいては、変数@code{enable-multibyte-characters}のバッファーローカルな値が、使用する表現を指定します。文字列での表現は、その文字列構築時に判断して、それを文字列内に記録します。

@defvar enable-multibyte-characters
この変数は、カレントバッファーのテキスト表現を指定する。非@code{nil}ならバッファーはマルチバイトテキストを含み、それ以外ならエンコード済みユニバイトテキスト、またはバイナリー非テキストデータが含れる。

この変数は直接セットできない。バッファーの表現を変更するには、かわりに関数@code{set-buffer-multibyte}を使用すること。
@end defvar

@defun position-bytes position
バッファー位置は文字単位で測られる。この関数は、カレントバッファー内のバッファー位置を、それに対応するバイト位置でリターンする。これはバッファー先頭を1として、バイト単位で増加方向に数えられる。@var{position}が範囲外なら、値は@code{nil}になる。
@end defun

@defun byte-to-position byte-position
カレントバッファー内で、与えられた@var{byte-position}に対応するバッファー位置を、文字単位でリターンする。@var{byte-position}が範囲外なら、値は@code{nil}になる。マルチバイトバッファーでは、@var{byte-position}の任意の値が文字境界上になく、1文字として表現されたマルチバイトシーケンス内にあるかもしれない。この場合、関数はその文字のマルチバイトシーケンスが@var{byte-position}を含むようなバッファー位置をリターンする。他の言い方をすると、この値は同じ文字に属するすべてのバイト位置にたいして変化しない。
@end defun

@defun multibyte-string-p string
@var{string}がマルチバイト文字列なら@code{t}、それ以外は@code{nil}をリターンする。この関数は、@var{string}が文字列以外の場合にも、@code{nil}をリターンする。
@end defun

@defun string-bytes string
@cindex string, number of bytes
この関数は、@var{string}内のバイトの数をリターンする。@var{string}がマルチバイト文字列なら、これは@code{(length
@var{string})}より大きいかもしれない。
@end defun

@defun unibyte-string &rest bytes
この関数は引数@var{bytes}をすべて結合して、その結果をユニバイト文字列で作成する。
@end defun

@node Disabling Multibyte
@section Disabling Multibyte Characters
@cindex disabling multibyte

  デフォルトでは、Emacsはマルチバイトモードで開始します。Emacsは、マルチバイトシーケンスを使用して非@acronym{ASCII}文字を表現する内部エンコーディングを使用することにより、バッファーおよび文字列のコンテンツを格納します。マルチバイトモードではサポートされるすべての言語とスクリプトを使用できます。

@cindex turn multibyte support on or off
  非常に特別な状況下においては、特定のバッファーでマルチバイト文字のサポートを無効にしたいときがあるかもしれません。あるバッファーにおいてマルチバイト文字が無効になっているときは、それを@dfn{ユニバイトモード(unibyte
mode)}と呼びます。ユニバイトモードでは、バッファー内の各文字は0から255(8進の0377)の範囲の文字コードをもちます。0から127(8進の0177)は@acronym{ASCII}文字、128から255(8進の0377)は非@acronym{ASCII}文字を表します。

  特定のファイルをユニバイト表現で編集するためには、@code{find-file-literally}を使用してファイルをvisitします。@ref{Visiting
Functions}を参照してください。マルチバイトバッファーをファイルに保存してバッファーをkillした後に、再びそのファイルを@code{find-file-literally}でvisitすることにより、マルチバイトバッファーをユニバイトに変換できます。かわりに@kbd{C-x
@key{RET}
c}(@code{universal-coding-system-argument})を使用して、ファイルをvisitまたは保存するコーディングシステムとして@samp{raw-text}を指定することもできます。@ref{Text
Coding, , Specifying a Coding System for File Text, emacs, GNU Emacs
Manual}を参照してください。@code{find-file-literally}とは異なり、@samp{raw-text}としてファイルをvisitしてもフォーマット変換、解凍、自動的なモード選択は無効になりません。

@c See http://debbugs.gnu.org/11226 for lack of unibyte tooltip.
@vindex enable-multibyte-characters
バッファーローカル変数@code{enable-multibyte-characters}は、マルチバイトバッファーなら非@code{nil}、ユニバイトバッファーなら@code{nil}になります。マルチバイトバッファーかどうかは、モードラインにも示されます。グラフィカルなディスプレイでのマルチバイトバッファーは、文字セット話示すモードライン部分ぬ、そのバッファーがマルチバイトであること(とそれ以外の事項)を告げるツールチップがあります。ユニバイトバッファーでは、文字セットのインジケーターはありません。したがって(グラフィカルなディスプレイ使用時の)ユニバイトバッファーでは、入力メソッドを使用していなければ、visitしているファイルの行末変換(コロン、バックスラッシュ等)の標識の前には通常何も標識はありません。

@findex toggle-enable-multibyte-characters
特定のバッファーでマルチバイトサポートをオフに切り替えるには、そのバッファー内でコマンド@code{toggle-enable-multibyte-characters}を呼び出してください。

@node Converting Representations
@section Converting Text Representations

  Emacsはユニバイトテキストをマルチバイトに変換できます。マルチバイトテキストに含まれるのが@acronym{ASCII}と8ビットrawバイトだけという条件つきで、マルチバイトテキストからユニバイトへの変換もできます。一般的にこれらの変換はバッファーへのテキスト挿入時、または複数の文字列を1つの文字列に合わせてテキストにputするときに発生します。文字列のコンテンツを、いずれかの表現に明示的に変換することもできます。

  Emacsは、そのテキストの構成にもとづいて、文字列の表現を選択します。一般的なルールでは、ユニバイトテキストが他のマルチバイトテキストと組み合わされている場合は、マルチバイト表現のほうがより一般的であり、ユニバイトテキストのすべての文字を保有できるので、ユニバイトテキストをマルチバイトテキストに変換します。

  バッファーへのテキスト挿入時、Emacsはそのバッファーの@code{enable-multibyte-characters}で指定されるように、テキストをそのバッファーの表現に変換します。特にユニバイトバッファーへマルチバイトテキストを挿入する際は、たとえ一般的にはマルチバイトテキスト内のすべての文字を保持することはできなくても、Emacsはテキストをユニバイトに変換します。バッファーコンテンツをマルチバイトに変換するという自然な代替方法は、そのバッファーの表現が自動的にオーバーライドできないユーザーによる選択にもとづく表現であるため、受け入れられません。

  ユニバイトテキストからマルチバイトテキストへの変換では、@acronym{ASCII}文字は未変更のまま残され、128から255のコードをもつバイトが8ビットrawバイトのマルチバイト表現に変換されます。

  マルチバイトテキストからユニバイトテキストへの変換では、すべての@acronym{ASCII}と8ビット文字が、それらの1バイト形式に変換されますが、各文字のコードポイントの描い8ビット以外は破棄されるため、非@acronym{ASCII}文字の情報は失われます。ユニバイトテキストからマルチバイトテキストに変換して、それをユニバイトに戻せば、元のユニバイトテキストが再生成されます。

以下の2つの関数は、引数@var{string}、またはテキストプロパティをもたない新たに作成された文字列のいずれかをリターンします。

@defun string-to-multibyte string
この関数は、@var{string}と同じ文字シーケンスを含むマルチバイト文字列をリターンする。@var{string}がマルチバイト文字列なら、それが未変更のままリターンされる。この関数は、@var{string}が@acronym{ASCII}文字と8ビットrawバイトだけを含むと仮定する。後者は@code{#x3FFF80}から@code{#x3FFFFF}(両端を含む)に対応する、8ビットrawバイトのマルチバイト表現に変換される(@ref{Text
Representations, codepoints}を参照)。
@end defun

@defun string-to-unibyte string
この関数は、@var{string}と同じ文字シーケンスを含む、ユニバイト文字列をリターンする。@var{string}に非@acronym{ASCII}文字が含まれる場合は、エラーをシグナルする。@var{string}がユニバイト文字列なら、それが未変更のままリターンされる。@acronym{ASCII}文字と8ビット文字だけを含む@var{string}引数にたいしてのみ、この関数を使用すること。
@end defun

@c FIXME: Should `@var{character}' be `@var{byte}'?
@defun byte-to-string byte
@cindex byte to string
この関数は、文字データ@var{byte}の単一バイトを含むユニバイト文字列をリターンする。@var{byte}が0から255までの整数でなければ、エラーをシグナルする。
@end defun

@defun multibyte-char-to-unibyte char
これはマルチバイト文字@var{char}をユニバイト文字に変換して、その文字をリターンする。@var{char}が@acronym{ASCII}と8ビットのいずれでもなければ、この関数は@minus{}1をリターンする。
@end defun

@defun unibyte-char-to-multibyte char
これは@var{char}が@acronym{ASCII}か8ビットrawバイトのいずれかであると仮定して、ユニバイト文字@acronym{ASCII}をマルチバイト文字に変換する。
@end defun

@node Selecting a Representation
@section Selecting a Representation

  既存のバッファーまたは文字列がユニバイトの際にそれらをマルチバイトとして調べたり、その逆を行うことが有用なときがあります。

@defun set-buffer-multibyte multibyte
カレントバッファーの表現タイプをセットする。@var{multibyte}が非@code{nil}ならバッファーはマルチバイト、@code{nil}ならユニバイトになる。

この関数は、バイトシーケンスとして認識時には、バッファーを未変更のままとする。結果として、文字として認識時にはコンテンツを変更できる。たとえば、マルチバイト表現では1文字として扱われる3バイトのシーケンスは、ユニバイト表現では3文字として数えられるだろう。例外はrawバイトを表す8ビット文字である。これらはユニバイトバッファーでは1バイトで表現されるが、バッファーをマルチバイトにセットした際は2バイトのシーケンスに変換され、その逆の変換も行われる。

この関数は、どの表現が使用されているかを記録するために、@code{enable-multibyte-characters}をセットする。これは以前の同じテキストをカバーするよう、バッファー内のさまざまなデータ(オーバーレイ、テキストプロパティ、マーカーを含む)を調整する。

ナローイングはマルチバイト文字シーケンス中間で発生するかもしれないので、この関数はバッファーがナローイングされている場合はエラーをシグナルする。

そのバッファーがインダイレクトバッファー(indirect buffer:
間接バッファー)の場合も、エラーをシグナルする。インダイレクトバッファーは、常にベースバッファー(base buffer:
基底バッファー)の表現を継承する。
@end defun

@defun string-as-unibyte string
@var{string}がすでにユニバイト文字列なら、この関数は@var{string}自身をリターンする。それ以外は@var{string}と同じバイトだが、それぞれの文字を個別の文字としてとして扱い、新たな文字列をリターンする(値は@var{string}より多くの文字をもつかもしれない)。例外として、rawバイトを表す8ビット文字はそれぞれ、単一のバイトに変換される。新たに作成された文字列に、テキストプロパティは含まれない。
@end defun

@defun string-as-multibyte string
@var{string}がすでにマルチバイト文字列なら、この関数は@var{string}自身をリターンする。それ以外は@var{string}と同じバイトだが、それぞれのマルチバイトシーケンスを1つの文字としてとして扱い、新たな文字列をリターンする。これは、値が@var{string}より少ない文字をもつかもしれないことを意味する。@var{string}内のバイトシーケンスが、単一文字のマルチバイト表現として無効なら、そのシーケンスないの各バイトは、8ビットrawバイトとして扱われる。新たに作成された文字列には、テキストプロパティは含まれない
@end defun

@node Character Codes
@section Character Codes
@cindex character codes

  ユニバイトおよびマルチバイトのテキスト表現は、異なる文字コードを使用します。ユニバイト表現にたいして有効な文字コードの範囲は0から@code{#xFF}(255)で、これは1バイトに収まる値です。マルチバイト表現にたいして有効な文字コードの範囲は、0から@code{#x3FFFFF}です。このコード空間では値0から@code{#x7F}(127)が@acronym{ASCII}文字用、値@code{#x80}(128)から@code{#x3FFF7F}(4194175)が非@acronym{ASCII}文字用になります。

  Emacsの文字コードは、Unicode標準の上位集合(superset)です。値0から@code{#x10FFFF}(1114111)は、同じコードポイントのUnicode文字に対応します。値@code{#x110000}(1114112)から@code{#x3FFF7F}(4194175)は、Unicodeに統一されていない文字を、値@code{#x3FFF80}
(4194176)から@code{#x3FFFFF}(4194303)は8ビットrawバイトを表します。

@defun characterp charcode
これは@var{charcode}が有効な文字なら@code{t}、それ以外は@code{nil}をリターンする。

@example
@group
(characterp 65)
     @result{} t
@end group
@group
(characterp 4194303)
     @result{} t
@end group
@group
(characterp 4194304)
     @result{} nil
@end group
@end example
@end defun

@cindex maximum value of character codepoint
@cindex codepoint, largest value
@defun max-char
この関数は、有効な文字コードポイントがもち得る最大の値をリターンする。

@example
@group
(characterp (max-char))
     @result{} t
@end group
@group
(characterp (1+ (max-char)))
     @result{} nil
@end group
@end example
@end defun

@defun get-byte &optional pos string
この関数は、カレントバッファー内の文字位置@var{pos}にあるバイトをリターンする。カレントバッファーがユニバイトなら、その位置のバイトをそのままリターンする。バッファーがマルチバイトの場合は、8ビットrawバイトは8ビットコードに変換される一方、@acronym{ASCII}文字のバ値は文字コードポイントと同じになる。この関数は、@var{pos}にある文字が非@acronym{ASCII}なら、エラーをシグナルする。

オプション引数@var{string}は、カレントバッファーのかわりに、文字列からバイト値を得ることを意味する。
@end defun

@node Character Properties
@section Character Properties
@cindex character properties
@dfn{文字プロパティ(character
property}とは、その文字の振る舞いと、テキストが処理および表示される間どのように処理されるべきかを指定する、名前つきの文字属性です。したがって文字プロパティは、その文字の意味を指定するための重要な一部です。

@c FIXME: Use the latest URI of this chapter?
@c http://www.unicode.org/versions/latest/ch04.pdf
  全体として、Emacsは自身の文字プロパティ実装においてはUnicode標準にしたがいます。特にEmacsは@uref{http://www.unicode.org/reports/tr23/,
Unicode Character Property
Model}をサポートしており、Emacs文字プロパティデータベースはUnicode文字データベース(@acronym{UCD}: Unicode
Character
Database)から派生したものです。Unicode文字プロパティとその意味についての詳細な説明は、@uref{http://www.unicode.org/versions/Unicode6.2.0/ch04.pdf,
Character Properties chapter of the Unicode
Standard}を参照してください。このセクションでは、あなたがすでにUnicode標準の該当する章に親しんでいて、その知識をEmacs
Lispプログラムに適用したいものと仮定します。

  Emacsでは、各プロパティは名前をもつシンボルであり、そのシンボルは利用可能な値セットをもち、値の型はプロパティに依存します。ある文字が特定のプロパティをもたなければ、その値は@code{nil}になります。一般的なルールとして、Emacsでの文字プロパティ名は、対応するUnicodeプロパティ名を小文字にして、文字@samp{_}をダッシュ文字@samp{-}で置き換えることにより生成されます。たとえば@code{Canonical_Combining_Class}は@code{canonical-combining-class}となります。しかし簡単に使用できるように、名前を短くすることもあります。

@cindex unassigned character codepoints
  @acronym{UCD}によりいくつかのコードポイントは@dfn{未割り当て(unassigned)}のまま残されており、それらに対応する文字はありません。Unicode標準は、そのようなコードポイントのプロパティにたいしてデフォルト値を定義しています。それらについては、以下の各プロパティごとに注記しています。

  以下は、Emacsが関知するすべての文字プロパティにたいする、値タイプの完全なリストです:

@table @code
@item name
Unicodeプロパティ@code{Name}に対応する。値はラテン大文字のAからZ、数字、スペース、ハイフン@samp{-}の文字から構成される文字列である。未割り当てのコードポイントにたいする値は@code{nil}。

@cindex unicode general category
@item general-category
Unicodeプロパティ@code{General_Category}に対応する。値は、その文字の分類をアルファベット2文字に略したものを名前としてもつようなシンボルである。未割り当てのコードポイントにたいする値は@code{Cn}。

@item canonical-combining-class
Unicodeプロパティ@code{Canonical_Combining_Class}に対応する。値は整数。未割り当てのコードポイントにたいする値は0。

@cindex bidirectional class of characters
@item bidi-class
Unicodeプロパティ@code{Bidi_Class}に対応する。値は、その文字のUnicode@dfn{方向タイプ(directional
type)}が名前であるようなシンボル。Emacsは表示のために双方向テキストを並び替える際に、このプロパティを使用する(@ref{Bidirectional
Display}を参照)。未割り当てのコードポイントにたいする値は、そのコードポイントが属するコードブロックに依存する。未割り当てのコードポイントのほとんどは@code{L}(強い左方向)だが、@code{AL}(
Arabic letter: アラビア文字)や@code{R}(強い右方向)を受け取るコースポイントもいくつかある。

@item decomposition
Unicodeプロパティの@code{Decomposition_Type}と@code{Decomposition_Value}に対応する。値は、最初の要素が@code{small}のような互換性のあるフォーマットタグ(compatibility
formatting
tag)であるかもしれないリストである@footnote{Unicode仕様ではこれらのタグ名を@samp{<..>}カッコ内に記述しますが、Emacsでのタグ名にはカッコは含まれません。Unicodeでの@samp{<small>}指定は、Emacsでは@samp{small}となります。}。他の要素は、その文字の互換性のある分割シーケンス(compatibility
decomposition sequence)を与える文字です。未割り当てのコードポイントにたいする値は、その文字自身。

@item decimal-digit-value
@code{Numeric_Type}が@samp{Decimal}であるような文字Unicodeプロパティ@code{Numeric_Value}に対応する。値は整数。未割り当てのコードポイントにたいする値は、@acronym{NaN(``not-a-number'':
数字ではない)}を意味する@code{nil}。

@item digit-value
@code{Numeric_Type}が@samp{Digit}であるような文字の、Unicodeプロパティ@code{Numeric_Value}に対応する。値は整数。このような文字には、互換性のある添字や上付き数字が含まれ、値は対応する数字である。未割り当てのコードポイントにたいする値は、@acronym{NaN}を意味する@code{nil}である。

@item numeric-value
@code{Numeric_Type}が@samp{Numeric}であるような文字の、Unicodeプロパティ@code{Numeric_Value}に対応する。このプロパティの値は数字。このプロパティをもつ文字の例には分数、添字、上付き数字、ローマ数字、通貨分数(訳注:
原文は``currency
numerators''でベンガル語の分数値用の歴史的な記号を指すと思われる)、丸数字が含まれる。たとえば、文字@code{U+2155}(@sc{vulgar
fraction one fifth:
(訳注)スラッシュで分子と分母を区切った表記による5分の1のこと})にたいするこのプロパティの値は@code{0.2}。未割り当てのコードポイントにたいする値は、@acronym{NaN}を意味する@code{nil}。

@cindex mirroring of characters
@item mirrored
Unicodeプロパティ@code{Bidi_Mirrored}に対応する。このプロパティの値は、@code{Y}または@code{N}いずれかのシンボル。未割り当てのコードポイントにたいする値は@code{N}。

@item mirroring
Unicodeプロパティ@code{Bidi_Mirroring_Glyph}に対応する。このプロパティの値は、そのグリフ(glyph)がその文字のグリフの鏡像(mirror
image)を表すような文字、定義済みの鏡像グリフがなければ@code{nil}である。@code{mirrored}プロパティが@code{N}であるようなすべての文字の@code{mirroring}プロパティは@code{nil}である。しかし@code{mirrored}プロパティが@code{Y}の文字でも、鏡像をもつ適切な文字がないという理由により、@code{mirroring}が@code{nil}の文字もある。Emacsは適切な際は、鏡像を表示するためにこのプロパティを使用する(@ref{Bidirectional
Display}を参照)。未割り当てのコードポイントにたいする値は@code{nil}。

@item old-name
Unicodeプロパティ@code{Unicode_1_Name}に対応する。値は文字列。未割り当てのコードポイント、およびこのプロパティにたいする値をもたない文字では、値は@code{nil}である。

@item iso-10646-comment
Unicodeプロパティ@code{ISO_Comment}に対応する。値は文字列。未割り当てのコードポイントの値は空文字列。

@item uppercase
Unicodeプロパティ@code{Simple_Uppercase_Mapping}に対応する。このプロパティの値は、単一の文字。未割り当てのコードポイントの値は@code{nil}で、これはその文字自身を意味する。

@item lowercase
Unicodeプロパティ@code{Simple_Lowercase_Mapping}に対応する。このプロパティの値は、単一の文字。未割り当てのコードポイントの値は@code{nil}で、これはその文字自身を意味する。

@item titlecase
Unicodeプロパティ@code{Simple_Titlecase_Mapping}に対応する。@dfn{タイトルケース(title
case)}とは、単語の最初の文字を大文字にする必要がある際に使用される、文字の特別な形式のこと。このプロパティの値は、単一の文字。未割り当てのコードポイントにたいする値は@code{nil}で、これはその文字自身を意味する。
@end table

@defun get-char-code-property char propname
この関数は、@var{char}のプロパティ@var{propname}の値をリターンする。

@example
@group
(get-char-code-property ?\s 'general-category)
     @result{} Zs
@end group
@group
(get-char-code-property ?1 'general-category)
     @result{} Nd
@end group
@group
;; subscript 4
(get-char-code-property ?\u2084 'digit-value)
     @result{} 4
@end group
@group
;; one fifth
(get-char-code-property ?\u2155 'numeric-value)
     @result{} 0.2
@end group
@group
;; Roman IV
(get-char-code-property ?\u2163 'numeric-value)
     @result{} 4
@end group
@end example
@end defun

@defun char-code-property-description prop value
この関数はプロパティ@var{prop}の@var{value}の説明文字列(description
string)、@var{value}が説明をもたなければ@code{nil}をリターンする。

@example
@group
(char-code-property-description 'general-category 'Zs)
     @result{} "Separator, Space"
@end group
@group
(char-code-property-description 'general-category 'Nd)
     @result{} "Number, Decimal Digit"
@end group
@group
(char-code-property-description 'numeric-value '1/5)
     @result{} nil
@end group
@end example
@end defun

@defun put-char-code-property char propname value
この関数は、文字@var{char}のプロパティ@var{propname}の値として、@var{value}を格納する。
@end defun

@defvar unicode-category-table
この変数の値は、それぞれの文字にたいして、そのUnicodeプロパティ@code{General_Category}をシンボルとして指定する、文字テーブルである(@ref{Char-Tables}を参照)。
@end defvar

@defvar char-script-table
@cindex script symbols
この変数の値は、それぞれの文字がシンボルを指定するような文字テーブルである。シンボルの名前は、Unicodeコードスペースからスクリプト固有ブロックへのUnicode標準分類にしたがった、その文字が属するスクリプトである。この文字テーブルは余分のスロットを１つもち、値はすべてのスクリプトシンボルのリストである。
@end defvar

@defvar char-width-table
この変数の値は、、それぞれの文字がスクリーン上で占めるであろう幅を列単位で指定する、文字テーブルである。
@end defvar

@defvar printable-chars
この変数の値は、それぞれの文字にたいして、それがプリント可能かどうかを指定する、文字テーブルである。すなわち、@code{(aref
printable-chars char)}を評価した結果が@code{t}ならプリント可で、@code{nil}なら不可である。
@end defvar

@node Character Sets
@section Character Sets
@cindex character sets

@cindex charset
@cindex coded character set
Emacsの@dfn{文字セット(character
set、もしくはcharset)}とは、それぞれの文字が数字のコードポイントに割り当てられれた、文字セットのことです(Unicode標準ではこれを@dfn{符号化文字集合(coded
character
set)}と呼ぶ)。Emacsの各文字セットは、シンボルであるような名前をもちます。1つの文字が、任意の数の異なる文字セットに属することができますが、各文字セット内で異なるコードポイントをもつのが一般的でしょう。文字セットの例には@code{ascii}、@code{iso-8859-1}、@code{greek-iso8859-7}、@code{windows-1255}が含まれます。文字セット内で文字に割り当てられるコードポイントは、Emacs内のバッファーや文字列内で使用されるコードポイントとは、通常異なります。

@cindex @code{emacs}, a charset
@cindex @code{unicode}, a charset
@cindex @code{eight-bit}, a charset
  Emacsは、特別な文字セットをいくつか定義しています。文字セット@code{unicode}は、Emacsコードポイントが@code{0..#x10FFFF}の範囲の、すべての文字セットを含みます。文字セット@code{emacs}は、すべての@acronym{ASCII}、および非@acronym{ASCII}文字を含みます。最後に@code{eight-bit}文字セットは、8ビットrawバイトを含みます。テキスト内でrawバイトを見つけたときに、Emacsはこれを使用します。

@defun charsetp object
@var{object}は文字セットを命名するシンボルなら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@defvar charset-list
値は、すべての定義済み文字セットの名前のリストである。
@end defvar

@defun charset-priority-list &optional highestp
この関数は、すべての定義済み文字セットの優先順にソートされたリストをリターンする。@var{highestp}が非@code{nil}なら、この関数はもっとも優先度の高い文字セット1つをリターンする。
@end defun

@defun set-charset-priority &rest charsets
この関数は、@var{charsets}をもっとも高い優先度の文字セットにする。
@end defun

@defun char-charset character &optional restriction
この関数は、@var{character}が属する文字セットで、もっとも優先度の高い文字セットの名前をリターンする。ただし@acronym{ASCII}文字は例外であり、この関数は常に@code{ascii}をリターンする。

@var{restriction}が非@code{nil}なら、それは検索する文字セットのリストであること。かわりにコーディングシステムも指定でき、その場合はそのコーディングシステムによりサポートされている必要がある(@ref{Coding
Systems}を参照)。
@end defun

@c TODO: Explain the properties here and add indexes such as 'charset property'.
@defun charset-plist charset
この関数は、文字セット@var{charset}のプロパティをリターンする。たとえ@var{charset}がシンボルだったとしても、これはそのシンボルのプロパティリストと同じではない。文字セットプロパティにはドキュメント文字列、短い名前等、その文字セットに関する重要な情報が含まれる。
@end defun

@defun put-charset-property charset propname value
この関数は、@var{charset}のプロパティ@var{propname}に、与えられた@var{value}をセットする。
@end defun

@defun get-charset-property charset propname
この関数は、@var{charset}のプロパティ@var{propname}の値をリターンする。
@end defun

@deffn Command list-charset-chars charset
このコマンドは、文字セット@var{charset}内の文字のリストを表示する。
@end deffn

  Emacsは文字の内部的な表現と、その文字の特定の文字セット内でのコードポイントを相互に変換することができます。以下は、これらをサポートするための関数です。

@c FIXME: decode-char and encode-char accept and ignore an additional
@c argument @var{restriction}.  When that argument actually makes a
@c difference, it should be documented here.
@defun decode-char charset code-point
この関数は、@var{charset}内で@var{code-point}に割り当てられた文字を、Emacsの対応する文字にデコードして、それをリターンする。そのコードポイントの文字が@var{charset}に含まれなければ、値は@code{nil}である。@var{code-point}がLisp整数(@ref{Integer
Basics, most-positive-fixnum}を参照)に収まらない場合は、コンスセル@code{(@var{high}
.
@var{low})}として指定できるかもしれない。ここで@var{low}はその値の下位来る16ビット、@var{high}は上位16ビットである。
@end defun

@defun encode-char char charset
この関数は、@var{charset}内で文字@var{char}に割り当てられた、コードポイントをリターンする。結果がLisp整数に収まらない場合は、上述の@code{decode-char}の2つ目の引数のように、コンスセル@code{(@var{high}
.
@var{low})}としてリターンされる。@var{charset}が@var{char}にたいするコードポイントをもたなければ、値は@code{nil}である。
@end defun

  以下の関数は、文字セット内の文字の一部、全くすべてにたいして、特定の関数を適用するのに便利です。

@defun map-charset-chars function charset &optional arg from-code to-code
@var{charset}内の文字にたいして@var{function}を呼び出す。@var{function}は2つの引数で呼び出される。1つ目はコンスセル@code{(@var{from}
.
@var{to})}で、@var{from}と@var{to}は文字セット内に含まれる文字の範囲である。@var{arg}は、2つ目の引数として@var{function}に渡される。

デフォルトでは、@var{function}に渡されるコードポイントの範囲には@var{charset}内のすべての文字が含まれるが、オプション引数@var{from-code}および@var{to-code}により、それは@var{charset}の2つのコードポイント間にある文字範囲に制限される。@var{from-code}または@var{to-code}のいずれかが@code{nil}の場合のデフォルトは、@var{charset}のコードポイントの最初または最後である。
@end defun

@node Scanning Charsets
@section Scanning for Character Sets
@cindex scanning for character sets
@cindex character set, searching

  特定の文字が、どの文字セットに属するか調べられると便利なときがあります。これの用途の1つは、どのコーディングシステム(@ref{Coding
Systems}を参照)が問題となっているテキストすべてを表現可能か判断することです。他にも、そのテキストを表示するフォントの判断があります。

@defun charset-after &optional pos
この関数は、カレントバッファー内の位置@var{pos}にある文字を含む、
もっとも高い優先度の文字セットをリターンする。@var{pos}が省略または@code{nil}の場合のデフォルトは、ポイントのカレント値である。@var{pos}が範囲外なら、値は@code{nil}。
@end defun

@defun find-charset-region beg end &optional translation
この関数は、カレントバッファー内の位置@var{beg}から@var{end}の間の文字を含む、もっとも優先度の高い文字セットのリストをリターンする。

オプション引数が@var{translation}は、テキストのスキャンに使用するための変換テーブルを指定する(@ref{Translation of
Characters}を参照)。これが非@code{nil}なら、リージョン内の各文字はそのテーブルを通じて変換され、リターンされる値にはバッファーの実際の文字ではなく、変換された文字が記述される。
@end defun

@defun find-charset-string string &optional translation
この関数は、@var{string}内の文字を含む、もっとも優先度の高い文字セットのリストをリターンする。これは@code{find-charset-region}と似ているが、カレントバッファーの一部ではなく@var{string}のコンテンツに適用される点が異なる。
@end defun

@node Translation of Characters
@section Translation of Characters
@cindex character translation tables
@cindex translation tables

  @dfn{変換テーブル(translation
table)}とは？文字から文字へのマッピングを指定する、文字テーブルです(@ref{Char-Tables}を参照)。これらのテーブルはエンコーディング、デコーディング、および他の用地にも使用されます。独自に変換テーブルを指定するコーディングシステムも、いくつかあります。他のすべてのコーディングシステムに適用される、デフォルトの変換テーブルも存在します。

  変換テーブルには、余分のスロットが2つあります。1つ目のスロットは@code{nil}、または逆の変換を処理する変換テーブルです。2つ目のスロットは、変換する文字シーケンスを照合する際の、最大文字数です(以下の@code{make-translation-table-from-alist}の説明を参照)。

@defun make-translation-table &rest translations
この関数は、引数@var{translations}にもとづいて、変換テーブルをリターンする。@var{translations}の各要素は、@code{(@var{from}
. @var{to})}という形式のリストであること。これは@var{from}から@var{to}への、文字の変換を指示する。

各引数内の引数とフォームは順に処理され、もし前のフォームですでに@var{to}がたとえば@var{to-alt}に変換されていれば、@var{from}も@var{to-alt}に変換される。
@end defun

  デコードを行う間、その変換テーブルの変換は、通常のデコーディングの結果の文字に適用されます。あるコーディングシステムがプロパティ@code{:decode-translation-table}をもつなら、それは使用する変換テーブル、または順に適用するべき変換テーブルのリストを指定します(これはコーディングシステムの名前であるようなシンボルのプロパティではなく、@code{coding-system-get}がリターンするような、コーディングシステムのプロパティである。@ref{Coding
System Basics,, Basic Concepts of Coding
Systems}を参照されたい)。最後に、もし@code{standard-translation-table-for-decode}が非@code{nil}なら、結果となる文字はそのテーブルにより変換されます。

  エンコードを行う間は、その変換テーブルの変換はバッファー内の文字に適用され、変換結果は実際にエンコードされます。あるコーディングシステムがプロパティ@code{:encode-translation-table}をもつなら、それは使用する変換テーブル、または順に適用するべき変換テーブルのリストを指定します。加えて、もし変数@code{standard-translation-table-for-encode}が非@code{nil}なら、それは変換結果にたいして使用するべき変換テーブルを指定します。

@defvar standard-translation-table-for-decode
これはデコード用のデフォルトの変換テーブルである。あるコーディングシステムが独自に変換テーブルを指定する場合、この変数の値が非@code{nil}なら、それら独自のテーブル適用後に、この変数の変換テーブルが適用される。
@end defvar

@defvar standard-translation-table-for-encode
これはエンコード用のデフォルトの変換テーブルである。あるコーディングシステムが独自に変換テーブルを指定する場合、この変数の値が非@code{nil}なら、それら独自のテーブル適用後に、この変数の変換テーブルが適用される。
@end defvar

@c FIXME: This variable is obsolete since 23.1.  We should mention
@c that here or simply remove this defvar.  --xfq
@defvar translation-table-for-input
自己ソウニュ文字は、挿入前にこの変換テーブルを通じて変換が行われる。検索コマンドも、バッファー内の内容とより信頼性のある比較ができるように、このテーブルを通じて入力を変換する。

この変数は、セット時に自動的にバッファーローカルになる。
@end defvar

@defun make-translation-table-from-vector vec
この関数は、バイト(値は0から#xFF)から文字にマップする256要素の配列であるような@var{vec}から作成した変換テーブルをリターンする。未変換のバイトにたいする要素は、@code{nil}かもしれない。リターンされるテーブルは、余分な1つ目のスロットにそのマッピングを保持する変換テーブル、2つ目の余分なスロットに値@code{1}をもつ。

この関数は、各バイトを特定の文字にマップするような、プライベートなコーディングシステムを簡単に作成する手段を提供する。@code{define-coding-system}の@var{props}引数のプロパティ@code{:decode-translation-table}と@code{:encode-translation-table}に、リターンされるテーブルと、逆変換テーブルを指定できる。
@end defun

@defun make-translation-table-from-alist alist
この関数は@code{make-translation-table}と似ているが、シンプルな1体1の変換テーブルではなく、より複雑な変換テーブルをリターンする。@var{alist}の各要素は@code{(@var{from}
.
@var{to})}という形式をもち、ここで@var{from}および@var{to}は、文字または文字シーケンスを指定するベクターである。@var{from}が文字なら、その文字は@var{to}(文字または文字シーケンス)に変換される。@var{from}が文字のベクターならそのシーケンスは@var{to}に変換される。リターンされるテーブルは、1つ目の余分なスロットに逆のマッピングを行う変換テーブル、2つ目の余分なスロットには文字シーケンス@var{from}すべての最大長をもつ。
@end defun

@node Coding Systems
@section Coding Systems

@cindex coding system
  Emacsがファイルにたいして読み書きを行う際、およびEmacsがサブプロセスとテキストの送受信を行う際、通常は特定の@dfn{コーディングシステム(coding
system)}の指定にしたがって文字コード変換および行末変換を行います。

  コーディングシステムの定義は難解な問題であり、ここには記述しません。

@menu
* Coding System Basics::     基本的な概念。
* Encoding and I/O::         ファイル入出力関数がコーディングシステムを扱う方法。
* Lisp and Coding Systems::  コーディングシステム名を処理する関数。
* User-Chosen Coding Systems::  ユーザーにコーディングシステムの選択を求める。
* Default Coding Systems::   デフォルトの選択の制御。
* Specifying Coding Systems::  単一ファイル処理にたいして特定のコーディングシステムを要求する。
* Explicit Encoding::        入出力を伴わないテキストのエンコードおよびデコード。
* Terminal I/O Encoding::    端末入出力にたいするエンコーディングの使用。
@end menu

@node Coding System Basics
@subsection Basic Concepts of Coding Systems

@cindex character code conversion
  @dfn{文字コード変換(character code
conversion)}により、Emacs内部で使用される文字の内部表現と他のエンコーディングの間で、変換が行われます。Emacsは多くの異なるエンコーディングをサポートしており、それらは双方向に変換が可能です。たとえばLatin
1、Latin 2、Latin 3、Latin 4、Latin 5、およびいくつかのISO
2022の変種等のようなエンコーディングにたいして、テキストを双方向に変換できます。あるケースにおいては、同じ文字にたいしてEmacsは複数のエンコーディング候補をサポートします。たとえばキリル(ロシア語)のアルファベットにたいしてはISO、Alternativnyj、KOI8のように3つにコーディングシステムが存在します。

  コーディングシステムはそれぞれ特定の文字コード変換セットを指定しますが、@code{undecided}というコーディングシステムは特別です。これはそれぞれのファイルにたいして、そのファイルのデータにもとづいて発見的に選択が行われるように、選択を未指定のままにします。

  一般的に、コーディングシステムは可逆的な同一性を保証しません。あるコーディングシステムを使用してバイトシーケンスをデコードしてから、同じコーディングシステムで結果テキストをエンコードしても、異なるバイトシーケンスが生成される可能性があります。しかし、デコードされたオリジナルのバイトシーケンスとなることを保証するコーディングシステムもいくつかあります。以下にいくつかの例を挙げます:

@quotation
iso-8859-1、utf-8、big5、shift_jis、euc-jp
@end quotation

  バッファーテキストのエンコードと結果のデコードでも、オリジナルテキストの再生成に失敗する可能性があります。たとえば、その文字をサポートしないコーディングシステムで文字をエンコードした場合の結果は予測できず、したがって同じコーディングシステムを使用してそれをデコードしても、異なるテキストが生成されるでしょう。現在のところ、Emacsは未サポート文字のエンコーディングによる結果をエラーとして報告できません。

@cindex EOL conversion
@cindex end-of-line conversion
@cindex line end conversion
  @dfn{行末変換(end of line conversion:
改行変換)}は、ファイル内の行末を表すために、さまざまなシステム上で使用される3つの異なる慣例を扱います。GNUやUnixシステムで使用されるUnixの慣例では、LF文字(linefeed文字、改行とも呼ばれる)が使用されます。MS-WindowsやMS-DOSシステムで使用されるDOSの慣例では、行末にCR文字(carriage-return文字、復帰文字とも呼ばれる)とLF文字が使用されますMacの慣例ではCR文字だけが使用されます(これはOS
X以前のMacintoshシステムで使用されていた慣例である)。

@cindex base coding system
@cindex variant coding system
  @code{latin-1}のような@dfn{ベースコーディングシステム(base coding systems:
基本コーディングシステム)}では、データにもとづいて選択されるよう、行末変換は未指定となっています。@code{latin-1-unix}、@code{latin-1-dos}、@code{latin-1-mac}のような@dfn{バリアントコーディングシステム(variant
coding systems:
変種コーディングシステム)}では、行末変換を明示的に指定します。ほとんどのベースコーディングシステムは@samp{-unix}、@samp{-dos}、@samp{-mac}を追加した形式の、3つの対応する変種をもちます。

@vindex raw-text@r{ coding system}
  @code{raw-text}は、文字コード変換を抑制して、このコーディングシステムでvisitされたバッファーがユニバイトバッファーとなる点において、特殊なコーディングシステムです。歴史的な理由により、このコーディングシステムによりユニバイトおよびマルチバイト両方のテキストを保存できます。マルチバイトテキストのエンコードに@code{raw-text}を使用した際は、1文字コード変換を行います。8ビット文字は、1バイトの外部表現に変換されます。@code{raw-text}は通常のようにデータにより判断できるように行末変換を指定せず、通常のように行末変換を指定する3つの変種をもちます。

@vindex no-conversion@r{ coding system}
@vindex binary@r{ coding system}
  @code{no-conversion}(とエイリアスの@code{binary})は、@code{raw-text-unix}と等価です。これは文字コードおよび行末にたいする変換をいずれもしてくださいしません。

@vindex emacs-internal@r{ coding system}
@vindex utf-8-emacs@r{ coding system}
  @code{utf-8-emacs}は、データがEmacsの内部エンコーディング(@ref{Text
Representations}を参照)で表されることを指定するコーディングシステムです。コード変換が何も発生しない点で、これは@code{raw-text}と似ていますが、結果がマルチバイトデータである点が異なります。The
name  @code{emacs-internal}という名前は、@code{utf-8-emacs}にたいするエイリアスです。

@defun coding-system-get coding-system property
この関数は、コーディングシステム@var{coding-system}の、指定されたプロパティをリターンする。コーディングシステムのプロパティのほとんどは内部的な目的のために存在するが、@code{:mime-charset}については有用と思うかもしれない。このプロパティの値は、そのコーディングシステムが読み書きできる文字コードにたいしてMIME内で使用される名前である。以下に例を示す:

@example
(coding-system-get 'iso-latin-1 :mime-charset)
     @result{} iso-8859-1
(coding-system-get 'iso-2022-cn :mime-charset)
     @result{} iso-2022-cn
(coding-system-get 'cyrillic-koi8 :mime-charset)
     @result{} koi8-r
@end example

@code{:mime-charset}プロパティの値は、そのコーディングシステムにたいするエイリアスとしても定義されている。
@end defun

@cindex alias, for coding systems
@defun coding-system-aliases coding-system
この関数は、@var{coding-system}のエイリアスのリストをリターンする。
@end defun

@node Encoding and I/O
@subsection Encoding and I/O

  コーディングシステムの主な目的は、ファイルの読み込みと書き込みへの使用です。関数@code{insert-file-contents}はファイルデータのデコードにコーディングシステムを使用し、@code{write-region}はバッファーコンテンツのエンコードにコーディングシステムを使用します。

  使用するコーディングシステムは明示的(@ref{Specifying Coding
Systems}を参照)、またはデフォルトメカニズム(@ref{Default Coding
Systems}を参照)を使用により暗黙的に指定できます。しかしきれらの手法は、何を行うかを完全には指定しないかもしれません。たとえば、これらはデータから文字コード変換を行わない@code{undefined}のようなコーディングシステムを選択するかもしれません。このような場合、I/O処理はコーディングシステム選択により、その処理を完了します。後でどのコーディングシステムが選択されたか調べたいことが、頻繁にあるでしょう。

@defvar buffer-file-coding-system
このバッファーローカル変数は、バッファーの保存、および@code{write-region}によるバッファー部分のファイルへの書き出しに使用されるコーディングシステムを記録する。書き込まれるテキストが、この変数で指定されたコーディングシステムを使用して安全にエンコードできない場合、これらの操作は関数@code{select-safe-coding-system}を呼び出すことにより、代替となるエンコーディングを選択する(@ref{User-Chosen
Coding
Systems}を参照)。異なるエンコーディングの選択が、ユーザーによるコーディングシステムの指定を要するなら、@code{buffer-file-coding-system}は新たに選択されたコーディングシステムに更新される。

@code{buffer-file-coding-system}は、サブプロセスへのテキスト送信に@emph{影響しない}。
@end defvar

@defvar save-buffer-coding-system
この変数は、(@code{buffer-file-coding-system}をオーバーライドして)バッファーを保存するためのコーディングシステムを指定する。これは@code{write-region}には使用されないことに注意。

あるコマンドがバッファーを保存するために@code{buffer-file-coding-system}(または@code{save-buffer-coding-system})の使用を開始して、そのコーディングシステムがバッファー内の実際のテキストを処理できなければ、(@code{select-safe-coding-system}を呼び出すことにより)そのコマンドは他のコーディングシステムの選択をユーザーに求める。これが発生した後は、コマンドはユーザー指定のコーディングシステムを表すために、@code{buffer-file-coding-system}の更新も行う。
@end defvar

@defvar last-coding-system-used
ファイルおよびサブプロセスにたいするI/O操作は、使用したコーディングシステムの名前を、この変数にセットする。明示的にエンコードとデコードを行う関数(@ref{Explicit
Encoding}を参照)も、この変数をセットする。

@strong{警告:}
サブプロセス出力の受信によりこの変数がセットされるため、この変数はEmacsがwaitしているとくは常に変更され得る。したがって、興味対象となる値を格納する関数呼び出し後は、間を空けずにその値をコピーするべきである。
@end defvar

  変数@code{selection-coding-system}はウィンドウシステムにたいして、選択(selection)をエンコードする方法を指定します。@ref{Window
System Selections}を参照してください。

@defvar file-name-coding-system
変数@code{file-name-coding-system}は、ファイル名のエンコーディングに使用するコーディングシステムを指定する。Emacsは、すべてのファイル操作にたいして、ファイル名のエンコードにそのコーディングシステムを使用する。@code{file-name-coding-system}が@code{nil}なら、Emacsは選択された言語環境(language
environment)により決定された、デフォルトのコーディングシステムを使用する。デフォルト言語環境では、ファイル名に含まれるすべての非@acronym{ASCII}文字は、特別にエンコードされない。これらはEmacsの内部表現を使用して、ファイルシステム内で表される。
@end defvar

  @strong{警告:}
Emacsのセッション中に@code{file-name-coding-system}(または言語環境)を変更した場合、以前のコーディングシステムを使用してエンコードされた名前をもつファイルをvisitしていると、新たなコーディングシステムでは異なるように扱われるので、問題が発生し得る。これらのvisitされたファイル名でこれらのバッファーの保存を試みると、保存により間違ったファイル名が使用されるか、エラーとなるかもしれない。そのような問題が発生したら、そのバッファーにたいして新たなファイル名を指定するために、@kbd{C-x
C-w}を使用すること。

@cindex file-name encoding, MS-Windows
  Windows 2000以降では、EmacsはOSに渡すファイル名にデフォルトでUnicode
APIを使用するため、@code{file-name-coding-system}の値は大部分が無視される。Lispレベルでファイル名のエンコードまたはデコードを必要とするLispアプリケーションは、@code{system-type}が@code{windows-nt}のときは、@code{utf-8}をコーディングシステムに使用するべきである。UTF-8でエンコードされたファイル名から、OSと対話するために適したエンコーディングへの変換は、Emacsにより内部的に処理される。

@node Lisp and Coding Systems
@subsection Coding Systems in Lisp

  以下はコーディングシステムと連携するLisp機能です:

@cindex list all coding systems
@defun coding-system-list &optional base-only
この関数は、すべてのコーディングシステムの名前(シンボル)をリターンする。@var{base-only}が非@code{nil}なら、値にはベースコーディングシステムだけが含まれる。それ以外ならエイリアス、およびバリアントコーディングシステムも同様に含まれる。
@end defun

@defun coding-system-p object
この関数は、@var{object}がコーディングシステムの名前、または@code{nil}なら、@code{t}をリターンする。
@end defun

@cindex validity of coding system
@cindex coding system, validity check
@defun check-coding-system coding-system
この関数は、@var{coding-system}の有効性をチェックする。有効なら@var{coding-system}をリターンする。@var{coding-system}が@code{nil}なら、この関数は@code{nil}をリターンする。それ以外の値にたいしては、@code{error-symbol}が@code{coding-system-error}であるようなエラーをシグナルする(@ref{Signaling
Errors, signal}を参照)。
@end defun

@cindex eol type of coding system
@defun coding-system-eol-type coding-system
この関数は、行末(@dfn{eol}とも言う)を@var{coding-system}で使用されるタイプに変換する。@var{coding-system}が特定のeol変換を指定する場合、リターン値は0、1、2で、それらは順に@code{unix}、@code{dos}、@code{mac}を意味する。@var{coding-system}が明示的にeol変換を指定しなければ、リターン値は以下のようにそれぞれが可能なeol変換タイプをもつようなコーディングシステムのベクターである:

@lisp
(coding-system-eol-type 'latin-1)
     @result{} [latin-1-unix latin-1-dos latin-1-mac]
@end lisp

@noindent
この関数がベクターをリターンしたら、Emacsはテキストのエンコードやデコードプロセスの一部として、使用するeol変換を決定するだろう。デコードでは、テキストの行末フォーマットは自動検知され、eol変換はそれに適合するようセットされる(DOSスタイルのCRLFフォーマットは暗黙でeol変換に@code{dos}をセットする)。エンコードにたいしては、適切なデフォルトコーディングシステム(@code{buffer-file-coding-system}にたいする@code{buffer-file-coding-system}のデフォルト値)、または配下にあるプラットフォームにたいして適切なデフォルトeol変換が採用される。
@end defun

@cindex eol conversion of coding system
@defun coding-system-change-eol-conversion coding-system eol-type
この関数は、@var{coding-system}と類似するが、@code{eol-type}で指定されたeol変換の異なるコーディングシステムをリターンする。@var{eol-type}は@code{unix}、@code{dos}、@code{mac}、または@code{nil}であること。これが@code{nil}なら、リターンされるコーディングシステムは、データのeol変換により決定される。

@var{eol-type}は@code{unix}、@code{dos}、@code{mac}を意味する0、1、2でもよい。
@end defun

@cindex text conversion of coding system
@defun coding-system-change-text-conversion eol-coding text-coding
この関数は、@var{eol-coding}の行末変換と、@var{text-coding}のテキスト変換を使用するコーディングシステムをリターンする。@var{text-coding}が@code{nil}なら、これは@code{undecided}、または@var{eol-coding}に対応するバリアントの1つをリターンする。
@end defun

@cindex safely encode region
@cindex coding systems for encoding region
@defun find-coding-systems-region from to
この関数は、@var{from}と@var{to}の間のテキストのエンコードに使用可能な、コーディングシステムのリストをリターンする。このリスト内のすべてのリストは、そのテキスト範囲内にあるすべてのマルチバイト文字を、安全にエンコードできる。

そのテキストがマルチバイト文字を含まれなければ、この関数はリスト@code{(undecided)}をリターンする。
@end defun

@cindex safely encode a string
@cindex coding systems for encoding a string
@defun find-coding-systems-string string
この関数は、@var{string}のテキストのエンコードに使用可能な、コーディングシステムのリストをリターンする。このリスト内のすべてのリストは、@var{string}にあるすべてのマルチバイト文字を、安全にエンコードできる。そのテキストがマルチバイト文字を含まれなければ、この関数はリスト@code{(undecided)}をリターンする。
@end defun

@cindex charset, coding systems to encode
@cindex safely encode characters in a charset
@defun find-coding-systems-for-charsets charsets
この関数は、リスト@var{charsets}内のすべての文字セットのエンコードに使用可能な、コーディングシステムのリストをリターンする。
@end defun

@defun check-coding-systems-region start end coding-system-list
この関数は、リスト@code{coding-system-list}内のコーディングシステムが、@var{start}と@var{end}の間のリージョン内にあるすべての文字をエンコード可能かどうかをチェックする。このリスト内のすべてのコーディングシステムが指定されたテキストをエンコード可能なら、この関数は@code{nil}をリターンする。ある文字をエンコードできないコーディングシステムがある場合は、各要素が@code{(@var{coding-system1}
@var{pos1} @var{pos2}
@dots{})}という形式のalistが値となる。これは@var{coding-system1}が、バッファーの位置@var{pos1}、@var{pos2}、@enddots{}にある文字をエンコードできないことを意味する。

@var{start}は文字列かもしれず、その場合@var{end}は無視され、リターン値はバッファー位置のかわりに文字列のインデックスを参照することになる。
@end defun

@defun detect-coding-region start end &optional highest
この関数は、@var{start}から@var{end}のテキストのデコードに適したコーディングシステムを選択する。このテキストはバイトシーケンス、すなわちユニバイトテキスト、@acronym{ASCII}のみのマルチバイトテキスト、8ビット文字のシーケンスであること(@ref{Explicit
Encoding}を参照)。

この関数は通常はスキャンしたテキストのデコーディングを処理可能な、コーディングシステムのリストをリターンする。これらのコーディングシステムは優先度降順でリストされる。しかし@var{highest}が非@code{nil}なら、リターン値はもっとも高い優先度のコーディングシステムただ1つとなる。

リージョンにISO-2022の@code{ESC}のようなISO-2022制御文字を除いて@acronym{ASCII}文字だけが含まれる場合、値は@code{undecided}、@code{(undecided)}、またはテキストから推論可能ならeol変換を指定するバリアントとなる。

リージョンにnullバイトが含まれる場合は、あるコーディングシステムによりエンコードされたテキストがリージョン内に含まれる場合でも、値は@code{no-conversion}となる。
@end defun

@defun detect-coding-string string &optional highest
この関数は@code{detect-coding-region}と似ているが、バッファー内のバイトのかわりに@var{string}のコンテンツを処理する点が異なる。
@end defun

@cindex null bytes, and decoding text
@defvar inhibit-null-byte-detection
この変数が非@code{nil}値をもつなら、リージョンや文字列のエンコーディング検出時に、nullバイトを無視する。これによりIndexノードをもつInfoファイルのように、nullバイトを含むテキストのエンコーディングを正しく検出できる。
@end defvar

@defvar inhibit-iso-escape-detection
この変数が非@code{nil}値をもつなら、リージョンや文字列のエンコーディング検出時に、ISO-2022エスケープシーケンスを無視する。その結果、これまでいくつかのISO-2022エンコーディングにおいてエンコード済みと検出されていたテキストがなくなり、バッファー内ですべてのエスケープシーケンスが可視になる。@strong{警告:}
この変数の使用には特に注意を払うこと。なぜならEmacsディストリビューション内で多くのファイルがISO-2022エンコーディングを使用するからである。
@end defvar

@cindex charsets supported by a coding system
@defun coding-system-charset-list coding-system
この関数は、@var{coding-system}がサポートする文字セット(@ref{Character
Sets}を参照)のリストをリターンする。リストすべき文字セットを非常に多くサポートするいくつかのコーディングシステムでは、特別な値がリストされる:
@itemize @bullet
@item
@var{coding-system}がすべてのEmacs文字をサポートするなら、値は@code{(emacs)}。
@item
@var{coding-system}がすべてのUnicode文字をサポートするなら、値は@code{(unicode)}。
@item
@var{coding-system}がすべてのISO-2022文字をサポートするなら、値は@code{iso-2022}。
@item
@var{coding-system}がEmacsバージョン21(Unicodeサポートの内部的な実装以前)で使用される内部的コーディングシステム内のすべての文字をサポートするなら、値は@code{emacs-mule}。
@end itemize
@end defun

  サブプロセスへの入出力に使用されるコーディングシステムのチェックやセットの方法については、@ref{Coding systems for a
subprocess,, Process
Information}、特に関数@code{process-coding-system}および@code{set-process-coding-system}の説明を参照してください。

@node User-Chosen Coding Systems
@subsection User-Chosen Coding Systems

@cindex select safe coding system
@defun select-safe-coding-system from to &optional default-coding-system accept-default-p file
この関数は、指定されたテキストをエンコードするために、必要ならユーザーに選択を求めて、コーディングシステムを選択する。指定されるテキストは、通常はカレントバッファーの@var{from}と@var{to}の間のテキストである。@var{from}が文字列なら、その文字列はエンコードするテキストを指定し、@var{to}は無視される。

指定されたテキストにrawバイト(@ref{Text
Representations}を参照)が含まれる場合、@code{select-safe-coding-system}はそのエンコーディングに@code{raw-text}を提案する。

@var{default-coding-system}が非@code{nil}なら、それは試行すべき最初のコーディングシステムである。それがテキストを処理できるなら、@code{select-safe-coding-system}はそのコーディングシステムをリターンする。これはコーディングシステムのリストの可能性もある。その場合、この関数はそれらを1つずつ試みる。それらをすべて試した後に、(@code{undecided}以外なら)カレントバッファーの@code{buffer-file-coding-system}の値、次に@code{buffer-file-coding-system}のデフォルト値、最後にユーザーがもっとも好むコーディングシステム(コマンド@code{prefer-coding-system}でセットできる最優先されるコーディングシステム)を試みる(@ref{Recognize
Coding,, Recognizing Coding Systems, emacs, The GNU Emacs Manual}を参照)。

これらのうちいずれかのコーディングシステムが指定されたテキストすべてを安全にエンコード可能なら、@code{select-safe-coding-system}はそれを選択およびリターンする。それ以外なら、コーディングシステムのリストからすべてのテキストをエンコードできるコーディングシステムの選択をユーザーに求めて、ユーザーの選択をリターンする。

@var{default-coding-system}は、最初の要素がtで、他の要素がコーディングシステムであるようなリストかもしれない。その場合、もしリスト内にテキストを処理できるコーディングシステムがなければ、@code{select-safe-coding-system}は上述した3つの代替えいずれを試みることなく、即座にユーザーに問い合わせる。

オプション引数@var{accept-default-p}が非@code{nil}なら、それはユーザーとの対話なしで選択されたコーディングシステムが許容できるかどうかを判断する関数であること。@code{select-safe-coding-system}は、選択されたコーディングシステムのベースコーディングシステムを唯一の引数として、この関数を呼び出す。@var{accept-default-p}が@code{nil}うちリターンしたら、@code{select-safe-coding-system}は黙って選択されたコーディングシステムを拒絶して、可能な候補リストからコーディングシステムの選択をユーザーに求める。

@vindex select-safe-coding-system-accept-default-p
変数@code{select-safe-coding-system-accept-defaultf-p}が非@code{nil}なら、それは1つの引数をとる関数であること。これは@var{accept-default-p}引数に与えられた値をオーバーライドすることにより、@var{accept-default-p}のかわりに使用される。

最後のステップとして、選択されたコーディングシステムをリターンする前に、@code{select-safe-coding-system}は、もしリージョンのコンテンツがファイルから読み込まれたものだったとしたなら選択されたであろうコーディングシステムと、そのコーディングシステムが一致するかどうかをチェックする(異なるなら、その後の再visitと編集でファイル内のデータ汚染が起こり得る)。通常、@code{select-safe-coding-system}はこの目的のためのファイルとして@code{buffer-file-name}を使用するが、@var{file}が非@code{nil}なら、かわりにそのファイルをかわりに使用する(これは@code{write-region}、および類似の関数に関連し得る)。明らかな不一致が検出された場合、@code{select-safe-coding-system}はそのコーディングシステムを選択する前に、ユーザーに問い合わせる。
@end defun

  以下の2つの関数は、補完つきでユーザーにコーディングシステムの選択を求めるために使用できます。@ref{Completion}を参照してください。

@defun read-coding-system prompt &optional default
この関数は、文字列@var{prompt}をプロンプトにミニバッファーを使用してコーディングシステムを読み取り、そのコーディングシステムの名前をシンボルとしてリターンする。@var{default}は、ユーザーの入力が空の場合にリターンするべきコーディングシステムを指定する。これはシンボルまたは文字列であること。
@end defun

@defun read-non-nil-coding-system prompt
この関数は、文字列@var{prompt}をプロンプトにミニバッファーを使用してコーディングシステムを読み取り、そのコーディングシステムの名前をシンボルとしてリターンする。ユーザーが空の入力を試みると、再度ユーザーに問い合わせを行う。@ref{Coding
Systems}を参照のこと。
@end defun

@node Default Coding Systems
@subsection Default Coding Systems
@cindex default coding system
@cindex coding system, automatically determined

  このセクションでは、特定のファイルや特定のサブプロセス実行時のデフォルトコーディングシステムを指定する変数、およびそれらへアクセスするためのI/O処理が使用する関数について説明します。

  これらの変数は、希望するデフォルトにそれらすべてを一度セットして、その後は再びそれを変更しないというアイデアにもとづいています。Lispプログラム内の特定の処理で特定のコーディングシステムを指定するために、これらの変数を変更しないでください。かわりに@code{coding-system-for-read}および@code{coding-system-for-write}を使用して、それらをオーバーライドしてください(@ref{Specifying
Coding Systems}を参照)。

@cindex file contents, and default coding system
@defopt auto-coding-regexp-alist
この変数は、テキストパターンと対応するコーディングシステムのalistである。要素はそれぞれ@code{(@var{regexp}
.
@var{coding-system})}という形式をもつ。冒頭の数キロバイトが@var{regexp}にマッチするファイルは、そのコンテンツをバッファーに読み込む際は、@var{coding-system}によりデコードされる。このalist内のセッティングは、ファイル内の@code{coding:}タグ、および@code{file-coding-system-alist}(以下参照)の内容より優先される。Emacsが自動的にBabylフォーマットのメールファイルを認識して、コード変換なしでそれらを読み取るよう、デフォルト値がセットされている。
@end defopt

@cindex file name, and default coding system
@defopt file-coding-system-alist
この変数は、特定のファイルの読み書きに使用するコーディングシステムを指定するalistである。要素はそれぞれ@code{(@var{pattern}
.
@var{coding})}という形式をもち、@var{pattern}は特定のファイル名にマッチする正規表現である。この要素は@var{pattern}にマッチするファイル名に適用される。

要素の@sc{cdr}となる@var{coding}はコーディングシステム、2つのコーディングシステムを含むコンスセル、または関数名(関数定義をもつシンボル)であること。@var{coding}がコーディングシステムなら、そのコーディングシステムはファイルの読み込みと書き込みの両方で使用される。@var{coding}が2つのコーディングシステムを含むコンスセルなら、@sc{car}はデコード用のコーディングシステム、@sc{cdr}はエンコード用のコーディングシステムを指定する。

@var{coding}が関数名なら、それは@code{find-operation-coding-system}に渡されたすべての引数からなるリストを唯一の引数とする関数であること。これはコーディングシステム、または2つのコーディングシステムを含むコンスセルをリターンしなければならない。この値は上記と同じ意味をもつ。

@var{coding}(または上記関数のリターン値)が@code{undecided}なら、通常のコード検出が行われる。
@end defopt

@defopt auto-coding-alist
この変数は、特定のファイルの読み書きに使用するコーディングシステムを指定するalistである。この変数の形式は@code{file-coding-system-alist}の形式と似ているが、後者と異なるのは、この変数がファイル内の@code{coding:}タグより優先されることである。
@end defopt

@cindex program name, and default coding system
@defvar process-coding-system-alist
この変数は、何のプログラムがサブプロセス内で実行中かによって、そのサブプロセスにたいしてどのコーディングシステムを使用するかを指定するalistである。これは@code{file-coding-system-alist}と同じように機能するが、@var{pattern}がそのサブプロセスを開始するために使用されたプログラム名にたいしてマッチされる点が異なる。コーディングシステム、またはalist内で指定されたコーディングシステムは、そのサブプロセスへのI/Oに使用されるコーディングシステムの初期化に使用されるが、@code{set-process-coding-system}を使用して後から他のコーディングシステムを指定できる。
@end defvar

  @strong{警告:}
データからコーディングシステムを判断する@code{undecided}のようなコーディングシステムは、非同期のサブプロセスでは完全な信頼性をもって機能はしない。これはEmacsが非同期サブプロセスの出力を、到着によりバッチ処理するためである。そのコーディングシステムが文字コード変換、または行末変換を未指定にしておくと、Emacsは一度に1バッチから正しい変換の検出を試みなければならず、これは常に機能するとは限らない。

  したがって非同期サブプロセスでは、可能なら文字コード変換と行末変換の両方を判断するコーディングシステム、つまり@code{undecided}や@code{latin-1}ではなく@code{latin-1-unix}のようなコーディングシステムを使用すること。

@cindex port number, and default coding system
@cindex network service name, and default coding system
@defvar network-coding-system-alist
この変数は、ネットワークストリームに使用するコーディングシステムを指定するalistである。これは@code{file-coding-system-alist}と同じように機能するが、要素内の@var{pattern}がポート番号、または正規表現かもしれない点が異なる。正規表現なら、そのネットワークストリームのオープンに使用されたネットワークサービス名にたいしてマッチされる。
@end defvar

@defvar default-process-coding-system
この変数は、他に何を行うか指定されていない際に、サブプロセス(とネットワークストリーム)への入出力に使用するコーディングシステムを指定する。

値は、@code{(@var{input-coding}
.
@var{output-coding})}という形式のコンスセルであること。ここで@var{input-coding}はサブプロセスからの入力、@var{output-coding}はサブプロセスへの出力に適用される。
@end defvar

@cindex default coding system, functions to determine
@defopt auto-coding-functions
この変数は、ファイルのデコードされていないコンテンツにもとづいて、ファイルにたいするコーディングシステムの判断を試みる関数のリストを保持する。

このリスト内の各関数は、カレントバッファー内のテキストを調べるように、ただしいいかなる方法にせよそれを変更しないよう記述されるべきである。そのバッファーは、ファイルの一部であるデコードされていないテキストを含むだろう。各関数はポイントを始点に何文字を調べる可を告げる、唯一の引数@var{size}をとること。関数が、そのファイルにたいするコーディングシステムの決定に成功したら、そのコーディングシステムをリターンすること。それ以外は@code{nil}をリターンするべきである。

ファイルに@samp{coding:}タグがある場合は、それが優先されるので、これらの関数が呼び出されることはないだろう。
@end defopt

@defun find-auto-coding filename size
この関数は、@var{filename}に適するコーディングシステムの判定を試みる。これは、上記で説明した変数により指定されたルールのいずれかにマッチするまで、それらの変数を順に使用して、ファイルをvisitするバッファーを調べる。そして@code{(@var{coding}
.
@var{source})}という形式のコンスセルをリターンする。ここで@var{coding}は使用するコーディングシステム、@var{source}はは@code{auto-coding-alist}、@code{auto-coding-regexp-alist}、@code{:coding}、@code{auto-coding-functions}のいずれかであるようなシンボルで、マッチングルールとして供されるルールを示す。値@code{:coding}は、ファイル内の@code{coding:}タグによりコーディングシステムが指定されたことを意味する(@ref{Specify
Coding,, coding tag, emacs, The GNU Emacs
Manual}を参照)。マッチングルールを調べる順序は@code{auto-coding-alist}、@code{auto-coding-regexp-alist}、@code{coding:}、@code{auto-coding-functions}の順である。マッチングルールが見つからなければ、この関数は@code{nil}をリターンする。

2つ目の引数@var{size}は、ポイントの後のテキストの文字単位のサイズである。この関数は、ポイントの後の@var{size}文字のテキストだけを調べる。@code{coding:}タグが置かれる箇所としてはファイルの先頭2行が考えられる箇所の1つなので、通常はバッファーの先頭位置で、この関数を呼び出すべきである。その場合、@var{size}はそのバッファーのサイズであること。
@end defun

@defun set-auto-coding filename size
この関数は、ファイル@var{filename}に適するコーディングシステムをリターンする。これはコーディングシステムを探すために、@code{find-auto-coding}を使用する。コーディングシステムを決定できなかったら、この関数は@code{nil}をリターンする。引数@var{size}の意味は、@code{find-auto-coding}と同様。
@end defun

@defun find-operation-coding-system operation &rest arguments
この関数は、@var{operation}を@var{arguments}で行う際に、(デフォルトで)使用するコーディングシステムをリターンする。値は以下の形式である:

@example
(@var{decoding-system} . @var{encoding-system})
@end example

1つ目の要素@var{decoding-system}はデコード(@var{operation}がデコードを行う場合)、@var{encoding-system}はエンコード(@var{operation}がエンコードを行う場合)に使用するコーディングシステムである。

引数@var{operation}はシンボルで@code{write-region}、@code{start-process}、@code{call-process}、@code{call-process-region}、@code{insert-file-contents}、@code{open-network-stream}のいずれかであること。これらは文字コード変換と行末変換を行うことができる、EmacsのI/Oプリミティブの名前である。

残りの引数は、対応するI/Oプリミティブに与えられる引数と同じであること。そのプリミティブに応じて、これらの引数のうち1つが@dfn{ターゲット}として選択される。たとえば@var{operation}がファイルI/Oなら、ファイル名を指定する引数がターゲットである。サブプロセス用のプリミティブでは、プロセス名がターゲットになる。@code{open-network-stream}では、サービス名またはポート番号がターゲットである。

@var{operation}に応じて、この関数は@code{file-coding-system-alist}、@code{process-coding-system-alist}、@code{network-coding-system-alist}の中からターゲットを探す。このalist内でターゲットが見つかったら、@code{find-operation-coding-system}はalist内のassociation(連想:
キーと連想値からなるコンスセル)をリターンし、それ以外は@code{nil}をリターンする。

@var{operation}が@code{insert-file-contents}なら、ターゲットに対応する引数は、@code{(@var{filename}
.
@var{buffer})}という形式のコンスセルだろう。この場合、@var{filename}は@code{file-coding-system-alist}内で照合されるファイル名であり、@var{buffer}はそのファイルの(デコードされていない)コンテンツを含むバッファーである。@code{file-coding-system-alist}がこのファイルにたいして呼び出す関数を指定していて、かつ(通常行われるように)ファイルのコンテンツを調べる必要があるなら、ファイルを読み込むかわりに@var{buffer}のコンテンツを調べるべきである。
@end defun

@node Specifying Coding Systems
@subsection Specifying a Coding System for One Operation
@cindex specify coding system
@cindex force coding system for operation
@cindex coding system for operation

  変数@code{coding-system-for-read}および/または@code{coding-system-for-write}をバインドすることにより、特定の操作にたいしてコーディングシステムを指定できます。

@defvar coding-system-for-read
この変数が非@code{nil}なら、それはファイルの読み込み、または同期サブプロセスプロセスからの入力にたいして使用する、コーディングシステムを指定する。

これは非同期サブプロセスやネットワークストリームにも適用されるが、その方法は異なる。サブプロセス開始時、またはネットワークストリームオープン時の@code{coding-system-for-read}の値は、サブプロセスまたはネットワークストリームにたいして入力のデコードメソッドを指定する。そのサブプロセスまたはネットワークストリームにたいして、それがオーバーライドされるまで、それが使用され続ける。

特定のI/O操作にたいして@code{let}でバインドするのが、この変数の正しい使い方である。この変数のグローバル値は常に@code{nil}であり、他の値にグローバルにセットするべきではない。以下は、この変数の正しい使用例である:

@example
;; @r{文字コード変換なしでファイルを読み込む}
(let ((coding-system-for-read 'no-conversion))
  (insert-file-contents filename))
@end example

この変数の値が非@code{nil}のときは@code{file-coding-system-alist}、@code{process-coding-system-alist}、@code{network-coding-system-alist}を含む、入力にたいして使用するコーディングシステムを指定するすべてのメソッドより、この変数が優先される。
@end defvar

@defvar coding-system-for-write
これは@code{coding-system-for-read}と同じように機能するが、入力ではなく出力に適用される点が異なる。これはファイルへの書き込み、同様にサブプロセスおよびネットワークストリームへの出力の送信にも適用される。

単一の操作が@code{call-process-region}や@code{start-process}のように、入力と出力の両方を行う際は、@code{coding-system-for-read}と@code{coding-system-for-write}の両方がそれに影響する。
@end defvar

@defopt inhibit-eol-conversion
この変数が非@code{nil}なら、どのコーディングシステムが指定されたかに関わらず、行末変換は何も行われない。これはEmacsすべてのI/Oおよびサブプロセスにたいするプリミティブ、および明示的なエンコード関数(@ref{Explicit
Encoding}を参照)とデコード関数に適用される。
@end defopt

@cindex priority order of coding systems
@cindex coding systems, priority
  ある操作にたいして、固定された1つのコーディングシステムではなく、複数のコーディングシステムを選択する必要があることが、ときおりあります。Emacsでは、使用するコーディングシステムにたいして優先順位を指定できます。これは、@code{find-coding-systems-region}(@ref{Lisp
and Coding Systems}を参照)のような関数によりリターンされるコーディングシステムのリストのソート順に影響します。

@defun coding-system-priority-list &optional highestp
この関数は、コーディングシステムのカレント優先順に、コーディングシステムのリストをリターンする。オプション引数@var{highestp}が非@code{nil}なら、それはもっとも高い優先度のコーディングシステムだけをリターンすることを意味する。
@end defun

@defun set-coding-system-priority &rest coding-systems
この関数は、コーディングシステムの優先リストの先頭に@var{coding-systems}を置き、それらを他のコーディングシステムすべてより高い優先度とする。
@end defun

@defmac with-coding-priority coding-systems &rest body@dots{}
このマクロは、@var{coding-systems}をコーディングシステム優先リスト先頭に置いて、@code{progn}(@ref{Sequencing,
progn}を参照)が行うように、@var{body}を実行する。@var{coding-systems}は、@var{body}実行中に選択するコーディングシステムのリストであること。
@end defmac

@node Explicit Encoding
@subsection Explicit Encoding and Decoding
@cindex encoding in coding systems
@cindex decoding in coding systems

  Emacs内外へテキストを転送するすべての操作は、そのテキストをエンコードまたはデコードする能力をもっています。このセクション内の関数を使用して、テキストを明示的にエンコードあるいはデコードすることもできます。

  エンコード結果およびデコーディングへの入力は、通常のテキストではありません。これらは理論的には一連のバイト値から構成され、すなわち一連の@acronym{ASCII}文字と8ビット文字から構成されます。ユニバイトのバッファーおよび文字列では、これらの文字は0から#xFF(255)の範囲のコードをもちます。マルチバイトのバッファーおよび文字列では、8ビット文字は#xFFより大きい文字コードをもちますが(@ref{Text
Representations}を参照)、そのようなテキストのエンコードやデコード時、Emacsは透過的にそれらを単一バイト値に変換します。

  コンテンツを明示的にデコードできるように、バイトシーケンスとしてバッファーにファイルを読み込むには、@code{insert-file-contents-literally}(@ref{Reading
from
Files}を参照)を使用するのが通常の方法です。あるいは@code{find-file-noselect}でファイルをvisitする際、引数@var{rawfile}に非@code{nil}を指定することもできます。これらのメソッドの結果は、ユニバイトバッファーになります。

  テキストを明示的にエンコードした結果であるバイトシーケンスは、たとえばそれを@code{write-region}(@pxref{Writing to
Files})で書き込み、@code{coding-system-for-write}を@code{no-conversion}にバインドすることによりエンコードを抑制する等、それをファイルまたはプロセスへコピーするのが、通常の使い方です。

  以下は、エンコードまたはデコードを明示的に行う関数です。エンコード関数とはバイトシーケンスを生成し、デコード関数とはバイトシーケンスを操作する関数のことを意味します。これらの関数はすべて、テキストプロパティを破棄します。これらは、自身が使用したコーディングシステムを、正確に@code{last-coding-system-used}することも行います。

@deffn Command encode-coding-region start end coding-system &optional destination
このコマンドは、@var{start}から@var{end}のテキストを、コーディングシステム@var{coding-system}でエンコードする。通常、バッファー内の元テキストはエンコードされたテキストで置き換えられるが、オプション引数@var{destination}でそれを変更できる。@var{destination}がバッファーなら、エンコードされたテキストはそのバッファーのポイントの後に挿入される(ポイントは移動しない)。@code{t}なら、このコマンドはエンコードされたテキストを挿入せずに、ユニバイトとしてリターンする。

エンコードされたテキストが何らかのバッファーに挿入された場合、このコマンドはエンコードされたテキストの長さをリターンする。

エンコードされた結果は理論的にはバイトシーケンスだが、バッファーが以前マルチバイトだったならマルチバイトのまま留まり、すべての8ビットのバイトはマルチバイト表現に変換される(@ref{Text
Representations}を参照)。

@cindex @code{undecided} coding-system, when encoding
期待しない結果となる恐れがあるので、テキストのエンコードする際は、@var{coding-system}に@code{undecided}を@emph{使用してはならない}。@var{coding-system}にたいして自明な適値が存在しなければ、適切なエンコードを提案させるために、かわりに@code{select-safe-coding-system}を使用すること(@ref{User-Chosen
Coding Systems, select-safe-coding-system}を参照)。
@end deffn

@defun encode-coding-string string coding-system &optional nocopy buffer
この関数は、コーディングシステム@var{coding-system}で、@var{string}内のテキストをエンコードする。これはエンコードされたテキストを含む新たな文字列をリターンするが、@var{nocopy}が非@code{nil}の場合、些細なエンコード処理なら、この関数は@var{string}自身をリターンする。エンコード結果はユニバイト文字列である。
@end defun

@deffn Command decode-coding-region start end coding-system &optional destination
このコマンドは、コーディングシステム@var{coding-system}で、@var{start}から@var{end}のテキストをデコードする。明示的なデコードを使いやすくするために、デコード前のテキストはバイトシーケンス値であるべきだが、マルチバイトとユニバイトのバッファーいずれでも許すようになっている(マルチバイトバッファーの場合rawバイト値は8ビット文字で表現されていること)。通常、デコードされたテキストでバッファー内の元のテキストは置き換えられるが、オプション引数@var{destination}はそれを変更する。@var{destination}がバッファーなら、デコードされたテキストは、そのバッファーのポイントの後に挿入される(ポイントは移動しない)。これが@code{t}なら、このコマンドはデコードされたテキストを挿入せずに、それをマルチバイト文字列としてリターンする。

デコードされたテキストが何らかのバッファーに挿入された場合、このコマンドはデコードされたテキストの長さをリターンする。

このコマンドは、デコードされたテキストに、テキストプロパティ@code{charset}をputする。このプロパティの値は、元ののテキストのデコードに使用された文字セットを示す。
@end deffn

@defun decode-coding-string string coding-system &optional nocopy buffer
この関数は、@var{coding-system}で@var{string}内のテキストをデコードする。これはデコードされたテキストを含む新たな文字列をリターンするが、@var{nocopy}が非@code{nil}の場合、些細なデコード処理なら@var{string}自体をリターンするかもしれない。明示的なデコードを使いやすくするために、@var{string}のコンテンツはバイトシーケンス値をもつユニバイト文字列であるべきだが、マルチバイト文字列も許すようになっている(マルチバイト形式で8ビットバイトを含むと仮定する)。

オプション引数@var{buffer}がバッファーを指定する場合、デコードされたテキストは、そのバッファー内のポイントの後に挿入される(ポイントは移動しない)。この場合、リターン値はデコードされたテキストの長さとなる。

@cindex @code{charset}, text property
この関数は、デコードされたテキストに、テキストプロパティ@code{charset}をputする。このプロパティの値は、元のテキストのデコードに使用された、文字セットを示す。

@example
@group
(decode-coding-string "Gr\374ss Gott" 'latin-1)
     @result{} #("Gr@"uss Gott" 0 9 (charset iso-8859-1))
@end group
@end example
@end defun

@defun decode-coding-inserted-region from to filename &optional visit beg end replace
この関数は、@var{from}から@var{to}のテキストを、あたかもファイル@var{filename}から、与えられた残りの引数で@code{insert-file-contents}を使用して読み込んだかのようにデコードする。

デコードせずにファイルからテキストを読み込んだ後、やはりデコードすることを決心したときに使用するのが、この関数の通常の使い方である。テキストを削除して再度読み込むかわりに、この関数を呼び出せばデコードして読み込むことができる。
@end defun

@node Terminal I/O Encoding
@subsection Terminal I/O Encoding

  Emacsは、キーボード入力のデコード、および端末出力のエンコードにコーディングシステムを使用できます。これはLatin-1のような、特定のエンコーディングを使用したテキストの送信や表示を行う端末にとって有用です。端末I/Oをエンコードまたはデコードする際、Emacsは@code{last-coding-system-used}をセットしません。

@defun keyboard-coding-system &optional terminal
この関数は、@var{terminal}からのキーボード入力をデコードするために使用する、コーディングシステムをリターンする。@code{no-conversion}という値は、何のデコーディングも行われていないことを意味する。@var{terminal}が省略または@code{nil}なら、それは選択されたフレームの端末を意味する。@ref{Multiple
Terminals}を参照のこと。
@end defun

@deffn Command set-keyboard-coding-system coding-system &optional terminal
このコマンドは、@var{terminal}からのキーボード入力のデコードに使用するコーディングシステムとして、@var{coding-system}を指定する。@var{coding-system}が@code{nil}なら、キーボード入力をデコードしないことを意味する。@var{terminal}がフレームなら、それはそのフレームの端末を意味する。@code{nil}なら、それはカレントで選択されたフレームの端末を意味する。@ref{Multiple
Terminals}を参照のこと。
@end deffn

@defun terminal-coding-system &optional terminal
この関数は、@var{terminal}からの端末出力のエンコードに使用中のコーディングシステムをリターンする。@code{no-conversion}という値は、何のデコーディングも行われていないことを意味する。@var{terminal}がフレームなら、それはそのフレームの端末を意味する。@code{nil}なら、それはカレントで選択されたフレームの端末を意味する。
@end defun

@deffn Command set-terminal-coding-system coding-system &optional terminal
この関数は、@var{terminal}からの端末出力のエンコードに使用するためののコーディングシステムとして、@var{coding-system}を指定する。@var{coding-system}が@code{nil}なら、端末出力をエンコードしないことを意味する。@var{terminal}がフレームなら、それはそのフレームの端末を意味する。@code{nil}なら、それはカレントで選択されたフレームの端末を意味する。
@end deffn

@node Input Methods
@section Input Methods
@cindex input methods

  @dfn{Input methods} provide convenient ways of entering non-@acronym{ASCII}
characters from the keyboard.  Unlike coding systems, which translate
non-@acronym{ASCII} characters to and from encodings meant to be read by
programs, input methods provide human-friendly commands.  (@xref{Input
Methods,,, emacs, The GNU Emacs Manual}, for information on how users use
input methods to enter text.)  How to define input methods is not yet
documented in this manual, but here we describe how to use them.

  Each input method has a name, which is currently a string; in the future,
symbols may also be usable as input method names.

@defvar current-input-method
This variable holds the name of the input method now active in the current
buffer.  (It automatically becomes local in each buffer when set in any
fashion.)  It is @code{nil} if no input method is active in the buffer now.
@end defvar

@defopt default-input-method
This variable holds the default input method for commands that choose an
input method.  Unlike @code{current-input-method}, this variable is normally
global.
@end defopt

@deffn Command set-input-method input-method
This command activates input method @var{input-method} for the current
buffer.  It also sets @code{default-input-method} to @var{input-method}.  If
@var{input-method} is @code{nil}, this command deactivates any input method
for the current buffer.
@end deffn

@defun read-input-method-name prompt &optional default inhibit-null
This function reads an input method name with the minibuffer, prompting with
@var{prompt}.  If @var{default} is non-@code{nil}, that is returned by
default, if the user enters empty input.  However, if @var{inhibit-null} is
non-@code{nil}, empty input signals an error.

The returned value is a string.
@end defun

@defvar input-method-alist
This variable defines all the supported input methods.  Each element defines
one input method, and should have the form:

@example
(@var{input-method} @var{language-env} @var{activate-func}
 @var{title} @var{description} @var{args}...)
@end example

Here @var{input-method} is the input method name, a string;
@var{language-env} is another string, the name of the language environment
this input method is recommended for.  (That serves only for documentation
purposes.)

@var{activate-func} is a function to call to activate this method.  The
@var{args}, if any, are passed as arguments to @var{activate-func}.  All
told, the arguments to @var{activate-func} are @var{input-method} and the
@var{args}.

@var{title} is a string to display in the mode line while this method is
active.  @var{description} is a string describing this method and what it is
good for.
@end defvar

  The fundamental interface to input methods is through the variable
@code{input-method-function}.  @xref{Reading One Event}, and @ref{Invoking
the Input Method}.

@node Locales
@section Locales
@cindex locale

  POSIX defines a concept of ``locales'' which control which language to use
in language-related features.  These Emacs variables control how Emacs
interacts with these features.

@defvar locale-coding-system
@cindex keyboard input decoding on X
This variable specifies the coding system to use for decoding system error
messages and---on X Window system only---keyboard input, for encoding the
format argument to @code{format-time-string}, and for decoding the return
value of @code{format-time-string}.
@end defvar

@defvar system-messages-locale
This variable specifies the locale to use for generating system error
messages.  Changing the locale can cause messages to come out in a different
language or in a different orthography.  If the variable is @code{nil}, the
locale is specified by environment variables in the usual POSIX fashion.
@end defvar

@defvar system-time-locale
This variable specifies the locale to use for formatting time values.
Changing the locale can cause messages to appear according to the
conventions of a different language.  If the variable is @code{nil}, the
locale is specified by environment variables in the usual POSIX fashion.
@end defvar

@defun locale-info item
This function returns locale data @var{item} for the current POSIX locale,
if available.  @var{item} should be one of these symbols:

@table @code
@item codeset
Return the character set as a string (locale item @code{CODESET}).

@item days
Return a 7-element vector of day names (locale items @code{DAY_1} through
@code{DAY_7});

@item months
Return a 12-element vector of month names (locale items @code{MON_1} through
@code{MON_12}).

@item paper
Return a list @code{(@var{width} @var{height})} for the default paper size
measured in millimeters (locale items @code{PAPER_WIDTH} and
@code{PAPER_HEIGHT}).
@end table

If the system can't provide the requested information, or if @var{item} is
not one of those symbols, the value is @code{nil}.  All strings in the
return value are decoded using @code{locale-coding-system}.
@xref{Locales,,, libc, The GNU Libc Manual}, for more information about
locales and locale items.
@end defun
