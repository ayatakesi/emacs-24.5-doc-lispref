@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1998-1999, 2001-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Non-ASCII Characters
@chapter Non-@acronym{ASCII} Characters
@cindex multibyte characters
@cindex characters, multi-byte
@cindex non-@acronym{ASCII} characters

  このチャプターは文字に関する特別な問題と、それらが文字列およびバッファーに格納される方法についてカバーします。

@menu
* Text Representations::     Emacsがテキストを表す方法。
* Disabling Multibyte::      マルチバイト使用を制御する。
* Converting Representations::  ユニバイトとマルチバイトの相互変換。
* Selecting a Representation::  バイトシーケンスをユニバイトやマルチバイトとして扱う。
* Character Codes::          ユニバイトやマルチバイトが個々の文字のコードと関わる方法。
* Character Properties::     文字の挙動と処理を定義する文字属性。
* Character Sets::           利用可能な文字コード空間はさまざまな文字セットに分割される。 
                               The space of possible character codes is 
                               divided into various character sets.
* Scanning Charsets::        バッファーで使用されている文字セットは?
* Translation of Characters::  変換に使用される変換テーブル。
* Coding Systems::           コーディングシステムはファイル保存のための変換である。
* Input Methods::            入力メソッドによりユーザーは特別なキーボードなしで非ASCII文字を入力できる。
* Locales::                  POSIXロケールとの対話。
@end menu

@node Text Representations
@section Text Representations
@cindex text representation

  Emacsのバッファーおよび文字列は、既知のスクリプトで記述されたほとんどすべてのテキストをユーザーがタイプしたり表示できるよう、多種多様な言語の広大な文字レパートリーをサポートします。

@cindex character codepoint
@cindex codespace
@cindex Unicode
  多種多様な文字およびスクリプトをサポートするために、Emacsは@dfn{Unicode標準(Unicode
Standard)}に厳密にしたがいます。Unicode標準は、すべての文字にたいしてそれぞれ、@dfn{コードポイント(codepoint)}と呼ばれる一意な番号を割り当てています。コードポイントの範囲はUnicode、またはUnicode@dfn{コード空間(codespace)}により定義され、範囲は@code{0..#x10FFFF}(16進表記、範囲両端を含む)です。Emacsはこれを、範囲@code{#x110000..#x3FFFFF}のコードポイント範囲に拡張します。この範囲はUnicodeとして統一されていない文字や、文字として解釈できない@dfn{8ビットrawバイト(raw
8-bit bytes)}を表すために使用します。したがって、Emacs内の文字コードポイントは、22ビットの整数になります。

@cindex internal representation of characters
@cindex characters, representation in buffers and strings
@cindex multibyte text
  メモリー節約のため、Emacsはバッファーおよび文字列内のテキスト文字にたいするコードポイントである、22ビットの整数を固定長で保持しません。かわりに、Emacsは文字の内部表現として可変長を使用します。これは、そのコードポイントの値に応じて、各文字を5ビットから8ビットのバイトシーケンスとして格納するものです@footnote{この内部表現は、任意のUnicodeコードポイントを表すための、@dfn{UTF-8}と呼ばれるUnicode標準によるエンコーディングの1つにもとづきますが、8ビットrawバイトおよびUnicodeに統一されていない文字を使用する追加のコードポイントを表現するために、EmacsはUTF-8を拡張しています。}。たとえばすべての@acronym{ASCII}文字は1バイト、Latin-1文字は2バイトといった具合です。わたしたちはこれを、テキストの@dfn{マルチバイト(multibyte)}表現と呼んでいます。

  Emacs外部では、ISO-8859-1、GB-2312、Big-5等のような多種の異なるエンコーディングで文字を表すことができます。Emacsはバッファーまたは文字列へのテキスト読み込み時、およびディスク状のファイルへのテキスト書き込みや他プロセスへの引き渡し時に、これらの外部エンコーディングと、その内部表現の間で適切な変換を行います。

  Emacsがエンコード済みテキストや非テキストデータを、バッファーや文字列に保持、あるいは操作する必要がある場合も時折あります。たとえばEmacsがファイルをvisitする際、まずそのファイルのテキストをそのままバッファーに読み込み、その後にのみそれを内部表現に変換します。この変換前にバッファーに保持されてくださいのは、エンコード済みのテキストです。

@cindex unibyte text
  Emacsに関する限り、エンコードされたテキストは実際のテキストではなく、8ビットrawバイトです。エンコード済みテキストを保持するバッファーおよび文字列は、Emacsがそれらを個々のバイトシーケンスとしてアツカウことから、@dfn{ユニバイト(unibyte)}のバッファーまたは文字列と呼んでいます。Emacsは通常、ユニバイトのバッファーおよび文字列を、@code{\237}のような8進コードで表示します。エンコード済みテキストやバイナリー非テキストデータを処理する場合を除き、ユニバイトバッファーとユニバイト文字列は決して使用しないよう推奨します。

  バッファーにおいては、変数@code{enable-multibyte-characters}のバッファーロケールな値が、使用する表現を指定します。文字列での表現は、その文字列構築時に判断して、それを文字列内に記録します。

@defvar enable-multibyte-characters
この変数は、カレントバッファーのテキスト表現を指定する。非@code{nil}ならバッファーはマルチバイトてきましたわ含み、それ以外ならエンコード済みユニバイトテキスト、またはバイナリー非テキストデータが含れる。

この変数は直接セットできない。バッファーの表現を変更するには、かわりに関数@code{set-buffer-multibyte}を使用すること。
@end defvar

@defun position-bytes position
バッファー位置は文字単位で測られる。この関数は、カレントバッファー内のバッファー位置を、それに対応するバイト位置でリターンする。これはバッファー先頭を1として、バイト単位で増加方向に数えられる。@var{position}が範囲外なら、値は@code{nil}になる。
@end defun

@defun byte-to-position byte-position
カレントバッファー内で、与えられた@var{byte-position}に対応するバッファー位置を、文字単位でリターンする。@var{byte-position}が範囲外なら、値は@code{nil}になる。マルチバイトバッファーでは、@var{byte-position}の任意の値が文字境界上になく、1文字として表現されたマルチバイトシーケンス内にあるかもしれない。この場合、関数はその文字のマルチバイトシーケンスが@var{byte-position}を含むようなバッファー位置をリターンする。他の言い方をすると、この値は同じ文字に属するすべてのバイト位置にたいして変化しない。
@end defun

@defun multibyte-string-p string
@var{string}がマルチバイト文字列なら@code{t}、それ以外は@code{nil}をリターンする。この関数は、@var{string}が文字列以外の場合にも、@code{nil}をリターンする。
@end defun

@defun string-bytes string
@cindex string, number of bytes
この関数は、@var{string}内のバイトの数をリターンする。@var{string}がマルチバイト文字列なら、これは@code{(length
@var{string})}より大きいかもしれない。
@end defun

@defun unibyte-string &rest bytes
この関数は引数@var{bytes}をすべて結合して、その結果をユニバイト文字列で作成する。
@end defun

@node Disabling Multibyte
@section Disabling Multibyte Characters
@cindex disabling multibyte

  デフォルトでは、Emacsはマルチバイトモードで開始します。Emacsは、マルチバイトシーケンスを使用して非@acronym{ASCII}文字を表現する内部エンコーディングを使用することにより、バッファーおよび文字列のコンテンツを格納します。マルチバイトモードではサポートされるすべての言語とスクリプトを使用できます。

@cindex turn multibyte support on or off
  非常に特別な状況下においては、特定のバッファーでマルチバイト文字のサポートを無効にしたいときがあるかもしれません。あるバッファーにおいてマルチバイト文字が無効になっているときは、それを@dfn{ユニバイトモード(unibyte
mode)}と呼びます。ユニバイトモードでは、バッファー内の各文字は0から255(8進の0377)の範囲の文字コードをもちます。0から127(8進の0177)は@acronym{ASCII}文字、128から255(8進の0377)は非@acronym{ASCII}文字を表します。

  特定のファイルをユニバイト表現で編集するためには、@code{find-file-literally}を使用してファイルをvisitします。@ref{Visiting
Functions}を参照してください。マルチバイトバッファーをファイルに保存してバッファーをkillした後に、再びそのファイルを@code{find-file-literally}でvisitすることにより、マルチバイトバッファーをユニバイトに変換できます。かわりに@kbd{C-x
@key{RET}
c}(@code{universal-coding-system-argument})を使用して、ファイルをvisitまたは保存するコーディングシステムとして@samp{raw-text}を指定することもできます。@ref{Text
Coding, , Specifying a Coding System for File Text, emacs, GNU Emacs
Manual}を参照してください。@code{find-file-literally}とは異なり、@samp{raw-text}としてファイルをvisitしてもフォーマット変換、解凍、自動的なモード選択は無効になりません。

@c See http://debbugs.gnu.org/11226 for lack of unibyte tooltip.
@vindex enable-multibyte-characters
バッファーローカル変数@code{enable-multibyte-characters}は、マルチバイトバッファーなら非@code{nil}、ユニバイトバッファーなら@code{nil}になります。マルチバイトバッファーかどうかは、モードラインにも示されます。グラフィカルなディスプレイでのマルチバイトバッファーは、文字セット話示すモードライン部分ぬ、そのバッファーがマルチバイトであること(とそれ以外の事項)を告げるツールチップがあります。ユニバイトバッファーでは、文字セットのインジケーターはありません。したがって(グラフィカルなディスプレイ使用時の)ユニバイトバッファーでは、入力メソッドを使用していなければ、visitしているファイルの行末変換(コロン、バックスラッシュ等)の標識の前には通常何も標識はありません。

@findex toggle-enable-multibyte-characters
特定のバッファーでマルチバイトサポートをオフに切り替えるには、そのバッファー内でコマンド@code{toggle-enable-multibyte-characters}を呼び出してください。

@node Converting Representations
@section Converting Text Representations

  Emacsはユニバイトテキストをマルチバイトに変換できます。マルチバイトテキストに含まれるのが@acronym{ASCII}と8ビットrawバイトだけという条件つきで、マルチバイトテキストからユニバイトへの変換もできます。一般的にこれらの変換はバッファーへのテキスト挿入時、または複数の文字列を1つの文字列に合わせてテキストにputするときに発生します。文字列のコンテンツを、いずれかの表現に明示的に変換することもできます。

  Emacsは、そのテキストの構成にもとづいて、文字列の表現を選択します。一般的なルールでは、ユニバイトテキストが他のマルチバイトテキストと組み合わされている場合は、マルチバイト表現のほうがより一般的であり、ユニバイトテキストのすべての文字を保有できるので、ユニバイトテキストをマルチバイトテキストに変換します。

  バッファーへのテキスト挿入時、Emacsはそのバッファーの@code{enable-multibyte-characters}で指定されるように、テキストをそのバッファーの表現に変換します。特にユニバイトバッファーへマルチバイトテキストを挿入する際は、たとえ一般的にはマルチバイトテキスト内のすべての文字を保持することはできなくても、Emacsはテキストをユニバイトに変換します。バッファーコンテンツをマルチバイトに変換するという自然な代替方法は、そのバッファーの表現が自動的にオーバーライドできないユーザーによる選択にもとづく表現であるため、受け入れられません。

  ユニバイトテキストからマルチバイトテキストへの変換では、@acronym{ASCII}文字は未変更のまま残され、128から255のコードをもつバイトが8ビットrawバイトのマルチバイト表現に変換されます。

  マルチバイトテキストからユニバイトテキストへの変換では、すべての@acronym{ASCII}と8ビット文字が、それらの1バイト形式に変換されますが、各文字のコードポイントの描い8ビット以外は破棄されるため、非@acronym{ASCII}文字の情報は失われます。ユニバイトテキストからマルチバイトテキストに変換して、それをユニバイトに戻せば、元のユニバイトテキストが再生成されます。

以下の2つの関数は、引数@var{string}、またはテキストプロパティをもたない新たに作成された文字列のいずれかをリターンします。

@defun string-to-multibyte string
この関数は、@var{string}と同じ文字シーケンスを含むマルチバイト文字列をリターンする。@var{string}がマルチバイト文字列なら、それが未変更のままリターンされる。この関数は、@var{string}が@acronym{ASCII}文字と8ビットrawバイトだけを含むと仮定する。後者は@code{#x3FFF80}から@code{#x3FFFFF}(両端を含む)に対応する、8ビットrawバイトのマルチバイト表現に変換される(@ref{Text
Representations, codepoints}を参照)。
@end defun

@defun string-to-unibyte string
この関数は、@var{string}と同じ文字シーケンスを含む、ユニバイト文字列をリターンする。@var{string}に非@acronym{ASCII}文字が含まれる場合は、エラーをシグナルする。@var{string}がユニバイト文字列なら、それが未変更のままリターンされる。@acronym{ASCII}文字と8ビット文字だけを含む@var{string}引数にたいしてのみ、この関数を使用すること。
@end defun

@c FIXME: Should `@var{character}' be `@var{byte}'?
@defun byte-to-string byte
@cindex byte to string
この関数は、文字データ@var{byte}の単一バイトを含むユニバイト文字列をリターンする。@var{byte}が0から255までの整数でなければ、エラーをシグナルする。
@end defun

@defun multibyte-char-to-unibyte char
これはマルチバイト文字@var{char}をユニバイト文字に変換して、その文字をリターンする。@var{char}が@acronym{ASCII}と8ビットのいずれでもなければ、この関数は@minus{}1をリターンする。
@end defun

@defun unibyte-char-to-multibyte char
これは@var{char}が@acronym{ASCII}か8ビットrawバイトのいずれかであると仮定して、ユニバイト文字@acronym{ASCII}をマルチバイト文字に変換する。
@end defun

@node Selecting a Representation
@section Selecting a Representation

  既存のバッファーまたは文字列がユニバイトの際にそれらをマルチバイトとして調べたり、その逆を行うことが有用なときがあります。

@defun set-buffer-multibyte multibyte
カレントバッファーの表現タイプをセットする。@var{multibyte}が非@code{nil}ならバッファーはマルチバイト、@code{nil}ならユニバイトになる。

この関数は、バイトシーケンスとして認識時には、バッファーを未変更のままとする。結果として、文字として認識時にはコンテンツを変更できる。たとえば、マルチバイト表現では1文字として扱われる3バイトのシーケンスは、ユニバイト表現では3文字として数えられるだろう。例外はrawバイトを表す8ビット文字である。これらはユニバイトバッファーでは1バイトで表現されるが、バッファーをマルチバイトにセットした際は2バイトのシーケンスに変換され、その逆の変換も行われる。

この関数は、どの表現が使用されているかを記録するために、@code{enable-multibyte-characters}をセットする。これは以前の同じテキストをカバーするよう、バッファー内のさまざまなデータ(オーバーレイ、テキストプロパティ、マーカーを含む)を調整する。

ナローイングはマルチバイト文字シーケンス中間で発生するかもしれないので、この関数はバッファーがナローイングされている場合はエラーをシグナルする。

そのバッファーがインダイレクトバッファー(indirect buffer:
間接バッファー)の場合も、エラーをシグナルする。インダイレクトバッファーは、常にベースバッファー(base buffer:
基底バッファー)の表現を継承する。
@end defun

@defun string-as-unibyte string
@var{string}がすでにユニバイト文字列なら、この関数は@var{string}自身をリターンする。それ以外は@var{string}と同じバイトだが、それぞれの文字を個別の文字としてとして扱い、新たな文字列をリターンする(値は@var{string}より多くの文字をもつかもしれない)。例外として、rawバイトを表す8ビット文字はそれぞれ、単一のバイトに変換される。新たに作成された文字列に、テキストプロパティは含まれない。
@end defun

@defun string-as-multibyte string
@var{string}がすでにマルチバイト文字列なら、この関数は@var{string}自身をリターンする。それ以外は@var{string}と同じバイトだが、それぞれのマルチバイトシーケンスを1つの文字としてとして扱い、新たな文字列をリターンする。これは、値が@var{string}より少ない文字をもつかもしれないことを意味する。@var{string}内のバイトシーケンスが、単一文字のマルチバイト表現として無効なら、そのシーケンスないの各バイトは、8ビットrawバイトとして扱われる。新たに作成された文字列には、テキストプロパティは含まれない
@end defun

@node Character Codes
@section Character Codes
@cindex character codes

  ユニバイトおよびマルチバイトのテキスト表現は、異なる文字コードを使用します。ユニバイト表現にたいして有効な文字コードの範囲は0から@code{#xFF}(255)で、これは1バイトに収まる値です。マルチバイト表現にたいして有効な文字コードの範囲は、0から@code{#x3FFFFF}です。このコード空間では値0から@code{#x7F}(127)が@acronym{ASCII}文字用、値@code{#x80}(128)から@code{#x3FFF7F}(4194175)が非@acronym{ASCII}文字用になります。

  Emacsの文字コードは、Unicode標準の上位集合(superset)です。値0から@code{#x10FFFF}(1114111)は、同じコードポイントのUnicode文字に対応します。値@code{#x110000}(1114112)から@code{#x3FFF7F}(4194175)は、Unicodeに統一されていない文字を、値@code{#x3FFF80}
(4194176)から@code{#x3FFFFF}(4194303)は8ビットrawバイトを表します。

@defun characterp charcode
これは@var{charcode}が有効な文字なら@code{t}、それ以外は@code{nil}をリターンする。

@example
@group
(characterp 65)
     @result{} t
@end group
@group
(characterp 4194303)
     @result{} t
@end group
@group
(characterp 4194304)
     @result{} nil
@end group
@end example
@end defun

@cindex maximum value of character codepoint
@cindex codepoint, largest value
@defun max-char
この関数は、有効な文字コードポイントがもち得る最大の値をリターンする。

@example
@group
(characterp (max-char))
     @result{} t
@end group
@group
(characterp (1+ (max-char)))
     @result{} nil
@end group
@end example
@end defun

@defun get-byte &optional pos string
この関数は、カレントバッファー内の文字位置@var{pos}にあるバイトをリターンする。カレントバッファーがユニバイトなら、その位置のバイトをそのままリターンする。バッファーがマルチバイトの場合は、8ビットrawバイトは8ビットコードに変換される一方、@acronym{ASCII}文字のバ値は文字コードポイントと同じになる。この関数は、@var{pos}にある文字が非@acronym{ASCII}なら、エラーをシグナルする。

オプション引数@var{string}は、カレントバッファーのかわりに、文字列からバイト値を得ることを意味する。
@end defun

@node Character Properties
@section Character Properties
@cindex character properties
@dfn{文字プロパティ(character
property}とは、その文字の振る舞いと、テキストが処理および表示される間どのように処理されるべきかを指定する、名前つきの文字属性です。したがって文字プロパティは、その文字の意味を指定するための重要な一部です。

@c FIXME: Use the latest URI of this chapter?
@c http://www.unicode.org/versions/latest/ch04.pdf
  全体として、Emacsは自身の文字プロパティ実装においてはUnicode標準にしたがいます。特にEmacsは@uref{http://www.unicode.org/reports/tr23/,
Unicode Character Property
Model}をサポートしており、Emacs文字プロパティデータベースはUnicode文字データベース(@acronym{UCD}: Unicode
Character
Database)から派生したものです。Unicode文字プロパティとその意味についての詳細な説明は、@uref{http://www.unicode.org/versions/Unicode6.2.0/ch04.pdf,
Character Properties chapter of the Unicode
Standard}を参照してください。このセクションでは、あなたがすでにUnicode標準の該当する章に親しんでいて、その知識をEmacs
Lispプログラムに適用したいものと仮定します。

  Emacsでは、各プロパティは名前をもつシンボルであり、そのシンボルは利用可能な値セットをもち、値の型はプロパティに依存します。ある文字が特定のプロパティをもたなければ、その値は@code{nil}になります。一般的なルールとして、Emacsでの文字プロパティ名は、対応するUnicodeプロパティ名を小文字にして、文字@samp{_}をダッシュ文字@samp{-}で置き換えることにより生成されます。たとえば@code{Canonical_Combining_Class}は@code{canonical-combining-class}となります。しかし簡単に使用できるように、名前を短くすることもあります。

@cindex unassigned character codepoints
  @acronym{UCD}によりいくつかのコードポイントは@dfn{未割り当て(unassigned)}のまま残されており、それらに対応する文字はありません。Unicode標準は、そのようなコードポイントのプロパティにたいしてデフォルト値を定義しています。それらについては、以下の各プロパティごとに注記しています。

  以下は、Emacsが関知するすべての文字プロパティにたいする、値タイプの完全なリストです:

@table @code
@item name
Unicodeプロパティ@code{Name}に対応する。値はラテン大文字のAからZ、数字、スペース、ハイフン@samp{-}の文字から構成される文字列である。未割り当てのコードポイントにたいする値は@code{nil}。

@cindex unicode general category
@item general-category
Unicodeプロパティ@code{General_Category}に対応する。値は、その文字の分類をアルファベット2文字に略したものを名前としてもつようなシンボルである。未割り当てのコードポイントにたいする値は@code{Cn}。

@item canonical-combining-class
Unicodeプロパティ@code{Canonical_Combining_Class}に対応する。値は整数。未割り当てのコードポイントにたいする値は0。

@cindex bidirectional class of characters
@item bidi-class
Unicodeプロパティ@code{Bidi_Class}に対応する。値は、その文字のUnicode@dfn{方向タイプ(directional
type)}が名前であるようなシンボル。Emacsは表示のために双方向テキストを並び替える際に、このプロパティを使用する(@ref{Bidirectional
Display}を参照)。未割り当てのコードポイントにたいする値は、そのコードポイントが属するコードブロックに依存する。未割り当てのコードポイントのほとんどは@code{L}(強い左方向)だが、@code{AL}(
Arabic letter: アラビア文字)や@code{R}(強い右方向)を受け取るコースポイントもいくつかある。

@item decomposition
Unicodeプロパティの@code{Decomposition_Type}と@code{Decomposition_Value}に対応する。値は、最初の要素が@code{small}のような互換性のあるフォーマットタグ(compatibility
formatting
tag)であるかもしれないリストである@footnote{Unicode仕様ではこれらのタグ名を@samp{<..>}カッコ内に記述しますが、Emacsでのタグ名にはカッコは含まれません。Unicodeでの@samp{<small>}指定は、Emacsでは@samp{small}となります。}。他の要素は、その文字の互換性のある分割シーケンス(compatibility
decomposition sequence)を与える文字です。未割り当てのコードポイントにたいする値は、その文字自身。

@item decimal-digit-value
@code{Numeric_Type}が@samp{Decimal}であるような文字Unicodeプロパティ@code{Numeric_Value}に対応する。値は整数。未割り当てのコードポイントにたいする値は、@acronym{NaN(``not-a-number'':
数字ではない)}を意味する@code{nil}。

@item digit-value
@code{Numeric_Type}が@samp{Digit}であるような文字の、Unicodeプロパティ@code{Numeric_Value}に対応する。値は整数。このような文字には、互換性のある添字や上付き数字が含まれ、値は対応する数字である。未割り当てのコードポイントにたいする値は、@acronym{NaN}を意味する@code{nil}である。

@item numeric-value
@code{Numeric_Type}が@samp{Numeric}であるような文字の、Unicodeプロパティ@code{Numeric_Value}に対応する。このプロパティの値は数字。このプロパティをもつ文字の例には分数、添字、上付き数字、ローマ数字、通貨分数(訳注:
原文は``currency
numerators''でベンガル語の分数値用の歴史的な記号を指すと思われる)、丸数字が含まれる。たとえば、文字@code{U+2155}(@sc{vulgar
fraction one fifth:
(訳注)スラッシュで分子と分母を区切った表記による5分の1のこと})にたいするこのプロパティの値は@code{0.2}。未割り当てのコードポイントにたいする値は、@acronym{NaN}を意味する@code{nil}。

@cindex mirroring of characters
@item mirrored
Unicodeプロパティ@code{Bidi_Mirrored}に対応する。このプロパティの値は、@code{Y}または@code{N}いずれかのシンボル。未割り当てのコードポイントにたいする値は@code{N}。

@item mirroring
Unicodeプロパティ@code{Bidi_Mirroring_Glyph}に対応する。このプロパティの値は、そのグリフ(glyph)がその文字のグリフの鏡像(mirror
image)を表すような文字、定義済みの鏡像グリフがなければ@code{nil}である。@code{mirrored}プロパティが@code{N}であるようなすべての文字の@code{mirroring}プロパティは@code{nil}である。しかし@code{mirrored}プロパティが@code{Y}の文字でも、鏡像をもつ適切な文字がないという理由により、@code{mirroring}が@code{nil}の文字もある。Emacsは適切な際は、鏡像を表示するためにこのプロパティを使用する(@ref{Bidirectional
Display}を参照)。未割り当てのコードポイントにたいする値は@code{nil}。

@item old-name
Unicodeプロパティ@code{Unicode_1_Name}に対応する。値は文字列。未割り当てのコードポイント、およびこのプロパティにたいする値をもたない文字では、値は@code{nil}である。

@item iso-10646-comment
Unicodeプロパティ@code{ISO_Comment}に対応する。値は文字列。未割り当てのコードポイントの値は空文字列。

@item uppercase
Unicodeプロパティ@code{Simple_Uppercase_Mapping}に対応する。このプロパティの値は、単一の文字。未割り当てのコードポイントの値は@code{nil}で、これはその文字自身を意味する。

@item lowercase
Unicodeプロパティ@code{Simple_Lowercase_Mapping}に対応する。このプロパティの値は、単一の文字。未割り当てのコードポイントの値は@code{nil}で、これはその文字自身を意味する。

@item titlecase
Unicodeプロパティ@code{Simple_Titlecase_Mapping}に対応する。@dfn{タイトルケース(title
case)}とは、単語の最初の文字を大文字にする必要がある際に使用される、文字の特別な形式のこと。このプロパティの値は、単一の文字。未割り当てのコードポイントにたいする値は@code{nil}で、これはその文字自身を意味する。
@end table

@defun get-char-code-property char propname
この関数は、@var{char}のプロパティ@var{propname}の値をリターンする。

@example
@group
(get-char-code-property ?\s 'general-category)
     @result{} Zs
@end group
@group
(get-char-code-property ?1 'general-category)
     @result{} Nd
@end group
@group
;; subscript 4
(get-char-code-property ?\u2084 'digit-value)
     @result{} 4
@end group
@group
;; one fifth
(get-char-code-property ?\u2155 'numeric-value)
     @result{} 0.2
@end group
@group
;; Roman IV
(get-char-code-property ?\u2163 'numeric-value)
     @result{} 4
@end group
@end example
@end defun

@defun char-code-property-description prop value
この関数はプロパティ@var{prop}の@var{value}の説明文字列(description
string)、@var{value}が説明をもたなければ@code{nil}をリターンする。

@example
@group
(char-code-property-description 'general-category 'Zs)
     @result{} "Separator, Space"
@end group
@group
(char-code-property-description 'general-category 'Nd)
     @result{} "Number, Decimal Digit"
@end group
@group
(char-code-property-description 'numeric-value '1/5)
     @result{} nil
@end group
@end example
@end defun

@defun put-char-code-property char propname value
この関数は、文字@var{char}のプロパティ@var{propname}の値として、@var{value}を格納する。
@end defun

@defvar unicode-category-table
この変数の値は、それぞれの文字にたいして、そのUnicodeプロパティ@code{General_Category}をシンボルとして指定する、文字テーブルである(@ref{Char-Tables}を参照)。
@end defvar

@defvar char-script-table
@cindex script symbols
この変数の値は、それぞれの文字がシンボルを指定するような文字テーブルである。シンボルの名前は、Unicodeコードスペースからスクリプト固有ブロックへのUnicode標準分類にしたがった、その文字が属するスクリプトである。この文字テーブルは余分のスロットを１つもち、値はすべてのスクリプトシンボルのリストである。
@end defvar

@defvar char-width-table
この変数の値は、、それぞれの文字がスクリーン上で占めるであろう幅を列単位で指定する、文字テーブルである。
@end defvar

@defvar printable-chars
この変数の値は、それぞれの文字にたいして、それがプリント可能かどうかを指定する、文字テーブルである。すなわち、@code{(aref
printable-chars char)}を評価した結果が@code{t}ならプリント可で、@code{nil}なら不可である。
@end defvar

@node Character Sets
@section Character Sets
@cindex character sets

@cindex charset
@cindex coded character set
Emacsの@dfn{文字セット(character
set、もしくはcharset)}とは、それぞれの文字が数字のコードポイントに割り当てられれた、文字セットのことです(Unicode標準ではこれを@dfn{符号化文字集合(coded
character
set)}と呼ぶ)。Emacsの各文字セットは、シンボルであるような名前をもちます。1つの文字が、任意の数の異なる文字セットに属することができますが、各文字セット内で異なるコードポイントをもつのが一般的でしょう。文字セットの例には@code{ascii}、@code{iso-8859-1}、@code{greek-iso8859-7}、@code{windows-1255}が含まれます。文字セット内で文字に割り当てられるコードポイントは、Emacs内のバッファーや文字列内で使用されるコードポイントとは、通常異なります。

@cindex @code{emacs}, a charset
@cindex @code{unicode}, a charset
@cindex @code{eight-bit}, a charset
  Emacsは、特別な文字セットをいくつか定義しています。文字セット@code{unicode}は、Emacsコードポイントが@code{0..#x10FFFF}の範囲の、すべての文字セットを含みます。文字セット@code{emacs}は、すべての@acronym{ASCII}、および非@acronym{ASCII}文字を含みます。最後に@code{eight-bit}文字セットは、8ビットrawバイトを含みます。テキスト内でrawバイトを見つけたときに、Emacsはこれを使用します。

@defun charsetp object
@var{object}は文字セットを命名するシンボルなら@code{t}、それ以外は@code{nil}をリターンする。
@end defun

@defvar charset-list
値は、すべての定義済み文字セットの名前のリストである。
@end defvar

@defun charset-priority-list &optional highestp
この関数は、すべての定義済み文字セットの優先順にソートされたリストをリターンする。@var{highestp}が非@code{nil}なら、この関数はもっとも優先度の高い文字セット1つをリターンする。
@end defun

@defun set-charset-priority &rest charsets
この関数は、@var{charsets}をもっとも高い優先度の文字セットにする。
@end defun

@defun char-charset character &optional restriction
この関数は、@var{character}が属する文字セットで、もっとも優先度の高い文字セットの名前をリターンする。ただし@acronym{ASCII}文字は例外であり、この関数は常に@code{ascii}をリターンする。

@var{restriction}が非@code{nil}なら、それは検索する文字セットのリストであること。かわりにコーディングシステムも指定でき、その場合はそのコーディングシステムによりサポートされている必要がある(@ref{Coding
Systems}を参照)。
@end defun

@c TODO: Explain the properties here and add indexes such as 'charset property'.
@defun charset-plist charset
この関数は、文字セット@var{charset}のプロパティをリターンする。たとえ@var{charset}がシンボルだったとしても、これはそのシンボルのプロパティリストと同じではない。文字セットプロパティにはドキュメント文字列、短い名前等、その文字セットに関する重要な情報が含まれる。
@end defun

@defun put-charset-property charset propname value
この関数は、@var{charset}のプロパティ@var{propname}に、与えられた@var{value}をセットする。
@end defun

@defun get-charset-property charset propname
この関数は、@var{charset}のプロパティ@var{propname}の値をリターンする。
@end defun

@deffn Command list-charset-chars charset
このコマンドは、文字セット@var{charset}内の文字のリストを表示する。
@end deffn

  Emacsは文字の内部的な表現と、その文字の特定の文字セット内でのコードポイントを相互に変換することができます。以下は、これらをサポートするための関数です。

@c FIXME: decode-char and encode-char accept and ignore an additional
@c argument @var{restriction}.  When that argument actually makes a
@c difference, it should be documented here.
@defun decode-char charset code-point
この関数は、@var{charset}内で@var{code-point}に割り当てられた文字を、Emacsの対応する文字にデコードして、それをリターンする。そのコードポイントの文字が@var{charset}に含まれなければ、値は@code{nil}である。@var{code-point}がLisp整数(@ref{Integer
Basics, most-positive-fixnum}を参照)に収まらない場合は、コンスセル@code{(@var{high}
.
@var{low})}として指定できるかもしれない。ここで@var{low}はその値の下位来る16ビット、@var{high}は上位16ビットである。
@end defun

@defun encode-char char charset
この関数は、@var{charset}内で文字@var{char}に割り当てられた、コードポイントをリターンする。結果がLisp整数に収まらない場合は、上述の@code{decode-char}の2つ目の引数のように、コンスセル@code{(@var{high}
.
@var{low})}としてリターンされる。@var{charset}が@var{char}にたいするコードポイントをもたなければ、値は@code{nil}である。
@end defun

  以下の関数は、文字セット内の文字の一部、全くすべてにたいして、特定の関数を適用するのに便利です。

@defun map-charset-chars function charset &optional arg from-code to-code
@var{charset}内の文字にたいして@var{function}を呼び出す。@var{function}は2つの引数で呼び出される。1つ目はコンスセル@code{(@var{from}
.
@var{to})}で、@var{from}と@var{to}は文字セット内に含まれる文字の範囲である。@var{arg}は、2つ目の引数として@var{function}に渡される。

デフォルトでは、@var{function}に渡されるコードポイントの範囲には@var{charset}内のすべての文字が含まれるが、オプション引数@var{from-code}および@var{to-code}により、それは@var{charset}の2つのコードポイント間にある文字範囲に制限される。@var{from-code}または@var{to-code}のいずれかが@code{nil}の場合のデフォルトは、@var{charset}のコードポイントの最初または最後である。
@end defun

@node Scanning Charsets
@section Scanning for Character Sets
@cindex scanning for character sets
@cindex character set, searching

  特定の文字が、どの文字セットに属するか調べられると便利なときがあります。これの用途の1つは、どのコーディングシステム(@ref{Coding
Systems}を参照)が問題となっているテキストすべてを表現可能か判断することです。他にも、そのテキストを表示するフォントの判断があります。

@defun charset-after &optional pos
この関数は、カレントバッファー内の位置@var{pos}にある文字を含む、
もっとも高い優先度の文字セットをリターンする。@var{pos}が省略または@code{nil}の場合のデフォルトは、ポイントのカレント値である。@var{pos}が範囲外なら、値は@code{nil}。
@end defun

@defun find-charset-region beg end &optional translation
この関数は、カレントバッファー内の位置@var{beg}から@var{end}の間の文字を含む、もっとも優先度の高い文字セットのリストをリターンする。

オプション引数が@var{translation}は、テキストのスキャンに使用するための変換テーブルを指定する(@ref{Translation of
Characters}を参照)。これが非@code{nil}なら、リージョン内の各文字はそのテーブルを通じて変換され、リターンされる値にはバッファーの実際の文字ではなく、変換された文字が記述される。
@end defun

@defun find-charset-string string &optional translation
この関数は、@var{string}内の文字を含む、もっとも優先度の高い文字セットのリストをリターンする。これは@code{find-charset-region}と似ているが、カレントバッファーの一部ではなく@var{string}のコンテンツに適用される点が異なる。
@end defun

@node Translation of Characters
@section Translation of Characters
@cindex character translation tables
@cindex translation tables

  @dfn{変換テーブル(translation
table)}とは？文字から文字へのマッピングを指定する、文字テーブルです(@ref{Char-Tables}を参照)。これらのテーブルはエンコーディング、デコーディング、および他の用地にも使用されます。独自に変換テーブルを指定するコーディングシステムも、いくつかあります。他のすべてのコーディングシステムに適用される、デフォルトの変換テーブルも存在します。

  変換テーブルには、余分のスロットが2つあります。1つ目のスロットは@code{nil}、または逆の変換を処理する変換テーブルです。2つ目のスロットは、変換する文字シーケンスを照合する際の、最大文字数です(以下の@code{make-translation-table-from-alist}の説明を参照)。

@defun make-translation-table &rest translations
この関数は、引数@var{translations}にもとづいて、変換テーブルをリターンする。@var{translations}の各要素は、@code{(@var{from}
. @var{to})}という形式のリストであること。これは@var{from}から@var{to}への、文字の変換を指示する。

各引数内の引数とフォームは順に処理され、もし前のフォームですでに@var{to}がたとえば@var{to-alt}に変換されていれば、@var{from}も@var{to-alt}に変換される。
@end defun

  デコードを行う間、その変換テーブルの変換は、通常のデコーディングの結果の文字に適用されます。あるコーディングシステムがプロパティ@code{:decode-translation-table}をもつなら、それは使用する変換テーブル、または順に適用するべき変換テーブルのリストを指定します(これはコーディングシステムの名前であるようなシンボルのプロパティではなく、@code{coding-system-get}がリターンするような、コーディングシステムのプロパティである。@ref{Coding
System Basics,, Basic Concepts of Coding
Systems}を参照されたい)。最後に、もし@code{standard-translation-table-for-decode}が非@code{nil}なら、結果となる文字はそのテーブルにより変換されます。

  エンコードを行う間は、その変換テーブルの変換はバッファー内の文字に適用され、変換結果は実際にエンコードされます。あるコーディングシステムがプロパティ@code{:encode-translation-table}をもつなら、それは使用する変換テーブル、または順に適用するべき変換テーブルのリストを指定します。加えて、もし変数@code{standard-translation-table-for-encode}が非@code{nil}なら、それは変換結果にたいして使用するべき変換テーブルを指定します。

@defvar standard-translation-table-for-decode
これはデコード用のデフォルトの変換テーブルである。あるコーディングシステムが独自に変換テーブルを指定する場合、この変数の値が非@code{nil}なら、それら独自のテーブル適用後に、この変数の変換テーブルが適用される。
@end defvar

@defvar standard-translation-table-for-encode
これはエンコード用のデフォルトの変換テーブルである。あるコーディングシステムが独自に変換テーブルを指定する場合、この変数の値が非@code{nil}なら、それら独自のテーブル適用後に、この変数の変換テーブルが適用される。
@end defvar

@c FIXME: This variable is obsolete since 23.1.  We should mention
@c that here or simply remove this defvar.  --xfq
@defvar translation-table-for-input
自己ソウニュ文字は、挿入前にこの変換テーブルを通じて変換が行われる。検索コマンドも、バッファー内の内容とより信頼性のある比較ができるように、このテーブルを通じて入力を変換する。

この変数は、セット時に自動的にバッファーローカルになる。
@end defvar

@defun make-translation-table-from-vector vec
この関数は、バイト(値は0から#xFF)から文字にマップする256要素の配列であるような@var{vec}から作成した変換テーブルをリターンする。未変換のバイトにたいする要素は、@code{nil}かもしれない。リターンされるテーブルは、余分な1つ目のスロットにそのマッピングを保持する変換テーブル、2つ目の余分なスロットに値@code{1}をもつ。

この関数は、各バイトを特定の文字にマップするような、プライベートなコーディングシステムを簡単に作成する手段を提供する。@code{define-coding-system}の@var{props}引数のプロパティ@code{:decode-translation-table}と@code{:encode-translation-table}に、リターンされるテーブルと、逆変換テーブルを指定できる。
@end defun

@defun make-translation-table-from-alist alist
この関数は@code{make-translation-table}と似ているが、シンプルな1体1の変換テーブルではなく、より複雑な変換テーブルをリターンする。@var{alist}の各要素は@code{(@var{from}
.
@var{to})}という形式をもち、ここで@var{from}および@var{to}は、文字または文字シーケンスを指定するベクターである。@var{from}が文字なら、その文字は@var{to}(文字または文字シーケンス)に変換される。@var{from}が文字のベクターならそのシーケンスは@var{to}に変換される。リターンされるテーブルは、1つ目の余分なスロットに逆のマッピングを行う変換テーブル、2つ目の余分なスロットには文字シーケンス@var{from}すべての最大長をもつ。
@end defun

@node Coding Systems
@section Coding Systems

@cindex coding system
  Emacsがファイルにたいして読み書きを行う際、およびEmacsがサブプロセスとテキストの送受信を行う際、通常は特定の@dfn{コーディングシステム(coding
system)}の指定にしたがって文字コード変換および行末変換を行います。

  コーディングシステムの定義は難解な問題であり、ここには記述しません。

@menu
* Coding System Basics::     基本的な概念。
* Encoding and I/O::         ファイル入出力関数がコーディングシステムを扱う方法。
* Lisp and Coding Systems::  コーディングシステム名を処理する関数。
* User-Chosen Coding Systems::  ユーザーにコーディングシステムの選択を求める。
* Default Coding Systems::   デフォルトの選択の制御。
* Specifying Coding Systems::  単一ファイル処理にたいして特定のコーディングシステムを要求する。
* Explicit Encoding::        入出力を伴わないテキストのエンコードおよびデコード。
* Terminal I/O Encoding::    端末入出力にたいするエンコーディングの使用。
@end menu

@node Coding System Basics
@subsection Basic Concepts of Coding Systems

@cindex character code conversion
  @dfn{文字コード変換(character code
conversion)}により、Emacs内部で使用される文字の内部表現と他のエンコーディングの間で、変換が行われます。Emacsは多くの異なるエンコーディングをサポートしており、それらは双方向に変換が可能です。たとえばLatin
1、Latin 2、Latin 3、Latin 4、Latin 5、およびいくつかのISO
2022の変種等のようなエンコーディングにたいして、テキストを双方向に変換できます。あるケースにおいては、同じ文字にたいしてEmacsは複数のエンコーディング候補をサポートします。たとえばキリル(ロシア語)のアルファベットにたいしてはISO、Alternativnyj、KOI8のように3つにコーディングシステムが存在します。

  コーディングシステムはそれぞれ特定の文字コード変換セットを指定しますが、@code{undecided}というコーディングシステムは特別です。これはそれぞれのファイルにたいして、そのファイルのデータにもとづいて発見的に選択が行われるように、選択を未指定のままにします。

  一般的に、コーディングシステムは可逆的な同一性を保証しません。あるコーディングシステムを使用してバイトシーケンスをデコードしてから、同じコーディングシステムで結果テキストをエンコードしても、異なるバイトシーケンスが生成される可能性があります。しかし、デコードされたオリジナルのバイトシーケンスとなることを保証するコーディングシステムもいくつかあります。以下にいくつかの例を挙げます:

@quotation
iso-8859-1、utf-8、big5、shift_jis、euc-jp
@end quotation

  バッファーテキストのエンコードと結果のデコードでも、オリジナルテキストの再生成に失敗する可能性があります。たとえば、その文字をサポートしないコーディングシステムで文字をエンコードした場合の結果は予測できず、したがって同じコーディングシステムを使用してそれをデコードしても、異なるテキストが生成されるでしょう。現在のところ、Emacsは未サポート文字のエンコーディングによる結果をエラーとして報告できません。

@cindex EOL conversion
@cindex end-of-line conversion
@cindex line end conversion
  @dfn{行末変換(end of line conversion:
改行変換)}は、ファイル内の行末を表すために、さまざまなシステム上で使用される3つの異なる慣例を扱います。GNUやUnixシステムで使用されるUnixの慣例では、LF文字(linefeed文字、改行とも呼ばれる)が使用されます。MS-WindowsやMS-DOSシステムで使用されるDOSの慣例では、行末にCR文字(carriage-return文字、復帰文字とも呼ばれる)とLF文字が使用されますMacの慣例ではCR文字だけが使用されます(これはOS
X以前のMacintoshシステムで使用されていた慣例である)。

@cindex base coding system
@cindex variant coding system
  @code{latin-1}のような@dfn{ベースコーディングシステム(base coding systems:
基本コーディングシステム)}では、データにもとづいて選択されるよう、行末変換は未指定となっています。@code{latin-1-unix}、@code{latin-1-dos}、@code{latin-1-mac}のような@dfn{バリアントコーディングシステム(variant
coding systems:
変種コーディングシステム)}では、行末変換を明示的に指定します。ほとんどのベースコーディングシステムは@samp{-unix}、@samp{-dos}、@samp{-mac}を追加した形式の、3つの対応する変種をもちます。

@vindex raw-text@r{ coding system}
  @code{raw-text}は、文字コード変換を抑制して、このコーディングシステムでvisitされたバッファーがユニバイトバッファーとなる点において、特殊なコーディングシステムです。歴史的な理由により、このコーディングシステムによりユニバイトおよびマルチバイト両方のテキストを保存できます。マルチバイトテキストのエンコードに@code{raw-text}を使用した際は、1文字コード変換を行います。8ビット文字は、1バイトの外部表現に変換されます。@code{raw-text}は通常のようにデータにより判断できるように行末変換を指定せず、通常のように行末変換を指定する3つの変種をもちます。

@vindex no-conversion@r{ coding system}
@vindex binary@r{ coding system}
  @code{no-conversion}(とエイリアスの@code{binary})は、@code{raw-text-unix}と等価です。これは文字コードおよび行末にたいする変換をいずれもしてくださいしません。

@vindex emacs-internal@r{ coding system}
@vindex utf-8-emacs@r{ coding system}
  @code{utf-8-emacs}は、データがEmacsの内部エンコーディング(@ref{Text
Representations}を参照)で表されることを指定するコーディングシステムです。コード変換が何も発生しない点で、これは@code{raw-text}と似ていますが、結果がマルチバイトデータである点が異なります。The
name  @code{emacs-internal}という名前は、@code{utf-8-emacs}にたいするエイリアスです。

@defun coding-system-get coding-system property
この関数は、コーディングシステム@var{coding-system}の、指定されたプロパティをリターンする。コーディングシステムのプロパティのほとんどは内部的な目的のために存在するが、@code{:mime-charset}については有用と思うかもしれない。このプロパティの値は、そのコーディングシステムが読み書きできる文字コードにたいしてMIME内で使用される名前である。以下に例を示す:

@example
(coding-system-get 'iso-latin-1 :mime-charset)
     @result{} iso-8859-1
(coding-system-get 'iso-2022-cn :mime-charset)
     @result{} iso-2022-cn
(coding-system-get 'cyrillic-koi8 :mime-charset)
     @result{} koi8-r
@end example

@code{:mime-charset}プロパティの値は、そのコーディングシステムにたいするエイリアスとしても定義されている。
@end defun

@cindex alias, for coding systems
@defun coding-system-aliases coding-system
この関数は、@var{coding-system}のエイリアスのリストをリターンする。
@end defun

@node Encoding and I/O
@subsection Encoding and I/O

  コーディングシステムの主な目的は、ファイルの読み込みと書き込みへの使用です。関数@code{insert-file-contents}はファイルデータのデコードにコーディングシステムを使用し、@code{write-region}はバッファーコンテンツのエンコードにコーディングシステムを使用します。

  使用するコーディングシステムは明示的(@ref{Specifying Coding
Systems}を参照)、またはデフォルトメカニズム(@ref{Default Coding
Systems}を参照)を使用により暗黙的に指定できます。しかしきれらの手法は、何を行うかを完全には指定しないかもしれません。たとえば、これらはデータから文字コード変換を行わない@code{undefined}のようなコーディングシステムを選択するかもしれません。このような場合、I/O処理はコーディングシステム選択により、その処理を完了します。後でどのコーディングシステムが選択されたか調べたいことが、頻繁にあるでしょう。

@defvar buffer-file-coding-system
このバッファーローカル変数は、バッファーの保存、および@code{write-region}によるバッファー部分のファイルへの書き出しに使用されるコーディングシステムを記録する。書き込まれるテキストが、この変数で指定されたコーディングシステムを使用して安全にエンコードできない場合、これらの操作は関数@code{select-safe-coding-system}を呼び出すことにより、代替となるエンコーディングを選択する(@ref{User-Chosen
Coding
Systems}を参照)。異なるエンコーディングの選択が、ユーザーによるコーディングシステムの指定を要するなら、@code{buffer-file-coding-system}は新たに選択されたコーディングシステムに更新される。

@code{buffer-file-coding-system}は、サブプロセスへのテキスト送信に@emph{影響しない}。
@end defvar

@defvar save-buffer-coding-system
この変数は、(@code{buffer-file-coding-system}をオーバーライドして)バッファーを保存するためのコーディングシステムを指定する。これは@code{write-region}には使用されないことに注意。

あるコマンドがバッファーを保存するために@code{buffer-file-coding-system}(または@code{save-buffer-coding-system})の使用を開始して、そのコーディングシステムがバッファー内の実際のテキストを処理できなければ、(@code{select-safe-coding-system}を呼び出すことにより)そのコマンドは他のコーディングシステムの選択をユーザーに求める。これが発生した後は、コマンドはユーザー指定のコーディングシステムを表すために、@code{buffer-file-coding-system}の更新も行う。
@end defvar

@defvar last-coding-system-used
ファイルおよびサブプロセスにたいするI/O操作は、使用したコーディングシステムの名前を、この変数にセットする。明示的にエンコードとデコードを行う関数(@ref{Explicit
Encoding}を参照)も、この変数をセットする。

@strong{警告:}
サブプロセス出力の受信によりこの変数がセットされるため、この変数はEmacsがwaitしているとくは常に変更され得る。したがって、興味対象となる値を格納する関数呼び出し後は、間を空けずにその値をコピーするべきである。
@end defvar

  変数@code{selection-coding-system}はウィンドウシステムにたいして、選択(selection)をエンコードする方法を指定します。@ref{Window
System Selections}を参照してください。

@defvar file-name-coding-system
変数@code{file-name-coding-system}は、ファイル名のエンコーディングに使用するコーディングシステムを指定する。Emacsは、すべてのファイル操作にたいして、ファイル名のエンコードにそのコーディングシステムを使用する。@code{file-name-coding-system}が@code{nil}なら、Emacsは選択された言語環境(language
environment)により決定された、デフォルトのコーディングシステムを使用する。デフォルト言語環境では、ファイル名に含まれるすべての非@acronym{ASCII}文字は、特別にエンコードされない。これらはEmacsの内部表現を使用して、ファイルシステム内で表される。
@end defvar

  @strong{警告:}
Emacsのセッション中に@code{file-name-coding-system}(または言語環境)を変更した場合、以前のコーディングシステムを使用してエンコードされた名前をもつファイルをvisitしていると、新たなコーディングシステムでは異なるように扱われるので、問題が発生し得る。これらのvisitされたファイル名でこれらのバッファーの保存を試みると、保存により間違ったファイル名が使用されるか、エラーとなるかもしれない。そのような問題が発生したら、そのバッファーにたいして新たなファイル名を指定するために、@kbd{C-x
C-w}を使用すること。

@cindex file-name encoding, MS-Windows
  Windows 2000以降では、EmacsはOSに渡すファイル名にデフォルトでUnicode
APIを使用するため、@code{file-name-coding-system}の値は大部分が無視される。Lispレベルでファイル名のエンコードまたはデコードを必要とするLispアプリケーションは、@code{system-type}が@code{windows-nt}のときは、@code{utf-8}をコーディングシステムに使用するべきである。UTF-8でエンコードされたファイル名から、OSと対話するために適したエンコーディングへの変換は、Emacsにより内部的に処理される。

@node Lisp and Coding Systems
@subsection Coding Systems in Lisp

  Here are the Lisp facilities for working with coding systems:

@cindex list all coding systems
@defun coding-system-list &optional base-only
This function returns a list of all coding system names (symbols).  If
@var{base-only} is non-@code{nil}, the value includes only the base coding
systems.  Otherwise, it includes alias and variant coding systems as well.
@end defun

@defun coding-system-p object
This function returns @code{t} if @var{object} is a coding system name or
@code{nil}.
@end defun

@cindex validity of coding system
@cindex coding system, validity check
@defun check-coding-system coding-system
This function checks the validity of @var{coding-system}.  If that is valid,
it returns @var{coding-system}.  If @var{coding-system} is @code{nil}, the
function return @code{nil}.  For any other values, it signals an error whose
@code{error-symbol} is @code{coding-system-error} (@pxref{Signaling Errors,
signal}).
@end defun

@cindex eol type of coding system
@defun coding-system-eol-type coding-system
This function returns the type of end-of-line (a.k.a.@: @dfn{eol})
conversion used by @var{coding-system}.  If @var{coding-system} specifies a
certain eol conversion, the return value is an integer 0, 1, or 2, standing
for @code{unix}, @code{dos}, and @code{mac}, respectively.  If
@var{coding-system} doesn't specify eol conversion explicitly, the return
value is a vector of coding systems, each one with one of the possible eol
conversion types, like this:

@lisp
(coding-system-eol-type 'latin-1)
     @result{} [latin-1-unix latin-1-dos latin-1-mac]
@end lisp

@noindent
If this function returns a vector, Emacs will decide, as part of the text
encoding or decoding process, what eol conversion to use.  For decoding, the
end-of-line format of the text is auto-detected, and the eol conversion is
set to match it (e.g., DOS-style CRLF format will imply @code{dos} eol
conversion).  For encoding, the eol conversion is taken from the appropriate
default coding system (e.g., default value of
@code{buffer-file-coding-system} for @code{buffer-file-coding-system}), or
from the default eol conversion appropriate for the underlying platform.
@end defun

@cindex eol conversion of coding system
@defun coding-system-change-eol-conversion coding-system eol-type
This function returns a coding system which is like @var{coding-system}
except for its eol conversion, which is specified by @code{eol-type}.
@var{eol-type} should be @code{unix}, @code{dos}, @code{mac}, or
@code{nil}.  If it is @code{nil}, the returned coding system determines the
end-of-line conversion from the data.

@var{eol-type} may also be 0, 1 or 2, standing for @code{unix}, @code{dos}
and @code{mac}, respectively.
@end defun

@cindex text conversion of coding system
@defun coding-system-change-text-conversion eol-coding text-coding
This function returns a coding system which uses the end-of-line conversion
of @var{eol-coding}, and the text conversion of @var{text-coding}.  If
@var{text-coding} is @code{nil}, it returns @code{undecided}, or one of its
variants according to @var{eol-coding}.
@end defun

@cindex safely encode region
@cindex coding systems for encoding region
@defun find-coding-systems-region from to
This function returns a list of coding systems that could be used to encode
a text between @var{from} and @var{to}.  All coding systems in the list can
safely encode any multibyte characters in that portion of the text.

If the text contains no multibyte characters, the function returns the list
@code{(undecided)}.
@end defun

@cindex safely encode a string
@cindex coding systems for encoding a string
@defun find-coding-systems-string string
This function returns a list of coding systems that could be used to encode
the text of @var{string}.  All coding systems in the list can safely encode
any multibyte characters in @var{string}.  If the text contains no multibyte
characters, this returns the list @code{(undecided)}.
@end defun

@cindex charset, coding systems to encode
@cindex safely encode characters in a charset
@defun find-coding-systems-for-charsets charsets
This function returns a list of coding systems that could be used to encode
all the character sets in the list @var{charsets}.
@end defun

@defun check-coding-systems-region start end coding-system-list
This function checks whether coding systems in the list
@code{coding-system-list} can encode all the characters in the region
between @var{start} and @var{end}.  If all of the coding systems in the list
can encode the specified text, the function returns @code{nil}.  If some
coding systems cannot encode some of the characters, the value is an alist,
each element of which has the form @code{(@var{coding-system1} @var{pos1}
@var{pos2} @dots{})}, meaning that @var{coding-system1} cannot encode
characters at buffer positions @var{pos1}, @var{pos2}, @enddots{}.

@var{start} may be a string, in which case @var{end} is ignored and the
returned value references string indices instead of buffer positions.
@end defun

@defun detect-coding-region start end &optional highest
This function chooses a plausible coding system for decoding the text from
@var{start} to @var{end}.  This text should be a byte sequence, i.e.,
unibyte text or multibyte text with only @acronym{ASCII} and eight-bit
characters (@pxref{Explicit Encoding}).

Normally this function returns a list of coding systems that could handle
decoding the text that was scanned.  They are listed in order of decreasing
priority.  But if @var{highest} is non-@code{nil}, then the return value is
just one coding system, the one that is highest in priority.

If the region contains only @acronym{ASCII} characters except for such
ISO-2022 control characters ISO-2022 as @code{ESC}, the value is
@code{undecided} or @code{(undecided)}, or a variant specifying end-of-line
conversion, if that can be deduced from the text.

If the region contains null bytes, the value is @code{no-conversion}, even
if the region contains text encoded in some coding system.
@end defun

@defun detect-coding-string string &optional highest
This function is like @code{detect-coding-region} except that it operates on
the contents of @var{string} instead of bytes in the buffer.
@end defun

@cindex null bytes, and decoding text
@defvar inhibit-null-byte-detection
If this variable has a non-@code{nil} value, null bytes are ignored when
detecting the encoding of a region or a string.  This allows to correctly
detect the encoding of text that contains null bytes, such as Info files
with Index nodes.
@end defvar

@defvar inhibit-iso-escape-detection
If this variable has a non-@code{nil} value, ISO-2022 escape sequences are
ignored when detecting the encoding of a region or a string.  The result is
that no text is ever detected as encoded in some ISO-2022 encoding, and all
escape sequences become visible in a buffer.  @strong{Warning:} @emph{Use
this variable with extreme caution, because many files in the Emacs
distribution use ISO-2022 encoding.}
@end defvar

@cindex charsets supported by a coding system
@defun coding-system-charset-list coding-system
This function returns the list of character sets (@pxref{Character Sets})
supported by @var{coding-system}.  Some coding systems that support too many
character sets to list them all yield special values:
@itemize @bullet
@item
If @var{coding-system} supports all Emacs characters, the value is
@code{(emacs)}.
@item
If @var{coding-system} supports all Unicode characters, the value is
@code{(unicode)}.
@item
If @var{coding-system} supports all ISO-2022 charsets, the value is
@code{iso-2022}.
@item
If @var{coding-system} supports all the characters in the internal coding
system used by Emacs version 21 (prior to the implementation of internal
Unicode support), the value is @code{emacs-mule}.
@end itemize
@end defun

  @xref{Coding systems for a subprocess,, Process Information}, in particular
the description of the functions @code{process-coding-system} and
@code{set-process-coding-system}, for how to examine or set the coding
systems used for I/O to a subprocess.

@node User-Chosen Coding Systems
@subsection User-Chosen Coding Systems

@cindex select safe coding system
@defun select-safe-coding-system from to &optional default-coding-system accept-default-p file
This function selects a coding system for encoding specified text, asking
the user to choose if necessary.  Normally the specified text is the text in
the current buffer between @var{from} and @var{to}.  If @var{from} is a
string, the string specifies the text to encode, and @var{to} is ignored.

If the specified text includes raw bytes (@pxref{Text Representations}),
@code{select-safe-coding-system} suggests @code{raw-text} for its encoding.

If @var{default-coding-system} is non-@code{nil}, that is the first coding
system to try; if that can handle the text, @code{select-safe-coding-system}
returns that coding system.  It can also be a list of coding systems; then
the function tries each of them one by one.  After trying all of them, it
next tries the current buffer's value of @code{buffer-file-coding-system}
(if it is not @code{undecided}), then the default value of
@code{buffer-file-coding-system} and finally the user's most preferred
coding system, which the user can set using the command
@code{prefer-coding-system} (@pxref{Recognize Coding,, Recognizing Coding
Systems, emacs, The GNU Emacs Manual}).

If one of those coding systems can safely encode all the specified text,
@code{select-safe-coding-system} chooses it and returns it.  Otherwise, it
asks the user to choose from a list of coding systems which can encode all
the text, and returns the user's choice.

@var{default-coding-system} can also be a list whose first element is t and
whose other elements are coding systems.  Then, if no coding system in the
list can handle the text, @code{select-safe-coding-system} queries the user
immediately, without trying any of the three alternatives described above.

The optional argument @var{accept-default-p}, if non-@code{nil}, should be a
function to determine whether a coding system selected without user
interaction is acceptable. @code{select-safe-coding-system} calls this
function with one argument, the base coding system of the selected coding
system.  If @var{accept-default-p} returns @code{nil},
@code{select-safe-coding-system} rejects the silently selected coding
system, and asks the user to select a coding system from a list of possible
candidates.

@vindex select-safe-coding-system-accept-default-p
If the variable @code{select-safe-coding-system-accept-default-p} is
non-@code{nil}, it should be a function taking a single argument.  It is
used in place of @var{accept-default-p}, overriding any value supplied for
this argument.

As a final step, before returning the chosen coding system,
@code{select-safe-coding-system} checks whether that coding system is
consistent with what would be selected if the contents of the region were
read from a file.  (If not, this could lead to data corruption in a file
subsequently re-visited and edited.)  Normally,
@code{select-safe-coding-system} uses @code{buffer-file-name} as the file
for this purpose, but if @var{file} is non-@code{nil}, it uses that file
instead (this can be relevant for @code{write-region} and similar
functions).  If it detects an apparent inconsistency,
@code{select-safe-coding-system} queries the user before selecting the
coding system.
@end defun

  Here are two functions you can use to let the user specify a coding system,
with completion.  @xref{Completion}.

@defun read-coding-system prompt &optional default
This function reads a coding system using the minibuffer, prompting with
string @var{prompt}, and returns the coding system name as a symbol.  If the
user enters null input, @var{default} specifies which coding system to
return.  It should be a symbol or a string.
@end defun

@defun read-non-nil-coding-system prompt
This function reads a coding system using the minibuffer, prompting with
string @var{prompt}, and returns the coding system name as a symbol.  If the
user tries to enter null input, it asks the user to try again.  @xref{Coding
Systems}.
@end defun

@node Default Coding Systems
@subsection Default Coding Systems
@cindex default coding system
@cindex coding system, automatically determined

  This section describes variables that specify the default coding system for
certain files or when running certain subprograms, and the function that I/O
operations use to access them.

  The idea of these variables is that you set them once and for all to the
defaults you want, and then do not change them again.  To specify a
particular coding system for a particular operation in a Lisp program, don't
change these variables; instead, override them using
@code{coding-system-for-read} and @code{coding-system-for-write}
(@pxref{Specifying Coding Systems}).

@cindex file contents, and default coding system
@defopt auto-coding-regexp-alist
This variable is an alist of text patterns and corresponding coding
systems. Each element has the form @code{(@var{regexp}
. @var{coding-system})}; a file whose first few kilobytes match @var{regexp}
is decoded with @var{coding-system} when its contents are read into a
buffer.  The settings in this alist take priority over @code{coding:} tags
in the files and the contents of @code{file-coding-system-alist} (see
below).  The default value is set so that Emacs automatically recognizes
mail files in Babyl format and reads them with no code conversions.
@end defopt

@cindex file name, and default coding system
@defopt file-coding-system-alist
This variable is an alist that specifies the coding systems to use for
reading and writing particular files.  Each element has the form
@code{(@var{pattern} . @var{coding})}, where @var{pattern} is a regular
expression that matches certain file names.  The element applies to file
names that match @var{pattern}.

The @sc{cdr} of the element, @var{coding}, should be either a coding system,
a cons cell containing two coding systems, or a function name (a symbol with
a function definition).  If @var{coding} is a coding system, that coding
system is used for both reading the file and writing it.  If @var{coding} is
a cons cell containing two coding systems, its @sc{car} specifies the coding
system for decoding, and its @sc{cdr} specifies the coding system for
encoding.

If @var{coding} is a function name, the function should take one argument, a
list of all arguments passed to @code{find-operation-coding-system}.  It
must return a coding system or a cons cell containing two coding systems.
This value has the same meaning as described above.

If @var{coding} (or what returned by the above function) is
@code{undecided}, the normal code-detection is performed.
@end defopt

@defopt auto-coding-alist
This variable is an alist that specifies the coding systems to use for
reading and writing particular files.  Its form is like that of
@code{file-coding-system-alist}, but, unlike the latter, this variable takes
priority over any @code{coding:} tags in the file.
@end defopt

@cindex program name, and default coding system
@defvar process-coding-system-alist
This variable is an alist specifying which coding systems to use for a
subprocess, depending on which program is running in the subprocess.  It
works like @code{file-coding-system-alist}, except that @var{pattern} is
matched against the program name used to start the subprocess.  The coding
system or systems specified in this alist are used to initialize the coding
systems used for I/O to the subprocess, but you can specify other coding
systems later using @code{set-process-coding-system}.
@end defvar

  @strong{Warning:} Coding systems such as @code{undecided}, which determine
the coding system from the data, do not work entirely reliably with
asynchronous subprocess output.  This is because Emacs handles asynchronous
subprocess output in batches, as it arrives.  If the coding system leaves
the character code conversion unspecified, or leaves the end-of-line
conversion unspecified, Emacs must try to detect the proper conversion from
one batch at a time, and this does not always work.

  Therefore, with an asynchronous subprocess, if at all possible, use a coding
system which determines both the character code conversion and the end of
line conversion---that is, one like @code{latin-1-unix}, rather than
@code{undecided} or @code{latin-1}.

@cindex port number, and default coding system
@cindex network service name, and default coding system
@defvar network-coding-system-alist
This variable is an alist that specifies the coding system to use for
network streams.  It works much like @code{file-coding-system-alist}, with
the difference that the @var{pattern} in an element may be either a port
number or a regular expression.  If it is a regular expression, it is
matched against the network service name used to open the network stream.
@end defvar

@defvar default-process-coding-system
This variable specifies the coding systems to use for subprocess (and
network stream) input and output, when nothing else specifies what to do.

The value should be a cons cell of the form @code{(@var{input-coding}
. @var{output-coding})}.  Here @var{input-coding} applies to input from the
subprocess, and @var{output-coding} applies to output to it.
@end defvar

@cindex default coding system, functions to determine
@defopt auto-coding-functions
This variable holds a list of functions that try to determine a coding
system for a file based on its undecoded contents.

Each function in this list should be written to look at text in the current
buffer, but should not modify it in any way.  The buffer will contain
undecoded text of parts of the file.  Each function should take one
argument, @var{size}, which tells it how many characters to look at,
starting from point.  If the function succeeds in determining a coding
system for the file, it should return that coding system.  Otherwise, it
should return @code{nil}.

If a file has a @samp{coding:} tag, that takes precedence, so these
functions won't be called.
@end defopt

@defun find-auto-coding filename size
This function tries to determine a suitable coding system for
@var{filename}.  It examines the buffer visiting the named file, using the
variables documented above in sequence, until it finds a match for one of
the rules specified by these variables.  It then returns a cons cell of the
form @code{(@var{coding} . @var{source})}, where @var{coding} is the coding
system to use and @var{source} is a symbol, one of @code{auto-coding-alist},
@code{auto-coding-regexp-alist}, @code{:coding}, or
@code{auto-coding-functions}, indicating which one supplied the matching
rule.  The value @code{:coding} means the coding system was specified by the
@code{coding:} tag in the file (@pxref{Specify Coding,, coding tag, emacs,
The GNU Emacs Manual}).  The order of looking for a matching rule is
@code{auto-coding-alist} first, then @code{auto-coding-regexp-alist}, then
the @code{coding:} tag, and lastly @code{auto-coding-functions}.  If no
matching rule was found, the function returns @code{nil}.

The second argument @var{size} is the size of text, in characters, following
point.  The function examines text only within @var{size} characters after
point.  Normally, the buffer should be positioned at the beginning when this
function is called, because one of the places for the @code{coding:} tag is
the first one or two lines of the file; in that case, @var{size} should be
the size of the buffer.
@end defun

@defun set-auto-coding filename size
This function returns a suitable coding system for file @var{filename}.  It
uses @code{find-auto-coding} to find the coding system.  If no coding system
could be determined, the function returns @code{nil}.  The meaning of the
argument @var{size} is like in @code{find-auto-coding}.
@end defun

@defun find-operation-coding-system operation &rest arguments
This function returns the coding system to use (by default) for performing
@var{operation} with @var{arguments}.  The value has this form:

@example
(@var{decoding-system} . @var{encoding-system})
@end example

The first element, @var{decoding-system}, is the coding system to use for
decoding (in case @var{operation} does decoding), and @var{encoding-system}
is the coding system for encoding (in case @var{operation} does encoding).

The argument @var{operation} is a symbol; it should be one of
@code{write-region}, @code{start-process}, @code{call-process},
@code{call-process-region}, @code{insert-file-contents}, or
@code{open-network-stream}.  These are the names of the Emacs I/O primitives
that can do character code and eol conversion.

The remaining arguments should be the same arguments that might be given to
the corresponding I/O primitive.  Depending on the primitive, one of those
arguments is selected as the @dfn{target}.  For example, if @var{operation}
does file I/O, whichever argument specifies the file name is the target.
For subprocess primitives, the process name is the target.  For
@code{open-network-stream}, the target is the service name or port number.

Depending on @var{operation}, this function looks up the target in
@code{file-coding-system-alist}, @code{process-coding-system-alist}, or
@code{network-coding-system-alist}.  If the target is found in the alist,
@code{find-operation-coding-system} returns its association in the alist;
otherwise it returns @code{nil}.

If @var{operation} is @code{insert-file-contents}, the argument
corresponding to the target may be a cons cell of the form
@code{(@var{filename} . @var{buffer})}.  In that case, @var{filename} is a
file name to look up in @code{file-coding-system-alist}, and @var{buffer} is
a buffer that contains the file's contents (not yet decoded).  If
@code{file-coding-system-alist} specifies a function to call for this file,
and that function needs to examine the file's contents (as it usually does),
it should examine the contents of @var{buffer} instead of reading the file.
@end defun

@node Specifying Coding Systems
@subsection Specifying a Coding System for One Operation
@cindex specify coding system
@cindex force coding system for operation
@cindex coding system for operation

  You can specify the coding system for a specific operation by binding the
variables @code{coding-system-for-read} and/or
@code{coding-system-for-write}.

@defvar coding-system-for-read
If this variable is non-@code{nil}, it specifies the coding system to use
for reading a file, or for input from a synchronous subprocess.

It also applies to any asynchronous subprocess or network stream, but in a
different way: the value of @code{coding-system-for-read} when you start the
subprocess or open the network stream specifies the input decoding method
for that subprocess or network stream.  It remains in use for that
subprocess or network stream unless and until overridden.

The right way to use this variable is to bind it with @code{let} for a
specific I/O operation.  Its global value is normally @code{nil}, and you
should not globally set it to any other value.  Here is an example of the
right way to use the variable:

@example
;; @r{Read the file with no character code conversion.}
(let ((coding-system-for-read 'no-conversion))
  (insert-file-contents filename))
@end example

When its value is non-@code{nil}, this variable takes precedence over all
other methods of specifying a coding system to use for input, including
@code{file-coding-system-alist}, @code{process-coding-system-alist} and
@code{network-coding-system-alist}.
@end defvar

@defvar coding-system-for-write
This works much like @code{coding-system-for-read}, except that it applies
to output rather than input.  It affects writing to files, as well as
sending output to subprocesses and net connections.

When a single operation does both input and output, as do
@code{call-process-region} and @code{start-process}, both
@code{coding-system-for-read} and @code{coding-system-for-write} affect it.
@end defvar

@defopt inhibit-eol-conversion
When this variable is non-@code{nil}, no end-of-line conversion is done, no
matter which coding system is specified.  This applies to all the Emacs I/O
and subprocess primitives, and to the explicit encoding and decoding
functions (@pxref{Explicit Encoding}).
@end defopt

@cindex priority order of coding systems
@cindex coding systems, priority
  Sometimes, you need to prefer several coding systems for some operation,
rather than fix a single one.  Emacs lets you specify a priority order for
using coding systems.  This ordering affects the sorting of lists of coding
systems returned by functions such as @code{find-coding-systems-region}
(@pxref{Lisp and Coding Systems}).

@defun coding-system-priority-list &optional highestp
This function returns the list of coding systems in the order of their
current priorities.  Optional argument @var{highestp}, if non-@code{nil},
means return only the highest priority coding system.
@end defun

@defun set-coding-system-priority &rest coding-systems
This function puts @var{coding-systems} at the beginning of the priority
list for coding systems, thus making their priority higher than all the
rest.
@end defun

@defmac with-coding-priority coding-systems &rest body@dots{}
This macro execute @var{body}, like @code{progn} does (@pxref{Sequencing,
progn}), with @var{coding-systems} at the front of the priority list for
coding systems.  @var{coding-systems} should be a list of coding systems to
prefer during execution of @var{body}.
@end defmac

@node Explicit Encoding
@subsection Explicit Encoding and Decoding
@cindex encoding in coding systems
@cindex decoding in coding systems

  All the operations that transfer text in and out of Emacs have the ability
to use a coding system to encode or decode the text.  You can also
explicitly encode and decode text using the functions in this section.

  The result of encoding, and the input to decoding, are not ordinary text.
They logically consist of a series of byte values; that is, a series of
@acronym{ASCII} and eight-bit characters.  In unibyte buffers and strings,
these characters have codes in the range 0 through #xFF (255).  In a
multibyte buffer or string, eight-bit characters have character codes higher
than #xFF (@pxref{Text Representations}), but Emacs transparently converts
them to their single-byte values when you encode or decode such text.

  The usual way to read a file into a buffer as a sequence of bytes, so you
can decode the contents explicitly, is with
@code{insert-file-contents-literally} (@pxref{Reading from Files});
alternatively, specify a non-@code{nil} @var{rawfile} argument when visiting
a file with @code{find-file-noselect}.  These methods result in a unibyte
buffer.

  The usual way to use the byte sequence that results from explicitly encoding
text is to copy it to a file or process---for example, to write it with
@code{write-region} (@pxref{Writing to Files}), and suppress encoding by
binding @code{coding-system-for-write} to @code{no-conversion}.

  Here are the functions to perform explicit encoding or decoding.  The
encoding functions produce sequences of bytes; the decoding functions are
meant to operate on sequences of bytes.  All of these functions discard text
properties.  They also set @code{last-coding-system-used} to the precise
coding system they used.

@deffn Command encode-coding-region start end coding-system &optional destination
This command encodes the text from @var{start} to @var{end} according to
coding system @var{coding-system}.  Normally, the encoded text replaces the
original text in the buffer, but the optional argument @var{destination} can
change that.  If @var{destination} is a buffer, the encoded text is inserted
in that buffer after point (point does not move); if it is @code{t}, the
command returns the encoded text as a unibyte string without inserting it.

If encoded text is inserted in some buffer, this command returns the length
of the encoded text.

The result of encoding is logically a sequence of bytes, but the buffer
remains multibyte if it was multibyte before, and any 8-bit bytes are
converted to their multibyte representation (@pxref{Text Representations}).

@cindex @code{undecided} coding-system, when encoding
Do @emph{not} use @code{undecided} for @var{coding-system} when encoding
text, since that may lead to unexpected results.  Instead, use
@code{select-safe-coding-system} (@pxref{User-Chosen Coding Systems,
select-safe-coding-system}) to suggest a suitable encoding, if there's no
obvious pertinent value for @var{coding-system}.
@end deffn

@defun encode-coding-string string coding-system &optional nocopy buffer
This function encodes the text in @var{string} according to coding system
@var{coding-system}.  It returns a new string containing the encoded text,
except when @var{nocopy} is non-@code{nil}, in which case the function may
return @var{string} itself if the encoding operation is trivial.  The result
of encoding is a unibyte string.
@end defun

@deffn Command decode-coding-region start end coding-system &optional destination
This command decodes the text from @var{start} to @var{end} according to
coding system @var{coding-system}.  To make explicit decoding useful, the
text before decoding ought to be a sequence of byte values, but both
multibyte and unibyte buffers are acceptable (in the multibyte case, the raw
byte values should be represented as eight-bit characters).  Normally, the
decoded text replaces the original text in the buffer, but the optional
argument @var{destination} can change that.  If @var{destination} is a
buffer, the decoded text is inserted in that buffer after point (point does
not move); if it is @code{t}, the command returns the decoded text as a
multibyte string without inserting it.

If decoded text is inserted in some buffer, this command returns the length
of the decoded text.

This command puts a @code{charset} text property on the decoded text.  The
value of the property states the character set used to decode the original
text.
@end deffn

@defun decode-coding-string string coding-system &optional nocopy buffer
This function decodes the text in @var{string} according to
@var{coding-system}.  It returns a new string containing the decoded text,
except when @var{nocopy} is non-@code{nil}, in which case the function may
return @var{string} itself if the decoding operation is trivial.  To make
explicit decoding useful, the contents of @var{string} ought to be a unibyte
string with a sequence of byte values, but a multibyte string is also
acceptable (assuming it contains 8-bit bytes in their multibyte form).

If optional argument @var{buffer} specifies a buffer, the decoded text is
inserted in that buffer after point (point does not move).  In this case,
the return value is the length of the decoded text.

@cindex @code{charset}, text property
This function puts a @code{charset} text property on the decoded text.  The
value of the property states the character set used to decode the original
text:

@example
@group
(decode-coding-string "Gr\374ss Gott" 'latin-1)
     @result{} #("Gr@"uss Gott" 0 9 (charset iso-8859-1))
@end group
@end example
@end defun

@defun decode-coding-inserted-region from to filename &optional visit beg end replace
This function decodes the text from @var{from} to @var{to} as if it were
being read from file @var{filename} using @code{insert-file-contents} using
the rest of the arguments provided.

The normal way to use this function is after reading text from a file
without decoding, if you decide you would rather have decoded it.  Instead
of deleting the text and reading it again, this time with decoding, you can
call this function.
@end defun

@node Terminal I/O Encoding
@subsection Terminal I/O Encoding

  Emacs can use coding systems to decode keyboard input and encode terminal
output.  This is useful for terminals that transmit or display text using a
particular encoding, such as Latin-1.  Emacs does not set
@code{last-coding-system-used} when encoding or decoding terminal I/O.

@defun keyboard-coding-system &optional terminal
This function returns the coding system used for decoding keyboard input
from @var{terminal}.  A value of @code{no-conversion} means no decoding is
done.  If @var{terminal} is omitted or @code{nil}, it means the selected
frame's terminal.  @xref{Multiple Terminals}.
@end defun

@deffn Command set-keyboard-coding-system coding-system &optional terminal
This command specifies @var{coding-system} as the coding system to use for
decoding keyboard input from @var{terminal}.  If @var{coding-system} is
@code{nil}, that means not to decode keyboard input.  If @var{terminal} is a
frame, it means that frame's terminal; if it is @code{nil}, that means the
currently selected frame's terminal.  @xref{Multiple Terminals}.
@end deffn

@defun terminal-coding-system &optional terminal
This function returns the coding system that is in use for encoding terminal
output from @var{terminal}.  A value of @code{no-conversion} means no
encoding is done.  If @var{terminal} is a frame, it means that frame's
terminal; if it is @code{nil}, that means the currently selected frame's
terminal.
@end defun

@deffn Command set-terminal-coding-system coding-system &optional terminal
This command specifies @var{coding-system} as the coding system to use for
encoding terminal output from @var{terminal}.  If @var{coding-system} is
@code{nil}, that means not to encode terminal output.  If @var{terminal} is
a frame, it means that frame's terminal; if it is @code{nil}, that means the
currently selected frame's terminal.
@end deffn

@node Input Methods
@section Input Methods
@cindex input methods

  @dfn{Input methods} provide convenient ways of entering non-@acronym{ASCII}
characters from the keyboard.  Unlike coding systems, which translate
non-@acronym{ASCII} characters to and from encodings meant to be read by
programs, input methods provide human-friendly commands.  (@xref{Input
Methods,,, emacs, The GNU Emacs Manual}, for information on how users use
input methods to enter text.)  How to define input methods is not yet
documented in this manual, but here we describe how to use them.

  Each input method has a name, which is currently a string; in the future,
symbols may also be usable as input method names.

@defvar current-input-method
This variable holds the name of the input method now active in the current
buffer.  (It automatically becomes local in each buffer when set in any
fashion.)  It is @code{nil} if no input method is active in the buffer now.
@end defvar

@defopt default-input-method
This variable holds the default input method for commands that choose an
input method.  Unlike @code{current-input-method}, this variable is normally
global.
@end defopt

@deffn Command set-input-method input-method
This command activates input method @var{input-method} for the current
buffer.  It also sets @code{default-input-method} to @var{input-method}.  If
@var{input-method} is @code{nil}, this command deactivates any input method
for the current buffer.
@end deffn

@defun read-input-method-name prompt &optional default inhibit-null
This function reads an input method name with the minibuffer, prompting with
@var{prompt}.  If @var{default} is non-@code{nil}, that is returned by
default, if the user enters empty input.  However, if @var{inhibit-null} is
non-@code{nil}, empty input signals an error.

The returned value is a string.
@end defun

@defvar input-method-alist
This variable defines all the supported input methods.  Each element defines
one input method, and should have the form:

@example
(@var{input-method} @var{language-env} @var{activate-func}
 @var{title} @var{description} @var{args}...)
@end example

Here @var{input-method} is the input method name, a string;
@var{language-env} is another string, the name of the language environment
this input method is recommended for.  (That serves only for documentation
purposes.)

@var{activate-func} is a function to call to activate this method.  The
@var{args}, if any, are passed as arguments to @var{activate-func}.  All
told, the arguments to @var{activate-func} are @var{input-method} and the
@var{args}.

@var{title} is a string to display in the mode line while this method is
active.  @var{description} is a string describing this method and what it is
good for.
@end defvar

  The fundamental interface to input methods is through the variable
@code{input-method-function}.  @xref{Reading One Event}, and @ref{Invoking
the Input Method}.

@node Locales
@section Locales
@cindex locale

  POSIX defines a concept of ``locales'' which control which language to use
in language-related features.  These Emacs variables control how Emacs
interacts with these features.

@defvar locale-coding-system
@cindex keyboard input decoding on X
This variable specifies the coding system to use for decoding system error
messages and---on X Window system only---keyboard input, for encoding the
format argument to @code{format-time-string}, and for decoding the return
value of @code{format-time-string}.
@end defvar

@defvar system-messages-locale
This variable specifies the locale to use for generating system error
messages.  Changing the locale can cause messages to come out in a different
language or in a different orthography.  If the variable is @code{nil}, the
locale is specified by environment variables in the usual POSIX fashion.
@end defvar

@defvar system-time-locale
This variable specifies the locale to use for formatting time values.
Changing the locale can cause messages to appear according to the
conventions of a different language.  If the variable is @code{nil}, the
locale is specified by environment variables in the usual POSIX fashion.
@end defvar

@defun locale-info item
This function returns locale data @var{item} for the current POSIX locale,
if available.  @var{item} should be one of these symbols:

@table @code
@item codeset
Return the character set as a string (locale item @code{CODESET}).

@item days
Return a 7-element vector of day names (locale items @code{DAY_1} through
@code{DAY_7});

@item months
Return a 12-element vector of month names (locale items @code{MON_1} through
@code{MON_12}).

@item paper
Return a list @code{(@var{width} @var{height})} for the default paper size
measured in millimeters (locale items @code{PAPER_WIDTH} and
@code{PAPER_HEIGHT}).
@end table

If the system can't provide the requested information, or if @var{item} is
not one of those symbols, the value is @code{nil}.  All strings in the
return value are decoded using @code{locale-coding-system}.
@xref{Locales,,, libc, The GNU Libc Manual}, for more information about
locales and locale items.
@end defun
