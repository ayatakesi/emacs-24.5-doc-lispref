@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Numbers
@chapter 数値
@cindex integers
@cindex numbers

  GNU Emacsは2つの数値データ型 --- @dfn{整数(integers)}と@dfn{浮動小数点数(floating-point
numbers)}をサポートします。整数は@minus{}3、0、7、13、511などの整数です。浮動小数点数は@minus{}4.5、0.0、2.71828などの小数部をもちます・これらは指数記数法でも表現できます
---
@samp{1.5e2}は@samp{150.0}と同じです。ここで@samp{e2}は10の2乗をあらわし、それに1.5を乗じるという意味です。整数計算は正確であり、オーバーフローするときもあります。浮動小数点数の計算においては、数値は固定された精度をもつため、、しばしば丸め誤差(rounding
errors)を引き起こします。

@menu
* Integer Basics::           整数の表現と範囲。
* Float Basics::             浮動少数の表現と範囲。
* Predicates on Numbers::    数にたいするテスト。
* Comparison of Numbers::    同一性と非同一性の述語。
* Numeric Conversions::      浮動小数点数から整数、またはその逆の変換。
* Arithmetic Operations::    加減乗除の方法。
* Rounding Operations::      浮動小数点数の明示的な丸め。
* Bitwise Operations::       論理的なand、or、not、shift。
* Math Functions::           三角法、指数、対数関数。
* Random Numbers::           予測可能または不可能な乱数の取得。
@end menu

@node Integer Basics
@section 整数の基礎

  整数の値の範囲はマシンに依存します。最小の範囲は@minus{}536,870,912から536,870,911(30ビット長の
@ifnottex
@minus{}2**29
@end ifnottex
@tex
@math{-2^{29}}
@end tex
から
@ifnottex
2**29 @minus{} 1)
@end ifnottex
@tex
@math{2^{29}-1})
@end tex
ですが、多くのマシンはこれより広い範囲を提供します。このチャプターの例の多くは、最小の整数は30ビット長であると仮定します。
@cindex overflow

  Lispリーダーは、(オプションで最初の符号記号と、最後のピリオドをともなう)数字のシーケンスとして整数を読み取ります。Emacsの範囲を超える整数は、浮動小数点数として扱われます。

@example
 1               ; @r{整数1。}
 1.              ; @r{整数1。}
+1               ; @r{これも整数1。}
-1               ; @r{整数@minus{}1。}
 9000000000000000000
                 ; @r{浮動小数点数9e18.}
 0               ; @r{整数0}
-0               ; @r{整数0}
@end example

@cindex integers in specific radix
@cindex radix for reading an integer
@cindex base for reading an integer
@cindex hex numbers
@cindex octal numbers
@cindex reading numbers in hex, octal, and binary
  基数が10以外の整数の構文は、@samp{#}の後に基数を指定する文字 ---
2進は@samp{b}、8進は@samp{o}、16進は@samp{x}、@samp{@var{radix}r}は基数@var{radix} ---
を記述します。基数を指定する文字の大文字小文字は区別されません。したがって@samp{#b@var{integer}}は@var{integer}を2進として読み取り、@samp{#@var{radix}r@var{integer}}は@var{integer}を基数@var{radix}として読み取ります。@var{radix}に指定できる値は2から36です。たとえば:

@example
#b101100 @result{} 44
#o54 @result{} 44
#x2c @result{} 44
#24r1k @result{} 44
@end example

  整数にたいして処理を行なうさまざまな関数、特にビット演算(@ref{Bitwise
Operations}を参照してください)を理解するためには、数を2進形式で見ることが助けになることがしばしばあります。

  30ビットの2進では、10進数の整数5は以下のようになります:

@example
0000...000101 (全部で30ビット)
@end example

@noindent
(@samp{...}は30ビットのワードを満たすのに充分なビットを意味し、この場合の@samp{...}は12個の0ビットを意味します。以下の例でも、2進の整数を読みやすくするために、@samp{...}の表記を使用します)

  整数の@minus{}1は、以下のようになります:

@example
1111...111111 (全部で30ビット)
@end example

@noindent
@cindex two's complement
@minus{}1は30個の1で表現されます(これは@dfn{2の補数}表記と呼ばれます)。

  @minus{}1から4を減じることにより、負の整数@minus{}5が得られます。10進の整数4は、2進では100です。したがって、@minus{}5は以下のようになります:

@example
1111...111011 (全部で30ビット)
@end example

  この実装では、0ビットの2進の最大は、10進の536,870,911です。これは2進では以下のようになります:

@example
0111...111111 (全部で30ビット)
@end example

  算術関数は整数が範囲の外かをチェックしないので、536,870,911に1を加えると、その値は負の整数@minus{}536,870,912になります:

@example
(+ 1 536870911)
     @result{} -536870912
     @result{} 1000...000000 (全部で30ビット)
@end example

  このチャプターで説明する多くの関数は、数字の位置として引数にマーカー(@ref{Markers}を参照してください)を受け取ります。そのような関数にたいする実際の引数は数字かマーカーなので、わたしたちはこれらの引数に@var{number-or-marker}という名前を与えることがあります。引数の値がマーカーの場合、マーカーの位置が使用され、マーカーのバッファーは無視されます。

@cindex largest Lisp integer
@cindex maximum Lisp integer
@defvar most-positive-fixnum
この変数の値は、Emacs Lispが扱える整数の最大値です。典型的な値は32ビットでは
@ifnottex
2**29 @minus{} 1
@end ifnottex
@tex
@math{2^{29}-1}
@end tex
、64ビットでは
@ifnottex
2**61 @minus{} 1
@end ifnottex
@tex
@math{2^{61}-1}
@end tex
です。
@end defvar

@cindex smallest Lisp integer
@cindex minimum Lisp integer
@defvar most-negative-fixnum
この変数の値は、Emacs Lispが扱える最小の整数です。これは負の整数です。典型的な値は32ビットでは
@ifnottex
@minus{}2**29
@end ifnottex
@tex
@math{-2^{29}}
@end tex
、64ビットでは
@ifnottex
@minus{}2**61、
@end ifnottex
@tex
@math{-2^{61}}、
@end tex
です。
@end defvar

  Emacs
Lispでは、テキスト文字は整数により表現されます。0から@code{(max-char)}までの整数は、有効な文字として判断されます。@ref{Character
Codes}を参照してください。

@node Float Basics
@section 浮動小数点数の基礎

@cindex @acronym{IEEE} floating point
  浮動小数点数は整数ではない数を表現するのに便利です。浮動小数点数の範囲は、使用しているマシンでのCデータ型の@code{double}と同じ範囲です。現在Emacsでサポートされているすべてのコンピューターでは、これは倍精度の@acronym{IEEE}浮動小数点数です。

  浮動小数点数にたいする入力構文は、小数点と指数のどちらか1つ、または両方が必要とします。オプションの符号(@samp{+}か@samp{-})は、その数字と指数の前に記述します。たとえば、@samp{1500.0}、@samp{+15e2}、@samp{15.0e+2}、@samp{+1500000e-3}、@samp{.15e4}は、値が1500の浮動小数点数を記述する5つの方法です。これらはすべて等価です。Common
Lispと同様、Emacs
Lispは、浮動小数点数の小数点の後に、少なくとも1つの数字を必要とします。@samp{1500.}は整数であり、浮動小数点数ではありません。

  Emacs
Lispは@code{-0.0}を、@code{equal}と@code{=}に関して、通常の0と数学的に同じものとして扱います。これは、(他の処理がこれらを区別するとしても、@code{-0.0}と@code{0.0}は数学的に等しいとする)@acronym{IEEE}浮動小数点数規格にしたがっています。

@cindex positive infinity
@cindex negative infinity
@cindex infinity
@cindex NaN
  @acronym{IEEE}浮動小数点数規格は、浮動小数点数として、正の無限大と、負の無限大をサポートします。この規格はNaNまたは``not-a-number(数字ではない)''と呼ばれる値クラスも提供します。数学関数は、正しい答えが存在しないような場合に、このような値をreturnします。たとえば@code{(/
0.0 0.0)}はNaNをreturnします。NaN値に符号がついていたとしても、実用的な目的にたいして、Emacs
Lispにおける異なるNaN値に、意味のある違いはありません。

以下は、これらの特別な浮動小数点数にたいする入力構文です:

@table @asis
@item infinity
@samp{1.0e+INF}と@samp{-1.0e+INF}
@item not-a-number
@samp{0.0e+NaN}と@samp{-0.0e+NaN}
@end table

  以下の関数は浮動小数点数を扱うために特化したものです:

@defun isnan x
この述語は浮動小数引数がNaNのときは@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun frexp x
この関数はコンスセル@code{(@var{s}
.
@var{e})}をreturnします。ここで@var{s}と@var{e}は、浮動小数点数のsignificand(浮動小数点数を2の指数表現したときの仮引数)と指数です。

@var{x}が有限の場合、@var{s}は0.5以上1.0未満の浮動小数点数で、@var{e}は整数で、
@ifnottex
@var{x} = @var{s} * 2**@var{e}です。
@end ifnottex
@tex
@math{x = s 2^e}です。
@end tex
@var{x}が0または無限の場合、@var{s}は@var{x}と等しくなります。@var{x}がNaNの場合は、@var{s}もNaNです。@var{x}が0の場合、@var{e}は0です。
@end defun

@defun ldexp sig &optional exp
この関数は、significandが@var{sig}、指数が@var{exp}の浮動小数点数をreturnします。
@end defun

@defun copysign x1 x2
koの関数は@var{x2}の、@var{x1}の値にコピーして、その結果をreturnします。@var{x1}と@var{x2}は浮動小数でなければなりません。
@end defun

@defun logb x
この関数は@var{x}の2進指数をreturnします。より正確にいうと、この値は@math{|x|}の2を底とする対数を、整数に切り下げたものです。

@example
(logb 10)
     @result{} 3
(logb 10.0e20)
     @result{} 69
@end example
@end defun

@node Predicates on Numbers
@section 数値のための述語
@cindex predicates for numbers

  このセクションの関数は、数または数の特定の型にたいしてテストを行ないます。関数@code{integerp}および@code{floatp}は、引き数として任意のLispオブジェクト型をとることができます(そうでないと、あまり使用する機会がありません)。しかし、述語@code{zerop}は、引き数として数を要求します。@ref{Predicates
on Markers}の@code{integer-or-marker-p}と@code{number-or-marker-p}も参照してください。

@defun floatp object
この述語は、引数が浮動小数かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun integerp object
この述語は引数が整数かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun numberp object
この述語は引数が数(整数か浮動小数)かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun natnump object
@cindex natural numbers
この述語(名前は``natural
number(自然数)''が由来です)は、引数が正の整数かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。0は整数と判断されます。

@findex wholenump
@code{wholenump}は、@code{natnump}にたいするシノニムです。
@end defun

@defun zerop number
この述語は、引数が0かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。引数は数でなければなりません。

@code{(zerop x)}は、@code{(= x 0)}と等価です。
@end defun

@node Comparison of Numbers
@section 数値の比較
@cindex number comparison
@cindex comparing numbers

  数が数値的に等しいかテストするためには、@code{eq}ではなく、通常は@code{=}を使用するべきです。同じ数値をもつ、多くの浮動小数オブジェクトが存在するかもしれません。これらを比較するのに@code{eq}を使用する場合、これは2つの値が同じオブジェクトかどうかをテストすることになります。対照的に、@code{=}はオブジェクトの数値的な値だけを比較します。

  Emacs
Lispでは、それぞれの整数はは、一意なLispオブジェクトです。したがって、整数に関しては、@code{eq}は@code{=}と同じです。未知の整数の値を比較するのに、@code{eq}を使用するのが便利な場合があります。なぜなら未知の値が数字でない場合でも、@code{eq}はエラーを報告しません。対照的に、引数が数でもマーカーでもない場合、@code{=}はエラーをシグナルします。しかし、整数の比較においてさえ、使用できる場合は@code{=}を使用するのが、よいプログラミング習慣です。

  数の比較において、2つの数が同じデータ型(どちらも整数、またはどちらも浮動小数)で、同じ値の場合は等しい数として扱う、@code{equal}のほうが便利なときもあります。対照的に、@code{=}は、整数と浮動小数点数を等しい数と扱うことができます。@ref{Equality
Predicates}を参照してください。

  他の欠点もあります。浮動小数演算は正確ではないので、浮動小数値を比較するのが悪いアイデアのときが、しばしばあります。通常は、近似的に等しいことをテストするほうがよいでしょう。以下はこれを行なう関数です:

@example
(defvar fuzz-factor 1.0e-6)
(defun approx-equal (x y)
  (or (= x y)
      (< (/ (abs (- x y))
            (max (abs x) (abs y)))
         fuzz-factor)))
@end example

@cindex CL note---integers vrs @code{eq}
@quotation
@b{Common Lispに関する注意: }Common
Lispは複数ワード整数を実装していて、2つの別の整数オブジェクトが、同じ数値的な値をもつことができるので、Common
Lispでの数の比較は、常に@code{=}が要求されます。Emacs
Lispの整数は範囲が制限されているため、与えられた値に対応する整数オブジェクトは、1つだけです。
@end quotation

@defun = number-or-marker &rest number-or-markers
この関数は、すべての引数が数値的に等しいかどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun eql value1 value2
この関数は@code{eq}と同様に振る舞いますが、引数が両方とも数のときは例外です。これは数を型と数値的な値により比較するので、@code{(eql
1.0 1)}は@code{nil}をreturnしますが、@code{(eql 1.0 1.0)}と@code{(eql 1
1)}は@code{t}をreturnします。
@end defun

@defun /= number-or-marker1 number-or-marker2
この関数は引数が数値的に等しいかどうかをテストして、もし異なる場合は@code{t}、等しい場合は@code{nil}をreturnします。
@end defun

@defun <  number-or-marker &rest number-or-markers
この関数は、各引数がそれぞれ、その後の引数より小さいかどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun <= number-or-marker &rest number-or-markers
この関数は、各引数がそれぞれ、その後の引数以下かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun > number-or-marker &rest number-or-markers
この関数は、各引数がそれぞれ、その後の引数より大きいかどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun >= number-or-marker &rest number-or-markers
この関数は、各引数がそれぞれ、その後の引数以上かどうかをテストして、もしそうなら@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@defun max number-or-marker &rest numbers-or-markers
この関数は引数の最大をreturnします。引数のどれかが浮動小数の場合は、たとえ最大が整数であっても、浮動小数として値がreturnされます。

@example
(max 20)
     @result{} 20
(max 1 2.5)
     @result{} 2.5
(max 1 3 2.5)
     @result{} 3.0
@end example
@end defun

@defun min number-or-marker &rest numbers-or-markers
この関数は引数の最小をreturnします。引数のどれかが浮動小数の場合は、たとえ最小が整数であっても、浮動小数として値がreturnされます。

@example
(min -4 1)
     @result{} -4
@end example
@end defun

@defun abs number
この関数は@var{number}の絶対値をreturnします。
@end defun

@node Numeric Conversions
@section 数値の変換
@cindex rounding in conversions
@cindex number conversions
@cindex converting numbers

整数を浮動少数に変換するには、関数@code{float}を使用します。

@defun float number
これは浮動小数に変換された@var{number}をreturnします。すでに@var{number}が浮動小数の場合、@code{float}はそれを変更せずにreturnします。
@end defun

  浮動小数点数を整数に変換する関数が4つあります。これらは浮動小数点数を丸める方法がことなります。これらはすべて引数@var{number}と、オプション引数として@var{divisor}を受け取ります。引数は両方とも整数または浮動小数点数です。@var{divisor}が@code{nil}のこともあります。@var{divisor}が@code{nil}または省略された場合、これらの関数は@var{number}を整数に変換するか、それが既に整数の場合は変更せずにreturnします。@var{divisor}が非@code{nil}の場合、これらの関数は@var{number}を@var{divisor}で除してから、その結果を整数に変換します。@var{divisor}が(整数か浮動小数かに関わらず)0の場合、Emacsは@code{arith-error}エラーをシグナルします。

@defun truncate number &optional divisor
これは0に向かって丸めることにより整数に変換した@var{number}をreturnします。

@example
(truncate 1.2)
     @result{} 1
(truncate 1.7)
     @result{} 1
(truncate -1.2)
     @result{} -1
(truncate -1.7)
     @result{} -1
@end example
@end defun

@defun floor number &optional divisor
これは、下方(負の無限大に向かって)に丸めることにより整数に変換した@var{number}をreturnします。

@var{divisor}が指定された場合、@code{mod}に相当する種類の除算演算を使用して、下方に丸めを行ないます。

@example
(floor 1.2)
     @result{} 1
(floor 1.7)
     @result{} 1
(floor -1.2)
     @result{} -2
(floor -1.7)
     @result{} -2
(floor 5.99 3)
     @result{} 1
@end example
@end defun

@defun ceiling number &optional divisor
これは、上方(正の無限大に向かって)に丸めることにより整数に変換した@var{number}をreturnします。

@example
(ceiling 1.2)
     @result{} 2
(ceiling 1.7)
     @result{} 2
(ceiling -1.2)
     @result{} -1
(ceiling -1.7)
     @result{} -1
@end example
@end defun

@defun round number &optional divisor
これは、もっとも近い整数に向かって丸めることにより整数に変換した@var{number}をreturnします。2つの整数から等距離にある値の丸めでは、偶数の整数をreturnします。

@example
(round 1.2)
     @result{} 1
(round 1.7)
     @result{} 2
(round -1.2)
     @result{} -1
(round -1.7)
     @result{} -2
@end example
@end defun

@node Arithmetic Operations
@section 算術演算
@cindex arithmetic operations

  Emacs
Lispは伝統的な4つの算術演算(加減乗除)、同様に剰余とmodulusの関数、および1加算、1減算の関数を提供します。@code{%}を除き、これらの各関数は引き数として整数か浮動小数を受け取り、浮動小数の引数がある場合は、浮動小数点数をreturnします。

  Emacs Lispの算術関数は整数のオーバーフローをチェックしません。したがって@code{(1+
536870911)}は@minus{}536870912に評価されるかもしれず、それはハードウェアーに依存します。

@defun 1+ number-or-marker
この関数は@var{number-or-marker} + 1をreturnします。例えば、

@example
(setq foo 4)
     @result{} 4
(1+ foo)
     @result{} 5
@end example

この関数はCの演算子@code{++}とは類似しません ---
この関数は変数をインクリメントしません。この関数は和を計算するだけです、したがって以下を続けて評価すると、

@example
foo
     @result{} 4
@end example

変数をインクリメントしたい場合は、以下のように@code{setq}を使用しなければなりません:

@example
(setq foo (1+ foo))
     @result{} 5
@end example
@end defun

@defun 1- number-or-marker
この関数は@var{number-or-marker} @minus{} 1をreturnします。
@end defun

@defun + &rest numbers-or-markers
この関数は引数すべてを加算します。引数を与えない場合、@code{+}は0をreturnします。

@example
(+)
     @result{} 0
(+ 1)
     @result{} 1
(+ 1 2 3 4)
     @result{} 10
@end example
@end defun

@defun - &optional number-or-marker &rest more-numbers-or-markers
@code{-}関数は2つの目的 --- 符号反転と減算
---を果たします。@code{-}に1つの引数を与えた場合、値は引数の符号を反転したものになります。複数の引数がある場合、@var{number-or-marker}から@var{more-numbers-or-markers}までの各値を蓄積的に減算します。引数がない場合、結果は0です。

@example
(- 10 1 2 3 4)
     @result{} 0
(- 10)
     @result{} -10
(-)
     @result{} 0
@end example
@end defun

@defun * &rest numbers-or-markers
この関数はすべての引数を乗じて、積をreturnします。引数がない場合、@code{*}は1をreturnします。

@example
(*)
     @result{} 1
(* 1)
     @result{} 1
(* 1 2 3 4)
     @result{} 24
@end example
@end defun

@defun / dividend divisor &rest divisors
この関数は@var{dividend}を@var{divisor}で除し、商をreturnします。追加の引数@var{divisors}がある場合、その後さらに@var{dividend}を@var{divisors}で順に除します。各引数は数かマーカーです。

すべての引数が整数の場合、結果は各除算の後に商を0へ向かって丸めることにより得られる整数になります。

@example
@group
(/ 6 2)
     @result{} 3
@end group
@group
(/ 5 2)
     @result{} 2
@end group
@group
(/ 5.0 2)
     @result{} 2.5
@end group
@group
(/ 5 2.0)
     @result{} 2.5
@end group
@group
(/ 5.0 2.0)
     @result{} 2.5
@end group
@group
(/ 25 3 2)
     @result{} 4
@end group
@group
(/ -17 6)
     @result{} -2
@end group
@end example

@cindex @code{arith-error} in division
整数を整数0で除すると、Emacsは@code{arith-error}エラー(@ref{Errors}を参照してください)をシグナルします。浮動小数の除算においては、0でない数を0で除することにより、正の無限大または負の無限大を得ます(@ref{Float
Basics}を参照してください)。
@end defun

@defun % dividend divisor
@cindex remainder
この関数は、@var{dividend}を@var{divisor}で除した後、その剰余を整数でreturnします。引数は整数かマーカーでなければなりません。

任意の2つの整数@var{dividend}と@var{divisor}にたいして、

@example
@group
(+ (% @var{dividend} @var{divisor})
   (* (/ @var{dividend} @var{divisor}) @var{divisor}))
@end group
@end example

@noindent
は、@var{divisor}が非0の場合は常に@var{dividend}と等しくなります。

@example
(% 9 4)
     @result{} 1
(% -9 4)
     @result{} -1
(% 9 -4)
     @result{} 1
(% -9 -4)
     @result{} -1
@end example
@end defun

@defun mod dividend divisor
@cindex modulus
この関数は@var{dividend}の@var{divisor}にたいするmodulo、言い換えると@var{dividend}を@var{divisor}で除した後の剰余(ただし符号は@var{divisor}と同じ)えおreturnします。引数は数かマーカーでなければなりません。

@code{%}とは異なり、@code{mod}は浮動小数の引数を許容します。これは商を整数に下方(負の無限大に向かって)へ丸めて、剰余を計算するのにこの商を使用します。

@var{divisor}が0のとき@code{mod}は、両方の引数が整数の場合は@code{arith-error}エラーをシグナルし、それ以外はNaNをreturnします。

@example
@group
(mod 9 4)
     @result{} 1
@end group
@group
(mod -9 4)
     @result{} 3
@end group
@group
(mod 9 -4)
     @result{} -3
@end group
@group
(mod -9 -4)
     @result{} -1
@end group
@group
(mod 5.5 2.5)
     @result{} .5
@end group
@end example

任意の2つの数@var{dividend}と@var{divisor}にたいして、

@example
@group
(+ (mod @var{dividend} @var{divisor})
   (* (floor @var{dividend} @var{divisor}) @var{divisor}))
@end group
@end example

@noindent
は常に@var{dividend}になります(ただし引数のどちらかが浮動小数の場合は丸め誤差の範囲内で等しく、@var{dividend}が整数で@var{divisor}が0の場合は@code{arith-error}となります)。@code{floor}については、@ref{Numeric
Conversions}を参照してください。
@end defun

@node Rounding Operations
@section 丸め処理
@cindex rounding without conversion

関数@code{ffloor}、@code{fceiling}、@code{fround}、@code{ftruncate}は、浮動小数の引数をとり、値が近くの整数であるような浮動少数をreturnします。@code{ffloor}は一番近い下方の整数、@code{fceiling}は一番近い上方の整数、@code{ftruncate}は0に向かう方向で一番近い整数、@code{fround}は一番近い整数をreturnします。

@defun ffloor float
この関数は@var{float}を次に小さい整数値に丸めて、その値を浮動小数点数としてreturnします。
@end defun

@defun fceiling float
この関数は@var{float}を次に大きい整数値に丸めて、その値を浮動小数点数としてreturnします。
@end defun

@defun ftruncate float
この関数は@var{float}を0方向の整数値に丸めて、その値を浮動小数点数としてreturnします。
@end defun

@defun fround float
この関数は@var{float}を一番近い整数値に丸めて、その値を浮動小数点数としてreturnします。2つの整数値との距離が等しい値にたいする丸めでは、偶数の整数をreturnします。
@end defun

@node Bitwise Operations
@section 整数のビット演算
@cindex bitwise arithmetic
@cindex logical arithmetic

  コンピューターの中では、整数は@dfn{ビット(bit:
0か1の数字)}のシーケンスである、2進数で表されます。ビット演算は、そのようなシーケンスの中の個々のビットに作用します。たとえば、@dfn{シフト(shifting)}はシーケンス全体を1つ以上左または右に移動して、``移動された''のと同じパターンを再生します。

  Emacs Lispのビット演算は、整数だけに適用されます。

@defun lsh integer1 count
@cindex logical shift
@code{lsh}は@dfn{logical
shift}の略で、@var{integer1}のビットを左に@var{count}個シフトします。@var{count}が負の場合は右にシフトし、シフトにより空きになったビットには0がセットされます。@var{count}
isが負の場合、@code{lsh}は左端(最上位)に0をシフトするので、@var{integer1}が負の場合でも、正の結果が生成されます。これと対照的なのが、以下で説明する@code{ash}です。

以下に、@code{lsh}でビットパターンの位置を1つ左にシフトする例を2つ紹介します。ここでは下位8ビットの2進パターンだけを表示しており、残りのビットはすべて0です。

@example
@group
(lsh 5 1)
     @result{} 10
;; @r{10進の5は、10進の10になります。}
00000101 @result{} 00001010

(lsh 7 1)
     @result{} 14
;; @r{10進の7は、10進の14になります。}
00000111 @result{} 00001110
@end group
@end example

@noindent
この例が説明するように、ビットパターンを左に1シフトすると、生成される数は、元の数の2倍になります。

ビットパターンを左に2シフトすると、以下(8ビット2進数)の結果が生成されます:

@example
@group
(lsh 3 2)
     @result{} 12
;; @r{10進の3は、10進の12になります。}
00000011 @result{} 00001100
@end group
@end example

一方、右に1シフトすると、以下のようになります:

@example
@group
(lsh 6 -1)
     @result{} 3
;; @r{10進の6は10進の3になります。}
00000110 @result{} 00000011
@end group

@group
(lsh 5 -1)
     @result{} 2
;; @r{10進の5は、10進の2になります。}
00000101 @result{} 00000010
@end group
@end example

@noindent
例が明かにするように、右に1シフトすることにより、正の整数の値が2で除され、下方に丸められます。

関数@code{lsh}は、他のEmacs
Lisp算術関数と同様、オーバーフローをチェックしないので、左にシフトすることにより上位ビットが捨てられ、その数の符号が変化するかもしれません。たとえば30ビットの実装では、536,870,911を左にシフトすると、@minus{}2が生成されます。

@example
(lsh 536870911 1)          ; @r{左シフト}
     @result{} -2
@end example

2進では、この引数は以下のようになります:

@example
@group
;; @r{10進の536,870,911}
0111...111111 (全部で30ビット)
@end group
@end example

@noindent
これを左にシフトすると、以下のようになります:

@example
@group
;; @r{10進の@minus{}2}
1111...111110 (全部で30ビット)
@end group
@end example
@end defun

@defun ash integer1 count
@cindex arithmetic shift
@code{ash} (@dfn{算術シフト(arithmetic
shift)})は、@var{integer1}の中のビット位置を左に@var{count}シフトします。@var{count}が負の場合は右にシフトします。

@code{ash}は@code{lsh}と同じ結果を与えますが、例外は@var{integer1}と@var{count}がとみに負の場合です。この場合、@code{lsh}は左にできる空きビットに0を置きますが、@code{ash}は1を置きます。

したがって@code{ash}でビットパターンの位置を右に1シフトすると、以下のようになります:

@example
@group
(ash -6 -1) @result{} -3
;; @r{10進の@minus{}6は、10進の@minus{}3になります}
1111...111010 (30 bits total)
     @result{}
1111...111101 (30 bits total)
@end group
@end example

対照的に、@code{lsh}でビットパターンの位置を1右にシフトすると、以下のようになります:

@example
@group
(lsh -6 -1) @result{} 536870909
;; @r{10進の@minus{}6は、10進の536,870,909になります。}
1111...111010 (30 bits total)
     @result{}
0111...111101 (30 bits total)
@end group
@end example

他にも例を示します:

@c !!! Check if lined up in smallbook format!  XDVI shows problem
@c     with smallbook but not with regular book! --rjc 16mar92
@smallexample
@group
                   ;  @r{       30ビットの2進数}

(lsh 5 2)          ;   5  =  @r{0000...000101}
     @result{} 20         ;      =  @r{0000...010100}
@end group
@group
(ash 5 2)
     @result{} 20
(lsh -5 2)         ;  -5  =  @r{1111...111011}
     @result{} -20        ;      =  @r{1111...101100}
(ash -5 2)
     @result{} -20
@end group
@group
(lsh 5 -2)         ;   5  =  @r{0000...000101}
     @result{} 1          ;      =  @r{0000...000001}
@end group
@group
(ash 5 -2)
     @result{} 1
@end group
@group
(lsh -5 -2)        ;  -5  =  @r{1111...111011}
     @result{} 268435454
                   ;      =  @r{0011...111110}
@end group
@group
(ash -5 -2)        ;  -5  =  @r{1111...111011}
     @result{} -2         ;      =  @r{1111...111110}
@end group
@end smallexample
@end defun

@defun logand &rest ints-or-markers
この関数は、引数の``論理積(logical
and)''をreturnします。すべての引数の@var{n}番目のビットがセットされている場合に限り、結果の@var{n}番目のビットがセットされます(``セット''とは、そのビットの値が0ではなく1であることを意味します)。

たとえば、13と12の``論理積''は ---
4ビット2進数を使用すると1101と1100の論理積は1100を生成します。この2進数では両方とも、左の2ビットがセット(つまり1)されているので、returnされる値の左2ビットがセットされます。しかし右の2ビットにたいしては、少なくとも1つの引数でそのビットが0なので、returnされる値の右2ビットは0になります。

@noindent
したがって、

@example
@group
(logand 13 12)
     @result{} 12
@end group
@end example

@code{logand}に何の引数も綿さない場合は、値@minus{}1がreturnされます。@minus{}1を2進数で表すとすべてのビットが1なので、@minus{}1は@code{logand}にたいする単位元(identity
element)です。

@smallexample
@group
                   ; @r{       30ビット2進数}

(logand 14 13)     ; 14  =  @r{0000...001110}
                   ; 13  =  @r{0000...001101}
     @result{} 12         ; 12  =  @r{0000...001100}
@end group

@group
(logand 14 13 4)   ; 14  =  @r{0000...001110}
                   ; 13  =  @r{0000...001101}
                   ;  4  =  @r{0000...000100}
     @result{} 4          ;  4  =  @r{0000...000100}
@end group

@group
(logand)
     @result{} -1         ; -1  =  @r{1111...111111}
@end group
@end smallexample
@end defun

@defun logior &rest ints-or-markers
この関数は、引数の``論理和(inclusive
or)''をreturnします。少なくとも1つの引数で@var{n}番目のビットがセットされていれば、結果の@var{n}番目のビットがセットされます。引数を与えない場合の結果は、この処理にたいする単位元である0です。@code{logior}に渡す引数が1つだけの場合、その引数がreturnされます。

@smallexample
@group
                   ; @r{       30ビット2進数}

(logior 12 5)      ; 12  =  @r{0000...001100}
                   ;  5  =  @r{0000...000101}
     @result{} 13         ; 13  =  @r{0000...001101}
@end group

@group
(logior 12 5 7)    ; 12  =  @r{0000...001100}
                   ;  5  =  @r{0000...000101}
                   ;  7  =  @r{0000...000111}
     @result{} 15         ; 15  =  @r{0000...001111}
@end group
@end smallexample
@end defun

@defun logxor &rest ints-or-markers
この関数は、引数の``排他的論理和(exclusive
or)''をreturnします。@var{n}番目のビットがセットされている引数の数が奇数個の場合だけ、結果の@var{n}番目のビットがセットされます。引数を与えない場合の結果は、この処理の単位元である0となります。@code{logxor}に渡す引数が1つだけの場合、その引数がreturnされます。

@smallexample
@group
                   ; @r{       30ビット2進数}

(logxor 12 5)      ; 12  =  @r{0000...001100}
                   ;  5  =  @r{0000...000101}
     @result{} 9          ;  9  =  @r{0000...001001}
@end group

@group
(logxor 12 5 7)    ; 12  =  @r{0000...001100}
                   ;  5  =  @r{0000...000101}
                   ;  7  =  @r{0000...000111}
     @result{} 14         ; 14  =  @r{0000...001110}
@end group
@end smallexample
@end defun

@defun lognot integer
この関数は引数の論理的な補数(logical
complement)をreturnします。@var{integer}の@var{n}番目のビットが0の場合に限り、結果の@var{n}番目のビットが1になります。逆も成り立ちます。

@example
(lognot 5)
     @result{} -6
;;  5  =  @r{0000...000101} (全部で30ビット)
;; @r{becomes}
;; -6  =  @r{1111...111010} (全部で30ビット)
@end example
@end defun

@node Math Functions
@section 標準的な数学関数
@cindex transcendental functions
@cindex mathematical functions
@cindex floating-point functions

  これらの数学的関数は、引き数として整数と同様に浮動小数点数も許容します。

@defun sin arg
@defunx cos arg
@defunx tan arg
これらは三角関数です、引数@var{arg}はラジアン単位です。
@end defun

@defun asin arg
@code{(asin @var{arg})}の値は、sinの値が@var{arg}となるような
@ifnottex
@minus{}pi/2
@end ifnottex
@tex
@math{-\pi/2}
@end tex
から
@ifnottex
pi/2
@end ifnottex
@tex
@math{\pi/2}
@end tex
(境界値を含む)の数です。@var{arg}が範囲外([@minus{}1, 1]の外)の場合、@code{asin}はNaNをreturnします。
@end defun

@defun acos arg
@code{(acos @var{arg})}の値は、cosの値が@var{arg}となるような、0から
@ifnottex
pi
@end ifnottex
@tex
@math{\pi}
@end tex
(境界値を含む)の数です。argが範囲外([-1, 1]の外)の場合、@code{acos}はNaNをreturnします。
@end defun

@defun atan y &optional x
@code{(atan @var{y})}の値は、tanの値が@var{y}となるような、
@ifnottex
@minus{}pi/2
@end ifnottex
@tex
@math{-\pi/2}
@end tex
から
@ifnottex
pi/2
@end ifnottex
@tex
@math{\pi/2}
@end tex
(境界値を含まない)の数です。オプションの第2引数@var{x}が与えられた場合、@code{(atan y
x)}の値はベクトル@code{[@var{x}, @var{y}]}と@code{X}軸が成す角度のラジアン値です。
@end defun

@defun exp arg
これは指数関数です。この関数は@math{e}の指数@var{arg}をreturnします。
@end defun

@defun log arg &optional base
この関数は底を@var{base}とする@var{arg}の対数をreturnします。@var{base}を指定しない場合、自然底(natural
base)@math{e}が使用されます。@var{arg}またh@var{base}が負の場合、@code{log}はNaNをreturnします。
@end defun

@defun expt x y
この関数は@var{x}に@var{y}を乗じてreturnします。引数が両方とも整数で、@var{y}が正の場合、結果は整数になります。この場合オーバーフローによる切り捨てが発生するので、注意してください。@var{x}が有限の負数で、@var{y}が有限の非整数の場合、@code{expt}はNaNをreturnします。
@end defun

@defun sqrt arg
これは@var{arg}の平方根をreturnします。@var{arg}が有限で0より小さい場合、@code{sqrt}はNaNをreturnします。
@end defun

加えて、Emacsは以下の数学的な定数を定義します:

@defvar float-e
自然対数@math{e}(2.71828@dots{})。
@end defvar

@defvar float-pi
円周率@math{pi}(3.14159@dots{})。
@end defvar

@node Random Numbers
@section 乱数
@cindex random numbers

  決定論的なコンピュータープログラムでは、真の乱数を生成することはできません。しかしほとんどの目的には、@dfn{疑似乱数(pseudo-random
numbers)}で充分です。一連の疑似乱数は、決定論的な手法により生成されます。真の乱数ではありませんが、それらにはランダム列を模する特別な性質があります。たとえば疑似ランダム系では、すべての可能な値は、均等に発生します。

  疑似乱数は``シード(seed:
種)''から生成されます。与えられた任意のシードから開始することにより、@code{random}関数は常に同じ数列を生成します。デフォルトでは、Emacsは開始時に乱数シードを初期化することにより、それぞれのEmacsの実行において、@code{random}の値シーケンスは(ほとんど確実に)異なります。

  再現可能な乱数シーケンスが欲しい場合もあります。たとえば乱数シーケンスに依存するプログラムをデバッグする場合、プログラムの各実行において同じ挙動を得ることが助けになります。再現可能なシーケンスを作成するには、@code{(random
"")}を実行します。これは特定のEmacsの実行可能ファイルにたいして、シードに定数値をセットします(しかし、この実行可能ファイルは、その他のEmacsビルドと異なるものになるでしょう)。シード値として、他のさまざまな文字列を使用することができます。

@defun random &optional limit
この関数は疑似乱数の整数をreturnします。繰り返し呼び出すと、一連の疑似乱数の整数をreturnします。

@var{limit}が正の整数の場合、値は負ではない@var{limit}未満の値から選択されます。それ以外では、値は@code{most-negative-fixnum}から@code{most-positive-fixnum}の間の、Lispで表現可能な任意の整数(@ref{Integer
Basics}を参照してください)になるでしょう。

@var{limit}が@code{t}の場合は、Emacsを再起動したときに、新しいシードを選択することを意味します。

@var{limit}が文字列の場合、その文字列定数にもとづいた新しいシードを選択することを意味します。

@end defun
