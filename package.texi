@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 2010-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Packaging
@chapter Preparing Lisp code for distribution
@cindex package
@cindex Lisp package

  Emacsは、Emacs
Lispコードをユーザーに配布するための、標準的な方法を提供します。@dfn{パッケージ(package)}は、ユーザーが簡単にダウンロード、インストール、アンインストール、および更新できるような方法でフォーマットおよび同梱された、1つ以上のファイルのコレクションです。

  以降のセクションではパッケージを作成する方法、およびそれを他の人がダウンロードできるように、@dfn{パッケージアーカイブ(package
archive)}に配置する方法を説明します。パッケージングシステムのユーザーレベル機能の説明は、@ref{Packages,,, emacs, The
GNU Emacs Manual}を参照してください。

@menu
* Packaging Basics::         Emacs Lispパッケージの基本的概念。
* Simple Packages::          単一.elファイルをパッケージする方法。
* Multi-file Packages::      ▼複数ファイルをパッケージする方法。
* Package Archives::         パッケージアーカイブの保守。
@end menu

@node Packaging Basics
@section Packaging Basics
@cindex package attributes
@cindex package name
@cindex package version
@cindex dependencies
@cindex package dependencies

  パッケージは@dfn{シンプルパケージ(simple package)}か@dfn{複数ファイルパッケージ(multi-file
package)}のいずれかです。シンプルパッケージは単一のEmacs
Lispファイル内に格納される一方、複数ファイルパッケージはtarファイル(複数のLispファイルとマニュアルのような非Lispファイルが含まれる可能性がある)に格納されます。

  通常の使い方では、シンプルパッケージと複数ファイルパッケージとの違いは、比較的重要ではありません。Package
Menuインターフェースでは、それらの間に差異はありません。しかし以降のセクションで説明するように、それらを作成する手順は異なります。

  パッケージ(シンプルか複数ファイル)はそれぞれ、特定の@dfn{属性(attributes)}をもっています:

@table @asis
@item Name
短い単語(たとえば@samp{auctex})。これは通常、そのプログラム内でシンボルプレフィクスとしても仕様される(@ref{Coding
Conventions}を参照)。

@item Version
関数@code{version-to-list}が理解できる形式のバージョン番号(たとえば@samp{11.86})。パッケージの各リリースでは、バージョン番号のアップも行うこと。

@item Brief description
そのパッケージがPackage Menuにリストされる際に、これが表示される。理想的には36文字以内で、単一行を占めるべきである。

@item Long description
これは@kbd{C-h
P}(@code{describe-package})により作成されたバッファーに表示され、これの後にそのパッケージの簡単な説明(brief
description)とインストール状態(installation
status)が続く。通常これは複数行に渡り、そのパッケージの能力と、インストール後に使用を開始するための方法を完全に記述すること。

@item Dependencies
そのパッケージが依存する、他のパッケージ(恐らく最低のバージョン番号を含む)。このリストは空でもよく、その場合パッケージには依存パッケージがないことを意味する。それ以外なら、このパッケージをインストールすることにより、その依存パッケージも自動的にインストールされる。依存パッケージのいずれかが見つからなければ、そのパッケージをインストールすることはできない。
@end table

@cindex content directory, package
  コマンド@code{package-install-file}、またはPackage
Menuのいずれかを介したパッケージのインストールでは、@code{package-user-dir}に@file{@var{name}-@var{version}}という名前のサブディレクトリーが作成される。ここで@var{name}はパッケージ名、@var{version}はバージョン番号である(たとえば@file{~/.emacs.d/elpa/auctex-11.86/})。わたしたちはこれを、そのパッケージの@dfn{コンテンツディレクトリー(content
directory)}と呼んでいます。これは、Emacsがパッケージのコンテンツ(シンプルパッケージでは単一のLispファイル、または複数ファイルパッケージから抽出されたファイル)を配置する場所です。

@cindex package autoloads
  その後Emacsは、autoloadマジックコメント(@ref{Autoload}を参照)にたいして、このコンテンツディレクトリー内のすべてのLispファイルを検索します。これらのautoload定義は、コンテンツディレクトリーの@file{@var{name}-autoloads.el}という名前のファイルに保存されます。これらは通常、そのパッケージ内で定義された主要なユーザーコマンドのautoloadに使用されますが、@code{auto-mode-alist}への要素の追加(@ref{Auto
Major
Mode}を参照)等、別のタスクを行うこともできます。パッケージは通常、その中で定義された関数と変数のすべてをautoload@emph{しない}ことに注意してください
---
通常はそのパッケージの使用を開始するために呼び出される一握りのコマンドだけがautoloadされます。それから、Emacsはそのパッケージ内のすべてのLispファイルをバイトコンパイルします。

  インストール後、インストールされたパッケージは@dfn{ロード済み(loaded)}になります。Emacsは@code{load-path}にコンテンツディレクトリーを追加して、@file{@var{name}-autoloads.el}内のautoload定義を評価します。

  Emacsのスタートアップ時は常に、インストール済みパッケージをロードするために、自動的に関数@code{package-initialize}が呼び出されます。これはinitファイルと、(もしあれば)abbrevファイルのロード後、かつ@code{after-init-hook}の実行前に行われます(@ref{Startup
Summary}を参照)。ユーザーオプション@code{package-enable-at-startup}が@code{nil}なら、自動的なパッケージのロードは無効です。

@deffn Command package-initialize &optional no-activate
この関数は、インストール済みパッケージとそれらがロード済みかを記録する、Emacsの内部レコードを初期化する。ユーザーオプション@code{package-load-list}は、どのパッケージをロードするかを指定する。デフォルトでは、すべてのインストール済みパッケージがロードされる。@ref{Package
Installation,,, emacs, The GNU Emacs Manual}を参照のこと。

オプション引数@var{no-activate}が非@code{nil}なら、インストール済みパッケージを実際にロードせずに、このレコードを更新する。これは内部でのみ使用される。
@end deffn

@node Simple Packages
@section Simple Packages
@cindex single file package
@cindex simple package

  A simple package consists of a single Emacs Lisp source file.  The file must
conform to the Emacs Lisp library header conventions (@pxref{Library
Headers}).  The package's attributes are taken from the various headers, as
illustrated by the following example:

@example
@group
;;; superfrobnicator.el --- Frobnicate and bifurcate flanges

;; Copyright (C) 2011 Free Software Foundation, Inc.
@end group

;; Author: J. R. Hacker <jrh@@example.com>
;; Version: 1.3
;; Package-Requires: ((flange "1.0"))
;; Keywords: multimedia, frobnicate
;; URL: http://example.com/jrhacker/superfrobnicate

@dots{}

;;; Commentary:

;; This package provides a minor mode to frobnicate and/or
;; bifurcate any flanges you desire.  To activate it, just type
@dots{}

;;;###autoload
(define-minor-mode superfrobnicator-mode
@dots{}
@end example

  The name of the package is the same as the base name of the file, as written
on the first line.  Here, it is @samp{superfrobnicator}.

  The brief description is also taken from the first line.  Here, it is
@samp{Frobnicate and bifurcate flanges}.

  The version number comes from the @samp{Package-Version} header, if it
exists, or from the @samp{Version} header otherwise.  One or the other
@emph{must} be present.  Here, the version number is 1.3.

  If the file has a @samp{;;; Commentary:} section, this section is used as
the long description.  (When displaying the description, Emacs omits the
@samp{;;; Commentary:} line, as well as the leading comment characters in
the commentary itself.)

  If the file has a @samp{Package-Requires} header, that is used as the
package dependencies.  In the above example, the package depends on the
@samp{flange} package, version 1.0 or higher.  @xref{Library Headers}, for a
description of the @samp{Package-Requires} header.  If the header is
omitted, the package has no dependencies.

  The @samp{Keywords} and @samp{URL} headers are optional, but recommended.
The command @code{describe-package} uses these to add links to its output.
The @samp{Keywords} header should contain at least one standard keyword from
the @code{finder-known-keywords} list.

  The file ought to also contain one or more autoload magic comments, as
explained in @ref{Packaging Basics}.  In the above example, a magic comment
autoloads @code{superfrobnicator-mode}.

  @xref{Package Archives}, for a explanation of how to add a single-file
package to a package archive.

@node Multi-file Packages
@section Multi-file Packages
@cindex multi-file package

  A multi-file package is less convenient to create than a single-file
package, but it offers more features: it can include multiple Emacs Lisp
files, an Info manual, and other file types (such as images).

  Prior to installation, a multi-file package is stored in a package archive
as a tar file.  The tar file must be named
@file{@var{name}-@var{version}.tar}, where @var{name} is the package name
and @var{version} is the version number.  Its contents, once extracted, must
all appear in a directory named @file{@var{name}-@var{version}}, the
@dfn{content directory} (@pxref{Packaging Basics}).  Files may also extract
into subdirectories of the content directory.

  One of the files in the content directory must be named
@file{@var{name}-pkg.el}.  It must contain a single Lisp form, consisting of
a call to the function @code{define-package}, described below.  This defines
the package's version, brief description, and requirements.

  For example, if we distribute version 1.3 of the superfrobnicator as a
multi-file package, the tar file would be @file{superfrobnicator-1.3.tar}.
Its contents would extract into the directory @file{superfrobnicator-1.3},
and one of these would be the file @file{superfrobnicator-pkg.el}.

@defun define-package name version &optional docstring requirements
This function defines a package.  @var{name} is the package name, a string.
@var{version} is the version, as a string of a form that can be understood
by the function @code{version-to-list}.  @var{docstring} is the brief
description.

@var{requirements} is a list of required packages and their versions.  Each
element in this list should have the form @code{(@var{dep-name}
@var{dep-version})}, where @var{dep-name} is a symbol whose name is the
dependency's package name, and @var{dep-version} is the dependency's version
(a string).
@end defun

  If the content directory contains a file named @file{README}, this file is
used as the long description.

  If the content directory contains a file named @file{dir}, this is assumed
to be an Info directory file made with @command{install-info}.
@xref{Invoking install-info, Invoking install-info, Invoking install-info,
texinfo, Texinfo}.  The relevant Info files should also be present in the
content directory.  In this case, Emacs will automatically add the content
directory to @code{Info-directory-list} when the package is activated.

  Do not include any @file{.elc} files in the package.  Those are created when
the package is installed.  Note that there is no way to control the order in
which files are byte-compiled.

  Do not include any file named @file{@var{name}-autoloads.el}.  This file is
reserved for the package's autoload definitions (@pxref{Packaging Basics}).
It is created automatically when the package is installed, by searching all
the Lisp files in the package for autoload magic comments.

  If the multi-file package contains auxiliary data files (such as images),
the package's Lisp code can refer to these files via the variable
@code{load-file-name} (@pxref{Loading}).  Here is an example:

@smallexample
(defconst superfrobnicator-base (file-name-directory load-file-name))

(defun superfrobnicator-fetch-image (file)
  (expand-file-name file superfrobnicator-base))
@end smallexample

@node Package Archives
@section Creating and Maintaining Package Archives
@cindex package archive

  Via the Package Menu, users may download packages from @dfn{package
archives}.  Such archives are specified by the variable
@code{package-archives}, whose default value contains a single entry: the
archive hosted by the GNU project at @url{http://elpa.gnu.org}.  This
section describes how to set up and maintain a package archive.

@cindex base location, package archive
@defopt package-archives
The value of this variable is an alist of package archives recognized by the
Emacs package manager.

Each alist element corresponds to one archive, and should have the form
@code{(@var{id} . @var{location})}, where @var{id} is the name of the
archive (a string) and @var{location} is its @dfn{base location} (a string).

If the base location starts with @samp{http:}, it is treated as a HTTP URL,
and packages are downloaded from this archive via HTTP (as is the case for
the default GNU archive).

Otherwise, the base location should be a directory name.  In this case,
Emacs retrieves packages from this archive via ordinary file access.  Such
``local'' archives are mainly useful for testing.
@end defopt

  A package archive is simply a directory in which the package files, and
associated files, are stored.  If you want the archive to be reachable via
HTTP, this directory must be accessible to a web server.  How to accomplish
this is beyond the scope of this manual.

  A convenient way to set up and update a package archive is via the
@code{package-x} library.  This is included with Emacs, but not loaded by
default; type @kbd{M-x load-library @key{RET} package-x @key{RET}} to load
it, or add @code{(require 'package-x)} to your init file.  @xref{Lisp
Libraries,, Lisp Libraries, emacs, The GNU Emacs Manual}.  Once loaded, you
can make use of the following:

@defopt package-archive-upload-base
The value of this variable is the base location of a package archive, as a
directory name.  The commands in the @code{package-x} library will use this
base location.

The directory name should be absolute.  You may specify a remote name, such
as @file{/ssh:foo@@example.com:/var/www/packages/}, if the package archive
is on a different machine.  @xref{Remote Files,, Remote Files, emacs, The
GNU Emacs Manual}.
@end defopt

@deffn Command package-upload-file filename
This command prompts for @var{filename}, a file name, and uploads that file
to @code{package-archive-upload-base}.  The file must be either a simple
package (a @file{.el} file) or a multi-file package (a @file{.tar} file);
otherwise, an error is raised.  The package attributes are automatically
extracted, and the archive's contents list is updated with this information.

If @code{package-archive-upload-base} does not specify a valid directory,
the function prompts interactively for one.  If the directory does not
exist, it is created.  The directory need not have any initial contents
(i.e., you can use this command to populate an initially empty archive).
@end deffn

@deffn Command package-upload-buffer
This command is similar to @code{package-upload-file}, but instead of
prompting for a package file, it uploads the contents of the current
buffer.  The current buffer must be visiting a simple package (a @file{.el}
file) or a multi-file package (a @file{.tar} file); otherwise, an error is
raised.
@end deffn

@noindent
After you create an archive, remember that it is not accessible in the
Package Menu interface unless it is in @code{package-archives}.

@cindex package archive security
@cindex package signing
Maintaining a public package archive entails a degree of responsibility.
When Emacs users install packages from your archive, those packages can
cause Emacs to run arbitrary code with the permissions of the installing
user.  (This is true for Emacs code in general, not just for packages.)  So
you should ensure that your archive is well-maintained and keep the hosting
system secure.

  One way to increase the security of your packages is to @dfn{sign} them
using a cryptographic key.  If you have generated a private/public gpg key
pair, you can use gpg to sign the package like this:

@c FIXME EasyPG / package-x way to do this.
@example
gpg -ba -o @var{file}.sig @var{file}
@end example

@noindent
For a single-file package, @var{file} is the package Lisp file; for a
multi-file package, it is the package tar file.  You can also sign the
archive's contents file in the same way.  Make the @file{.sig} files
available in the same location as the packages.  You should also make your
public key available for people to download; e.g., by uploading it to a key
server such as @url{http://pgp.mit.edu/}.  When people install packages from
your archive, they can use your public key to verify the signatures.

A full explanation of these matters is outside the scope of this manual.
For more information on cryptographic keys and signing, @pxref{Top,, GnuPG,
gnupg, The GNU Privacy Guard Manual}.  Emacs comes with an interface to GNU
Privacy Guard, @pxref{Top,, EasyPG, epa, Emacs EasyPG Assistant Manual}.
