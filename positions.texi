@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Positions
@chapter Positions
@cindex position (in buffer)
@cindex buffer position

  @dfn{位置(position)}とは、バッファーのテキストの文字のインデックスです。より正確には、位置とは2つの文字間(または最初の文字の前、または最後の文字の後)の箇所を識別し、与えられた位置の前あるいは後の文字のように表現することができます。しかし、``ある位置にある文字''のように表現することもあり、その場合はその位置の後の文字を意味します。

  位置は通常、1から始まる整数として表されますが、@dfn{マーカー(markers)}として表現することもできます。関数は引数に位置(整数)を期待しますが、代替としてマーカーも受け入れ、通常はそのマーカーが指すのがどのバッファーなのかは無視します。これらの関数はマーカーを整数に変換して、たとえそのマーカーが``誤った''バッファーを指していたとしても、まるで引数としてその整数が渡されたかのように、その整数を使用します。整数に変換できない場所を指すマーカーを整数のかわりに使用すると、エラーとなります。@ref{Markers}を参照してください。

  多くのカーソルモーションコマンドにより使用される関数を提供する``フィールド(field)''機能(@ref{Fields})も参照してください。

@menu
* Point::                    編集タスクが行われる特別な位置。
* Motion::                   ポイントの変更。
* Excursions::               一時的な移動とバッファーの変更。
* Narrowing::                バッファーの一部に編集を限定する。
@end menu

@node Point
@section Point
@cindex point

  @dfn{ポイント(point)}とは、多くの編集コマンドにより使用される、バッファーの特別な位置のことです。これらのコマンドには、自己挿入型のタイプ文字やテキスト挿入関数が含まれます。その他のコマンドは、別の箇所でテキストの編集や挿入ができるようにポイントを移動します。

  他の位置と同様、ポイントは特定の文字ではなく、2つの文字の間(または最初の文字の前、または最後の文字の後)を指します。通常、端末ではポイント直後の文字の上にカーソルを表示します。つまり、ポイントは実際はカーソルのある文字の前にあります。

@cindex point with narrowing
  ポイントの値は1より小さくなることはなく、そのバッファーのサイズに1を加えた値より大きくなることはありません。ナローイング(@ref{Narrowing}を参照)が効力をもつ場合、ポイントはそのバッファーのアクセス可能な範囲内(範囲の境界はバッファーの先頭か終端のいずれかの可能性がある)に閉じ込められます。

  バッファーはそれぞれ自身のポイント値をもち、それは他のバッファーのポイント値とは無関係です。ウィンドウもそれぞれポイント値をもち、他のウィンドウ内の同じバッファー上のポイント値とは無関係です。同じバッファーを表示する種々のウィンドウが異なるポイント値をもてるのは、これが理由です。あるバッファーがただ1つのウィンドウに表示されているときは、そのバッファーのポイントとそのウィンドウのポイントは、通常は同じ値をもち、区別が重要になるのは稀です。詳細は@ref{Window
Point}を参照してください。

@defun point
@cindex current buffer position
この関数は、カレントバッファー内のポイントの値を、整数でリターンする。

@need 700
@example
@group
(point)
     @result{} 175
@end group
@end example
@end defun

@defun point-min
この関数は、カレントバッファー内のアクセス可能なポイントの最小値をリターンする。これは通常は1だが、ナローイングが効力をもつ場合は、ナローイングしたリージョンの開始位置となる(@ref{Narrowing}を参照)。
@end defun

@defun point-max
この関数は、カレントバッファー内のアクセス可能なポイントの最大値をリターンする。これはナローイングされていなければは@code{(1+
(buffer-size))}だが、ナローイングが効力をもつ場合は、ナローイングしたリージョンの終端位置となる(@ref{Narrowing}を参照)。
@end defun

@defun buffer-end flag
この関数は、@var{flag}が0より大なら@code{(point-max)}、それ以外は@code{(point-min)}をリターンする。引数@var{flag}は数値でなければならない。
@end defun

@defun buffer-size &optional buffer
この関数は、カレントバッファー内の文字数のトータルをリターンする。ナローイング(@ref{Narrowing}を参照)されていなければ、@code{point-max}はこれに1を加えた値をリターンする。

@var{buffer}にバッファーを指定した場合、値は@var{buffer}のサイズになる。

@example
@group
(buffer-size)
     @result{} 35
@end group
@group
(point-max)
     @result{} 36
@end group
@end example
@end defun

@node Motion
@section Motion
@cindex motion by chars, words, lines, lists

  モーション関数は、ポイントのカレント値、バッファーの先頭または終端、または選択されたウィンドウ端のいずれかより、相対的にポイントの値を変更します。@ref{Point}を参照してください。

@menu
* Character Motion::         文字単位での移動。
* Word Motion::              単語単位での移動。
* Buffer End Motion::        バッファー先頭または終端への移動。
* Text Lines::               テキスト行単位での移動。
* Screen Lines::             表示される行単位での移動。
* List Motion::              リストやS式の解析による移動。
* Skipping Characters::      特定の集合に属す文字のスキップ。
@end menu

@node Character Motion
@subsection Motion by Characters

  以下の関数は、文字数にもとづいてポイントを移動します。 @code{goto-char}は基本的なプリミティブで、その他の関数はこれを使用しています。

@deffn Command goto-char position
@c This behavior used to be documented until 2013/08.
この関数は、カレントバッファー内のポイントの値を@var{position}にセットする。
@ignore
If @var{position} is less than 1, it moves point to the beginning of
the buffer.  If @var{position} is greater than the length of the
buffer, it moves point to the end.
@end ignore

ナローイングが効力をもつ場合でも、@var{position}は依然としてバッファー先頭から数えられるが、ポイントをアクセス可能な範囲外に移動することはできない。@var{position}が範囲外の場合、@code{goto-char}はアクセス可能な範囲の先頭または終端にポイントを移動する。

この関数がインタラクティブに呼び出された際は、@var{position}の値は数プレフィクス引数、プレフィクス引数が与えられなかった場合はミニバッファーから値を読み取る。

@code{goto-char}は@var{position}をリターンする。
@end deffn

@deffn Command forward-char &optional count
@c @kindex beginning-of-buffer
@c @kindex end-of-buffer
この関数は前方、すなわちバッファーの終端方向にポイントを@var{count}文字移動する(@var{count}が負なら後方、すなわちバッファーの先頭方向にポイントを移動する)。@var{count}が@code{nil}の場合のデフォルトは1。

バッファー(ナローイングが効力をもつ場合はアクセス可能な範囲の境界)の先頭または終端を超えて移動を試みた場合はエラーシンボル@code{beginning-of-buffer}または@code{end-of-buffer}のエラーをシグナルする。

インタラクティブな呼び出しでは、数プレフィクス引数が@var{count}となる。
@end deffn

@deffn Command backward-char &optional count
移動方向が逆であることを除き、これは@code{forward-char}と同様である。
@end deffn

@node Word Motion
@subsection Motion by Words

  以下の関数は、与えられた文字が単語の一部なのかどうかを判断するための構文テーブルを使用して単語を解析します。@ref{Syntax
Tables}を参照してください。

@deffn Command forward-word &optional count
この関数は、@var{count}の単語数分ポイントを前方に移動する。(@var{count}が負なら後方に移動する)。@var{count}が省略または@code{nil}の場合のデフォルトは1。

``単語1つ移動''とは、単語構成文字を横断して、単語区切り文字に遭遇するまでポイントを移動することを意味する。しかし、この関数はバッファーのアクセス可能範囲の境界およびフィールド境界(@ref{Fields}を参照)を超えてポイントを移動できない。フィールド境界のもっとも一般的な例は、ミニバッファー内のプロンプト終端である。

バッファー境界またはフィールド境界により途中で停止することなく単語@var{count}個分の移動が可能なら、値は@code{t}となる。それ以外ではリターン値は@code{nil}で、ポイントはバッファー境界またはフィールド境界で停止する。

@code{inhibit-field-text-motion}が非@code{nil}なら、この関数はフィールド境界を無視する。

インタラクティブに呼び出された場合、@var{count}は数プレフィクス引数により指定される。
@end deffn

@deffn Command backward-word &optional count
この関数は、単語の前に遭遇するまで、前方ではなく後方に移動することを除き、@code{forward-word}と同様である。
@end deffn

@defopt words-include-escapes
@c Emacs 19 feature
この変数は、@code{forward-word}とそれを使用するすべての関数の挙動に影響する。これが非@code{nil}なら、構文クラス``エスケープ(escape)''および``クォート文字(character
quote)''内の文字は、単語の一部とみなされる。それ以外では、単語の一部とはみなされない。
@end defopt

@defvar inhibit-field-text-motion
この変数が非@code{nil}なら@code{forward-word}、@code{forward-sentence}、@code{forward-paragraph}を含む特定のモーション関数は、フィールド境界を無視する。
@end defvar

@node Buffer End Motion
@subsection Motion to an End of the Buffer
@cindex move to beginning or end of buffer

  バッファーの先頭にポイントを移動するには、以下のように記述します:

@example
@group
(goto-char (point-min))
@end group
@end example

@noindent
同様に、バッファーの終端に移動するには、以下を使用します:

@example
@group
(goto-char (point-max))
@end group
@end example

  以下の2つは、ユーザーがこれらを行うためのコマンドです。これらはマークをセットしてメッセージをエコーエリアに表示するため、Lispプログラム内で使用しないよう警告するために、ここに記述します。

@deffn Command beginning-of-buffer &optional n
この関数は、バッファー(ナローイングが効力をもつ場合はアクセス可能範囲の境界)の先頭にポイントを移動して、以前の位置にマークをセットする(Transient
Markモードの場合、マークがすでにアクティブならマークはセットしない)。

@var{n}が非@code{nil}なら、バッファーのアクセス可能範囲の先頭から10分の@var{n}の位置にポイントを置く。インタラクティブな呼び出しでは、@var{n}は数プレフィクス引数が与えられればその値、それ以外でのデフォルトは@code{nil}である。

@strong{警告:} この関数をLispプログラム内で使用してはならない。
@end deffn

@deffn Command end-of-buffer &optional n
この関数は、バッファー(ナローイングが効力をもつ場合はアクセス可能範囲の境界)の終端にポイントを移動して、以前の位置にマークをセットする(Transient
Markモードの場合、マークがすでにアクティブならマークはセットしない)。@var{n}が非@code{nil}なら、バッファーのアクセス可能範囲の終端から10分の@var{n}の位置にポイントを置く。

インタラクティブな呼び出しでは、@var{n}は数プレフィクス引数が与えられればその値、それ以外でのデフォルトは@code{nil}である。<

@strong{警告:} この関数をLispプログラム内で使用してはならない。
@end deffn

@node Text Lines
@subsection Motion by Text Lines
@cindex lines

  テキスト行とは、改行で区切られたバッファーの範囲です。改行は前の行の一部とみなされます。最初のテキスト行はバッファー先頭で始まり、最後のテキスト行は最後の文字が改行かどうかは関係なくバッファー終端で終わります。バッファーからテキスト行への分割は、そのウィンドウの幅、表示の行継続、タブおよびその他の制御文字の表示方法に影響されません。

@deffn Command beginning-of-line &optional count
この関数は、カレント行の先頭にポイントを移動する。引数@var{count}が非@code{nil}または1以外なら、前方に@var{count}@minus{}1行移動してから、その行の先頭に移動する。

この関数は、別の行に移動する場合を除き、フィールド境界(@ref{Fields}を参照)を超えてポイントを移動しない。したがって、@var{count}が@code{nil}または1で、かつポイントがフィールド境界で開始される場合は、ポイントを移動しない。フィールド境界を無視させるには、@code{inhibit-field-text-motion}を@code{t}にバインドするか、かわりに@code{forward-line}関数を使用する。たとえば、フィールド境界を無視することを除けば、@code{(forward-line
0)}は@code{(beginning-of-line)}と同じことを行う。

この関数がバッファー(ナローイングが効力をもつ場合はアクセス可能範囲)の終端に到達した場合は、ポイントをその位置に置く。エラーはシグナルされない。
@end deffn

@defun line-beginning-position &optional count
@code{(beginning-of-line @var{count})}が移動するであろう位置をリターンする。
@end defun

@deffn Command end-of-line &optional count
この関数は、カレント行の終端にポイントを移動する。引数@var{count}が非@code{nil}または1以外なら、前方に@var{count}@minus{}1行移動してから、その行の終端に移動する。

この関数は、別の行に移動する場合を除き、フィールド境界(@ref{Fields}を参照)を超えてポイントを移動しない。したがって、@var{count}が@code{nil}または1で、かつポイントがフィールド境界で開始される場合は、ポイントを移動しない。フィールド境界を無視させるには、@code{inhibit-field-text-motion}を@code{t}にバインドする。

この関数がバッファー(ナローイングが効力をもつ場合はアクセス可能範囲)の終端に到達した場合は、ポイントをその位置に置く。エラーはシグナルされない。
@end deffn

@defun line-end-position &optional count
@code{(end-of-line @var{count})}が移動するであろう位置をリターンする。
@end defun

@deffn Command forward-line &optional count
@cindex beginning of line
この関数は、前方に@var{count}行移動して、その行の先頭にポイントを移動する。@var{count}が負なら、後方に@minus{}@var{count}行移動して、その行の先頭にポイントを移動する。@var{count}が0の場合は、カレント行の先頭にポイントを移動する。@var{count}が@code{nil}なら、それは1を意味する。

@code{forward-line}が指定された行数を移動する前にバッファー(またはアクセス可能範囲)の先頭か終端に遭遇した場合は、そこにポイントをセットする。エラーはシグナルされない。

@code{forward-line}は、@var{count}と実際に移動した行数の差をリターンする。3行しかないバッファーの先頭から、5行したへの移動を試みた場合、ポイントは最終行の終端で停止し、値は2となるだろう。

インタラクティブな呼び出しでは、数プレフィクス引数が@var{count}となる。
@end deffn

@defun count-lines start end
@cindex lines in region
@anchor{Definition of count-lines}
この関数は、カレントバッファー内の位置@var{start}と@var{end}の間の行数をリターンする。@var{start}と@var{end}が等しければ、リターン値は0になる。それ以外は、たとえ@var{start}と@var{end}が同一行にあっても、最小でも1をリターンする。これらの間にあるテキストは、それだけを孤立して考えたると、それが空でない限りは最小でも1行を含まなければならないからである。
@end defun

@deffn Command count-words start end
@cindex words in region
この関数は、カレントバッファー内の位置@var{start}と@var{end}の間にある単語の数をリターンする。

この関数は、インタラクティブに呼び出すこともできる。その場合はバッファー、またはリージョンがアクティブならリージョン内の行数、単語数、文字数を報告するメッセージをプリントする。
@end deffn

@defun line-number-at-pos &optional pos
@cindex line number
この関数は、カレントバッファー内のバッファー位置@var{pos}に対応する行番号をリターンする。@var{pos}が@code{nil}または省略された場合は、カレントのバッファー位置が使用される。
@end defun

@ignore
@c ================
The @code{previous-line} and @code{next-line} commands are functions
that should not be used in programs.  They are for users and are
mentioned here only for completeness.

@deffn Command previous-line count
@cindex goal column
This function moves point up @var{count} lines (down if @var{count}
is negative).  In moving, it attempts to keep point in the ``goal column''
(normally the same column that it was at the beginning of the move).

If there is no character in the target line exactly under the current
column, point is positioned after the character in that line which
spans this column, or at the end of the line if it is not long enough.

If it attempts to move beyond the top or bottom of the buffer (or clipped
region), then point is positioned in the goal column in the top or
bottom line.  No error is signaled.

In an interactive call, @var{count} will be the numeric
prefix argument.

The command @code{set-goal-column} can be used to create a semipermanent
goal column to which this command always moves.  Then it does not try to
move vertically.

If you are thinking of using this in a Lisp program, consider using
@code{forward-line} with a negative argument instead.  It is usually easier
to use and more reliable (no dependence on goal column, etc.).
@end deffn

@deffn Command next-line count
This function moves point down @var{count} lines (up if @var{count}
is negative).  In moving, it attempts to keep point in the ``goal column''
(normally the same column that it was at the beginning of the move).

If there is no character in the target line exactly under the current
column, point is positioned after the character in that line which
spans this column, or at the end of the line if it is not long enough.

If it attempts to move beyond the top or bottom of the buffer (or clipped
region), then point is positioned in the goal column in the top or
bottom line.  No error is signaled.

In the case where the @var{count} is 1, and point is on the last
line of the buffer (or clipped region), a new empty line is inserted at the
end of the buffer (or clipped region) and point moved there.

In an interactive call, @var{count} will be the numeric
prefix argument.

The command @code{set-goal-column} can be used to create a semipermanent
goal column to which this command always moves.  Then it does not try to
move vertically.

If you are thinking of using this in a Lisp program, consider using
@code{forward-line} instead.  It is usually easier
to use and more reliable (no dependence on goal column, etc.).
@end deffn

@c ================
@end ignore

  @ref{Near
Point}の関数@code{bolp}と@code{eolp}も参照してください。これらの関数はポイントを移動しませんが、ポイントがすでに行頭または行末にあるかどうかをテストします。

@node Screen Lines
@subsection Motion by Screen Lines
@cindex screen lines, moving by

  前のセクションの行関数は、改行文字で区切られたテキスト行だけを数えました。対照的に、以下の関数はスクリーン行を数えます。スクリーン行は、スクリーン上でテキストが表示される方法にしたがって定義されます。あるテキスト行1行が、選択されたウィンドウの幅にフィット可能な程に十分短ければ、それはスクリーン行で1行になりますが、それ以外は複数のスクリーン行になり得ます。

  テキスト行が追加スクリーン行に継続されずに、そのスクリーンで切り詰められる(truncated)場合があります。そのような場合は、@code{vertical-motion}で@code{forward-line}のようにポイントを移動します。@ref{Truncation}を参照してください。

  文字列が与えられた場合、その幅は、文字の外見を制御するフラグに依存するため、与えられたテキスト断片にたいして、たとえそれが選択されたウィンドウ上でさえも(幅、切り詰め有無、ディスプレイテーブルはウィンドウごとに異なり得るので)、そのテキストがあるバッファーに応じて、@code{vertical-motion}の挙動は異なります。@ref{Usual
Display}を参照してください。

  以下の関数は、スクリーン行のブレーク位置を判断するためにテキストをスキャンするため、スキャンする長さに比例して時間を要します。
@ignore
If you intend to use them heavily, Emacs provides caches which may
improve the performance of your code.  @xref{Truncation, cache-long-scans}.
@end ignore

@defun vertical-motion count &optional window
この関数は、ポイントのあるスクリーン行からスクリーン行で@var{count}行下に移動して、そのスクリーン行の先頭にポイントを移動する。@var{count}が負なら、かわりに上に移動する。

@var{count}引数には、整数のかわりにコンスセル@code{(@var{cols}
. @var{lines})}を指定できる。その場合、関数はスクリーン行で@var{lines}行移動して、そのスクリーン行の視覚的な行頭(visual
start)から@var{cols}列目にポイントを置く。@var{cols}は、その行の@emph{視覚的(visual)}な開始から数えられることに注意。そのウィンドウが水平スクロール(@ref{Horizontal
Scrolling}を参照)されている場合には、ポイントが置かれる列は、スクロールされたテキストの列数が加えられるだろう。

リターン値は、ポイントが移動したスクリーン行の行数である。バッファーの先頭か終端に到達していたら、この値は絶対値では@var{count}より小になるかもしれない。

ウィンドウ@var{window}引数幅、水平スクロール、ディスプレイテーブルのようなパラメーターの取得に使用される。しかし@code{vertical-motion}は、たとえ@var{window}がカレントで他のバッファーを表示していたとしても常に、カレントバッファーにたいして処理を行う。
@end defun

@defun count-screen-lines &optional beg end count-final-newline window
この関数は、@var{beg}から@var{end}のテキスト内のスクリーン行の行数をリターンする。スクリーン行数は行継続やディスプレイテーブル等により、実際の行数とは異なるかもしれない。@var{beg}および@var{end}が@code{nil}、または省略された場合のデフォルトは、そのバッファーのアクセス可能範囲の先頭と終端である。

そのリージョンが改行で終わる場合、オプションの第3引数@var{count-final-newline}が@code{nil}なら、それは無視される。

オプションの第4引数@var{window}は、幅や水平スクロール等のパラメーターを取得するウィンドウを指定する。デフォルトは、選択されたウィンドウのパラメーターを使用する。

@code{vertical-motion}と同様、@code{count-screen-lines}は@var{window}内にどのバッファーが表示されていようと、常にカレントバッファーを使用する。これにより、バッファーが何らかのウィンドウにカレントで表示されているか否かにかかわらず、任意にバッファーにたいして@code{count-screen-lines}の使用が可能になる。
@end defun

@deffn Command move-to-window-line count
この関数は、選択されたウィンドウ内にカレントで表示されているテキストに応じてポイントを移動する。これは、ウィンドウ上端からスクリーン行で@var{count}行目の先頭にポイントを移動する。@var{count}が負なら、それはバッファー下端(バッファーが指定されたスクリーン位置の上で終わる場合はバッファーの最終行)から、@w{@minus{}@var{count}}行目の位置を指定する。

@var{count}が@code{nil}の場合、ポイントはウィンドウ中央の行の先頭に移動する。@var{count}の絶対値がウィンドウサイズより大なら、ウィンドウが十分に高かったならそのスクリーン行は表示されていたであろう位置に、ポイントを移動する。これは、おそらく次回の再表示の際に、その箇所がスクリーン上になるようなスクロールを発生させるだろう。

インタラクティブな呼び出しでは、数プレフィクス引数が@var{count}となる。

リターン値は、ウィンドウ上端行を0とする、ポイントが移動した先の行番号である。
@end deffn

@defun compute-motion from frompos to topos width offsets window
この関数は、カレントバッファーをスキャンして、スクリーン位置を計算する。これは位置@var{from}がスクリーン座標@var{frompos}にあると仮定して、そこから位置@var{to}または座標@var{topos}のいずれか先に到達したほうまで、バッファーを前方にスキャンする。これはスキャン終了のバッファー位置と、スクリーン座標をリターンする。

座標引数@var{frompos}および@var{topos}は、@code{(@var{hpos}
. @var{vpos})}という形式のコンスセルである。

引数@var{width}は、テキストを表示するために利用可能な列数である。これは、継続行の処理に影響する。@code{nil}は、そのウィンドウ内で使用可能な実際のテキスト列数で、@code{(window-width
window)}がリターンする値と等しい。

引数@var{offsets}は@code{nil}、または@code{(@var{hscroll}
.
@var{tab-offset})}という形式のコンスセルのいずれかである。ここで@var{hscroll}は、左マージンのために表示されない列数であり、呼び出し側のほとんどは@code{window-hscroll}を呼び出すことにより、これを取得する。一方@var{tab-offset}は、スクリーン上の列数と、バッファー内の列数の間のオフセットである。これは継続行において、前のスクリーン行の幅が@code{tab-width}の整数倍でないときは、非0になる可能性がある。非継続行では、これは常に0である。

ウィンドウ@var{window}の役割は、使用するディスプレイテーブルの指定することだけである。@code{compute-motion}は、@var{window}内に表示されているのがどのバッファーであろうと、カレントバッファーを処理する。

リターン値は、5つの要素をもつリストである:

@example
(@var{pos} @var{hpos} @var{vpos} @var{prevhpos} @var{contin})
@end example

@noindent
ここで、@var{pos}はスキャンが停止したバッファー位置、@var{vpos}は垂直スクリーン位置、@var{hpos}は水平スクリーン位置である。

結果@var{prevhpos}は、@var{pos}から1文字戻った水平位置である。結果@var{contin}は、最後の行が前の文字の後(または中)から継続されていれば、@code{t}となる。

たとえば、あるウィンドウのスクリーン行@var{line}の列@var{col}のバッファー位置を求めるには、そのウィンドウのdisplay-start(表示開始)位置を@var{from}、そのウィンドウの左上隅の座標を@var{frompos}として渡す。スキャンをそのバッファーのアクセス可能範囲の終端に制限するために、バッファーの@code{(point-max)}を@var{to}に、@var{line}と@var{col}を@var{topos}に渡す。以下は、これを行う関数である:

@example
(defun coordinates-of-position (col line)
  (car (compute-motion (window-start)
                       '(0 . 0)
                       (point-max)
                       (cons col line)
                       (window-width)
                       (cons (window-hscroll) 0)
                       (selected-window))))
@end example

ミニバッファーにたいして@code{compute-motion}を使う際は、最初のスクリーン行の先頭の水平位置を取得するために、@code{minibuffer-prompt-width}を使用する必要がある。
@end defun

@node List Motion
@subsection Moving over Balanced Expressions
@cindex sexp motion
@cindex Lisp expression motion
@cindex list motion
@cindex balanced parenthesis motion

  以下は、バランスの取れたカッコ式(balanced-parenthesis。これらの式を横断して移動することと関連して、Emacsでは@dfn{sexp(S式)}とも呼ばれる)と関連する、いくつかの関数です。これらの関数がさまざまな文字を処理する方法は、構文テーブル(syntax
table)が制御します。@ref{Syntax
Tables}を参照してください。sexp、またはその一部にたいする低レベルのプリミティブについては、@ref{Parsing
Expressions}を参照してください。ユーザーレベルのコマンドについては、@ref{Parentheses,, Commands for
Editing with Parentheses, emacs, The GNU Emacs Manual}を参照してください。

@deffn Command forward-list &optional arg
この関数は、バランスの取れたカッコのグループを、@var{arg}(デフォルトは1)グループ前方に移動する(単語やクォート文字のペアーでクォートされた文字列は無視される)。
@end deffn

@deffn Command backward-list &optional arg
この関数は、バランスの取れたカッコのグループを、@var{arg}(デフォルトは1)グループ後方に移動する(単語やクォート文字のペアーでクォートされた文字列は無視される)。
@end deffn

@deffn Command up-list &optional arg
この関数は、カッコを@var{arg}(デフォルトは1)レベル外側前方に移動する。負の引数では後方に移動するが、同様に浅いレベルに移動する。
@end deffn

@deffn Command down-list &optional arg
この関数は、カッコを@var{arg}(デフォルトは1)レベル内側前方に移動する。負の引数では後方に移動するが、同様に深いレベル(@minus{}@var{arg}レベル)に移動する。
@end deffn

@deffn Command forward-sexp &optional arg
この関数は、バランスの取れた式(balanced
expressions)を、@var{arg}(デフォルトは1)前方に移動する。バランスの取れた式にはカッコ等で区切られた式、および単語や文字列定数のようなものも含まれる。@ref{Parsing
Expressions}を参照のこと。たとえば、

@example
@group
---------- Buffer: foo ----------
(concat@point{} "foo " (car x) y z)
---------- Buffer: foo ----------
@end group

@group
(forward-sexp 3)
     @result{} nil

---------- Buffer: foo ----------
(concat "foo " (car x) y@point{} z)
---------- Buffer: foo ----------
@end group
@end example
@end deffn

@deffn Command backward-sexp &optional arg
この関数は、バランスの取れた式(balanced expressions)を、@var{arg}(デフォルトは1)後方に移動する。
@end deffn

@deffn Command beginning-of-defun &optional arg
この関数は、後方に@var{arg}番目のdefunの先頭に移動する。@var{arg}が負なら、実際には前方に移動するが、defunの終端ではなく先頭に移動することは変わらない。@var{arg}のデフォルトは1。
@end deffn

@deffn Command end-of-defun &optional arg
この関数は、前方に@var{arg}番目のdefunの終端に移動する。@var{arg}が負なら、実際には後方に移動するが、defunの先頭ではなく終端に移動することは変わらない。@var{arg}のデフォルトは1。
@end deffn

@defopt defun-prompt-regexp
非@code{nil}なら、このバッファーローカル変数はdefunの始まりとなる開きカッコの前に出現し得るテキストを指定する正規表現を保持する。つまりd、この正規表現にたいするマッチで始まり、その後に開きカッコ構文(open-parenthesis
syntax)が続くのがdefunである。
@end defopt

@defopt open-paren-in-column-0-is-defun-start
この変数の値が非@code{nil}なら、列0にある開きカッコはdefunの始まりとみなされる。@code{nil}の場合、列0の開きカッコは特別な意味をもたない。デフォルトは@code{t}。
@end defopt

@defvar beginning-of-defun-function
非@code{nil}なら、この変数はdefunの開始を見つける関数を保持する。関数@code{beginning-of-defun}は、通常の手法を使うかわりに、その関数に自身のオプション引数を渡して、その関数を呼び出す。その引数が非@code{nil}なら、その関数はその回数分の関数呼び出しにより、@code{beginning-of-defun}が行うように後方に移動すること。
@end defvar

@defvar end-of-defun-function
非@code{nil}なら、この変数はdefunの終端を見つける関数を保持する。関数@code{end-of-defun}は、通常の手法を使うかわりに、その関数を呼び出す。
@end defvar

@node Skipping Characters
@subsection Skipping Characters
@cindex skipping characters

  以下の2つの関数は、指定された文字セットを超えてポイントを移動します。これらの関数は、たとえば空白文字をスキップするためによく使用されます。関連する関数については、@ref{Motion
and Syntax}を参照してください。

これらの関数は検索関数(@ref{Searching and
Matching}を参照)が行うように、そのバッファーがマルチバイト(multibyte)ならマルチバイトに、ユニバイト(unibyte)ならユニバイトに、そのセットト文字列を変換します。

@defun skip-chars-forward character-set &optional limit
この関数は、与えられた文字セットをスキップして、カレントバッファー内のポイント前方に移動する。これはポイントの後の文字を調べて、その文字が@var{character-set}にマッチすればポイントを進める。そして、マッチしない文字に到達するまで、これを継続する。この関数は、超えて移動した文字数をリターンする。

引数@var{character-set}が、正規表現での@samp{[@dots{}]}内部と同様だが、@samp{]}で終端されず、@samp{\}が@samp{^}、@samp{-}、@samp{\}をクォートする点が異なる。つまり、@code{"a-zA-Z"}はすべての英字をスキップして最初の非英字の前で停止し、@code{"^a-zA-Z"}はすべての非英字をスキップして最初の英字の前で停止する。@ref{Regular
Expressions}を参照のこと。@code{"[:alnum:]"}のような文字クラスも使用できる。@pxref{Char
Classes}を参照されたい。

@var{limit}(数字かマーカー)が与えられた場合、それはポイントがスキップして到達できる、そのバッファー内の最大位置を指定する。ポイントは@var{limit}、または@var{limit}の前でストップするだろう。

以下の例では、ポイントは最初@samp{T}の直前に置かれている。フォーム評価後、ポイントはその行の末尾(@samp{hat}の@samp{t}と改行の間)に置かれる。この関数は、すべての英字とスペースをスキップするが、改行はスキップしない。

@example
@group
---------- Buffer: foo ----------
I read "@point{}The cat in the hat
comes back" twice.
---------- Buffer: foo ----------
@end group

@group
(skip-chars-forward "a-zA-Z ")
     @result{} 18

---------- Buffer: foo ----------
I read "The cat in the hat@point{}
comes back" twice.
---------- Buffer: foo ----------
@end group
@end example
@end defun

@defun skip-chars-backward character-set &optional limit
この関数は、@var{limit}に至るまで@var{character-set}にマッチする文字をスキップして、ポイントを後方に移動する。これは@code{skip-chars-forward}と同様だが、ポイントを移動する方向が異なる。

リターン値は、移動した距離を示す。これは、0以上の整数である。
@end defun

@node Excursions
@section Excursions
@cindex excursion

  プログラム中の限定された部分で、ポイントを``一時的''に移動するのが便利なことが時折あります。これは@dfn{エクスカーション(excursion:
遠足、小旅行)}と呼ばれ、スペシャルフォーム@code{save-excursion}により行います。この構成は、カレントバッファーの初期アイデンティティー、ポイントおよびマークの値を記憶して、そのエクスカーション完了時にそれらをリストアします。これはプログラムのある部分において、プログラムの他の部分に影響を与えることなくポイントを移動する標準的な手段であり、EmacsのLispソース内では何度も使用されています。

  カレントバッファーのアイデンティティーのみの保存およびリストアが必要な場合は、かわりに@code{save-current-buffer}や@code{with-current-buffer}を使用してください(@ref{Current
Buffer}を参照)。ウィンドウ構成の保存やリストアが必要なら、@ref{Window Configurations}および@ref{Frame
Configurations}で説明されているフォームを参照してください。 

@defspec save-excursion body@dots{}
@cindex mark excursion
@cindex point excursion
このスペシャルフォームは、カレントバッファー自体、およびポイント値とマーク値を保存して@var{body}を評価し、最後にバッファーおよび保存したポイントとマークの値をリストアする。@code{throw}またはエラーを通じたアブノーマルexit(@ref{Nonlocal
Exits}を参照)の場合でも、保存された3つすべての値はリストアされる。

@code{save-excursion}がリターンする値は@var{body}内の最後のフォームの結果、または@var{body}フォームが与えられなければ@code{nil}をリターンする。
@end defspec

  @code{save-excursion}は、エクスカーション開始時にカレントだったバッファーのポイントとマークだけを保存ため、そのエクスカーション中に変更された他のバッファーのポイントおよび/またはマークは、その後も効果が残るでしょう。これはしばしば予期せぬ結果を招くので、エクスカーション中に@code{set-buffer}を呼び出した場合、バイトコンパイラーは警告を発します:

@example
Warning: Use `with-current-buffer' rather than
         save-excursion+set-buffer
@end example

@noindent
このような問題を避けるには、以下の例のように望むカレントバッファーをセット後にのみ@code{save-excursion}を呼び出すべきです:

@example
@group
(defun append-string-to-buffer (string buffer)
  "BUFFER末尾にSTRINGを追加"
  (with-current-buffer buffer
    (save-excursion
      (goto-char (point-max))
      (insert string))))
@end group
@end example

@cindex window excursions
  同じように、@code{save-excursion}は@code{switch-to-buffer}のような関数が変更したウィンドウ/バッファーの対応をリストアしません。

  @strong{警告:}
保存されたポイント値に隣接する通常のテキスト挿入は、それがすべてのマーカーを再配置するのと同様、保存されたポイントカーを再配置します。より正確には、保存される値は挿入タイプ@code{nil}のマーカーです。@ref{Marker
Insertion Types}を参照してください。したがって、保存されたポイント値のリストア時は、通常は挿入されたテキストの直前になります。

  たとえ@code{save-excursion}がマーク位置を保存しても、バッファーを変更する関数が@code{deactivate-mark}をセットするのを禁止しないため、そのコマンド完了後にマークの非アクティブ家が効力を発揮します。@ref{The
Mark}を参照してください。

@node Narrowing
@section Narrowing
@cindex narrowing
@cindex restriction (in a buffer)
@cindex accessible portion (of a buffer)

  @dfn{Narrowing} means limiting the text addressable by Emacs editing
commands to a limited range of characters in a buffer.  The text that
remains addressable is called the @dfn{accessible portion} of the buffer.

  Narrowing is specified with two buffer positions, which become the beginning
and end of the accessible portion.  For most editing commands and
primitives, these positions replace the values of the beginning and end of
the buffer.  While narrowing is in effect, no text outside the accessible
portion is displayed, and point cannot move outside the accessible portion.
Note that narrowing does not alter actual buffer positions (@pxref{Point});
it only determines which positions are considered the accessible portion of
the buffer.  Most functions refuse to operate on text that is outside the
accessible portion.

  Commands for saving buffers are unaffected by narrowing; they save the
entire buffer regardless of any narrowing.

  If you need to display in a single buffer several very different types of
text, consider using an alternative facility described in @ref{Swapping
Text}.

@deffn Command narrow-to-region start end
This function sets the accessible portion of the current buffer to start at
@var{start} and end at @var{end}.  Both arguments should be character
positions.

In an interactive call, @var{start} and @var{end} are set to the bounds of
the current region (point and the mark, with the smallest first).
@end deffn

@deffn Command narrow-to-page &optional move-count
This function sets the accessible portion of the current buffer to include
just the current page.  An optional first argument @var{move-count}
non-@code{nil} means to move forward or backward by @var{move-count} pages
and then narrow to one page.  The variable @code{page-delimiter} specifies
where pages start and end (@pxref{Standard Regexps}).

In an interactive call, @var{move-count} is set to the numeric prefix
argument.
@end deffn

@deffn Command widen
@cindex widening
This function cancels any narrowing in the current buffer, so that the
entire contents are accessible.  This is called @dfn{widening}.  It is
equivalent to the following expression:

@example
(narrow-to-region 1 (1+ (buffer-size)))
@end example
@end deffn

@defun buffer-narrowed-p
This function returns non-@code{nil} if the buffer is narrowed, and
@code{nil} otherwise.
@end defun

@defspec save-restriction body@dots{}
This special form saves the current bounds of the accessible portion,
evaluates the @var{body} forms, and finally restores the saved bounds, thus
restoring the same state of narrowing (or absence thereof) formerly in
effect.  The state of narrowing is restored even in the event of an abnormal
exit via @code{throw} or error (@pxref{Nonlocal Exits}).  Therefore, this
construct is a clean way to narrow a buffer temporarily.

The value returned by @code{save-restriction} is that returned by the last
form in @var{body}, or @code{nil} if no body forms were given.

@c Wordy to avoid overfull hbox.  --rjc 16mar92
@strong{Caution:} it is easy to make a mistake when using the
@code{save-restriction} construct.  Read the entire description here before
you try it.

If @var{body} changes the current buffer, @code{save-restriction} still
restores the restrictions on the original buffer (the buffer whose
restrictions it saved from), but it does not restore the identity of the
current buffer.

@code{save-restriction} does @emph{not} restore point and the mark; use
@code{save-excursion} for that.  If you use both @code{save-restriction} and
@code{save-excursion} together, @code{save-excursion} should come first (on
the outside).  Otherwise, the old point value would be restored with
temporary narrowing still in effect.  If the old point value were outside
the limits of the temporary narrowing, this would fail to restore it
accurately.

Here is a simple example of correct use of @code{save-restriction}:

@example
@group
---------- Buffer: foo ----------
This is the contents of foo
This is the contents of foo
This is the contents of foo@point{}
---------- Buffer: foo ----------
@end group

@group
(save-excursion
  (save-restriction
    (goto-char 1)
    (forward-line 2)
    (narrow-to-region 1 (point))
    (goto-char (point-min))
    (replace-string "foo" "bar")))

---------- Buffer: foo ----------
This is the contents of bar
This is the contents of bar
This is the contents of foo@point{}
---------- Buffer: foo ----------
@end group
@end example
@end defspec
