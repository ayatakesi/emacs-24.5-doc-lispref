# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-10-26 01:29+0900\n"
"PO-Revision-Date: 2018-10-26 06:12+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: positions.texi.orig:5 positions.texi.orig:6
#, no-wrap
msgid "Positions"
msgstr "Positions"

#. type: cindex
#: positions.texi.orig:7
#, no-wrap
msgid "position (in buffer)"
msgstr "position (in buffer)"

#. type: cindex
#: positions.texi.orig:8
#, no-wrap
msgid "buffer position"
msgstr "buffer position"

#. type: Plain text
#: positions.texi.orig:16
msgid "A @dfn{position} is the index of a character in the text of a buffer.  More precisely, a position identifies the place between two characters (or before the first character, or after the last character), so we can speak of the character before or after a given position.  However, we often speak of the character ``at'' a position, meaning the character after that position."
msgstr "@dfn{位置(position)}とは、バッファーのテキストの文字のインデックスです。より正確には、位置とは2つの文字間(または最初の文字の前、または最後の文字の後)の箇所を識別し、与えられた位置の前あるいは後の文字のように表現することができます。しかし、``ある位置にある文字''のように表現することもあり、その場合はその位置の後の文字を意味します。"

#. type: Plain text
#: positions.texi.orig:28
msgid "Positions are usually represented as integers starting from 1, but can also be represented as @dfn{markers}---special objects that relocate automatically when text is inserted or deleted so they stay with the surrounding characters.  Functions that expect an argument to be a position (an integer), but accept a marker as a substitute, normally ignore which buffer the marker points into; they convert the marker to an integer, and use that integer, exactly as if you had passed the integer as the argument, even if the marker points to the ``wrong'' buffer.  A marker that points nowhere cannot convert to an integer; using it instead of an integer causes an error.  @xref{Markers}."
msgstr "位置は通常、1から始まる整数として表されますが、@dfn{マーカー(markers)}として表現することもできます。関数は引数に位置(整数)を期待しますが、代替としてマーカーも受け入れ、通常はそのマーカーが指すのがどのバッファーなのかは無視します。これらの関数はマーカーを整数に変換して、たとえそのマーカーが``誤った''バッファーを指していたとしても、まるで引数としてその整数が渡されたかのように、その整数を使用します。整数に変換できない場所を指すマーカーを整数のかわりに使用すると、エラーとなります。@ref{Markers}を参照してください。"

#. type: Plain text
#: positions.texi.orig:31
msgid "See also the ``field'' feature (@pxref{Fields}), which provides functions that are used by many cursor-motion commands."
msgstr "多くのカーソルモーションコマンドにより使用される関数を提供する``フィールド(field)''機能(@ref{Fields})も参照してください。"

#. type: section
#: positions.texi.orig:37 positions.texi.orig:39 positions.texi.orig:40
#, no-wrap
msgid "Point"
msgstr "Point"

#. type: menuentry
#: positions.texi.orig:37
msgid "The special position where editing takes place."
msgstr "編集タスクが行われる特別な位置。"

#. type: section
#: positions.texi.orig:37 positions.texi.orig:123 positions.texi.orig:124
#, no-wrap
msgid "Motion"
msgstr "Motion"

#. type: menuentry
#: positions.texi.orig:37
msgid "Changing point."
msgstr "ポイントの変更。"

#. type: section
#: positions.texi.orig:37 positions.texi.orig:803 positions.texi.orig:804
#, no-wrap
msgid "Excursions"
msgstr "Excursions"

#. type: menuentry
#: positions.texi.orig:37
msgid "Temporary motion and buffer changes."
msgstr "一時的な移動とバッファーの変更。"

#. type: section
#: positions.texi.orig:37 positions.texi.orig:878 positions.texi.orig:879
#, no-wrap
msgid "Narrowing"
msgstr "Narrowing"

#. type: menuentry
#: positions.texi.orig:37
msgid "Restricting editing to a portion of the buffer."
msgstr "バッファーの一部に編集を限定する。"

#. type: defun
#: positions.texi.orig:41 positions.texi.orig:69
#, no-wrap
msgid "point"
msgstr "point"

#. type: Plain text
#: positions.texi.orig:47
msgid "@dfn{Point} is a special buffer position used by many editing commands, including the self-inserting typed characters and text insertion functions.  Other commands move point through the text to allow editing and insertion at different places."
msgstr "@dfn{ポイント(point)}とは、多くの編集コマンドにより使用される、バッファーの特別な位置のことです。これらのコマンドには、自己挿入型のタイプ文字やテキスト挿入関数が含まれます。その他のコマンドは、別の箇所でテキストの編集や挿入ができるようにポイントを移動します。"

#. type: Plain text
#: positions.texi.orig:53
msgid "Like other positions, point designates a place between two characters (or before the first character, or after the last character), rather than a particular character.  Usually terminals display the cursor over the character that immediately follows point; point is actually before the character on which the cursor sits."
msgstr "他の位置と同様、ポイントは特定の文字ではなく、2つの文字の間(または最初の文字の前、または最後の文字の後)を指します。通常、端末ではポイント直後の文字の上にカーソルを表示します。つまり、ポイントは実際はカーソルのある文字の前にあります。"

#. type: cindex
#: positions.texi.orig:54
#, no-wrap
msgid "point with narrowing"
msgstr "point with narrowing"

#. type: Plain text
#: positions.texi.orig:59
msgid "The value of point is a number no less than 1, and no greater than the buffer size plus 1.  If narrowing is in effect (@pxref{Narrowing}), then point is constrained to fall within the accessible portion of the buffer (possibly at one end of it)."
msgstr "ポイントの値は1より小さくなることはなく、そのバッファーのサイズに1を加えた値より大きくなることはありません。ナローイング(@ref{Narrowing}を参照)が効力をもつ場合、ポイントはそのバッファーのアクセス可能な範囲内(範囲の境界はバッファーの先頭か終端のいずれかの可能性がある)に閉じ込められます。"

#. type: Plain text
#: positions.texi.orig:68
msgid "Each buffer has its own value of point, which is independent of the value of point in other buffers.  Each window also has a value of point, which is independent of the value of point in other windows on the same buffer.  This is why point can have different values in various windows that display the same buffer.  When a buffer appears in only one window, the buffer's point and the window's point normally have the same value, so the distinction is rarely important.  @xref{Window Point}, for more details."
msgstr "バッファーはそれぞれ自身のポイント値をもち、それは他のバッファーのポイント値とは無関係です。ウィンドウもそれぞれポイント値をもち、他のウィンドウ内の同じバッファー上のポイント値とは無関係です。同じバッファーを表示する種々のウィンドウが異なるポイント値をもてるのは、これが理由です。あるバッファーがただ1つのウィンドウに表示されているときは、そのバッファーのポイントとそのウィンドウのポイントは、通常は同じ値をもち、区別が重要になるのは稀です。詳細は@ref{Window Point}を参照してください。"

#. type: cindex
#: positions.texi.orig:70
#, no-wrap
msgid "current buffer position"
msgstr "current buffer position"

#. type: defun
#: positions.texi.orig:73
msgid "This function returns the value of point in the current buffer, as an integer."
msgstr "この関数は、カレントバッファー内のポイントの値を、整数でリターンする。"

#. type: group
#: positions.texi.orig:79
#, no-wrap
msgid ""
"(point)\n"
"     @result{} 175\n"
msgstr ""
"(point)\n"
"     @result{} 175\n"

#. type: defun
#: positions.texi.orig:83
#, no-wrap
msgid "point-min"
msgstr "point-min"

#. type: defun
#: positions.texi.orig:88
msgid "This function returns the minimum accessible value of point in the current buffer.  This is normally 1, but if narrowing is in effect, it is the position of the start of the region that you narrowed to.  (@xref{Narrowing}.)"
msgstr "この関数は、カレントバッファー内のアクセス可能なポイントの最小値をリターンする。これは通常は1だが、ナローイングが効力をもつ場合は、ナローイングしたリージョンの開始位置となる(@ref{Narrowing}を参照)。"

#. type: defun
#: positions.texi.orig:90
#, no-wrap
msgid "point-max"
msgstr "point-max"

#. type: defun
#: positions.texi.orig:95
msgid "This function returns the maximum accessible value of point in the current buffer.  This is @code{(1+ (buffer-size))}, unless narrowing is in effect, in which case it is the position of the end of the region that you narrowed to.  (@xref{Narrowing}.)"
msgstr "この関数は、カレントバッファー内のアクセス可能なポイントの最大値をリターンする。これはナローイングされていなければは@code{(1+ (buffer-size))}だが、ナローイングが効力をもつ場合は、ナローイングしたリージョンの終端位置となる(@ref{Narrowing}を参照)。"

#. type: defun
#: positions.texi.orig:97
#, no-wrap
msgid "buffer-end flag"
msgstr "buffer-end flag"

#. type: defun
#: positions.texi.orig:101
msgid "This function returns @code{(point-max)} if @var{flag} is greater than 0, @code{(point-min)} otherwise.  The argument @var{flag} must be a number."
msgstr "この関数は、@var{flag}が0より大なら@code{(point-max)}、それ以外は@code{(point-min)}をリターンする。引数@var{flag}は数値でなければならない。"

#. type: defun
#: positions.texi.orig:103
#, no-wrap
msgid "buffer-size &optional buffer"
msgstr "buffer-size &optional buffer"

#. type: defun
#: positions.texi.orig:107
msgid "This function returns the total number of characters in the current buffer.  In the absence of any narrowing (@pxref{Narrowing}), @code{point-max} returns a value one larger than this."
msgstr "この関数は、カレントバッファー内の文字数のトータルをリターンする。ナローイング(@ref{Narrowing}を参照)されていなければ、@code{point-max}はこれに1を加えた値をリターンする。"

#. type: defun
#: positions.texi.orig:110
msgid "If you specify a buffer, @var{buffer}, then the value is the size of @var{buffer}."
msgstr "@var{buffer}にバッファーを指定した場合、値は@var{buffer}のサイズになる。"

#. type: group
#: positions.texi.orig:115
#, no-wrap
msgid ""
"(buffer-size)\n"
"     @result{} 35\n"
msgstr ""
"(buffer-size)\n"
"     @result{} 35\n"

#. type: group
#: positions.texi.orig:119
#, no-wrap
msgid ""
"(point-max)\n"
"     @result{} 36\n"
msgstr ""
"(point-max)\n"
"     @result{} 36\n"

#. type: cindex
#: positions.texi.orig:125
#, no-wrap
msgid "motion by chars, words, lines, lists"
msgstr "motion by chars, words, lines, lists"

#. type: Plain text
#: positions.texi.orig:130
msgid "Motion functions change the value of point, either relative to the current value of point, relative to the beginning or end of the buffer, or relative to the edges of the selected window.  @xref{Point}."
msgstr ""

#. type: node
#: positions.texi.orig:139 positions.texi.orig:141
#, no-wrap
msgid "Character Motion"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Moving in terms of characters."
msgstr ""

#. type: node
#: positions.texi.orig:139 positions.texi.orig:191
#, no-wrap
msgid "Word Motion"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Moving in terms of words."
msgstr ""

#. type: node
#: positions.texi.orig:139 positions.texi.orig:240
#, no-wrap
msgid "Buffer End Motion"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Moving to the beginning or end of the buffer."
msgstr ""

#. type: node
#: positions.texi.orig:139 positions.texi.orig:293
#, no-wrap
msgid "Text Lines"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Moving in terms of lines of text."
msgstr ""

#. type: node
#: positions.texi.orig:139 positions.texi.orig:466
#, no-wrap
msgid "Screen Lines"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Moving in terms of lines as displayed."
msgstr ""

#. type: node
#: positions.texi.orig:139 positions.texi.orig:628
#, no-wrap
msgid "List Motion"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Moving by parsing lists and sexps."
msgstr ""

#. type: subsection
#: positions.texi.orig:139 positions.texi.orig:738 positions.texi.orig:739
#, no-wrap
msgid "Skipping Characters"
msgstr ""

#. type: menuentry
#: positions.texi.orig:139
msgid "Skipping characters belonging to a certain set."
msgstr ""

#. type: subsection
#: positions.texi.orig:142
#, no-wrap
msgid "Motion by Characters"
msgstr ""

#. type: Plain text
#: positions.texi.orig:147
msgid "These functions move point based on a count of characters.  @code{goto-char} is the fundamental primitive; the other functions use that."
msgstr ""

#. type: deffn
#: positions.texi.orig:148
#, no-wrap
msgid "Command goto-char position"
msgstr ""

#. type: deffn
#: positions.texi.orig:152
msgid "This function sets point in the current buffer to the value @var{position}."
msgstr ""

#. type: deffn
#: positions.texi.orig:162
msgid "If narrowing is in effect, @var{position} still counts from the beginning of the buffer, but point cannot go outside the accessible portion.  If @var{position} is out of range, @code{goto-char} moves point to the beginning or the end of the accessible portion."
msgstr ""

#. type: deffn
#: positions.texi.orig:166
msgid "When this function is called interactively, @var{position} is the numeric prefix argument, if provided; otherwise it is read from the minibuffer."
msgstr ""

#. type: deffn
#: positions.texi.orig:168
msgid "@code{goto-char} returns @var{position}."
msgstr ""

#. type: deffn
#: positions.texi.orig:170
#, no-wrap
msgid "Command forward-char &optional count"
msgstr ""

#. type: deffn
#: positions.texi.orig:177
msgid "This function moves point @var{count} characters forward, towards the end of the buffer (or backward, towards the beginning of the buffer, if @var{count} is negative).  If @var{count} is @code{nil}, the default is 1."
msgstr ""

#. type: deffn
#: positions.texi.orig:182
msgid "If this attempts to move past the beginning or end of the buffer (or the limits of the accessible portion, when narrowing is in effect), it signals an error with error symbol @code{beginning-of-buffer} or @code{end-of-buffer}."
msgstr ""

#. type: deffn
#: positions.texi.orig:184 positions.texi.orig:368 positions.texi.orig:557
msgid "In an interactive call, @var{count} is the numeric prefix argument."
msgstr ""

#. type: deffn
#: positions.texi.orig:186
#, no-wrap
msgid "Command backward-char &optional count"
msgstr ""

#. type: deffn
#: positions.texi.orig:189
msgid "This is just like @code{forward-char} except that it moves in the opposite direction."
msgstr ""

#. type: subsection
#: positions.texi.orig:192
#, no-wrap
msgid "Motion by Words"
msgstr ""

#. type: Plain text
#: positions.texi.orig:196
msgid "These functions for parsing words use the syntax table to decide whether a given character is part of a word.  @xref{Syntax Tables}."
msgstr ""

#. type: deffn
#: positions.texi.orig:197
#, no-wrap
msgid "Command forward-word &optional count"
msgstr ""

#. type: deffn
#: positions.texi.orig:201
msgid "This function moves point forward @var{count} words (or backward if @var{count} is negative).  If @var{count} is omitted or @code{nil}, it defaults to 1."
msgstr ""

#. type: deffn
#: positions.texi.orig:208
msgid "``Moving one word'' means moving until point crosses a word-constituent character and then encounters a word-separator character.  However, this function cannot move point past the boundary of the accessible portion of the buffer, or across a field boundary (@pxref{Fields}).  The most common case of a field boundary is the end of the prompt in the minibuffer."
msgstr ""

#. type: deffn
#: positions.texi.orig:213
msgid "If it is possible to move @var{count} words, without being stopped prematurely by the buffer boundary or a field boundary, the value is @code{t}.  Otherwise, the return value is @code{nil} and point stops at the buffer boundary or field boundary."
msgstr ""

#. type: deffn
#: positions.texi.orig:216
msgid "If @code{inhibit-field-text-motion} is non-@code{nil}, this function ignores field boundaries."
msgstr ""

#. type: deffn
#: positions.texi.orig:219
msgid "In an interactive call, @var{count} is specified by the numeric prefix argument."
msgstr ""

#. type: deffn
#: positions.texi.orig:221
#, no-wrap
msgid "Command backward-word &optional count"
msgstr ""

#. type: deffn
#: positions.texi.orig:224
msgid "This function is just like @code{forward-word}, except that it moves backward until encountering the front of a word, rather than forward."
msgstr ""

#. type: defopt
#: positions.texi.orig:226
#, no-wrap
msgid "words-include-escapes"
msgstr ""

#. type: defopt
#: positions.texi.orig:232
msgid "This variable affects the behavior of @code{forward-word} and everything that uses it.  If it is non-@code{nil}, then characters in the ``escape'' and ``character quote'' syntax classes count as part of words.  Otherwise, they do not."
msgstr ""

#. type: defvar
#: positions.texi.orig:234
#, no-wrap
msgid "inhibit-field-text-motion"
msgstr ""

#. type: defvar
#: positions.texi.orig:238
msgid "If this variable is non-@code{nil}, certain motion functions including @code{forward-word}, @code{forward-sentence}, and @code{forward-paragraph} ignore field boundaries."
msgstr ""

#. type: subsection
#: positions.texi.orig:241
#, no-wrap
msgid "Motion to an End of the Buffer"
msgstr ""

#. type: cindex
#: positions.texi.orig:242
#, no-wrap
msgid "move to beginning or end of buffer"
msgstr ""

#. type: Plain text
#: positions.texi.orig:245
msgid "To move point to the beginning of the buffer, write:"
msgstr ""

#. type: group
#: positions.texi.orig:249
#, no-wrap
msgid "(goto-char (point-min))\n"
msgstr ""

#. type: Plain text
#: positions.texi.orig:254
msgid "Likewise, to move to the end of the buffer, use:"
msgstr ""

#. type: group
#: positions.texi.orig:258
#, no-wrap
msgid "(goto-char (point-max))\n"
msgstr ""

#. type: Plain text
#: positions.texi.orig:264
msgid "Here are two commands that users use to do these things.  They are documented here to warn you not to use them in Lisp programs, because they set the mark and display messages in the echo area."
msgstr ""

#. type: deffn
#: positions.texi.orig:265
#, no-wrap
msgid "Command beginning-of-buffer &optional n"
msgstr ""

#. type: deffn
#: positions.texi.orig:270
msgid "This function moves point to the beginning of the buffer (or the limits of the accessible portion, when narrowing is in effect), setting the mark at the previous position (except in Transient Mark mode, if the mark is already active, it does not set the mark.)"
msgstr ""

#. type: deffn
#: positions.texi.orig:275
msgid "If @var{n} is non-@code{nil}, then it puts point @var{n} tenths of the way from the beginning of the accessible portion of the buffer.  In an interactive call, @var{n} is the numeric prefix argument, if provided; otherwise @var{n} defaults to @code{nil}."
msgstr ""

#. type: deffn
#: positions.texi.orig:277 positions.texi.orig:291
msgid "@strong{Warning:} Don't use this function in Lisp programs!"
msgstr ""

#. type: deffn
#: positions.texi.orig:279
#, no-wrap
msgid "Command end-of-buffer &optional n"
msgstr ""

#. type: deffn
#: positions.texi.orig:286
msgid "This function moves point to the end of the buffer (or the limits of the accessible portion, when narrowing is in effect), setting the mark at the previous position (except in Transient Mark mode when the mark is already active).  If @var{n} is non-@code{nil}, then it puts point @var{n} tenths of the way from the end of the accessible portion of the buffer."
msgstr ""

#. type: deffn
#: positions.texi.orig:289
msgid "In an interactive call, @var{n} is the numeric prefix argument, if provided; otherwise @var{n} defaults to @code{nil}."
msgstr ""

#. type: subsection
#: positions.texi.orig:294
#, no-wrap
msgid "Motion by Text Lines"
msgstr ""

#. type: cindex
#: positions.texi.orig:295
#, no-wrap
msgid "lines"
msgstr ""

#. type: Plain text
#: positions.texi.orig:304
msgid "Text lines are portions of the buffer delimited by newline characters, which are regarded as part of the previous line.  The first text line begins at the beginning of the buffer, and the last text line ends at the end of the buffer whether or not the last character is a newline.  The division of the buffer into text lines is not affected by the width of the window, by line continuation in display, or by how tabs and control characters are displayed."
msgstr ""

#. type: deffn
#: positions.texi.orig:305
#, no-wrap
msgid "Command beginning-of-line &optional count"
msgstr ""

#. type: deffn
#: positions.texi.orig:309
msgid "This function moves point to the beginning of the current line.  With an argument @var{count} not @code{nil} or 1, it moves forward @var{count}@minus{}1 lines and then to the beginning of the line."
msgstr ""

#. type: deffn
#: positions.texi.orig:318
msgid "This function does not move point across a field boundary (@pxref{Fields}) unless doing so would move beyond there to a different line; therefore, if @var{count} is @code{nil} or 1, and point starts at a field boundary, point does not move.  To ignore field boundaries, either bind @code{inhibit-field-text-motion} to @code{t}, or use the @code{forward-line} function instead.  For instance, @code{(forward-line 0)} does the same thing as @code{(beginning-of-line)}, except that it ignores field boundaries."
msgstr ""

#. type: deffn
#: positions.texi.orig:322 positions.texi.orig:343
msgid "If this function reaches the end of the buffer (or of the accessible portion, if narrowing is in effect), it positions point there.  No error is signaled."
msgstr ""

#. type: defun
#: positions.texi.orig:324
#, no-wrap
msgid "line-beginning-position &optional count"
msgstr ""

#. type: defun
#: positions.texi.orig:327
msgid "Return the position that @code{(beginning-of-line @var{count})} would move to."
msgstr ""

#. type: deffn
#: positions.texi.orig:329
#, no-wrap
msgid "Command end-of-line &optional count"
msgstr ""

#. type: deffn
#: positions.texi.orig:333
msgid "This function moves point to the end of the current line.  With an argument @var{count} not @code{nil} or 1, it moves forward @var{count}@minus{}1 lines and then to the end of the line."
msgstr ""

#. type: deffn
#: positions.texi.orig:339
msgid "This function does not move point across a field boundary (@pxref{Fields}) unless doing so would move beyond there to a different line; therefore, if @var{count} is @code{nil} or 1, and point starts at a field boundary, point does not move.  To ignore field boundaries, bind @code{inhibit-field-text-motion} to @code{t}."
msgstr ""

#. type: defun
#: positions.texi.orig:345
#, no-wrap
msgid "line-end-position &optional count"
msgstr ""

#. type: defun
#: positions.texi.orig:348
msgid "Return the position that @code{(end-of-line @var{count})} would move to."
msgstr ""

#. type: deffn
#: positions.texi.orig:350
#, no-wrap
msgid "Command forward-line &optional count"
msgstr ""

#. type: cindex
#: positions.texi.orig:351
#, no-wrap
msgid "beginning of line"
msgstr ""

#. type: deffn
#: positions.texi.orig:357
msgid "This function moves point forward @var{count} lines, to the beginning of the line.  If @var{count} is negative, it moves point @minus{}@var{count} lines backward, to the beginning of a line.  If @var{count} is zero, it moves point to the beginning of the current line.  If @var{count} is @code{nil}, that means 1."
msgstr ""

#. type: deffn
#: positions.texi.orig:361
msgid "If @code{forward-line} encounters the beginning or end of the buffer (or of the accessible portion) before finding that many lines, it sets point there.  No error is signaled."
msgstr ""

#. type: deffn
#: positions.texi.orig:366
msgid "@code{forward-line} returns the difference between @var{count} and the number of lines actually moved.  If you attempt to move down five lines from the beginning of a buffer that has only three lines, point stops at the end of the last line, and the value will be 2."
msgstr ""

#. type: defun
#: positions.texi.orig:370
#, no-wrap
msgid "count-lines start end"
msgstr ""

#. type: cindex
#: positions.texi.orig:371
#, no-wrap
msgid "lines in region"
msgstr ""

#. type: anchor{#1}
#: positions.texi.orig:379
msgid "Definition of count-lines"
msgstr ""

#. type: defun
#: positions.texi.orig:379
msgid "This function returns the number of lines between the positions @var{start} and @var{end} in the current buffer.  If @var{start} and @var{end} are equal, then it returns 0.  Otherwise it returns at least 1, even if @var{start} and @var{end} are on the same line.  This is because the text between them, considered in isolation, must contain at least one line unless it is empty."
msgstr ""

#. type: deffn
#: positions.texi.orig:381
#, no-wrap
msgid "Command count-words start end"
msgstr ""

#. type: cindex
#: positions.texi.orig:382
#, no-wrap
msgid "words in region"
msgstr ""

#. type: deffn
#: positions.texi.orig:385
msgid "This function returns the number of words between the positions @var{start} and @var{end} in the current buffer."
msgstr ""

#. type: deffn
#: positions.texi.orig:389
msgid "This function can also be called interactively.  In that case, it prints a message reporting the number of lines, words, and characters in the buffer, or in the region if the region is active."
msgstr ""

#. type: defun
#: positions.texi.orig:391
#, no-wrap
msgid "line-number-at-pos &optional pos"
msgstr ""

#. type: cindex
#: positions.texi.orig:392
#, no-wrap
msgid "line number"
msgstr ""

#. type: defun
#: positions.texi.orig:396
msgid "This function returns the line number in the current buffer corresponding to the buffer position @var{pos}.  If @var{pos} is @code{nil} or omitted, the current buffer position is used."
msgstr ""

#. type: deffn
#: positions.texi.orig:404
#, no-wrap
msgid "Command previous-line count"
msgstr ""

#. type: cindex
#: positions.texi.orig:405
#, no-wrap
msgid "goal column"
msgstr ""

#. type: deffn
#: positions.texi.orig:409
#, no-wrap
msgid ""
"This function moves point up @var{count} lines (down if @var{count}\n"
"is negative).  In moving, it attempts to keep point in the ``goal column''\n"
"(normally the same column that it was at the beginning of the move).\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:413 positions.texi.orig:438
#, no-wrap
msgid ""
"If there is no character in the target line exactly under the current\n"
"column, point is positioned after the character in that line which\n"
"spans this column, or at the end of the line if it is not long enough.\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:417 positions.texi.orig:442
#, no-wrap
msgid ""
"If it attempts to move beyond the top or bottom of the buffer (or clipped\n"
"region), then point is positioned in the goal column in the top or\n"
"bottom line.  No error is signaled.\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:420 positions.texi.orig:449
#, no-wrap
msgid ""
"In an interactive call, @var{count} will be the numeric\n"
"prefix argument.\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:424 positions.texi.orig:453
#, no-wrap
msgid ""
"The command @code{set-goal-column} can be used to create a semipermanent\n"
"goal column to which this command always moves.  Then it does not try to\n"
"move vertically.\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:428
#, no-wrap
msgid ""
"If you are thinking of using this in a Lisp program, consider using\n"
"@code{forward-line} with a negative argument instead.  It is usually easier\n"
"to use and more reliable (no dependence on goal column, etc.).\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:430
#, no-wrap
msgid "Command next-line count"
msgstr ""

#. type: deffn
#: positions.texi.orig:434
#, no-wrap
msgid ""
"This function moves point down @var{count} lines (up if @var{count}\n"
"is negative).  In moving, it attempts to keep point in the ``goal column''\n"
"(normally the same column that it was at the beginning of the move).\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:446
#, no-wrap
msgid ""
"In the case where the @var{count} is 1, and point is on the last\n"
"line of the buffer (or clipped region), a new empty line is inserted at the\n"
"end of the buffer (or clipped region) and point moved there.\n"
"\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:457
#, no-wrap
msgid ""
"If you are thinking of using this in a Lisp program, consider using\n"
"@code{forward-line} instead.  It is usually easier\n"
"to use and more reliable (no dependence on goal column, etc.).\n"
msgstr ""

#. type: Plain text
#: positions.texi.orig:465
msgid "Also see the functions @code{bolp} and @code{eolp} in @ref{Near Point}.  These functions do not move point, but test whether it is already at the beginning or end of a line."
msgstr ""

#. type: subsection
#: positions.texi.orig:467
#, no-wrap
msgid "Motion by Screen Lines"
msgstr ""

#. type: cindex
#: positions.texi.orig:468
#, no-wrap
msgid "screen lines, moving by"
msgstr ""

#. type: Plain text
#: positions.texi.orig:476
msgid "The line functions in the previous section count text lines, delimited only by newline characters.  By contrast, these functions count screen lines, which are defined by the way the text appears on the screen.  A text line is a single screen line if it is short enough to fit the width of the selected window, but otherwise it may occupy several screen lines."
msgstr ""

#. type: Plain text
#: positions.texi.orig:481
msgid "In some cases, text lines are truncated on the screen rather than continued onto additional screen lines.  In these cases, @code{vertical-motion} moves point much like @code{forward-line}.  @xref{Truncation}."
msgstr ""

#. type: Plain text
#: positions.texi.orig:488
msgid "Because the width of a given string depends on the flags that control the appearance of certain characters, @code{vertical-motion} behaves differently, for a given piece of text, depending on the buffer it is in, and even on the selected window (because the width, the truncation flag, and display table may vary between windows).  @xref{Usual Display}."
msgstr ""

#. type: Plain text
#: positions.texi.orig:491
msgid "These functions scan text to determine where screen lines break, and thus take time proportional to the distance scanned."
msgstr ""

#. type: defun
#: positions.texi.orig:496
#, no-wrap
msgid "vertical-motion count &optional window"
msgstr ""

#. type: defun
#: positions.texi.orig:500
msgid "This function moves point to the start of the screen line @var{count} screen lines down from the screen line containing point.  If @var{count} is negative, it moves up instead."
msgstr ""

#. type: defun
#: positions.texi.orig:509
msgid "The @var{count} argument can be a cons cell, @code{(@var{cols} . @var{lines})}, instead of an integer.  Then the function moves by @var{lines} screen lines, and puts point @var{cols} columns from the visual start of that screen line.  Note that @var{cols} are counted from the @emph{visual} start of the line; if the window is scrolled horizontally (@pxref{Horizontal Scrolling}), the column on which point will end is in addition to the number of columns by which the text is scrolled."
msgstr ""

#. type: defun
#: positions.texi.orig:513
msgid "The return value is the number of screen lines over which point was moved.  The value may be less in absolute value than @var{count} if the beginning or end of the buffer was reached."
msgstr ""

#. type: defun
#: positions.texi.orig:518
msgid "The window @var{window} is used for obtaining parameters such as the width, the horizontal scrolling, and the display table.  But @code{vertical-motion} always operates on the current buffer, even if @var{window} currently displays some other buffer."
msgstr ""

#. type: defun
#: positions.texi.orig:520
#, no-wrap
msgid "count-screen-lines &optional beg end count-final-newline window"
msgstr ""

#. type: defun
#: positions.texi.orig:527
msgid "This function returns the number of screen lines in the text from @var{beg} to @var{end}.  The number of screen lines may be different from the number of actual lines, due to line continuation, the display table, etc.  If @var{beg} and @var{end} are @code{nil} or omitted, they default to the beginning and end of the accessible portion of the buffer."
msgstr ""

#. type: defun
#: positions.texi.orig:530
msgid "If the region ends with a newline, that is ignored unless the optional third argument @var{count-final-newline} is non-@code{nil}."
msgstr ""

#. type: defun
#: positions.texi.orig:534
msgid "The optional fourth argument @var{window} specifies the window for obtaining parameters such as width, horizontal scrolling, and so on.  The default is to use the selected window's parameters."
msgstr ""

#. type: defun
#: positions.texi.orig:539
msgid "Like @code{vertical-motion}, @code{count-screen-lines} always uses the current buffer, regardless of which buffer is displayed in @var{window}.  This makes possible to use @code{count-screen-lines} in any buffer, whether or not it is currently displayed in some window."
msgstr ""

#. type: deffn
#: positions.texi.orig:541
#, no-wrap
msgid "Command move-to-window-line count"
msgstr ""

#. type: deffn
#: positions.texi.orig:548
msgid "This function moves point with respect to the text currently displayed in the selected window.  It moves point to the beginning of the screen line @var{count} screen lines from the top of the window.  If @var{count} is negative, that specifies a position @w{@minus{}@var{count}} lines from the bottom (or the last line of the buffer, if the buffer ends above the specified screen position)."
msgstr ""

#. type: deffn
#: positions.texi.orig:555
msgid "If @var{count} is @code{nil}, then point moves to the beginning of the line in the middle of the window.  If the absolute value of @var{count} is greater than the size of the window, then point moves to the place that would appear on that screen line if the window were tall enough.  This will probably cause the next redisplay to scroll to bring that location onto the screen."
msgstr ""

#. type: deffn
#: positions.texi.orig:560
msgid "The value returned is the window line number point has moved to, with the top line in the window numbered 0."
msgstr ""

#. type: defun
#: positions.texi.orig:562
#, no-wrap
msgid "compute-motion from frompos to topos width offsets window"
msgstr ""

#. type: defun
#: positions.texi.orig:568
msgid "This function scans the current buffer, calculating screen positions.  It scans the buffer forward from position @var{from}, assuming that is at screen coordinates @var{frompos}, to position @var{to} or coordinates @var{topos}, whichever comes first.  It returns the ending buffer position and screen coordinates."
msgstr ""

#. type: defun
#: positions.texi.orig:571
msgid "The coordinate arguments @var{frompos} and @var{topos} are cons cells of the form @code{(@var{hpos} . @var{vpos})}."
msgstr ""

#. type: defun
#: positions.texi.orig:576
msgid "The argument @var{width} is the number of columns available to display text; this affects handling of continuation lines.  @code{nil} means the actual number of usable text columns in the window, which is equivalent to the value returned by @code{(window-width window)}."
msgstr ""

#. type: defun
#: positions.texi.orig:585
msgid "The argument @var{offsets} is either @code{nil} or a cons cell of the form @code{(@var{hscroll} . @var{tab-offset})}.  Here @var{hscroll} is the number of columns not being displayed at the left margin; most callers get this by calling @code{window-hscroll}.  Meanwhile, @var{tab-offset} is the offset between column numbers on the screen and column numbers in the buffer.  This can be nonzero in a continuation line, when the previous screen lines' widths do not add up to a multiple of @code{tab-width}.  It is always zero in a non-continuation line."
msgstr ""

#. type: defun
#: positions.texi.orig:589
msgid "The window @var{window} serves only to specify which display table to use.  @code{compute-motion} always operates on the current buffer, regardless of what buffer is displayed in @var{window}."
msgstr ""

#. type: defun
#: positions.texi.orig:591
msgid "The return value is a list of five elements:"
msgstr ""

#. type: example
#: positions.texi.orig:594
#, no-wrap
msgid "(@var{pos} @var{hpos} @var{vpos} @var{prevhpos} @var{contin})\n"
msgstr ""

#. type: defun
#: positions.texi.orig:600
msgid "Here @var{pos} is the buffer position where the scan stopped, @var{vpos} is the vertical screen position, and @var{hpos} is the horizontal screen position."
msgstr ""

#. type: defun
#: positions.texi.orig:604
msgid "The result @var{prevhpos} is the horizontal position one character back from @var{pos}.  The result @var{contin} is @code{t} if the last line was continued after (or within) the previous character."
msgstr ""

#. type: defun
#: positions.texi.orig:611
msgid "For example, to find the buffer position of column @var{col} of screen line @var{line} of a certain window, pass the window's display start location as @var{from} and the window's upper-left coordinates as @var{frompos}.  Pass the buffer's @code{(point-max)} as @var{to}, to limit the scan to the end of the accessible portion of the buffer, and pass @var{line} and @var{col} as @var{topos}.  Here's a function that does this:"
msgstr ""

#. type: example
#: positions.texi.orig:621
#, no-wrap
msgid ""
"(defun coordinates-of-position (col line)\n"
"  (car (compute-motion (window-start)\n"
"                       '(0 . 0)\n"
"                       (point-max)\n"
"                       (cons col line)\n"
"                       (window-width)\n"
"                       (cons (window-hscroll) 0)\n"
"                       (selected-window))))\n"
msgstr ""

#. type: defun
#: positions.texi.orig:626
msgid "When you use @code{compute-motion} for the minibuffer, you need to use @code{minibuffer-prompt-width} to get the horizontal position of the beginning of the first screen line.  @xref{Minibuffer Contents}."
msgstr ""

#. type: subsection
#: positions.texi.orig:629
#, no-wrap
msgid "Moving over Balanced Expressions"
msgstr ""

#. type: cindex
#: positions.texi.orig:630
#, no-wrap
msgid "sexp motion"
msgstr ""

#. type: cindex
#: positions.texi.orig:631
#, no-wrap
msgid "Lisp expression motion"
msgstr ""

#. type: cindex
#: positions.texi.orig:632
#, no-wrap
msgid "list motion"
msgstr ""

#. type: cindex
#: positions.texi.orig:633
#, no-wrap
msgid "balanced parenthesis motion"
msgstr ""

#. type: Plain text
#: positions.texi.orig:642
msgid "Here are several functions concerned with balanced-parenthesis expressions (also called @dfn{sexps} in connection with moving across them in Emacs).  The syntax table controls how these functions interpret various characters; see @ref{Syntax Tables}.  @xref{Parsing Expressions}, for lower-level primitives for scanning sexps or parts of sexps.  For user-level commands, see @ref{Parentheses,, Commands for Editing with Parentheses, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: positions.texi.orig:643
#, no-wrap
msgid "Command forward-list &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:647
msgid "This function moves forward across @var{arg} (default 1) balanced groups of parentheses.  (Other syntactic entities such as words or paired string quotes are ignored.)"
msgstr ""

#. type: deffn
#: positions.texi.orig:649
#, no-wrap
msgid "Command backward-list &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:653
msgid "This function moves backward across @var{arg} (default 1) balanced groups of parentheses.  (Other syntactic entities such as words or paired string quotes are ignored.)"
msgstr ""

#. type: deffn
#: positions.texi.orig:655
#, no-wrap
msgid "Command up-list &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:658
msgid "This function moves forward out of @var{arg} (default 1) levels of parentheses.  A negative argument means move backward but still to a less deep spot."
msgstr ""

#. type: deffn
#: positions.texi.orig:660
#, no-wrap
msgid "Command down-list &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:664
msgid "This function moves forward into @var{arg} (default 1) levels of parentheses.  A negative argument means move backward but still go deeper in parentheses (@minus{}@var{arg} levels)."
msgstr ""

#. type: deffn
#: positions.texi.orig:666
#, no-wrap
msgid "Command forward-sexp &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:671
msgid "This function moves forward across @var{arg} (default 1) balanced expressions.  Balanced expressions include both those delimited by parentheses and other kinds, such as words and string constants.  @xref{Parsing Expressions}.  For example,"
msgstr ""

#. type: group
#: positions.texi.orig:677
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"(concat@point{} \"foo \" (car x) y z)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: positions.texi.orig:682
#, no-wrap
msgid ""
"(forward-sexp 3)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: positions.texi.orig:686
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"(concat \"foo \" (car x) y@point{} z)\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: positions.texi.orig:690
#, no-wrap
msgid "Command backward-sexp &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:692
msgid "This function moves backward across @var{arg} (default 1) balanced expressions."
msgstr ""

#. type: deffn
#: positions.texi.orig:694
#, no-wrap
msgid "Command beginning-of-defun &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:699
msgid "This function moves back to the @var{arg}th beginning of a defun.  If @var{arg} is negative, this actually moves forward, but it still moves to the beginning of a defun, not to the end of one.  @var{arg} defaults to 1."
msgstr ""

#. type: deffn
#: positions.texi.orig:701
#, no-wrap
msgid "Command end-of-defun &optional arg"
msgstr ""

#. type: deffn
#: positions.texi.orig:706
msgid "This function moves forward to the @var{arg}th end of a defun.  If @var{arg} is negative, this actually moves backward, but it still moves to the end of a defun, not to the beginning of one.  @var{arg} defaults to 1."
msgstr ""

#. type: defopt
#: positions.texi.orig:708
#, no-wrap
msgid "defun-prompt-regexp"
msgstr ""

#. type: defopt
#: positions.texi.orig:714
msgid "If non-@code{nil}, this buffer-local variable holds a regular expression that specifies what text can appear before the open-parenthesis that starts a defun.  That is to say, a defun begins on a line that starts with a match for this regular expression, followed by a character with open-parenthesis syntax."
msgstr ""

#. type: defopt
#: positions.texi.orig:716
#, no-wrap
msgid "open-paren-in-column-0-is-defun-start"
msgstr ""

#. type: defopt
#: positions.texi.orig:721
msgid "If this variable's value is non-@code{nil}, an open parenthesis in column 0 is considered to be the start of a defun.  If it is @code{nil}, an open parenthesis in column 0 has no special meaning.  The default is @code{t}."
msgstr ""

#. type: defvar
#: positions.texi.orig:723
#, no-wrap
msgid "beginning-of-defun-function"
msgstr ""

#. type: defvar
#: positions.texi.orig:730
msgid "If non-@code{nil}, this variable holds a function for finding the beginning of a defun.  The function @code{beginning-of-defun} calls this function instead of using its normal method, passing it its optional argument.  If the argument is non-@code{nil}, the function should move back by that many functions, like @code{beginning-of-defun} does."
msgstr ""

#. type: defvar
#: positions.texi.orig:732
#, no-wrap
msgid "end-of-defun-function"
msgstr ""

#. type: defvar
#: positions.texi.orig:736
msgid "If non-@code{nil}, this variable holds a function for finding the end of a defun.  The function @code{end-of-defun} calls this function instead of using its normal method."
msgstr ""

#. type: cindex
#: positions.texi.orig:740
#, no-wrap
msgid "skipping characters"
msgstr ""

#. type: Plain text
#: positions.texi.orig:745
msgid "The following two functions move point over a specified set of characters.  For example, they are often used to skip whitespace.  For related functions, see @ref{Motion and Syntax}."
msgstr ""

#. type: Plain text
#: positions.texi.orig:749
msgid "These functions convert the set string to multibyte if the buffer is multibyte, and they convert it to unibyte if the buffer is unibyte, as the search functions do (@pxref{Searching and Matching})."
msgstr ""

#. type: defun
#: positions.texi.orig:750
#, no-wrap
msgid "skip-chars-forward character-set &optional limit"
msgstr ""

#. type: defun
#: positions.texi.orig:756
msgid "This function moves point in the current buffer forward, skipping over a given set of characters.  It examines the character following point, then advances point if the character matches @var{character-set}.  This continues until it reaches a character that does not match.  The function returns the number of characters moved over."
msgstr ""

#. type: defun
#: positions.texi.orig:764
msgid "The argument @var{character-set} is a string, like the inside of a @samp{[@dots{}]} in a regular expression except that @samp{]} does not terminate it, and @samp{\\} quotes @samp{^}, @samp{-} or @samp{\\}.  Thus, @code{\"a-zA-Z\"} skips over all letters, stopping before the first nonletter, and @code{\"^a-zA-Z\"} skips nonletters stopping before the first letter.  See @xref{Regular Expressions}.  Character classes can also be used, e.g., @code{\"[:alnum:]\"}.  See @pxref{Char Classes}."
msgstr ""

#. type: defun
#: positions.texi.orig:768
msgid "If @var{limit} is supplied (it must be a number or a marker), it specifies the maximum position in the buffer that point can be skipped to.  Point will stop at or before @var{limit}."
msgstr ""

#. type: defun
#: positions.texi.orig:773
msgid "In the following example, point is initially located directly before the @samp{T}.  After the form is evaluated, point is located at the end of that line (between the @samp{t} of @samp{hat} and the newline).  The function skips all letters and spaces, but not newlines."
msgstr ""

#. type: group
#: positions.texi.orig:780
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"@point{}The cat in the hat\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: positions.texi.orig:785
#, no-wrap
msgid ""
"(skip-chars-forward \"a-zA-Z \")\n"
"     @result{} 18\n"
"\n"
msgstr ""

#. type: group
#: positions.texi.orig:790
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I read \"The cat in the hat@point{}\n"
"comes back\" twice.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defun
#: positions.texi.orig:794
#, no-wrap
msgid "skip-chars-backward character-set &optional limit"
msgstr ""

#. type: defun
#: positions.texi.orig:798
msgid "This function moves point backward, skipping characters that match @var{character-set}, until @var{limit}.  It is just like @code{skip-chars-forward} except for the direction of motion."
msgstr ""

#. type: defun
#: positions.texi.orig:801
msgid "The return value indicates the distance traveled.  It is an integer that is zero or less."
msgstr ""

#. type: cindex
#: positions.texi.orig:805
#, no-wrap
msgid "excursion"
msgstr ""

#. type: Plain text
#: positions.texi.orig:815
msgid "It is often useful to move point ``temporarily'' within a localized portion of the program.  This is called an @dfn{excursion}, and it is done with the @code{save-excursion} special form.  This construct remembers the initial identity of the current buffer, and its values of point and the mark, and restores them after the excursion completes.  It is the standard way to move point within one part of a program and avoid affecting the rest of the program, and is used thousands of times in the Lisp sources of Emacs."
msgstr ""

#.  frameset?
#. type: Plain text
#: positions.texi.orig:821
msgid "If you only need to save and restore the identity of the current buffer, use @code{save-current-buffer} or @code{with-current-buffer} instead (@pxref{Current Buffer}).  If you need to save or restore window configurations, see the forms described in @ref{Window Configurations} and in @ref{Frame Configurations}."
msgstr ""

#. type: defspec
#: positions.texi.orig:822
#, no-wrap
msgid "save-excursion body@dots{}"
msgstr ""

#. type: cindex
#: positions.texi.orig:823
#, no-wrap
msgid "mark excursion"
msgstr ""

#. type: cindex
#: positions.texi.orig:824
#, no-wrap
msgid "point excursion"
msgstr ""

#. type: defspec
#: positions.texi.orig:830
msgid "This special form saves the identity of the current buffer and the values of point and the mark in it, evaluates @var{body}, and finally restores the buffer and its saved values of point and the mark.  All three saved values are restored even in case of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits})."
msgstr ""

#. type: defspec
#: positions.texi.orig:833
msgid "The value returned by @code{save-excursion} is the result of the last form in @var{body}, or @code{nil} if no body forms were given."
msgstr ""

#. type: Plain text
#: positions.texi.orig:841
msgid "Because @code{save-excursion} only saves point and mark for the buffer that was current at the start of the excursion, any changes made to point and/or mark in other buffers, during the excursion, will remain in effect afterward.  This frequently leads to unintended consequences, so the byte compiler warns if you call @code{set-buffer} during an excursion:"
msgstr ""

#. type: example
#: positions.texi.orig:845
#, no-wrap
msgid ""
"Warning: Use `with-current-buffer' rather than\n"
"         save-excursion+set-buffer\n"
msgstr ""

#. type: Plain text
#: positions.texi.orig:850
msgid "To avoid such problems, you should call @code{save-excursion} only after setting the desired current buffer, as in the following example:"
msgstr ""

#. type: group
#: positions.texi.orig:859
#, no-wrap
msgid ""
"(defun append-string-to-buffer (string buffer)\n"
"  \"Append STRING to the end of BUFFER.\"\n"
"  (with-current-buffer buffer\n"
"    (save-excursion\n"
"      (goto-char (point-max))\n"
"      (insert string))))\n"
msgstr ""

#. type: cindex
#: positions.texi.orig:862
#, no-wrap
msgid "window excursions"
msgstr ""

#. type: Plain text
#: positions.texi.orig:865
msgid "Likewise, @code{save-excursion} does not restore window-buffer correspondences altered by functions such as @code{switch-to-buffer}."
msgstr ""

#. type: Plain text
#: positions.texi.orig:872
msgid "@strong{Warning:} Ordinary insertion of text adjacent to the saved point value relocates the saved value, just as it relocates all markers.  More precisely, the saved value is a marker with insertion type @code{nil}.  @xref{Marker Insertion Types}.  Therefore, when the saved point value is restored, it normally comes before the inserted text."
msgstr ""

#. type: Plain text
#: positions.texi.orig:877
msgid "Although @code{save-excursion} saves the location of the mark, it does not prevent functions which modify the buffer from setting @code{deactivate-mark}, and thus causing the deactivation of the mark after the command finishes.  @xref{The Mark}."
msgstr ""

#. type: cindex
#: positions.texi.orig:880
#, no-wrap
msgid "narrowing"
msgstr ""

#. type: cindex
#: positions.texi.orig:881
#, no-wrap
msgid "restriction (in a buffer)"
msgstr ""

#. type: cindex
#: positions.texi.orig:882
#, no-wrap
msgid "accessible portion (of a buffer)"
msgstr ""

#. type: Plain text
#: positions.texi.orig:888
msgid "@dfn{Narrowing} means limiting the text addressable by Emacs editing commands to a limited range of characters in a buffer.  The text that remains addressable is called the @dfn{accessible portion} of the buffer."
msgstr ""

#. type: Plain text
#: positions.texi.orig:899
msgid "Narrowing is specified with two buffer positions, which become the beginning and end of the accessible portion.  For most editing commands and primitives, these positions replace the values of the beginning and end of the buffer.  While narrowing is in effect, no text outside the accessible portion is displayed, and point cannot move outside the accessible portion.  Note that narrowing does not alter actual buffer positions (@pxref{Point}); it only determines which positions are considered the accessible portion of the buffer.  Most functions refuse to operate on text that is outside the accessible portion."
msgstr ""

#. type: Plain text
#: positions.texi.orig:902
msgid "Commands for saving buffers are unaffected by narrowing; they save the entire buffer regardless of any narrowing."
msgstr ""

#. type: Plain text
#: positions.texi.orig:906
msgid "If you need to display in a single buffer several very different types of text, consider using an alternative facility described in @ref{Swapping Text}."
msgstr ""

#. type: deffn
#: positions.texi.orig:907
#, no-wrap
msgid "Command narrow-to-region start end"
msgstr ""

#. type: deffn
#: positions.texi.orig:911
msgid "This function sets the accessible portion of the current buffer to start at @var{start} and end at @var{end}.  Both arguments should be character positions."
msgstr ""

#. type: deffn
#: positions.texi.orig:914
msgid "In an interactive call, @var{start} and @var{end} are set to the bounds of the current region (point and the mark, with the smallest first)."
msgstr ""

#. type: deffn
#: positions.texi.orig:916
#, no-wrap
msgid "Command narrow-to-page &optional move-count"
msgstr ""

#. type: deffn
#: positions.texi.orig:923
msgid "This function sets the accessible portion of the current buffer to include just the current page.  An optional first argument @var{move-count} non-@code{nil} means to move forward or backward by @var{move-count} pages and then narrow to one page.  The variable @code{page-delimiter} specifies where pages start and end (@pxref{Standard Regexps})."
msgstr ""

#. type: deffn
#: positions.texi.orig:926
msgid "In an interactive call, @var{move-count} is set to the numeric prefix argument."
msgstr ""

#. type: deffn
#: positions.texi.orig:928
#, no-wrap
msgid "Command widen"
msgstr ""

#. type: cindex
#: positions.texi.orig:929
#, no-wrap
msgid "widening"
msgstr ""

#. type: deffn
#: positions.texi.orig:933
msgid "This function cancels any narrowing in the current buffer, so that the entire contents are accessible.  This is called @dfn{widening}.  It is equivalent to the following expression:"
msgstr ""

#. type: example
#: positions.texi.orig:936
#, no-wrap
msgid "(narrow-to-region 1 (1+ (buffer-size)))\n"
msgstr ""

#. type: defun
#: positions.texi.orig:939
#, no-wrap
msgid "buffer-narrowed-p"
msgstr ""

#. type: defun
#: positions.texi.orig:942
msgid "This function returns non-@code{nil} if the buffer is narrowed, and @code{nil} otherwise."
msgstr ""

#. type: defspec
#: positions.texi.orig:944
#, no-wrap
msgid "save-restriction body@dots{}"
msgstr ""

#. type: defspec
#: positions.texi.orig:951
msgid "This special form saves the current bounds of the accessible portion, evaluates the @var{body} forms, and finally restores the saved bounds, thus restoring the same state of narrowing (or absence thereof) formerly in effect.  The state of narrowing is restored even in the event of an abnormal exit via @code{throw} or error (@pxref{Nonlocal Exits}).  Therefore, this construct is a clean way to narrow a buffer temporarily."
msgstr ""

#. type: defspec
#: positions.texi.orig:954
msgid "The value returned by @code{save-restriction} is that returned by the last form in @var{body}, or @code{nil} if no body forms were given."
msgstr ""

#. type: defspec
#: positions.texi.orig:959
msgid "@strong{Caution:} it is easy to make a mistake when using the @code{save-restriction} construct.  Read the entire description here before you try it."
msgstr ""

#. type: defspec
#: positions.texi.orig:964
msgid "If @var{body} changes the current buffer, @code{save-restriction} still restores the restrictions on the original buffer (the buffer whose restrictions it saved from), but it does not restore the identity of the current buffer."
msgstr ""

#. type: defspec
#: positions.texi.orig:972
msgid "@code{save-restriction} does @emph{not} restore point and the mark; use @code{save-excursion} for that.  If you use both @code{save-restriction} and @code{save-excursion} together, @code{save-excursion} should come first (on the outside).  Otherwise, the old point value would be restored with temporary narrowing still in effect.  If the old point value were outside the limits of the temporary narrowing, this would fail to restore it accurately."
msgstr ""

#. type: defspec
#: positions.texi.orig:974
msgid "Here is a simple example of correct use of @code{save-restriction}:"
msgstr ""

#. type: group
#: positions.texi.orig:982
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of foo\n"
"This is the contents of foo\n"
"This is the contents of foo@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: positions.texi.orig:992
#, no-wrap
msgid ""
"(save-excursion\n"
"  (save-restriction\n"
"    (goto-char 1)\n"
"    (forward-line 2)\n"
"    (narrow-to-region 1 (point))\n"
"    (goto-char (point-min))\n"
"    (replace-string \"foo\" \"bar\")))\n"
"\n"
msgstr ""

#. type: group
#: positions.texi.orig:998
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of bar\n"
"This is the contents of bar\n"
"This is the contents of foo@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""
