# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-02-17 14:59+0900\n"
"PO-Revision-Date: 2019-02-17 18:31+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: processes.texi.orig:6 processes.texi.orig:7
#, no-wrap
msgid "Processes"
msgstr "Processes"

#. type: cindex
#: processes.texi.orig:8
#, no-wrap
msgid "child process"
msgstr "child process"

#. type: cindex
#: processes.texi.orig:9
#, no-wrap
msgid "parent process"
msgstr "parent process"

#. type: cindex
#: processes.texi.orig:10
#, no-wrap
msgid "subprocess"
msgstr "subprocess"

#. type: cindex
#: processes.texi.orig:11
#, no-wrap
msgid "process"
msgstr "process"

#. type: Plain text
#: processes.texi.orig:18
msgid "In the terminology of operating systems, a @dfn{process} is a space in which a program can execute.  Emacs runs in a process.  Emacs Lisp programs can invoke other programs in processes of their own.  These are called @dfn{subprocesses} or @dfn{child processes} of the Emacs process, which is their @dfn{parent process}."
msgstr "オペレーティングシステムの用語では、@dfn{プロセス(process)}とはプログラムを実行できるスペースのことです。Emacsはプロセス内で実行されます。Emacs Lispプログラムは、別のプログラムをそれら自身のプロセス内で呼び出すことができます。これらは、@dfn{親プロセス(parent process)}であるEmacsプロセスの@dfn{サブプロセス(subprocesses)}、または@dfn{子プロセス(child processes)}と呼ばれます。"

#. type: Plain text
#: processes.texi.orig:29
msgid "A subprocess of Emacs may be @dfn{synchronous} or @dfn{asynchronous}, depending on how it is created.  When you create a synchronous subprocess, the Lisp program waits for the subprocess to terminate before continuing execution.  When you create an asynchronous subprocess, it can run in parallel with the Lisp program.  This kind of subprocess is represented within Emacs by a Lisp object which is also called a ``process''.  Lisp programs can use this object to communicate with the subprocess or to control it.  For example, you can send signals, obtain status information, receive output from the process, or send input to it."
msgstr "Emacsのサブプロセスは@dfn{同期(synchronous)}、または@dfn{非同期(asynchronous)}であり、それはそれらが作成された方法に依存します。同期サブプロセスを作成した際、Lispプログラムは実行を継続する前に、そのサブプロセスの終了を待機します。非同期サブプロセスを作成したときは、それをLispプログラムと並行して実行できます。この種のサブプロセスは、EmacsではLispオブジェクととして表現され、そのオブジェクトも``プロセス''と呼ばれています。Lispプログラムはサブプロセスとのやり取りや、サブプロセスの制御のために、このオブジェクトを使用できます。たとえばシグナル送信、ステータス情報の取得、プロセス出力の受信や、プロセスへ入力を送信することができます。"

#. type: defun
#: processes.texi.orig:30
#, no-wrap
msgid "processp object"
msgstr "processp object"

#. type: defun
#: processes.texi.orig:33
msgid "This function returns @code{t} if @var{object} represents an Emacs subprocess, @code{nil} otherwise."
msgstr "この関数は、@var{object}がEmacsのサブプロセスを表すなら@code{t}、それ以外は@code{nil}をリターンする。"

#. type: Plain text
#: processes.texi.orig:38
msgid "In addition to subprocesses of the current Emacs session, you can also access other processes running on your machine.  @xref{System Processes}."
msgstr "カレントEmacsセッションのサブプロセスに加えて、そのマシン上で実行中の他のプロセスにアクセスすることもできます。@ref{System Processes}を参照してください。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:64
#, no-wrap
msgid "Subprocess Creation"
msgstr "Subprocess Creation"

#. type: menuentry
#: processes.texi.orig:62
msgid "Functions that start subprocesses."
msgstr "サブプロセスを開始する関数。"

#. type: section
#: processes.texi.orig:62 processes.texi.orig:162 processes.texi.orig:163
#, no-wrap
msgid "Shell Arguments"
msgstr "Shell Arguments"

#. type: menuentry
#: processes.texi.orig:62
msgid "Quoting an argument to pass it to a shell."
msgstr "shellに渡すために引数をクォートする。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:249
#, no-wrap
msgid "Synchronous Processes"
msgstr "Synchronous Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Details of using synchronous subprocesses."
msgstr "同期サブプロセス使用の詳細。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:546
#, no-wrap
msgid "Asynchronous Processes"
msgstr "Asynchronous Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Starting up an asynchronous subprocess."
msgstr "非同期サブプロセスの起動。"

#. type: section
#: processes.texi.orig:62 processes.texi.orig:695 processes.texi.orig:696
#, no-wrap
msgid "Deleting Processes"
msgstr "Deleting Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Eliminating an asynchronous subprocess."
msgstr "非同期サブプロセスの削除。"

#. type: section
#: processes.texi.orig:62 processes.texi.orig:741 processes.texi.orig:742
#, no-wrap
msgid "Process Information"
msgstr "Process Information"

#. type: menuentry
#: processes.texi.orig:62
msgid "Accessing run-status and other attributes."
msgstr "実行状態および他の属性へのアクセス。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:959
#, no-wrap
msgid "Input to Processes"
msgstr "Input to Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Sending input to an asynchronous subprocess."
msgstr "非同期サブプロセスへの入力の送信。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:1035
#, no-wrap
msgid "Signals to Processes"
msgstr "Signals to Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Stopping, continuing or interrupting an asynchronous subprocess."
msgstr "非同期サブプロセスの停止、継続、割り込み。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:1135
#, no-wrap
msgid "Output from Processes"
msgstr "Output from Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Collecting output from an asynchronous subprocess."
msgstr "非同期サブプロセスからの出力の収集。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:1516
#, no-wrap
msgid "Sentinels"
msgstr "Sentinels"

#. type: menuentry
#: processes.texi.orig:62
msgid "Sentinels run when process run-status changes."
msgstr "プロセスの実行状態変更時に実行されるセンチネル。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:1642
#, no-wrap
msgid "Query Before Exit"
msgstr "Query Before Exit"

#. type: menuentry
#: processes.texi.orig:62
msgid "Whether to query if exiting will kill a process."
msgstr "exitによりプロセスがkillされる場合に問い合わせるかどうか。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:1672
#, no-wrap
msgid "System Processes"
msgstr "System Processes"

#. type: menuentry
#: processes.texi.orig:62
msgid "Accessing other processes running on your system."
msgstr "そのシステム上で実行中の別プロセスへのアクセス。"

#. type: section
#: processes.texi.orig:62 processes.texi.orig:1856 processes.texi.orig:1857
#, no-wrap
msgid "Transaction Queues"
msgstr "Transaction Queues"

#. type: menuentry
#: processes.texi.orig:62
msgid "Transaction-based communication with subprocesses."
msgstr "サブプロセスとのトランザクションベースのコミュニケション。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:1906
#, no-wrap
msgid "Network"
msgstr "Network"

#. type: menuentry
#: processes.texi.orig:62
msgid "Opening network connections."
msgstr "ネットワーク接続のopen。"

#. type: section
#: processes.texi.orig:62 processes.texi.orig:2075 processes.texi.orig:2076
#, no-wrap
msgid "Network Servers"
msgstr "Network Servers"

#. type: menuentry
#: processes.texi.orig:62
msgid "Network servers let Emacs accept net connections."
msgstr "Emacsによるネット接続のacceptを可能にするネットワークサーバー。"

#. type: section
#: processes.texi.orig:62 processes.texi.orig:2126 processes.texi.orig:2127
#, no-wrap
msgid "Datagrams"
msgstr "Datagrams"

#. type: menuentry
#: processes.texi.orig:62
msgid "UDP network connections."
msgstr "UDPネットワーク接続。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:2155
#, no-wrap
msgid "Low-Level Network"
msgstr "Low-Level Network"

#. type: menuentry
#: processes.texi.orig:62
msgid "Lower-level but more general function to create connections and servers."
msgstr "接続およびサーバーを作成するための、より低レベルだがより汎用的な関数。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:2448
#, no-wrap
msgid "Misc Network"
msgstr "Misc Network"

#. type: menuentry
#: processes.texi.orig:62
msgid "Additional relevant functions for net connections."
msgstr "ネット接続用の追加の関連関数。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:2502
#, no-wrap
msgid "Serial Ports"
msgstr "Serial Ports"

#. type: menuentry
#: processes.texi.orig:62
msgid "Communicating with serial ports."
msgstr "シリアルポートでのやり取り。"

#. type: node
#: processes.texi.orig:62 processes.texi.orig:2682
#, no-wrap
msgid "Byte Packing"
msgstr "Byte Packing"

#. type: menuentry
#: processes.texi.orig:62
msgid "Using bindat to pack and unpack binary data."
msgstr "bindatを使用したバイナリーデータのpackとunpack。"

#. type: section
#: processes.texi.orig:65
#, no-wrap
msgid "Functions that Create Subprocesses"
msgstr "Functions that Create Subprocesses"

#. type: cindex
#: processes.texi.orig:66
#, no-wrap
msgid "create subprocess"
msgstr "create subprocess"

#. type: cindex
#: processes.texi.orig:67
#, no-wrap
msgid "process creation"
msgstr "process creation"

#. type: Plain text
#: processes.texi.orig:77
msgid "There are three primitives that create a new subprocess in which to run a program.  One of them, @code{start-process}, creates an asynchronous process and returns a process object (@pxref{Asynchronous Processes}).  The other two, @code{call-process} and @code{call-process-region}, create a synchronous process and do not return a process object (@pxref{Synchronous Processes}).  There are various higher-level functions that make use of these primitives to run particular types of process."
msgstr "内部でプログラムを実行するサブプロセスを作成するために、3つのプリミティブが存在します。1つは@code{start-process}で、これは非同期プロセスを作成して、プロセスオブジェクトをリターンします(@ref{Asynchronous Processes}を参照)。他の2つは@code{call-process}と@code{call-process-region}で、これらは同期プロセスを作成して、プロセスオブジェクとをリターンしません(@ref{Synchronous Processes}を参照)。特定のタイプのプロセスを実行するために、これらのプリミティブを利用する、さまざまな高レベル関数が存在します。"

#. type: Plain text
#: processes.texi.orig:81
msgid "Synchronous and asynchronous processes are explained in the following sections.  Since the three functions are all called in a similar fashion, their common arguments are described here."
msgstr "同期プロセスと非同期プロセスについては、以降のセクションで説明します。この3つの関数はすべて類似した様式で呼び出されるので、ここでそれらに共通の引数について説明します。"

#. type: cindex
#: processes.texi.orig:82
#, no-wrap
msgid "execute program"
msgstr "execute program"

#. type: cindex
#: processes.texi.orig:83
#, no-wrap
msgid "@env{PATH} environment variable"
msgstr "@env{PATH} environment variable"

#. type: cindex
#: processes.texi.orig:84
#, no-wrap
msgid "@env{HOME} environment variable"
msgstr "@env{HOME} environment variable"

#. type: Plain text
#: processes.texi.orig:97
msgid "In all cases, the function's @var{program} argument specifies the program to be run.  An error is signaled if the file is not found or cannot be executed.  If the file name is relative, the variable @code{exec-path} contains a list of directories to search.  Emacs initializes @code{exec-path} when it starts up, based on the value of the environment variable @env{PATH}.  The standard file name constructs, @samp{~}, @samp{.}, and @samp{..}, are interpreted as usual in @code{exec-path}, but environment variable substitutions (@samp{$HOME}, etc.)@: are not recognized; use @code{substitute-in-file-name} to perform them (@pxref{File Name Expansion}).  @code{nil} in this list refers to @code{default-directory}."
msgstr "すべての場合において、その関数の@var{program}引数は、実行するプログラムを指定します。ファイルが見つからなかったり、実行できない場合は、エラーがシグナルされます。ファイル名が相対的な場合、検索するディレクトリーのリストは、変数@code{exec-path}に格納されています。Emacsは起動時、環境変数@env{PATH}の値にもとづいて、@code{exec-path}を初期化します。@code{exec-path}内では、標準的なファイル名構成要素@samp{~}、@samp{.}、@samp{..}は通常どおり解釈されますが、環境変数の置換(@samp{$HOME}等)は認識されません。それらの置換を行うには、@code{substitute-in-file-name}を使用してください(@ref{File Name Expansion}を参照)。このリスト内で@code{nil}は、@code{default-directory}を参照します。"

#. type: Plain text
#: processes.texi.orig:100
msgid "Executing a program can also try adding suffixes to the specified name:"
msgstr "プログラムの実行では、指定された名前にサフィックスの追加を試みることもできます:"

#. type: defopt
#: processes.texi.orig:101
#, no-wrap
msgid "exec-suffixes"
msgstr "exec-suffixes"

#. type: defopt
#: processes.texi.orig:106
msgid "This variable is a list of suffixes (strings) to try adding to the specified program file name.  The list should include @code{\"\"} if you want the name to be tried exactly as specified.  The default value is system-dependent."
msgstr "この変数は、指定されたプログラムファイル名への追加を試みるための、サフィックス(文字列)のリストである。指定されたとおりの名前を試みたいなら、このリストに@code{\"\"}を含めること。デフォルト値はシステムに依存する。"

#. type: Plain text
#: processes.texi.orig:112
msgid "@strong{Please note:} The argument @var{program} contains only the name of the program; it may not contain any command-line arguments.  You must use a separate argument, @var{args}, to provide those, as described below."
msgstr "@strong{注意してください:} 引数@var{program}にはプログラム名だけが含まれ、コマンドライン引数を含めることはできない。これらを提供するために、以下で説明する別の引数@var{args}を使用しなければならない。"

#. type: Plain text
#: processes.texi.orig:123
msgid "Each of the subprocess-creating functions has a @var{buffer-or-name} argument that specifies where the standard output from the program will go.  It should be a buffer or a buffer name; if it is a buffer name, that will create the buffer if it does not already exist.  It can also be @code{nil}, which says to discard the output, unless a custom filter function handles it.  (@xref{Filter Functions}, and @ref{Read and Print}.)  Normally, you should avoid having multiple processes send output to the same buffer because their output would be intermixed randomly.  For synchronous processes, you can send the output to a file instead of a buffer."
msgstr "サブプロセス作成関数にはそれぞれ、@var{buffer-or-name}引数があります。これはプログラムの標準出力の行き先を指定します。これはバッファーかバッファー名であるべきです。バッファー名なら、もしそのバッファーがまだ作成されていなければ、そのバッファーを作成します。@code{nil}を指定することもでき、その場合はカスタム製のフィルター関数が出力を処理するのでなければ、出力を破棄するよう指示します(@ref{Filter Functions}、および@ref{Read and Print}を参照のこと)。通常は、出力がランダムに混在してしまうため、同一バッファーに複数プロセスの出力を送信するのは避けるべきです。同期プロセスにたいしては、バッファーのかわりにファイルに出力を送信できます。"

#. type: cindex
#: processes.texi.orig:124
#, no-wrap
msgid "program arguments"
msgstr "program arguments"

#. type: Plain text
#: processes.texi.orig:130
msgid "All three of the subprocess-creating functions have a @code{&rest} argument, @var{args}.  The @var{args} must all be strings, and they are supplied to @var{program} as separate command line arguments.  Wildcard characters and other shell constructs have no special meanings in these strings, since the strings are passed directly to the specified program."
msgstr "これら3つのサブプロセス作成関数はすべて、@code{&rest}引数である@var{args}をもっています。@var{args}はすべて文字列でなければならず、それらは個別のコマンドライン引数として、@var{program}に与えられます。これらの文字列は指定されたプログラムに直接渡されるので、文字列内ではワイルドカード文字やその他のshell構成要素は特別な意味をもちません。"

#. type: cindex
#: processes.texi.orig:131
#, no-wrap
msgid "environment variables, subprocesses"
msgstr "environment variables, subprocesses"

#. type: Plain text
#: processes.texi.orig:136
msgid "The subprocess inherits its environment from Emacs, but you can specify overrides for it with @code{process-environment}.  @xref{System Environment}.  The subprocess gets its current directory from the value of @code{default-directory}."
msgstr "サブプロセスはその環境をEmacsから継承しますが、@code{process-environment}でそれをオーバーラードするよう指定することができます。@ref{System Environment}を参照してください。サブプロセスは自身のカレントディレクトリーを、@code{default-directory}の値から取得します。"

#. type: defvar
#: processes.texi.orig:137
#, no-wrap
msgid "exec-directory"
msgstr "exec-directory"

#. type: pindex
#: processes.texi.orig:138
#, no-wrap
msgid "movemail"
msgstr "movemail"

#. type: defvar
#: processes.texi.orig:143
msgid "The value of this variable is a string, the name of a directory that contains programs that come with GNU Emacs and are intended for Emacs to invoke.  The program @code{movemail} is an example of such a program; Rmail uses it to fetch new mail from an inbox."
msgstr "この変数の値は、GNU Emacsとともに配布され、Emacsにより呼び出されることを意図したプログラムを含むディレクトリーの名前(文字列)である。プログラム@code{movemail}はそのようなプログラムの例であり、Rmailはinboxから新しいメールを読み込むためにこのプログラムを使用する。"

#. type: defopt
#: processes.texi.orig:145
#, no-wrap
msgid "exec-path"
msgstr "exec-path"

#. type: defopt
#: processes.texi.orig:150
msgid "The value of this variable is a list of directories to search for programs to run in subprocesses.  Each element is either the name of a directory (i.e., a string), or @code{nil}, which stands for the default directory (which is the value of @code{default-directory})."
msgstr "この変数の値は、サブプロセス内で実行するためのプログラムを検索するための、ディレクトリーのリストである。要素はそれぞれ、ディレクトリーの名前(文字列)、または@code{nil}のいずれかである。@code{nil}はデフォルトディレクトリー(@code{default-directory}の値)を意味する。"

#. type: cindex
#: processes.texi.orig:150
#, no-wrap
msgid "program directories"
msgstr "program directories"

#. type: defopt
#: processes.texi.orig:155
msgid "The value of @code{exec-path} is used by @code{call-process} and @code{start-process} when the @var{program} argument is not an absolute file name."
msgstr "@code{exec-path}の値は、@var{program}引数が絶対ファイル名でないとき、@code{call-process}および@code{start-process}により使用される。"

#. type: defopt
#: processes.texi.orig:160
msgid "Generally, you should not modify @code{exec-path} directly.  Instead, ensure that your @env{PATH} environment variable is set appropriately before starting Emacs.  Trying to modify @code{exec-path} independently of @env{PATH} can lead to confusing results."
msgstr "一般的には、@code{exec-path}を直接変更するべきではない。かわりにEmacs起動前に、環境変数@env{PATH}が適切にセットされているか確認すること。@env{PATH}とは独立に@code{exec-path}の変更を試みると、混乱した結果へと導かれ得る。"

#. type: cindex
#: processes.texi.orig:164
#, no-wrap
msgid "arguments for shell commands"
msgstr "arguments for shell commands"

#. type: cindex
#: processes.texi.orig:165
#, no-wrap
msgid "shell command arguments"
msgstr "shell command arguments"

#. type: Plain text
#: processes.texi.orig:173
msgid "Lisp programs sometimes need to run a shell and give it a command that contains file names that were specified by the user.  These programs ought to be able to support any valid file name.  But the shell gives special treatment to certain characters, and if these characters occur in the file name, they will confuse the shell.  To handle these characters, use the function @code{shell-quote-argument}:"
msgstr "Lispプログラムがshellを実行して、ユーザーが指定したファイル名を含むコマンドを与える必要がある場合が時折あります。これらのプログラムは、任意の有効なファイル名をサポート可能であるはずです。しかしshellは特定の文字を特別に扱い、それらの文字がファイル名に含まれていると、shellを混乱させるでしょう。これらの文字を処理するためには、関数@code{shell-quote-argument}を使用します。"

#. type: defun
#: processes.texi.orig:174
#, no-wrap
msgid "shell-quote-argument argument"
msgstr "shell-quote-argument argument"

#. type: defun
#: processes.texi.orig:179
msgid "This function returns a string that represents, in shell syntax, an argument whose actual contents are @var{argument}.  It should work reliably to concatenate the return value into a shell command and then pass it to a shell for execution."
msgstr "この関数は、実際のコンテンツが@var{argument}であるような引数を表す文字列を、shellの構文でリターンする。リターン値をshellコマンドに結合して、実行のためにそれをshellに渡すことにより、信頼性をもって機能するはずである。"

#. type: defun
#: processes.texi.orig:184
msgid "Precisely what this function does depends on your operating system.  The function is designed to work with the syntax of your system's standard shell; if you use an unusual shell, you will need to redefine this function."
msgstr "この関数が正確に何を行うかは、オペレーティングシステムに依存する。この関数は、そのシステムの標準shellの構文で機能するようデザインされている。非標準のshellを使用する場合は、この関数を再定義する必要があるだろう。"

#. type: example
#: processes.texi.orig:189
#, no-wrap
msgid ""
";; @r{This example shows the behavior on GNU and Unix systems.}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"foo\\\\ \\\\>\\\\ bar\"\n"
"\n"
msgstr ""
";; @r{この例はGNUおよびUnixシステムでの挙動を示す}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"foo\\\\ \\\\>\\\\ bar\"\n"
"\n"

#. type: example
#: processes.texi.orig:193
#, no-wrap
msgid ""
";; @r{This example shows the behavior on MS-DOS and MS-Windows.}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"\\\"foo > bar\\\"\"\n"
msgstr ""
";; @r{この例はMS-DOSおよびMS-Windowsでの挙動を示す}\n"
"(shell-quote-argument \"foo > bar\")\n"
"     @result{} \"\\\"foo > bar\\\"\"\n"

#. type: defun
#: processes.texi.orig:197
msgid "Here's an example of using @code{shell-quote-argument} to construct a shell command:"
msgstr "以下は@code{shell-quote-argument}を使用して、shellコマンドを構築する例である:"

#. type: example
#: processes.texi.orig:203
#, no-wrap
msgid ""
"(concat \"diff -c \"\n"
"        (shell-quote-argument oldfile)\n"
"        \" \"\n"
"        (shell-quote-argument newfile))\n"
msgstr ""
"(concat \"diff -c \"\n"
"        (shell-quote-argument oldfile)\n"
"        \" \"\n"
"        (shell-quote-argument newfile))\n"

#. type: cindex
#: processes.texi.orig:206
#, no-wrap
msgid "quoting and unquoting command-line arguments"
msgstr "quoting and unquoting command-line arguments"

#. type: cindex
#: processes.texi.orig:207
#, no-wrap
msgid "minibuffer input, and command-line arguments"
msgstr "minibuffer input, and command-line arguments"

#. type: cindex
#: processes.texi.orig:208
#, no-wrap
msgid "@code{call-process}, command-line arguments from minibuffer"
msgstr "@code{call-process}, command-line arguments from minibuffer"

#. type: cindex
#: processes.texi.orig:209
#, no-wrap
msgid "@code{start-process}, command-line arguments from minibuffer"
msgstr "@code{start-process}, command-line arguments from minibuffer"

#. type: Plain text
#: processes.texi.orig:218
msgid "The following two functions are useful for combining a list of individual command-line argument strings into a single string, and taking a string apart into a list of individual command-line arguments.  These functions are mainly intended for converting user input in the minibuffer, a Lisp string, into a list of string arguments to be passed to @code{call-process} or @code{start-process}, or for converting such lists of arguments into a single Lisp string to be presented in the minibuffer or echo area."
msgstr "以下の2つの関数は、コマンドライン引数の文字列のリストを単一の文字列に結合したり、単一の文字列を個別のコマンドライン引数のリストへ分割するために有用です。これらの関数は主に、ミニバッファーでのユーザー入力であるLisp文字列を@code{call-process}や@code{start-process}に渡す文字列引数のリストへ変換したり、そのような引数のリストをミニバッファーやエコーエリアに表示するためのLisp文字列に変換することを意図しています。"

#. type: defun
#: processes.texi.orig:219
#, no-wrap
msgid "split-string-and-unquote string &optional separators"
msgstr "split-string-and-unquote string &optional separators"

#. type: defun
#: processes.texi.orig:224
msgid "This function splits @var{string} into substrings at matches for the regular expression @var{separators}, like @code{split-string} does (@pxref{Creating Strings}); in addition, it removes quoting from the substrings.  It then makes a list of the substrings and returns it."
msgstr "この関数は@code{split-string}(@pxref{Creating Strings}を参照)が行うように、正規表現@var{separators}にたいするマッチで、@var{string}を部分文字列に分割する。さらに加えて、その部分文字列からクォートを削除する。それから部分文字列のリストを作成して、それをリターンする。"

#. type: defun
#: processes.texi.orig:228
msgid "If @var{separators} is omitted or @code{nil}, it defaults to @code{\"\\\\s-+\"}, which is a regular expression that matches one or more characters with whitespace syntax (@pxref{Syntax Class Table})."
msgstr "@var{separators}が省略、または@code{nil}の場合のデフォルトは@code{\"\\\\s-+\"}で、これは空白文字構文(@ref{Syntax Class Table}を参照)をもつ1つ以上の文字にマッチする正規表現である。"

#. type: defun
#: processes.texi.orig:233
msgid "This function supports two types of quoting: enclosing a whole string in double quotes @code{\"@dots{}\"}, and quoting individual characters with a backslash escape @samp{\\}.  The latter is also used in Lisp strings, so this function can handle those as well."
msgstr "この関数は、2つのタイプのクォートをサポートする。1つは文字列全体をダブルクォートで囲う@code{\"@dots{}\"}のようなクォートで、もう1つはバックスラッシュ@samp{\\}によるエスケープで文字を個別にクォートするタイプである。後者はLisp文字列内でも使用されるので、この関数はそれらも同様に扱うことができる。"

#. type: defun
#: processes.texi.orig:235
#, no-wrap
msgid "combine-and-quote-strings list-of-strings &optional separator"
msgstr "combine-and-quote-strings list-of-strings &optional separator"

#. type: defun
#: processes.texi.orig:241
msgid "This function concatenates @var{list-of-strings} into a single string, quoting each string as necessary.  It also sticks the @var{separator} string between each pair of strings; if @var{separator} is omitted or @code{nil}, it defaults to @code{\" \"}.  The return value is the resulting string."
msgstr "この関数は、@var{list-of-strings}の各文字を必要に応じてクォートして、単一の文字列に結合する。これはさらに各文字ペアーの間に、@var{separator}文字列も挿入する。@var{separator}が省略または@code{nil}の場合のデフォルトは@code{\" \"}。リターン値は、その結果の文字列である。"

#. type: defun
#: processes.texi.orig:247
msgid "The strings in @var{list-of-strings} that need quoting are those that include @var{separator} as their substring.  Quoting a string encloses it in double quotes @code{\"@dots{}\"}.  In the simplest case, if you are consing a command from the individual command-line arguments, every argument that includes embedded blanks will be quoted."
msgstr "@var{list-of-strings}内のクォートを要する文字列には、部分文字列として@var{separator}を含むものが該当する。文字列のクォートは、それをダブルクォートで@code{\"@dots{}\"}のように囲う。もっとも単純な例では、個別のコマンドライン引数からコマンドをコンス(cons)する場合は、埋め込まれたブランクを含む文字列はそれぞれクォートされるだろう。"

#. type: section
#: processes.texi.orig:250
#, no-wrap
msgid "Creating a Synchronous Process"
msgstr "Creating a Synchronous Process"

#. type: cindex
#: processes.texi.orig:251
#, no-wrap
msgid "synchronous subprocess"
msgstr "synchronous subprocess"

#. type: Plain text
#: processes.texi.orig:260
msgid "After a @dfn{synchronous process} is created, Emacs waits for the process to terminate before continuing.  Starting Dired on GNU or Unix@footnote{On other systems, Emacs uses a Lisp emulation of @code{ls}; see @ref{Contents of Directories}.} is an example of this: it runs @code{ls} in a synchronous process, then modifies the output slightly.  Because the process is synchronous, the entire directory listing arrives in the buffer before Emacs tries to do anything with it."
msgstr ""

#. type: Plain text
#: processes.texi.orig:268
msgid "While Emacs waits for the synchronous subprocess to terminate, the user can quit by typing @kbd{C-g}.  The first @kbd{C-g} tries to kill the subprocess with a @code{SIGINT} signal; but it waits until the subprocess actually terminates before quitting.  If during that time the user types another @kbd{C-g}, that kills the subprocess instantly with @code{SIGKILL} and quits immediately (except on MS-DOS, where killing other processes doesn't work).  @xref{Quitting}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:271
msgid "The synchronous subprocess functions return an indication of how the process terminated."
msgstr ""

#. type: Plain text
#: processes.texi.orig:276
msgid "The output from a synchronous subprocess is generally decoded using a coding system, much like text read from a file.  The input sent to a subprocess by @code{call-process-region} is encoded using a coding system, much like text written into a file.  @xref{Coding Systems}."
msgstr ""

#. type: defun
#: processes.texi.orig:277
#, no-wrap
msgid "call-process program &optional infile destination display &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:279
msgid "This function calls @var{program} and waits for it to finish."
msgstr ""

#. type: defun
#: processes.texi.orig:282
msgid "The current working directory of the subprocess is @code{default-directory}."
msgstr ""

#. type: defun
#: processes.texi.orig:287
msgid "The standard input for the new process comes from file @var{infile} if @var{infile} is not @code{nil}, and from the null device otherwise.  The argument @var{destination} says where to put the process output.  Here are the possibilities:"
msgstr ""

#. type: item
#: processes.texi.orig:289
#, no-wrap
msgid "a buffer"
msgstr ""

#. type: table
#: processes.texi.orig:292
msgid "Insert the output in that buffer, before point.  This includes both the standard output stream and the standard error stream of the process."
msgstr ""

#. type: item
#: processes.texi.orig:293
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: processes.texi.orig:295
msgid "Insert the output in a buffer with that name, before point."
msgstr ""

#. type: code{#1}
#: processes.texi.orig:296
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: processes.texi.orig:298
msgid "Insert the output in the current buffer, before point."
msgstr ""

#. type: item
#: processes.texi.orig:299 processes.texi.orig:880 processes.texi.orig:2014
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: processes.texi.orig:301
msgid "Discard the output."
msgstr ""

#. type: item
#: processes.texi.orig:302
#, no-wrap
msgid "0"
msgstr ""

#. type: table
#: processes.texi.orig:305
msgid "Discard the output, and return @code{nil} immediately without waiting for the subprocess to finish."
msgstr ""

#. type: table
#: processes.texi.orig:310
msgid "In this case, the process is not truly synchronous, since it can run in parallel with Emacs; but you can think of it as synchronous in that Emacs is essentially finished with the subprocess as soon as this function returns."
msgstr ""

#. type: table
#: processes.texi.orig:313
msgid "MS-DOS doesn't support asynchronous subprocesses, so this option doesn't work there."
msgstr ""

#. type: code{#1}
#: processes.texi.orig:314
#, no-wrap
msgid "(:file @var{file-name})"
msgstr ""

#. type: table
#: processes.texi.orig:317
msgid "Send the output to the file name specified, overwriting it if it already exists."
msgstr ""

#. type: code{#1}
#: processes.texi.orig:318
#, no-wrap
msgid "(@var{real-destination} @var{error-destination})"
msgstr ""

#. type: table
#: processes.texi.orig:325
msgid "Keep the standard output stream separate from the standard error stream; deal with the ordinary output as specified by @var{real-destination}, and dispose of the error output according to @var{error-destination}.  If @var{error-destination} is @code{nil}, that means to discard the error output, @code{t} means mix it with the ordinary output, and a string specifies a file name to redirect error output into."
msgstr ""

#. type: table
#: processes.texi.orig:330
msgid "You can't directly specify a buffer to put the error output in; that is too difficult to implement.  But you can achieve this result by sending the error output to a temporary file and then inserting the file into a buffer."
msgstr ""

#. type: defun
#: processes.texi.orig:338
msgid "If @var{display} is non-@code{nil}, then @code{call-process} redisplays the buffer as output is inserted.  (However, if the coding system chosen for decoding output is @code{undecided}, meaning deduce the encoding from the actual data, then redisplay sometimes cannot continue once non-@acronym{ASCII} characters are encountered.  There are fundamental reasons why it is hard to fix this; see @ref{Output from Processes}.)"
msgstr ""

#. type: defun
#: processes.texi.orig:342
msgid "Otherwise the function @code{call-process} does no redisplay, and the results become visible on the screen only when Emacs redisplays that buffer in the normal course of events."
msgstr ""

#. type: defun
#: processes.texi.orig:345 processes.texi.orig:459
msgid "The remaining arguments, @var{args}, are strings that specify command line arguments for the program."
msgstr ""

#. type: defun
#: processes.texi.orig:351
msgid "The value returned by @code{call-process} (unless you told it not to wait) indicates the reason for process termination.  A number gives the exit status of the subprocess; 0 means success, and any other value means failure.  If the process terminated with a signal, @code{call-process} returns a string describing the signal."
msgstr ""

#. type: defun
#: processes.texi.orig:353
msgid "In the examples below, the buffer @samp{foo} is current."
msgstr ""

#. type: group
#: processes.texi.orig:358
#, no-wrap
msgid ""
"(call-process \"pwd\" nil t)\n"
"     @result{} 0\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:362
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"/home/lewis/manual\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: processes.texi.orig:367
#, no-wrap
msgid ""
"(call-process \"grep\" nil \"bar\" nil \"lewis\" \"/etc/passwd\")\n"
"     @result{} 0\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:370
#, no-wrap
msgid ""
"---------- Buffer: bar ----------\n"
"lewis:x:1001:1001:Bil Lewis,,,,:/home/lewis:/bin/bash\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:372
#, no-wrap
msgid "---------- Buffer: bar ----------\n"
msgstr ""

#. type: defun
#: processes.texi.orig:377
msgid "Here is an example of the use of @code{call-process}, as used to be found in the definition of the @code{insert-directory} function:"
msgstr ""

#. type: group
#: processes.texi.orig:384
#, no-wrap
msgid ""
"(call-process insert-directory-program nil t nil switches\n"
"              (if full-directory-p\n"
"                  (concat (file-name-as-directory file) \".\")\n"
"                file))\n"
msgstr ""

#. type: defun
#: processes.texi.orig:388
#, no-wrap
msgid "process-file program &optional infile buffer display &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:393
msgid "This function processes files synchronously in a separate process.  It is similar to @code{call-process}, but may invoke a file handler based on the value of the variable @code{default-directory}, which specifies the current working directory of the subprocess."
msgstr ""

#. type: defun
#: processes.texi.orig:396
msgid "The arguments are handled in almost the same way as for @code{call-process}, with the following differences:"
msgstr ""

#. type: defun
#: processes.texi.orig:403
msgid "Some file handlers may not support all combinations and forms of the arguments @var{infile}, @var{buffer}, and @var{display}.  For example, some file handlers might behave as if @var{display} were @code{nil}, regardless of the value actually passed.  As another example, some file handlers might not support separating standard output and error output by way of the @var{buffer} argument."
msgstr ""

#. type: defun
#: processes.texi.orig:408
msgid "If a file handler is invoked, it determines the program to run based on the first argument @var{program}.  For instance, suppose that a handler for remote files is invoked.  Then the path that is used for searching for the program might be different from @code{exec-path}."
msgstr ""

#. type: defun
#: processes.texi.orig:415
msgid "The second argument @var{infile} may invoke a file handler.  The file handler could be different from the handler chosen for the @code{process-file} function itself.  (For example, @code{default-directory} could be on one remote host, and @var{infile} on a different remote host.  Or @code{default-directory} could be non-special, whereas @var{infile} is on a remote host.)"
msgstr ""

#. type: defun
#: processes.texi.orig:419
msgid "If @var{buffer} is a list of the form @code{(@var{real-destination} @var{error-destination})}, and @var{error-destination} names a file, then the same remarks as for @var{infile} apply."
msgstr ""

#. type: defun
#: processes.texi.orig:427
msgid "The remaining arguments (@var{args}) will be passed to the process verbatim.  Emacs is not involved in processing file names that are present in @var{args}.  To avoid confusion, it may be best to avoid absolute file names in @var{args}, but rather to specify all file names as relative to @code{default-directory}.  The function @code{file-relative-name} is useful for constructing such relative file names."
msgstr ""

#. type: defvar
#: processes.texi.orig:429
#, no-wrap
msgid "process-file-side-effects"
msgstr ""

#. type: defvar
#: processes.texi.orig:432
msgid "This variable indicates whether a call of @code{process-file} changes remote files."
msgstr ""

#. type: defvar
#: processes.texi.orig:437
msgid "By default, this variable is always set to @code{t}, meaning that a call of @code{process-file} could potentially change any file on a remote host.  When set to @code{nil}, a file handler could optimize its behavior with respect to remote file attribute caching."
msgstr ""

#. type: defvar
#: processes.texi.orig:440
msgid "You should only ever change this variable with a let-binding; never with @code{setq}."
msgstr ""

#. type: defun
#: processes.texi.orig:442
#, no-wrap
msgid "call-process-region start end program &optional delete destination display &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:448
msgid "This function sends the text from @var{start} to @var{end} as standard input to a process running @var{program}.  It deletes the text sent if @var{delete} is non-@code{nil}; this is useful when @var{destination} is @code{t}, to insert the output in the current buffer in place of the input."
msgstr ""

#. type: defun
#: processes.texi.orig:456
msgid "The arguments @var{destination} and @var{display} control what to do with the output from the subprocess, and whether to update the display as it comes in.  For details, see the description of @code{call-process}, above.  If @var{destination} is the integer 0, @code{call-process-region} discards the output and returns @code{nil} immediately, without waiting for the subprocess to finish (this only works if asynchronous subprocesses are supported; i.e., not on MS-DOS)."
msgstr ""

#. type: defun
#: processes.texi.orig:464
msgid "The return value of @code{call-process-region} is just like that of @code{call-process}: @code{nil} if you told it to return without waiting; otherwise, a number or string which indicates how the subprocess terminated."
msgstr ""

#. type: defun
#: processes.texi.orig:471
msgid "In the following example, we use @code{call-process-region} to run the @code{cat} utility, with standard input being the first five characters in buffer @samp{foo} (the word @samp{input}).  @code{cat} copies its standard input into its standard output.  Since the argument @var{destination} is @code{t}, this output is inserted in the current buffer."
msgstr ""

#. type: group
#: processes.texi.orig:477
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"input@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: processes.texi.orig:482
#, no-wrap
msgid ""
"(call-process-region 1 6 \"cat\" nil t)\n"
"     @result{} 0\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:486
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"inputinput@point{}\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defun
#: processes.texi.orig:491
msgid "For example, the @code{shell-command-on-region} command uses @code{call-process-region} in a manner similar to this:"
msgstr ""

#. type: group
#: processes.texi.orig:501
#, no-wrap
msgid ""
"(call-process-region\n"
" start end\n"
" shell-file-name      ; @r{name of program}\n"
" nil                  ; @r{do not delete region}\n"
" buffer               ; @r{send output to @code{buffer}}\n"
" nil                  ; @r{no redisplay during output}\n"
" \"-c\" command)        ; @r{arguments for the shell}\n"
msgstr ""

#. type: defun
#: processes.texi.orig:506
#, no-wrap
msgid "call-process-shell-command command &optional infile destination display"
msgstr ""

#. type: defun
#: processes.texi.orig:512
msgid "This function executes the shell command @var{command} synchronously.  The arguments are handled as in @code{call-process}.  An old calling convention allowed to pass any number of additional arguments after @var{display}, which were concatenated to @var{command}; this is still supported, but strongly discouraged."
msgstr ""

#. type: defun
#: processes.texi.orig:514
#, no-wrap
msgid "process-file-shell-command command &optional infile destination display"
msgstr ""

#. type: defun
#: processes.texi.orig:521
msgid "This function is like @code{call-process-shell-command}, but uses @code{process-file} internally.  Depending on @code{default-directory}, @var{command} can be executed also on remote hosts.  An old calling convention allowed to pass any number of additional arguments after @var{display}, which were concatenated to @var{command}; this is still supported, but strongly discouraged."
msgstr ""

#. type: defun
#: processes.texi.orig:523
#, no-wrap
msgid "shell-command-to-string command"
msgstr ""

#. type: defun
#: processes.texi.orig:526
msgid "This function executes @var{command} (a string) as a shell command, then returns the command's output as a string."
msgstr ""

#. type: defun
#: processes.texi.orig:531
#, no-wrap
msgid "process-lines program &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:538
msgid "This function runs @var{program}, waits for it to finish, and returns its output as a list of strings.  Each string in the list holds a single line of text output by the program; the end-of-line characters are stripped from each line.  The arguments beyond @var{program}, @var{args}, are strings that specify command-line arguments with which to run the program."
msgstr ""

#. type: defun
#: processes.texi.orig:541
msgid "If @var{program} exits with a non-zero exit status, this function signals an error."
msgstr ""

#. type: defun
#: processes.texi.orig:544
msgid "This function works by calling @code{call-process}, so program output is decoded in the same way as for @code{call-process}."
msgstr ""

#. type: section
#: processes.texi.orig:547
#, no-wrap
msgid "Creating an Asynchronous Process"
msgstr ""

#. type: cindex
#: processes.texi.orig:548
#, no-wrap
msgid "asynchronous subprocess"
msgstr ""

#. type: Plain text
#: processes.texi.orig:558
msgid "In this section, we describe how to create an @dfn{asynchronous process}.  After an asynchronous process is created, it runs in parallel with Emacs, and Emacs can communicate with it using the functions described in the following sections (@pxref{Input to Processes}, and @pxref{Output from Processes}).  Note that process communication is only partially asynchronous: Emacs sends data to the process only when certain functions are called, and Emacs accepts data from the process only while waiting for input or for a time delay."
msgstr ""

#. type: cindex
#: processes.texi.orig:559
#, no-wrap
msgid "pty"
msgstr ""

#. type: cindex
#: processes.texi.orig:560
#, no-wrap
msgid "pipe"
msgstr ""

#. type: Plain text
#: processes.texi.orig:573
msgid "An asynchronous process is controlled either via a @dfn{pty} (pseudo-terminal) or a @dfn{pipe}.  The choice of pty or pipe is made when creating the process, based on the value of the variable @code{process-connection-type} (see below).  Ptys are usually preferable for processes visible to the user, as in Shell mode, because they allow for job control (@kbd{C-c}, @kbd{C-z}, etc.)@: between the process and its children, whereas pipes do not.  For subprocesses used for internal purposes by programs, it is often better to use a pipe, because they are more efficient, and because they are immune to stray character injections that ptys introduce for large (around 500 byte) messages.  Also, the total number of ptys is limited on many systems and it is good not to waste them."
msgstr ""

#. type: defun
#: processes.texi.orig:574
#, no-wrap
msgid "start-process name buffer-or-name program &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:582
msgid "This function creates a new asynchronous subprocess and starts the program @var{program} running in it.  It returns a process object that stands for the new subprocess in Lisp.  The argument @var{name} specifies the name for the process object; if a process with this name already exists, then @var{name} is modified (by appending @samp{<1>}, etc.)@: to be unique.  The buffer @var{buffer-or-name} is the buffer to associate with the process."
msgstr ""

#. type: defun
#: processes.texi.orig:587
msgid "If @var{program} is @code{nil}, Emacs opens a new pseudoterminal (pty)  and associates its input and output with @var{buffer-or-name}, without creating a subprocess.  In that case, the remaining arguments @var{args} are ignored."
msgstr ""

#. type: defun
#: processes.texi.orig:590
msgid "The remaining arguments, @var{args}, are strings that specify command line arguments for the subprocess."
msgstr ""

#. type: defun
#: processes.texi.orig:599
msgid "In the example below, the first process is started and runs (rather, sleeps) for 100 seconds (the output buffer @samp{foo} is created immediately).  Meanwhile, the second process is started, and given the name @samp{my-process<1>} for the sake of uniqueness.  It inserts the directory listing at the end of the buffer @samp{foo}, before the first process finishes.  Then it finishes, and a message to that effect is inserted in the buffer.  Much later, the first process finishes, and another message is inserted in the buffer for it."
msgstr ""

#. type: group
#: processes.texi.orig:604
#, no-wrap
msgid ""
"(start-process \"my-process\" \"foo\" \"sleep\" \"100\")\n"
"     @result{} #<process my-process>\n"
msgstr ""

#. type: group
#: processes.texi.orig:609
#, no-wrap
msgid ""
"(start-process \"my-process\" \"foo\" \"ls\" \"-l\" \"/bin\")\n"
"     @result{} #<process my-process<1>>\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:616
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"total 8336\n"
"-rwxr-xr-x 1 root root 971384 Mar 30 10:14 bash\n"
"-rwxr-xr-x 1 root root 146920 Jul  5  2011 bsd-csh\n"
"@dots{}\n"
"-rwxr-xr-x 1 root root 696880 Feb 28 15:55 zsh4\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:618
#, no-wrap
msgid ""
"Process my-process<1> finished\n"
"\n"
msgstr ""

#. type: group
#: processes.texi.orig:621
#, no-wrap
msgid ""
"Process my-process finished\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: defun
#: processes.texi.orig:625
#, no-wrap
msgid "start-file-process name buffer-or-name program &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:629
msgid "Like @code{start-process}, this function starts a new asynchronous subprocess running @var{program} in it, and returns its process object."
msgstr ""

#. type: defun
#: processes.texi.orig:636
msgid "The difference from @code{start-process} is that this function may invoked a file handler based on the value of @code{default-directory}.  This handler ought to run @var{program}, perhaps on the local host, perhaps on a remote host that corresponds to @code{default-directory}.  In the latter case, the local part of @code{default-directory} becomes the working directory of the process."
msgstr ""

#. type: defun
#: processes.texi.orig:639
msgid "This function does not try to invoke file name handlers for @var{program} or for the @var{program-args}."
msgstr ""

#. type: defun
#: processes.texi.orig:643
msgid "Depending on the implementation of the file handler, it might not be possible to apply @code{process-filter} or @code{process-sentinel} to the resulting process object.  @xref{Filter Functions}, and @ref{Sentinels}."
msgstr ""

#. type: defun
#: processes.texi.orig:649
msgid "Some file handlers may not support @code{start-file-process} (for example the function @code{ange-ftp-hook-function}).  In such cases, this function does nothing and returns @code{nil}."
msgstr ""

#. type: defun
#: processes.texi.orig:651
#, no-wrap
msgid "start-process-shell-command name buffer-or-name command"
msgstr ""

#. type: defun
#: processes.texi.orig:656
msgid "This function is like @code{start-process}, except that it uses a shell to execute the specified command.  The argument @var{command} is a shell command name.  The variable @code{shell-file-name} specifies which shell to use."
msgstr ""

#. type: defun
#: processes.texi.orig:665
msgid "The point of running a program through the shell, rather than directly with @code{start-process}, is so that you can employ shell features such as wildcards in the arguments.  It follows that if you include any arbitrary user-specified arguments in the command, you should quote them with @code{shell-quote-argument} first, so that any special shell characters do @emph{not} have their special shell meanings.  @xref{Shell Arguments}.  Of course, when executing commands based on user input you should also consider the security implications."
msgstr ""

#. type: defun
#: processes.texi.orig:667
#, no-wrap
msgid "start-file-process-shell-command name buffer-or-name command"
msgstr ""

#. type: defun
#: processes.texi.orig:671
msgid "This function is like @code{start-process-shell-command}, but uses @code{start-file-process} internally.  Because of this, @var{command} can also be executed on remote hosts, depending on @code{default-directory}."
msgstr ""

#. type: defvar
#: processes.texi.orig:673
#, no-wrap
msgid "process-connection-type"
msgstr ""

#. type: defvar
#: processes.texi.orig:677
msgid "This variable controls the type of device used to communicate with asynchronous subprocesses.  If it is non-@code{nil}, then ptys are used, when available.  Otherwise, pipes are used."
msgstr ""

#. type: defvar
#: processes.texi.orig:682
msgid "The value of @code{process-connection-type} takes effect when @code{start-process} is called.  So you can specify how to communicate with one subprocess by binding the variable around the call to @code{start-process}."
msgstr ""

#. type: group
#: processes.texi.orig:687
#, no-wrap
msgid ""
"(let ((process-connection-type nil))  ; @r{use a pipe}\n"
"  (start-process @dots{}))\n"
msgstr ""

#. type: defvar
#: processes.texi.orig:693
msgid "To determine whether a given subprocess actually got a pipe or a pty, use the function @code{process-tty-name} (@pxref{Process Information})."
msgstr ""

#. type: cindex
#: processes.texi.orig:697
#, no-wrap
msgid "deleting processes"
msgstr ""

#. type: Plain text
#: processes.texi.orig:706
msgid "@dfn{Deleting a process} disconnects Emacs immediately from the subprocess.  Processes are deleted automatically after they terminate, but not necessarily right away.  You can delete a process explicitly at any time.  If you explicitly delete a terminated process before it is deleted automatically, no harm results.  Deleting a running process sends a signal to terminate it (and its child processes, if any), and calls the process sentinel.  @xref{Sentinels}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:713
msgid "When a process is deleted, the process object itself continues to exist as long as other Lisp objects point to it.  All the Lisp primitives that work on process objects accept deleted processes, but those that do I/O or send signals will report an error.  The process mark continues to point to the same place as before, usually into a buffer where output from the process was being inserted."
msgstr ""

#. type: defopt
#: processes.texi.orig:714
#, no-wrap
msgid "delete-exited-processes"
msgstr ""

#. type: defopt
#: processes.texi.orig:720
msgid "This variable controls automatic deletion of processes that have terminated (due to calling @code{exit} or to a signal).  If it is @code{nil}, then they continue to exist until the user runs @code{list-processes}.  Otherwise, they are deleted immediately after they exit."
msgstr ""

#. type: defun
#: processes.texi.orig:722
#, no-wrap
msgid "delete-process process"
msgstr ""

#. type: defun
#: processes.texi.orig:732
msgid "This function deletes a process, killing it with a @code{SIGKILL} signal.  The argument may be a process, the name of a process, a buffer, or the name of a buffer.  (A buffer or buffer-name stands for the process that @code{get-buffer-process} returns.)  Calling @code{delete-process} on a running process terminates it, updates the process status, and runs the sentinel immediately.  If the process has already terminated, calling @code{delete-process} has no effect on its status, or on the running of its sentinel (which will happen sooner or later)."
msgstr ""

#. type: group
#: processes.texi.orig:737
#, no-wrap
msgid ""
"(delete-process \"*shell*\")\n"
"     @result{} nil\n"
msgstr ""

#. type: cindex
#: processes.texi.orig:743
#, no-wrap
msgid "process information"
msgstr ""

#. type: Plain text
#: processes.texi.orig:746
msgid "Several functions return information about processes."
msgstr ""

#. type: deffn
#: processes.texi.orig:747
#, no-wrap
msgid "Command list-processes &optional query-only buffer"
msgstr ""

#. type: deffn
#: processes.texi.orig:751
msgid "This command displays a listing of all living processes.  In addition, it finally deletes any process whose status was @samp{Exited} or @samp{Signaled}.  It returns @code{nil}."
msgstr ""

#. type: deffn
#: processes.texi.orig:755
msgid "The processes are shown in a buffer named @file{*Process List*} (unless you specify otherwise using the optional argument @var{buffer}), whose major mode is Process Menu mode."
msgstr ""

#. type: deffn
#: processes.texi.orig:758
msgid "If @var{query-only} is non-@code{nil}, it only lists processes whose query flag is non-@code{nil}.  @xref{Query Before Exit}."
msgstr ""

#. type: defun
#: processes.texi.orig:760
#, no-wrap
msgid "process-list"
msgstr ""

#. type: defun
#: processes.texi.orig:762
msgid "This function returns a list of all processes that have not been deleted."
msgstr ""

#. type: group
#: processes.texi.orig:767
#, no-wrap
msgid ""
"(process-list)\n"
"     @result{} (#<process display-time> #<process shell>)\n"
msgstr ""

#. type: defun
#: processes.texi.orig:771
#, no-wrap
msgid "get-process name"
msgstr ""

#. type: defun
#: processes.texi.orig:774
msgid "This function returns the process named @var{name} (a string), or @code{nil} if there is none."
msgstr ""

#. type: group
#: processes.texi.orig:779
#, no-wrap
msgid ""
"(get-process \"shell\")\n"
"     @result{} #<process shell>\n"
msgstr ""

#. type: defun
#: processes.texi.orig:783
#, no-wrap
msgid "process-command process"
msgstr ""

#. type: defun
#: processes.texi.orig:788
msgid "This function returns the command that was executed to start @var{process}.  This is a list of strings, the first string being the program executed and the rest of the strings being the arguments that were given to the program."
msgstr ""

#. type: group
#: processes.texi.orig:793
#, no-wrap
msgid ""
"(process-command (get-process \"shell\"))\n"
"     @result{} (\"bash\" \"-i\")\n"
msgstr ""

#. type: defun
#: processes.texi.orig:797
#, no-wrap
msgid "process-contact process &optional key"
msgstr ""

#. type: defun
#: processes.texi.orig:804
msgid "This function returns information about how a network or serial process was set up.  When @var{key} is @code{nil}, it returns @code{(@var{hostname} @var{service})} for a network process, and @code{(@var{port} @var{speed})} for a serial process.  For an ordinary child process, this function always returns @code{t}."
msgstr ""

#. type: defun
#: processes.texi.orig:810
msgid "If @var{key} is @code{t}, the value is the complete status information for the connection, server, or serial port; that is, the list of keywords and values specified in @code{make-network-process} or @code{make-serial-process}, except that some of the values represent the current status instead of what you specified."
msgstr ""

#. type: defun
#: processes.texi.orig:813
msgid "For a network process, the values include (see @code{make-network-process} for a complete list):"
msgstr ""

#. type: item
#: processes.texi.orig:815
#, no-wrap
msgid ":buffer"
msgstr ""

#. type: table
#: processes.texi.orig:817
msgid "The associated value is the process buffer."
msgstr ""

#. type: item
#: processes.texi.orig:817
#, no-wrap
msgid ":filter"
msgstr ""

#. type: table
#: processes.texi.orig:819
msgid "The associated value is the process filter function."
msgstr ""

#. type: item
#: processes.texi.orig:819
#, no-wrap
msgid ":sentinel"
msgstr ""

#. type: table
#: processes.texi.orig:821
msgid "The associated value is the process sentinel function."
msgstr ""

#. type: item
#: processes.texi.orig:821
#, no-wrap
msgid ":remote"
msgstr ""

#. type: table
#: processes.texi.orig:823
msgid "In a connection, the address in internal format of the remote peer."
msgstr ""

#. type: item
#: processes.texi.orig:823
#, no-wrap
msgid ":local"
msgstr ""

#. type: table
#: processes.texi.orig:825
msgid "The local address, in internal format."
msgstr ""

#. type: item
#: processes.texi.orig:825
#, no-wrap
msgid ":service"
msgstr ""

#. type: table
#: processes.texi.orig:828
msgid "In a server, if you specified @code{t} for @var{service}, this value is the actual port number."
msgstr ""

#. type: defun
#: processes.texi.orig:832
msgid "@code{:local} and @code{:remote} are included even if they were not specified explicitly in @code{make-network-process}."
msgstr ""

#. type: defun
#: processes.texi.orig:835
msgid "For a serial process, see @code{make-serial-process} and @code{serial-process-configure} for a list of keys."
msgstr ""

#. type: defun
#: processes.texi.orig:838
msgid "If @var{key} is a keyword, the function returns the value corresponding to that keyword."
msgstr ""

#. type: defun
#: processes.texi.orig:840
#, no-wrap
msgid "process-id process"
msgstr ""

#. type: defun
#: processes.texi.orig:846
msgid "This function returns the @acronym{PID} of @var{process}.  This is an integer that distinguishes the process @var{process} from all other processes running on the same computer at the current time.  The @acronym{PID} of a process is chosen by the operating system kernel when the process is started and remains constant as long as the process exists."
msgstr ""

#. type: defun
#: processes.texi.orig:848
#, no-wrap
msgid "process-name process"
msgstr ""

#. type: defun
#: processes.texi.orig:850
msgid "This function returns the name of @var{process}, as a string."
msgstr ""

#. type: defun
#: processes.texi.orig:852
#, no-wrap
msgid "process-status process-name"
msgstr ""

#. type: defun
#: processes.texi.orig:856
msgid "This function returns the status of @var{process-name} as a symbol.  The argument @var{process-name} must be a process, a buffer, or a process name (a string)."
msgstr ""

#. type: defun
#: processes.texi.orig:858
msgid "The possible values for an actual subprocess are:"
msgstr ""

#. type: item
#: processes.texi.orig:860
#, no-wrap
msgid "run"
msgstr ""

#. type: table
#: processes.texi.orig:862
msgid "for a process that is running."
msgstr ""

#. type: item
#: processes.texi.orig:862
#, no-wrap
msgid "stop"
msgstr ""

#. type: table
#: processes.texi.orig:864
msgid "for a process that is stopped but continuable."
msgstr ""

#. type: item
#: processes.texi.orig:864
#, no-wrap
msgid "exit"
msgstr ""

#. type: table
#: processes.texi.orig:866
msgid "for a process that has exited."
msgstr ""

#. type: item
#: processes.texi.orig:866
#, no-wrap
msgid "signal"
msgstr ""

#. type: table
#: processes.texi.orig:868
msgid "for a process that has received a fatal signal."
msgstr ""

#. type: item
#: processes.texi.orig:868
#, no-wrap
msgid "open"
msgstr ""

#. type: table
#: processes.texi.orig:870
msgid "for a network connection that is open."
msgstr ""

#. type: item
#: processes.texi.orig:870
#, no-wrap
msgid "closed"
msgstr ""

#. type: table
#: processes.texi.orig:874
msgid "for a network connection that is closed.  Once a connection is closed, you cannot reopen it, though you might be able to open a new connection to the same place."
msgstr ""

#. type: item
#: processes.texi.orig:874
#, no-wrap
msgid "connect"
msgstr ""

#. type: table
#: processes.texi.orig:876
msgid "for a non-blocking connection that is waiting to complete."
msgstr ""

#. type: item
#: processes.texi.orig:876
#, no-wrap
msgid "failed"
msgstr ""

#. type: table
#: processes.texi.orig:878
msgid "for a non-blocking connection that has failed to complete."
msgstr ""

#. type: item
#: processes.texi.orig:878
#, no-wrap
msgid "listen"
msgstr ""

#. type: table
#: processes.texi.orig:880
msgid "for a network server that is listening."
msgstr ""

#. type: table
#: processes.texi.orig:882
msgid "if @var{process-name} is not the name of an existing process."
msgstr ""

#. type: group
#: processes.texi.orig:888
#, no-wrap
msgid ""
"(process-status (get-buffer \"*shell*\"))\n"
"     @result{} run\n"
msgstr ""

#. type: defun
#: processes.texi.orig:894
msgid "For a network connection, @code{process-status} returns one of the symbols @code{open} or @code{closed}.  The latter means that the other side closed the connection, or Emacs did @code{delete-process}."
msgstr ""

#. type: defun
#: processes.texi.orig:896
#, no-wrap
msgid "process-live-p process"
msgstr ""

#. type: defun
#: processes.texi.orig:900
msgid "This function returns non-@code{nil} if @var{process} is alive.  A process is considered alive if its status is @code{run}, @code{open}, @code{listen}, @code{connect} or @code{stop}."
msgstr ""

#. type: defun
#: processes.texi.orig:902
#, no-wrap
msgid "process-type process"
msgstr ""

#. type: defun
#: processes.texi.orig:906
msgid "This function returns the symbol @code{network} for a network connection or server, @code{serial} for a serial port connection, or @code{real} for a real subprocess."
msgstr ""

#. type: defun
#: processes.texi.orig:908
#, no-wrap
msgid "process-exit-status process"
msgstr ""

#. type: defun
#: processes.texi.orig:913
msgid "This function returns the exit status of @var{process} or the signal number that killed it.  (Use the result of @code{process-status} to determine which of those it is.)  If @var{process} has not yet terminated, the value is 0."
msgstr ""

#. type: defun
#: processes.texi.orig:915
#, no-wrap
msgid "process-tty-name process"
msgstr ""

#. type: defun
#: processes.texi.orig:922
msgid "This function returns the terminal name that @var{process} is using for its communication with Emacs---or @code{nil} if it is using pipes instead of a terminal (see @code{process-connection-type} in @ref{Asynchronous Processes}).  If @var{process} represents a program running on a remote host, the terminal name used by that program on the remote host is provided as process property @code{remote-tty}."
msgstr ""

#. type: defun
#: processes.texi.orig:924
#, no-wrap
msgid "process-coding-system process"
msgstr ""

#. type: anchor{#1}
#: processes.texi.orig:929
msgid "Coding systems for a subprocess"
msgstr ""

#. type: defun
#: processes.texi.orig:929
msgid "This function returns a cons cell @code{(@var{decode} . @var{encode})}, describing the coding systems in use for decoding output from, and encoding input to, @var{process} (@pxref{Coding Systems})."
msgstr ""

#. type: defun
#: processes.texi.orig:931
#, no-wrap
msgid "set-process-coding-system process &optional decoding-system encoding-system"
msgstr ""

#. type: defun
#: processes.texi.orig:936
msgid "This function specifies the coding systems to use for subsequent output from and input to @var{process}.  It will use @var{decoding-system} to decode subprocess output, and @var{encoding-system} to encode subprocess input."
msgstr ""

#. type: Plain text
#: processes.texi.orig:940
msgid "Every process also has a property list that you can use to store miscellaneous values associated with the process."
msgstr ""

#. type: defun
#: processes.texi.orig:941
#, no-wrap
msgid "process-get process propname"
msgstr ""

#. type: defun
#: processes.texi.orig:944
msgid "This function returns the value of the @var{propname} property of @var{process}."
msgstr ""

#. type: defun
#: processes.texi.orig:946
#, no-wrap
msgid "process-put process propname value"
msgstr ""

#. type: defun
#: processes.texi.orig:949
msgid "This function sets the value of the @var{propname} property of @var{process} to @var{value}."
msgstr ""

#. type: defun
#: processes.texi.orig:951
#, no-wrap
msgid "process-plist process"
msgstr ""

#. type: defun
#: processes.texi.orig:953
msgid "This function returns the process plist of @var{process}."
msgstr ""

#. type: defun
#: processes.texi.orig:955
#, no-wrap
msgid "set-process-plist process plist"
msgstr ""

#. type: defun
#: processes.texi.orig:957
msgid "This function sets the process plist of @var{process} to @var{plist}."
msgstr ""

#. type: section
#: processes.texi.orig:960
#, no-wrap
msgid "Sending Input to Processes"
msgstr ""

#. type: cindex
#: processes.texi.orig:961
#, no-wrap
msgid "process input"
msgstr ""

#. type: Plain text
#: processes.texi.orig:967
msgid "Asynchronous subprocesses receive input when it is sent to them by Emacs, which is done with the functions in this section.  You must specify the process to send input to, and the input data to send.  The data appears on the ``standard input'' of the subprocess."
msgstr ""

#. type: Plain text
#: processes.texi.orig:973
msgid "Some operating systems have limited space for buffered input in a pty.  On these systems, Emacs sends an @acronym{EOF} periodically amidst the other characters, to force them through.  For most programs, these @acronym{EOF}s do no harm."
msgstr ""

#. type: Plain text
#: processes.texi.orig:980
msgid "Subprocess input is normally encoded using a coding system before the subprocess receives it, much like text written into a file.  You can use @code{set-process-coding-system} to specify which coding system to use (@pxref{Process Information}).  Otherwise, the coding system comes from @code{coding-system-for-write}, if that is non-@code{nil}; or else from the defaulting mechanism (@pxref{Default Coding Systems})."
msgstr ""

#. type: Plain text
#: processes.texi.orig:987
msgid "Sometimes the system is unable to accept input for that process, because the input buffer is full.  When this happens, the send functions wait a short while, accepting output from subprocesses, and then try again.  This gives the subprocess a chance to read more of its pending input and make space in the buffer.  It also allows filters, sentinels and timers to run---so take account of that in writing your code."
msgstr ""

#. type: Plain text
#: processes.texi.orig:992
msgid "In these functions, the @var{process} argument can be a process or the name of a process, or a buffer or buffer name (which stands for a process via @code{get-buffer-process}).  @code{nil} means the current buffer's process."
msgstr ""

#. type: defun
#: processes.texi.orig:993
#, no-wrap
msgid "process-send-string process string"
msgstr ""

#. type: defun
#: processes.texi.orig:997
msgid "This function sends @var{process} the contents of @var{string} as standard input.  It returns @code{nil}.  For example, to make a Shell buffer list files:"
msgstr ""

#. type: group
#: processes.texi.orig:1002
#, no-wrap
msgid ""
"(process-send-string \"shell<1>\" \"ls\\n\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: processes.texi.orig:1006
#, no-wrap
msgid "process-send-region process start end"
msgstr ""

#. type: defun
#: processes.texi.orig:1009
msgid "This function sends the text in the region defined by @var{start} and @var{end} as standard input to @var{process}."
msgstr ""

#. type: defun
#: processes.texi.orig:1013
msgid "An error is signaled unless both @var{start} and @var{end} are integers or markers that indicate positions in the current buffer.  (It is unimportant which number is larger.)"
msgstr ""

#. type: defun
#: processes.texi.orig:1015
#, no-wrap
msgid "process-send-eof &optional process"
msgstr ""

#. type: defun
#: processes.texi.orig:1019
msgid "This function makes @var{process} see an end-of-file in its input.  The @acronym{EOF} comes after any text already sent to it.  The function returns @var{process}."
msgstr ""

#. type: group
#: processes.texi.orig:1024
#, no-wrap
msgid ""
"(process-send-eof \"shell\")\n"
"     @result{} \"shell\"\n"
msgstr ""

#. type: defun
#: processes.texi.orig:1028
#, no-wrap
msgid "process-running-child-p &optional process"
msgstr ""

#. type: defun
#: processes.texi.orig:1033
msgid "This function will tell you whether a @var{process} has given control of its terminal to its own child process.  The value is @code{t} if this is true, or if Emacs cannot tell; it is @code{nil} if Emacs can be certain that this is not so."
msgstr ""

#. type: section
#: processes.texi.orig:1036
#, no-wrap
msgid "Sending Signals to Processes"
msgstr ""

#. type: cindex
#: processes.texi.orig:1037
#, no-wrap
msgid "process signals"
msgstr ""

#. type: cindex
#: processes.texi.orig:1038
#, no-wrap
msgid "sending signals"
msgstr ""

#. type: cindex
#: processes.texi.orig:1039
#, no-wrap
msgid "signals"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1046
msgid "@dfn{Sending a signal} to a subprocess is a way of interrupting its activities.  There are several different signals, each with its own meaning.  The set of signals and their names is defined by the operating system.  For example, the signal @code{SIGINT} means that the user has typed @kbd{C-c}, or that some analogous thing has happened."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1051
msgid "Each signal has a standard effect on the subprocess.  Most signals kill the subprocess, but some stop (or resume) execution instead.  Most signals can optionally be handled by programs; if the program handles the signal, then we can say nothing in general about its effects."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1058
msgid "You can send signals explicitly by calling the functions in this section.  Emacs also sends signals automatically at certain times: killing a buffer sends a @code{SIGHUP} signal to all its associated processes; killing Emacs sends a @code{SIGHUP} signal to all remaining processes.  (@code{SIGHUP} is a signal that usually indicates that the user ``hung up the phone'', i.e., disconnected.)"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1061
msgid "Each of the signal-sending functions takes two optional arguments: @var{process} and @var{current-group}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1067
msgid "The argument @var{process} must be either a process, a process name, a buffer, a buffer name, or @code{nil}.  A buffer or buffer name stands for a process through @code{get-buffer-process}.  @code{nil} stands for the process associated with the current buffer.  An error is signaled if @var{process} does not identify a process."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1076
msgid "The argument @var{current-group} is a flag that makes a difference when you are running a job-control shell as an Emacs subprocess.  If it is non-@code{nil}, then the signal is sent to the current process-group of the terminal that Emacs uses to communicate with the subprocess.  If the process is a job-control shell, this means the shell's current subjob.  If it is @code{nil}, the signal is sent to the process group of the immediate subprocess of Emacs.  If the subprocess is a job-control shell, this is the shell itself."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1082
msgid "The flag @var{current-group} has no effect when a pipe is used to communicate with the subprocess, because the operating system does not support the distinction in the case of pipes.  For the same reason, job-control shells won't work when a pipe is used.  See @code{process-connection-type} in @ref{Asynchronous Processes}."
msgstr ""

#. type: defun
#: processes.texi.orig:1083
#, no-wrap
msgid "interrupt-process &optional process current-group"
msgstr ""

#. type: defun
#: processes.texi.orig:1090
msgid "This function interrupts the process @var{process} by sending the signal @code{SIGINT}.  Outside of Emacs, typing the ``interrupt character'' (normally @kbd{C-c} on some systems, and @key{DEL} on others) sends this signal.  When the argument @var{current-group} is non-@code{nil}, you can think of this function as ``typing @kbd{C-c}'' on the terminal by which Emacs talks to the subprocess."
msgstr ""

#. type: defun
#: processes.texi.orig:1092
#, no-wrap
msgid "kill-process &optional process current-group"
msgstr ""

#. type: defun
#: processes.texi.orig:1096
msgid "This function kills the process @var{process} by sending the signal @code{SIGKILL}.  This signal kills the subprocess immediately, and cannot be handled by the subprocess."
msgstr ""

#. type: defun
#: processes.texi.orig:1098
#, no-wrap
msgid "quit-process &optional process current-group"
msgstr ""

#. type: defun
#: processes.texi.orig:1105
msgid "This function sends the signal @code{SIGQUIT} to the process @var{process}.  This signal is the one sent by the ``quit character'' (usually @kbd{C-b} or @kbd{C-\\}) when you are not inside Emacs."
msgstr ""

#. type: defun
#: processes.texi.orig:1107
#, no-wrap
msgid "stop-process &optional process current-group"
msgstr ""

#. type: defun
#: processes.texi.orig:1111
msgid "This function stops the process @var{process} by sending the signal @code{SIGTSTP}.  Use @code{continue-process} to resume its execution."
msgstr ""

#. type: defun
#: processes.texi.orig:1117
msgid "Outside of Emacs, on systems with job control, the ``stop character'' (usually @kbd{C-z}) normally sends this signal.  When @var{current-group} is non-@code{nil}, you can think of this function as ``typing @kbd{C-z}'' on the terminal Emacs uses to communicate with the subprocess."
msgstr ""

#. type: defun
#: processes.texi.orig:1119
#, no-wrap
msgid "continue-process &optional process current-group"
msgstr ""

#. type: defun
#: processes.texi.orig:1123
msgid "This function resumes execution of the process @var{process} by sending it the signal @code{SIGCONT}.  This presumes that @var{process} was stopped previously."
msgstr ""

#. type: deffn
#: processes.texi.orig:1125
#, no-wrap
msgid "Command signal-process process signal"
msgstr ""

#. type: deffn
#: processes.texi.orig:1129
msgid "This function sends a signal to process @var{process}.  The argument @var{signal} specifies which signal to send; it should be an integer, or a symbol whose name is a signal."
msgstr ""

#. type: deffn
#: processes.texi.orig:1133
msgid "The @var{process} argument can be a system process @acronym{ID} (an integer); that allows you to send signals to processes that are not children of Emacs.  @xref{System Processes}."
msgstr ""

#. type: section
#: processes.texi.orig:1136
#, no-wrap
msgid "Receiving Output from Processes"
msgstr ""

#. type: cindex
#: processes.texi.orig:1137
#, no-wrap
msgid "process output"
msgstr ""

#. type: cindex
#: processes.texi.orig:1138
#, no-wrap
msgid "output from processes"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1146
msgid "The output that a subprocess writes to its standard output stream is passed to a function called the @dfn{filter function}.  The default filter function simply inserts the output into a buffer, which is called the associated buffer of the process (@pxref{Process Buffers}).  If the process has no buffer then the default filter discards the output."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1151
msgid "When a subprocess terminates, Emacs reads any pending output, then stops reading output from that subprocess.  Therefore, if the subprocess has children that are still live and still producing output, Emacs won't receive that output."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1161
msgid "Output from a subprocess can arrive only while Emacs is waiting: when reading terminal input (see the function @code{waiting-for-user-input-p}), in @code{sit-for} and @code{sleep-for} (@pxref{Waiting}), and in @code{accept-process-output} (@pxref{Accepting Output}).  This minimizes the problem of timing errors that usually plague parallel programming.  For example, you can safely create a process and only then specify its buffer or filter function; no output can arrive before you finish, if the code in between does not call any primitive that waits."
msgstr ""

#. type: defvar
#: processes.texi.orig:1162
#, no-wrap
msgid "process-adaptive-read-buffering"
msgstr ""

#. type: defvar
#: processes.texi.orig:1170
msgid "On some systems, when Emacs reads the output from a subprocess, the output data is read in very small blocks, potentially resulting in very poor performance.  This behavior can be remedied to some extent by setting the variable @code{process-adaptive-read-buffering} to a non-@code{nil} value (the default), as it will automatically delay reading from such processes, thus allowing them to produce more output before Emacs tries to read it."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1178
msgid "It is impossible to separate the standard output and standard error streams of the subprocess, because Emacs normally spawns the subprocess inside a pseudo-TTY, and a pseudo-TTY has only one output channel.  If you want to keep the output to those streams separate, you should redirect one of them to a file---for example, by using an appropriate shell command."
msgstr ""

#. type: subsection
#: processes.texi.orig:1184 processes.texi.orig:1186 processes.texi.orig:1187
#, no-wrap
msgid "Process Buffers"
msgstr ""

#. type: menuentry
#: processes.texi.orig:1184
msgid "By default, output is put in a buffer."
msgstr ""

#. type: node
#: processes.texi.orig:1184 processes.texi.orig:1272
#, no-wrap
msgid "Filter Functions"
msgstr ""

#. type: menuentry
#: processes.texi.orig:1184
msgid "Filter functions accept output from the process."
msgstr ""

#. type: node
#: processes.texi.orig:1184 processes.texi.orig:1434
#, no-wrap
msgid "Decoding Output"
msgstr ""

#. type: menuentry
#: processes.texi.orig:1184
msgid "Filters can get unibyte or multibyte strings."
msgstr ""

#. type: node
#: processes.texi.orig:1184 processes.texi.orig:1474
#, no-wrap
msgid "Accepting Output"
msgstr ""

#. type: menuentry
#: processes.texi.orig:1184
msgid "How to wait until process output arrives."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1196
msgid "A process can (and usually does) have an @dfn{associated buffer}, which is an ordinary Emacs buffer that is used for two purposes: storing the output from the process, and deciding when to kill the process.  You can also use the buffer to identify a process to operate on, since in normal practice only one process is associated with any given buffer.  Many applications of processes also use the buffer for editing input to be sent to the process, but this is not built into Emacs Lisp."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1203
msgid "By default, process output is inserted in the associated buffer.  (You can change this by defining a custom filter function, @pxref{Filter Functions}.)  The position to insert the output is determined by the @code{process-mark}, which is then updated to point to the end of the text just inserted.  Usually, but not always, the @code{process-mark} is at the end of the buffer."
msgstr ""

#. type: findex
#: processes.texi.orig:1204
#, no-wrap
msgid "process-kill-buffer-query-function"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1211
msgid "Killing the associated buffer of a process also kills the process.  Emacs asks for confirmation first, if the process's @code{process-query-on-exit-flag} is non-@code{nil} (@pxref{Query Before Exit}).  This confirmation is done by the function @code{process-kill-buffer-query-function}, which is run from @code{kill-buffer-query-functions} (@pxref{Killing Buffers})."
msgstr ""

#. type: defun
#: processes.texi.orig:1212
#, no-wrap
msgid "process-buffer process"
msgstr ""

#. type: defun
#: processes.texi.orig:1215
msgid "This function returns the associated buffer of the process @var{process}."
msgstr ""

#. type: group
#: processes.texi.orig:1220
#, no-wrap
msgid ""
"(process-buffer (get-process \"shell\"))\n"
"     @result{} #<buffer *shell*>\n"
msgstr ""

#. type: defun
#: processes.texi.orig:1224
#, no-wrap
msgid "process-mark process"
msgstr ""

#. type: defun
#: processes.texi.orig:1227
msgid "This function returns the process marker for @var{process}, which is the marker that says where to insert output from the process."
msgstr ""

#. type: defun
#: processes.texi.orig:1230
msgid "If @var{process} does not have a buffer, @code{process-mark} returns a marker that points nowhere."
msgstr ""

#. type: defun
#: processes.texi.orig:1234
msgid "The default filter function uses this marker to decide where to insert process output, and updates it to point after the inserted text.  That is why successive batches of output are inserted consecutively."
msgstr ""

#. type: defun
#: processes.texi.orig:1238
msgid "Custom filter functions normally should use this marker in the same fashion.  For an example of a filter function that uses @code{process-mark}, @pxref{Process Filter Example}."
msgstr ""

#. type: defun
#: processes.texi.orig:1242
msgid "When the user is expected to enter input in the process buffer for transmission to the process, the process marker separates the new input from previous output."
msgstr ""

#. type: defun
#: processes.texi.orig:1244
#, no-wrap
msgid "set-process-buffer process buffer"
msgstr ""

#. type: defun
#: processes.texi.orig:1248
msgid "This function sets the buffer associated with @var{process} to @var{buffer}.  If @var{buffer} is @code{nil}, the process becomes associated with no buffer."
msgstr ""

#. type: defun
#: processes.texi.orig:1250
#, no-wrap
msgid "get-buffer-process buffer-or-name"
msgstr ""

#. type: defun
#: processes.texi.orig:1257
msgid "This function returns a nondeleted process associated with the buffer specified by @var{buffer-or-name}.  If there are several processes associated with it, this function chooses one (currently, the one most recently created, but don't count on that).  Deletion of a process (see @code{delete-process}) makes it ineligible for this function to return."
msgstr ""

#. type: defun
#: processes.texi.orig:1260
msgid "It is usually a bad idea to have more than one process associated with the same buffer."
msgstr ""

#. type: group
#: processes.texi.orig:1265
#, no-wrap
msgid ""
"(get-buffer-process \"*shell*\")\n"
"     @result{} #<process shell>\n"
msgstr ""

#. type: defun
#: processes.texi.orig:1270
msgid "Killing the process's buffer deletes the process, which kills the subprocess with a @code{SIGHUP} signal (@pxref{Signals to Processes})."
msgstr ""

#. type: subsection
#: processes.texi.orig:1273
#, no-wrap
msgid "Process Filter Functions"
msgstr ""

#. type: cindex
#: processes.texi.orig:1274
#, no-wrap
msgid "filter function"
msgstr ""

#. type: cindex
#: processes.texi.orig:1275
#, no-wrap
msgid "process filter"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1281
msgid "A process @dfn{filter function} is a function that receives the standard output from the associated process.  @emph{All} output from that process is passed to the filter.  The default filter simply outputs directly to the process buffer."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1288
msgid "The filter function can only be called when Emacs is waiting for something, because process output arrives only at such times.  Emacs waits when reading terminal input (see the function @code{waiting-for-user-input-p}), in @code{sit-for} and @code{sleep-for} (@pxref{Waiting}), and in @code{accept-process-output} (@pxref{Accepting Output})."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1292
msgid "A filter function must accept two arguments: the associated process and a string, which is output just received from it.  The function is then free to do whatever it chooses with the output."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1300
msgid "Quitting is normally inhibited within a filter function---otherwise, the effect of typing @kbd{C-g} at command level or to quit a user command would be unpredictable.  If you want to permit quitting inside a filter function, bind @code{inhibit-quit} to @code{nil}.  In most cases, the right way to do this is with the macro @code{with-local-quit}.  @xref{Quitting}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1307
msgid "If an error happens during execution of a filter function, it is caught automatically, so that it doesn't stop the execution of whatever program was running when the filter function was started.  However, if @code{debug-on-error} is non-@code{nil}, errors are not caught.  This makes it possible to use the Lisp debugger to debug the filter function.  @xref{Debugger}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1316
msgid "Many filter functions sometimes (or always) insert the output in the process's buffer, mimicking the actions of the default filter.  Such filter functions need to make sure that they save the current buffer, select the correct buffer (if different) before inserting output, and then restore the original buffer.  They should also check whether the buffer is still alive, update the process marker, and in some cases update the value of point.  Here is how to do these things:"
msgstr ""

#. type: anchor{#1}
#: processes.texi.orig:1318
msgid "Process Filter Example"
msgstr ""

#. type: group
#: processes.texi.orig:1324
#, no-wrap
msgid ""
"(defun ordinary-insertion-filter (proc string)\n"
"  (when (buffer-live-p (process-buffer proc))\n"
"    (with-current-buffer (process-buffer proc)\n"
"      (let ((moving (= (point) (process-mark proc))))\n"
msgstr ""

#. type: group
#: processes.texi.orig:1332
#, no-wrap
msgid ""
"        (save-excursion\n"
"          ;; @r{Insert the text, advancing the process marker.}\n"
"          (goto-char (process-mark proc))\n"
"          (insert string)\n"
"          (set-marker (process-mark proc) (point)))\n"
"        (if moving (goto-char (process-mark proc)))))))\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1338
msgid "To make the filter force the process buffer to be visible whenever new text arrives, you could insert a line like the following just before the @code{with-current-buffer} construct:"
msgstr ""

#. type: smallexample
#: processes.texi.orig:1341
#, no-wrap
msgid "(display-buffer (process-buffer proc))\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1346
msgid "To force point to the end of the new output, no matter where it was previously, eliminate the variable @code{moving} and call @code{goto-char} unconditionally."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1355
msgid "Note that Emacs automatically saves and restores the match data while executing filter functions.  @xref{Match Data}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1363
msgid "The output to the filter may come in chunks of any size.  A program that produces the same output twice in a row may send it as one batch of 200 characters one time, and five batches of 40 characters the next.  If the filter looks for certain text strings in the subprocess output, make sure to handle the case where one of these strings is split across two or more batches of output; one way to do this is to insert the received text into a temporary buffer, which can then be searched."
msgstr ""

#. type: defun
#: processes.texi.orig:1364
#, no-wrap
msgid "set-process-filter process filter"
msgstr ""

#. type: defun
#: processes.texi.orig:1368
msgid "This function gives @var{process} the filter function @var{filter}.  If @var{filter} is @code{nil}, it gives the process the default filter, which inserts the process output into the process buffer."
msgstr ""

#. type: defun
#: processes.texi.orig:1370
#, no-wrap
msgid "process-filter process"
msgstr ""

#. type: defun
#: processes.texi.orig:1372
msgid "This function returns the filter function of @var{process}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1377
msgid "In case the process's output needs to be passed to several filters, you can use @code{add-function} to combine an existing filter with a new one.  @xref{Advising Functions}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1379
msgid "Here is an example of the use of a filter function:"
msgstr ""

#. type: group
#: processes.texi.orig:1385
#, no-wrap
msgid ""
"(defun keep-output (process output)\n"
"   (setq kept (cons output kept)))\n"
"     @result{} keep-output\n"
msgstr ""

#. type: group
#: processes.texi.orig:1389
#, no-wrap
msgid ""
"(setq kept nil)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: processes.texi.orig:1393
#, no-wrap
msgid ""
"(set-process-filter (get-process \"shell\") 'keep-output)\n"
"     @result{} keep-output\n"
msgstr ""

#. type: group
#: processes.texi.orig:1399
#, no-wrap
msgid ""
"(process-send-string \"shell\" \"ls ~/other\\n\")\n"
"     @result{} nil\n"
"kept\n"
"     @result{} (\"lewis@@slug:$ \"\n"
msgstr ""

#. type: group
#: processes.texi.orig:1409
#, no-wrap
msgid ""
"\"FINAL-W87-SHORT.MSS    backup.otl              kolstad.mss~\n"
"address.txt             backup.psf              kolstad.psf\n"
"backup.bib~             david.mss               resume-Dec-86.mss~\n"
"backup.err              david.psf               resume-Dec.psf\n"
"backup.mss              dland                   syllabus.mss\n"
"\"\n"
"\"#backups.mss#          backup.mss~             kolstad.mss\n"
"\")\n"
msgstr ""

#. type: group
#: processes.texi.orig:1424
#, no-wrap
msgid ""
";; @r{Insert input in the buffer specified by @code{my-shell-buffer}}\n"
";;   @r{and make sure that buffer is shown in some window.}\n"
"(defun my-process-filter (proc str)\n"
"  (let ((cur (selected-window))\n"
"        (pop-up-windows t))\n"
"    (pop-to-buffer my-shell-buffer)\n"
msgstr ""

#. type: group
#: processes.texi.orig:1430
#, no-wrap
msgid ""
"    (goto-char (point-max))\n"
"    (insert str)\n"
"    (set-marker (process-mark proc) (point-max))\n"
"    (select-window cur)))\n"
msgstr ""

#. type: subsection
#: processes.texi.orig:1435
#, no-wrap
msgid "Decoding Process Output"
msgstr ""

#. type: cindex
#: processes.texi.orig:1436
#, no-wrap
msgid "decode process output"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1443
msgid "When Emacs writes process output directly into a multibyte buffer, it decodes the output according to the process output coding system.  If the coding system is @code{raw-text} or @code{no-conversion}, Emacs converts the unibyte output to multibyte using @code{string-to-multibyte}, and inserts the resulting multibyte text."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1452
msgid "You can use @code{set-process-coding-system} to specify which coding system to use (@pxref{Process Information}).  Otherwise, the coding system comes from @code{coding-system-for-read}, if that is non-@code{nil}; or else from the defaulting mechanism (@pxref{Default Coding Systems}).  If the text output by a process contains null bytes, Emacs by default uses @code{no-conversion} for it; see @ref{Lisp and Coding Systems, inhibit-null-byte-detection}, for how to control this behavior."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1462
msgid "@strong{Warning:} Coding systems such as @code{undecided}, which determine the coding system from the data, do not work entirely reliably with asynchronous subprocess output.  This is because Emacs has to process asynchronous subprocess output in batches, as it arrives.  Emacs must try to detect the proper coding system from one batch at a time, and this does not always work.  Therefore, if at all possible, specify a coding system that determines both the character code conversion and the end of line conversion---that is, one like @code{latin-1-unix}, rather than @code{undecided} or @code{latin-1}."
msgstr ""

#. type: cindex
#: processes.texi.orig:1465
#, no-wrap
msgid "filter multibyte flag, of process"
msgstr ""

#. type: cindex
#: processes.texi.orig:1466
#, no-wrap
msgid "process filter multibyte flag"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1473
msgid "When Emacs calls a process filter function, it provides the process output as a multibyte string or as a unibyte string according to the process's filter coding system.  Emacs decodes the output according to the process output coding system, which usually produces a multibyte string, except for coding systems such as @code{binary} and @code{raw-text}."
msgstr ""

#. type: subsection
#: processes.texi.orig:1475
#, no-wrap
msgid "Accepting Output from Processes"
msgstr ""

#. type: cindex
#: processes.texi.orig:1476
#, no-wrap
msgid "accept input from processes"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1483
msgid "Output from asynchronous subprocesses normally arrives only while Emacs is waiting for some sort of external event, such as elapsed time or terminal input.  Occasionally it is useful in a Lisp program to explicitly permit output to arrive at a specific point, or even to wait until output arrives from a process."
msgstr ""

#. type: defun
#: processes.texi.orig:1484
#, no-wrap
msgid "accept-process-output &optional process seconds millisec just-this-one"
msgstr ""

#. type: defun
#: processes.texi.orig:1489
msgid "This function allows Emacs to read pending output from processes.  The output is given to their filter functions.  If @var{process} is non-@code{nil} then this function does not return until some output has been received from @var{process}."
msgstr ""

#. type: defun
#: processes.texi.orig:1496
msgid "The arguments @var{seconds} and @var{millisec} let you specify timeout periods.  The former specifies a period measured in seconds and the latter specifies one measured in milliseconds.  The two time periods thus specified are added together, and @code{accept-process-output} returns after that much time, whether or not there has been any subprocess output."
msgstr ""

#. type: defun
#: processes.texi.orig:1501
msgid "The argument @var{millisec} is obsolete (and should not be used), because @var{seconds} can be floating point to specify waiting a fractional number of seconds.  If @var{seconds} is 0, the function accepts whatever output is pending but does not wait."
msgstr ""

#. type: defun
#: processes.texi.orig:1510
msgid "If @var{process} is a process, and the argument @var{just-this-one} is non-@code{nil}, only output from that process is handled, suspending output from other processes until some output has been received from that process or the timeout expires.  If @var{just-this-one} is an integer, also inhibit running timers.  This feature is generally not recommended, but may be necessary for specific applications, such as speech synthesis."
msgstr ""

#. type: defun
#: processes.texi.orig:1514
msgid "The function @code{accept-process-output} returns non-@code{nil} if it did get some output, or @code{nil} if the timeout expired before output arrived."
msgstr ""

#. type: section
#: processes.texi.orig:1517
#, no-wrap
msgid "Sentinels: Detecting Process Status Changes"
msgstr ""

#. type: cindex
#: processes.texi.orig:1518
#, no-wrap
msgid "process sentinel"
msgstr ""

#. type: cindex
#: processes.texi.orig:1519
#, no-wrap
msgid "sentinel (of process)"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1528
msgid "A @dfn{process sentinel} is a function that is called whenever the associated process changes status for any reason, including signals (whether sent by Emacs or caused by the process's own actions) that terminate, stop, or continue the process.  The process sentinel is also called if the process exits.  The sentinel receives two arguments: the process for which the event occurred, and a string describing the type of event."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1530
msgid "The string describing the event looks like one of the following:"
msgstr ""

#. type: itemize
#: processes.texi.orig:1535
msgid "@code{\"finished\\n\"}."
msgstr ""

#. type: itemize
#: processes.texi.orig:1538
msgid "@code{\"exited abnormally with code @var{exitcode}\\n\"}."
msgstr ""

#. type: itemize
#: processes.texi.orig:1541
msgid "@code{\"@var{name-of-signal}\\n\"}."
msgstr ""

#. type: itemize
#: processes.texi.orig:1544
msgid "@code{\"@var{name-of-signal} (core dumped)\\n\"}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1555
msgid "A sentinel runs only while Emacs is waiting (e.g., for terminal input, or for time to elapse, or for process output).  This avoids the timing errors that could result from running sentinels at random places in the middle of other Lisp programs.  A program can wait, so that sentinels will run, by calling @code{sit-for} or @code{sleep-for} (@pxref{Waiting}), or @code{accept-process-output} (@pxref{Accepting Output}).  Emacs also allows sentinels to run when the command loop is reading input.  @code{delete-process} calls the sentinel when it terminates a running process."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1562
msgid "Emacs does not keep a queue of multiple reasons to call the sentinel of one process; it records just the current status and the fact that there has been a change.  Therefore two changes in status, coming in quick succession, can call the sentinel just once.  However, process termination will always run the sentinel exactly once.  This is because the process status can't change again after termination."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1566
msgid "Emacs explicitly checks for output from the process before running the process sentinel.  Once the sentinel runs due to process termination, no further output can arrive from the process."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1571
msgid "A sentinel that writes the output into the buffer of the process should check whether the buffer is still alive.  If it tries to insert into a dead buffer, it will get an error.  If the buffer is dead, @code{(buffer-name (process-buffer @var{process}))} returns @code{nil}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1579
msgid "Quitting is normally inhibited within a sentinel---otherwise, the effect of typing @kbd{C-g} at command level or to quit a user command would be unpredictable.  If you want to permit quitting inside a sentinel, bind @code{inhibit-quit} to @code{nil}.  In most cases, the right way to do this is with the macro @code{with-local-quit}.  @xref{Quitting}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1586
msgid "If an error happens during execution of a sentinel, it is caught automatically, so that it doesn't stop the execution of whatever programs was running when the sentinel was started.  However, if @code{debug-on-error} is non-@code{nil}, errors are not caught.  This makes it possible to use the Lisp debugger to debug the sentinel.  @xref{Debugger}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1591
msgid "While a sentinel is running, the process sentinel is temporarily set to @code{nil} so that the sentinel won't run recursively.  For this reason it is not possible for a sentinel to specify a new sentinel."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1600
msgid "Note that Emacs automatically saves and restores the match data while executing sentinels.  @xref{Match Data}."
msgstr ""

#. type: defun
#: processes.texi.orig:1601
#, no-wrap
msgid "set-process-sentinel process sentinel"
msgstr ""

#. type: defun
#: processes.texi.orig:1606
msgid "This function associates @var{sentinel} with @var{process}.  If @var{sentinel} is @code{nil}, then the process will have the default sentinel, which inserts a message in the process's buffer when the process status changes."
msgstr ""

#. type: defun
#: processes.texi.orig:1610
msgid "Changes in process sentinels take effect immediately---if the sentinel is slated to be run but has not been called yet, and you specify a new sentinel, the eventual call to the sentinel will use the new one."
msgstr ""

#. type: group
#: processes.texi.orig:1618
#, no-wrap
msgid ""
"(defun msg-me (process event)\n"
"   (princ\n"
"     (format \"Process: %s had the event `%s'\" process event)))\n"
"(set-process-sentinel (get-process \"shell\") 'msg-me)\n"
"     @result{} msg-me\n"
msgstr ""

#. type: group
#: processes.texi.orig:1623
#, no-wrap
msgid ""
"(kill-process (get-process \"shell\"))\n"
"     @print{} Process: #<process shell> had the event `killed'\n"
"     @result{} #<process shell>\n"
msgstr ""

#. type: defun
#: processes.texi.orig:1627
#, no-wrap
msgid "process-sentinel process"
msgstr ""

#. type: defun
#: processes.texi.orig:1629
msgid "This function returns the sentinel of @var{process}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1634
msgid "In case a process status changes need to be passed to several sentinels, you can use @code{add-function} to combine an existing sentinel with a new one.  @xref{Advising Functions}."
msgstr ""

#. type: defun
#: processes.texi.orig:1635
#, no-wrap
msgid "waiting-for-user-input-p"
msgstr ""

#. type: defun
#: processes.texi.orig:1640
msgid "While a sentinel or filter function is running, this function returns non-@code{nil} if Emacs was waiting for keyboard input from the user at the time the sentinel or filter function was called, or @code{nil} if it was not."
msgstr ""

#. type: section
#: processes.texi.orig:1643
#, no-wrap
msgid "Querying Before Exit"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1652
msgid "When Emacs exits, it terminates all its subprocesses by sending them the @code{SIGHUP} signal.  Because subprocesses may be doing valuable work, Emacs normally asks the user to confirm that it is ok to terminate them.  Each process has a query flag, which, if non-@code{nil}, says that Emacs should ask for confirmation before exiting and thus killing that process.  The default for the query flag is @code{t}, meaning @emph{do} query."
msgstr ""

#. type: defun
#: processes.texi.orig:1653
#, no-wrap
msgid "process-query-on-exit-flag process"
msgstr ""

#. type: defun
#: processes.texi.orig:1655
msgid "This returns the query flag of @var{process}."
msgstr ""

#. type: defun
#: processes.texi.orig:1657
#, no-wrap
msgid "set-process-query-on-exit-flag process flag"
msgstr ""

#. type: defun
#: processes.texi.orig:1660
msgid "This function sets the query flag of @var{process} to @var{flag}.  It returns @var{flag}."
msgstr ""

#. type: defun
#: processes.texi.orig:1663
msgid "Here is an example of using @code{set-process-query-on-exit-flag} on a shell process to avoid querying:"
msgstr ""

#. type: group
#: processes.texi.orig:1668
#, no-wrap
msgid ""
"(set-process-query-on-exit-flag (get-process \"shell\") nil)\n"
"     @result{} nil\n"
msgstr ""

#. type: section
#: processes.texi.orig:1673
#, no-wrap
msgid "Accessing Other Processes"
msgstr ""

#. type: cindex
#: processes.texi.orig:1674
#, no-wrap
msgid "system processes"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1681
msgid "In addition to accessing and manipulating processes that are subprocesses of the current Emacs session, Emacs Lisp programs can also access other processes running on the same machine.  We call these @dfn{system processes}, to distinguish them from Emacs subprocesses."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1685
msgid "Emacs provides several primitives for accessing system processes.  Not all platforms support these primitives; on those which don't, these primitives return @code{nil}."
msgstr ""

#. type: defun
#: processes.texi.orig:1686
#, no-wrap
msgid "list-system-processes"
msgstr ""

#. type: defun
#: processes.texi.orig:1692
msgid "This function returns a list of all the processes running on the system.  Each process is identified by its @acronym{PID}, a numerical process ID that is assigned by the OS and distinguishes the process from all the other processes running on the same machine at the same time."
msgstr ""

#. type: defun
#: processes.texi.orig:1694
#, no-wrap
msgid "process-attributes pid"
msgstr ""

#. type: defun
#: processes.texi.orig:1704
msgid "This function returns an alist of attributes for the process specified by its process ID @var{pid}.  Each association in the alist is of the form @code{(@var{key} . @var{value})}, where @var{key} designates the attribute and @var{value} is the value of that attribute.  The various attribute @var{key}s that this function can return are listed below.  Not all platforms support all of these attributes; if an attribute is not supported, its association will not appear in the returned alist.  Values that are numbers can be either integer or floating point, depending on the magnitude of the value."
msgstr ""

#. type: item
#: processes.texi.orig:1706
#, no-wrap
msgid "euid"
msgstr ""

#. type: table
#: processes.texi.orig:1712
msgid "The effective user ID of the user who invoked the process.  The corresponding @var{value} is a number.  If the process was invoked by the same user who runs the current Emacs session, the value is identical to what @code{user-uid} returns (@pxref{User Identification})."
msgstr ""

#. type: item
#: processes.texi.orig:1713
#, no-wrap
msgid "user"
msgstr ""

#. type: table
#: processes.texi.orig:1715
msgid "User name corresponding to the process's effective user ID, a string."
msgstr ""

#. type: item
#: processes.texi.orig:1716
#, no-wrap
msgid "egid"
msgstr ""

#. type: table
#: processes.texi.orig:1718
msgid "The group ID of the effective user ID, a number."
msgstr ""

#. type: item
#: processes.texi.orig:1719
#, no-wrap
msgid "group"
msgstr ""

#. type: table
#: processes.texi.orig:1721
msgid "Group name corresponding to the effective user's group ID, a string."
msgstr ""

#. type: item
#: processes.texi.orig:1722
#, no-wrap
msgid "comm"
msgstr ""

#. type: table
#: processes.texi.orig:1728
msgid "The name of the command that runs in the process.  This is a string that usually specifies the name of the executable file of the process, without the leading directories.  However, some special system processes can report strings that do not correspond to an executable file of a program."
msgstr ""

#. type: item
#: processes.texi.orig:1729
#, no-wrap
msgid "state"
msgstr ""

#. type: table
#: processes.texi.orig:1733
msgid "The state code of the process.  This is a short string that encodes the scheduling state of the process.  Here's a list of the most frequently seen codes:"
msgstr ""

#. type: item
#: processes.texi.orig:1735
#, no-wrap
msgid "\"D\""
msgstr ""

#. type: table
#: processes.texi.orig:1737
msgid "uninterruptible sleep (usually I/O)"
msgstr ""

#. type: item
#: processes.texi.orig:1737
#, no-wrap
msgid "\"R\""
msgstr ""

#. type: table
#: processes.texi.orig:1739
msgid "running"
msgstr ""

#. type: item
#: processes.texi.orig:1739
#, no-wrap
msgid "\"S\""
msgstr ""

#. type: table
#: processes.texi.orig:1741
msgid "interruptible sleep (waiting for some event)"
msgstr ""

#. type: item
#: processes.texi.orig:1741
#, no-wrap
msgid "\"T\""
msgstr ""

#. type: table
#: processes.texi.orig:1743
msgid "stopped, e.g., by a job control signal"
msgstr ""

#. type: item
#: processes.texi.orig:1743
#, no-wrap
msgid "\"Z\""
msgstr ""

#. type: table
#: processes.texi.orig:1745
msgid "``zombie'': a process that terminated, but was not reaped by its parent"
msgstr ""

#. type: table
#: processes.texi.orig:1750
msgid "For the full list of the possible states, see the manual page of the @command{ps} command."
msgstr ""

#. type: item
#: processes.texi.orig:1751
#, no-wrap
msgid "ppid"
msgstr ""

#. type: table
#: processes.texi.orig:1753
msgid "The process ID of the parent process, a number."
msgstr ""

#. type: item
#: processes.texi.orig:1754
#, no-wrap
msgid "pgrp"
msgstr ""

#. type: table
#: processes.texi.orig:1756
msgid "The process group ID of the process, a number."
msgstr ""

#. type: item
#: processes.texi.orig:1757
#, no-wrap
msgid "sess"
msgstr ""

#. type: table
#: processes.texi.orig:1760
msgid "The session ID of the process.  This is a number that is the process ID of the process's @dfn{session leader}."
msgstr ""

#. type: item
#: processes.texi.orig:1761
#, no-wrap
msgid "ttname"
msgstr ""

#. type: table
#: processes.texi.orig:1765
msgid "A string that is the name of the process's controlling terminal.  On Unix and GNU systems, this is normally the file name of the corresponding terminal device, such as @file{/dev/pts65}."
msgstr ""

#. type: item
#: processes.texi.orig:1766
#, no-wrap
msgid "tpgid"
msgstr ""

#. type: table
#: processes.texi.orig:1769
msgid "The numerical process group ID of the foreground process group that uses the process's terminal."
msgstr ""

#. type: item
#: processes.texi.orig:1770
#, no-wrap
msgid "minflt"
msgstr ""

#. type: table
#: processes.texi.orig:1774
msgid "The number of minor page faults caused by the process since its beginning.  (Minor page faults are those that don't involve reading from disk.)"
msgstr ""

#. type: item
#: processes.texi.orig:1775
#, no-wrap
msgid "majflt"
msgstr ""

#. type: table
#: processes.texi.orig:1779
msgid "The number of major page faults caused by the process since its beginning.  (Major page faults require a disk to be read, and are thus more expensive than minor page faults.)"
msgstr ""

#. type: item
#: processes.texi.orig:1780
#, no-wrap
msgid "cminflt"
msgstr ""

#. type: itemx
#: processes.texi.orig:1781
#, no-wrap
msgid "cmajflt"
msgstr ""

#. type: table
#: processes.texi.orig:1784
msgid "Like @code{minflt} and @code{majflt}, but include the number of page faults for all the child processes of the given process."
msgstr ""

#. type: item
#: processes.texi.orig:1785
#, no-wrap
msgid "utime"
msgstr ""

#. type: table
#: processes.texi.orig:1791
msgid "Time spent by the process in the user context, for running the application's code.  The corresponding @var{value} is in the @w{@code{(@var{high} @var{low} @var{microsec} @var{picosec})}} format, the same format used by functions @code{current-time} (@pxref{Time of Day, current-time}) and @code{file-attributes} (@pxref{File Attributes})."
msgstr ""

#. type: item
#: processes.texi.orig:1792
#, no-wrap
msgid "stime"
msgstr ""

#. type: table
#: processes.texi.orig:1796
msgid "Time spent by the process in the system (kernel) context, for processing system calls.  The corresponding @var{value} is in the same format as for @code{utime}."
msgstr ""

#. type: item
#: processes.texi.orig:1797
#, no-wrap
msgid "time"
msgstr ""

#. type: table
#: processes.texi.orig:1800
msgid "The sum of @code{utime} and @code{stime}.  The corresponding @var{value} is in the same format as for @code{utime}."
msgstr ""

#. type: item
#: processes.texi.orig:1801
#, no-wrap
msgid "cutime"
msgstr ""

#. type: itemx
#: processes.texi.orig:1802
#, no-wrap
msgid "cstime"
msgstr ""

#. type: itemx
#: processes.texi.orig:1803
#, no-wrap
msgid "ctime"
msgstr ""

#. type: table
#: processes.texi.orig:1806
msgid "Like @code{utime}, @code{stime}, and @code{time}, but include the times of all the child processes of the given process."
msgstr ""

#. type: item
#: processes.texi.orig:1807
#, no-wrap
msgid "pri"
msgstr ""

#. type: table
#: processes.texi.orig:1809
msgid "The numerical priority of the process."
msgstr ""

#. type: item
#: processes.texi.orig:1810
#, no-wrap
msgid "nice"
msgstr ""

#. type: table
#: processes.texi.orig:1813
msgid "The @dfn{nice value} of the process, a number.  (Processes with smaller nice values get scheduled more favorably.)"
msgstr ""

#. type: item
#: processes.texi.orig:1814
#, no-wrap
msgid "thcount"
msgstr ""

#. type: table
#: processes.texi.orig:1816
msgid "The number of threads in the process."
msgstr ""

#. type: item
#: processes.texi.orig:1817
#, no-wrap
msgid "start"
msgstr ""

#. type: table
#: processes.texi.orig:1821
msgid "The time when the process was started, in the same @code{(@var{high} @var{low} @var{microsec} @var{picosec})} format used by @code{file-attributes} and @code{current-time}."
msgstr ""

#. type: item
#: processes.texi.orig:1822
#, no-wrap
msgid "etime"
msgstr ""

#. type: table
#: processes.texi.orig:1825
msgid "The time elapsed since the process started, in the format @code{(@var{high} @var{low} @var{microsec} @var{picosec})}."
msgstr ""

#. type: item
#: processes.texi.orig:1826
#, no-wrap
msgid "vsize"
msgstr ""

#. type: table
#: processes.texi.orig:1828
msgid "The virtual memory size of the process, measured in kilobytes."
msgstr ""

#. type: item
#: processes.texi.orig:1829
#, no-wrap
msgid "rss"
msgstr ""

#. type: table
#: processes.texi.orig:1832
msgid "The size of the process's @dfn{resident set}, the number of kilobytes occupied by the process in the machine's physical memory."
msgstr ""

#. type: item
#: processes.texi.orig:1833
#, no-wrap
msgid "pcpu"
msgstr ""

#. type: table
#: processes.texi.orig:1837
msgid "The percentage of the CPU time used by the process since it started.  The corresponding @var{value} is a floating-point number between 0 and 100."
msgstr ""

#. type: item
#: processes.texi.orig:1838
#, no-wrap
msgid "pmem"
msgstr ""

#. type: table
#: processes.texi.orig:1842
msgid "The percentage of the total physical memory installed on the machine used by the process's resident set.  The value is a floating-point number between 0 and 100."
msgstr ""

#. type: item
#: processes.texi.orig:1843
#, no-wrap
msgid "args"
msgstr ""

#. type: table
#: processes.texi.orig:1851
msgid "The command-line with which the process was invoked.  This is a string in which individual command-line arguments are separated by blanks; whitespace characters that are embedded in the arguments are quoted as appropriate for the system's shell: escaped by backslash characters on GNU and Unix, and enclosed in double quote characters on Windows.  Thus, this command-line string can be directly used in primitives such as @code{shell-command}."
msgstr ""

#. type: cindex
#: processes.texi.orig:1858
#, no-wrap
msgid "transaction queue"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1866
msgid "You can use a @dfn{transaction queue} to communicate with a subprocess using transactions.  First use @code{tq-create} to create a transaction queue communicating with a specified process.  Then you can call @code{tq-enqueue} to send a transaction."
msgstr ""

#. type: defun
#: processes.texi.orig:1867
#, no-wrap
msgid "tq-create process"
msgstr ""

#. type: defun
#: processes.texi.orig:1873
msgid "This function creates and returns a transaction queue communicating with @var{process}.  The argument @var{process} should be a subprocess capable of sending and receiving streams of bytes.  It may be a child process, or it may be a TCP connection to a server, possibly on another machine."
msgstr ""

#. type: defun
#: processes.texi.orig:1875
#, no-wrap
msgid "tq-enqueue queue question regexp closure fn &optional delay-question"
msgstr ""

#. type: defun
#: processes.texi.orig:1878
msgid "This function sends a transaction to queue @var{queue}.  Specifying the queue has the effect of specifying the subprocess to talk to."
msgstr ""

#. type: defun
#: processes.texi.orig:1883
msgid "The argument @var{question} is the outgoing message that starts the transaction.  The argument @var{fn} is the function to call when the corresponding answer comes back; it is called with two arguments: @var{closure}, and the answer received."
msgstr ""

#. type: defun
#: processes.texi.orig:1887
msgid "The argument @var{regexp} is a regular expression that should match text at the end of the entire answer, but nothing before; that's how @code{tq-enqueue} determines where the answer ends."
msgstr ""

#. type: defun
#: processes.texi.orig:1891
msgid "If the argument @var{delay-question} is non-@code{nil}, delay sending this question until the process has finished replying to any previous questions.  This produces more reliable results with some processes."
msgstr ""

#. type: defun
#: processes.texi.orig:1898
#, no-wrap
msgid "tq-close queue"
msgstr ""

#. type: defun
#: processes.texi.orig:1901
msgid "Shut down transaction queue @var{queue}, waiting for all pending transactions to complete, and then terminate the connection or child process."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1905
msgid "Transaction queues are implemented by means of a filter function.  @xref{Filter Functions}."
msgstr ""

#. type: section
#: processes.texi.orig:1907
#, no-wrap
msgid "Network Connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:1908
#, no-wrap
msgid "network connection"
msgstr ""

#. type: cindex
#: processes.texi.orig:1909
#, no-wrap
msgid "TCP"
msgstr ""

#. type: cindex
#: processes.texi.orig:1910
#, no-wrap
msgid "UDP"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1922
msgid "Emacs Lisp programs can open stream (TCP) and datagram (UDP) network connections (@pxref{Datagrams}) to other processes on the same machine or other machines.  A network connection is handled by Lisp much like a subprocess, and is represented by a process object.  However, the process you are communicating with is not a child of the Emacs process, has no process @acronym{ID}, and you can't kill it or send it signals.  All you can do is send and receive data.  @code{delete-process} closes the connection, but does not kill the program at the other end; that program must decide what to do about closure of the connection."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1931
msgid "Lisp programs can listen for connections by creating network servers.  A network server is also represented by a kind of process object, but unlike a network connection, the network server never transfers data itself.  When it receives a connection request, it creates a new network connection to represent the connection just made.  (The network connection inherits certain information, including the process plist, from the server.)  The network server then goes back to listening for more connection requests."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1938
msgid "Network connections and servers are created by calling @code{make-network-process} with an argument list consisting of keyword/argument pairs, for example @code{:server t} to create a server process, or @code{:type 'datagram} to create a datagram connection.  @xref{Low-Level Network}, for details.  You can also use the @code{open-network-stream} function described below."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1943
msgid "To distinguish the different types of processes, the @code{process-type} function returns the symbol @code{network} for a network connection or server, @code{serial} for a serial port connection, or @code{real} for a real subprocess."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1949
msgid "The @code{process-status} function returns @code{open}, @code{closed}, @code{connect}, or @code{failed} for network connections.  For a network server, the status is always @code{listen}.  None of those values is possible for a real subprocess.  @xref{Process Information}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:1962
msgid "You can stop and resume operation of a network process by calling @code{stop-process} and @code{continue-process}.  For a server process, being stopped means not accepting new connections.  (Up to 5 connection requests will be queued for when you resume the server; you can increase this limit, unless it is imposed by the operating system---see the @code{:server} keyword of @code{make-network-process}, @ref{Network Processes}.)  For a network stream connection, being stopped means not processing input (any arriving input waits until you resume the connection).  For a datagram connection, some number of packets may be queued but input may be lost.  You can use the function @code{process-command} to determine whether a network connection or server is stopped; a non-@code{nil} value means yes."
msgstr ""

#. type: cindex
#: processes.texi.orig:1963
#, no-wrap
msgid "network connection, encrypted"
msgstr ""

#. type: cindex
#: processes.texi.orig:1964
#, no-wrap
msgid "encrypted network connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:1965
#, no-wrap
msgid "@acronym{TLS} network connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:1966
#, no-wrap
msgid "@acronym{STARTTLS} network connections"
msgstr ""

#. type: Plain text
#: processes.texi.orig:1979
msgid "Emacs can create encrypted network connections, using either built-in or external support.  The built-in support uses the GnuTLS (``Transport Layer Security'') library; see @uref{http://www.gnu.org/software/gnutls/, the GnuTLS project page}.  If your Emacs was compiled with GnuTLS support, the function @code{gnutls-available-p} is defined and returns non-@code{nil}.  For more details, @pxref{Top,, Overview, emacs-gnutls, The Emacs-GnuTLS manual}.  The external support uses the @file{starttls.el} library, which requires a helper utility such as @command{gnutls-cli} to be installed on the system.  The @code{open-network-stream} function can transparently handle the details of creating encrypted connections for you, using whatever support is available."
msgstr ""

#. type: defun
#: processes.texi.orig:1980
#, no-wrap
msgid "open-network-stream name buffer host service &rest parameters"
msgstr ""

#. type: defun
#: processes.texi.orig:1983
msgid "This function opens a TCP connection, with optional encryption, and returns a process object that represents the connection."
msgstr ""

#. type: defun
#: processes.texi.orig:1986
msgid "The @var{name} argument specifies the name for the process object.  It is modified as necessary to make it unique."
msgstr ""

#. type: defun
#: processes.texi.orig:1992
msgid "The @var{buffer} argument is the buffer to associate with the connection.  Output from the connection is inserted in the buffer, unless you specify your own filter function to handle the output.  If @var{buffer} is @code{nil}, it means that the connection is not associated with any buffer."
msgstr ""

#. type: defun
#: processes.texi.orig:1996
msgid "The arguments @var{host} and @var{service} specify where to connect to; @var{host} is the host name (a string), and @var{service} is the name of a defined network service (a string) or a port number (an integer)."
msgstr ""

#. type: defun
#: processes.texi.orig:1999
msgid "The remaining arguments @var{parameters} are keyword/argument pairs that are mainly relevant to encrypted connections:"
msgstr ""

#. type: item
#: processes.texi.orig:2002
#, no-wrap
msgid ":nowait @var{boolean}"
msgstr ""

#. type: table
#: processes.texi.orig:2004
msgid "If non-@code{nil}, try to make an asynchronous connection."
msgstr ""

#. type: item
#: processes.texi.orig:2005 processes.texi.orig:2191
#, no-wrap
msgid ":type @var{type}"
msgstr ""

#. type: table
#: processes.texi.orig:2007
msgid "The type of connection.  Options are:"
msgstr ""

#. type: item
#: processes.texi.orig:2009
#, no-wrap
msgid "plain"
msgstr ""

#. type: table
#: processes.texi.orig:2011
msgid "An ordinary, unencrypted connection."
msgstr ""

#. type: item
#: processes.texi.orig:2011
#, no-wrap
msgid "tls"
msgstr ""

#. type: itemx
#: processes.texi.orig:2012
#, no-wrap
msgid "ssl"
msgstr ""

#. type: table
#: processes.texi.orig:2014
msgid "A @acronym{TLS} (``Transport Layer Security'') connection."
msgstr ""

#. type: itemx
#: processes.texi.orig:2015
#, no-wrap
msgid "network"
msgstr ""

#. type: table
#: processes.texi.orig:2020
msgid "Start with a plain connection, and if parameters @samp{:success} and @samp{:capability-command} are supplied, try to upgrade to an encrypted connection via @acronym{STARTTLS}.  If that fails, retain the unencrypted connection."
msgstr ""

#. type: item
#: processes.texi.orig:2020
#, no-wrap
msgid "starttls"
msgstr ""

#. type: table
#: processes.texi.orig:2022
msgid "As for @code{nil}, but if @acronym{STARTTLS} fails drop the connection."
msgstr ""

#. type: item
#: processes.texi.orig:2022
#, no-wrap
msgid "shell"
msgstr ""

#. type: table
#: processes.texi.orig:2024
msgid "A shell connection."
msgstr ""

#. type: item
#: processes.texi.orig:2026
#, no-wrap
msgid ":always-query-capabilities @var{boolean}"
msgstr ""

#. type: table
#: processes.texi.orig:2029
msgid "If non-@code{nil}, always ask for the server's capabilities, even when doing a @samp{plain} connection."
msgstr ""

#. type: item
#: processes.texi.orig:2030
#, no-wrap
msgid ":capability-command @var{capability-command}"
msgstr ""

#. type: table
#: processes.texi.orig:2032
msgid "Command string to query the host capabilities."
msgstr ""

#. type: item
#: processes.texi.orig:2033
#, no-wrap
msgid ":end-of-command @var{regexp}"
msgstr ""

#. type: itemx
#: processes.texi.orig:2034
#, no-wrap
msgid ":end-of-capability @var{regexp}"
msgstr ""

#. type: table
#: processes.texi.orig:2037
msgid "Regular expression matching the end of a command, or the end of the command @var{capability-command}.  The latter defaults to the former."
msgstr ""

#. type: item
#: processes.texi.orig:2038
#, no-wrap
msgid ":starttls-function @var{function}"
msgstr ""

#. type: table
#: processes.texi.orig:2042
msgid "Function of one argument (the response to @var{capability-command}), which returns either @code{nil}, or the command to activate @acronym{STARTTLS} if supported."
msgstr ""

#. type: item
#: processes.texi.orig:2043
#, no-wrap
msgid ":success @var{regexp}"
msgstr ""

#. type: table
#: processes.texi.orig:2045
msgid "Regular expression matching a successful @acronym{STARTTLS} negotiation."
msgstr ""

#. type: item
#: processes.texi.orig:2046
#, no-wrap
msgid ":use-starttls-if-possible @var{boolean}"
msgstr ""

#. type: table
#: processes.texi.orig:2049
msgid "If non-@code{nil}, do opportunistic @acronym{STARTTLS} upgrades even if Emacs doesn't have built-in @acronym{TLS} support."
msgstr ""

#. type: item
#: processes.texi.orig:2050
#, no-wrap
msgid ":client-certificate @var{list-or-t}"
msgstr ""

#. type: table
#: processes.texi.orig:2056
msgid "Either a list of the form @code{(@var{key-file} @var{cert-file})}, naming the certificate key file and certificate file itself, or @code{t}, meaning to query @code{auth-source} for this information (@pxref{Top,,Overview, auth, The Auth-Source Manual}).  Only used for @acronym{TLS} or @acronym{STARTTLS}."
msgstr ""

#. type: item
#: processes.texi.orig:2057
#, no-wrap
msgid ":return-list @var{cons-or-nil}"
msgstr ""

#. type: table
#: processes.texi.orig:2061
msgid "The return value of this function.  If omitted or @code{nil}, return a process object.  Otherwise, a cons of the form @code{(@var{process-object} . @var{plist})}, where @var{plist} has keywords:"
msgstr ""

#. type: item
#: processes.texi.orig:2063
#, no-wrap
msgid ":greeting @var{string-or-nil}"
msgstr ""

#. type: table
#: processes.texi.orig:2065
msgid "If non-@code{nil}, the greeting string returned by the host."
msgstr ""

#. type: item
#: processes.texi.orig:2065
#, no-wrap
msgid ":capabilities @var{string-or-nil}"
msgstr ""

#. type: table
#: processes.texi.orig:2067
msgid "If non-@code{nil}, the host's capability string."
msgstr ""

#. type: item
#: processes.texi.orig:2067
#, no-wrap
msgid ":type @var{symbol}"
msgstr ""

#. type: table
#: processes.texi.orig:2069
msgid "The connection type: @samp{plain} or @samp{tls}."
msgstr ""

#. type: cindex
#: processes.texi.orig:2077
#, no-wrap
msgid "network servers"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2084
msgid "You create a server by calling @code{make-network-process} (@pxref{Network Processes}) with @code{:server t}.  The server will listen for connection requests from clients.  When it accepts a client connection request, that creates a new network connection, itself a process object, with the following parameters:"
msgstr ""

#. type: itemize
#: processes.texi.orig:2095
msgid "The connection's process name is constructed by concatenating the server process's @var{name} with a client identification string.  The client identification string for an IPv4 connection looks like @samp{<@var{a}.@var{b}.@var{c}.@var{d}:@var{p}>}, which represents an address and port number.  Otherwise, it is a unique number in brackets, as in @samp{<@var{nnn}>}.  The number is unique for each connection in the Emacs session."
msgstr ""

#. type: itemize
#: processes.texi.orig:2101
msgid "If the server has a non-default filter, the connection process does not get a separate process buffer; otherwise, Emacs creates a new buffer for the purpose.  The buffer name is the server's buffer name or process name, concatenated with the client identification string."
msgstr ""

#. type: itemize
#: processes.texi.orig:2105
msgid "The server's process buffer value is never used directly, but the log function can retrieve it and use it to log connections by inserting text there."
msgstr ""

#. type: itemize
#: processes.texi.orig:2111
msgid "The communication type and the process filter and sentinel are inherited from those of the server.  The server never directly uses its filter and sentinel; their sole purpose is to initialize connections made to the server."
msgstr ""

#. type: itemize
#: processes.texi.orig:2117
msgid "The connection's process contact information is set according to the client's addressing information (typically an IP address and a port number).  This information is associated with the @code{process-contact} keywords @code{:host}, @code{:service}, @code{:remote}."
msgstr ""

#. type: itemize
#: processes.texi.orig:2121
msgid "The connection's local address is set up according to the port number used for the connection."
msgstr ""

#. type: itemize
#: processes.texi.orig:2124
msgid "The client process's plist is initialized from the server's plist."
msgstr ""

#. type: cindex
#: processes.texi.orig:2128
#, no-wrap
msgid "datagrams"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2134
msgid "A @dfn{datagram} connection communicates with individual packets rather than streams of data.  Each call to @code{process-send} sends one datagram packet (@pxref{Input to Processes}), and each datagram received results in one call to the filter function."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2144
msgid "The datagram connection doesn't have to talk with the same remote peer all the time.  It has a @dfn{remote peer address} which specifies where to send datagrams to.  Each time an incoming datagram is passed to the filter function, the peer address is set to the address that datagram came from; that way, if the filter function sends a datagram, it will go back to that place.  You can specify the remote peer address when you create the datagram connection using the @code{:remote} keyword.  You can change it later on by calling @code{set-process-datagram-address}."
msgstr ""

#. type: defun
#: processes.texi.orig:2145
#, no-wrap
msgid "process-datagram-address process"
msgstr ""

#. type: defun
#: processes.texi.orig:2148
msgid "If @var{process} is a datagram connection or server, this function returns its remote peer address."
msgstr ""

#. type: defun
#: processes.texi.orig:2150
#, no-wrap
msgid "set-process-datagram-address process address"
msgstr ""

#. type: defun
#: processes.texi.orig:2153
msgid "If @var{process} is a datagram connection or server, this function sets its remote peer address to @var{address}."
msgstr ""

#. type: section
#: processes.texi.orig:2156
#, no-wrap
msgid "Low-Level Network Access"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2161
msgid "You can also create network connections by operating at a lower level than that of @code{open-network-stream}, using @code{make-network-process}."
msgstr ""

#. type: menuentry
#: processes.texi.orig:2168
msgid "Proc: Network Processes"
msgstr ""

#. type: menuentry
#: processes.texi.orig:2168
msgid "Using @code{make-network-process}."
msgstr ""

#. type: menuentry
#: processes.texi.orig:2168
msgid "Options: Network Options"
msgstr ""

#. type: menuentry
#: processes.texi.orig:2168
msgid "Further control over network connections."
msgstr ""

#. type: menuentry
#: processes.texi.orig:2168
msgid "Features: Network Feature Testing"
msgstr ""

#. type: menuentry
#: processes.texi.orig:2168
msgid "Determining which network features work on the machine you are using."
msgstr ""

#. type: node
#: processes.texi.orig:2170
#, no-wrap
msgid "Network Processes"
msgstr ""

#. type: code{#1}
#: processes.texi.orig:2171
#, no-wrap
msgid "make-network-process"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2176
msgid "The basic function for creating network connections and network servers is @code{make-network-process}.  It can do either of those jobs, depending on the arguments you give it."
msgstr ""

#. type: defun
#: processes.texi.orig:2177
#, no-wrap
msgid "make-network-process &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:2185
msgid "This function creates a network connection or server and returns the process object that represents it.  The arguments @var{args} are a list of keyword/argument pairs.  Omitting a keyword is always equivalent to specifying it with value @code{nil}, except for @code{:coding}, @code{:filter-multibyte}, and @code{:reuseaddr}.  Here are the meaningful keywords (those corresponding to network options are listed in the following section):"
msgstr ""

#. type: itemx
#: processes.texi.orig:2187 processes.texi.orig:2564 processes.texi.orig:2636
#, no-wrap
msgid ":name @var{name}"
msgstr ""

#. type: table
#: processes.texi.orig:2190
msgid "Use the string @var{name} as the process name.  It is modified if necessary to make it unique."
msgstr ""

#. type: table
#: processes.texi.orig:2196
msgid "Specify the communication type.  A value of @code{nil} specifies a stream connection (the default); @code{datagram} specifies a datagram connection; @code{seqpacket} specifies a ``sequenced packet stream'' connection.  Both connections and servers can be of these types."
msgstr ""

#. type: item
#: processes.texi.orig:2197
#, no-wrap
msgid ":server @var{server-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2202
msgid "If @var{server-flag} is non-@code{nil}, create a server.  Otherwise, create a connection.  For a stream type server, @var{server-flag} may be an integer, which then specifies the length of the queue of pending connections to the server.  The default queue length is 5."
msgstr ""

#. type: item
#: processes.texi.orig:2203
#, no-wrap
msgid ":host @var{host}"
msgstr ""

#. type: table
#: processes.texi.orig:2209
msgid "Specify the host to connect to.  @var{host} should be a host name or Internet address, as a string, or the symbol @code{local} to specify the local host.  If you specify @var{host} for a server, it must specify a valid address for the local host, and only clients connecting to that address will be accepted."
msgstr ""

#. type: item
#: processes.texi.orig:2210
#, no-wrap
msgid ":service @var{service}"
msgstr ""

#. type: table
#: processes.texi.orig:2216
msgid "@var{service} specifies a port number to connect to; or, for a server, the port number to listen on.  It should be a service name that translates to a port number, or an integer specifying the port number directly.  For a server, it can also be @code{t}, which means to let the system select an unused port number."
msgstr ""

#. type: item
#: processes.texi.orig:2217
#, no-wrap
msgid ":family @var{family}"
msgstr ""

#. type: table
#: processes.texi.orig:2224
msgid "@var{family} specifies the address (and protocol) family for communication.  @code{nil} means determine the proper address family automatically for the given @var{host} and @var{service}.  @code{local} specifies a Unix socket, in which case @var{host} is ignored.  @code{ipv4} and @code{ipv6} specify to use IPv4 and IPv6, respectively."
msgstr ""

#. type: item
#: processes.texi.orig:2225
#, no-wrap
msgid ":local @var{local-address}"
msgstr ""

#. type: table
#: processes.texi.orig:2229
msgid "For a server process, @var{local-address} is the address to listen on.  It overrides @var{family}, @var{host} and @var{service}, so you might as well not specify them."
msgstr ""

#. type: item
#: processes.texi.orig:2230
#, no-wrap
msgid ":remote @var{remote-address}"
msgstr ""

#. type: table
#: processes.texi.orig:2234
msgid "For a connection, @var{remote-address} is the address to connect to.  It overrides @var{family}, @var{host} and @var{service}, so you might as well not specify them."
msgstr ""

#. type: table
#: processes.texi.orig:2237
msgid "For a datagram server, @var{remote-address} specifies the initial setting of the remote datagram address."
msgstr ""

#. type: table
#: processes.texi.orig:2240
msgid "The format of @var{local-address} or @var{remote-address} depends on the address family:"
msgstr ""

#. type: itemize
#: processes.texi.orig:2248
msgid "An IPv4 address is represented as a five-element vector of four 8-bit integers and one 16-bit integer @code{[@var{a} @var{b} @var{c} @var{d} @var{p}]} corresponding to numeric IPv4 address @var{a}.@var{b}.@var{c}.@var{d} and port number @var{p}."
msgstr ""

#. type: itemize
#: processes.texi.orig:2255
msgid "An IPv6 address is represented as a nine-element vector of 16-bit integers @code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var{p}]} corresponding to numeric IPv6 address @var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h} and port number @var{p}."
msgstr ""

#. type: itemize
#: processes.texi.orig:2259
msgid "A local address is represented as a string, which specifies the address in the local address space."
msgstr ""

#. type: itemize
#: processes.texi.orig:2267
msgid "An ``unsupported family'' address is represented by a cons @code{(@var{f} . @var{av})}, where @var{f} is the family number and @var{av} is a vector specifying the socket address using one element per address data byte.  Do not rely on this format in portable code, as it may depend on implementation defined constants, data sizes, and data structure alignment."
msgstr ""

#. type: item
#: processes.texi.orig:2269
#, no-wrap
msgid ":nowait @var{bool}"
msgstr ""

#. type: table
#: processes.texi.orig:2277
msgid "If @var{bool} is non-@code{nil} for a stream connection, return without waiting for the connection to complete.  When the connection succeeds or fails, Emacs will call the sentinel function, with a second argument matching @code{\"open\"} (if successful) or @code{\"failed\"}.  The default is to block, so that @code{make-network-process} does not return until the connection has succeeded or failed."
msgstr ""

#. type: item
#: processes.texi.orig:2278
#, no-wrap
msgid ":stop @var{stopped}"
msgstr ""

#. type: table
#: processes.texi.orig:2281
msgid "If @var{stopped} is non-@code{nil}, start the network connection or server in the ``stopped'' state."
msgstr ""

#. type: itemx
#: processes.texi.orig:2282 processes.texi.orig:2568 processes.texi.orig:2637
#, no-wrap
msgid ":buffer @var{buffer}"
msgstr ""

#. type: table
#: processes.texi.orig:2284
msgid "Use @var{buffer} as the process buffer."
msgstr ""

#. type: item
#: processes.texi.orig:2285 processes.texi.orig:2576
#, no-wrap
msgid ":coding @var{coding}"
msgstr ""

#. type: table
#: processes.texi.orig:2290
msgid "Use @var{coding} as the coding system for this process.  To specify different coding systems for decoding data from the connection and for encoding data sent to it, specify @code{(@var{decoding} .  @var{encoding})} for @var{coding}."
msgstr ""

#. type: table
#: processes.texi.orig:2293
msgid "If you don't specify this keyword at all, the default is to determine the coding systems from the data."
msgstr ""

#. type: item
#: processes.texi.orig:2294 processes.texi.orig:2583
#, no-wrap
msgid ":noquery @var{query-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2297
msgid "Initialize the process query flag to @var{query-flag}.  @xref{Query Before Exit}."
msgstr ""

#. type: item
#: processes.texi.orig:2298 processes.texi.orig:2594
#, no-wrap
msgid ":filter @var{filter}"
msgstr ""

#. type: table
#: processes.texi.orig:2300
msgid "Initialize the process filter to @var{filter}."
msgstr ""

#. type: item
#: processes.texi.orig:2301
#, no-wrap
msgid ":filter-multibyte @var{multibyte}"
msgstr ""

#. type: table
#: processes.texi.orig:2305
msgid "If @var{multibyte} is non-@code{nil}, strings given to the process filter are multibyte, otherwise they are unibyte.  The default is the default value of @code{enable-multibyte-characters}."
msgstr ""

#. type: item
#: processes.texi.orig:2306 processes.texi.orig:2597
#, no-wrap
msgid ":sentinel @var{sentinel}"
msgstr ""

#. type: table
#: processes.texi.orig:2308
msgid "Initialize the process sentinel to @var{sentinel}."
msgstr ""

#. type: item
#: processes.texi.orig:2309
#, no-wrap
msgid ":log @var{log}"
msgstr ""

#. type: table
#: processes.texi.orig:2317
msgid "Initialize the log function of a server process to @var{log}.  The log function is called each time the server accepts a network connection from a client.  The arguments passed to the log function are @var{server}, @var{connection}, and @var{message}; where @var{server} is the server process, @var{connection} is the new process for the connection, and @var{message} is a string describing what has happened."
msgstr ""

#. type: item
#: processes.texi.orig:2318 processes.texi.orig:2600
#, no-wrap
msgid ":plist @var{plist}"
msgstr ""

#. type: table
#: processes.texi.orig:2320
msgid "Initialize the process plist to @var{plist}."
msgstr ""

#. type: defun
#: processes.texi.orig:2324
msgid "The original argument list, modified with the actual connection information, is available via the @code{process-contact} function."
msgstr ""

#. type: subsection
#: processes.texi.orig:2326 processes.texi.orig:2327
#, no-wrap
msgid "Network Options"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2332
msgid "The following network options can be specified when you create a network process.  Except for @code{:reuseaddr}, you can also set or modify these options later, using @code{set-network-process-option}."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2337
msgid "For a server process, the options specified with @code{make-network-process} are not inherited by the client connections, so you will need to set the necessary options for each child connection as it is created."
msgstr ""

#. type: item
#: processes.texi.orig:2339
#, no-wrap
msgid ":bindtodevice @var{device-name}"
msgstr ""

#. type: table
#: processes.texi.orig:2344
msgid "If @var{device-name} is a non-empty string identifying a network interface name (see @code{network-interface-list}), only handle packets received on that interface.  If @var{device-name} is @code{nil} (the default), handle packets received on any interface."
msgstr ""

#. type: table
#: processes.texi.orig:2346
msgid "Using this option may require special privileges on some systems."
msgstr ""

#. type: item
#: processes.texi.orig:2347
#, no-wrap
msgid ":broadcast @var{broadcast-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2352
msgid "If @var{broadcast-flag} is non-@code{nil} for a datagram process, the process will receive datagram packet sent to a broadcast address, and be able to send packets to a broadcast address.  This is ignored for a stream connection."
msgstr ""

#. type: item
#: processes.texi.orig:2353
#, no-wrap
msgid ":dontroute @var{dontroute-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2356
msgid "If @var{dontroute-flag} is non-@code{nil}, the process can only send to hosts on the same network as the local host."
msgstr ""

#. type: item
#: processes.texi.orig:2357
#, no-wrap
msgid ":keepalive @var{keepalive-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2360
msgid "If @var{keepalive-flag} is non-@code{nil} for a stream connection, enable exchange of low-level keep-alive messages."
msgstr ""

#. type: item
#: processes.texi.orig:2361
#, no-wrap
msgid ":linger @var{linger-arg}"
msgstr ""

#. type: table
#: processes.texi.orig:2369
msgid "If @var{linger-arg} is non-@code{nil}, wait for successful transmission of all queued packets on the connection before it is deleted (see @code{delete-process}).  If @var{linger-arg} is an integer, it specifies the maximum time in seconds to wait for queued packets to be sent before closing the connection.  The default is @code{nil}, which means to discard unsent queued packets when the process is deleted."
msgstr ""

#. type: item
#: processes.texi.orig:2371
#, no-wrap
msgid ":oobinline @var{oobinline-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2375
msgid "If @var{oobinline-flag} is non-@code{nil} for a stream connection, receive out-of-band data in the normal data stream.  Otherwise, ignore out-of-band data."
msgstr ""

#. type: item
#: processes.texi.orig:2376
#, no-wrap
msgid ":priority @var{priority}"
msgstr ""

#. type: table
#: processes.texi.orig:2383
msgid "Set the priority for packets sent on this connection to the integer @var{priority}.  The interpretation of this number is protocol specific; such as setting the TOS (type of service) field on IP packets sent on this connection.  It may also have system dependent effects, such as selecting a specific output queue on the network interface."
msgstr ""

#. type: item
#: processes.texi.orig:2384
#, no-wrap
msgid ":reuseaddr @var{reuseaddr-flag}"
msgstr ""

#. type: table
#: processes.texi.orig:2392
msgid "If @var{reuseaddr-flag} is non-@code{nil} (the default) for a stream server process, allow this server to reuse a specific port number (see @code{:service}), unless another process on this host is already listening on that port.  If @var{reuseaddr-flag} is @code{nil}, there may be a period of time after the last use of that port (by any process on the host) where it is not possible to make a new server on that port."
msgstr ""

#. type: defun
#: processes.texi.orig:2394
#, no-wrap
msgid "set-network-process-option process option value &optional no-error"
msgstr ""

#. type: defun
#: processes.texi.orig:2401
msgid "This function sets or modifies a network option for network process @var{process}.  The accepted options and values are as for @code{make-network-process}.  If @var{no-error} is non-@code{nil}, this function returns @code{nil} instead of signaling an error if @var{option} is not a supported option.  If the function successfully completes, it returns @code{t}."
msgstr ""

#. type: defun
#: processes.texi.orig:2404
msgid "The current setting of an option is available via the @code{process-contact} function."
msgstr ""

#. type: node
#: processes.texi.orig:2406
#, no-wrap
msgid "Network Feature Testing"
msgstr ""

#. type: subsection
#: processes.texi.orig:2407
#, no-wrap
msgid "Testing Availability of Network Features"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2411
msgid "To test for the availability of a given network feature, use @code{featurep} like this:"
msgstr ""

#. type: example
#: processes.texi.orig:2414
#, no-wrap
msgid "(featurep 'make-network-process '(@var{keyword} @var{value}))\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2421
msgid "The result of this form is @code{t} if it works to specify @var{keyword} with value @var{value} in @code{make-network-process}.  Here are some of the @var{keyword}---@var{value} pairs you can test in this way."
msgstr ""

#. type: item
#: processes.texi.orig:2423
#, no-wrap
msgid "(:nowait t)"
msgstr ""

#. type: table
#: processes.texi.orig:2425
msgid "Non-@code{nil} if non-blocking connect is supported."
msgstr ""

#. type: item
#: processes.texi.orig:2425
#, no-wrap
msgid "(:type datagram)"
msgstr ""

#. type: table
#: processes.texi.orig:2427
msgid "Non-@code{nil} if datagrams are supported."
msgstr ""

#. type: item
#: processes.texi.orig:2427
#, no-wrap
msgid "(:family local)"
msgstr ""

#. type: table
#: processes.texi.orig:2429
msgid "Non-@code{nil} if local (a.k.a.@: ``UNIX domain'') sockets are supported."
msgstr ""

#. type: item
#: processes.texi.orig:2429
#, no-wrap
msgid "(:family ipv6)"
msgstr ""

#. type: table
#: processes.texi.orig:2431
msgid "Non-@code{nil} if IPv6 is supported."
msgstr ""

#. type: item
#: processes.texi.orig:2431
#, no-wrap
msgid "(:service t)"
msgstr ""

#. type: table
#: processes.texi.orig:2433
msgid "Non-@code{nil} if the system can select the port for a server."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2437
msgid "To test for the availability of a given network option, use @code{featurep} like this:"
msgstr ""

#. type: example
#: processes.texi.orig:2440
#, no-wrap
msgid "(featurep 'make-network-process '@var{keyword})\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2447
msgid "The accepted @var{keyword} values are @code{:bindtodevice}, etc.  For the complete list, @pxref{Network Options}.  This form returns non-@code{nil} if that particular network option is supported by @code{make-network-process} (or @code{set-network-process-option})."
msgstr ""

#. type: section
#: processes.texi.orig:2449
#, no-wrap
msgid "Misc Network Facilities"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2454
msgid "These additional functions are useful for creating and operating on network connections.  Note that they are supported only on some systems."
msgstr ""

#. type: defun
#: processes.texi.orig:2455
#, no-wrap
msgid "network-interface-list"
msgstr ""

#. type: defun
#: processes.texi.orig:2461
msgid "This function returns a list describing the network interfaces of the machine you are using.  The value is an alist whose elements have the form @code{(@var{name} . @var{address})}.  @var{address} has the same form as the @var{local-address} and @var{remote-address} arguments to @code{make-network-process}."
msgstr ""

#. type: defun
#: processes.texi.orig:2463
#, no-wrap
msgid "network-interface-info ifname"
msgstr ""

#. type: defun
#: processes.texi.orig:2467
msgid "This function returns information about the network interface named @var{ifname}.  The value is a list of the form @code{(@var{addr} @var{bcast} @var{netmask} @var{hwaddr} @var{flags})}."
msgstr ""

#. type: item
#: processes.texi.orig:2469
#, no-wrap
msgid "addr"
msgstr ""

#. type: table
#: processes.texi.orig:2471
msgid "The Internet protocol address."
msgstr ""

#. type: item
#: processes.texi.orig:2471
#, no-wrap
msgid "bcast"
msgstr ""

#. type: table
#: processes.texi.orig:2473
msgid "The broadcast address."
msgstr ""

#. type: item
#: processes.texi.orig:2473
#, no-wrap
msgid "netmask"
msgstr ""

#. type: table
#: processes.texi.orig:2475
msgid "The network mask."
msgstr ""

#. type: item
#: processes.texi.orig:2475
#, no-wrap
msgid "hwaddr"
msgstr ""

#. type: table
#: processes.texi.orig:2477
msgid "The layer 2 address (Ethernet MAC address, for instance)."
msgstr ""

#. type: item
#: processes.texi.orig:2477
#, no-wrap
msgid "flags"
msgstr ""

#. type: table
#: processes.texi.orig:2479
msgid "The current flags of the interface."
msgstr ""

#. type: defun
#: processes.texi.orig:2482
#, no-wrap
msgid "format-network-address address &optional omit-port"
msgstr ""

#. type: defun
#: processes.texi.orig:2485
msgid "This function converts the Lisp representation of a network address to a string."
msgstr ""

#. type: defun
#: processes.texi.orig:2490
msgid "A five-element vector @code{[@var{a} @var{b} @var{c} @var{d} @var{p}]} represents an IPv4 address @var{a}.@var{b}.@var{c}.@var{d} and port number @var{p}.  @code{format-network-address} converts that to the string @code{\"@var{a}.@var{b}.@var{c}.@var{d}:@var{p}\"}."
msgstr ""

#. type: defun
#: processes.texi.orig:2496
msgid "A nine-element vector @code{[@var{a} @var{b} @var{c} @var{d} @var{e} @var{f} @var{g} @var{h} @var{p}]} represents an IPv6 address along with a port number.  @code{format-network-address} converts that to the string @code{\"[@var{a}:@var{b}:@var{c}:@var{d}:@var{e}:@var{f}:@var{g}:@var{h}]:@var{p}\"}."
msgstr ""

#. type: defun
#: processes.texi.orig:2500
msgid "If the vector does not include the port number, @var{p}, or if @var{omit-port} is non-@code{nil}, the result does not include the @code{:@var{p}} suffix."
msgstr ""

#. type: section
#: processes.texi.orig:2503
#, no-wrap
msgid "Communicating with Serial Ports"
msgstr ""

#. type: file{#1}
#: processes.texi.orig:2504
#, no-wrap
msgid "/dev/tty"
msgstr ""

#. type: file{#1}
#: processes.texi.orig:2505
#, no-wrap
msgid "COM1"
msgstr ""

#. type: cindex
#: processes.texi.orig:2506
#, no-wrap
msgid "serial connections"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2511
msgid "Emacs can communicate with serial ports.  For interactive use, @kbd{M-x serial-term} opens a terminal window.  In a Lisp program, @code{make-serial-process} creates a process object."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2517
msgid "The serial port can be configured at run-time, without having to close and re-open it.  The function @code{serial-process-configure} lets you change the speed, bytesize, and other parameters.  In a terminal window created by @code{serial-term}, you can click on the mode line for configuration."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2526
msgid "A serial connection is represented by a process object, which can be used in a similar way to a subprocess or network process.  You can send and receive data, and configure the serial port.  A serial process object has no process ID, however, and you can't send signals to it, and the status codes are different from other types of processes.  @code{delete-process} on the process object or @code{kill-buffer} on the process buffer close the connection, but this does not affect the device connected to the serial port."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2529
msgid "The function @code{process-type} returns the symbol @code{serial} for a process object representing a serial port connection."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2531
msgid "Serial ports are available on GNU/Linux, Unix, and MS Windows systems."
msgstr ""

#. type: deffn
#: processes.texi.orig:2532
#, no-wrap
msgid "Command serial-term port speed"
msgstr ""

#. type: deffn
#: processes.texi.orig:2538
msgid "Start a terminal-emulator for a serial port in a new buffer.  @var{port} is the name of the serial port to connect to.  For example, this could be @file{/dev/ttyS0} on Unix.  On MS Windows, this could be @file{COM1}, or @file{\\\\.\\COM10} (double the backslashes in Lisp strings)."
msgstr ""

#. type: deffn
#: processes.texi.orig:2545
msgid "@var{speed} is the speed of the serial port in bits per second.  9600 is a common value.  The buffer is in Term mode; see @ref{Term Mode,,, emacs, The GNU Emacs Manual}, for the commands to use in that buffer.  You can change the speed and the configuration in the mode line menu."
msgstr ""

#. type: defun
#: processes.texi.orig:2547
#, no-wrap
msgid "make-serial-process &rest args"
msgstr ""

#. type: defun
#: processes.texi.orig:2551
msgid "This function creates a process and a buffer.  Arguments are specified as keyword/argument pairs.  Here's the list of the meaningful keywords, with the first two (@var{port} and @var{speed}) being mandatory:"
msgstr ""

#. type: itemx
#: processes.texi.orig:2553 processes.texi.orig:2638
#, no-wrap
msgid ":port @var{port}"
msgstr ""

#. type: table
#: processes.texi.orig:2558
msgid "This is the name of the serial port.  On Unix and GNU systems, this is a file name such as @file{/dev/ttyS0}.  On Windows, this could be @file{COM1}, or @file{\\\\.\\COM10} for ports higher than @file{COM9} (double the backslashes in Lisp strings)."
msgstr ""

#. type: item
#: processes.texi.orig:2559 processes.texi.orig:2643
#, no-wrap
msgid ":speed @var{speed}"
msgstr ""

#. type: table
#: processes.texi.orig:2563
msgid "The speed of the serial port in bits per second.  This function calls @code{serial-process-configure} to handle the speed; see the following documentation of that function for more details."
msgstr ""

#. type: table
#: processes.texi.orig:2567
msgid "The name of the process.  If @var{name} is not given, @var{port} will serve as the process name as well."
msgstr ""

#. type: table
#: processes.texi.orig:2575
msgid "The buffer to associate with the process.  The value can be either a buffer or a string that names a buffer.  Process output goes at the end of that buffer, unless you specify an output stream or filter function to handle the output.  If @var{buffer} is not given, the process buffer's name is taken from the value of the @code{:name} keyword."
msgstr ""

#. type: table
#: processes.texi.orig:2582
msgid "If @var{coding} is a symbol, it specifies the coding system used for both reading and writing for this process.  If @var{coding} is a cons @code{(@var{decoding} . @var{encoding})}, @var{decoding} is used for reading, and @var{encoding} is used for writing.  If not specified, the default is to determine the coding systems from the data itself."
msgstr ""

#. type: table
#: processes.texi.orig:2586
msgid "Initialize the process query flag to @var{query-flag}.  @xref{Query Before Exit}.  The flags defaults to @code{nil} if unspecified."
msgstr ""

#. type: item
#: processes.texi.orig:2587
#, no-wrap
msgid ":stop @var{bool}"
msgstr ""

#. type: table
#: processes.texi.orig:2593
msgid "Start process in the ``stopped'' state if @var{bool} is non-@code{nil}.  In the stopped state, a serial process does not accept incoming data, but you can send outgoing data.  The stopped state is cleared by @code{continue-process} and set by @code{stop-process}."
msgstr ""

#. type: table
#: processes.texi.orig:2596
msgid "Install @var{filter} as the process filter."
msgstr ""

#. type: table
#: processes.texi.orig:2599
msgid "Install @var{sentinel} as the process sentinel."
msgstr ""

#. type: table
#: processes.texi.orig:2602
msgid "Install @var{plist} as the initial plist of the process."
msgstr ""

#. type: item
#: processes.texi.orig:2603
#, no-wrap
msgid ":bytesize"
msgstr ""

#. type: itemx
#: processes.texi.orig:2604
#, no-wrap
msgid ":parity"
msgstr ""

#. type: itemx
#: processes.texi.orig:2605
#, no-wrap
msgid ":stopbits"
msgstr ""

#. type: itemx
#: processes.texi.orig:2606
#, no-wrap
msgid ":flowcontrol"
msgstr ""

#. type: table
#: processes.texi.orig:2609
msgid "These are handled by @code{serial-process-configure}, which is called by @code{make-serial-process}."
msgstr ""

#. type: defun
#: processes.texi.orig:2613
msgid "The original argument list, possibly modified by later configuration, is available via the function @code{process-contact}."
msgstr ""

#. type: defun
#: processes.texi.orig:2615
msgid "Here is an example:"
msgstr ""

#. type: example
#: processes.texi.orig:2618
#, no-wrap
msgid "(make-serial-process :port \"/dev/ttyS0\" :speed 9600)\n"
msgstr ""

#. type: defun
#: processes.texi.orig:2621
#, no-wrap
msgid "serial-process-configure &rest args"
msgstr ""

#. type: cindex
#: processes.texi.orig:2622
#, no-wrap
msgid "baud, in serial connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:2623
#, no-wrap
msgid "bytesize, in serial connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:2624
#, no-wrap
msgid "parity, in serial connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:2625
#, no-wrap
msgid "stopbits, in serial connections"
msgstr ""

#. type: cindex
#: processes.texi.orig:2626
#, no-wrap
msgid "flowcontrol, in serial connections"
msgstr ""

#. type: defun
#: processes.texi.orig:2633
msgid "This function configures a serial port connection.  Arguments are specified as keyword/argument pairs.  Attributes that are not given are re-initialized from the process's current configuration (available via the function @code{process-contact}), or set to reasonable default values.  The following arguments are defined:"
msgstr ""

#. type: item
#: processes.texi.orig:2635
#, no-wrap
msgid ":process @var{process}"
msgstr ""

#. type: table
#: processes.texi.orig:2642
msgid "Any of these arguments can be given to identify the process that is to be configured.  If none of these arguments is given, the current buffer's process is used."
msgstr ""

#. type: table
#: processes.texi.orig:2654
msgid "The speed of the serial port in bits per second, a.k.a.@: @dfn{baud rate}.  The value can be any number, but most serial ports work only at a few defined values between 1200 and 115200, with 9600 being the most common value.  If @var{speed} is @code{nil}, the function ignores all other arguments and does not configure the port.  This may be useful for special serial ports such as Bluetooth-to-serial converters, which can only be configured through @samp{AT} commands sent through the connection.  The value of @code{nil} for @var{speed} is valid only for connections that were already opened by a previous call to @code{make-serial-process} or @code{serial-term}."
msgstr ""

#. type: item
#: processes.texi.orig:2655
#, no-wrap
msgid ":bytesize @var{bytesize}"
msgstr ""

#. type: table
#: processes.texi.orig:2658
msgid "The number of bits per byte, which can be 7 or 8.  If @var{bytesize} is not given or @code{nil}, it defaults to 8."
msgstr ""

#. type: item
#: processes.texi.orig:2659
#, no-wrap
msgid ":parity @var{parity}"
msgstr ""

#. type: table
#: processes.texi.orig:2663
msgid "The value can be @code{nil} (don't use parity), the symbol @code{odd} (use odd parity), or the symbol @code{even} (use even parity).  If @var{parity} is not given, it defaults to no parity."
msgstr ""

#. type: item
#: processes.texi.orig:2664
#, no-wrap
msgid ":stopbits @var{stopbits}"
msgstr ""

#. type: table
#: processes.texi.orig:2668
msgid "The number of stopbits used to terminate a transmission of each byte.  @var{stopbits} can be 1 or 2.  If @var{stopbits} is not given or @code{nil}, it defaults to 1."
msgstr ""

#. type: item
#: processes.texi.orig:2669
#, no-wrap
msgid ":flowcontrol @var{flowcontrol}"
msgstr ""

#. type: table
#: processes.texi.orig:2675
msgid "The type of flow control to use for this connection, which is either @code{nil} (don't use flow control), the symbol @code{hw} (use RTS/CTS hardware flow control), or the symbol @code{sw} (use XON/XOFF software flow control).  If @var{flowcontrol} is not given, it defaults to no flow control."
msgstr ""

#. type: defun
#: processes.texi.orig:2680
msgid "Internally, @code{make-serial-process} calls @code{serial-process-configure} for the initial configuration of the serial port."
msgstr ""

#. type: section
#: processes.texi.orig:2683
#, no-wrap
msgid "Packing and Unpacking Byte Arrays"
msgstr ""

#. type: cindex
#: processes.texi.orig:2684
#, no-wrap
msgid "byte packing and unpacking"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2695
msgid "This section describes how to pack and unpack arrays of bytes, usually for binary network protocols.  These functions convert byte arrays to alists, and vice versa.  The byte array can be represented as a unibyte string or as a vector of integers, while the alist associates symbols either with fixed-size objects or with recursive sub-alists.  To use the functions referred to in this section, load the @code{bindat} library."
msgstr ""

#. type: cindex
#: processes.texi.orig:2696
#, no-wrap
msgid "serializing"
msgstr ""

#. type: cindex
#: processes.texi.orig:2697
#, no-wrap
msgid "deserializing"
msgstr ""

#. type: cindex
#: processes.texi.orig:2698
#, no-wrap
msgid "packing"
msgstr ""

#. type: cindex
#: processes.texi.orig:2699
#, no-wrap
msgid "unpacking"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2703
msgid "Conversion from byte arrays to nested alists is also known as @dfn{deserializing} or @dfn{unpacking}, while going in the opposite direction is also known as @dfn{serializing} or @dfn{packing}."
msgstr ""

#. type: node
#: processes.texi.orig:2708 processes.texi.orig:2710
#, no-wrap
msgid "Bindat Spec"
msgstr ""

#. type: menuentry
#: processes.texi.orig:2708
msgid "Describing data layout."
msgstr ""

#. type: node
#: processes.texi.orig:2708 processes.texi.orig:2883
#, no-wrap
msgid "Bindat Functions"
msgstr ""

#. type: menuentry
#: processes.texi.orig:2708
msgid "Doing the unpacking and packing."
msgstr ""

#. type: node
#: processes.texi.orig:2708 processes.texi.orig:2951
#, no-wrap
msgid "Bindat Examples"
msgstr ""

#. type: menuentry
#: processes.texi.orig:2708
msgid "Samples of what bindat.el can do for you!"
msgstr ""

#. type: subsection
#: processes.texi.orig:2711
#, no-wrap
msgid "Describing Data Layout"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2719
msgid "To control unpacking and packing, you write a @dfn{data layout specification}, a special nested list describing named and typed @dfn{fields}.  This specification controls the length of each field to be processed, and how to pack or unpack it.  We normally keep bindat specs in variables whose names end in @samp{-bindat-spec}; that kind of name is automatically recognized as ``risky''."
msgstr ""

#. type: cindex
#: processes.texi.orig:2720
#, no-wrap
msgid "endianness"
msgstr ""

#. type: cindex
#: processes.texi.orig:2721
#, no-wrap
msgid "big endian"
msgstr ""

#. type: cindex
#: processes.texi.orig:2722
#, no-wrap
msgid "little endian"
msgstr ""

#. type: cindex
#: processes.texi.orig:2723
#, no-wrap
msgid "network byte ordering"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2732
msgid "A field's @dfn{type} describes the size (in bytes) of the object that the field represents and, in the case of multibyte fields, how the bytes are ordered within the field.  The two possible orderings are ``big endian'' (also known as ``network byte ordering'') and ``little endian''.  For instance, the number @code{#x23cd} (decimal 9165) in big endian would be the two bytes @code{#x23} @code{#xcd}; and in little endian, @code{#xcd} @code{#x23}.  Here are the possible type values:"
msgstr ""

#. type: item
#: processes.texi.orig:2734
#, no-wrap
msgid "u8"
msgstr ""

#. type: itemx
#: processes.texi.orig:2735
#, no-wrap
msgid "byte"
msgstr ""

#. type: table
#: processes.texi.orig:2737
msgid "Unsigned byte, with length 1."
msgstr ""

#. type: item
#: processes.texi.orig:2738
#, no-wrap
msgid "u16"
msgstr ""

#. type: itemx
#: processes.texi.orig:2739
#, no-wrap
msgid "word"
msgstr ""

#. type: itemx
#: processes.texi.orig:2740
#, no-wrap
msgid "short"
msgstr ""

#. type: table
#: processes.texi.orig:2742
msgid "Unsigned integer in network byte order, with length 2."
msgstr ""

#. type: item
#: processes.texi.orig:2743
#, no-wrap
msgid "u24"
msgstr ""

#. type: table
#: processes.texi.orig:2745
msgid "Unsigned integer in network byte order, with length 3."
msgstr ""

#. type: item
#: processes.texi.orig:2746
#, no-wrap
msgid "u32"
msgstr ""

#. type: itemx
#: processes.texi.orig:2747
#, no-wrap
msgid "dword"
msgstr ""

#. type: itemx
#: processes.texi.orig:2748
#, no-wrap
msgid "long"
msgstr ""

#. type: table
#: processes.texi.orig:2751
msgid "Unsigned integer in network byte order, with length 4.  Note: These values may be limited by Emacs's integer implementation limits."
msgstr ""

#. type: item
#: processes.texi.orig:2752
#, no-wrap
msgid "u16r"
msgstr ""

#. type: itemx
#: processes.texi.orig:2753
#, no-wrap
msgid "u24r"
msgstr ""

#. type: itemx
#: processes.texi.orig:2754
#, no-wrap
msgid "u32r"
msgstr ""

#. type: table
#: processes.texi.orig:2756
msgid "Unsigned integer in little endian order, with length 2, 3 and 4, respectively."
msgstr ""

#. type: item
#: processes.texi.orig:2757
#, no-wrap
msgid "str @var{len}"
msgstr ""

#. type: table
#: processes.texi.orig:2759
msgid "String of length @var{len}."
msgstr ""

#. type: item
#: processes.texi.orig:2760
#, no-wrap
msgid "strz @var{len}"
msgstr ""

#. type: table
#: processes.texi.orig:2762
msgid "Zero-terminated string, in a fixed-size field with length @var{len}."
msgstr ""

#. type: item
#: processes.texi.orig:2763
#, no-wrap
msgid "vec @var{len} [@var{type}]"
msgstr ""

#. type: table
#: processes.texi.orig:2767
msgid "Vector of @var{len} elements of type @var{type}, defaulting to bytes.  The @var{type} is any of the simple types above, or another vector specified as a list of the form @code{(vec @var{len} [@var{type}])}."
msgstr ""

#. type: item
#: processes.texi.orig:2768
#, no-wrap
msgid "ip"
msgstr ""

#. type: table
#: processes.texi.orig:2772
msgid "Four-byte vector representing an Internet address.  For example: @code{[127 0 0 1]} for localhost."
msgstr ""

#. type: item
#: processes.texi.orig:2773
#, no-wrap
msgid "bits @var{len}"
msgstr ""

#. type: table
#: processes.texi.orig:2779
msgid "List of set bits in @var{len} bytes.  The bytes are taken in big endian order and the bits are numbered starting with @code{8 * @var{len} @minus{} 1} and ending with zero.  For example: @code{bits 2} unpacks @code{#x28} @code{#x1c} to @code{(2 3 4 11 13)} and @code{#x1c} @code{#x28} to @code{(3 5 10 11 12)}."
msgstr ""

#. type: item
#: processes.texi.orig:2780
#, no-wrap
msgid "(eval @var{form})"
msgstr ""

#. type: table
#: processes.texi.orig:2784
msgid "@var{form} is a Lisp expression evaluated at the moment the field is unpacked or packed.  The result of the evaluation should be one of the above-listed type specifications."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2788
msgid "For a fixed-size field, the length @var{len} is given as an integer specifying the number of bytes in the field."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2795
msgid "When the length of a field is not fixed, it typically depends on the value of a preceding field.  In this case, the length @var{len} can be given either as a list @code{(@var{name} ...)} identifying a @dfn{field name} in the format specified for @code{bindat-get-field} below, or by an expression @code{(eval @var{form})} where @var{form} should evaluate to an integer, specifying the field length."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2802
msgid "A field specification generally has the form @code{([@var{name}] @var{handler})}, where @var{name} is optional.  Don't use names that are symbols meaningful as type specifications (above) or handler specifications (below), since that would be ambiguous.  @var{name} can be a symbol or an expression @code{(eval @var{form})}, in which case @var{form} should evaluate to a symbol."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2805
msgid "@var{handler} describes how to unpack or pack the field and can be one of the following:"
msgstr ""

#. type: var{#1}
#: processes.texi.orig:2807
#, no-wrap
msgid "type"
msgstr ""

#. type: table
#: processes.texi.orig:2809
msgid "Unpack/pack this field according to the type specification @var{type}."
msgstr ""

#. type: item
#: processes.texi.orig:2810
#, no-wrap
msgid "eval @var{form}"
msgstr ""

#. type: table
#: processes.texi.orig:2813
msgid "Evaluate @var{form}, a Lisp expression, for side-effect only.  If the field name is specified, the value is bound to that field name."
msgstr ""

#. type: item
#: processes.texi.orig:2814
#, no-wrap
msgid "fill @var{len}"
msgstr ""

#. type: table
#: processes.texi.orig:2818
msgid "Skip @var{len} bytes.  In packing, this leaves them unchanged, which normally means they remain zero.  In unpacking, this means they are ignored."
msgstr ""

#. type: item
#: processes.texi.orig:2819
#, no-wrap
msgid "align @var{len}"
msgstr ""

#. type: table
#: processes.texi.orig:2821
msgid "Skip to the next multiple of @var{len} bytes."
msgstr ""

#. type: item
#: processes.texi.orig:2822
#, no-wrap
msgid "struct @var{spec-name}"
msgstr ""

#. type: table
#: processes.texi.orig:2825
msgid "Process @var{spec-name} as a sub-specification.  This describes a structure nested within another structure."
msgstr ""

#. type: item
#: processes.texi.orig:2826
#, no-wrap
msgid "union @var{form} (@var{tag} @var{spec})@dots{}"
msgstr ""

#. type: table
#: processes.texi.orig:2832
msgid "Evaluate @var{form}, a Lisp expression, find the first @var{tag} that matches it, and process its associated data layout specification @var{spec}.  Matching can occur in one of three ways:"
msgstr ""

#. type: itemize
#: processes.texi.orig:2838
msgid "If a @var{tag} has the form @code{(eval @var{expr})}, evaluate @var{expr} with the variable @code{tag} dynamically bound to the value of @var{form}.  A non-@code{nil} result indicates a match."
msgstr ""

#. type: itemize
#: processes.texi.orig:2841
msgid "@var{tag} matches if it is @code{equal} to the value of @var{form}."
msgstr ""

#. type: itemize
#: processes.texi.orig:2844
msgid "@var{tag} matches unconditionally if it is @code{t}."
msgstr ""

#. type: item
#: processes.texi.orig:2846
#, no-wrap
msgid "repeat @var{count} @var{field-specs}@dots{}"
msgstr ""

#. type: table
#: processes.texi.orig:2853
msgid "Process the @var{field-specs} recursively, in order, then repeat starting from the first one, processing all the specifications @var{count} times overall.  The @var{count} is given using the same formats as a field length---if an @code{eval} form is used, it is evaluated just once.  For correct operation, each specification in @var{field-specs} must include a name."
msgstr ""

#. type: Plain text
#: processes.texi.orig:2858
msgid "For the @code{(eval @var{form})} forms used in a bindat specification, the @var{form} can access and update these dynamically bound variables during evaluation:"
msgstr ""

#. type: item
#: processes.texi.orig:2860
#, no-wrap
msgid "last"
msgstr ""

#. type: table
#: processes.texi.orig:2862
msgid "Value of the last field processed."
msgstr ""

#. type: item
#: processes.texi.orig:2863
#, no-wrap
msgid "bindat-raw"
msgstr ""

#. type: table
#: processes.texi.orig:2865
msgid "The data as a byte array."
msgstr ""

#. type: item
#: processes.texi.orig:2866
#, no-wrap
msgid "bindat-idx"
msgstr ""

#. type: table
#: processes.texi.orig:2868
msgid "Current index (within @code{bindat-raw}) for unpacking or packing."
msgstr ""

#. type: item
#: processes.texi.orig:2869
#, no-wrap
msgid "struct"
msgstr ""

#. type: table
#: processes.texi.orig:2873
msgid "The alist containing the structured data that have been unpacked so far, or the entire structure being packed.  You can use @code{bindat-get-field} to access specific fields of this structure."
msgstr ""

#. type: item
#: processes.texi.orig:2874
#, no-wrap
msgid "count"
msgstr ""

#. type: itemx
#: processes.texi.orig:2875
#, no-wrap
msgid "index"
msgstr ""

#. type: table
#: processes.texi.orig:2881
msgid "Inside a @code{repeat} block, these contain the maximum number of repetitions (as specified by the @var{count} parameter), and the current repetition number (counting from 0).  Setting @code{count} to zero will terminate the inner-most repeat block after the current repetition has completed."
msgstr ""

#. type: subsection
#: processes.texi.orig:2884
#, no-wrap
msgid "Functions to Unpack and Pack Bytes"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2889
msgid "In the following documentation, @var{spec} refers to a data layout specification, @code{bindat-raw} to a byte array, and @var{struct} to an alist representing unpacked field data."
msgstr ""

#. type: defun
#: processes.texi.orig:2890
#, no-wrap
msgid "bindat-unpack spec bindat-raw &optional bindat-idx"
msgstr ""

#. type: defun
#: processes.texi.orig:2897
msgid "This function unpacks data from the unibyte string or byte array @code{bindat-raw} according to @var{spec}.  Normally, this starts unpacking at the beginning of the byte array, but if @var{bindat-idx} is non-@code{nil}, it specifies a zero-based starting position to use instead."
msgstr ""

#. type: defun
#: processes.texi.orig:2900
msgid "The value is an alist or nested alist in which each element describes one unpacked field."
msgstr ""

#. type: defun
#: processes.texi.orig:2902
#, no-wrap
msgid "bindat-get-field struct &rest name"
msgstr ""

#. type: defun
#: processes.texi.orig:2909
msgid "This function selects a field's data from the nested alist @var{struct}.  Usually @var{struct} was returned by @code{bindat-unpack}.  If @var{name} corresponds to just one argument, that means to extract a top-level field value.  Multiple @var{name} arguments specify repeated lookup of sub-structures.  An integer name acts as an array index."
msgstr ""

#. type: defun
#: processes.texi.orig:2913
msgid "For example, if @var{name} is @code{(a b 2 c)}, that means to find field @code{c} in the third element of subfield @code{b} of field @code{a}.  (This corresponds to @code{struct.a.b[2].c} in C.)"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2922
msgid "Although packing and unpacking operations change the organization of data (in memory), they preserve the data's @dfn{total length}, which is the sum of all the fields' lengths, in bytes.  This value is not generally inherent in either the specification or alist alone; instead, both pieces of information contribute to its calculation.  Likewise, the length of a string or array being unpacked may be longer than the data's total length as described by the specification."
msgstr ""

#. type: defun
#: processes.texi.orig:2923
#, no-wrap
msgid "bindat-length spec struct"
msgstr ""

#. type: defun
#: processes.texi.orig:2926
msgid "This function returns the total length of the data in @var{struct}, according to @var{spec}."
msgstr ""

#. type: defun
#: processes.texi.orig:2928
#, no-wrap
msgid "bindat-pack spec struct &optional bindat-raw bindat-idx"
msgstr ""

#. type: defun
#: processes.texi.orig:2935
msgid "This function returns a byte array packed according to @var{spec} from the data in the alist @var{struct}.  It normally creates and fills a new byte array starting at the beginning.  However, if @var{bindat-raw} is non-@code{nil}, it specifies a pre-allocated unibyte string or vector to pack into.  If @var{bindat-idx} is non-@code{nil}, it specifies the starting offset for packing into @code{bindat-raw}."
msgstr ""

#. type: defun
#: processes.texi.orig:2938
msgid "When pre-allocating, you should make sure @code{(length @var{bindat-raw})} meets or exceeds the total length to avoid an out-of-range error."
msgstr ""

#. type: defun
#: processes.texi.orig:2940
#, no-wrap
msgid "bindat-ip-to-string ip"
msgstr ""

#. type: defun
#: processes.texi.orig:2944
msgid "Convert the Internet address vector @var{ip} to a string in the usual dotted notation."
msgstr ""

#. type: example
#: processes.texi.orig:2948
#, no-wrap
msgid ""
"(bindat-ip-to-string [127 0 0 1])\n"
"     @result{} \"127.0.0.1\"\n"
msgstr ""

#. type: subsection
#: processes.texi.orig:2952
#, no-wrap
msgid "Examples of Byte Unpacking and Packing"
msgstr ""

#. type: Plain text
#: processes.texi.orig:2959
msgid "Here is a complete example of byte unpacking and packing:"
msgstr ""

#. type: lisp
#: processes.texi.orig:2962
#, no-wrap
msgid ""
"(require 'bindat)\n"
"\n"
msgstr ""

#. type: lisp
#: processes.texi.orig:2973
#, no-wrap
msgid ""
"(defvar fcookie-index-spec\n"
"  '((:version  u32)\n"
"    (:count    u32)\n"
"    (:longest  u32)\n"
"    (:shortest u32)\n"
"    (:flags    u32)\n"
"    (:delim    u8)\n"
"    (:ignored  fill 3)\n"
"    (:offset   repeat (:count) (:foo u32)))\n"
"  \"Description of a fortune cookie index file's contents.\")\n"
"\n"
msgstr ""

#. type: lisp
#: processes.texi.orig:2998
#, no-wrap
msgid ""
"(defun fcookie (cookies &optional index)\n"
"  \"Display a random fortune cookie from file COOKIES.\n"
"Optional second arg INDEX specifies the associated index\n"
"filename, by default \\\"COOKIES.dat\\\".  Display cookie text\n"
"in buffer \\\"*Fortune Cookie: BASENAME*\\\", where BASENAME\n"
"is COOKIES without the directory part.\"\n"
"  (interactive \"fCookies file: \")\n"
"  (let* ((info (with-temp-buffer\n"
"                 (insert-file-contents-literally\n"
"                  (or index (concat cookies \".dat\")))\n"
"                 (bindat-unpack fcookie-index-spec\n"
"                                (buffer-string))))\n"
"         (sel (random (bindat-get-field info :count)))\n"
"         (beg (cdar (bindat-get-field info :offset sel)))\n"
"         (end (or (cdar (bindat-get-field info\n"
"                                          :offset (1+ sel)))\n"
"                  (nth 7 (file-attributes cookies)))))\n"
"    (switch-to-buffer\n"
"     (get-buffer-create\n"
"      (format \"*Fortune Cookie: %s*\"\n"
"              (file-name-nondirectory cookies))))\n"
"    (erase-buffer)\n"
"    (insert-file-contents-literally\n"
"     cookies nil beg (- end 3))))\n"
"\n"
msgstr ""

#. type: lisp
#: processes.texi.orig:3038
#, no-wrap
msgid ""
"(defun fcookie-create-index (cookies &optional index delim)\n"
"  \"Scan file COOKIES, and write out its index file.\n"
"Optional arg INDEX specifies the index filename, which by\n"
"default is \\\"COOKIES.dat\\\".  Optional arg DELIM specifies the\n"
"unibyte character that, when found on a line of its own in\n"
"COOKIES, indicates the border between entries.\"\n"
"  (interactive \"fCookies file: \")\n"
"  (setq delim (or delim ?%))\n"
"  (let ((delim-line (format \"\\n%c\\n\" delim))\n"
"        (count 0)\n"
"        (max 0)\n"
"        min p q len offsets)\n"
"    (unless (= 3 (string-bytes delim-line))\n"
"      (error \"Delimiter cannot be represented in one byte\"))\n"
"    (with-temp-buffer\n"
"      (insert-file-contents-literally cookies)\n"
"      (while (and (setq p (point))\n"
"                  (search-forward delim-line (point-max) t)\n"
"                  (setq len (- (point) 3 p)))\n"
"        (setq count (1+ count)\n"
"              max (max max len)\n"
"              min (min (or min max) len)\n"
"              offsets (cons (1- p) offsets))))\n"
"    (with-temp-buffer\n"
"      (set-buffer-multibyte nil)\n"
"      (insert\n"
"       (bindat-pack\n"
"        fcookie-index-spec\n"
"        `((:version . 2)\n"
"          (:count . ,count)\n"
"          (:longest . ,max)\n"
"          (:shortest . ,min)\n"
"          (:flags . 0)\n"
"          (:delim . ,delim)\n"
"          (:offset . ,(mapcar (lambda (o)\n"
"                                (list (cons :foo o)))\n"
"                              (nreverse offsets))))))\n"
"      (let ((coding-system-for-write 'raw-text-unix))\n"
"        (write-file (or index (concat cookies \".dat\")))))))\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:3042
msgid "The following is an example of defining and unpacking a complex structure.  Consider the following C structures:"
msgstr ""

#. type: example
#: processes.texi.orig:3050
#, no-wrap
msgid ""
"struct header @{\n"
"    unsigned long    dest_ip;\n"
"    unsigned long    src_ip;\n"
"    unsigned short   dest_port;\n"
"    unsigned short   src_port;\n"
"@};\n"
"\n"
msgstr ""

#. type: example
#: processes.texi.orig:3058
#, no-wrap
msgid ""
"struct data @{\n"
"    unsigned char    type;\n"
"    unsigned char    opcode;\n"
"    unsigned short   length;  /* in network byte order  */\n"
"    unsigned char    id[8];   /* null-terminated string  */\n"
"    unsigned char    data[/* (length + 3) & ~3 */];\n"
"@};\n"
"\n"
msgstr ""

#. type: example
#: processes.texi.orig:3065
#, no-wrap
msgid ""
"struct packet @{\n"
"    struct header    header;\n"
"    unsigned long    counters[2];  /* in little endian order  */\n"
"    unsigned char    items;\n"
"    unsigned char    filler[3];\n"
"    struct data      item[/* items */];\n"
"\n"
msgstr ""

#. type: example
#: processes.texi.orig:3067
#, no-wrap
msgid "@};\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:3070
msgid "The corresponding data layout specification is:"
msgstr ""

#. type: lisp
#: processes.texi.orig:3077
#, no-wrap
msgid ""
"(setq header-spec\n"
"      '((dest-ip   ip)\n"
"        (src-ip    ip)\n"
"        (dest-port u16)\n"
"        (src-port  u16)))\n"
"\n"
msgstr ""

#. type: lisp
#: processes.texi.orig:3085
#, no-wrap
msgid ""
"(setq data-spec\n"
"      '((type      u8)\n"
"        (opcode    u8)\n"
"        (length    u16)  ; network byte order\n"
"        (id        strz 8)\n"
"        (data      vec (length))\n"
"        (align     4)))\n"
"\n"
msgstr ""

#. type: lisp
#: processes.texi.orig:3093
#, no-wrap
msgid ""
"(setq packet-spec\n"
"      '((header    struct header-spec)\n"
"        (counters  vec 2 u32r)   ; little endian order\n"
"        (items     u8)\n"
"        (fill      3)\n"
"        (item      repeat (items)\n"
"                   (struct data-spec))))\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:3096
msgid "A binary data representation is:"
msgstr ""

#. type: lisp
#: processes.texi.orig:3103
#, no-wrap
msgid ""
"(setq binary-data\n"
"      [ 192 168 1 100 192 168 1 101 01 28 21 32\n"
"        160 134 1 0 5 1 0 0 2 0 0 0\n"
"        2 3 0 5 ?A ?B ?C ?D ?E ?F 0 0 1 2 3 4 5 0 0 0\n"
"        1 4 0 7 ?B ?C ?D ?E ?F ?G 0 0 6 7 8 9 10 11 12 0 ])\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:3106
msgid "The corresponding decoded structure is:"
msgstr ""

#. type: lisp
#: processes.texi.orig:3127
#, no-wrap
msgid ""
"(setq decoded (bindat-unpack packet-spec binary-data))\n"
"     @result{}\n"
"((header\n"
"  (dest-ip   . [192 168 1 100])\n"
"  (src-ip    . [192 168 1 101])\n"
"  (dest-port . 284)\n"
"  (src-port  . 5408))\n"
" (counters . [100000 261])\n"
" (items . 2)\n"
" (item ((data . [1 2 3 4 5])\n"
"        (id . \"ABCDEF\")\n"
"        (length . 5)\n"
"        (opcode . 3)\n"
"        (type . 2))\n"
"       ((data . [6 7 8 9 10 11 12])\n"
"        (id . \"BCDEFG\")\n"
"        (length . 7)\n"
"        (opcode . 4)\n"
"        (type . 1))))\n"
msgstr ""

#. type: Plain text
#: processes.texi.orig:3130
msgid "An example of fetching data from this structure:"
msgstr ""

#. type: lisp
#: processes.texi.orig:3134
#, no-wrap
msgid ""
"(bindat-get-field decoded 'item 1 'id)\n"
"     @result{} \"BCDEFG\"\n"
msgstr ""
