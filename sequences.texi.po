# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-26 13:30+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: sequences.texi.orig:6
#, no-wrap
msgid "Sequences Arrays Vectors"
msgstr ""

#. type: chapter
#: sequences.texi.orig:7
#, no-wrap
msgid "Sequences, Arrays, and Vectors"
msgstr ""

#. type: cindex
#: sequences.texi.orig:8
#, no-wrap
msgid "sequence"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:14
msgid ""
"The @dfn{sequence} type is the union of two other Lisp types: lists and "
"arrays.  In other words, any list is a sequence, and any array is a "
"sequence.  The common property that all sequences have is that each is an "
"ordered collection of elements."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:18
msgid ""
"An @dfn{array} is a fixed-length object with a slot for each of its "
"elements.  All the elements are accessible in constant time.  The four types "
"of arrays are strings, vectors, char-tables and bool-vectors."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:24
msgid ""
"A list is a sequence of elements, but it is not a single primitive object; "
"it is made of cons cells, one cell per element.  Finding the @var{n}th "
"element requires looking through @var{n} cons cells, so elements farther "
"from the beginning of the list take longer to access.  But it is possible to "
"add elements to the list, or remove elements."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:26
msgid "The following diagram shows the relationship between these types:"
msgstr ""

#. type: group
#: sequences.texi.orig:45
#, no-wrap
msgid ""
"          _____________________________________________\n"
"         |                                             |\n"
"         |          Sequence                           |\n"
"         |  ______   ________________________________  |\n"
"         | |      | |                                | |\n"
"         | | List | |             Array              | |\n"
"         | |      | |    ________       ________     | |\n"
"         | |______| |   |        |     |        |    | |\n"
"         |          |   | Vector |     | String |    | |\n"
"         |          |   |________|     |________|    | |\n"
"         |          |  ____________   _____________  | |\n"
"         |          | |            | |             | | |\n"
"         |          | | Char-table | | Bool-vector | | |\n"
"         |          | |____________| |_____________| | |\n"
"         |          |________________________________| |\n"
"         |_____________________________________________|\n"
msgstr ""

#. type: node
#: sequences.texi.orig:57 sequences.texi.orig:59
#, no-wrap
msgid "Sequence Functions"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "Functions that accept any kind of sequence."
msgstr ""

#. type: section
#: sequences.texi.orig:57 sequences.texi.orig:220 sequences.texi.orig:221
#, no-wrap
msgid "Arrays"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "Characteristics of arrays in Emacs Lisp."
msgstr ""

#. type: node
#: sequences.texi.orig:57 sequences.texi.orig:288
#, no-wrap
msgid "Array Functions"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "Functions specifically for arrays."
msgstr ""

#. type: section
#: sequences.texi.orig:57 sequences.texi.orig:388 sequences.texi.orig:389
#, no-wrap
msgid "Vectors"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "Special characteristics of Emacs Lisp vectors."
msgstr ""

#. type: node
#: sequences.texi.orig:57 sequences.texi.orig:426
#, no-wrap
msgid "Vector Functions"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "Functions specifically for vectors."
msgstr ""

#. type: section
#: sequences.texi.orig:57 sequences.texi.orig:516 sequences.texi.orig:517
#, no-wrap
msgid "Char-Tables"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "How to work with char-tables."
msgstr ""

#. type: node
#: sequences.texi.orig:57 sequences.texi.orig:691
#, no-wrap
msgid "Bool-Vectors"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "How to work with bool-vectors."
msgstr ""

#. type: node
#: sequences.texi.orig:57 sequences.texi.orig:783
#, no-wrap
msgid "Rings"
msgstr ""

#. type: menuentry
#: sequences.texi.orig:57
msgid "Managing a fixed-size ring of objects."
msgstr ""

#. type: section
#: sequences.texi.orig:60
#, no-wrap
msgid "Sequences"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:63
msgid "This section describes functions that accept any kind of sequence."
msgstr ""

#. type: defun
#: sequences.texi.orig:64
#, no-wrap
msgid "sequencep object"
msgstr ""

#. type: defun
#: sequences.texi.orig:67
msgid ""
"This function returns @code{t} if @var{object} is a list, vector, string, "
"bool-vector, or char-table, @code{nil} otherwise."
msgstr ""

#. type: defun
#: sequences.texi.orig:69
#, no-wrap
msgid "length sequence"
msgstr ""

#. type: cindex
#: sequences.texi.orig:70
#, no-wrap
msgid "string length"
msgstr ""

#. type: cindex
#: sequences.texi.orig:71
#, no-wrap
msgid "list length"
msgstr ""

#. type: cindex
#: sequences.texi.orig:72
#, no-wrap
msgid "vector length"
msgstr ""

#. type: cindex
#: sequences.texi.orig:73
#, no-wrap
msgid "sequence length"
msgstr ""

#. type: cindex
#: sequences.texi.orig:74
#, no-wrap
msgid "char-table length"
msgstr ""

#. type: defun
#: sequences.texi.orig:80
msgid ""
"This function returns the number of elements in @var{sequence}.  If "
"@var{sequence} is a dotted list, a @code{wrong-type-argument} error is "
"signaled.  Circular lists may cause an infinite loop.  For a char-table, the "
"value returned is always one more than the maximum Emacs character code."
msgstr ""

#. type: defun
#: sequences.texi.orig:82
msgid ""
"@xref{Definition of safe-length}, for the related function "
"@code{safe-length}."
msgstr ""

#. type: group
#: sequences.texi.orig:87
#, no-wrap
msgid ""
"(length '(1 2 3))\n"
"    @result{} 3\n"
msgstr ""

#. type: group
#: sequences.texi.orig:91
#, no-wrap
msgid ""
"(length ())\n"
"    @result{} 0\n"
msgstr ""

#. type: group
#: sequences.texi.orig:95
#, no-wrap
msgid ""
"(length \"foobar\")\n"
"    @result{} 6\n"
msgstr ""

#. type: group
#: sequences.texi.orig:99
#, no-wrap
msgid ""
"(length [1 2 3])\n"
"    @result{} 3\n"
msgstr ""

#. type: group
#: sequences.texi.orig:103
#, no-wrap
msgid ""
"(length (make-bool-vector 5 nil))\n"
"    @result{} 5\n"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:109
msgid "See also @code{string-bytes}, in @ref{Text Representations}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:114
msgid ""
"If you need to compute the width of a string on display, you should use "
"@code{string-width} (@pxref{Size of Displayed Text}), not @code{length}, "
"since @code{length} only counts the number of characters, but does not "
"account for the display width of each character."
msgstr ""

#. type: defun
#: sequences.texi.orig:115
#, no-wrap
msgid "elt sequence index"
msgstr ""

#. type: cindex
#: sequences.texi.orig:116
#, no-wrap
msgid "elements of sequences"
msgstr ""

#. type: defun
#: sequences.texi.orig:123
msgid ""
"This function returns the element of @var{sequence} indexed by @var{index}.  "
"Legitimate values of @var{index} are integers ranging from 0 up to one less "
"than the length of @var{sequence}.  If @var{sequence} is a list, "
"out-of-range values behave as for @code{nth}.  @xref{Definition of nth}.  "
"Otherwise, out-of-range values trigger an @code{args-out-of-range} error."
msgstr ""

#. type: group
#: sequences.texi.orig:128
#, no-wrap
msgid ""
"(elt [1 2 3 4] 2)\n"
"     @result{} 3\n"
msgstr ""

#. type: group
#: sequences.texi.orig:132
#, no-wrap
msgid ""
"(elt '(1 2 3 4) 2)\n"
"     @result{} 3\n"
msgstr ""

#. type: group
#: sequences.texi.orig:137
#, no-wrap
msgid ""
";; @r{We use @code{string} to show clearly which character @code{elt} "
"returns.}\n"
"(string (elt \"1234\" 2))\n"
"     @result{} \"3\"\n"
msgstr ""

#. type: group
#: sequences.texi.orig:141
#, no-wrap
msgid ""
"(elt [1 2 3 4] 4)\n"
"     @error{} Args out of range: [1 2 3 4], 4\n"
msgstr ""

#. type: group
#: sequences.texi.orig:145
#, no-wrap
msgid ""
"(elt [1 2 3 4] -1)\n"
"     @error{} Args out of range: [1 2 3 4], -1\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:150
msgid ""
"This function generalizes @code{aref} (@pxref{Array Functions}) and "
"@code{nth} (@pxref{Definition of nth})."
msgstr ""

#. type: defun
#: sequences.texi.orig:152
#, no-wrap
msgid "copy-sequence sequence"
msgstr ""

#. type: cindex
#: sequences.texi.orig:153
#, no-wrap
msgid "copying sequences"
msgstr ""

#. type: defun
#: sequences.texi.orig:157
msgid ""
"This function returns a copy of @var{sequence}.  The copy is the same type "
"of object as the original sequence, and it has the same elements in the same "
"order."
msgstr ""

#. type: defun
#: sequences.texi.orig:164
msgid ""
"Storing a new element into the copy does not affect the original "
"@var{sequence}, and vice versa.  However, the elements of the new sequence "
"are not copies; they are identical (@code{eq}) to the elements of the "
"original.  Therefore, changes made within these elements, as found via the "
"copied sequence, are also visible in the original sequence."
msgstr ""

#. type: defun
#: sequences.texi.orig:169
msgid ""
"If the sequence is a string with text properties, the property list in the "
"copy is itself a copy, not shared with the original's property list.  "
"However, the actual values of the properties are shared.  @xref{Text "
"Properties}."
msgstr ""

#. type: defun
#: sequences.texi.orig:172
msgid ""
"This function does not work for dotted lists.  Trying to copy a circular "
"list may cause an infinite loop."
msgstr ""

#. type: defun
#: sequences.texi.orig:176
msgid ""
"See also @code{append} in @ref{Building Lists}, @code{concat} in "
"@ref{Creating Strings}, and @code{vconcat} in @ref{Vector Functions}, for "
"other ways to copy sequences."
msgstr ""

#. type: group
#: sequences.texi.orig:181
#, no-wrap
msgid ""
"(setq bar '(1 2))\n"
"     @result{} (1 2)\n"
msgstr ""

#. type: group
#: sequences.texi.orig:185
#, no-wrap
msgid ""
"(setq x (vector 'foo bar))\n"
"     @result{} [foo (1 2)]\n"
msgstr ""

#. type: group
#: sequences.texi.orig:189
#, no-wrap
msgid ""
"(setq y (copy-sequence x))\n"
"     @result{} [foo (1 2)]\n"
msgstr ""

#. type: group
#: sequences.texi.orig:194
#, no-wrap
msgid ""
"(eq x y)\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: sequences.texi.orig:198
#, no-wrap
msgid ""
"(equal x y)\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: sequences.texi.orig:202
#, no-wrap
msgid ""
"(eq (elt x 1) (elt y 1))\n"
"     @result{} t\n"
msgstr ""

#. type: group
#: sequences.texi.orig:209
#, no-wrap
msgid ""
";; @r{Replacing an element of one sequence.}\n"
"(aset x 0 'quux)\n"
"x @result{} [quux (1 2)]\n"
"y @result{} [foo (1 2)]\n"
msgstr ""

#. type: group
#: sequences.texi.orig:216
#, no-wrap
msgid ""
";; @r{Modifying the inside of a shared element.}\n"
"(setcar (aref x 1) 69)\n"
"x @result{} [quux (69 2)]\n"
"y @result{} [foo (69 2)]\n"
msgstr ""

#. type: cindex
#: sequences.texi.orig:222
#, no-wrap
msgid "array"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:229
msgid ""
"An @dfn{array} object has slots that hold a number of other Lisp objects, "
"called the elements of the array.  Any element of an array may be accessed "
"in constant time.  In contrast, the time to access an element of a list is "
"proportional to the position of that element in the list."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:236
msgid ""
"Emacs defines four types of array, all one-dimensional: @dfn{strings} "
"(@pxref{String Type}), @dfn{vectors} (@pxref{Vector Type}), "
"@dfn{bool-vectors} (@pxref{Bool-Vector Type}), and @dfn{char-tables} "
"(@pxref{Char-Table Type}).  Vectors and char-tables can hold elements of any "
"type, but strings can only hold characters, and bool-vectors can only hold "
"@code{t} and @code{nil}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:238
msgid "All four kinds of array share these characteristics:"
msgstr ""

#. type: itemize
#: sequences.texi.orig:244
msgid ""
"The first element of an array has index zero, the second element has index "
"1, and so on.  This is called @dfn{zero-origin} indexing.  For example, an "
"array of four elements has indices 0, 1, 2, @w{and 3}."
msgstr ""

#. type: itemize
#: sequences.texi.orig:248
msgid ""
"The length of the array is fixed once you create it; you cannot change the "
"length of an existing array."
msgstr ""

#. type: itemize
#: sequences.texi.orig:252
msgid ""
"For purposes of evaluation, the array is a constant---i.e., it evaluates to "
"itself."
msgstr ""

#. type: itemize
#: sequences.texi.orig:256
msgid ""
"The elements of an array may be referenced or changed with the functions "
"@code{aref} and @code{aset}, respectively (@pxref{Array Functions})."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:261
msgid ""
"When you create an array, other than a char-table, you must specify its "
"length.  You cannot specify the length of a char-table, because that is "
"determined by the range of character codes."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:265
msgid ""
"In principle, if you want an array of text characters, you could use either "
"a string or a vector.  In practice, we always choose strings for such "
"applications, for four reasons:"
msgstr ""

#. type: itemize
#: sequences.texi.orig:269
msgid "They occupy one-fourth the space of a vector of the same elements."
msgstr ""

#. type: itemize
#: sequences.texi.orig:273
msgid "Strings are printed in a way that shows the contents more clearly as text."
msgstr ""

#. type: itemize
#: sequences.texi.orig:276
msgid "Strings can hold text properties.  @xref{Text Properties}."
msgstr ""

#. type: itemize
#: sequences.texi.orig:281
msgid ""
"Many of the specialized editing and I/O facilities of Emacs accept only "
"strings.  For example, you cannot insert a vector of characters into a "
"buffer the way you can insert a string.  @xref{Strings and Characters}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:287
msgid ""
"By contrast, for an array of keyboard input characters (such as a key "
"sequence), a vector may be necessary, because many keyboard input characters "
"are outside the range that will fit in a string.  @xref{Key Sequence Input}."
msgstr ""

#. type: section
#: sequences.texi.orig:289
#, no-wrap
msgid "Functions that Operate on Arrays"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:293
msgid "In this section, we describe the functions that accept all types of arrays."
msgstr ""

#. type: defun
#: sequences.texi.orig:294
#, no-wrap
msgid "arrayp object"
msgstr ""

#. type: defun
#: sequences.texi.orig:297
msgid ""
"This function returns @code{t} if @var{object} is an array (i.e., a vector, "
"a string, a bool-vector or a char-table)."
msgstr ""

#. type: group
#: sequences.texi.orig:306
#, no-wrap
msgid ""
"(arrayp [a])\n"
"     @result{} t\n"
"(arrayp \"asdf\")\n"
"     @result{} t\n"
"(arrayp (syntax-table))    ;; @r{A char-table.}\n"
"     @result{} t\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:310
#, no-wrap
msgid "aref array index"
msgstr ""

#. type: cindex
#: sequences.texi.orig:311
#, no-wrap
msgid "array elements"
msgstr ""

#. type: defun
#: sequences.texi.orig:314
msgid ""
"This function returns the @var{index}th element of @var{array}.  The first "
"element is at index zero."
msgstr ""

#. type: group
#: sequences.texi.orig:321
#, no-wrap
msgid ""
"(setq primes [2 3 5 7 11 13])\n"
"     @result{} [2 3 5 7 11 13]\n"
"(aref primes 4)\n"
"     @result{} 11\n"
msgstr ""

#. type: group
#: sequences.texi.orig:325
#, no-wrap
msgid ""
"(aref \"abcdefg\" 1)\n"
"     @result{} 98           ; @r{@samp{b} is @acronym{ASCII} code 98.}\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:329
msgid "See also the function @code{elt}, in @ref{Sequence Functions}."
msgstr ""

#. type: defun
#: sequences.texi.orig:331
#, no-wrap
msgid "aset array index object"
msgstr ""

#. type: defun
#: sequences.texi.orig:334
msgid ""
"This function sets the @var{index}th element of @var{array} to be "
"@var{object}.  It returns @var{object}."
msgstr ""

#. type: group
#: sequences.texi.orig:343
#, no-wrap
msgid ""
"(setq w [foo bar baz])\n"
"     @result{} [foo bar baz]\n"
"(aset w 0 'fu)\n"
"     @result{} fu\n"
"w\n"
"     @result{} [fu bar baz]\n"
msgstr ""

#. type: group
#: sequences.texi.orig:352
#, no-wrap
msgid ""
"(setq x \"asdfasfd\")\n"
"     @result{} \"asdfasfd\"\n"
"(aset x 3 ?Z)\n"
"     @result{} 90\n"
"x\n"
"     @result{} \"asdZasfd\"\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:358
msgid ""
"If @var{array} is a string and @var{object} is not a character, a "
"@code{wrong-type-argument} error results.  The function converts a unibyte "
"string to multibyte if necessary to insert a character."
msgstr ""

#. type: defun
#: sequences.texi.orig:360
#, no-wrap
msgid "fillarray array object"
msgstr ""

#. type: defun
#: sequences.texi.orig:363
msgid ""
"This function fills the array @var{array} with @var{object}, so that each "
"element of @var{array} is @var{object}.  It returns @var{array}."
msgstr ""

#. type: group
#: sequences.texi.orig:372
#, no-wrap
msgid ""
"(setq a [a b c d e f g])\n"
"     @result{} [a b c d e f g]\n"
"(fillarray a 0)\n"
"     @result{} [0 0 0 0 0 0 0]\n"
"a\n"
"     @result{} [0 0 0 0 0 0 0]\n"
msgstr ""

#. type: group
#: sequences.texi.orig:378
#, no-wrap
msgid ""
"(setq s \"When in the course\")\n"
"     @result{} \"When in the course\"\n"
"(fillarray s ?-)\n"
"     @result{} \"------------------\"\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:383
msgid ""
"If @var{array} is a string and @var{object} is not a character, a "
"@code{wrong-type-argument} error results."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:387
msgid ""
"The general sequence functions @code{copy-sequence} and @code{length} are "
"often useful for objects known to be arrays.  @xref{Sequence Functions}."
msgstr ""

#. type: cindex
#: sequences.texi.orig:390
#, no-wrap
msgid "vector (type)"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:399
msgid ""
"A @dfn{vector} is a general-purpose array whose elements can be any Lisp "
"objects.  (By contrast, the elements of a string can only be characters.  "
"@xref{Strings and Characters}.)  Vectors are used in Emacs for many "
"purposes: as key sequences (@pxref{Key Sequences}), as symbol-lookup tables "
"(@pxref{Creating Symbols}), as part of the representation of a byte-compiled "
"function (@pxref{Byte Compilation}), and more."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:402
msgid ""
"Like other arrays, vectors use zero-origin indexing: the first element has "
"index 0."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:407
msgid ""
"Vectors are printed with square brackets surrounding the elements.  Thus, a "
"vector whose elements are the symbols @code{a}, @code{b} and @code{a} is "
"printed as @code{[a b a]}.  You can write vectors in the same way in Lisp "
"input."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:412
msgid ""
"A vector, like a string or a number, is considered a constant for "
"evaluation: the result of evaluating it is the same vector.  This does not "
"evaluate or even examine the elements of the vector.  @xref{Self-Evaluating "
"Forms}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:414
msgid "Here are examples illustrating these principles:"
msgstr ""

#. type: group
#: sequences.texi.orig:423
#, no-wrap
msgid ""
"(setq avector [1 two '(three) \"four\" [five]])\n"
"     @result{} [1 two (quote (three)) \"four\" [five]]\n"
"(eval avector)\n"
"     @result{} [1 two (quote (three)) \"four\" [five]]\n"
"(eq avector (eval avector))\n"
"     @result{} t\n"
msgstr ""

#. type: section
#: sequences.texi.orig:427
#, no-wrap
msgid "Functions for Vectors"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:430
msgid "Here are some functions that relate to vectors:"
msgstr ""

#. type: defun
#: sequences.texi.orig:431
#, no-wrap
msgid "vectorp object"
msgstr ""

#. type: defun
#: sequences.texi.orig:433
msgid "This function returns @code{t} if @var{object} is a vector."
msgstr ""

#. type: group
#: sequences.texi.orig:440
#, no-wrap
msgid ""
"(vectorp [a])\n"
"     @result{} t\n"
"(vectorp \"asdf\")\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:444
#, no-wrap
msgid "vector &rest objects"
msgstr ""

#. type: defun
#: sequences.texi.orig:447
msgid ""
"This function creates and returns a vector whose elements are the arguments, "
"@var{objects}."
msgstr ""

#. type: group
#: sequences.texi.orig:454
#, no-wrap
msgid ""
"(vector 'foo 23 [bar baz] \"rats\")\n"
"     @result{} [foo 23 [bar baz] \"rats\"]\n"
"(vector)\n"
"     @result{} []\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:458
#, no-wrap
msgid "make-vector length object"
msgstr ""

#. type: defun
#: sequences.texi.orig:461
msgid ""
"This function returns a new vector consisting of @var{length} elements, each "
"initialized to @var{object}."
msgstr ""

#. type: group
#: sequences.texi.orig:466
#, no-wrap
msgid ""
"(setq sleepy (make-vector 9 'Z))\n"
"     @result{} [Z Z Z Z Z Z Z Z Z]\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:470
#, no-wrap
msgid "vconcat &rest sequences"
msgstr ""

#. type: cindex
#: sequences.texi.orig:471
#, no-wrap
msgid "copying vectors"
msgstr ""

#. type: defun
#: sequences.texi.orig:476
msgid ""
"This function returns a new vector containing all the elements of "
"@var{sequences}.  The arguments @var{sequences} may be true lists, vectors, "
"strings or bool-vectors.  If no @var{sequences} are given, the empty vector "
"is returned."
msgstr ""

#. type: defun
#: sequences.texi.orig:479
msgid ""
"The value is either the empty vector, or is a newly constructed nonempty "
"vector that is not @code{eq} to any existing vector."
msgstr ""

#. type: group
#: sequences.texi.orig:486
#, no-wrap
msgid ""
"(setq a (vconcat '(A B C) '(D E F)))\n"
"     @result{} [A B C D E F]\n"
"(eq a (vconcat a))\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: sequences.texi.orig:492
#, no-wrap
msgid ""
"(vconcat)\n"
"     @result{} []\n"
"(vconcat [A B C] \"aa\" '(foo (6 7)))\n"
"     @result{} [A B C 97 97 foo (6 7)]\n"
msgstr ""

#. type: defun
#: sequences.texi.orig:498
msgid ""
"The @code{vconcat} function also allows byte-code function objects as "
"arguments.  This is a special feature to make it easy to access the entire "
"contents of a byte-code function object.  @xref{Byte-Code Objects}."
msgstr ""

#. type: defun
#: sequences.texi.orig:502
msgid ""
"For other concatenation functions, see @code{mapconcat} in @ref{Mapping "
"Functions}, @code{concat} in @ref{Creating Strings}, and @code{append} in "
"@ref{Building Lists}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:506
msgid ""
"The @code{append} function also provides a way to convert a vector into a "
"list with the same elements:"
msgstr ""

#. type: group
#: sequences.texi.orig:513
#, no-wrap
msgid ""
"(setq avector [1 two (quote (three)) \"four\" [five]])\n"
"     @result{} [1 two (quote (three)) \"four\" [five]]\n"
"(append avector nil)\n"
"     @result{} (1 two (quote (three)) \"four\" [five])\n"
msgstr ""

#. type: cindex
#: sequences.texi.orig:518
#, no-wrap
msgid "char-tables"
msgstr ""

#. type: cindex
#: sequences.texi.orig:519
#, no-wrap
msgid "extra slots of char-table"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:529
msgid ""
"A char-table is much like a vector, except that it is indexed by character "
"codes.  Any valid character code, without modifiers, can be used as an index "
"in a char-table.  You can access a char-table's elements with @code{aref} "
"and @code{aset}, as with any array.  In addition, a char-table can have "
"@dfn{extra slots} to hold additional data not associated with particular "
"character codes.  Like vectors, char-tables are constants when evaluated, "
"and can hold elements of any type."
msgstr ""

#. type: cindex
#: sequences.texi.orig:530
#, no-wrap
msgid "subtype of char-table"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:533
msgid "Each char-table has a @dfn{subtype}, a symbol, which serves two purposes:"
msgstr ""

#. type: itemize
#: sequences.texi.orig:541
msgid ""
"The subtype provides an easy way to tell what the char-table is for.  For "
"instance, display tables are char-tables with @code{display-table} as the "
"subtype, and syntax tables are char-tables with @code{syntax-table} as the "
"subtype.  The subtype can be queried using the function "
"@code{char-table-subtype}, described below."
msgstr ""

#. type: itemize
#: sequences.texi.orig:549
msgid ""
"The subtype controls the number of @dfn{extra slots} in the char-table.  "
"This number is specified by the subtype's @code{char-table-extra-slots} "
"symbol property (@pxref{Symbol Properties}), whose value should be an "
"integer between 0 and 10.  If the subtype has no such symbol property, the "
"char-table has no extra slots."
msgstr ""

#. type: cindex
#: sequences.texi.orig:551
#, no-wrap
msgid "parent of char-table"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:558
msgid ""
"A char-table can have a @dfn{parent}, which is another char-table.  If it "
"does, then whenever the char-table specifies @code{nil} for a particular "
"character @var{c}, it inherits the value specified in the parent.  In other "
"words, @code{(aref @var{char-table} @var{c})} returns the value from the "
"parent of @var{char-table} if @var{char-table} itself specifies @code{nil}."
msgstr ""

#. type: cindex
#: sequences.texi.orig:559
#, no-wrap
msgid "default value of char-table"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:563
msgid ""
"A char-table can also have a @dfn{default value}.  If so, then @code{(aref "
"@var{char-table} @var{c})} returns the default value whenever the char-table "
"does not specify any other non-@code{nil} value."
msgstr ""

#. type: defun
#: sequences.texi.orig:564
#, no-wrap
msgid "make-char-table subtype &optional init"
msgstr ""

#. type: defun
#: sequences.texi.orig:569
msgid ""
"Return a newly-created char-table, with subtype @var{subtype} (a symbol).  "
"Each element is initialized to @var{init}, which defaults to @code{nil}.  "
"You cannot alter the subtype of a char-table after the char-table is "
"created."
msgstr ""

#. type: defun
#: sequences.texi.orig:572
msgid ""
"There is no argument to specify the length of the char-table, because all "
"char-tables have room for any valid character code as an index."
msgstr ""

#. type: defun
#: sequences.texi.orig:579
msgid ""
"If @var{subtype} has the @code{char-table-extra-slots} symbol property, that "
"specifies the number of extra slots in the char-table.  This should be an "
"integer between 0 and 10; otherwise, @code{make-char-table} raises an "
"error.  If @var{subtype} has no @code{char-table-extra-slots} symbol "
"property (@pxref{Property Lists}), the char-table has no extra slots."
msgstr ""

#. type: defun
#: sequences.texi.orig:581
#, no-wrap
msgid "char-table-p object"
msgstr ""

#. type: defun
#: sequences.texi.orig:584
msgid ""
"This function returns @code{t} if @var{object} is a char-table, and "
"@code{nil} otherwise."
msgstr ""

#. type: defun
#: sequences.texi.orig:586
#, no-wrap
msgid "char-table-subtype char-table"
msgstr ""

#. type: defun
#: sequences.texi.orig:588
msgid "This function returns the subtype symbol of @var{char-table}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:592
msgid ""
"There is no special function to access default values in a char-table.  To "
"do that, use @code{char-table-range} (see below)."
msgstr ""

#. type: defun
#: sequences.texi.orig:593
#, no-wrap
msgid "char-table-parent char-table"
msgstr ""

#. type: defun
#: sequences.texi.orig:596
msgid ""
"This function returns the parent of @var{char-table}.  The parent is always "
"either @code{nil} or another char-table."
msgstr ""

#. type: defun
#: sequences.texi.orig:598
#, no-wrap
msgid "set-char-table-parent char-table new-parent"
msgstr ""

#. type: defun
#: sequences.texi.orig:600
msgid "This function sets the parent of @var{char-table} to @var{new-parent}."
msgstr ""

#. type: defun
#: sequences.texi.orig:602
#, no-wrap
msgid "char-table-extra-slot char-table n"
msgstr ""

#. type: defun
#: sequences.texi.orig:606
msgid ""
"This function returns the contents of extra slot @var{n} of "
"@var{char-table}.  The number of extra slots in a char-table is determined "
"by its subtype."
msgstr ""

#. type: defun
#: sequences.texi.orig:608
#, no-wrap
msgid "set-char-table-extra-slot char-table n value"
msgstr ""

#. type: defun
#: sequences.texi.orig:611
msgid "This function stores @var{value} in extra slot @var{n} of @var{char-table}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:615
msgid ""
"A char-table can specify an element value for a single character code; it "
"can also specify a value for an entire character set."
msgstr ""

#. type: defun
#: sequences.texi.orig:616
#, no-wrap
msgid "char-table-range char-table range"
msgstr ""

#. type: defun
#: sequences.texi.orig:619
msgid ""
"This returns the value specified in @var{char-table} for a range of "
"characters @var{range}.  Here are the possibilities for @var{range}:"
msgstr ""

#. type: code{#1}
#: sequences.texi.orig:621 sequences.texi.orig:639
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: sequences.texi.orig:623 sequences.texi.orig:641
msgid "Refers to the default value."
msgstr ""

#. type: var{#1}
#: sequences.texi.orig:624 sequences.texi.orig:645
#, no-wrap
msgid "char"
msgstr ""

#. type: table
#: sequences.texi.orig:627 sequences.texi.orig:648
msgid ""
"Refers to the element for character @var{char} (supposing @var{char} is a "
"valid character code)."
msgstr ""

#. type: code{#1}
#: sequences.texi.orig:628 sequences.texi.orig:649
#, no-wrap
msgid "(@var{from} . @var{to})"
msgstr ""

#. type: table
#: sequences.texi.orig:631 sequences.texi.orig:652
msgid ""
"A cons cell refers to all the characters in the inclusive range "
"@samp{[@var{from}..@var{to}]}."
msgstr ""

#. type: defun
#: sequences.texi.orig:634
#, no-wrap
msgid "set-char-table-range char-table range value"
msgstr ""

#. type: defun
#: sequences.texi.orig:637
msgid ""
"This function sets the value in @var{char-table} for a range of characters "
"@var{range}.  Here are the possibilities for @var{range}:"
msgstr ""

#. type: code{#1}
#: sequences.texi.orig:642
#, no-wrap
msgid "t"
msgstr ""

#. type: table
#: sequences.texi.orig:644
msgid "Refers to the whole range of character codes."
msgstr ""

#. type: defun
#: sequences.texi.orig:655
#, no-wrap
msgid "map-char-table function char-table"
msgstr ""

#. type: defun
#: sequences.texi.orig:663
msgid ""
"This function calls its argument @var{function} for each element of "
"@var{char-table} that has a non-@code{nil} value.  The call to "
"@var{function} is with two arguments, a key and a value.  The key is a "
"possible @var{range} argument for @code{char-table-range}---either a valid "
"character or a cons cell @code{(@var{from} . @var{to})}, specifying a range "
"of characters that share the same value.  The value is what "
"@code{(char-table-range @var{char-table} @var{key})} returns."
msgstr ""

#. type: defun
#: sequences.texi.orig:666
msgid ""
"Overall, the key-value pairs passed to @var{function} describe all the "
"values stored in @var{char-table}."
msgstr ""

#. type: defun
#: sequences.texi.orig:670
msgid ""
"The return value is always @code{nil}; to make calls to "
"@code{map-char-table} useful, @var{function} should have side effects.  For "
"example, here is how to examine the elements of the syntax table:"
msgstr ""

#. type: example
#: sequences.texi.orig:688
#, no-wrap
msgid ""
"(let (accumulator)\n"
"   (map-char-table\n"
"    #'(lambda (key value)\n"
"        (setq accumulator\n"
"              (cons (list\n"
"                     (if (consp key)\n"
"                         (list (car key) (cdr key))\n"
"                       key)\n"
"                     value)\n"
"                    accumulator)))\n"
"    (syntax-table))\n"
"   accumulator)\n"
"@result{}\n"
"(((2597602 4194303) (2)) ((2597523 2597601) (3))\n"
" ... (65379 (5 . 65378)) (65378 (4 . 65379)) (65377 (1))\n"
" ... (12 (0)) (11 (3)) (10 (12)) (9 (0)) ((0 8) (3)))\n"
msgstr ""

#. type: cindex
#: sequences.texi.orig:692 sequences.texi.orig:693
#, no-wrap
msgid "Bool-vectors"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:701
msgid ""
"A bool-vector is much like a vector, except that it stores only the values "
"@code{t} and @code{nil}.  If you try to store any non-@code{nil} value into "
"an element of the bool-vector, the effect is to store @code{t} there.  As "
"with all arrays, bool-vector indices start from 0, and the length cannot be "
"changed once the bool-vector is created.  Bool-vectors are constants when "
"evaluated."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:705
msgid ""
"There are two special functions for working with bool-vectors; aside from "
"that, you manipulate them with same functions used for other kinds of "
"arrays."
msgstr ""

#. type: defun
#: sequences.texi.orig:706
#, no-wrap
msgid "make-bool-vector length initial"
msgstr ""

#. type: defun
#: sequences.texi.orig:709
msgid ""
"Return a new bool-vector of @var{length} elements, each one initialized to "
"@var{initial}."
msgstr ""

#. type: defun
#: sequences.texi.orig:711
#, no-wrap
msgid "bool-vector-p object"
msgstr ""

#. type: defun
#: sequences.texi.orig:714
msgid ""
"This returns @code{t} if @var{object} is a bool-vector, and @code{nil} "
"otherwise."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:717
msgid "There are also some bool-vector set operation functions, described below:"
msgstr ""

#. type: defun
#: sequences.texi.orig:718
#, no-wrap
msgid "bool-vector-exclusive-or a b &optional c"
msgstr ""

#. type: defun
#: sequences.texi.orig:722
msgid ""
"Return @dfn{bitwise exclusive or} of bool vectors @var{a} and @var{b}.  If "
"optional argument @var{c} is given, the result of this operation is stored "
"into @var{c}.  All arguments should be bool vectors of the same length."
msgstr ""

#. type: defun
#: sequences.texi.orig:724
#, no-wrap
msgid "bool-vector-union a b &optional c"
msgstr ""

#. type: defun
#: sequences.texi.orig:728
msgid ""
"Return @dfn{bitwise or} of bool vectors @var{a} and @var{b}.  If optional "
"argument @var{c} is given, the result of this operation is stored into "
"@var{c}.  All arguments should be bool vectors of the same length."
msgstr ""

#. type: defun
#: sequences.texi.orig:730
#, no-wrap
msgid "bool-vector-intersection a b &optional c"
msgstr ""

#. type: defun
#: sequences.texi.orig:734
msgid ""
"Return @dfn{bitwise and} of bool vectors @var{a} and @var{b}.  If optional "
"argument @var{c} is given, the result of this operation is stored into "
"@var{c}.  All arguments should be bool vectors of the same length."
msgstr ""

#. type: defun
#: sequences.texi.orig:736
#, no-wrap
msgid "bool-vector-set-difference a b &optional c"
msgstr ""

#. type: defun
#: sequences.texi.orig:740
msgid ""
"Return @dfn{set difference} of bool vectors @var{a} and @var{b}.  If "
"optional argument @var{c} is given, the result of this operation is stored "
"into @var{c}.  All arguments should be bool vectors of the same length."
msgstr ""

#. type: defun
#: sequences.texi.orig:742
#, no-wrap
msgid "bool-vector-not a &optional b"
msgstr ""

#. type: defun
#: sequences.texi.orig:746
msgid ""
"Return @dfn{set complement} of bool vector @var{a}.  If optional argument "
"@var{b} is given, the result of this operation is stored into @var{b}.  All "
"arguments should be bool vectors of the same length."
msgstr ""

#. type: defun
#: sequences.texi.orig:748
#, no-wrap
msgid "bool-vector-subsetp a b"
msgstr ""

#. type: defun
#: sequences.texi.orig:752
msgid ""
"Return @code{t} if every @code{t} value in @var{a} is also t in @var{b}, "
"@code{nil} otherwise.  All arguments should be bool vectors of the same "
"length."
msgstr ""

#. type: defun
#: sequences.texi.orig:754
#, no-wrap
msgid "bool-vector-count-consecutive a b i"
msgstr ""

#. type: defun
#: sequences.texi.orig:758
msgid ""
"Return the number of consecutive elements in @var{a} equal @var{b} starting "
"at @var{i}.  @code{a} is a bool vector, @var{b} is @code{t} or @code{nil}, "
"and @var{i} is an index into @code{a}."
msgstr ""

#. type: defun
#: sequences.texi.orig:760
#, no-wrap
msgid "bool-vector-count-population a"
msgstr ""

#. type: defun
#: sequences.texi.orig:762
msgid "Return the number of elements that are @code{t} in bool vector @var{a}."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:767
msgid ""
"Here is an example of creating, examining, and updating a bool-vector.  Note "
"that the printed form represents up to 8 boolean values as a single "
"character."
msgstr ""

#. type: example
#: sequences.texi.orig:777
#, no-wrap
msgid ""
"(setq bv (make-bool-vector 5 t))\n"
"     @result{} #&5\"^_\"\n"
"(aref bv 1)\n"
"     @result{} t\n"
"(aset bv 3 nil)\n"
"     @result{} nil\n"
"bv\n"
"     @result{} #&5\"^W\"\n"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:782
msgid ""
"These results make sense because the binary codes for control-_ and "
"control-W are 11111 and 10111, respectively."
msgstr ""

#. type: section
#: sequences.texi.orig:784
#, no-wrap
msgid "Managing a Fixed-Size Ring of Objects"
msgstr ""

#. type: cindex
#: sequences.texi.orig:786
#, no-wrap
msgid "ring data structure"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:791
msgid ""
"A @dfn{ring} is a fixed-size data structure that supports insertion, "
"deletion, rotation, and modulo-indexed reference and traversal.  An "
"efficient ring data structure is implemented by the @code{ring} package.  It "
"provides the functions listed in this section."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:796
msgid ""
"Note that several ``rings'' in Emacs, like the kill ring and the mark ring, "
"are actually implemented as simple lists, @emph{not} using the @code{ring} "
"package; thus the following functions won't work on them."
msgstr ""

#. type: defun
#: sequences.texi.orig:797
#, no-wrap
msgid "make-ring size"
msgstr ""

#. type: defun
#: sequences.texi.orig:800
msgid ""
"This returns a new ring capable of holding @var{size} objects.  @var{size} "
"should be an integer."
msgstr ""

#. type: defun
#: sequences.texi.orig:802
#, no-wrap
msgid "ring-p object"
msgstr ""

#. type: defun
#: sequences.texi.orig:804
msgid "This returns @code{t} if @var{object} is a ring, @code{nil} otherwise."
msgstr ""

#. type: defun
#: sequences.texi.orig:806
#, no-wrap
msgid "ring-size ring"
msgstr ""

#. type: defun
#: sequences.texi.orig:808
msgid "This returns the maximum capacity of the @var{ring}."
msgstr ""

#. type: defun
#: sequences.texi.orig:810
#, no-wrap
msgid "ring-length ring"
msgstr ""

#. type: defun
#: sequences.texi.orig:813
msgid ""
"This returns the number of objects that @var{ring} currently contains.  The "
"value will never exceed that returned by @code{ring-size}."
msgstr ""

#. type: defun
#: sequences.texi.orig:815
#, no-wrap
msgid "ring-elements ring"
msgstr ""

#. type: defun
#: sequences.texi.orig:817
msgid "This returns a list of the objects in @var{ring}, in order, newest first."
msgstr ""

#. type: defun
#: sequences.texi.orig:819
#, no-wrap
msgid "ring-copy ring"
msgstr ""

#. type: defun
#: sequences.texi.orig:822
msgid ""
"This returns a new ring which is a copy of @var{ring}.  The new ring "
"contains the same (@code{eq}) objects as @var{ring}."
msgstr ""

#. type: defun
#: sequences.texi.orig:824
#, no-wrap
msgid "ring-empty-p ring"
msgstr ""

#. type: defun
#: sequences.texi.orig:826
msgid "This returns @code{t} if @var{ring} is empty, @code{nil} otherwise."
msgstr ""

#. type: Plain text
#: sequences.texi.orig:832
msgid ""
"The newest element in the ring always has index 0.  Higher indices "
"correspond to older elements.  Indices are computed modulo the ring length.  "
"Index @minus{}1 corresponds to the oldest element, @minus{}2 to the "
"next-oldest, and so forth."
msgstr ""

#. type: defun
#: sequences.texi.orig:833
#, no-wrap
msgid "ring-ref ring index"
msgstr ""

#. type: defun
#: sequences.texi.orig:837
msgid ""
"This returns the object in @var{ring} found at index @var{index}.  "
"@var{index} may be negative or greater than the ring length.  If @var{ring} "
"is empty, @code{ring-ref} signals an error."
msgstr ""

#. type: defun
#: sequences.texi.orig:839
#, no-wrap
msgid "ring-insert ring object"
msgstr ""

#. type: defun
#: sequences.texi.orig:842
msgid ""
"This inserts @var{object} into @var{ring}, making it the newest element, and "
"returns @var{object}."
msgstr ""

#. type: defun
#: sequences.texi.orig:845
msgid ""
"If the ring is full, insertion removes the oldest element to make room for "
"the new element."
msgstr ""

#. type: defun
#: sequences.texi.orig:847
#, no-wrap
msgid "ring-remove ring &optional index"
msgstr ""

#. type: defun
#: sequences.texi.orig:852
msgid ""
"Remove an object from @var{ring}, and return that object.  The argument "
"@var{index} specifies which item to remove; if it is @code{nil}, that means "
"to remove the oldest item.  If @var{ring} is empty, @code{ring-remove} "
"signals an error."
msgstr ""

#. type: defun
#: sequences.texi.orig:854
#, no-wrap
msgid "ring-insert-at-beginning ring object"
msgstr ""

#. type: defun
#: sequences.texi.orig:857
msgid ""
"This inserts @var{object} into @var{ring}, treating it as the oldest "
"element.  The return value is not significant."
msgstr ""

#. type: defun
#: sequences.texi.orig:860
msgid ""
"If the ring is full, this function removes the newest element to make room "
"for the inserted element."
msgstr ""

#. type: cindex
#: sequences.texi.orig:862
#, no-wrap
msgid "fifo data structure"
msgstr ""

#. type: Plain text
#: sequences.texi.orig:865
msgid ""
"If you are careful not to exceed the ring size, you can use the ring as a "
"first-in-first-out queue.  For example:"
msgstr ""

#. type: lisp
#: sequences.texi.orig:874
#, no-wrap
msgid ""
"(let ((fifo (make-ring 5)))\n"
"  (mapc (lambda (obj) (ring-insert fifo obj))\n"
"        '(0 one \"two\"))\n"
"  (list (ring-remove fifo) t\n"
"        (ring-remove fifo) t\n"
"        (ring-remove fifo)))\n"
"     @result{} (0 t one t \"two\")\n"
msgstr ""
