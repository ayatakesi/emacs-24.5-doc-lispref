@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2015 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Symbols
@chapter Symbols
@cindex symbol

  @dfn{シンボル(symbol)}は、一意な名前をもつオブジェクトです。このチャプターでは、シンボル、シンボルの構成要素やプロパティーリスト、およびシンボルを作成、インターンする方法を説明します。別のチャプターでは、シンボルを変数として使用したり、関数名として使用する方法が説明されています。@ref{Variables}と@ref{Functions}を参照してください。シンボルの正確な入力構文については、@ref{Symbol
Type}を参照してください。

  任意のLispオブジェクトがシンボルかどうかを、@code{symbolp}でテストできます:

@defun symbolp object
この関数は、@var{object}がシンボルの場合は@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@menu
* Symbol Components::        シンボルは名前、値、関数定義、プロパティーリストをもつ。
* Definitions::              定義は、シンボルが使用される方法を示す。
* Creating Symbols::         シンボルが一意に保たれる方法。
* Symbol Properties::        さまざまな情報を記録するために、各シンボルはプロパティーリストをもつ。
@end menu

@node Symbol Components
@section Symbol Components
@cindex symbol components

  各シンボルは4つの構成要素(もしくは``セル'')をもち、各構成要素はそれぞれ別のオブジェクトを参照します:

@table @asis
@item プリント名(print name)
@cindex print name cell
そのシンボルの名前。

@item 値(value)
@cindex value cell
そのシンボルの、変数としての現在の値。

@item 関数(function)
@cindex function cell
そのシンボルの関数定義。これはシンボル、キーマップ、キーボードマクロも保持できる。

@item プロパティーリスト(property list)
@cindex property list cell
そのシンボルのプロパティーリスト。
@end table

@noindent
プリント名のセルは常に文字列を保持し、それを変更することはできません。他の3つのセルには、任意のLispオブジェクトをセットすることができます。

  プリントメイのセルは、シンボルの名前となる文字列を保持します。シンボルは、シンボル名によりテキストとして表されるので、2つのシンボルが同じな前をもたないことが重要です。Lispリーダーは、シンボルを読み取るごとに、新たにそれを作成する前に、指定されたシンボルがすでに存在するか調べます。シンボルの名前を得るには、関数@code{symbol-name}(@ref{Creating
Symbols}を参照してください)を使用します。

  値のセルは、シンボルの変数としての値(そのシンボル自身がLisp式として評価されたときに得る値)を保持します。@dfn{ローカルバインディング(local
binding)}や@dfn{スコーピングルール(scoping
rules)}などのような複雑なものを含め、変数がセットされたり、取得される方法については、@xref{Variables}を参照してください。ほとんどのシンボルは、値として任意のLispオブジェクトをもつことができますが、一部の特別なシンボルは変更できない値をもちます。これらには、@code{nil}、@code{t}、および名前が@samp{:}で始まる任意のシンボル(@dfn{キーワード(keyword)}と呼ばれます)が含まれます。@ref{Constant
Variables}を参照してください。

  関数のセルは、シンボルの関数定義を保持します。実際は、@code{foo}の関数セルの中に保管されている関数を意味するとき、``関数@code{foo}''といってそれを参照することがよくあります。わたしたちは、必要な土岐だけ、これを明確に区別することにします。関数セルは通常、関数(@ref{Functions}を参照してください)か、マクロ(@ref{Macros}を参照してください)を保持するために使用されます。しかし、関数セルはシンボル(@ref{Function
Indirection}を参照してください)、キーボードマクロ(@pxref{Keyboard
Macros})、キーマップ(@pxref{Keymaps})、またはオートロードオブジェクト(@ref{Autoloading}を参照してください)を保持するためにも使用できます。シンボルの関数セルの内容を得るには、関数@code{symbol-function}
(@ref{Function Cells}を参照してください)を使用します。

  プロパティーリストのセルは通常、正しくフォーマットされたプロパティーリストを保持するべきです。シンボルのプロパティーリストを得るには、関数@code{symbol-plist}を使用します。@ref{Symbol
Properties}を参照してください。

  巻子失せると値セルが、@dfn{void(空)}のときもあります。voidとは、そのセルがどのオブジェクトも参照していないことを意味します(これは、シンボル@code{void}を保持することとは異なり、シンボル@code{nil}を保持することとも異なります)。voidの関数セルまたは値セルを調べようとすると、結果は@samp{Symbol's
value as variable is void}のようなエラーとなります。

  それぞれのシンボルは値セルと関数セルを別個にもつので、変数名と関数名が衝突することはありません。たとえば、シンボル@code{buffer-file-name}が、値(カレントバッファーでvisitされているファイルの名前)をもち、同様に関数定義(ファイルの名前をreturnする基本関数)をもつことができます:

@example
buffer-file-name
     @result{} "/gnu/elisp/symbols.texi"
(symbol-function 'buffer-file-name)
     @result{} #<subr buffer-file-name>
@end example

@node Definitions
@section Defining Symbols
@cindex definitions of symbols

  @dfn{定義(definition)}とは、特別な方法で使用を意図することを宣言する、特別な種類のLisp式です。定義とは通常、シンボルにたいする値を指定するか、シンボルにたいする1つの種類の使用についての意味と、この方法で使用するときのシンボルの意味にたいするドキュメントを指定します。したがって、シンボルを変数として定義した場合、その変数の初期値と、加えてその変数のドキュメントを提供できます。

  @code{defvar}および@code{defconst}は、@dfn{グローバル変数(global variable)} ---
Lispプログラムの任意の箇所からアクセスできる変数 ---
として定義するスペシャルフォームです。変数についての詳細は、@ref{Variables}を参照してください。カスタマイズ可能な変数を定義するには、@code{defcustom}(これはサブルーチンとして@code{defvar}も呼び出します)を使用します(@ref{Customization}を参照してください)。

  原則として、最初にシンボルが変数として定義されていなくても、@code{setq}で任意のシンボルに値を割り当てることができます。しかし、使用したいそれぞれのグローバル変数にたいして、変数定義を記述するべきです。さもないと、レキシカルスコープ(@ref{Variable
Scoping}を参照してください)が有効なときに変数が評価された場合、あなたのLispプログラムは正しく動作しないでしょう。

  @code{defun}は、ラムダ式(lambda
expression)を生成して、そのシンボルの関数セルにそれを格納することにより、シンボルを関数として定義します。したがって、このシンボルの関数定義は、このラムダ式になります(関数セルの内容を意味する用語``関数定義(function
definition)''は、@code{defun}がシンボルに関数としての定義を与えるというアイデアに由来します)。@ref{Functions}を参照してください。

  @code{defmacro}は、シンボルをマクロとして定義します。これはマクロオブジェクトを作成して、そのシンボルの関数セルにそれを格納します。シンボルにはマクロと関数を与えることができますが、マクロと関数定義はどちらも関数セルに保持されるのにたいし、関数セルに保持できるのは常にただ1つのLispオブジェクトなので、両方1度にそれを行なうことはできないことに注意してください。@ref{Macros}を参照してください。

  前に注記したように、Emacs
Lispではシンボルを(たとえば@code{defvar}で)変数として定義して、同じシンボルを(たとえば@code{defun}で)関数やマクロとして、両方定義することができます。このような定義は衝突しません。

  これらの定義は、プログラミングツールのガイドを果たすこともできます。たとえば、@kbd{C-h f}および@kbd{C-h
v}コマンドは、関係ある変数、関数、マクロ定義へのリンクを含むヘルプバッファーを作成します。@ref{Name Help,,, emacs, The
GNU Emacs Manual}を参照してください。

@node Creating Symbols
@section Creating and Interning Symbols
@cindex reading symbols

  GNU Emacs
Lispでシンボルが作成される方法を理解するには、Lispがシンボルを読み取る方法を理解しなければなりません。Lispは、同じ文字綴りを読み取ったら、毎回同じシンボルを見つけることを保証しなければなりません。これに失敗すると、完全な混乱を招くでしょう。

@cindex symbol name hashing
@cindex hashing
@cindex obarray
@cindex bucket (in obarray)
  Lispリーダーがシンボルに出会うと、Lispリーダーは名前のすべての文字を読み取ります。その後Lispリーダーは、@dfn{obarray(オブジェクト配列)}と呼ばれるテーブル内のインデックスを決めるために、これらの文字を``ハッシュ(hash)''します。ハッシュ化(hashing)は何かを照合するのに効果的な方法です。たとえば、Jan
Jonesを見つけるときは、電話帳を表紙から1頁ずつ探すのではなく、Jから探し始めます。これは簡単なバージョンのハッシュ化です。obarrayの各要素は、与えられたハッシュコードとともにすべてのシンボルを保持する、@dfn{バケット(bucket)}です。与えられた名前を探すためには、バケットの中からその名前のハッシュコードのすべてのシンボルを探すのが効果的です(同じアイデアは一般的なEmacsのハッシュテーブルでも使用されていますが、これらは異なるデータ型です。@ref{Hash
Tables}を参照してください)。

@cindex interning
  探している名前のシンボルが見つかったら、リーダーはそのシンボルを使用します。obarrayにその名前のシンボルが含まれない場合、リーダーは新しいシンボルを作成して、それをobarrayに追加します。特定の名前のシンボルを探して追加することを、@dfn{インターン(intern)}すると言い、これが行なわれた後、そのシンボルは@dfn{インターンされたシンボル(interned
symbol)}と呼ばれます。

  インターンすることにより、ある特定の名前のシンボルは、それぞれのobarrayに1つだけであることが保証されます。同じ名前のシンボルは他に存在するかもしれませんが、同じobarrayではありません。したがってリーダーは、(同じobarrayを読みつづける限り)同じ名前にたいして、同じシンボルを取得します。

  インターンは通常、リーダー内で自動的に発生しますが、他のプログラムがこれを行なう必要がある場合もあります。たとえば、@kbd{M-x}コマンドは、その後ミニバッファーを使用してコマンド名を文字列として取得し、その文字列をインターンして、インターンされたその名前のシンボルを得ます。

@cindex symbol equality
@cindex uninterned symbol
  すべてのシンボルを含むobarrayはありません。実際、どのobarrayにも含まれないシンボルがいくつかあります。これらは、@dfn{インターンされていないシンボル(uninterned
symbols)}と呼ばれます。インターンされていないシンボルも、他のシンボルと同じく4つのセルをもちます。しかし、インターンされていないシンボルへのアクセスを得る唯一の方法は、他の何らかのオブジェクトとして探すか、変数の値として探す方法だけです。

  インターンされていないシンボルの作成は、Lispコードを生成するとき有用です。なぜなら、作成されたコード内で変数として使用されているインターンされていないシンボルは、他のLispプログラムで使用されている任意の変数と競合することはありえないからです。

  Emacs
Lispでは、obarrayはベクターです。ベクター内の各要素がバケットになります。要素の値は、名前がそのバケットにハッシュされるインターンされたシンボル、またはバケットが空のときは0です。インターンされたシンボルは、そのバケット内の次のシンボルへの、内部リンク(ユーザーからは見えない)をもちます。これらのリンクは不可視なので、@code{mapatoms}を使用する方法をのぞき(以下参照)、obarray内のすべてのシンボルを探す方法はありません。バケット内のシンボルの順番に、意味はありません。

  空のobarrayでは、すべての要素が0なので、@code{(make-vector @var{length}
0)}でobarrayを作成することができます。@strong{obarrayを作成する有効な方法は、これだけです。}長さに素数を指定すると、よいハッシュ化がされる傾向があります。2の累乗から1減じた長さも、よい結果を生む傾向があります。

  @strong{自分でobarrayにシンボルを置かないでください。}これはうまくいきません ---
obarrayに正しくシンボルを入力できるのは、@code{intern}だけです。

@cindex CL note---symbol in obarrays
@quotation
@b{Common Lispに関する注意: }Common Lispとは異なり、Emacs
Lispは1つのシンボルを複数のobarrayにインターンする方法を提供しません。
@end quotation

  以下の関数のほとんどは、引数に名前とobarrayをとります。名前が文字列ではない、またはobarrayがベクターでない場合は、@code{wrong-type-argument}エラーがシグナルされます。

@defun symbol-name symbol
この関数は、@var{symbol}の名前を文字列としてreturnします。たとえば:

@example
@group
(symbol-name 'foo)
     @result{} "foo"
@end group
@end example

@strong{警告:
}文字の置き換えにより文字列を変更すると、それはシンボルの名前を変更しますが、obarrayの更新には失敗するので、行なわないでください!
@end defun

@defun make-symbol name
この関数は、新たに割り当てられた、名前が@var{name}(文字列でなかればならない)のインターンされていないシンボルをreturnします。このシンボルの値と関数はvoidで、プロパティーリストは@code{nil}です。以下の例では、@code{sym}の値は@code{foo}と@code{eq}ではありません。なぜなら、これは名前が@samp{foo}のインターンされていないシンボルだからです。

@example
(setq sym (make-symbol "foo"))
     @result{} foo
(eq sym 'foo)
     @result{} nil
@end example
@end defun

@defun intern name &optional obarray
この関数は、名前が@var{name}の、インターンされたシンボルをreturnします。オブジェクト配列@var{obarray}の中にそのようなシンボルが存在しない場合、@code{intern}はあたらしいシンボルを作成してobarrayに追加し、それをreturnします。@var{obarray}が省略された場合、グローバル変数@code{obarray}の値が使用されます。

@example
(setq sym (intern "foo"))
     @result{} foo
(eq sym 'foo)
     @result{} t

(setq sym1 (intern "foo" other-obarray))
     @result{} foo
(eq sym1 'foo)
     @result{} nil
@end example
@end defun

@cindex CL note---interning existing symbol
@quotation
@b{Common Lispに関する注意: }Common Lispでは、既存のシンボルをobarrayにインターンできます。Emacs
Lispでは、@code{intern}の引数はシンボルではなく文字列なので、これを行なうことはできません。
@end quotation

@defun intern-soft name &optional obarray
この関数は、@var{obarray}内の名前が@var{name}のシンボル、@var{obarray}にその名前のシンボルが存在しない場合は@code{nil}をreturnします。したがって、与えられた名前のシンボルがすでにインターンされているかテストするために、@code{intern-soft}を使用することができます。@var{obarray}が省略された場合は、グローバル変数@code{obarray}の値が使用されます。

引数@var{name}にはシンボルも使用できます。この場合、指定されたobarrayに@var{name}がインターンされていれば@var{name}、それ以外は@code{nil}をreturnします。

@example
(intern-soft "frazzle")        ; @r{そのようなシンボルは存在しない。}
     @result{} nil
(make-symbol "frazzle")        ; @r{インターンされていないシンボルを作成する。}
     @result{} frazzle
@group
(intern-soft "frazzle")        ; @r{そのようなシンボルは見つからない。}
     @result{} nil
@end group
@group
(setq sym (intern "frazzle"))  ; @r{インターンされたシンボルを作成する。}
     @result{} frazzle
@end group
@group
(intern-soft "frazzle")        ; @r{シンボルが見つかった!}
     @result{} frazzle
@end group
@group
(eq sym 'frazzle)              ; @r{そして、それは同じシンボル。}
     @result{} t
@end group
@end example
@end defun

@defvar obarray
この変数は、@code{intern}および@code{read}で使用される、標準のobarrayです。
@end defvar

@defun mapatoms function &optional obarray
@anchor{Definition of mapatoms}
この関数は、オブジェクト配列@var{obarray}の中のシンボルに1つにたいして、1度ずつ@var{function}を呼び出し、その後@code{nil}をreturnします。@var{obarray}が省略された場合は、通常のシンボルにたいする標準のオブジェクト配列@code{obarray}の値がデフォルトになります。

@example
(setq count 0)
     @result{} 0
(defun count-syms (s)
  (setq count (1+ count)))
     @result{} count-syms
(mapatoms 'count-syms)
     @result{} nil
count
     @result{} 1871
@end example

@code{mapatoms}を使用する他の例については、@ref{Accessing
Documentation}の@code{documentation}を参照してください。
@end defun

@defun unintern symbol obarray
この関数は、オブジェクト配列@var{obarray}から、@var{symbol}を削除します。obarrayの中に@code{symbol}が存在しない場合、@code{unintern}は何も行ないません。@var{obarray}が@code{nil}の場合は、現在のobarrayが使用されます。

@var{symbol}にシンボルではなく文字列を与えた場合、それはシンボルの名前を意味します。この場合、@code{unintern}は、(もしあれば)obarrayからその名前のシンボルを削除します。そのようなシンボルが存在する場合、@code{unintern}は何も行ないません。

@code{unintern}がシンボルを削除した場合は@code{t}、それ以外は@code{nil}をreturnします。
@end defun

@node Symbol Properties
@section Symbol Properties
@cindex symbol property

  シンボルは、そのシンボルについての様々な情報を記録するために使用される、任意の数の@dfn{シンボルプロパティー(symbol
properties)}をもつことができます。たとえば、シンボルの@code{risky-local-variable}プロパティーが@code{nil}の場合は、その変数の名前が、危険なファイルローカル変数(@ref{File
Local Variables}を参照してください)であることを意味します。

  シンボルのプロパティーとプロパティー値はそれぞれ、、シンボルのプロパティーリストセル(@ref{Symbol
Components}を参照してください)に、プロパティーリスト形式(@ref{Property Lists}を参照してください)で格納されます。

@menu
* Symbol Plists::            シンボルプロパティーへのアクセス。
* Standard Properties::      シンボルプロパティーの標準的な意味。
@end menu

@node Symbol Plists
@subsection Accessing Symbol Properties

  以下の関数は、シンボルプロパティーへのアクセスに使用できます。

@defun get symbol property
この関数は、@var{symbol}のプロパティーリスト内の、@var{property}という名前のプロパティーの値をreturnします。そのようなプロパティーが存在しない場合は、@code{nil}をreturnします。したがって、値が@code{nil}のときと、プロパティーが存在しない場合の違いはありません。

名前@var{property}は、@code{eq}を使用して既存のプロパティーと比較されるので、任意のオブジェクトはプロパティーとして適正です。

例は@code{put}を参照してください。
@end defun

@defun put symbol property value
この関数は、@var{symbol}のプロパティーリストの、プロパティー名@var{property}に@var{value}を配して、以前のプロパティー値を置き換えます。@code{put}関数は、@var{value}をreturnします。

@example
(put 'fly 'verb 'transitive)
     @result{}'transitive
(put 'fly 'noun '(a buzzing little bug))
     @result{} (a buzzing little bug)
(get 'fly 'verb)
     @result{} transitive
(symbol-plist 'fly)
     @result{} (verb transitive noun (a buzzing little bug))
@end example
@end defun

@defun symbol-plist symbol
この関数は、@var{symbol}ののののプロパティーリストをreturnします。
@end defun

@defun setplist symbol plist
この関数は、@var{symbol}のプロパティーリストを、@var{plist}にセットします。@var{plist}は通常、適正なプロパティーリストであるべきですが、これは強制ではありません。return値は@var{plist}です。

@example
(setplist 'foo '(a 1 b (2 3) c nil))
     @result{} (a 1 b (2 3) c nil)
(symbol-plist 'foo)
     @result{} (a 1 b (2 3) c nil)
@end example

通常の用途には使用されない、特別なobarray内のシンボルでは、非標準的で方法でプロパティーリストセルを使用することに意味があるかもしれません。実際に、abbrev(@ref{Abbrevs}を参照してください)のメカニズムは、これを行なっています。

以下のように、@code{setplist}と@code{plist-put}により、@code{put}を定義できます:

@example
(defun put (symbol prop value)
  (setplist symbol
            (plist-put (symbol-plist symbol) prop value)))
@end example
@end defun

@defun function-get symbol property
この関数は、@code{get}と同じですが、@var{symbol}が関数エイリアス(function
alias)の場合は、実際の関数の名づけるシンボルのプロパティーリストを参照します。@ref{Defining Functions}を参照してください。
@end defun

@node Standard Properties
@subsection Standard Symbol Properties

  以下に、Emacsで特別な目的のために使用されるシンボルプロパティーをリストします。以下の表で、``名づけられた関数(the named
function)''と言うときは、関数名がそのシンボルである関数を意味します。``名づけられた変数(the named
variable)''などの場合も、同様です。

@table @code
@item :advertised-binding
このプロパティーリストは、名づけられた関数のドキュメントを表示するときの、優先されるキーバインディングを指定します。@ref{Keys in
Documentation}を参照してください。

@item char-table-extra-slots
値が非@code{nil}の場合は、名づけられた文字テーブル型の追加スロットの数を指定します。@ref{Char-Tables}を参照してください。

@item customized-face
@itemx face-defface-spec
@itemx saved-face
@itemx theme-face
これらのプロパティーは、フェイスの標準のフェイススペック(face
specs)、およびフォントスペックsaved-fase、customized-face、themed-faceを記録するために使用されます。これらのプロパティーを直接セットしないでください。これらのプロパティーは@code{defface}、および関連する関数により管理されます。@ref{Defining
Faces}を参照してください。

@item customized-value
@itemx saved-value
@itemx standard-value
@itemx theme-value
これらのプロパティーは、カスタマイズ可能な変数のstandard-value、saved-value、customized-value(しかし保存はされない)、themed-valueを記録するために使用されます。これらのプロパティーを直接セットしないでください。これらは@code{defcustom}、および関連する関数により管理されます。@ref{Variable
Definitions}を参照してください。

@item disabled
値が非@code{nil}の場合、名づけられた関数はコマンドとして無効になります。@ref{Disabling Commands}を参照してください。

@item face-documentation
値には、名づけられたフェイスのドキュメント文字列が格納されます。これは、@code{defface}により自動的にセットされます。@ref{Defining
Faces}を参照してください。

@item history-length
値が非@code{nil}の場合、名づけられたヒストリーリスト変数の、ミニバッファーヒストリーの最大長を指定します。@ref{Minibuffer
History}を参照してください。

@item interactive-form
この値は、名づけられた関数の、インタラクティブ形式です。通常、これを直接セットするべきではありません。かわりに、スペシャルフォーム@code{interactive}を使用してください。@ref{Interactive
Call}を参照してください。

@item menu-enable
この値は、名づけられたメニューアイテムが、メニュー内で有効であるべきかを決定するための式です。@ref{Simple Menu
Items}を参照してください。

@item mode-class
値が@code{special}の場合、名づけられたメジャーモードは``special(特別)''です。@ref{Major Mode
Conventions}を参照してください。

@item permanent-local
値が非@code{nil}の場合、名づけられた変数はバッファーローカル変数となり、変数の値はメジャーモードの変更によりリセットされません。@ref{Creating
Buffer-Local}を参照してください。

@item permanent-local-hook
値が非@code{nil}の場合、名づけられた変数はメジャーモードを変更したとき、フック変数のローカル値から削除されません。@ref{Setting
Hooks}を参照してください。

@item pure
値が非@code{nil}の場合、名づけられた関数は、副作用の影響を受けないとみなされます。定数の引数で呼び出された場合、コンパイル時に評価することができます。これは、実行時のエラーをコンパイル時へとシフトします。

@item risky-local-variable
値が非@code{nil}の場合、名づけられた変数は、ファイルローカル変数としては危険だとみなされます。@ref{File Local
Variables}を参照してください。

@item safe-function
値が非@code{nil}の場合、名づけられた関数は、評価において一般的に安全だとみなされます。@ref{Function
Safety}を参照してください。

@item safe-local-eval-function
値が非@code{nil}の場合、名づけられた関数は、ファイルローカルの評価フォーム内で、安全に呼び出すことができます。@ref{File Local
Variables}を参照してください。

@item safe-local-variable
値は、名付けられた変数の、安全なファイルローカル値を決定する関数を指定します。@ref{File Local Variables}を参照してください。

@item side-effect-free
非@code{nil}値は、関数の安全性(@ref{Function
Safety}を参照してください)、およびバイトコンパイラーの最適化を決定するために、名づけられた関数が副作用から自由であることを示します。これをセットしないでください。

@item variable-documentation
非@code{nil}の場合、それは名づけられた変数のドキュメント文字列を指定します。ドキュメント文字列は、@code{defvar}および関連する関数により、自動的にセットされます。@ref{Defining
Faces}を参照してください。
@end table
