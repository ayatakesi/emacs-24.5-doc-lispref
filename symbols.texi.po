# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-06-26 22:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: symbols.texi.orig:6 symbols.texi.orig:7
#, no-wrap
msgid "Symbols"
msgstr ""

#. type: cindex
#: symbols.texi.orig:8
#, no-wrap
msgid "symbol"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:16
msgid ""
"A @dfn{symbol} is an object with a unique name.  This chapter describes "
"symbols, their components, their property lists, and how they are created "
"and interned.  Separate chapters describe the use of symbols as variables "
"and as function names; see @ref{Variables}, and @ref{Functions}.  For the "
"precise read syntax for symbols, see @ref{Symbol Type}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:19
msgid ""
"You can test whether an arbitrary Lisp object is a symbol with "
"@code{symbolp}:"
msgstr ""

#. type: defun
#: symbols.texi.orig:20
#, no-wrap
msgid "symbolp object"
msgstr ""

#. type: defun
#: symbols.texi.orig:23
msgid ""
"This function returns @code{t} if @var{object} is a symbol, @code{nil} "
"otherwise."
msgstr ""

#. type: section
#: symbols.texi.orig:32 symbols.texi.orig:34 symbols.texi.orig:35
#, no-wrap
msgid "Symbol Components"
msgstr ""

#. type: menuentry
#: symbols.texi.orig:32
msgid "Symbols have names, values, function definitions and property lists."
msgstr ""

#. type: node
#: symbols.texi.orig:32 symbols.texi.orig:116
#, no-wrap
msgid "Definitions"
msgstr ""

#. type: menuentry
#: symbols.texi.orig:32
msgid "A definition says how a symbol will be used."
msgstr ""

#. type: node
#: symbols.texi.orig:32 symbols.texi.orig:165
#, no-wrap
msgid "Creating Symbols"
msgstr ""

#. type: menuentry
#: symbols.texi.orig:32
msgid "How symbols are kept unique."
msgstr ""

#. type: section
#: symbols.texi.orig:32 symbols.texi.orig:380 symbols.texi.orig:381
#, no-wrap
msgid "Symbol Properties"
msgstr ""

#. type: menuentry
#: symbols.texi.orig:32
msgid "Each symbol has a property list for recording miscellaneous information."
msgstr ""

#. type: cindex
#: symbols.texi.orig:36
#, no-wrap
msgid "symbol components"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:40
msgid ""
"Each symbol has four components (or ``cells''), each of which references "
"another object:"
msgstr ""

#. type: item
#: symbols.texi.orig:42
#, no-wrap
msgid "Print name"
msgstr ""

#. type: cindex
#: symbols.texi.orig:43
#, no-wrap
msgid "print name cell"
msgstr ""

#. type: table
#: symbols.texi.orig:45
msgid "The symbol's name."
msgstr ""

#. type: item
#: symbols.texi.orig:46
#, no-wrap
msgid "Value"
msgstr ""

#. type: cindex
#: symbols.texi.orig:47
#, no-wrap
msgid "value cell"
msgstr ""

#. type: table
#: symbols.texi.orig:49
msgid "The symbol's current value as a variable."
msgstr ""

#. type: item
#: symbols.texi.orig:50
#, no-wrap
msgid "Function"
msgstr ""

#. type: cindex
#: symbols.texi.orig:51
#, no-wrap
msgid "function cell"
msgstr ""

#. type: table
#: symbols.texi.orig:54
msgid ""
"The symbol's function definition.  It can also hold a symbol, a keymap, or a "
"keyboard macro."
msgstr ""

#. type: item
#: symbols.texi.orig:55
#, no-wrap
msgid "Property list"
msgstr ""

#. type: cindex
#: symbols.texi.orig:56
#, no-wrap
msgid "property list cell"
msgstr ""

#. type: table
#: symbols.texi.orig:58
msgid "The symbol's property list."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:63
msgid ""
"The print name cell always holds a string, and cannot be changed.  Each of "
"the other three cells can be set to any Lisp object."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:71
msgid ""
"The print name cell holds the string that is the name of a symbol.  Since "
"symbols are represented textually by their names, it is important not to "
"have two symbols with the same name.  The Lisp reader ensures this: every "
"time it reads a symbol, it looks for an existing symbol with the specified "
"name before it creates a new one.  To get a symbol's name, use the function "
"@code{symbol-name} (@pxref{Creating Symbols})."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:81
msgid ""
"The value cell holds a symbol's value as a variable, which is what you get "
"if the symbol itself is evaluated as a Lisp expression.  @xref{Variables}, "
"for details about how values are set and retrieved, including complications "
"such as @dfn{local bindings} and @dfn{scoping rules}.  Most symbols can have "
"any Lisp object as a value, but certain special symbols have values that "
"cannot be changed; these include @code{nil} and @code{t}, and any symbol "
"whose name starts with @samp{:} (those are called @dfn{keywords}).  "
"@xref{Constant Variables}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:92
msgid ""
"The function cell holds a symbol's function definition.  Often, we refer to "
"``the function @code{foo}'' when we really mean the function stored in the "
"function cell of @code{foo}; we make the distinction explicit only when "
"necessary.  Typically, the function cell is used to hold a function "
"(@pxref{Functions}) or a macro (@pxref{Macros}).  However, it can also be "
"used to hold a symbol (@pxref{Function Indirection}), keyboard macro "
"(@pxref{Keyboard Macros}), keymap (@pxref{Keymaps}), or autoload object "
"(@pxref{Autoloading}).  To get the contents of a symbol's function cell, use "
"the function @code{symbol-function} (@pxref{Function Cells})."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:96
msgid ""
"The property list cell normally should hold a correctly formatted property "
"list.  To get a symbol's property list, use the function "
"@code{symbol-plist}.  @xref{Symbol Properties}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:102
msgid ""
"The function cell or the value cell may be @dfn{void}, which means that the "
"cell does not reference any object.  (This is not the same thing as holding "
"the symbol @code{void}, nor the same as holding the symbol @code{nil}.)  "
"Examining a function or value cell that is void results in an error, such as "
"@samp{Symbol's value as variable is void}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:108
msgid ""
"Because each symbol has separate value and function cells, variables names "
"and function names do not conflict.  For example, the symbol "
"@code{buffer-file-name} has a value (the name of the file being visited in "
"the current buffer) as well as a function definition (a primitive function "
"that returns the name of the file):"
msgstr ""

#. type: example
#: symbols.texi.orig:114
#, no-wrap
msgid ""
"buffer-file-name\n"
"     @result{} \"/gnu/elisp/symbols.texi\"\n"
"(symbol-function 'buffer-file-name)\n"
"     @result{} #<subr buffer-file-name>\n"
msgstr ""

#. type: section
#: symbols.texi.orig:117
#, no-wrap
msgid "Defining Symbols"
msgstr ""

#. type: cindex
#: symbols.texi.orig:118
#, no-wrap
msgid "definitions of symbols"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:126
msgid ""
"A @dfn{definition} is a special kind of Lisp expression that announces your "
"intention to use a symbol in a particular way.  It typically specifies a "
"value or meaning for the symbol for one kind of use, plus documentation for "
"its meaning when used in this way.  Thus, when you define a symbol as a "
"variable, you can supply an initial value for the variable, plus "
"documentation for the variable."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:133
msgid ""
"@code{defvar} and @code{defconst} are special forms that define a symbol as "
"a @dfn{global variable}---a variable that can be accessed at any point in a "
"Lisp program.  @xref{Variables}, for details about variables.  To define a "
"customizable variable, use the @code{defcustom} macro, which also calls "
"@code{defvar} as a subroutine (@pxref{Customization})."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:140
msgid ""
"In principle, you can assign a variable value to any symbol with "
"@code{setq}, whether not it has first been defined as a variable.  However, "
"you ought to write a variable definition for each global variable that you "
"want to use; otherwise, your Lisp program may not act correctly if it is "
"evaluated with lexical scoping enabled (@pxref{Variable Scoping})."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:148
msgid ""
"@code{defun} defines a symbol as a function, creating a lambda expression "
"and storing it in the function cell of the symbol.  This lambda expression "
"thus becomes the function definition of the symbol.  (The term ``function "
"definition'', meaning the contents of the function cell, is derived from the "
"idea that @code{defun} gives the symbol its definition as a function.)  "
"@code{defsubst} and @code{defalias} are two other ways of defining a "
"function.  @xref{Functions}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:155
msgid ""
"@code{defmacro} defines a symbol as a macro.  It creates a macro object and "
"stores it in the function cell of the symbol.  Note that a given symbol can "
"be a macro or a function, but not both at once, because both macro and "
"function definitions are kept in the function cell, and that cell can hold "
"only one Lisp object at any given time.  @xref{Macros}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:159
msgid ""
"As previously noted, Emacs Lisp allows the same symbol to be defined both as "
"a variable (e.g., with @code{defvar}) and as a function or macro (e.g., with "
"@code{defun}).  Such definitions do not conflict."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:164
msgid ""
"These definition also act as guides for programming tools.  For example, the "
"@kbd{C-h f} and @kbd{C-h v} commands create help buffers containing links to "
"the relevant variable, function, or macro definitions.  @xref{Name Help,,, "
"emacs, The GNU Emacs Manual}."
msgstr ""

#. type: section
#: symbols.texi.orig:166
#, no-wrap
msgid "Creating and Interning Symbols"
msgstr ""

#. type: cindex
#: symbols.texi.orig:167
#, no-wrap
msgid "reading symbols"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:173
msgid ""
"To understand how symbols are created in GNU Emacs Lisp, you must know how "
"Lisp reads them.  Lisp must ensure that it finds the same symbol every time "
"it reads the same set of characters.  Failure to do so would cause complete "
"confusion."
msgstr ""

#. type: cindex
#: symbols.texi.orig:174
#, no-wrap
msgid "symbol name hashing"
msgstr ""

#. type: cindex
#: symbols.texi.orig:175
#, no-wrap
msgid "hashing"
msgstr ""

#. type: defvar
#: symbols.texi.orig:176 symbols.texi.orig:338
#, no-wrap
msgid "obarray"
msgstr ""

#. type: cindex
#: symbols.texi.orig:177
#, no-wrap
msgid "bucket (in obarray)"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:189
msgid ""
"When the Lisp reader encounters a symbol, it reads all the characters of the "
"name.  Then it ``hashes'' those characters to find an index in a table "
"called an @dfn{obarray}.  Hashing is an efficient method of looking "
"something up.  For example, instead of searching a telephone book cover to "
"cover when looking up Jan Jones, you start with the J's and go from there.  "
"That is a simple version of hashing.  Each element of the obarray is a "
"@dfn{bucket} which holds all the symbols with a given hash code; to look for "
"a given name, it is sufficient to look through all the symbols in the bucket "
"for that name's hash code.  (The same idea is used for general Emacs hash "
"tables, but they are a different data type; see @ref{Hash Tables}.)"
msgstr ""

#. type: cindex
#: symbols.texi.orig:190
#, no-wrap
msgid "interning"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:196
msgid ""
"If a symbol with the desired name is found, the reader uses that symbol.  If "
"the obarray does not contain a symbol with that name, the reader makes a new "
"symbol and adds it to the obarray.  Finding or adding a symbol with a "
"certain name is called @dfn{interning} it, and the symbol is then called an "
"@dfn{interned symbol}."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:201
msgid ""
"Interning ensures that each obarray has just one symbol with any particular "
"name.  Other like-named symbols may exist, but not in the same obarray.  "
"Thus, the reader gets the same symbols for the same names, as long as you "
"keep reading with the same obarray."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:206
msgid ""
"Interning usually happens automatically in the reader, but sometimes other "
"programs need to do it.  For example, after the @kbd{M-x} command obtains "
"the command name as a string using the minibuffer, it then interns the "
"string, to get the interned symbol with that name."
msgstr ""

#. type: cindex
#: symbols.texi.orig:207
#, no-wrap
msgid "symbol equality"
msgstr ""

#. type: cindex
#: symbols.texi.orig:208
#, no-wrap
msgid "uninterned symbol"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:214
msgid ""
"No obarray contains all symbols; in fact, some symbols are not in any "
"obarray.  They are called @dfn{uninterned symbols}.  An uninterned symbol "
"has the same four cells as other symbols; however, the only way to gain "
"access to it is by finding it in some other object or as the value of a "
"variable."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:218
msgid ""
"Creating an uninterned symbol is useful in generating Lisp code, because an "
"uninterned symbol used as a variable in the code you generate cannot clash "
"with any variables used in other Lisp programs."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:226
msgid ""
"In Emacs Lisp, an obarray is actually a vector.  Each element of the vector "
"is a bucket; its value is either an interned symbol whose name hashes to "
"that bucket, or 0 if the bucket is empty.  Each interned symbol has an "
"internal link (invisible to the user) to the next symbol in the bucket.  "
"Because these links are invisible, there is no way to find all the symbols "
"in an obarray except using @code{mapatoms} (below).  The order of symbols in "
"a bucket is not significant."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:232
msgid ""
"In an empty obarray, every element is 0, so you can create an obarray with "
"@code{(make-vector @var{length} 0)}.  @strong{This is the only valid way to "
"create an obarray.} Prime numbers as lengths tend to result in good hashing; "
"lengths one less than a power of two are also good."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:235
msgid ""
"@strong{Do not try to put symbols in an obarray yourself.} This does not "
"work---only @code{intern} can enter a symbol in an obarray properly."
msgstr ""

#. type: cindex
#: symbols.texi.orig:236
#, no-wrap
msgid "CL note---symbol in obarrays"
msgstr ""

#. type: quotation
#: symbols.texi.orig:240
msgid ""
"@b{Common Lisp note:} Unlike Common Lisp, Emacs Lisp does not provide for "
"interning a single symbol in several obarrays."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:245
msgid ""
"Most of the functions below take a name and sometimes an obarray as "
"arguments.  A @code{wrong-type-argument} error is signaled if the name is "
"not a string, or if the obarray is not a vector."
msgstr ""

#. type: defun
#: symbols.texi.orig:246
#, no-wrap
msgid "symbol-name symbol"
msgstr ""

#. type: defun
#: symbols.texi.orig:248
msgid "This function returns the string that is @var{symbol}'s name.  For example:"
msgstr ""

#. type: group
#: symbols.texi.orig:253
#, no-wrap
msgid ""
"(symbol-name 'foo)\n"
"     @result{} \"foo\"\n"
msgstr ""

#. type: defun
#: symbols.texi.orig:259
msgid ""
"@strong{Warning:} Changing the string by substituting characters does change "
"the name of the symbol, but fails to update the obarray, so don't do it!"
msgstr ""

#. type: defun
#: symbols.texi.orig:261
#, no-wrap
msgid "make-symbol name"
msgstr ""

#. type: defun
#: symbols.texi.orig:267
msgid ""
"This function returns a newly-allocated, uninterned symbol whose name is "
"@var{name} (which must be a string).  Its value and function definition are "
"void, and its property list is @code{nil}.  In the example below, the value "
"of @code{sym} is not @code{eq} to @code{foo} because it is a distinct "
"uninterned symbol whose name is also @samp{foo}."
msgstr ""

#. type: example
#: symbols.texi.orig:273
#, no-wrap
msgid ""
"(setq sym (make-symbol \"foo\"))\n"
"     @result{} foo\n"
"(eq sym 'foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: defun
#: symbols.texi.orig:276
#, no-wrap
msgid "intern name &optional obarray"
msgstr ""

#. type: defun
#: symbols.texi.orig:282
msgid ""
"This function returns the interned symbol whose name is @var{name}.  If "
"there is no such symbol in the obarray @var{obarray}, @code{intern} creates "
"a new one, adds it to the obarray, and returns it.  If @var{obarray} is "
"omitted, the value of the global variable @code{obarray} is used."
msgstr ""

#. type: example
#: symbols.texi.orig:288
#, no-wrap
msgid ""
"(setq sym (intern \"foo\"))\n"
"     @result{} foo\n"
"(eq sym 'foo)\n"
"     @result{} t\n"
"\n"
msgstr ""

#. type: example
#: symbols.texi.orig:293
#, no-wrap
msgid ""
"(setq sym1 (intern \"foo\" other-obarray))\n"
"     @result{} foo\n"
"(eq sym1 'foo)\n"
"     @result{} nil\n"
msgstr ""

#. type: cindex
#: symbols.texi.orig:296
#, no-wrap
msgid "CL note---interning existing symbol"
msgstr ""

#. type: quotation
#: symbols.texi.orig:301
msgid ""
"@b{Common Lisp note:} In Common Lisp, you can intern an existing symbol in "
"an obarray.  In Emacs Lisp, you cannot do this, because the argument to "
"@code{intern} must be a string, not a symbol."
msgstr ""

#. type: defun
#: symbols.texi.orig:303
#, no-wrap
msgid "intern-soft name &optional obarray"
msgstr ""

#. type: defun
#: symbols.texi.orig:309
msgid ""
"This function returns the symbol in @var{obarray} whose name is @var{name}, "
"or @code{nil} if @var{obarray} has no symbol with that name.  Therefore, you "
"can use @code{intern-soft} to test whether a symbol with a given name is "
"already interned.  If @var{obarray} is omitted, the value of the global "
"variable @code{obarray} is used."
msgstr ""

#. type: defun
#: symbols.texi.orig:313
msgid ""
"The argument @var{name} may also be a symbol; in that case, the function "
"returns @var{name} if @var{name} is interned in the specified obarray, and "
"otherwise @code{nil}."
msgstr ""

#. type: example
#: symbols.texi.orig:319
#, no-wrap
msgid ""
"(intern-soft \"frazzle\")        ; @r{No such symbol exists.}\n"
"     @result{} nil\n"
"(make-symbol \"frazzle\")        ; @r{Create an uninterned one.}\n"
"     @result{} frazzle\n"
msgstr ""

#. type: group
#: symbols.texi.orig:322
#, no-wrap
msgid ""
"(intern-soft \"frazzle\")        ; @r{That one cannot be found.}\n"
"     @result{} nil\n"
msgstr ""

#. type: group
#: symbols.texi.orig:326
#, no-wrap
msgid ""
"(setq sym (intern \"frazzle\"))  ; @r{Create an interned one.}\n"
"     @result{} frazzle\n"
msgstr ""

#. type: group
#: symbols.texi.orig:330
#, no-wrap
msgid ""
"(intern-soft \"frazzle\")        ; @r{That one can be found!}\n"
"     @result{} frazzle\n"
msgstr ""

#. type: group
#: symbols.texi.orig:334
#, no-wrap
msgid ""
"(eq sym 'frazzle)              ; @r{And it is the same one.}\n"
"     @result{} t\n"
msgstr ""

#. type: defvar
#: symbols.texi.orig:341
msgid ""
"This variable is the standard obarray for use by @code{intern} and "
"@code{read}."
msgstr ""

#. type: defun
#: symbols.texi.orig:343
#, no-wrap
msgid "mapatoms function &optional obarray"
msgstr ""

#. type: anchor{#1}
#: symbols.texi.orig:349
msgid "Definition of mapatoms"
msgstr ""

#. type: defun
#: symbols.texi.orig:349
msgid ""
"This function calls @var{function} once with each symbol in the obarray "
"@var{obarray}.  Then it returns @code{nil}.  If @var{obarray} is omitted, it "
"defaults to the value of @code{obarray}, the standard obarray for ordinary "
"symbols."
msgstr ""

#. type: example
#: symbols.texi.orig:360
#, no-wrap
msgid ""
"(setq count 0)\n"
"     @result{} 0\n"
"(defun count-syms (s)\n"
"  (setq count (1+ count)))\n"
"     @result{} count-syms\n"
"(mapatoms 'count-syms)\n"
"     @result{} nil\n"
"count\n"
"     @result{} 1871\n"
msgstr ""

#. type: defun
#: symbols.texi.orig:364
msgid ""
"See @code{documentation} in @ref{Accessing Documentation}, for another "
"example using @code{mapatoms}."
msgstr ""

#. type: defun
#: symbols.texi.orig:366
#, no-wrap
msgid "unintern symbol obarray"
msgstr ""

#. type: defun
#: symbols.texi.orig:370
msgid ""
"This function deletes @var{symbol} from the obarray @var{obarray}.  If "
"@code{symbol} is not actually in the obarray, @code{unintern} does nothing.  "
"If @var{obarray} is @code{nil}, the current obarray is used."
msgstr ""

#. type: defun
#: symbols.texi.orig:375
msgid ""
"If you provide a string instead of a symbol as @var{symbol}, it stands for a "
"symbol name.  Then @code{unintern} deletes the symbol (if any) in the "
"obarray which has that name.  If there is no such symbol, @code{unintern} "
"does nothing."
msgstr ""

#. type: defun
#: symbols.texi.orig:378
msgid ""
"If @code{unintern} does delete a symbol, it returns @code{t}.  Otherwise it "
"returns @code{nil}."
msgstr ""

#. type: cindex
#: symbols.texi.orig:382
#, no-wrap
msgid "symbol property"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:389
msgid ""
"A symbol may possess any number of @dfn{symbol properties}, which can be "
"used to record miscellaneous information about the symbol.  For example, "
"when a symbol has a @code{risky-local-variable} property with a "
"non-@code{nil} value, that means the variable which the symbol names is a "
"risky file-local variable (@pxref{File Local Variables})."
msgstr ""

#. type: Plain text
#: symbols.texi.orig:393
msgid ""
"Each symbol's properties and property values are stored in the symbol's "
"property list cell (@pxref{Symbol Components}), in the form of a property "
"list (@pxref{Property Lists})."
msgstr ""

#. type: node
#: symbols.texi.orig:397 symbols.texi.orig:399
#, no-wrap
msgid "Symbol Plists"
msgstr ""

#. type: menuentry
#: symbols.texi.orig:397
msgid "Accessing symbol properties."
msgstr ""

#. type: node
#: symbols.texi.orig:397 symbols.texi.orig:470
#, no-wrap
msgid "Standard Properties"
msgstr ""

#. type: menuentry
#: symbols.texi.orig:397
msgid "Standard meanings of symbol properties."
msgstr ""

#. type: subsection
#: symbols.texi.orig:400
#, no-wrap
msgid "Accessing Symbol Properties"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:403
msgid "The following functions can be used to access symbol properties."
msgstr ""

#. type: defun
#: symbols.texi.orig:404
#, no-wrap
msgid "get symbol property"
msgstr ""

#. type: defun
#: symbols.texi.orig:409
msgid ""
"This function returns the value of the property named @var{property} in "
"@var{symbol}'s property list.  If there is no such property, it returns "
"@code{nil}.  Thus, there is no distinction between a value of @code{nil} and "
"the absence of the property."
msgstr ""

#. type: defun
#: symbols.texi.orig:412
msgid ""
"The name @var{property} is compared with the existing property names using "
"@code{eq}, so any object is a legitimate property."
msgstr ""

#. type: defun
#: symbols.texi.orig:414
msgid "See @code{put} for an example."
msgstr ""

#. type: defun
#: symbols.texi.orig:416
#, no-wrap
msgid "put symbol property value"
msgstr ""

#. type: defun
#: symbols.texi.orig:420
msgid ""
"This function puts @var{value} onto @var{symbol}'s property list under the "
"property name @var{property}, replacing any previous property value.  The "
"@code{put} function returns @var{value}."
msgstr ""

#. type: example
#: symbols.texi.orig:430
#, no-wrap
msgid ""
"(put 'fly 'verb 'transitive)\n"
"     @result{}'transitive\n"
"(put 'fly 'noun '(a buzzing little bug))\n"
"     @result{} (a buzzing little bug)\n"
"(get 'fly 'verb)\n"
"     @result{} transitive\n"
"(symbol-plist 'fly)\n"
"     @result{} (verb transitive noun (a buzzing little bug))\n"
msgstr ""

#. type: defun
#: symbols.texi.orig:433
#, no-wrap
msgid "symbol-plist symbol"
msgstr ""

#. type: defun
#: symbols.texi.orig:435
msgid "This function returns the property list of @var{symbol}."
msgstr ""

#. type: defun
#: symbols.texi.orig:437
#, no-wrap
msgid "setplist symbol plist"
msgstr ""

#. type: defun
#: symbols.texi.orig:441
msgid ""
"This function sets @var{symbol}'s property list to @var{plist}.  Normally, "
"@var{plist} should be a well-formed property list, but this is not "
"enforced.  The return value is @var{plist}."
msgstr ""

#. type: example
#: symbols.texi.orig:447
#, no-wrap
msgid ""
"(setplist 'foo '(a 1 b (2 3) c nil))\n"
"     @result{} (a 1 b (2 3) c nil)\n"
"(symbol-plist 'foo)\n"
"     @result{} (a 1 b (2 3) c nil)\n"
msgstr ""

#. type: defun
#: symbols.texi.orig:453
msgid ""
"For symbols in special obarrays, which are not used for ordinary purposes, "
"it may make sense to use the property list cell in a nonstandard fashion; in "
"fact, the abbrev mechanism does so (@pxref{Abbrevs})."
msgstr ""

#. type: defun
#: symbols.texi.orig:456
msgid ""
"You could define @code{put} in terms of @code{setplist} and "
"@code{plist-put}, as follows:"
msgstr ""

#. type: example
#: symbols.texi.orig:461
#, no-wrap
msgid ""
"(defun put (symbol prop value)\n"
"  (setplist symbol\n"
"            (plist-put (symbol-plist symbol) prop value)))\n"
msgstr ""

#. type: defun
#: symbols.texi.orig:464
#, no-wrap
msgid "function-get symbol property"
msgstr ""

#. type: defun
#: symbols.texi.orig:468
msgid ""
"This function is identical to @code{get}, except that if @var{symbol} is the "
"name of a function alias, it looks in the property list of the symbol naming "
"the actual function.  @xref{Defining Functions}."
msgstr ""

#. type: subsection
#: symbols.texi.orig:471
#, no-wrap
msgid "Standard Symbol Properties"
msgstr ""

#. type: Plain text
#: symbols.texi.orig:477
msgid ""
"Here, we list the symbol properties which are used for special purposes in "
"Emacs.  In the following table, whenever we say ``the named function'', that "
"means the function whose name is the relevant symbol; similarly for ``the "
"named variable'' etc."
msgstr ""

#. type: item
#: symbols.texi.orig:479
#, no-wrap
msgid ":advertised-binding"
msgstr ""

#. type: table
#: symbols.texi.orig:482
msgid ""
"This property value specifies the preferred key binding, when showing "
"documentation, for the named function.  @xref{Keys in Documentation}."
msgstr ""

#. type: item
#: symbols.texi.orig:483
#, no-wrap
msgid "char-table-extra-slots"
msgstr ""

#. type: table
#: symbols.texi.orig:486
msgid ""
"The value, if non-@code{nil}, specifies the number of extra slots in the "
"named char-table type.  @xref{Char-Tables}."
msgstr ""

#. type: item
#: symbols.texi.orig:487
#, no-wrap
msgid "customized-face"
msgstr ""

#. type: itemx
#: symbols.texi.orig:488
#, no-wrap
msgid "face-defface-spec"
msgstr ""

#. type: itemx
#: symbols.texi.orig:489
#, no-wrap
msgid "saved-face"
msgstr ""

#. type: itemx
#: symbols.texi.orig:490
#, no-wrap
msgid "theme-face"
msgstr ""

#. type: table
#: symbols.texi.orig:495
msgid ""
"These properties are used to record a face's standard, saved, customized, "
"and themed face specs.  Do not set them directly; they are managed by "
"@code{defface} and related functions.  @xref{Defining Faces}."
msgstr ""

#. type: item
#: symbols.texi.orig:496
#, no-wrap
msgid "customized-value"
msgstr ""

#. type: itemx
#: symbols.texi.orig:497
#, no-wrap
msgid "saved-value"
msgstr ""

#. type: itemx
#: symbols.texi.orig:498
#, no-wrap
msgid "standard-value"
msgstr ""

#. type: itemx
#: symbols.texi.orig:499
#, no-wrap
msgid "theme-value"
msgstr ""

#. type: table
#: symbols.texi.orig:504
msgid ""
"These properties are used to record a customizable variable's standard "
"value, saved value, customized-but-unsaved value, and themed values.  Do not "
"set them directly; they are managed by @code{defcustom} and related "
"functions.  @xref{Variable Definitions}."
msgstr ""

#. type: item
#: symbols.texi.orig:505
#, no-wrap
msgid "disabled"
msgstr ""

#. type: table
#: symbols.texi.orig:508
msgid ""
"If the value is non-@code{nil}, the named function is disabled as a "
"command.  @xref{Disabling Commands}."
msgstr ""

#. type: item
#: symbols.texi.orig:509
#, no-wrap
msgid "face-documentation"
msgstr ""

#. type: table
#: symbols.texi.orig:512
msgid ""
"The value stores the documentation string of the named face.  This is set "
"automatically by @code{defface}.  @xref{Defining Faces}."
msgstr ""

#. type: item
#: symbols.texi.orig:513
#, no-wrap
msgid "history-length"
msgstr ""

#. type: table
#: symbols.texi.orig:517
msgid ""
"The value, if non-@code{nil}, specifies the maximum minibuffer history "
"length for the named history list variable.  @xref{Minibuffer History}."
msgstr ""

#. type: item
#: symbols.texi.orig:518
#, no-wrap
msgid "interactive-form"
msgstr ""

#. type: table
#: symbols.texi.orig:522
msgid ""
"The value is an interactive form for the named function.  Normally, you "
"should not set this directly; use the @code{interactive} special form "
"instead.  @xref{Interactive Call}."
msgstr ""

#. type: item
#: symbols.texi.orig:523
#, no-wrap
msgid "menu-enable"
msgstr ""

#. type: table
#: symbols.texi.orig:526
msgid ""
"The value is an expression for determining whether the named menu item "
"should be enabled in menus.  @xref{Simple Menu Items}."
msgstr ""

#. type: item
#: symbols.texi.orig:527
#, no-wrap
msgid "mode-class"
msgstr ""

#. type: table
#: symbols.texi.orig:530
msgid ""
"If the value is @code{special}, the named major mode is ``special''.  "
"@xref{Major Mode Conventions}."
msgstr ""

#. type: item
#: symbols.texi.orig:531
#, no-wrap
msgid "permanent-local"
msgstr ""

#. type: table
#: symbols.texi.orig:535
msgid ""
"If the value is non-@code{nil}, the named variable is a buffer-local "
"variable whose value should not be reset when changing major modes.  "
"@xref{Creating Buffer-Local}."
msgstr ""

#. type: item
#: symbols.texi.orig:536
#, no-wrap
msgid "permanent-local-hook"
msgstr ""

#. type: table
#: symbols.texi.orig:540
msgid ""
"If the value is non-@code{nil}, the named function should not be deleted "
"from the local value of a hook variable when changing major modes.  "
"@xref{Setting Hooks}."
msgstr ""

#. type: item
#: symbols.texi.orig:541
#, no-wrap
msgid "pure"
msgstr ""

#. type: table
#: symbols.texi.orig:545
msgid ""
"If the value is non-@code{nil}, the named function is considered to be "
"side-effect free.  Calls with constant arguments can be evaluated at compile "
"time.  This may shift run time errors to compile time."
msgstr ""

#. type: item
#: symbols.texi.orig:546
#, no-wrap
msgid "risky-local-variable"
msgstr ""

#. type: table
#: symbols.texi.orig:549
msgid ""
"If the value is non-@code{nil}, the named variable is considered risky as a "
"file-local variable.  @xref{File Local Variables}."
msgstr ""

#. type: item
#: symbols.texi.orig:550
#, no-wrap
msgid "safe-function"
msgstr ""

#. type: table
#: symbols.texi.orig:553
msgid ""
"If the value is non-@code{nil}, the named function is considered generally "
"safe for evaluation.  @xref{Function Safety}."
msgstr ""

#. type: item
#: symbols.texi.orig:554
#, no-wrap
msgid "safe-local-eval-function"
msgstr ""

#. type: table
#: symbols.texi.orig:557
msgid ""
"If the value is non-@code{nil}, the named function is safe to call in "
"file-local evaluation forms.  @xref{File Local Variables}."
msgstr ""

#. type: item
#: symbols.texi.orig:558
#, no-wrap
msgid "safe-local-variable"
msgstr ""

#. type: table
#: symbols.texi.orig:561
msgid ""
"The value specifies a function for determining safe file-local values for "
"the named variable.  @xref{File Local Variables}."
msgstr ""

#. type: item
#: symbols.texi.orig:562
#, no-wrap
msgid "side-effect-free"
msgstr ""

#. type: table
#: symbols.texi.orig:566
msgid ""
"A non-@code{nil} value indicates that the named function is free of "
"side-effects, for determining function safety (@pxref{Function Safety}) as "
"well as for byte compiler optimizations.  Do not set it."
msgstr ""

#. type: item
#: symbols.texi.orig:567
#, no-wrap
msgid "variable-documentation"
msgstr ""

#. type: table
#: symbols.texi.orig:571
msgid ""
"If non-@code{nil}, this specifies the named variable's documentation "
"string.  This is set automatically by @code{defvar} and related functions.  "
"@xref{Defining Faces}."
msgstr ""
