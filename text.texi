@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-2015 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Text
@chapter Text
@cindex text

  このチャプターでは、バッファー内のテキストを扱う関数を説明します。ほとんどはカレントバッファー内のテキストにたいして検査、挿入、削除を行い、ポイント位置やポイントに隣接するテキストを操作することが多々あります。その多くはインタラクティブ(interactive:
対話的)です。テキストを変更するすべての関数は、その変更にたいするundo(アンドゥ、取り消し)を提供します(@ref{Undo}を参照)。

  テキストに関連する関数の多くが、@var{start}および@var{end}という名前の引数として渡された、2つのバッファー位置により定義された、テキストのリージョンを操作します。これらの引数は、マーカー(@ref{Markers}を参照)か、数値的な文字位置(@ref{Positions}を参照)のいずれかであるべきです。これらの引数の順序は関係ありません。@var{start}がリージョンの終端で、@var{end}がリージョンの先頭であっても、何も問題はないのです。たとえば、@code{(delete-region
1 10)}と@code{(delete-region 10
1)}は等価です。@var{start}と@var{end}のいずれかが、バッファーのアクセス可能範囲の外部なら、@code{args-out-of-range}エラーがシグナルされます。インタラクティブな呼び出しでは、これらの引数にポイントとマークが使用されます。

@cindex buffer contents
  このチャプターを通じて、``テキスト(text)''とは(関係あるときは)そのプロパティも含めた、バッファー内の文字を意味します。ポイントは常に2つの文字の間にあり、カーソルはポイントの後の文字上に表示されることを覚えておいてください。

@menu
* Near Point::               ポイント付近のテキストを調べる。
* Buffer Contents::          一般的な方法によってテキストを調べる。
* Comparing Text::           バッファーの部分文字列を比較する。
* Insertion::                バッファーへの新たなテキストの追加。
* Commands for Insertion::   テキスト挿入のためのユーザーレベルコマンド。
* Deletion::                 バッファーからテキストを削除する。
* User-Level Deletion::      テキスト削除のためのユーザーレベルコマンド。
* The Kill Ring::            テキスト削除時にユーザーのためにそれを保存する場所。
* Undo::                     バッファーのテキストにたいする変更の取り消し。
* Maintaining Undo::         undo情報の有効と無効。情報をどれだけ保持するか制御する方法。
* Filling::                  明示的にフィルを行う関数。
* Margins::                  フィルコマンドにたいしてマージンを指定する方法。
* Adaptive Fill::            コンテキストからフィルプレフィクスを選択するAdaptive 
                               Fillモード。
* Auto Filling::             行ブレークにたいするauto-fillの実装方法。
* Sorting::                  バッファーの一部をソートする関数。
* Columns::                  水平位置の計算とその使用方法。
* Indentation::              インデントの挿入や調整のための関数。
* Case Changes::             バッファーの一部にたいする大文字小文字変換。
* Text Properties::          テキスト文字にたいするLispプロパティリストの追加。
* Substitution::             与ええられた文字の出現箇所を置換する。
* Registers::                レジスターの実装方法。レジスターに格納されたテキストや位置にアクセスする。
* Transposition::            バッファーの2つの部分を交換する。
* Decompression::            圧縮データの扱い。
* Base 64::                  Base64エンコーディングとの変換。
* Checksum/Hash::            暗号ハッシュの計算。
* Parsing HTML/XML::         HTMLおよびXMLの解析。
* Atomic Changes::           複数バッファーへの変更を"アトミック"にインストールする。
* Change Hooks::             テキスト変更時に実行する関数の指定。
@end menu

@node Near Point
@section Examining Text Near Point
@cindex text near point

  ポイント付近にある文字を調べるための関数が、数多く提供されています。簡単な関数のいくつかは、ここで説明します。@ref{Regexp
Search}の@code{looking-at}も参照してください。

以下の4つの関数においてバッファーの``先頭(beginning)''と``終端(end)''はそれぞれ、アクセス可能範囲の先頭と終端を意味します。

@defun char-after &optional position
この関数は、カレントバッファーの位置@var{position}(つまり直後)の文字をリターンする。@var{position}が、この目的にたいする範囲の外にある場合、すなわちバッファーの先頭より前、またはバッファーの終端以降にある場合、値は@code{nil}となる。@var{position}のデフォルトは、ポイントである。

以下の例では、バッファーの最初の文字が@samp{@@}であると仮定する:

@example
@group
(string (char-after 1))
     @result{} "@@"
@end group
@end example
@end defun

@defun char-before &optional position
この関数は、カレントバッファーの位置@var{position}の直前の文字をリターンする。@var{position}が、この目的にたいする範囲の外にある場合、すなわちバッファーの先頭より前、またはバッファーの終端より後にある場合、値は@code{nil}となる。@var{position}のデフォルトは、ポイントである。
@end defun

@defun following-char
この関数は、カレントバッファーのポイントの後にある文字をリターンする。これは@code{(char-after
(point))}と同様。ただし、ポイントがバッファー終端にある場合、@code{following-char}は0をリターンする。

ポイントが常に2文字間にあり、通常カーソルはポイント後の文字上に表示されることを思い出していただきたい。したがって、@code{following-char}がリターンする文字は、カーソル上の文字となる。

以下の例では、@samp{a}と@samp{c}の間にポイントがある。

@example
@group
---------- Buffer: foo ----------
Gentlemen may cry ``Pea@point{}ce! Peace!,''
but there is no peace.
---------- Buffer: foo ----------
@end group

@group
(string (preceding-char))
     @result{} "a"
(string (following-char))
     @result{} "c"
@end group
@end example
@end defun

@defun preceding-char
この関数は、カレントバッファーのポイントの前の文字をリターンする。上記@code{following-char}の下の例を参照されたい。ポイントがバッファー先頭にある場合、@code{preceding-char}は0をリターンする。
@end defun

@defun bobp
この関数は、ポイントがバッファー先頭にあれば@code{t}をリターンする。ナローイングが効力をもつ場合、これはテキストのアクセス可能範囲の先頭を意味する。@ref{Point}の@code{point-min}も参照のこと。
@end defun

@defun eobp
この関数は、ポイントがバッファー終端にあれば@code{t}をリターンする。ナローイングが効力をもつ場合、これはテキストのアクセス可能範囲の終端を意味する。@ref{Point}の@code{point-max}も参照のこと。
@end defun

@defun bolp
この関数は、ポイントが行の先頭にあれば@code{t}をリターンする。@ref{Text
Lines}を参照のこと。バッファー(またはアクセス可能範囲)の先頭は、常に行の先頭とみなされる。
@end defun

@defun eolp
この関数は、ポイントが行の終端にあれば@code{t}をリターンする。@ref{Text
Lines}を参照のこと。バッファー(またはアクセス可能範囲)の終端は、常に行の先頭とみなされる。
@end defun

@node Buffer Contents
@section Examining Buffer Contents
@cindex buffer portion as string

  このセクションでは、Lispプログラムがバッファー内の任意の範囲のテキストを、文字列に変換するための関数を説明します。

@defun buffer-substring start end
この関数は、カレントバッファー内の位置@var{start}と@var{end}で定義されるリージョンのテキストのコピーを含む文字列をリターンする。引数がバッファーのアクセス可能範囲内の位置でない場合、@code{buffer-substring}は@code{args-out-of-range}エラーをリターンする。

以下の例では、Font-Lockモードが有効でないものとする:

@example
@group
---------- Buffer: foo ----------
This is the contents of buffer foo

---------- Buffer: foo ----------
@end group

@group
(buffer-substring 1 10)
     @result{} "This is t"
@end group
@group
(buffer-substring (point-max) 10)
     @result{} "he contents of buffer foo\n"
@end group
@end example

コピーされるテキストが何らかのテキストプロパティをもっていた場合、それらのプロパティが属す文字とともに文字列にコピーされる。しかし、バッファー内のオーバーレイ(@ref{Overlays}を参照)、およびそれらのプロパティは無視されるため、コピーされない。

たとえば、Font-Lockモードが有効なら、以下のような結果を得るだろう:

@example
@group
(buffer-substring 1 10)
     @result{} #("This is t" 0 1 (fontified t) 1 9 (fontified t))
@end group
@end example
@end defun

@defun buffer-substring-no-properties start end
これは@code{buffer-substring}と同様だが、テキストプロパティはコピーせず、文字自体だけをコピーする点が異なる。@ref{Text
Properties}を参照のこと。
@end defun

@defun buffer-string
この関数は、カレントバッファーのアクセス可能範囲全体のコンテンツを、文字列としてリターンする。
@end defun

@defun filter-buffer-substring start end &optional delete
この関数は、変数@code{filter-buffer-substring-function}により指定された関数を使用して、@var{start}と@var{end}の間のバッファーテキストをフィルターし、その結果をリターンする。

デフォルトのフィルター関数は時代遅れとなったラッパーフック@code{filter-buffer-substring-functions}、および同様に時代遅れとなった変数@code{buffer-substring-filters}を参照する。これら両者が@code{nil}なら、バッファーから未変更のテキスト、すなわち@code{buffer-substring}がリターンするであろうテキストをリターンする。

@var{delete}が非@code{nil}なら、この関数は@code{delete-and-extract-region}と同様、コピー後に@var{start}と@var{end}の間のテキストを削除する。

Lispコードは、killリング、Xクリップボード、レジスターのようなユーザーがアクセス可能なデータ構造内にコピーする際は@code{buffer-substring}、@code{buffer-substring-no-properties}、@code{delete-and-extract-region}のかわりにこの関数を使用するべきである。メジャーモードおよびマイナーモードは、バッファー外部にコピーするテキストを変更するために@code{filter-buffer-substring-function}を変更することができる。
@end defun

@defvar filter-buffer-substring-function
この変数の値は、実際の処理を行うために@code{filter-buffer-substring}が呼び出す関数である。その関数は、@code{filter-buffer-substring}と同じように3つの引数を受けとり、それらは@code{filter-buffer-substring}にドキュメントされているように扱われるべきである。関数は、フィルターされたテキストをリターン(およびオプションでソーステキストを削除)すること。
@end defvar

@noindent
以下の2つの変数は、@code{filter-buffer-substring-function}により時代遅れになりましたが、後方互換のために依然サポートされます。

@defvar filter-buffer-substring-functions
これは時代遅れとなったラッパーフックであり、このフックのメンバーは@var{fun}、@var{start}、@var{end}、@var{delete}の4つの引数を受け取る関数であること。@var{fun}は3つの引数(@var{start}、@var{end}、@var{delete})をとり、文字列をリターンする関数である。両者とも、引数@var{start}、@var{end}、@var{delete}は@code{filter-buffer-substring}のときと同様の意味をもつ。

1つ目のフック関数は@code{filter-buffer-substring}のデフォルトの処理と同じく@var{start}と@var{end}の間の(任意の@code{buffer-substring-filters}により処理された)バッファー部分文字列をリターンし、オプションでバッファーから元テキストを削除する関数で、それが@var{fun}に渡される。ほとんどの場合、フック関数は@var{fun}を1回だけ呼び出してから、その結果にたいして自身の処理を行う。次のフック関数はこれと等しい@var{fun}を受け取り、順次それが繰り返されていく。実際のリターン値は、すべてのフック関数が順次処理した結果である。
@end defvar

@defvar buffer-substring-filters
時代遅れとなったこの変数の値は、文字列を唯一の引数ちして別の文字列をリターンする関数のリストであること。デフォルトの@code{filter-buffer-substring}関数は、バッファー部分文字列をこのリストの1つ目の関数に渡し、そのリターン値を次の関数に渡して、それぞれの関数にたいしてこれが順次繰り返される。最後の関数のリターン値は、@code{filter-buffer-substring-functions}に渡される。
@end defvar

@defun current-word &optional strict really-word
この関数は、ポイント位置またはその付近のシンボル(または単語)を、文字列としてリターンする。リターン値にはテキストプロパティは含まれない。

オプション引数@var{really-word}が非@code{nil}なら単語、それ以外はシンボル(単語文字とシンボル構成文字の両方を含む)を探す。

オプション引数@var{strict}が非@code{nil}の場合、ポイントは単語(またはシンボル)の内部にあるか隣接しなければならない。そこに単語(またはシンボル)がなければ、この関数は@code{nil}をリターンする。@var{strict}が@code{nil}なら、ポイントと同一行にある近接する単語(またはシンボル)が許容される。
@end defun

@defun thing-at-point thing
ポイントに隣接または周辺にある@var{thing}を、文字列としてリターンする。

引数@var{thing}は、構文エンティティの種別を指定するシンボルである。可能なシンボルとしては@code{symbol}、@code{list}、@code{sexp}、@code{defun}、@code{filename}、@code{url}、@code{word}、@code{sentence}、@code{whitespace}、@code{line}、@code{page}、その他が含まれる。

@example
---------- Buffer: foo ----------
Gentlemen may cry ``Pea@point{}ce! Peace!,''
but there is no peace.
---------- Buffer: foo ----------

(thing-at-point 'word)
     @result{} "Peace"
(thing-at-point 'line)
     @result{} "Gentlemen may cry ``Peace! Peace!,''\n"
(thing-at-point 'whitespace)
     @result{} nil
@end example
@end defun

@node Comparing Text
@section Comparing Text
@cindex comparing buffer text

  この関数により、最初にバッファー内のテキストを文字列内にコピーすることなく、バッファー内のテキスト断片を比較することが可能になります。

@defun compare-buffer-substrings buffer1 start1 end1 buffer2 start2 end2
この関数により、1つのバッファー、または2つの異なるバッファーの、2つの部分文字列(substrings)を比較できる。最初の3つの引数は、バッファーとそのバッファー内の2つの位置を与えることにより、1つの部分文字列を指定する。最後の3つの引数は、同様の方法によりもう一方の部分文字列を指定する。@var{buffer1}と@var{buffer2}のいずれか、または両方にたいして、カレントバッファーを意味する@code{nil}を使用できる。

1つ目の部分文字列が2つ目の部分文字列より小なら負、大なら正、等しければ値は0となる。結果の絶対値は、部分文字列内で最初に異なる文字のインデックスに1を和した値である。

@code{case-fold-search}が非@code{nil}なら、この関数は大文字小文字の違いを無視する。テキストプロパティは常に無視される。

カレントバッファー内にテキスト@w{@samp{foobarbar
haha!rara!}}があるとしよう。そしてこの例では2つの部分文字列が@samp{rbar
}と@samp{rara!}であるとする。1つ目の文字列の2つ目の文字が大きいので、値は2となる。

@example
(compare-buffer-substrings nil 6 11 nil 16 21)
     @result{} 2
@end example
@end defun

@node Insertion
@section Inserting Text
@cindex insertion of text
@cindex text insertion

@cindex insertion before point
@cindex before point, insertion
  @dfn{挿入(insertion)}とは、バッファーへの新たなテキストの追加を意味します。テキストはポイント位置、すなわちポイント前の文字とポイント後の文字の間に追加されます。挿入関数は挿入されたテキストの後にポイントを残しますが、前にポイントを残す関数もいくつかあります。前者の挿入を@dfn{ポイント後挿入(after
point)}、後者を@dfn{ポイント前挿入(before point)}と呼びます。

  挿入により、挿入位置の後にあったマーカーは、テキストを取り囲むように移動されます(@ref{Markers}を参照)。マーカーは挿入箇所をさしている際は、挿入によるマーカー再配置の有無は、そのマーカーの挿入タイプに依存します(@ref{Marker
Insertion
Types}を参照)。@code{insert-before-markers}のような特定のスペシャル関数は、マーカーの挿入タイプとは関係なく、挿入されたテキストの後にそのようなマーカーすべてを再配置します。

  カレントバッファーが読み取り専用(@ref{Read Only Buffers}を参照)、または読み取り専用テキスト(@ref{Special
Properties}を参照)を挿入しようとした場合、挿入関数はエラーをシグナルします。

  以下の関数は、文字列およびバッファーからプロパティとともにテキスト文字をコピーします。挿入される文字は、コピー元の文字と完全に同一のプロパティをもちます。それとは対照的に、文字列やバッファーの一部ではない個別の引数として指定された文字は、隣接するテキストからテキストプロパティを継承します。

  テキストが文字列またはバッファー由来の場合、マルチバイトバッファーに挿入するために、挿入関数はユニバイトからマルチバイトへの変換、およびその逆も行います。しかし、たとえカレントバッファーがマルチバイトバッファーであったとしても、コード128から255までのユニバイトはマルチバイトに変換しません。@ref{Converting
Representations}を参照してください。

@defun insert &rest args
この関数は、文字列および/または1つ以上の文字@var{args}を、カレントバッファーのポイント位置に挿入して、ポイントを前方に移動する。別の言い方をすると、ポイントの前にテキストを挿入する。すべての@var{args}が文字列が文字列と文字のいずれでもない場合は、エラーをシグナルする。値は@code{nil}。
@end defun

@defun insert-before-markers &rest args
この関数は、文字列および/または1つ以上の文字@var{args}を、カレントバッファーのポイント位置に挿入して、ポイントを前方に移動する。すべての@var{args}が文字列が文字列と文字のいずれでもない場合は、エラーをシグナルする。値は@code{nil}。

他の挿入関数と異なり、この関数は挿入されたテキストの後を指すように、まずマーカーが挿入位置を指すように再配置する。挿入位置からオーバーレイが開始される場合、挿入されたテキストはそのオーバーレイの外側に出される。空でないオーバーレイが挿入位置で終わる場合、挿入されたテキストはそのオーバーレイの内側に入れられる。
@end defun

@deffn Command insert-char character &optional count inherit
このコマンドは、カレントバッファーのポイントの前に、@var{character}のインスタンスを@var{count}個挿入する。引数@var{count}は整数、@var{character}は文字でなければならない。

インタラクティブに呼び出された際は、このコマンドは@var{character}にたいしてコードポイントかUnicode名による入力を求める。@ref{Inserting
Text,,, emacs, The GNU Emacs Manual}を参照のこと。

この関数は、たとえカレントバッファーがマルチバイトバッファーであっても、コード128から255のユニバイト文字をマルチバイト文字に変換しない。@ref{Converting
Representations}を参照のこと。

@var{inherit}が非@code{nil}の場合、挿入された文字は挿入位置前後の2文字から、ステッキーテキストプロパティ(sticky text
properties)を継承する。@ref{Sticky Properties}を参照のこと。
@end deffn

@defun insert-buffer-substring from-buffer-or-name &optional start end
この関数は、カレントバッファーのポイント前に、バッファー@var{from-buffer-or-name}の一部を挿入する。挿入されるテキストは、@var{start}(を含む)から@var{end}(を含まない)の間のリージョン(これらの引数のデフォルトは、そのバッファーのアクセス可能範囲の先頭と終端)である。この関数は@code{nil}をリターンする。

以下の例では、バッファー@samp{bar}をカレントバッファーとしてフォームを実行する。バッファー@samp{bar}は、最初は空であるものとする。

@example
@group
---------- Buffer: foo ----------
We hold these truths to be self-evident, that all
---------- Buffer: foo ----------
@end group

@group
(insert-buffer-substring "foo" 1 20)
     @result{} nil

---------- Buffer: bar ----------
We hold these truth@point{}
---------- Buffer: bar ----------
@end group
@end example
@end defun

@defun insert-buffer-substring-no-properties from-buffer-or-name &optional start end
これは@code{insert-buffer-substring}と似ているが、テキストプロパティをコピーしない点が異なる。
@end defun

  テキスト挿入に加えて、隣接するテキストからテキストプロパティを継承する他の関数については、@ref{Sticky
Properties}を参照のこと。インデント関数により挿入された空白文字も、テキストプロパティを継承する。

@node Commands for Insertion
@section User-Level Insertion Commands

  このセクションでは、テキスト挿入のための高レベルコマンド、ユーザーによる使用を意図しているがLispプログラムでも有用なコマンドについて説明します。

@deffn Command insert-buffer from-buffer-or-name
このコマンドは、@var{from-buffer-or-name}(存在しなければならない)のアクセス可能範囲全体を、カレントバッファーのポイントの後に挿入する。マークは挿入されたテキストの後に残される。値は@code{nil}。
@end deffn

@deffn Command self-insert-command count
@cindex character insertion
@cindex self-insertion
このコマンドは、タイプされた最後の文字を挿入する。これをポイント前で@var{count}回繰り返して、@code{nil}をリターンする。ほとんどのプリント文字が、このコマンドにバインドされる。通常の使用では、@code{self-insert-command}はEmacsでもっとも頻繁に呼び出される関数だが、Lispプログラムではそれをキーマップにインストールする場合を除き、使用されるのは稀である。

インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数である。

@c FIXME: This variable is obsolete since 23.1.
自己挿入では、入力文字は@code{translation-table-for-input}を通じて変換される。@ref{Translation of
Characters}を参照のこと。

これは、入力文字がテーブル@code{auto-fill-chars}内にあり、@code{auto-fill-function}が非@code{nil}なら、常にそれを呼び出す(@ref{Auto
Filling}を参照)。

@c Cross refs reworded to prevent overfull hbox.  --rjc 15mar92
このコマンドは、Abbrevモードが有効で、入力文字が単語コウセ構文をもたなければ、abbrev展開を行う(@ref{Abbrevs}および@ref{Syntax
Class Table}を参照されたい)。さらに、入力文字が閉じカッコ構文(close parenthesis
syntax)をもつ場合は、@code{blink-paren-function}を呼び出す責任もある(@ref{Blinking}を参照)。

@vindex post-self-insert-hook
このコマンドは最後に、フック@code{post-self-insert-hook}を実行する。たとえば、タイプされたテキストにしたがい自動インデントするために、これを使用できる。

@code{self-insert-command}の標準的な定義にたいして、独自の定義による置き換えを試みてはならない。エディターコマンドループは、このコマンドを特別に扱うからだ。
@end deffn

@deffn Command newline &optional number-of-newlines
このコマンドは、カレントバッファーのポイントの前に、改行を挿入する。@var{number-of-newlines}が与えられた場合は、その個数の改行文字が挿入される。

@cindex newline and Auto Fill mode
この関数は、カレント列数が@code{fill-column}より大、かつ@var{number-of-newlines}が@code{nil}なら、@code{auto-fill-function}を呼び出す。@code{auto-fill-function}が通常行うのは改行の挿入ではり、最終的な結果としては、ポイント位置と、その行のより前方の位置という、2つの異なる箇所に改行を挿入する。@var{number-of-newlines}が非@code{nil}なら、@code{newline}はauto-fillを行わない。

このコマンドは、左マージンが0でなければ、左マージンにインデントする。@ref{Margins}を参照のこと。

リターン値は@code{nil}。インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数である。
@end deffn

@defvar overwrite-mode
この変数は、overwriteモードに効力をもつかどうかを制御する。値は@code{overwrite-mode-textual}、@code{overwrite-mode-binary}、または@code{nil}であること。@code{overwrite-mode-textual}はテキスト的なoverwriteモード(改行とタブを特別に扱う)、@code{overwrite-mode-binary}はバイナリーoverwriteモード(改行とタブを普通の文字と同様に扱う)を指定する。
@end defvar

@node Deletion
@section Deleting Text
@cindex text deletion

@cindex deleting text vs killing
  削除とは、バッファー内のテキストの一部を、killリングに保存せずに取り除くことを意味します。(@ref{The Kill
Ring}を参照)。削除されたテキストをyankすることはできませんが、undoメカニズム(@ref{Undo}を参照)を使用すれば再挿入が可能です。特別なケースにおいては、killリングにテキストの保存を行う削除関数がいくつかあります。

  削除関数はすべて、カレントバッファーにたいして処理を行います。

@deffn Command erase-buffer
この関数は、カレントバッファーのテキスト全体(アクセス可能範囲だけでは@emph{ない})を削除してバッファーが読み取り専用なら@code{buffer-read-only}、バッファー内の一部テキストが読み取り専用の場合は@code{text-read-only}をシグナルする。それ以外では、確認なしでテキストを削除する。リターン値は@code{nil}。

バッファーからの大量テキストの削除により、``バッファーが大幅に縮小された''という理由で、通常はさらなる自動保存ふぁ抑制される。しかし@code{erase-buffer}は、将来のテキストが以前のテキストと関連があるのは稀であり、以前のテキストのサイズと比較されるべきではないというアイデアにもとづき、これを行わない。
@end deffn

@deffn Command delete-region start end
このコマンドは、カレントバッファー内の位置@var{start}から@var{end}までの間のテキストを削除して、@code{nil}をリターンする。削除されるリージョン内にポイントがある場合、リージョン削除後のポイントの値は@var{start}になる。それ以外の場合は、マーカーが行うようにポイントはテキストを取り囲むように再配置される。
@end deffn

@defun delete-and-extract-region start end
この関数は、カレントバッファー内の位置@var{start}から@var{end}までの間のテキストを削除して、削除されたテキストを含む文字列をリターンする。

削除されるリージョン内にポイントがある場合、リージョン削除後のポイントの値は@var{start}になる。それ以外の場合は、マーカーが行うようにポイントはテキストを取り囲むように再配置される。
@end defun

@deffn Command delete-char count &optional killp
このコマンドは、ポイント直後の@var{count}文字、@var{count}が負なら直前の@var{count}文字を削除する。@var{killp}が非@code{nil}なら、削除した文字をkillリングに保存する。

インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数、@var{killp}は未処理プレフィクス引数(unprocessed
prefix
argument)である。すなわち、プレフィクス引数が与えられた場合、そのテキストはkillリングに保存され、与えられなければ、1文字が削除され、それはkillリングに保存されない。

リターン値は常に@code{nil}である。
@end deffn

@deffn Command delete-backward-char count &optional killp
@cindex deleting previous char
このコマンドは、ポイント直前の@var{count}文字、@var{count}が負なら直後の@var{count}文字を削除する。@var{killp}が非@code{nil}なら、削除した文字をkillリングに保存する。

インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数、@var{killp}は未処理プレフィクス引数(unprocessed
prefix
argument)である。すなわち、プレフィクス引数が与えられた場合、そのテキストはkillリングに保存され、与えられなければ、1文字が削除され、それはkillリングに保存されない。

リターン値は常に@code{nil}である。
@end deffn

@deffn Command backward-delete-char-untabify count &optional killp
@cindex tab deletion
このコマンドは、タブをスペースに変換しながら、後方に@var{count}文字を削除する。次に削除する文字がタブなら、まず適正な位置を保つような数のスペースに変換してから、それらのうちのスペース1つをタブのかわりに削除する。@var{killp}が非@code{nil}なら、このコマンドは削除した文字をkillリングに保存する。

タブからスペースへの変換は、@var{count}が正の場合のみ発生する。負の場合は、ポイント後の@minus{}@var{count}文字が、正確に削除される。

インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数、@var{killp}は未処理プレフィクス引数(unprocessed
prefix
argument)である。すなわち、プレフィクス引数が与えられた場合、そのテキストはkillリングに保存され、与えられなければ、1文字が削除され、それはkillリングに保存されない。

リターン値は常に@code{nil}である。
@end deffn

@defopt backward-delete-char-untabify-method
このオプションは、@code{backward-delete-char-untabify}が空白文字を扱う方法を指定する。可能な値には@code{untabify}(タブを個数分のスペースに変換してスペースを1つ削。これがデフォルト除)、@code{hungry}(1コマンドでポイント前のタブとスペースすべてを削除する)、@code{all}(ポイント前のタブとスペース、および改行すべてを削除する)、@code{nil}(空白文字にたいして特に何もしない)。
@end defopt

@node User-Level Deletion
@section User-Level Deletion Commands

  このセクションでは、主にユーザーにたいして有用なものの、Lispプログラムでも有用な、テキストを削除するための高レベルんｑコマンドを説明します。

@deffn Command delete-horizontal-space &optional backward-only
@cindex deleting whitespace
この関数は、ポイント近辺のすべてのスペースとタブを削除する。リターン値は@code{nil}。

@var{backward-only}が非@code{nil}の場合、この関数はポイント前のスペースとタブを削除するがポイント後のスペースとタブは削除しない。

以下の例では、各行ごとに、2番目と3番目の間にポイントを置いて、@code{delete-horizontal-space}を4回呼び出している。

@example
@group
---------- Buffer: foo ----------
I @point{}thought
I @point{}     thought
We@point{} thought
Yo@point{}u thought
---------- Buffer: foo ----------
@end group

@group
(delete-horizontal-space)   ; @r{Four times.}
     @result{} nil

---------- Buffer: foo ----------
Ithought
Ithought
Wethought
You thought
---------- Buffer: foo ----------
@end group
@end example
@end deffn

@deffn Command delete-indentation &optional join-following-p
この関数は、ポイントのある行を、その前の行に結合(join)する。結合においては、すべての空白文字を削除、特定のケースにおいてはそれらを1つのスペースに置き換える。@var{join-following-p}が非@code{nil}なら、@code{delete-indentation}はかわりに後続行と結合を行う。この関数は@code{nil}をリターンする。

fillプレフィクスがあり、結合される2つ目の行もそのプレフィクスで始まる場合、行の結合前に@code{delete-indentation}はそのfillプレフィクスを削除する。@ref{Margins}を参照のこと。

以下の例では、@samp{events}で始まる行にポイントがあり、前の行の末尾に1つ以上のスペースが存在しても、違いは生じない。

@smallexample
@group
---------- Buffer: foo ----------
When in the course of human
@point{}    events, it becomes necessary
---------- Buffer: foo ----------
@end group

(delete-indentation)
     @result{} nil

@group
---------- Buffer: foo ----------
When in the course of human@point{} events, it becomes necessary
---------- Buffer: foo ----------
@end group
@end smallexample

行の結合後に、結合点に単一のスペースを残すか否かを決定するのは、関数@code{fixup-whitespace}の責任である。
@end deffn

@deffn Command fixup-whitespace
この関数は、ポイントを取り囲むすべての水平スペースを、コンテキストに応じて1つのスペースまたはスペースなしに置き換える。リターン値は@code{nil}。

行の先頭または末尾において、スペースの適正な数は0である。閉じカッコ構文(close parenthesis
syntax)の前の文字、開きカッコの後の文字、式プレフィクス構文(expression-prefix
syntax)においても、スペースの適正な数は0である。それ以外では、スペースの適正な数は1である。@ref{Syntax Class
Table}を参照のこと。

以下の例では、最初に1行目の単語@samp{spaces}の前にポイントがある状態で、@code{fixup-whitespace}を呼び出している。2回目の呼び出しでは、@samp{(}の直後にポイントがある。

@smallexample
@group
---------- Buffer: foo ----------
This has too many     @point{}spaces
This has too many spaces at the start of (@point{}   this list)
---------- Buffer: foo ----------
@end group

@group
(fixup-whitespace)
     @result{} nil
(fixup-whitespace)
     @result{} nil
@end group

@group
---------- Buffer: foo ----------
This has too many spaces
This has too many spaces at the start of (this list)
---------- Buffer: foo ----------
@end group
@end smallexample
@end deffn

@deffn Command just-one-space &optional n
@comment !!SourceFile simple.el
このコマンドは、ポイントを取り囲むすべてのスペースを1つのスペース、または@var{n}が指定された場合は@var{n}個のスペースで置き換える。リターン値は@code{nil}。
@end deffn

@c There is also cycle-spacing, but I cannot see it being useful in
@c Lisp programs, so it is not mentioned here.

@deffn Command delete-blank-lines
この関数は、ポイントを取り囲む空行を削除する。ポイントが前後に1行以上の空行がある空の行にある場合は、1行を除きそれらすべてを削除する。ポイントが孤立した空行にあるなら、その行を削除する。ポイントが空でない行にあるなら、その直後にあるすべての空白を削除する。

@c and the Newline character?
空行とは、タブまたはスペースのみを含む行として定義される。

@code{delete-blank-lines}は@code{nil}をリターンする。
@end deffn

@deffn Command delete-trailing-whitespace start end
@var{start}と@var{end}で定義されるリージョン内の、末尾の空白文字を削除する。

このコマンドは、リージョン内の各行の最後の非空白文字後にある空白文字を削除する。

このコマンドがバッファー全体(マークが非アクティブな状態で呼び出された場合やLispから@var{end}と@code{nil}で呼び出された場合)にたいして動作する場合、変数@code{delete-trailing-lines}が非@code{nil}ならバッファーの終端行の末尾の行も削除する。
@end deffn

@node The Kill Ring
@section The Kill Ring
@cindex kill ring

  @dfn{kill関数(kill
functions)}は削除関数のようにテキストを削除しますが、ユーザーが@dfn{yank}により再挿入できるようにそれらを保存する点が異なります。これらの関数のほとんどは、@samp{kill-}という名前をもちます。対照的に名前が@samp{delete-}で始まる関数は、(たとえ削除をundoできるとしても)通常はyank用にテキストを保存しません。それらは``削除(deletion)''関数です。

  ほとんどのkillコマンドは、主にインタラクティブな使用を意図しており、ここでは説明しません。ここで説明するのは、そのようなコマンドの記述に使用されるために提供される関数です。テキストをkillするために、これらのカを使用できます。Lisp関数の内部的な目的のためにテキストの削除を要するときは、killリング内のコンテンツに影響を与えないように、通常は削除関数を使用するべきでしょう。@ref{Deletion}を参照してください。

  killされたテキストは、後のyank用に@dfn{killリング(kill
ring)}内に保存されます。これは、直前のkillだけでなく直近のkillのいくつかを保持するリストです。yankがそれをサイクル順に要素をもつリストとして扱うので、これを``リング(ring)''と称しています。このリストは変数@code{kill-ring}に保持されており、リスト用の通常関数で操作可能です。このセクションで説明する、これをリングとして扱うために特化された関数も存在します。

  特に``kill''された実体が@emph{破壊}されてしまわないような操作を参照するという理由から、``kill''という単語の使用が不適切だと考える人もいます。これは通常の生活において、死は永遠であり``kill''された実体は生活に戻ることはないことと対照的です。したがって、他の比喩表現も提案されてきました。たとえば、``cutリング(cut
ring)''という用語は、コンピューター誕生前に原稿を再配置するためにハサミで切り取って貼り付けていたような人に意味があるでしょう。しかし、今となってはこの用語を変更するのは困難です。

@menu
* Kill Ring Concepts::       killリング内のテキストがどのように見えるか。
* Kill Functions::           テキストをkillする関数。
* Yanking::                  yankが行われる方法。
* Yank Commands::            killリングにアクセスするコマンド。
* Low-Level Kill Ring::      killリングアクセス用の関数および変数。
* Internals of Kill Ring::   killリングのデータを保持する変数。
@end menu

@node Kill Ring Concepts
@subsection Kill Ring Concepts

  killリングは、リスト内でもっとも最近にkillされたテキストが先頭になるように、killされたテキストを記録します。たとえば、短いkillリングは以下のようになるでしょう:

@example
("some text" "a different piece of text" "even older text")
@end example

@noindent
このリストのエントリー長が@code{kill-ring-max}に達すると、新たなエントリー追加により最後のエントリーが自動的に削除されます。

  killコマンドが他のコマンドと混ざり合っているときは、各killコマンドはkillリング内に新たなエントリーを作成します。連続する複数のkillコマンドは単一のkillリングエントリーを構成します。これは1つの単位としてyankされます。2つ目以降の連続するkillコマンドは、最初のkillにより作成されたエントリーにテキストを追加します。

  yankにたいしては、killリング内のただ1つのエントリーが、そのリングの``先頭''のエントリーとなります。いくつかのyankコマンドは、異なる要素を``先頭''に指定することにより、リングを``回転(rotate)''させます。しかしこの仮想的回転はリスト自身を変更しません。もっとも最近のエントリーが、常にリスト内の最初に配置されます。

@node Kill Functions
@subsection Functions for Killing

  @code{kill-region}は、テキストkill用の通常サブルーチンです。この関数を呼び出すすべてのコマンドは、``killコマンド''です(そして恐らくは名前に@samp{kill}が含まれる)。@code{kill-region}は新たにkillされたテキストをkillリング内の最初の要素内に置くか、それをもっとも最近の要素に追加します。これは、前のコマンドがkillコマンドか否かを、(@code{last-command}を使用して)自動的に判別し、もしkillコマンドならkillされたテキストをもっとも最近のエントリーに追加します。

@deffn Command kill-region start end
この関数は、@var{start}と@var{end}から定義されるリージョン内のテキストをkillする。そのテキストは削除されるが、そのテキストプロパティと共にkillリングに保存される。値は常に@code{nil}。

インタラクティブな呼び出しでは、@var{start}と@var{end}は、ポイントとマークになる。

バッファーまたはテキストが読み取り専用の場合、@code{kill-region}は同じようにkillリングを変更後、バッファーを変更せずにエラーをシグナルする。これは、ユーザーが一連のkillコマンドで、読み取り専用バッファーからkillリングにテキストをコピーするのに有用である。
@end deffn

@defopt kill-read-only-ok
このオプションが非@code{nil}なら、バッファーやテキストが読み取り専用でも、@code{kill-region}はエラーをシグナルしない。かわりに、バッファーを変更せずにkillリングを更新して、単にリターンする。
@end defopt

@deffn Command copy-region-as-kill start end
このコマンドは、killリングに@var{start}と@var{end}で定義されるリージョン(テキストプロパティを含む)を保存するが、バッファーからテキストを削除しない。リターン値は@code{nil}。

このコマンドは、後続のkillコマンドが同一のkillリングエントリーに追加しないよう、@code{this-command}に@code{kill-region}をセットしない。

@c FIXME Why is it better?  Why isn't copy-region-as-kill obsolete then?
@c Why is it used in many places in Emacs?
Lispプログラム内では、このコマンドより@code{kill-new}や@code{kill-append}を使うほうがよい。@ref{Low-Level
Kill Ring}を参照のこと。
@end deffn

@node Yanking
@subsection Yanking

  yankとは、killリングからテキストを挿入するものの、単なる挿入ではないことを意味します。@code{yank}および関連するコマンドは、テキスト挿入前に特別な処理を施すために、@code{insert-for-yank}を使用します。

@defun insert-for-yank string
この関数は@code{insert}と同様に機能するが、結果をカレントバッファーに挿入する前に、テキストプロパティ@code{yank-handler}、同様に変数@code{yank-handled-properties}および@code{yank-excluded-properties}に応じて@var{string}内のテキストを処理する点が異なる。
@end defun

@defun insert-buffer-substring-as-yank buf &optional start end
この関数は@code{insert-buffer-substring}と似ているが、@code{yank-handled-properties}および@code{yank-excluded-properties}に応じてテキストを処理する点が異なる(これは@code{yank-handler}プロパティを処理しないが、いずれにせよバッファー内のテキストでは通常は発生しない)。
@end defun

@c FIXME: Add an index for yank-handler.
  文字列の一部またはすべてにテキストプロパティ@code{yank-handler}をputした場合、@code{insert-for-yank}が文字列を挿入する方法が変更されます。文字列の別の箇所が異なる@code{yank-handler}の値をもつ場合(比較は@code{eq}で行われる)、部分文字列はそれぞれ個別に処理されます。プロパティ値は以下の形式からなる1から4要素のリストでなければなりません(2番目以降の要素は省略されるかもしれない):

@example
(@var{function} @var{param} @var{noexclude} @var{undo})
@end example

  以下は、これらの要素が何を行うかです:

@table @var
@item function
@var{function}が非@code{nil}なら、@code{insert}のかわりに文字列を挿入するために、挿入する文字列を単一の引数として、その関数が呼び出される。

@item param
非@code{nil}の@var{param}が与えられた場合、それは@var{string}(または処理される@var{string}の部分文字列)を置き換えるオブジェクトとして@var{function}(または@code{insert})に渡される。たとえば@var{function}が@code{yank-rectangle}なら、@var{param}は矩形(rectangle)として挿入されるべき文字列のリストになる。

@item noexclude
非@code{nil}の@var{noexclude}が与えられた場合は、挿入される文字列にたいする@code{yank-handled-properties}および@code{yank-excluded-properties}の通常の動作を無効にする。

@item undo
非@code{nil}の@var{undo}が与えられた場合、それはカレントオブジェクトの挿入をundoするために@code{yank-pop}が呼び出す関数である。この関数は、カレントリージョンのstartとendの、2つの引数で呼び出される。@var{function}は@code{yank-undo-function}をセットすることにより、@var{undo}の値をオーバーライドできる。
@end table

@cindex yanking and text properties
@defopt yank-handled-properties
この変数は、yankされるテキストの状態を処理するスペシャルテキストプロパティを指定する。これは(通常の方法、または@code{yank-handler}を通じた)テキスト挿入後、@code{yank-excluded-properties}が効力をもつ前に効果を発揮する。

値は、要素が@code{(@var{prop}
.
@var{fun})}であるようなalistであること。alistの各要素は、順番に処理される。挿入されるテキストはテキスト範囲にたいして、テキストプロパティが@var{prop}と@code{eq}なものがスキャンされる。そのような範囲には、そのプロパティの値、そのテキストの開始と終了の位置という、3つの引数により@var{fun}が呼び出される。
@end defopt

@defopt yank-excluded-properties
この変数の値は、挿入されるテキストから削除するための、プロパティのリストである。デフォルト値には、マウスに応答したりキーバインディングの指定を引き起こすテキストのような、煩わしい結果をもたらすかもしれないプロパティが含まれる。これは、@code{yank-handled-properties}の後に効果を発揮する。
@end defopt


@node Yank Commands
@subsection Functions for Yanking

  このセクションでは、yank用の高レベルなコマンドを説明します。これらのコマンドは主にユーザー用に意図されたものですが、Lispプログラム内での使用にたいしても有用です。@code{yank}および@code{yank-pop}はどちらも、変数@code{yank-excluded-properties}およびテキストプロパティ@code{yank-handler}にしたがいます(@ref{Yanking}を参照)。

@deffn Command yank &optional arg
@cindex inserting killed text
このコマンドは、killリングの先頭にあるテキストを、ポイントの前に挿入する。これは@code{push-mark}(@ref{The
Mark}を参照)を使用して、そのテキストの先頭にマークをセットする。

@var{arg}が非@code{nil}のリスト(これはユーザーがインタラクティブに数字を指定せずに@kbd{C-u}をタイプ時に発生する)なら、@code{yank}は上述のようにテキストを挿入するが、ポイントはyankされたテキストの前、マークはyankされたテキストの後に置かれる。

@var{arg}が数字なら、@code{yank}は@var{arg}番目に最近killされたテキスト、すなわちkillリングリストの@var{arg}番目の要素を挿入する。この順番は、コマンドの目的にたいして1番目の要素としてみなされる、リスト先頭の要素から巡回的に数えられる。

@code{yank}は、それが他のプログラムから提供されるテキストを使用しないかぎり(使用する場合はそのテキストをkillリングにpushする)、killリングのコンテンツを変更しない。しかし、@var{arg}が非1の整数の場合は、killリングを転回(rotate)してyankされるテキストをリング先頭に置く。

@code{yank}は@code{nil}をリターンする。
@end deffn

@deffn Command yank-pop &optional arg
このコマンドは、killリング上の正にyankされたばかりのエントリーを、killリングの別エントリーで置き換える。

このコマンドは、@code{yank}または別の@code{yank-pop}の直後のみ許される。そのような際、そのリージョンにはyankにより正に挿入されたテキストが含まれる。@code{yank-pop}はそのテキストを削除して、killされた別のテキスト片をその位置に挿入する。そのテキスト片はすでにkillリング内のどこか別の箇所にあるので、これは削除されたテキストをkillリングに追加しない。しかし、新たにyankされたテキストが先頭になるよう、killリングの転回は行う。

@var{arg}が@code{nil}なら、置換テキストはkillリングの1つ前の要素である。@var{arg}が数字なら、置換テキストはkillリングの@var{arg}個前の要素である。@var{arg}が負の場合は、より最近のkillが置換される。

killリング内のkillされたエントリーの順序はラップする。すなわちもっとも古いkillの次にもっとも新しいkill、もっとも新しいkillの前はもっとも古いkillとなる。

リターン値は常に@code{nil}である。
@end deffn

@defvar yank-undo-function
この変数が非@code{nil}の場合、関数@code{yank-pop}は前の@code{yank}または@code{yank-pop}により挿入されたテキストを削除するために、@code{delete-region}のかわりにこの変数の値を使用する。値は、カレントリージョンの開始と終了という、2つの引数をとる関数でなければならない。

関数@code{insert-for-yank}は、テキストプロパティ@code{yank-handler}の要素@var{undo}に対応して、この変数を自動的にセットする。
@end defvar

@node Low-Level Kill Ring
@subsection Low-Level Kill Ring

  以下の関数および変数は、killリングにたいして低レベルなアクセスを提供しますが、それらはウィンドウシステムの選択(@ref{Window System
Selections}を参照)との相互作用にも留意するので、Lispプログラム内での使用に関しても依然として有用です。

@defun current-kill n &optional do-not-move
関数@code{current-kill}は、killリングの``先頭''を指すyankポインターを、(新しいkillから古いkillに)@var{n}個転回して、リング内のその箇所のテキストをリターンする。

オプションの第2引数@var{do-not-move}が非@code{nil}なら、@code{current-kill}はyankポインターを変更しない。カレントyankポインターから、@var{n}個目のkillを単にリターンする。

@var{n}が0の場合、それは最新のkillの要求を意味しており、@code{current-kill}はkillリング照会前に@code{interprogram-paste-function}(以下参照)の値を呼び出す。その値が関数で、かつそれが文字列または複数の文字列からなるリストをリターンした場合、@code{current-kill}はその文字列をkillリング上にpushして、最初の文字列をリターンする。これは@var{do-not-move}の値に関わらず、@code{interprogram-paste-function}がリターンする最初の文字列のkillリングエントリーを指すように、yankポインターのセットも行う。それ以外では、@code{current-kill}は@var{n}にたいする0値を特別に扱うことはなく、yankポインターが指すエントリーをリターンし、yankポインターの移動は行わない。
@end defun

@defun kill-new string &optional replace
この関数は、テキスト@var{string}をkillリング上にpushして、yankポインターがそれを指すようにセットする。それが適切なら、もっとも古いエントリーを破棄する。@code{interprogram-cut-function}(以下参照)の呼び出しも行う。

@var{replace}が非@code{nil}なら、@code{kill-new}はkillリング上に@var{string}をpushせずに、killリングの1つ目の要素を@var{string}に置き換える。
@end defun

@defun kill-append string before-p
この関数は、killリング内の最初のエントリーにテキスト@var{string}を追加して、その結合されたエントリーを指すようにyankポインターをセットする。通常はそのエントリーの終端に@var{string}が追加されるが、@var{before-p}が非@code{nil}ならエントリーの先頭に追加される。この関数は、@code{interprogram-cut-function}(以下参照)の呼び出しも行う。
@end defun

@defvar interprogram-paste-function
この変数は、他のプログラムからkillリングへkillされたテキストを転送する方法を提供する。値は@code{nil}、または引数のない関数であること。

値が関数なら、``もっとも最近のkill''を取得するために、@code{current-kill}はそれを呼び出す。その関数が非@code{nil}値をリターンした場合は、その値が``もっとも最近のkill''として使用される。@code{nil}をリターンした場合は、killリングの先頭が使用される。

複数選択をサポートするウィンドウシステムのサポートを容易にするために、この関数は文字列のリストもリターンするかもしれない。その場合、1つ目の文字列が``もっとも最近のkill''として使用され、その他の文字列はすべて@code{yank-pop}によるアクセスを容易にするために、killリング上にpushされる。

この関数の通常の用途は、たとえそれが他アプリケーションに属する選択であっても、もっとも最近のkillとして、ウィンドウシステムのクリップボードからそれを取得することである。しかし、クリップボードのコンテンツがカレントEmacsセッション由来なら、この関数は@code{nil}をリターンする筈である。
@end defvar

@defvar interprogram-cut-function
この変数は、ウィンドウシステム使用時に、他のプログラムにkillされたテキストを転送する方法を提供する。値は@code{nil}、または1つの引数を要求する関数であること。

値が関数なら、@code{kill-new}および@code{kill-append}は、killリングの新たな1つ目要素を引数として、それを呼び出す。

この関数の通常の用途は、新たにkillされたテキストを、ウィンドウシステムのクリップボードに配すことである。@ref{Window System
Selections}を参照のこと。
@end defvar

@node Internals of Kill Ring
@subsection Internals of the Kill Ring

  変数@code{kill-ring}は、文字列リスト形式でkillリングのコンテンツを保持します。もっとも最近のkillが、常にこのリストの先頭になります。

  変数@code{kill-ring-yank-pointer}は、@sc{car}が次のyankのテキストであるような、killリングリスト内のリンクをpointします。これを、リングの``先頭''を識別すると言います。そして、@code{kill-ring-yank-pointer}を異なるリンクに移動することを、@dfn{killリングの転回(rotating
the kill
ring)}と呼びます。yankポインターを移動する関数は、yankポインターをリスト終端から先頭、またはその逆へラップするので、、killリングを``ring''と呼びます。killリングの転回は仮想的なものであり、@code{kill-ring}の値は変更しません。

  @code{kill-ring}および@code{kill-ring-yank-pointer}はどちらも、通常は値がリストであるようなLisp変数です。@code{kill-ring-yank-pointer}の名前にある単語``pointer''は、その変数の目的が次回yankコマンドにより使用されるリストの最初の要素を指すことであるのを示します。

  @code{kill-ring-yank-pointer}の値は常にkillリングリスト内の1つのリンクと@code{eq}です。それが指す要素は、そのリンクの@sc{car}です。killリングを変更するkillコマンドも、この変数に@code{kill-ring}の値をセットします。その効果は、新たにkillされた先頭になるように、リングを転回することです。

  以下は、変数@code{kill-ring-yank-pointer}が、killリング@code{("some text" "a different
piece of text" "yet older text")}内の2番目のエントリーを指すことを表すダイアグラムです。

@example
@group
kill-ring                  ---- kill-ring-yank-pointer
  |                       |
  |                       v
  |     --- ---          --- ---      --- ---
   --> |   |   |------> |   |   |--> |   |   |--> nil
        --- ---          --- ---      --- ---
         |                |            |
         |                |            |
         |                |             -->"yet older text"
         |                |
         |                 --> "a different piece of text"
         |
          --> "some text"
@end group
@end example

@noindent
この状態は、@kbd{C-y}(@code{yank})の直後に@kbd{M-y}(@code{yank-pop})を行うことにより発生し得ます。

@defvar kill-ring
この変数は、もっとも最近にkillされたテキストが先頭になるように、killされたテキストのシーケンスのリストを保持する。
@end defvar

@defvar kill-ring-yank-pointer
この変数の値は、yankにたいして使用される、killリングの先頭にある要素を示す。より正確には、値は@code{kill-ring}の値のtail値であり、その@sc{car}が@kbd{C-y}によりyankされるはずのkill文字列となる。
@end defvar

@defopt kill-ring-max
この変数の値は、リング終端の要素を破棄する前に、killリングが成長し得る最大長である。@code{kill-ring-max}のデフォルト値は60。
@end defopt

@node Undo
@section Undo
@cindex redo

  ほとんどのバッファーは、バッファーのテキストにたいして行われた変更をundoできるように、すべての変更を記録する@dfn{undoリスト(undo
list)}をもちます(undoリストをもたないバッファーとは通常、Emacsがundoを有用とみなさない特殊用途のバッファーである。特に、名前がスペースで始まるバッファーはすべて、undo記録がデフォルトでオフになっている。@ref{Buffer
Names}を参照されたい)。バッファー内でテキストを変更するすべてのプリミティブは、undoリストの先頭に自動的に要素を追加し、それは変数@code{buffer-undo-list}に格納されます。

@defvar buffer-undo-list
このバッファーローカル変数の値は、カレントバッファーのundoリストである。値が@code{t}なら、undo情報の記録を無効にする。
@end defvar

以下は、undoリストが保有可能な要素の種類です:

@table @code
@item @var{position}
この種の要素は、前のポイント値を記録する。この要素をundoすることにより、ポイントは@var{position}に移動する。通常のカーソル移動はどのような類のundo記録も作成しないが、削除操作はそのコマンド以前にポイントがあった場所を記録するために、このエントリーを使用する。

@item (@var{beg} . @var{end})
この種の要素は、挿入されたテキストを削除する方法を示す。挿入において、そのテキストはバッファー内の範囲@var{beg}から@var{end}を占める。

@item (@var{text} . @var{position})
この種の要素は、削除されたテキストを再度挿入する方法を示す。文字列@var{text}は、削除されたテキストそのものである。削除されたテキストを再挿入する位置は@code{(abs
@var{position})}である。@var{position}が正ならポイントがあったのは削除されたテキストの先頭、それ以外では末尾である。0個以上の(@var{marker}
. @var{adjustment})要素が、この要素の直後に続く。

@item (t . @var{time-flag})
この種の要素は、未変更のバッファーが変更されたことを示す。@code{(@var{sec-high} @var{sec-low}
@var{microsec}
@var{picosec})}という形式の@var{time-flag}は、visitされたファイルにたいして、それが以前にvisitまたは保存されたときの更新時刻(modification
time)を、@code{current-time}と同じ形式を用いて表す。@ref{Time of
Day}を参照のこと。@var{time-flag}が0ならそのバッファーに対応するファイルがないことを、@minus{}1ならvisitされたファイルは以前は存在しなかったことを意味する。@code{primitive-undo}は、バッファーを再度未変更とマークするかどうかを判断するために、これらの値を使用(ファイルの状態が@var{time-flag}のそれとマッチする場合のみ未変更とマーク)する。

@item (nil @var{property} @var{value} @var{beg} . @var{end})
この種の要素は、テキストプロパティの変更を記録する。変更をundoする方法は、以下のようになる:

@example
(put-text-property @var{beg} @var{end} @var{property} @var{value})
@end example

@item (@var{marker} . @var{adjustment})
この種の要素は、マーカー@var{marker}がそれを取り囲むテキストの削除により再配置されて、@var{adjustment}文字位置を移動したということを記録する。undoリスト内の前にある要素(@var{text}
. @var{position})とマーカーの位置が一致する場合、は、この要素をundoすることにより、@var{marker} @minus{}
@var{adjustment}文字移動する。

@item (apply @var{funname} . @var{args})
これは拡張可能なundoアイテムであり、引数@var{args}とともに@var{funname}を呼び出すことによりundoが行われる。

@item (apply @var{delta} @var{beg} @var{end} @var{funname} . @var{args})
これは拡張可能なundoアイテムであり、@var{beg}から@var{end}までに限定された範囲にたいして、そのバッファーのサイズを@var{delta}文字増加させる変更を記録する。これは、引数@var{args}とともに@var{funname}を呼び出すことによりundoが行われる。

この種の要素は、それがリージョンと関係するか否かを判断することにより、リージョンに限定されたundoを有効にする。

@item nil
この要素は境界(boundary)である。2つの境界の間にある要素を@dfn{変更グループ(change
group)}と呼び、それぞれの変更グループは通常1つのキーボードコマンドに対応するとともに、undoコマンドは通常、グループを1つの単位として全体をundoを行う。
@end table

@defun undo-boundary
この関数は、undoリスト内に境界を配置する。このような境界ごとにundoコマンドは停止し、連続するundoコマンドは、より以前の境界へとundoを行っていく。この関数は@code{nil}をリターンする。

エディターコマンドループは、各キーシーケンス実行の直前に、1つのundoごとに通常は1つのコマンドがundoされるよう、自動的に@code{undo-boundary}を呼び出す。例外として、入力文字の自己挿入を引き起こすコマンド@code{self-insert-command}(@ref{Commands
for
Insertion}を参照)は、コマンドループにより挿入された境界を削除するかもしれない。そのような自己挿入文字の1つ目の境界は許容されるが、後続する19個の自己挿入する入力文字は境界をもたず、20個目の自己挿入文字は境界をもつ。そして、自己挿入文字が続くかぎり、これが繰り返される。したがって、連続する文字挿入シーケンスは、グループとしてundoすることが可能である。

他のバッファーに行われたundo可能な以前の変更が何であれ、すべてのバッファー変更は境界を追加する。これは各バッファー内で変更を行なった箇所で、すべてのコマンドが境界を作成することを保証する。

この関数を明示的に呼び出すことは、あるコマンドの効果を複数単位に分割するために有用である。たとえば@code{query-replace}は、ユーザーが個別に置換をundoできるように、それぞれの置換後に@code{undo-boundary}を呼び出している。
@end defun

@defvar undo-in-progress
この変数は通常@code{nil}だが、undoコマンドはこれを@code{t}にバインドする。これにより、さまざまな種類の変更フックがundoにより呼び出された際、それを告げることが可能になる。
@end defvar

@defun primitive-undo count list
これは、undoリストの要素のundoにたいする基本的な関数である。これは@var{list}の最初の@var{count}要素をundoして、@var{list}の残りをリターンする。

@code{primitive-undo}はバッファー変更時、そのバッファーのundoリストに要素を追加する。undoコマンドは混乱を避けるために、undo操作シーケンス冒頭にundoリストの値を保存する。その後、undo操作は保存された値の使用および更新を行う。undoにより追加された新たな要素はこの保存値の一部でないので、継続するundoと干渉しない。

この関数は、@code{undo-in-progress}をバインドしない。
@end defun

@node Maintaining Undo
@section Maintaining Undo Lists

  このセクションでは、与えられたバッファーにたいしてundo情報を有効、および無効にする方法を説明します。undoリストが巨大化しないように、undoリストを切り詰める方法も説明します。

  新たに作成されたバッファー内のundo情報記録は、開始とともに通常は有効になります。しかしバッファー名がスペースで始まる場合、undoの記録は初期状態では無効になっています。以下の2つの関数、または自身で@code{buffer-undo-list}をセットすることにより、undo記録の有効、または無効化を明示的に行うことができます。

@deffn Command buffer-enable-undo &optional buffer-or-name
このコマンドは、以降の変更をundo可能にするよう、バッファー@var{buffer-or-name}のundo情報記録を有効にする。引数が与えられない場合は、カレントバッファーを使用する。そのバッファー内のundo記録がすでに有効なら、この関数は何も行わない。リターン値は@code{nil}。

インタラクティブな呼び出しでは、@var{buffer-or-name}はカレントバッファーであり、他のバッファーを指定することはできない。
@end deffn

@deffn Command buffer-disable-undo &optional buffer-or-name
@cindex disabling undo
この関数は@var{buffer-or-name}のundoリストを破棄して、それ以上のundo情報記録を無効にする。結果として、以前の変更および以降のすべての変更にたいするそれ以上のundoは不可能になる。@var{buffer-or-name}のundoリストがすでに無効なら、この関数に効果はない。

インタラクティブな呼び出しでは、BUFFER-OR-NAMEはカレントバッファーとなる。他のバッファーを指定することはできない。リターン値は@code{nil}。
@end deffn

  編集が継続されるにつれ、undoリストは次第に長くなっていく。利用可能なメモリー空間すべてを使い尽くすのを防ぐために、ガベージコレクションがundoリストを設定可能な制限サイズに切り詰め戻す(この目的のために、undoリストの``サイズ''はリストを構成するコンスセルに加えて削除された文字列により算出される)。@code{undo-limit}、@code{undo-strong-limit}、@code{undo-outer-limit}の3つの変数は、許容できるサイズの範囲を制御する。これらの変数においてサイズは専有するバイト数で計数され、それには保存されたテキストとその他データが含まれる。

@defopt undo-limit
これは、許容できるundoリストサイズのソフトリミットである。このサイズを超過した箇所の変更グループは、最新の変更グループ1つが保持される。
@end defopt

@defopt undo-strong-limit
これは、undoリストの許容できるサイズの上限である。このサイズを超過する箇所の変更グループは(その他すべてのより古い変更グループとともに)自身を破棄する。1つ例外があり、@code{undo-outer-limit}を超過した場合は、最新の変更グループだけが破棄される。
@end defopt

@defopt undo-outer-limit
ガベージコレクション時にカレントコマンドのundo情報がこの制限を超過したら、Emacsはその情報を破棄して、警告を表示する。これはメモリーオーバーフローを防ぐための、最後の回避用リミットである。
@end defopt

@defopt undo-ask-before-discard
この変数が非@code{nil}なら、undo情報の@code{undo-outer-limit}超過時、Emacsはその情報を破棄するかどうかを、エコーエリアで尋ねる。デフォルト値は@code{nil}で、これは自動的な破棄を意味する。

このオプションは、主にデバッグを意図している。これを尋ねる際、ガベージコレクションは抑制されており、もしユーザーがその問にたいして答えるのをあまりに長くかかるなら、Emacsがメモリーリークを起こすかもしれないことを意味する。
@end defopt

@node Filling
@section Filling
@cindex filling text

  @dfn{フィル(fill:
充填)}とは、指定された最大幅付近(ただし超えず)に、(行ブレークを移動することにより)行の長さを調整することを意味します。加えて、複数行を@dfn{位置揃え(justify)}することもできます。位置揃えとは、スペースを挿入して左および/または右マージンを正確に整列させることを意味します。その幅は、変数@code{fill-column}により制御されます。読みやすくするために、行の長さは70列程度を超えないようにするべきです。

  テキストの挿入とともに自動的にテキストをフィルするAuto
Fillモードを使用できますが、既存テキストの変更では不適切にフィルされたままになるかもしれません。その場合は、テキストを明示的にフィルしなければなりません。

  このセクションのコマンドのほとんどは、有意な値をリターンしません。フィルを行うすべての関数は、カレント左マージン、カレント右マージン、カレント位置揃えスタイルに留意します(@ref{Margins}を参照)。カレント位置揃えスタイルが@code{none}の場合、フィル関数は実際には何も行いません。

  フィル関数のいくつかは、引数@var{justify}をもちます。これが非@code{nil}なら、それは何らかの類の位置揃えを要求します。特定の位置揃えスタイルを要求するために@code{left}、@code{right}、@code{full}、@code{center}を指定できます。これが@code{t}なら、それはそのテキスト部分にたいしてカレント位置揃えスタイルを使用することを意味します(以下の@code{current-justification}を参照)。その他すべての値は、@code{full}として扱われます。

  インタラクティブにフィル関数を呼び出す際、プレフィクス引数の使用は@var{justify}にたいして暗に値@code{full}を指定します。

@deffn Command fill-paragraph &optional justify region
このコマンドは、ポイント位置、またはその後のパラグラフ(paragraph:
段落)をフィルする。@var{justify}が非@code{nil}なら、同様に各行が位置揃えされる。これはパラグラフ境界を探すために、通常のパラグラフ移動コマンドを使用する。@ref{Paragraphs,,,
emacs, The GNU Emacs Manual}を参照のこと。

もし@var{region}が非@code{nil}で、Transient
Markモードが有効かつマークがアクティブなら、このコマンドはカレントパラグラフのみフィルするかわりに、リージョン内すべてのパラグラフをフィルするために、コマンド@code{fill-region}を呼び出す。このコマンドがインタラクティブに呼び出されたとき、@var{region}は@code{t}である。
@end deffn

@deffn Command fill-region start end &optional justify nosqueeze to-eop
このコマンドは、@var{start}から@var{end}のリージョン内のすべてのパラグラフをフィルする。@var{justify}が非@code{nil}なら、同様に位置揃えも行う。

@var{nosqueeze}が非@code{nil}なら、それは行ブレーク以外の空白文字を残すことを意味する。@var{to-eop}が非@code{nil}の場合、それはパラグラフ終端(以下の@code{use-hard-newlines}が有効なら次のhard改行)までのフィルを維持することを意味する

変数@code{paragraph-separate}は、パラグラフを分割する方法を制御する。@ref{Standard Regexps}を参照のこと。
@end deffn

@deffn Command fill-individual-paragraphs start end &optional justify citation-regexp
このコマンドは、リージョン内の各パラグラフを、それの固有なフィルプレフィクスに応じてフィルする。したがって、パラグラフの行がスペースでインデントされている場合、フィルされたパラグラフは同じ様式でインデントされた状態に保たれるだろう。

最初の2つの引数@var{start}と@var{end}は、フィルするリージョンの先頭と終端である。3つ目の引数@var{justify}、4つ目の引数@var{citation-regexp}はオプションである。@var{justify}が非@code{nil}なら、そのパラグラフはフィルと同様に位置揃えもされる。@var{citation-regexp}が非@code{nil}なら、それはこの関数がメールメッセージを処理しているので、ヘッダーラインをフィルするべきではないことを意味する。@var{citation-regexp}が文字列の場合、それは正規表現として扱われる。それが行の先頭にマッチすれば、その行は引用マーカー(citation
marker)として扱われる。

@c FIXME: "That mode" is confusing.  It isn't a major/minor mode.
@code{fill-individual-paragraphs}は通常、インデントの変更を新たなパラグラフの開始とみなす。@code{fill-individual-varying-indent}が非@code{nil}の場合は、セパレーターラインだけがパラグラフを分割する。その場合は、最初の行からさらにインデントが追加されたパラグラフを処理することが可能になる。
@end deffn

@defopt fill-individual-varying-indent
この変数は、上述のように@code{fill-individual-paragraphs}の動作を変更する。
@end defopt

@deffn Command fill-region-as-paragraph start end &optional justify nosqueeze squeeze-after
このコマンドは、テキストのリージョンを1つのパラグラフとみなして、それをフィルする。そのリージョンが多数のパラグラフから構成されていたら、パラグラフ間の空行は削除される。@var{justify}が非@code{nil}なら、フィルとともに位置揃えも行う。

@var{nosqueeze}が非@code{nil}なら、それは改行以外の空白に手を加えずに残すことを意味する。@var{squeeze-after}が非@code{nil}の場合、それはリージョン内の位置を指定し、その位置より前にあるスペースについては標準化を行わないことを意味する。

Adaptive
Fillモードでは、このコマンドはフィルプレフィクスを選択するために、デフォルトで@code{fill-context-prefix}を呼び出す。@ref{Adaptive
Fill}を参照のこと。
@end deffn

@deffn Command justify-current-line &optional how eop nosqueeze
このコマンドは、その行が正確に@code{fill-column}で終わるように、単語間にスペースを挿入する。リターン値は@code{nil}。

引数@var{how}が非@code{nil}なら、それは位置揃えスタイルを明示的に指定する。指定できる値は@code{left}、@code{right}、@code{full}、@code{center}、または@code{none}。値が@code{t}の場合、それは指定済みの位置揃えスタイル(以下の@code{current-justification}を参照)にしたがうことを意味する。@code{nil}は位置揃え@code{full}と同じ。

@var{eop}が非@code{nil}なら、それは@code{current-justification}がfull位置揃えを指定する場合にleft位置揃えだけを行うことを意味する。これは、パラグラフ最終行にたいして使用される。パラグラフ全体がfull位置揃えだったとしても、最終行はfull位置揃えであるべきではない。

@var{nosqueeze}が非@code{nil}なら、それは内部のスペースを変更しないことを意味する。
@end deffn

@defopt default-justification
この変数の値は、位置揃えに使用するスタイルをテキストプロパティで指定しないテキストにたいするスタイルを指定する。可能な値は@code{left}、@code{right}、@code{full}、@code{center}、または@code{none}。デフォルト値は@code{left}である。
@end defopt

@defun current-justification
この関数は、ポイント周辺のフィルに使用するための、適正な位置揃えスタイルをリターンする。

これは、ポイント位置のテキストプロパティ@code{justification}の値、そのようなテキストプロパティが存在しなければ変数@var{default-justification}の値をリターンする。しかし、``位置揃えなし''の場合は、@code{none}ではなく@code{nil}をリターンする。
@end defun

@defopt sentence-end-double-space
@anchor{Definition of sentence-end-double-space}
この変数が非@code{nil}の場合、ピリオドの後の単一のスペースをセンテンスの終わりとみなさず、フィル関数はそのような箇所でのラインブレークを行わない。
@end defopt

@defopt sentence-end-without-period
この変数が非@code{nil}なら、ピリオドなしでセンテンスは終了できる。これはたとえば、ピリオドなしの2連スペースでセンテンスが終わるタイ語な土に使用される。
@end defopt

@defopt sentence-end-without-space
この変数が非@code{nil}なら、それは後にスペースをともなうことなくセンテンスを終了させ得る文字列であること。
@end defopt

@defvar fill-paragraph-function
この変数は、パラグラフのフィルをオーバーライドする手段を提供する。この値が非@code{nil}なら、@code{fill-paragraph}はその処理を行うためにその関数を呼び出す。その関数が非@code{nil}値をリターンした場合、@code{fill-paragraph}は処理が終了したとみなして、即座にその値をリターンする。

この機能の通常の用途は、プログラミング言語のモードにおいてコメントをフィルすることである。通常の方法でその関数がパラグラフをフィルする必要がある場合は、以下のようにそれを行うことができる:

@example
(let ((fill-paragraph-function nil))
  (fill-paragraph arg))
@end example
@end defvar

@defvar fill-forward-paragraph-function
この変数は、@code{fill-region}や@code{fill-paragraph}のようなフィル関数が、次のパラグラフへ前方に移動する方法を、オーバーライドするための手段を提供する。値は、移動するパラグラフの数@var{n}を唯一の引数として呼び出される関数で、@var{n}と実際に移動したパラグラフ数の差をリターンするべきである。この変数のデフォルト値は@code{forward-paragraph}。@ref{Paragraphs,,,
emacs, The GNU Emacs Manual}を参照のこと。
@end defvar

@defvar use-hard-newlines
この変数が非@code{nil}なら、フィル関数はテキストプロパティ@code{hard}をもつ改行を削除しない。これらの``hard改行'は、パラグラフのセパレーターとして機能する。@ref{Hard
and Soft Newlines,, Hard and Soft Newlines, emacs, The GNU Emacs
Manual}を参照のこと。
@end defvar

@node Margins
@section Margins for Filling
@cindex margins, filling

@defopt fill-prefix
このバッファーローカル変数が非@code{nil}なら、それは通常のテキスト行の先頭に出現そ、それらのテキスト行をフィルする際には無視されるべきテキスト文字列を指定する。そのフィルプレフィクスで始まらない行はパラグラフの開始とみなされ、フィルプレフィクスで始まる行は、その後にスペースが追加される。フィルプレフィクスで始まりその後に追加のスペースがない行は、フィル可能な通常のテキスト行である。結果となるフィル済みの行も、フィルプレフィクスで開始される。

もしあれば、フィルプレフィクスは左マージンのスペースの後になる。
@end defopt

@defopt fill-column
このバッファーローカル変数は、フィルされる行の最大幅を指定する。値は列数を表す整数であること。Auto Fillモード(@ref{Auto
Filling}を参照)を含む、フィル、位置揃え、センタリングを行うすべてのコマンドが、この変数の影響を受ける。

実際の問題として、他の人が読むためのテキストを記述する場合は、@code{fill-column}を70より大きくするべきではない。これにしたがわない場合、人が快適に読むには行が長くなり過ぎ、それは下手に記述されたテキストに見えてしまうだろう。

@code{fill-column}のデフォルト値は70である。
@end defopt

@deffn Command set-left-margin from to margin
これは、@var{from}から@var{to}のテキストの@code{left-margin}プロパティに、値@var{margin}をセットする。Auto
Fillモードが有効なら、このコマンドは新たなマージンにフィットするよう、リージョンの再フィルも行う。
@end deffn

@deffn Command set-right-margin from to margin
これは、@var{from}から@var{to}のテキストの@code{right-margin}プロパティに、値@var{margin}をセットする。Auto
Fillモードが有効なら、このコマンドは新たなマージンにフィットするよう、リージョンの再フィルも行う。
@end deffn

@defun current-left-margin
この関数は、ポイント周辺をフィルするために使用する、適切な左マージン値をリターンする。値はカレント行開始文字の@code{left-margin}プロパティの値(なければ0)と、変数@code{left-margin}の値の合計。
@end defun

@defun current-fill-column
この関数は、ポイント周辺のテキストをフィルするために使用する、適切なフィル列値をリターンする。値は、変数@code{fill-column}からポイント後の文字の@code{right-margin}プロパティの値を減じた値。
@end defun

@deffn Command move-to-left-margin &optional n force
この関数は、カレント行の左マージンにポイントを移動する。移動先の列は、関数@code{current-left-margin}により決定される。引数@var{n}が非@code{nil}なら、@code{move-to-left-margin}はまず@var{n}行前方に移動する。

@var{force}が非@code{nil}の場合、それは行のインデントが左マージン値とマッチしなければ、インデントを修正するよう指定する。
@end deffn

@defun delete-to-left-margin &optional from to
この関数は、@var{from}から@var{to}の間のテキストから、左マージンのインデントを取り除く。削除するインデントの量は、@code{current-left-margin}を呼び出すことにより決定される。この関数が、非空白文字を削除することはない。@var{from}と@var{to}が省略された場合のデフォルトは、そのバッファー全体である。
@end defun

@defun indent-to-left-margin
この関数は、カレント行の先頭のインデントを、変数@code{left-margin}に指定された値に調整する(これにより空白文字の挿入や削除が起こるかもしれない)。Paragraph-Indent
Textモード内の変数@code{indent-line-function}の値は、この関数である。
@end defun

@defopt left-margin
この変数は左マージンの基本列を指定する。Fundamentalモードでは、@kbd{RET}はこの列にインデントする。手段の如何を問わず、この変数がセットされると自動的にバッファーローカルになる。
@end defopt

@defopt fill-nobreak-predicate
この変数はメジャーモードにたいして、特定の箇所で行ブレークしないよう指定する手段を提供する。値は関数のリストであること。フィルがバッファー内の特定箇所で行ブレークすると判断されるときは常に、その箇所にポイントを置いた状態で、これらの関数を引数なしで呼び出す。これらの関数のいずれ可が非@code{nil}をリターンした場合は、その行のその箇所では行ブレークしない。
@end defopt

@node Adaptive Fill
@section Adaptive Fill Mode
@c @cindex Adaptive Fill mode  "adaptive-fill-mode" is adjacent.

  @dfn{Adaptive
Fillモード}が有効なとき、Emacsは事前定義された値を使用するのではなく、フィルされる各パラグラフのテキストから自動的に、フィルプレフィクスを決定します。このフィルプレフィクスはフィルの間、@ref{Filling}と@ref{Auto
Filling}で説明されているように、そのパラグラフの2行目以降の行頭に挿入されます。

@defopt adaptive-fill-mode
この変数が非@code{nil}なら、Adaptive Fillモードは有効である。デフォルトは@code{t}。
@end defopt

@defun fill-context-prefix from to
@c The optional argument first-line-regexp is not documented
@c because it exists for internal purposes and might be eliminated
@c in the future.
この関数は、Adaptive
Fillモードの肝を実装する。これは@var{from}から@var{to}、通常はパラグラフの開始から終了にあるテキストにもとづいて、フィルプレフィクスを選択する。これは、以下で説明する変数にもとづき、そのパラグラフの最初の2行を調べることにより、これを行う。

この関数は通常、文字列としてフィルプレフィクスをリターンする。しかしこれを行う前に、この関数はそのプレフィクスで始まる行がパラグラフの開始とは見えないだろうか、最終チェックを行う(以降では特に明記しない)。これが発生した場合、この関数はかわりに@code{nil}をリターンすることにより、異常を通知する。

以下が、@code{fill-context-prefix}が行う詳細である:

@enumerate
@item
1行目からフィルプレフィクス候補を取得するために、(もしあれば)まず@code{adaptive-fill-function}内の関数、次に@code{adaptive-fill-regexp}(以下参照)の正規表現を試みる。これらの非@code{nil}の最初の結果、いずれも@code{nil}なら空文字列が1行目の候補となる。
@item
そのパラグラフが1行だけなら、関数は見つかったプレフィクス候補の妥当性をテストする。その後、この関数はそれが妥当ならその候補を、それ以外はスペース文字列をリターンする(以下の@code{adaptive-fill-first-line-regexp}の説明を参照)。
@item
すでにそのパラグラフが2行以上なら、この関数は次に1行目にたいして行なったのとまったく同じ方法で、2行目でプレフィクス候補を探す。見つからなければ@code{nil}をリターンする。
@item
ここで、この関数は発見的手法により2つのプレフィクス候補を比較する。2行目の候補の非空白文字の並びが1行目の候補と同じなら、この関数は2行目の候補をリターンする。それ以外では、2つの候補に共通するもっとも長い先頭の部分文字列(これは空文字列かもしれない)をリターンする。
@end enumerate
@end defun

@defopt adaptive-fill-regexp
Adaptive
Fillモードは、(もしあれば)行の左マージン空白文字の後から開始されるテキストにたいして、この正規表現をマッチする。マッチする文字列が、その行のフィルプレフィクス候補である。

デフォルト値は、空白文字と特定の句読点文字が混在した文字列にマッチする。
@end defopt

@defopt adaptive-fill-first-line-regexp
この正規表現は1行だけのパラグラフに使用され、1つの可能なフィルプレフィクス候補の追加の妥当性評価として機能する。その候補は、この正規表現にマッチするか、@code{comment-start-skip}にマッチしなければならない。マッチしなければ、@code{fill-context-prefix}はその候補を``同じ幅''のスペース文字列に置き換える。

この変数のデフォルト値は @w{@code{"\\`[
\t]*\\'"}}で、これは空白文字列だけにマッチする。このデフォルトの効果は、1行パラグラフで見つかったフィルプレフィクスが、常に純粋な空白文字となるよう強制することである。
@end defopt

@defopt adaptive-fill-function
この変数に関数をセットすることにより、自動的なフィルプレフィクス選択にたいして、より複雑な方法を指定することが可能になる。その関数は、(もしあれば)行の左マージンの後のポイントで呼び出され、かつポイントを保たなければならない。その関数は、``その行''のフィルプレフィクス、またはプレフィクスの判断に失敗したことを意味する@code{nil}のいずれかをリターンすること。
@end defopt

@node Auto Filling
@section Auto Filling
@cindex filling, automatic
@cindex Auto Fill mode

@c FIXME: I don't think any of the variables below is a/an normal/abnormal hook.
  Auto Fillモードは、テキスト挿入とともに自動的に行をフィルするマイナーモードです。このセクションでは、Auto
Fillモードにより使用されるフックを説明します。既存テキストを明示的にフィルしたり位置揃えすることができる関数の説明は、@ref{Filling}を参照してください。

  Auto
Fillモードでは、テキスの一部を再フィルするために、マージンや位置揃えを変更する関数も利用できます。@ref{Margins}を参照してください。

@defvar auto-fill-function
このバッファーローカル変数の値は、テーブル@code{auto-fill-chars}からの文字の自己挿入後に呼び出される関数(引数なし)であること。@code{nil}も可で、その場合は特に何もしない。

Auto-Fillモードが有効なら、@code{auto-fill-function}の値は@code{do-auto-fill}である。これは、行ブレークにたいする通常の戦略を実装することを唯一の目的とする関数である。
@end defvar

@defvar normal-auto-fill-function
この変数は、もしAuto Fillがオンのときは@code{auto-fill-function}にたいして使用する関数を指定する。Auto
Fillの動作方法を変更するために、メジャーモードはこの変数にバッファーローカル値をセットである。
@end defvar

@defvar auto-fill-chars
文字が自己挿入された際に@code{auto-fill-function}を呼び出す文字(ほとんどの言語環境においてはスペースと改行)からなる文字テーブル。
@end defvar

@node Sorting
@section Sorting Text
@cindex sorting text

  このセクションで説明するソート関数はすべて、バッファー内のテキストを再配置し。これはリスト要素を再配置する@code{sort}関数とは対照的です(@pxref{Rearrangement})。これらの関数がリターンする値に意味はありません。

@defun sort-subr reverse nextrecfun endrecfun &optional startkeyfun endkeyfun predicate
この関数はバッファーをレコードに細分してそれらをソートする、一般的なテキストソートルーチンである。このセクションのコマンドのほとんどは、この関数を使用する。

@code{sort-subr}が機能する方法を理解するためには、バッファーのアクセス可能範囲を@dfn{ソートレコード(sort
records)}と呼ばれる、分離された断片に分割すると考えればよい。レコードは連続、あるいは非連続かもしれないが、オーバーラップしてはならない。各ソートレコードの一部(全体かもしれない)は、ソートキーとして指定される。これらソートキーによるソートにより、レコードは再配置される。

通常、レコードはソートキー昇順で再配置される。@code{sort-subr}の1つ目の引数@var{reverse}が非@code{nil}なら、レコードはソートキー降順にソートされて再配置される。

@code{sort-subr}にたいする以下の4つの引数は、ソートレコード間でポイントを移動するために呼び出される。これらは@code{sort-subr}内で頻繁に呼び出される。

@enumerate
@item
@var{nextrecfun}は、レコード終端のポイントで呼び出される。この関数は次のレコードの先頭にポイントを移動する。@code{sort-subr}が呼び出された際は、ポイント位置が1つ目のレコードの開始とみなされる。したがって@code{sort-subr}を呼び出す前は、通常はそのバッファーの先頭にポイントを移動すること。

この関数はバッファー終端にポイントを残すことにより、それ以上のソートレコードがないことを示すことができるできる。

@item
@var{endrecfun}は、レコード内にあるポイントで呼び出される。これはレコード終端にポイントを移動する。

@item
@var{startkeyfun}は、ポイントをレコード先頭からソートキー先頭に移動する。この引数はオプションで、省略された場合はレコード全体がソートキーとなる。もし与えられた場合、その関数はソートキーとして使用する非@code{nil}値、または@code{nil}(ソートキーはそのバッファー内のポイント位置から始まることを示す)のいずれかをリターンすること。後者の場合は、ソートキー終端を見るけるために@var{endkeyfun}が呼び出される。

@item
@var{endkeyfun}は、ソートキー先頭からソートキー終端にポイントを移動するために呼び出される。引数はオプション。@var{startkeyfun}が@code{nil}をリターンし、かつこの引数が省略(または@code{nil})の場合、そのソートキーはレコード終端まで拡張される。@var{startkeyfun}が非@code{nil}値をリターンした場合、@var{endkeyfun}は不要。
@end enumerate

引数@var{predicate}は、キーを比較するために使用される関数である。キーが数字の場合のデフォルトは@code{<}、それ以外では@code{string<}がデフォルトである。

@code{sort-subr}の例として、以下は@code{sort-lines}関数の完全な定義である:

@example
@group
;; @r{ドキュメント文字列の冒頭2行は}
;; @r{ユーザー閲覧時には1行となることに注意}
(defun sort-lines (reverse beg end)
  "リージョン内の行をアルファベット順にソート;\
 引数は降順を意味する
プログラムから呼び出す場合は、以下の3つの引数がある:
@end group
@group
REVERSE(非nilは逆順の意)、\
およびBEGとEND(ソートするリージョン)
変数`sort-fold-case'は英字\
大文字小文字の違いが
ソート順に影響するかどうかを決定する"
@end group
@group
  (interactive "P\nr")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (let ((inhibit-field-text-motion t))
        (sort-subr reverse 'forward-line 'end-of-line)))))
@end group
@end example

ここで、@code{forward-line}は次のレコードの先頭にポイントを移動し、@code{end-of-line}はレコードの終端にポイントを移動する。レコード全体をソートキーとするため、引数@var{startkeyfun}および@var{endkeyfun}は渡していない。

@code{sort-paragraphs}はほとんど同じだが、@code{sort-subr}呼び出しが以下のようになる:

@example
@group
(sort-subr reverse
           (function
            (lambda ()
              (while (and (not (eobp))
                          (looking-at paragraph-separate))
                (forward-line 1))))
           'forward-paragraph)
@end group
@end example

ソートレコード内を指す任意のマーカーは、@code{sort-subr}リターン後は無意味なマーカー位置のまま取り残される。
@end defun

@defopt sort-fold-case
この変数が非@code{nil}なら@code{sort-subr}、およびその他のバッファーソート関数は、文字列比較時に大文字小文字の違いを無視する。
@end defopt

@deffn Command sort-regexp-fields reverse record-regexp key-regexp start end
このコマンドは、@var{start}から@var{end}の間のリージョンを、@var{record-regexp}および@var{key-regexp}で指定されたようにアルファベット順にソートする。@var{reverse}が負の整数なら、逆順にソートする。

アルファベット順のソートとは、2つのソートキーにたいして、それぞれの1つ目の文字同士、2つ目の文字同士といったように比較することにより、キーを比較することを意味する。文字が一致しなければ、それはソートキーが不等なことを意味する。最初の不一致箇所で文字が小さいソートキーが、小さいソートキーとなる。個別の文字は、Emacs文字セット内の文字コードの数値に応じて比較される。

引数@var{record-regexp}の値は、バッファーをソートレコードに分割する方法を指定する。各レコードの終端で、この正規表現にたいする検索は完了し、これにマッチするテキストが次のレコードとして採用される。たとえば、改行の前に少なくとも1つの文字がある行にマッチする正規表現@samp{^.+$}は、そのような行をソートレコードとするだろう。正規表現の構文と意味については、@ref{Regular
Expressions}を参照のこと。

引数@var{key-regexp}の値は、各レコードのどの部分がソートキーかを指定する。@var{key-regexp}はレコード全体、またはその一部にマッチすることができる。後者の場合、レコードの残りの部分はソート順に影響しないが、レコードが新たな位置に移動される際は、ともに移動される。

引数@var{key-regexp}は、@var{record-regexp}の部分式(subexpression)、またはその正規表現自体にマッチしたテキストを参照できる。

@var{key-regexp}は、以下を指定できる:

@table @asis
@item @samp{\@var{digit}}
@var{record-regexp}内で@var{digit}番目のカッコ@samp{\(...\)}でグループ化によりマッチしたテキストがソートキーになる。

@item @samp{\&}
レコード全体がソートキーとなる。

@item 正規表現
@code{sort-regexp-fields}は、そのレコード内で正規表現にたいするマッチを検索する。そのようなマッチがあれば、それがソートキーである。レコード内に@var{key-regexp}にたいするマッチがなければそのレコードは無視され、そのバッファー内でのレコードの位置は変更されないことを意味する(他のレコードがそのレコードを移動するかもしれない)。
@end table

たとえば、リージョン内のすべての行にたいして、最初の単語が文字@samp{f}で始まる行をソートすることを目論む場合は、@var{record-regexp}を@samp{^.*$}、@var{key-regexp}を@samp{\<f\w*\>}にセットするべきである。結果は、以下のような式になるだろう

@example
@group
(sort-regexp-fields nil "^.*$" "\\<f\\w*\\>"
                    (region-beginning)
                    (region-end))
@end group
@end example

@code{sort-regexp-fields}をインタラクティブに呼び出した場合は、ミニバッファー内で@var{record-regexp}と@var{key-regexp}の入力を求める。
@end deffn

@deffn Command sort-lines reverse start end
このコマンドは、@var{start}と@var{end}の間のリージョン内の行を、アルファベット順にソートする。@var{reverse}が非@code{nil}なら、逆順にソートする。
@end deffn

@deffn Command sort-paragraphs reverse start end
このコマンドは、@var{start}と@var{end}の間のリージョン内のパラグラフを、アルファベット順にソートする。@var{reverse}が非@code{nil}なら、逆順にソートする。
@end deffn

@deffn Command sort-pages reverse start end
このコマンドは、@var{start}と@var{end}の間のリージョン内のページを、アルファベット順にソートする。@var{reverse}が非@code{nil}なら、逆順にソートする。
@end deffn

@deffn Command sort-fields field start end
このコマンドは、@var{start}と@var{end}の間のリージョン内の行にたいして、各行の@var{field}番目のフィールドをアルファベット順に比較することに、行をソートする。@var{field}は空白文字により区切られ、1から数えられる。@var{field}が負なら、行の終端から@w{@minus{}@var{field}}番目のフィールドでソートする。このコマンドは、テーブルのソートに有用である。
@end deffn

@deffn Command sort-numeric-fields field start end
このコマンドは、@var{start}と@var{end}の間のリージョン内の行にたいして、各行の@var{field}番目のフィールドを数値的に比較することにより、行をソートする。@var{field}は空白文字により区切られ、1から数えられる。リージョン内の各行の指定されたフィールドは、数字を含んでいなければならない。0で始まる数字は8進数、@samp{0x}で始まる数字は16進数として扱われる。

@var{field}が負なら、行の終端から@w{@minus{}@var{field}}番目のフィールドでソートする。このコマンドは、テーブルのソートに有用である。
@end deffn

@defopt sort-numeric-base
この変数は、@code{sort-numeric-fields}にたいして、数字を解析するための基本基数を指定する。
@end defopt

@deffn Command sort-columns reverse &optional beg end
このコマンドは、@var{beg}と@var{end}の間にある行にたいして、特定の列範囲をアルファベット順に比較することによりソートする。@var{beg}と@var{end}の列位置は、ソートが行われる列範囲にバインドされる。

@var{reverse}が非@code{nil}なら、逆順にソートする。

このコマンドが普通と異なるのは、位置@var{beg}を含む行全体と、位置@var{end}を含む行全体が、ソートされるリージョンに含まれることである。

タブは指定された列に分割される可能性があるので、@code{sort-columns}はタブを含むテキストを受け付けないことに注意。ソート前に@kbd{M-x
untabify}を使用して、タブをスペースに変換すること。

可能なら、ユーティリティプログラム@code{sort}を呼び出すことにより、このコマンドは実際に機能する。
@end deffn

@node Columns
@section Counting Columns
@cindex columns
@cindex counting columns
@cindex horizontal position

  列関数は、文字位置(バッファー先頭から数えた文字数)と、列位置(行先頭から数えたスクリーン文字数)を変換する関数です。

  これら列関数は、スクリーン上占める列数に応じて、各文字を数えます。これはコントロール文字は@code{ctl-arrow}の値に応じて2列、または4列を、タブは@code{tab-width}の値と、タブが始まる列の位置に依存する列数を占めるものとして数えられることを意味します。@xref{Usual
Display}を参照してください。

  列数計算はウィンドウ幅と水平スクロール量を無視します。結果として、列値は任意に大きくなる可能性があります。最初(または左端)の列は0と数えられます。列値は不可視性を別として、オーバーレイとテキストプロパティを無視します。

@defun current-column
この関数は、左マージンを0として、列単位で数えたポイントの水平位置をリターンする。列の位置は、カレント行の開始からポイントまでの間の文字の表示上の表現すべての幅の和である。

@code{current-column}の使用例は、@ref{Text Lines}にある@code{count-lines}の説明を参照されたい。
@end defun

@deffn Command move-to-column column &optional force
この関数は、カレント行の@var{column}にポイントを移動する。@var{column}の計算には、行の開始からポイントまでの文字の表示上の表現の幅が考慮される。

インタラクティブに呼び出された際は、@var{column}はプレフィクス数引数の値である。@var{column}が整数でなければエラーがシグナルされる。

@c This behavior used to be documented until 2013/08.
@ignore
If column @var{column} is beyond the end of the line, point moves to
the end of the line.  If @var{column} is negative, point moves to the
beginning of the line.
@end ignore

列@var{column}が、タブのような複数列を占める文字の中間にあるために列を移動することが不可能な場合、ポイントはその文字の終端に移動される。しかし@var{force}が非@code{nil}、かつ@var{column}がタブの中間にあるなら、@code{move-to-column}はタブをスペースに変換して、正確に列@var{column}に移動することができる。それ以外の複数列文字については、それらを分割する手段がないので、@var{force}指定に関わらず、異常を引き起こす恐れがある。

その行が列@var{column}に達するほど長くない場合にも、引数@var{force}は効果をもつ。@var{column}が@code{t}なら、その列に達するよう行端に空白を追加することを意味する。

リターン値は、実際に移動した列である。
@end deffn

@node Indentation
@section Indentation
@cindex indentation

  インデント関数は、行の先頭にある空白文字の調査、移動、変更に使用されます。行の他の箇所にある空白文字を変更できる関数も、いくつかあります。列およびインデントは、左マージンを0として数えられます。

@menu
* Primitive Indent::         インデントのカウントと挿入に使用される関数。
* Mode-Specific Indent::     異なるモード用にインデントをカスタマイズする。
* Region Indent::            リージョン内すべての行のインデント。
* Relative Indent::          前の行にもとづきカレント行をインデントする。
* Indent Tabs::              調整可能なタイプライター形式のタブストップ。
* Motion by Indent::         最初の非ブランク文字への移動。
@end menu

@node Primitive Indent
@subsection Indentation Primitives

  このセクションでは、インデントのカウントと挿入に使用されるプリミティブ関数について説明します。以降のセクションの関数は、これらのプリミティブを使用します。関連する関数については、@ref{Size
of Displayed Text}を参照してください。

@defun current-indentation
@comment !!Type Primitive Function
@comment !!SourceFile indent.c
この関数は、カレント行のインデント、すなわち最初の非ブランク文字の水平位置をリターンする。行のコンテンツ全体がブランクなら、それは行終端の水平位置である。
@end defun

@deffn Command indent-to column &optional minimum
@comment !!Type Primitive Function
@comment !!SourceFile indent.c
この関数は、ポイントから@var{column}に達するまで、タブとスペースでインデントを行う。@var{minimum}が指定され、かつそれが非@code{nil}なら、たとえ@var{column}を超えることが要求される場合であっても、少なくともその個数のスペースが挿入される。それ以外では、ポイントがすでに@var{column}を超える場合、この関数は何も行わない。値は、挿入されたインデントの終端列である。

挿入される空白文字は、周囲のテキスト(通常は先行するテキストのみ)のテキストプロパティを継承する。@ref{Sticky
Properties}を参照のこと。
@end deffn

@defopt indent-tabs-mode
@comment !!SourceFile indent.c
この変数が非@code{nil}なら、インデント関数はスペースと同様、タブを挿入でき、それ以外ではスペースだけを挿入できる。この変数をセットすることにより、自動的にカレントバッファー内でバッファーローカルになる。
@end defopt

@node Mode-Specific Indent
@subsection Indentation Controlled by Major Mode

  すべてのメジャーモードにとって重要な関数は、編集対象の言語にたいして正しくインデントを行うように、@key{TAB}キーをカスタマイズします。このセクションでは、@key{TAB}キーのメカニズムと、それを制御する方法について説明します。このセクションの関数は、予期せぬ値をリターンします。

@deffn Command indent-for-tab-command &optional rigid
これはほとんどの編集用モードで、@key{TAB}にバインドされるコマンドである。これの通常の動作はカレント行のインデントだが、かわりにタブ文字の挿入や、リージョンのインデントを行うこともできる。

これは以下のことを行う:

@itemize
@item
まずTransient
Markモードが有効か、そしてリージョンがアクティブかどうかをチェックする。もしそうなら、リージョン内のテキストすべてをインデントするために@code{indent-region}を呼び出す(@ref{Region
Indent}を参照)。

@item
それ以外なら、@code{indent-line-function}内のインデント関数が@code{indent-to-left-margin}の場合、または変数@code{tab-always-indent}が挿入する文字としてタブ文字を指定する場合(以下参照)は、タブ文字を挿入する。

@item
それ以外なら、カレント行をインデントする。これは@code{indent-line-function}内の関数を呼び出すことにより行われる。その行がすでにインデント済みで、かつ@code{tab-always-indent}の値が@code{complete}(以下参照)なら、ポイント位置のテキストの補完を試みる。
@end itemize

@var{rigid}が非@code{nil}(インタラクティブな場合はプレフィクス引数)の場合、このコマンドが行をインデントした後、あるいはタブを挿入後、新たなインデントを反映するために、このコマンドはカレント行先頭にあるバランスされた式全体も厳正にインデントする。この引数は、コマンドがリージョンをインデントする場合は無視される。
@end deffn

@defvar indent-line-function
この変数の値はカレント行をインデントするために@code{indent-for-tab-command}、およびその他種々のインデントコマンドにより使用される関数である。これは通常メジャーモードにより割り当てられ、たとえばLispモードはこれを@code{lisp-indent-line}、Cモードは@code{c-indent-line}、のようにセットする。デフォルト値は@code{indent-relative}。@ref{Auto-Indentation}を参照のこと。
@end defvar

@deffn Command indent-according-to-mode
このコマンドは、カレントのメジャーモードに適した方法でカレント行をインデントするために、@code{indent-line-function}内の関数を呼び出す。
@end deffn

@deffn Command newline-and-indent
この関数は改行を挿入後、メジャーモードに応じて新たな行(挿入した改行の次の行)をインデントする。これは@code{indent-according-to-mode}を呼び出すことによりインデントを行う。
@end deffn

@deffn Command reindent-then-newline-and-indent
このコマンドは、カレント行の再インデント、ポイント位置への改行の挿入、その後新たな行(挿入した改行の次の行)のインデントを行う。これは@code{indent-according-to-mode}を呼び出すことにより、両方の行をインデントする。
@end deffn

@defopt tab-always-indent
この変数は、@key{TAB}(@code{indent-for-tab-command})コマンドの挙動のカスタマイズに使用できる。値が@code{t}(デフォルト)なら、コマンドは通常カレント行だけをインデントする。値が@code{nil}なら、コマンドはポイントが左マージン、またはその行のインデント内ににあるときのみ、カレント行をインデントし、それ以外はタブ文字を挿入する。値が@code{complete}なら、コマンドはまずカレント行のインデントを試み、その行がすでにインデント済みならポイント位置のテキストを補完するために@code{completion-at-point}を呼び出す(@ref{Completion
in Buffers}を参照)。
@end defopt

@node Region Indent
@subsection Indenting an Entire Region

  このセクションでは、リージョン内すべての行をインデントするコマンドを説明します。これらは予期せぬ値をリターンします。

@deffn Command indent-region start end &optional to-column
このコマンドは、@var{start}(含む)から@var{end}(含まず)で始まる非ブランク行すべてをインデントする。@var{to-column}が@code{nil}なら、@code{indent-region}はカレントモードのインデント関数、すなわち@code{indent-line-function}の値を呼び出すことにより、非ブランク行すべてをインデントする。

@var{to-column}が非@code{nil}なら、それはインデントの列数を指定する整数であること。その場合、この関数は空白文字を追加もしくは削除することにより、正確にその量のインデントを各行に与える。

フィルプレフィクスがある場合、@code{indent-region}はそのフィルプレフィクスで開始されるように、各行をインデントする。
@end deffn

@defvar indent-region-function
この変数の値は、ショートカットとして@code{indent-region}により使用されるかもしれない関数である。その関数はリージョンの開始と終了という、2つの引数をとること。その関数はリージョンの行を1行ずつインデントするときと同じような結果を生成するようにデザインするべきだが、おそらくより高速になるであろう。

値が@code{nil}ならショートカットは存在せず、@code{indent-region}は実際に1行ずつ機能する。

ショートカット関数は、@code{indent-line-function}が関数定義先頭をスキャンしなければならない、CモードやLispモードのようなモードに有用で、それを各行に適用するためには行数の2乗に比例する時間を要するだろう。ショートカットは各行のインデントとともに移動してスキャン情報を更新でき、それは線形時間である。行を個別にインデントするのが高速なモードでは、ショートカットの必要性はない。

引数@var{to-column}が非@code{nil}の@code{indent-region}では意味は異なり、この変数は使用しない。
@end defvar

@deffn Command indent-rigidly start end count
この関数は、@var{start}(含む)から@var{end}(含まず)までのすべての行を、横に@var{count}列インデントする。これは影響を受けるリージョンの``外観を保ち''、それを厳密な単位として移動する。

これはインデントされていないテキストリージョンのインデントだけでなく、フォーマット済みコードのリージョンにたいするインデントにも有用である。たとえば@var{count}が3なら、このコマンドは指定されたリージョン内で始まるすべての行のインデントに3を追加する。

プレフィクス引数なしでインタラクティブに呼び出された場合、このコマンドはインデントを厳密に調整するために、Transient
Markモードを呼び出す。@ref{Indentation Commands,,, emacs, The GNU Emacs
Manual}を参照のこと。
@end deffn

@deffn Command indent-code-rigidly start end columns &optional nochange-regexp
これは@code{indent-rigidly}と似ているが、文字列やコメントで始まる行を変更しない点が異なる。

加えて、(@var{nochange-regexp}が非@code{nil}の場合)@var{nochange-regexp}が行先頭にマッチすれば、その行を変更しない。
@end deffn

@node Relative Indent
@subsection Indentation Relative to Previous Lines

  このセクションでは、前の行のコンテンツにもとづいてカレント行をインデントする、コマンドを2つ説明します。

@deffn Command indent-relative &optional unindented-ok
このコマンドは、前の非ブランク行の次の@dfn{インデントポイント(indent
point)}と同じ列に拡張されるように、ポイント位置に空白文字を挿入する。インデントポイントとは、後に空白文字をともなった非空白文字である。次のインデントポイントは、ポイントのカレント列より大きい、最初のインデントポイントになる。たとえばポイントがテキスト行の最初の非ブランク文字の下と左にある場合、空白文字を挿入してその列に移動する。

前の非ブランク行に次のインデントポイントがない(列の位置が十分大きくない)場合は、(@var{unindented-ok}が非@code{nil}なら)何もしないか、あるいは@code{tab-to-tab-stop}を呼び出す。したがって、ポイントが短いテキスト行の最後の列の下と右にある場合、このコマンドは通常は空白文字を挿入することにより、次のタブストップにポイントを移動する。

@code{indent-relative}のリターン値は予測できない。

以下の例では、ポイントは2行目の先頭にある:

@example
@group
            This line is indented twelve spaces.
@point{}The quick brown fox jumped.
@end group
@end example

@noindent
式@code{(indent-relative nil)}の評価により、以下が生成される:

@example
@group
            This line is indented twelve spaces.
            @point{}The quick brown fox jumped.
@end group
@end example

  次の例では、ポイントは@samp{jumped}の@samp{m}と@samp{p}の間にある:

@example
@group
            This line is indented twelve spaces.
The quick brown fox jum@point{}ped.
@end group
@end example

@noindent
式@code{(indent-relative nil)}の評価により、以下が生成される:

@example
@group
            This line is indented twelve spaces.
The quick brown fox jum  @point{}ped.
@end group
@end example
@end deffn

@deffn Command indent-relative-maybe
@comment !!SourceFile indent.el
このコマンドは、引数@var{unindented-ok}に@code{t}を指定して@code{indent-relative}を呼び出すことにより、前の非ブランク行に倣ってカレント行をインデントする。リターン値は予測できない。

カレント列より先のインデントポイントが前の非ブランク行に存在しなければ、このコマンドは何もしない。
@end deffn

@node Indent Tabs
@subsection Adjustable ``Tab Stops''
@cindex tabs stops for indentation

  このセクションでは、ユーザー指定の``タブストップ(tab
stops)''と、それらを使用、セットするメカニズムについて説明します。``タブストップ''という名前は、タイプライターのタブストップと機能が類似しているため使用されています。この機能は、次のタブストップ列に到達するために、適切な数のスペースとタブを挿入することにより機能します。これは、バッファー内のタブ文字の表示に影響を与えません(@ref{Usual
Display}を参照)。Textモードのような少数のメジャーモードだけが、@key{TAB}文字を入力として、このタブストップ機能を使用することに注意してください。@ref{Tab
Stops,,, emacs, The GNU Emacs Manual}を参照してください。

@deffn Command tab-to-tab-stop
このコマンドは、@code{tab-stop-list}により定義される次のタブストップ列まで、ポイント前にスペースまたはタブを挿入する。
@end deffn

@defopt tab-stop-list
この変数は、@code{tab-to-tab-stop}により使用されるタブストップ列を定義する。これは@code{nil}、もしくは増加(均等に増加する必要はない)していく整数のリストであること。このリストは暗黙に、最後の要素と最後から2番目の要素の間隔(またはリストの要素が2未満なら@code{tab-width})を繰り返すことにより、無限に拡張される。値@code{nil}は、列@code{tab-width}ごとにタブストップすることを意味する。

インタラクティブにタブストップの位置を編集するには、@kbd{M-x edit-tab-stops}を使用すればよい。
@end defopt

@node Motion by Indent
@subsection Indentation-Based Motion Commands

  以下のコマンドは主にインタラクティブに使用され、テキスト内のインデントにもとづいて動作します。

@deffn Command back-to-indentation
@comment !!SourceFile simple.el
このコマンドは、カレント行(ポイントのある行のこと)の最初の非空白文字にポイントを移動する。リターン値は@code{nil}。
@end deffn

@deffn Command backward-to-indentation &optional arg
@comment !!SourceFile simple.el
このコマンドは、後方へ@var{arg}行ポイントを移動した後に、その行の最初の非ブランク文字にポイントを移動する。リターン値は@code{nil}。@var{arg}が省略または@code{nil}のときのデフォルトは1。
@end deffn

@deffn Command forward-to-indentation &optional arg
@comment !!SourceFile simple.el
このコマンドは、前方へ@var{arg}行ポイントを移動した後に、その行の最初の非ブランク文字にポイントを移動する。リターン値は@code{nil}。@var{arg}が省略または@code{nil}のときのデフォルトは1。
@end deffn

@node Case Changes
@section Case Changes
@cindex case conversion in buffers

  ここで説明する大文字小文字変換コマンドは、カレントバッファー内のテキストに作用します。文字列と文字の大文字小文字変換コマンドは@ref{Case
Conversion}、大文字または小文字に変換する文字や、その変換方法のカスタマイズは@ref{Case Tables}を参照してください。

@deffn Command capitalize-region start end
この関数は@var{start}と@var{end}で定義されるリージョン内のすべての単語をcapitalizeする。capitalizeとは、各単語の最初の文字を大文字、残りの文字を小文字に変換することを意味する。この関数は@code{nil}をリターンする。

リージョンのいずれかの端が単語の中間にある場合は、リージョン内にある部分を単語全体として扱う。

インタラクティブに@code{capitalize-region}が呼び出された際は、@var{start}と@var{end}はポイントとマークになり、小さいほうが先になる。

@example
@group
---------- Buffer: foo ----------
This is the contents of the 5th foo.
---------- Buffer: foo ----------
@end group

@group
(capitalize-region 1 37)
@result{} nil

---------- Buffer: foo ----------
This Is The Contents Of The 5th Foo.
---------- Buffer: foo ----------
@end group
@end example
@end deffn

@deffn Command downcase-region start end
この関数は、@var{start}と@var{end}で定義されるリージョン内のすべての英文字を小文字に変換する。この関数は@code{nil}をリターンする。

インタラクティブに@code{downcase-region}が呼び出された際は、@var{start}と@var{end}はポイントとマークになり、小さいほうが先になる。
@end deffn

@deffn Command upcase-region start end
この関数は、@var{start}と@var{end}で定義されるリージョン内のすべての英文字を大文字に変換する。この関数は@code{nil}をリターンする。

インタラクティブに@code{upcase-region}が呼び出された際は、@var{start}と@var{end}はポイントとマークになり、小さいほうが先になる。
@end deffn

@deffn Command capitalize-word count
この関数は、ポイントの後の@var{count}単語をcapitalizeして、変換後その後にポイントを移動する。capitalizeとは、各単語の先頭を大文字、残りを小文字に変換することを意味する。@var{count}が負なら、この関数は前の@minus{}@var{count}単語をcapitalizeするが、ポイントは移動しない。値は@code{nil}。

ポイントが単語の中間にある場合、ポイントの前にある単語部分は、前方に移動する際は無視される。そして残りの部分が単語全体として扱われる。

インタラクティブに@code{capitalize-word}が呼び出された際は、@var{count}に数プレフィクス引数がセットされる。
@end deffn

@deffn Command downcase-word count
この関数は、ポイントの後の@var{count}単語を小文字に変換して、変換後その後にポイントを移動する。@var{count}が負なら、この関数は前の@minus{}@var{count}単語を小文字に変換するが、ポイントは移動しない。値は@code{nil}。

インタラクティブに@code{downcase-word}が呼び出された際は、@var{count}に数プレフィクス引数がセットされる。
@end deffn

@deffn Command upcase-word count
この関数は、ポイントの後の@var{count}単語を大文字に変換して、変換後その後にポイントを移動する。@var{count}が負なら、この関数は前の@minus{}@var{count}単語を小文字に変換するが、ポイントは移動しない。値は@code{nil}。

インタラクティブに@code{upcase-word}が呼び出された際は、@var{count}に数プレフィクス引数がセットされる。
@end deffn

@node Text Properties
@section Text Properties
@cindex text properties
@cindex attributes of text
@cindex properties of text

  バッファーや文字列内の各文字位置は、シンボルにおけるプロパティリスト(@ref{Property
Lists}を参照)のように、@dfn{テキストプロパティリスト(text property
list)}をもつことができます。特定の位置の特定の文字に属するプロパティ、たとえばこのセンテンス先頭の文字@samp{T}(訳注:
翻訳前のセンテンスは"The properties belong to a
..."で始まる)、または@samp{foo}の最初の@samp{o}など、もし同じ文字が異なる2箇所に存在する場合、2つの文字は一般的に異なるプロパティをもちます。

  それぞれのプロパティには、名前と値があります。どちらも任意のLispオブジェクトをもつことができますが、名前は通常はシンボルです。典型的には、それぞれのプロパティ名シンボルは、特定の目的のために使用されます。たとえば、テキストプロパティ@code{face}は、文字を表示するためのフェイスを指定します(@ref{Special
Properties}を参照)。名前を指定してそれに対応する値を尋ねるのが、このプロパティリストにアクセスするための通常の方法です。

  ある文字が@code{category}プロパティをもつ場合は、それをその文字の@dfn{プロパティカテゴリー(property
category)}と呼びます。これはシンボルであるべきです。そのシンボルのプロパティは、その文字のプロパティにたいしてデフォルトとしての役割をもちます。

  文字列とバッファーの間でテキストをコピーには、文字とともにそのプロパティが保持されます。これには@code{substring}、@code{insert}、@code{buffer-substring}のようなさまざまな関数が含まれます。

@menu
* Examining Properties::     単一の文字のプロパティを調べる。
* Changing Properties::      テキスト範囲のプロパティをセットする。
* Property Search::          プロパティが値を変更する場所の検索。
* Special Properties::       特別な意味をもつ特定のプロパティ。
* Format Properties::        テキストのフォーマットを表すプロパティ。
* Sticky Properties::        挿入されたテキストが隣接するテキストからプロパティを取得する方法。
* Lazy Properties::          テキストが調べられる際のみ、ものぐさな方法でテキストプロパティを計算する。
* Clickable Text::           テキストプロパティを使用して、テキストリージョンがクリック時に何か行うようにする。
* Fields::                   バッファー内にフィールドを定義する@code{field}プロパティ。
* Not Intervals::            テキストプロパティがLispから可視なテキスト間隔をもたない理由。
@end menu

@node Examining Properties
@subsection Examining Text Properties
@cindex examining text properties
@cindex text properties, examining

  テキストプロパティを調べるもっともシンプルな方法は、特定の文字の特定のプロパティの値を尋ねる方法です。これを行うには、@code{get-text-property}を使用します。ある文字のプロパティリスト全体を取得するには、@code{text-properties-at}を使用します。複数の文字のプロパティを一度に調べる関数については、@ref{Property
Search}を参照してください。

  以下の関数は、文字列とバッファーの両方を処理します。バッファー内の位置は1から始まりますが、文字列内の位置は0から始まることに留意してください。

@defun get-text-property pos prop &optional object
この関数は、@var{object}(バッファーまたは文字列)内の位置@var{pos}の後にある文字のプロパティ@var{prop}の値をリターンする。引数@var{object}はオプションで、デフォルトはカレントバッファー。

厳密な意味で@var{prop}プロパティが存在しないが、その文字がシンボルであるようなプロパティカテゴリーをもつなら、@code{get-text-property}はそのシンボルの@var{prop}プロパティをリターンする。
@end defun

@defun get-char-property position prop &optional object
この関数は@code{get-text-property}と似ているが、まずオーバーレイをチェックして、次にテキストプロパティをチェックする点が異なる。@ref{Overlays}を参照のこと。

引数@var{object}は文字列、バッファー、あるいはウィンドウかもしれない。ウィンドウならそのウィンドウ内に表示されているバッファーのテキストプロパティとオーバーレイが使用されるが、そのウィンドウにたいしてアクティブなオーバーレイだけが考慮される。@var{object}がバッファーなら、そのバッファー内のオーバーレイがまず優先順に考慮され、その後にテキストプロパティが考慮される。@var{object}が文字列の場合？文字列は決してオーバーレイをもたないので、テキストプロパティだけが考慮される。
@end defun

@defun get-pos-property position prop &optional object
この関数は@code{get-char-property}と似ているが、@var{position}(すぐ右)にある文字のプロパティのかわりに、プロパティのstickiness(粘着性)とオーバーレイのadvancement(前向的)なセッティングに注意を払う点が異なる。
@end defun

@defun get-char-property-and-overlay position prop &optional object
これは@code{get-char-property}と似ているが、そのプロパティ値が由来するオーバーレイについて追加情報を与える点が異なる。

その値は@sc{car}がプロパティ値であるようなコンスセルで、同じ引数により@code{get-char-property}がリターンするであろう値と同じである。@sc{cdr}はそのプロパティが見つかった箇所のオーバーレイ、またはテキストプロパティとして見つかった場合や見つからなかった場合は@code{nil}である。

@var{position}が@var{object}の終端なら、@sc{car}と@sc{cdr}の値はどちらも@code{nil}になる。
@end defun

@defvar char-property-alias-alist
この変数は、プロパティ名と代替となるプロパティ名リストをマップするalistを保持する。文字があるプロパティにたいして直接値を指定しなければ、順に代替プロパティ名が調べられ、最初の非@code{nil}値が使用される。この変数は@code{default-text-properties}より優先され、この変数より@code{category}プロパティが優先される。
@end defvar

@defun text-properties-at position &optional object
この関数は、文字列またはバッファー@var{object}内の位置@var{position}にある文字のプロパティリスト全体をリターンする。@var{object}が@code{nil}なら、デフォルトはカレントバッファーとなる。
@end defun

@defvar default-text-properties
この変数は、テキストプロパティにたいしてデフォルト値を与えるプロパティリストを保持する。あるプロパティにたいして文字が直接、あるいはカテゴリーシンボルまたは@code{char-property-alias-alist}を通じて値を指定しないときは常に、このリストに格納された値がかわりに使用される。以下は例である:

@example
(setq default-text-properties '(foo 69)
      char-property-alias-alist nil)
;; @r{文字1は自身のプロパティをもたない}
(set-text-properties 1 2 nil)
;; @r{取得される値はデフォルト値である}
(get-text-property 1 'foo)
     @result{} 69
@end example
@end defvar

@node Changing Properties
@subsection Changing Text Properties
@cindex changing text properties
@cindex text properties, changing

  プロパティを変更するプリミティブは、バッファーまたは文字列内の指定されたテキスト範囲に適用されます。関数@code{set-text-properties}(セクションの最後を参照)は、その範囲内のテキストのプロパティリスト全体をセットします。名前を指定することにより特定のプロパティだけを追加、変更、削除するのにも、より有用です。

  テキストプロパティはバッファー(または文字列)のコンテンツの一部とみなされ、かつスクリーン上でのバッファーの見栄えに影響を与えることができるので、バッファー内のテキストプロパティの変更はすべて、バッファーを変更済みとマークします。バッファーテキストプロパティの変更も、アンドゥできます(@ref{Undo}を参照)。バッファー内の位置は1から始まりますが、文字列内の位置は0から始まります。

@defun put-text-property start end prop value &optional object
この関数は、文字列またはバッファー@var{object}内の@var{start}と@var{end}の間のテキストにたいして、プロパティ@var{prop}に@var{value}をセットする。@var{object}が@code{nil}なら、デフォルトはカレントバッファーである。
@end defun

@defun add-text-properties start end props &optional object
この関数は、文字列またはバッファー@var{object}内の@var{start}と@var{end}の間のテキストにたいして、テキストプロパティを追加またはオーバーライドする。@var{object}が@code{nil}なら、デフォルトはカレントバッファーである。

引数@var{props}は、追加するプロパティを指定する。これはプロパティリストの形式(@ref{Property
Lists}を参照)、つまりプロパティ名と対応する値が交互に出現するような要素を含むリストであること。

関数が実際に何らかのプロパティの値を変更したら@code{t}、それ以外(@var{props}が@code{nil}、またはプロパティの値がテキスト内のプロパティの値と一致している場合)は@code{nil}がリターン値となる。

たとえば、以下はテキストの範囲に@code{comment}と@code{face}のプロパティをセットする例である:

@example
(add-text-properties @var{start} @var{end}
                     '(comment t face highlight))
@end example
@end defun

@defun remove-text-properties start end props &optional object
この関数は、文字列またはバッファー@var{object}内の@var{start}と@var{end}の間のテキストから、指定されたテキストプロパティを削除する。@var{object}が@code{nil}なら、デフォルトはカレントバッファーとなる。

引数@var{props}は、削除するプロパティを指定する。これはプロパティリストの形式(@ref{Property
Lists}を参照)、つまりプロパティ名と対応する値が交互に出現するような要素を含むリストであること。しかし問題となるのは名前であり、付随する値は無視される。たとえば@code{face}プロパティを削除するには、以下のようにすればよい。

@example
(remove-text-properties @var{start} @var{end} '(face nil))
@end example

関数が実際に何らかのプロパティの値を変更したら@code{t}、それ以外(@var{props}が@code{nil}、または指定されたテキスト内にそれらのプロパティをもつ文字がない場合)は@code{nil}がリターン値となる。

特定のテキストからすべてのテキストプロパティを削除するには、新たなプロパティリストに@code{nil}を指定して、@code{set-text-properties}を使用すればよい。
@end defun

@defun remove-list-of-text-properties start end list-of-properties &optional object
@code{remove-text-properties}と同様だが、@var{list-of-properties}がプロパティ名と値が交互になったリストではなく、プロパティ名だけのリストである点が異なる。
@end defun

@defun set-text-properties start end props &optional object
この関数は、文字列またはバッファー@var{object}内の@var{start}から@var{end}の間のテキストにたいするテキストプロパティリストを、完全に置き換える。@var{object}が@code{nil}なら、デフォルトはカレントバッファーとなる。

引数@var{props}は新たなプロパティリスト。これはプロパティメジャーと対応する値が交互となるような要素のリストであること。

@code{set-text-properties}のリターン後は、指定された範囲内のすべての文字は、等しいプロパティをもつ。

@var{props}が@code{nil}なら、指定されたテキスト範囲からすべてのプロパティを取り除く効果がある。以下は例である:

@example
(set-text-properties @var{start} @var{end} nil)
@end example

この関数のリターン値を信用してはならない。
@end defun

@defun add-face-text-property start end face &optional appendp object
この関数は@var{start}と@var{end}の間のテキストのテキストプロパティ@code{face}にフェイス@var{face}を追加するよう動作する。@var{face}はフェイス名もしくはanonymousフェイス(anonymous
face: 無名フェイス)のような、@code{face}プロパティ(@ref{Special
Properties}を参照)にたいして有効な値であること(@ref{Faces}を参照)。

リージョン内の任意のテキストがすでに非@code{nil}の@code{face}プロパティをもつ場合、それらのフェイスは保たれる。
If any text in the region already has a non-  property, those face(s) are
retained.
この関数は@code{face}プロパティに、最初の要素(デフォルト)が@var{face}、以前に存在していたフェイスが残りの要素であるような、フェイスのリストをセットする。オプション引数@var{append}が非@code{nil}なら、@var{face}はかわりにリストの最後に追加される。フェイスリスト内では、各属性にたいして最初に出現する値が優先されることに注意。

たとえば以下のコードでは、@var{start}と@var{end}の間のテキストに、グリーン斜体のフェイスを割り当てるだろう:

@example
(add-face-text-property @var{start} @var{end} 'italic)
(add-face-text-property @var{start} @var{end} '(:foreground "red"))
(add-face-text-property @var{start} @var{end} '(:foreground "green"))
@end example

オプション引数@var{object}が非@code{nil}なら、それはカレントバッファーではなく、動作するバッファーまたは文字列を指定する。@var{object}が文字列なら、@var{start}と@var{end}は0基準で文字列内をインデックス付けする。
@end defun

  文字列にテキストプロパティを付するもっとも簡単な方法は、@code{propertize}です:

@defun propertize string &rest properties
この関数は、テキストプロパティ@var{properties}を追加した、@var{string}のコピーをリターンする。これらのプロパティは、リターンされる文字列内のすべての文字に適用される。以下は、@code{face}プロパティと@code{mouse-face}プロパティとともに文字列を構築する例である:

@smallexample
(propertize "foo" 'face 'italic
            'mouse-face 'bold-italic)
     @result{} #("foo" 0 3 (mouse-face bold-italic face italic))
@end smallexample

文字列のさまざまな部分に異なるプロパティをputするんは、それぞれの部分を@code{propertize}で構築して、@code{concat}でそれらを結合すればよい:

@smallexample
(concat
 (propertize "foo" 'face 'italic
             'mouse-face 'bold-italic)
 " and "
 (propertize "bar" 'face 'italic
             'mouse-face 'bold-italic))
     @result{} #("foo and bar"
                 0 3 (face italic mouse-face bold-italic)
                 3 8 nil
                 8 11 (face italic mouse-face bold-italic))
@end smallexample
@end defun

  プロパティではなくバッファーからテキストをコピーする関数@code{buffer-substring-no-properties}については、@ref{Buffer
Contents}を参照してください。

@node Property Search
@subsection Text Property Search Functions
@cindex searching text properties
@cindex text properties, searching

  テキストプロパティの通常の使用では、ほとんどの場合は複数または多くの連続する文字が、同じ値のプロパティをもちます。文字を1つずつ調べるプログラムを記述するよりも、同じプロパティ値をもつテキスト塊(chunks
of text)を処理するほうが、より高速です。

  以下は、これを行うことに使用できる関数です。これらは、プロパティ値の比較に@code{eq}を使用します。すべての関数において、@var{object}のデフォルトはカレントバッファーです。

  より良いパフォーマンスのためには、特に単一のプロパティを検索する関数においては、@var{limit}引数の使用が重要です。そうしないと、興味のあるプロパティが変化しない場合に、バッファー終端までのスキャンに長い時間を要するでしょう。

  これらの関数はポイントを移動しません。そのかわりに位置(または@code{nil})をリターンします。ポイントは常に文字と文字の間にあることを思い出してください。これらの関数によりリターンされる位置は、異なるプロパティをもつ、2つの文字の間にあります。

@defun next-property-change pos &optional object limit
この関数は文字列またはバッファー@var{object}内の位置@var{pos}から、何らかのテキストプロパティの変化が見つかるまで、テキストを前方にスキャンして、変化のあった位置をリターンする。別の言い方をすると、@var{pos}の直後の文字とプロパティが等しくない、@var{pos}の先にある最初の文字の位置をリターンする。

@var{limit}が非@code{nil}なら、スキャンは位置@var{limit}で停止する。そのポイントより前にプロパティが変化しなければ、この関数は@var{limit}をリターンする。

プロパティが@var{object}終端まで変化せず、かつ@var{limit}が@code{nil}なら、値は@code{nil}となる。値が非@code{nil}なら、それは@var{pos}以上の位置である。@var{limit}が@var{pos}と等しいときのみ、値は@var{pos}になる。

以下は、すべてのプロパティが定数であるようなテキスト塊によりバッファーをスキャンする方法の例である:

@smallexample
(while (not (eobp))
  (let ((plist (text-properties-at (point)))
        (next-change
         (or (next-property-change (point) (current-buffer))
             (point-max))))
    @r{ポイントから@var{next-change}へテキストを処理@dots{}}
    (goto-char next-change)))
@end smallexample
@end defun

@defun previous-property-change pos &optional object limit
これは@code{next-property-change}と似ているが、@var{pos}から前方ではなく後方にスキャンする点が異なる。値が非@code{nil}なら、それは@var{pos}以下の位置である。@var{limit}と@var{pos}が等しい場合のみ、@var{pos}をリターンする。
@end defun

@defun next-single-property-change pos prop &optional object limit
この関数はプロパティ@var{prop}内の変化についてテキストをスキャンして、変化があった位置をリターンする。このスキャンは、文字列またはバッファー@var{object}内の位置@var{pos}から、前方に行われる。別の言い方をすると、@var{pos}の直後の文字とプロパティ@var{prop}が等しくない、@var{pos}の先にある最初の文字の位置をリターンする。

@var{limit}が非@code{nil}なら、スキャンは位置@var{limit}で終了する。そのポイントより前にプロパティの変化がなければ、@code{next-single-property-change}は@var{limit}をリターンする。

プロパティが@var{object}終端まで変化せず、かつ@var{limit}が@code{nil}なら、値は@code{nil}となる。値が非@code{nil}なら、それは@var{pos}以上の位置である。@var{limit}が@var{pos}と等しいときのみ、値は@var{pos}になる。
@end defun

@defun previous-single-property-change pos prop &optional object limit
これは@code{next-single-property-change}と似ているが、@var{pos}から前方ではなく後方にスキャンする点が異なる。値が非@code{nil}なら、それは@var{pos}以下の位置である。@var{limit}と@var{pos}が等しい場合のみ、@var{pos}をリターンする。
@end defun

@defun next-char-property-change pos &optional limit
@code{next-property-change}と似ているが、これはテキストプロパティと同様オーバーレイも考慮し、バッファー終端より前に変化が見つからなければ、@code{nil}ではなくバッファー位置の最大をリターンする点が異なる(この点では@code{next-property-change}よりも対応するオーバーレイ関数@code{next-overlay-change}と似る)。この関数はカレントバッファーだけを処理するので、@var{object}オペランドは存在しない。これは、いずれかの種類のプロパティが変化した、次のアドレスをリターンする。
@end defun

@defun previous-char-property-change pos &optional limit
これは@code{next-char-property-change}と似ているが、@var{pos}から前方ではなく後方へスキャンすること、および変化が見つからなければバッファー位置の最小をリターンする点が異なる。
@end defun

@defun next-single-char-property-change pos prop &optional object limit
@code{next-single-property-change}と似ているが、これはテキストプロパティと同様オーバーレイも考慮し、@var{object}終端より前に変化が見つからなければ、@code{nil}ではなく@var{object}内の有効な位置の最大をリターンする点が異なる。@code{next-char-property-change}と異なり、、この関数は@var{object}オペランドを@emph{もつ}。@var{object}が非バッファーなら、テキストプロパティだけが考慮される。
@end defun

@defun previous-single-char-property-change pos prop &optional object limit
これは@code{next-single-char-property-change}と似ているが、@var{pos}から前方ではなく後方へスキャンすること、および変化が見つからなければ@var{object}内の有効な位置の最小をリターンする点が異なる。
@end defun

@defun text-property-any start end prop value &optional object
この関数は、@var{start}と@var{end}の間に少なくともプロパティ@var{prop}に値@var{value}をもつ文字が1つあれば、非@code{nil}をリターンする。より正確には、これはそのような最初の文字の位置をリターンし、それ以外は@code{nil}をリターンする。

5つ目のオプション引数@var{object}は、スキャンする文字列またはバッファーを指定する。位置は@var{object}にたいして相対的である。@var{object}のデフォルトは、カレントバッファー。
@end defun

@defun text-property-not-all start end prop value &optional object
この関数は、@var{start}と@var{end}の間に少なくともプロパティ@var{prop}に値@var{value}をもたない文字が1つあれば、非@code{nil}をリターンする。より正確には、これはそのような最初の文字の位置をリターンし、それ以外は@code{nil}をリターンする。

5つ目のオプション引数@var{object}は、スキャンする文字列またはバッファーを指定する。位置は@var{object}にたいして相対的である。@var{object}のデフォルトは、カレントバッファー。
@end defun

@node Special Properties
@subsection Properties with Special Meanings

  以下は、ビルトインで特別な意味をもつテキストプロパティ名のテーブルです。以降のセクションでは、フィルとプロパティ継承を制御する特別なプロパティ名をいくつか追加でリストしています。これ以外のすべての名前は特別な意味をもたず、自由に使用できます。

  注意:
プロパティ@code{composition}、@code{display}、@code{invisible}、@code{intangible}はすべてのEmacsコマンドの後に、好ましい箇所にポイントを移動させることもできます。@ref{Adjusting
Point}を参照してください。

@table @code
@cindex property category of text character
@c FIXME: Isn't @kindex for keyboard commands?
@kindex category @r{(text property)}
@item category
ある文字が@code{category}プロパティをもつ場合は、それをその文字の@dfn{プロパティカテゴリー(property
category)}と呼びます。これはシンボルであること。このシンボルのプロパティは、その文字のプロパティのデフォルトとしての役割をもつ。

@item face
@cindex face codes of text
@kindex face @r{(text property)}
@code{face}プロパティはその文字の外観を制御する(@ref{Faces}を参照)。このプロパティの値は、以下をとることができる:

@itemize @bullet
@item
フェイス名(シンボルか文字列)。

@item
anonymousフェイス: @code{(@var{keyword} @var{value}
@dots{})}形式のプロパティリスト。@var{keyword}はそれぞれフェイス属性名で、@var{value}はその属性の値。

@item
フェイスのリスト。各リスト要素はフェイス名かanonymousフェイスであること。これはリストされた各フェイス属性を集計したフェイスを指定する。このリスト内で最初にあるフェイスが、より高い優先度をもつ。

@item
@code{(foreground-color . @var{color-name})}または@code{(background-color
. @var{color-name})}形式のコンスセル。これは@code{(:foreground
@var{color-name})}や@code{(:background
@var{color-name})}と同じようにフォアグラウンドまたはバックグラウンドを指定する。この形式は後方互換のためだけにサポートされており、無視するべきである。
@end itemize

Font Lockモード(@ref{Font Lock
Mode}を参照)はほとんどのバッファーにおいて、コンテキストにもとづき文字の@code{face}プロパティを動的に更新することにより機能する。

@code{add-face-text-property}関数は、このプロパティをセットする便利な手段を提供する。@ref{Changing
Properties}を参照のこと。

@item font-lock-face
@kindex font-lock-face @r{(text property)}
このプロパティは、Font Lockモードが配下にあるテキストに適用すべき@code{face}プロパティにたいして値を指定する。これはFont
Lockモードに使用されるフォント表示手法の1つであり、独自のハイライトを実装する特別なモードにたいして有用である。@ref{Precalculated
Fontification}を参照のこと。Font Lockモードが無効なら、@code{font-lock-face}に効果はない。

@item mouse-face
@kindex mouse-face @r{(text property)}
このプロパティは、文字上または近傍にマウスがあるとき、@code{face}のかわりに使用される。この目的にたいして``近傍''とは、文字間のすべてのテキスト、およびマウスが同じ@code{mouse-face}プロパティの値をもつことを意味する。

Emacsはテキストサイズ(@code{:height}、@code{:weight}、@code{:slant})を変更する@code{mouse-face}プロパティ由来の属性すべてを無視する。これらの属性は、ハイライトされていないテキストと常に等しい。

@item fontified
@kindex fontified @r{(text property)}
このプロパティはそのテキストの表示準備が整っているかどうかを告げる。@code{nil}ならEmacsの再表示ルーチンは、バッファーの該当部分を表示する前に、準備のために@code{fontification-functions}(@ref{Auto
Faces}を参照)の中の関数を呼び出す。これはフォントロックのコードの``just in time''により、内部的に使用される。

@item display
このプロパティは、テキストが表示される方法を変更する、さまざまな機能をアクティブ化する。たとえばこれによりテキスト外観を縦長(taller)または縦短(short)したり、高く(higher)または低く(lower)、太く(wider)または細く(narrower)したり、あるいはイメージに置き換えることができる。@ref{Display
Property}を参照のこと。

@item help-echo
@kindex help-echo @r{(text property)}
@cindex tooltip
@anchor{Text help-echo}
テキストが@code{help-echo}プロパティに文字列をもつ場合、そのテキスト上にマウスを移動した際に、Emacsはエコーエリアかツールチップウィンドウ(@ref{Tooltips,,,
emacs, The GNU Emacs Manual}を参照)にその文字列を表示する。

@code{help-echo}プロパティの値が関数なら、その関数は@var{window}、@var{object}、@var{pos}の3つの引数で呼び出され、ヘルプ文字列、または存在しない場合は@code{nil}をリターンすること。1つ目の引数@var{window}は、そのヘルプが見つかったウィンドウである。2つ目の引数@var{object}は、@code{help-echo}プロパティをもつバッファー、オーバーレイ、または文字列である。@var{pos}引数は以下のとおり:

@itemize @bullet{}
@item
@var{object}がバッファーなら、@var{pos}はそのバッファー内の位置。
@item
@var{object}がオーバーレイなら、そのオーバーレイは@code{help-echo}プロパティをもち、@var{pos}はそのオーバーレイのバッファー内の位置である。
@item
@var{object}が文字列(オーバーレイ文字列、または@code{display}プロパティにより表示された文字列)なら、@var{pos}はその文字列内の位置。
@end itemize

@code{help-echo}プロパティの値が関数と文字列のいずれでもない場合、それはヘルプ文字列を得るために評価される。

変数@code{show-help-function}をセットすることにより、ヘルプテキストが表示される方法を変更できる(@ref{Help
display}を参照)。

この機能はモードライン内、およびその他のアクティブテキストにたいして使用される。

@item keymap
@cindex keymap of character
@kindex keymap @r{(text property)}
@code{keymap}プロパティは、コマンドにたいして追加のキーマップを指定する。このキーマップを適用する際は、マイナーモードキーマップおよびバッファーのローカルマップの前に、キー照合にこのマップが使用される。@ref{Active
Keymaps}を参照のこと。プロパティ値がシンボルなら、そのシンボルの関数定義がキーマップとして使用される。

ポイントの前の文字のプロパティの値は、それが非@code{nil}でrear-stickyであり、かつポイントの後の文字のプロパティ値が非@code{nil}でfront-stickyなら適用される(マウスクリックではポイント位置のかわりにクリック位置が使用される)。

@item local-map
@kindex local-map @r{(text property)}
このプロパティは@code{keymap}と同じように機能するが、これはそのバッファーのローカルマップの@emph{かわりに}使用するキーマップを指定する点が異なる。ほとんど(もしかするとすべて)の目的にたいしては、@code{keymap}を使用するほうが良いだろう。

@item syntax-table
@code{syntax-table}プロパティは、特定の文字にたいして、どのシンタックステーブルがオーバーライドするかを告げる。@ref{Syntax
Properties}を参照のこと。

@item read-only
@cindex read-only character
@kindex read-only @r{(text property)}
ある文字がプロパティ@code{read-only}をもつなら、その文字の変更は許可されない。これを行おうとするすべてのコマンドは、@code{text-read-only}エラーを受け取る。プロパティの値が文字列なら、その文字列がエラーメッセージとして使用される。

read-only文字に隣接する箇所への挿入は、そこに通常のテキストの行うことがstickinessによる@code{read-only}プロパティを継承するなら、エラーとなる。つまりstickinessを制御することにより、read-onlyテキストに隣接する挿入の権限を制御することができる。@ref{Sticky
Properties}を参照のこと。

プロパティ変更はバッファー変更とみなされるので、特別なトリック(@code{inhibit-read-only}を非@code{nil}にバインドしてからプロパティを削除する)を知らないかぎり、@code{read-only}プロパティを取り除くことは不可能である。@ref{Read
Only Buffers}を参照のこと。

@item invisible
@kindex invisible @r{(text property)}
非@code{nil}の@code{invisible}プロパティにより、スクリーン上で文字を不可視にできる。詳細は@ref{Invisible
Text}を参照されたい。

@item intangible
@kindex intangible @r{(text property)}
連続する文字のグループが非@code{nil}の等しい@code{intangible}プロパティをもつなら、それらの文字の間にポイントを置くことは不可能である。そのグループ内に前方へポイントの移動を試みると、ポイントは実際にはそのグループの終端に移動する。そのグループ内に後方へポイントの移動を試みると、ポイントは実際にはそのグループの先頭に移動する。

連続する文字のグループが非@code{nil}の等しくない@code{intangible}プロパティをもつなら、それらの文字は個別のグループに属し、各グループは上述のように別のグループとして扱われる。

変数@code{inhibit-point-motion-hooks}が非@code{nil}なら、@code{intangible}プロパティは無視される。

注意せよ:
このプロパティは非常に低レベルで処理され、予想害の方法により多くのコードに影響する。そのため使用に際しては特別な注意を要する。誤った使用方法としては、不可視のテキストにintangibleプロパティwpeをputするのが一般的であり、コマンドループは各コマンドの終わりに不可視テキストの外部へポイントを移動するだろうから、これは実際には必要ない。@ref{Adjusting
Point}を参照されたい。

@item field
@kindex field @r{(text property)}
同じ@code{field}プロパティをもつ連続する文字は、@dfn{フィールド}を構成する。@code{forward-word}や@code{beginning-of-line}を含むいくつかの移動関数は、フィールド境界で移動を停止する。@ref{Fields}を参照のこと。

@item cursor
@kindex cursor @r{(text property)}
カーソルは通常、カレントバッファー位置にあるオーバーレイ、およびテキストプロパティ文字列の先頭か終端に表示される。文字に非@code{nil}の@code{cursor}テキストプロパティを与えることにより、それら文字列内の、任意の望む文字にカーソルを置くことができる。加えて@code{cursor}プロパティの値が整数なら、それはカーソルがその文字上に表示されるように、オーバーレイまたは@code{display}プロパティが始まる位置から数えたバッファーの文字位置の数字を指定する。特に、ある文字の@code{cursor}プロパティの値が数字@var{n}なら、カーソルは範囲@code{[@var{ovpos}..@var{ovpos}+@var{n})}内の任意のバッファー位置にあるその文字上に表示されるだろう。ここで@var{ovpos}は@code{overlay-start}(@ref{Managing
Overlays}を参照)により与えられるオーバーレイ開始位置、またはそのバッファー内で@code{display}プロパティが始まる位置である。

他の言い方をすると、文字列の非@code{nil}値の@code{cursor}プロパティをもつ文字は、カーソルが表示される文字である。このプロパティの値は、カーソルを表示するバッファーの位置を告げる。値が整数なら、オーバーレイまたは@code{display}プロパティの始まりから@var{n}後ろの位置までの間にポイントがあるとき、カーソルはそこに表示される。値がそれ以外の非@code{nil}なら、ポイントが@code{display}プロパティの先頭、または@code{overlay-start}の位置だけに表示される。

@cindex cursor position for @code{display} properties and overlays
バッファーに多くのオーバーレイ文字列(@ref{Overlay Properties,
before-string}を参照)や文字列であるような@code{display}プロパティがある場合、それらの文字列を走査する間にカーソルを置く箇所をEmacsに合図するために、@code{cursor}プロパティを使用するのは、よいアイデアである。これはLispプログラムやユーザーがカーソルを配したい箇所で、ディスプレイエンジンと直接通信する。

@item pointer
@kindex pointer @r{(text property)}
これはそのテキストやイメージ上にマウスポインターがあるときの、特定のマウスシェイプを指定する。利用できるポインターシェイプについては、@ref{Pointer
Shape}を参照されたい。

@item line-spacing
@kindex line-spacing @r{(text property)}
改行は、改行で終わるディスプレイ行の高さを制御するテキストプロパティまたはオーバーレイプロパティ@code{line-spacing}をもつことができる。このプロパティ値は、デフォルトのフレーム行スペーシングと、バッファーローカル変数@code{line-spacing}をオーバーライドする。@ref{Line
Height}を参照のこと。

@item line-height
@kindex line-height @r{(text property)}
改行は、改行で終わるディスプレイ行のトータル高さを制御するテキストプロパティ、またはオーバーレイプロパティ@code{line-height}をもつことができる。@ref{Line
Height}を参照のこと。

@item wrap-prefix
テキストが@code{wrap-prefix}プロパティをもつなら、それが定義するプレフィクスは、テキストラッピング(text wrapping:
テキスト折り返し)に由来するすべての継続行の先頭に、表示時に追加されるだろう(行が切り詰められた場合、wrap-prefixが使用されることはない)。これは文字列、イメージ(@ref{Other
Display
Specs}を参照)、あるいはディスプレイプロパティ@code{:width}または@code{:align-to}(@ref{Specified
Space}を参照)により指定されて伸縮された空白文字かもしれない。

wrap-prefixはバッファーローカル変数@code{wrap-prefix}を使用して、バッファー全体にも指定され得る(が、@code{wrap-prefix}テキストプロパティは@code{wrap-prefix}変数の値より優先される)。@ref{Truncation}を参照のこと。

@item line-prefix
テキストが@code{line-prefix}プロパティをもつなら、それが定義するプレフィクスは表示時に、すべての非継続行の先頭に追加されるだろう。これは文字列、イメージ(@ref{Other
Display
Specs}を参照)、あるいはディスプレイプロパティ@code{:width}または@code{:align-to}(@ref{Specified
Space}を参照)により指定されて伸縮された空白文字かもしれない。

line-prefixはバッファーローカル変数@code{line-prefix}を使用して、バッファー全体にも指定され得る(が、@code{line-prefix}テキストプロパティは@code{line-prefix}変数の値より優先される)。@ref{Truncation}を参照のこと。

@item modification-hooks
@cindex change hooks for a character
@cindex hooks for changing a character
@kindex modification-hooks @r{(text property)}
ある文字がプロパティ@code{modification-hooks}をもつなら、その値は関数のリストであること。その文字の変更により、実際の変更前にそれらの関数すべてが呼び出される。それぞれの関数は、変更されようとするバッファー部分の先頭と終端という、2つの引数を受け取る。特定のmodificationフック関数が、単一のプリミティブにより変更されつつある複数の文字に出現する場合は、その関数が呼び出される回数を予測することはできない。さらに挿入は既存の文字を変更しないので、このフックは文字の削除、他の文字への置換、またはそれらのテキストプロパティ変更時のみ実行されるだろう。

これらの関数がバッファーを変更する場合には、これらのフックを呼び出す内部的メカニズムの混乱を避けるために、それらの関数はそれを行う前後に@code{inhibit-modification-hooks}を@code{t}にバインドするべきである。

オーバーレイも@code{modification-hooks}プロパティをサポートするが、詳細は若干異なる(@ref{Overlay
Properties}を参照)。

@item insert-in-front-hooks
@itemx insert-behind-hooks
@kindex insert-in-front-hooks @r{(text property)}
@kindex insert-behind-hooks @r{(text property)}
あるバッファーへの挿入操作は、後続文字の@code{insert-in-front-hooks}プロパティ、および先行文字の@code{insert-behind-hooks}プロパティにリストされる関数も呼び出す。これらの関数は、挿入されるテキストの先頭と終端という、2つの引数を受け取る。関数は、優先される実際の挿入が行われた@emph{後に}呼び出される。

バッファー内のテキスト変更。に呼び出される他のフックについては、@ref{Change Hooks}も参照されたい。

@item point-entered
@itemx point-left
@cindex hooks for motion of point
@kindex point-entered @r{(text property)}
@kindex point-left @r{(text property)}
スペシャルプロパティ@code{point-entered}および@code{point-left}は、ポイント移動をリポートするフック関数を記録する。ポイントを移動するたびに、Emacsは以下の2つのプロパティ値を比較する:

@itemize @bullet
@item
古い位置の後の文字の@code{point-left}プロパティ。
@item
新しい位置の後の文字の@code{point-entered}プロパティ。
@end itemize

@noindent
これらの2つの値が異なる場合、(@code{nil}でなければ)古いポイント値と新しいポイント値という2つの引数とともにそれらそれぞれ呼び出される。

同じ比較は古い位置と新しい位置の前の文字にたいしても行われる。この結果、2つの@code{point-left}関数(同じ関数かもしれない)、および/または2つの@code{point-entered}関数(同じ関数かもしれない)が実行される可能性がある。ある場合においては、まずすべての@code{point-left}関数が呼び出されて、その後にすべての@code{point-entered}関数が呼び出される。

さまざまなバッファー位置にたいして、そこにポイントを移動することなく文字を調べるために、@code{char-after}を使用することができる。実際のポイント値変更だけが、これらのフック関数を呼び出す。

変数@code{inhibit-point-motion-hooks}は@code{point-left}および@code{point-entered}のフック実行を抑制できる。@ref{Inhibit
point motion hooks}を参照のこと。

@item composition
@kindex composition @r{(text property)}
このテキストプロパティは、文字シーケンスをコンポーネントから構成される単一グリフ(single
glyph)として表示するために使用される。しかしこのプロパティの値自身は完全にEmacsの内部的なものであり、たとえば@code{put-text-property}などにより直接操作するべくではない。

@end table

@defvar inhibit-point-motion-hooks
@anchor{Inhibit point motion hooks} この変数が非@code{nil}のときは、@code{point-left}と@code{point-entered}のフックは実行されず、@code{intangible}プロパティは効果をもたない。この変数はグローバルにセットせず@code{let}でバインドすること。
@end defvar

@defvar show-help-function
@anchor{Help display} この変数が非@code{nil}なら、それはヘルプ文字列を表示するために呼び出される関数を指定する。これらは@code{help-echo}プロパティ、メニューヘルプ文字列(@ref{Simple
Menu Items}と@ref{Extended Menu Items}を参照)、ツールバーヘルプ文字列(@ref{Tool
Bar}を参照)かもしれない。指定された関数は、表示するためのヘルプ文字列という、単一の引数とともに呼び出される。Tooltipモード(@ref{Tooltips,,,
emacs, The GNU Emacs Manual}を参照)が、例を提供している。
@end defvar

@node Format Properties
@subsection Formatted Text Properties

  以下のテキストプロパティは、フィルコマンドの挙動に影響を与えます。これらはフォーマットされたテキストを表すために使用されます。@ref{Filling}および@ref{Margins}を参照してください。

@table @code
@item hard
改行文字がこのプロパティをもつなら、それは``hard''改行である。フィルコマンドはhard改行を変更せず、それらを横断して単語を移動しない。しかしこのプロパティは、マイナーモード@code{use-hard-newlines}が有効な場合のみ影響を与える。@ref{Hard
and Soft Newlines,, Hard and Soft Newlines, emacs, The GNU Emacs
Manual}を参照のこと。

@item right-margin
このプロパティは、その部分のテキストのフィルにたいして、余分な右マージンを指定する。

@item left-margin
このプロパティは、その部分のテキストのフィルにたいして、余分な左マージンを指定する。

@item justification
このプロパティは、その部分のテキストのフィルにたいして、位置揃え(justification)のスタイルを指定する。
@end table

@node Sticky Properties
@subsection Stickiness of Text Properties
@cindex sticky text properties
@cindex inheritance, text property

  自己挿入文字は通常、先行する文字と同じプロパティをもちます。これはプロパティの@dfn{継承(inheritance)}と呼ばれます。

  Lispプログラムは継承の有無に関わらず挿入を行うことができ、それは挿入プリミティブの選択に依存します。@code{insert}のような通常のテキスト挿入関数は、何もプロパティを継承しません。これらは挿入される文字列と正確に同じプロパティをもち、それ以外のプロパティはもちません。これはたとえばkillリング外部にたいしてのように、あるコンテキストから他のコンテキストにテキストをコピーするプログラムにたいして適正です。継承つきで挿入を行うためには、このセクションで説明するスペシャルプリミティブを使用します。自己挿入文字は、これらのプリミティブを使用するので、プロパティを継承するのです。

  継承つきで挿入を行う際に、@emph{どの}プロパティがどこから継承されるかは、@dfn{sticky(スティッキー、粘着する)}に依存します。ある文字の後への挿入における、それらのモジノプロパティ継承は@dfn{rear-sticky(後方スティッキー)}です。ある文字の前への挿入における、それらのモジノプロパティ継承は@dfn{front-sticky(前方スティッキー)}です。これら両側のstickyが、同じプロパティにたいして異なるsticky値をもつ場合は、前の文字の値が優先します。

  デフォルトでは、テキストプロパティはfront-stickyではなく、rear-stickyです。したがってデフォルトでは、すべてのプロパティは前の文字から継承し、後の文字からは何も継承しません。

  さまざまなテキストプロパティのstickiness(スティッキネス、スティッキー性、粘着性、粘着度)はは、2つのテキストプロパティ@code{front-sticky}および@code{rear-nonsticky}と、変数@code{text-property-default-nonsticky}で制御できます。与えられたプロパティにたいして異なるデフォルトを指定するために、この変数を使用できます。テキストの任意の特定部分に特定のプロパティsticky、または非stickyを指定するために、これら2つのテキストプロパティを使用できます。

  ある文字の@code{front-sticky}プロパティが@code{t}なら、その文字のすべてのプロパティはfront-stickyです。@code{front-sticky}プロパティがリストなら、その文字のstickyなプロパティは、名前がそのリスト内にあるプロパティです。たとえばある文字が値が@code{(face
read-only)}であるような@code{front-sticky}プロパティをもつなら、その文字の前への挿入ではその文字の@code{face}プロパティと@code{read-only}プロパティは継承できますが、他のプロパティはｐ継承できません。

  @code{rear-nonsticky}は逆の方法で機能します。ほとんどのプロパティはデフォルトでrear-stickyであり、@code{rear-nonsticky}プロパティはどのプロパティがrear-sticky@emph{ではない}かを告げますある文字の@code{rear-nosticky}プロパティが@code{t}なら、その文字のすべてのプロパティはrear-stickyではありません。@code{rear-nosticky}プロパティがリストなら、その文字のstickyなプロパティは、名前がそのリスト内に@emph{ない}プロパティです。

@defvar text-property-default-nonsticky
この変数は、さまざまなテキストプロパティのデフォルトのrear-stickinessを定義するalistである。各要素は@code{(@var{property}
.
@var{nonstickiness})}という形式をもち、これは特定のテキストプロパティ@var{property}のstickinessを定義する。

@var{nonstickiness}が非@code{nil}なら、それはプロパティ@var{property}がデフォルトでrear-nonstickyであることを意味する。すべてのプロパティはデフォルトでfront-nonstickyなので、これにより@var{property}は両方向にたいしてデフォルトでnonstickyになる。

テキストプロパティ@code{front-sticky}および@code{rear-nonsticky}が使用された際には、@code{text-property-default-nonsticky}内で指定されたデフォルトの@var{nonstickiness}より優先される。
@end defvar

  以下はプロパティ継承つきでテキストを挿入する関数です:

@defun insert-and-inherit &rest strings
関数@code{insert}と同じように文字列@var{strings}を挿入するが、隣接するテキストからすべてのstickyなプロパティを継承する。
@end defun

@defun insert-before-markers-and-inherit &rest strings
関数@code{insert-before-markers}と同じように文字列@var{strings}を挿入するが、隣接するテキストからすべてのstickyなプロパティを継承する。
@end defun

  継承を行わない通常の挿入関数については、@ref{Insertion}を参照してください。

@node Lazy Properties
@subsection Lazy Computation of Text Properties

  バッファー内のすべてのテキストにたいしてテキストプロパティを計算するかわりに、何かがテキスト範囲に依存している場合、その際はテキストプロパティを計算するようにアレンジできます。

  プロパティとともにバッファーからテキストを抽出するプリミティブは、@code{buffer-substring}です。プロパティを調べる前に、この関数はアブノーマルフック@code{buffer-access-fontify-functions}を実行します。

@defvar buffer-access-fontify-functions
この変数は、テキストプロパティ計算用の関数のリストを保持する。@code{buffer-substring}がバッファーの一部のテキストとテキストプロパティをコピーする前に、このリスト内の関数すべてを呼び出す。各関数はアクセスされるバッファー範囲を指定する、2つの引数を受け取る(バッファーは常にカレントバッファーとなる)。
@end defvar

  関数@code{buffer-substring-no-properties}はいずれにせよテキストプロパティを無視するので、これらの関数を呼び出さない。

  同じバッファー部分にたいして複数回フック関数が呼び出されるのを防ぐには、変数@code{buffer-access-fontified-property}を使用できる。

@defvar buffer-access-fontified-property
この変数の値が非@code{nil}なら、それはテキストプロパティ名として使用されるシンボルである。そのテキストプロパティにたいする非@code{nil}値は、``その文字にたいする他のテキストプロパティはすでに計算済み''であることを意味する。

@code{buffer-substring}にたいして指定された範囲内のすべての文字が、このプロパティにたいする値として非@code{nil}をもつなら、@code{buffer-substring}は@code{buffer-access-fontify-functions}の関数を呼び出さない。それらの文字がすでに正しいテキストプロパティをもつとみなし、それらがすでに所有するプロパティを単にコピーする。

@code{buffer-access-fontify-functions}の関数にこのプロパティ、同様に他のプロパティを処理対象の文字に追加させるのが、この機能の通常の用途である。この方法では、同じテキストにたいして、それらの関数が何度も呼び出されるのを防ぐことができる。
@end defvar

@node Clickable Text
@subsection Defining Clickable Text
@cindex clickable text
@cindex follow links
@cindex mouse-1

  @dfn{クリック可能テキスト(clickable
text)}とは何らかの結果を生成するために、マウス、またはキーボードコマンドを通じてクリックできるテキストです。多くのメジャーモードがテキスト的なハイパーリンク、略して@dfn{リンク(link)}を実装するために、クリック可能テキストを使用しています。

  リンクを挿入および操作するもっとも簡単な方法は、@code{button}パッケージの使用です。@ref{Buttons}を参照してください。このセクションではテキストプロパティを使用して、バッファー内に手作業でクリック可能テキストをセットアップする方法を説明します。簡略にするために、クリック可能テキストを@dfn{リンク}と呼ぶことにします。

  リンクの実装には、(1)リンク上にマウスが移動した際にクリック可能であることを示し、(2)そのリンク上の@key{RET}か@kbd{Mouse-2}で何かを行うようにして、(3)そのリンクが@code{mouse-1-click-follows-link}にしたがうよう@code{follow-link}をセットアップする、という3つのステップが含まれます。

  クリック可能を示すためには、そのリンクのテキストに@code{mouse-face}プロパティを追加します。すると、以降Emacsはマウスがその上に移動した際にリンクをハイライトするでしょう。加えて@code{help-echo}テキストプロパティを使用して、ツールチップかエコーエリアメッセージを定義するべきです。@ref{Special
Properties}を参照してください。たとえば以下は、Diredがファイル名がクリック可能なことを示す方法です:

@smallexample
 (if (dired-move-to-filename)
     (add-text-properties
       (point)
       (save-excursion
         (dired-move-to-end-of-filename)
         (point))
       '(mouse-face highlight
         help-echo "mouse-2: visit this file in other window")))
@end smallexample

  リンクをクリック可能にするためには、
@key{RET}と@kbd{Mouse-2}を望むアクションを行うコマンドにバインドします。各コマンドは、リンク上から呼び出されたかチェックして、それに応じて動作するべきです。たとえばDiredメジャーモードのキーマップは、@kbd{Mouse-2}を以下のコマンドにバインドします:

@smallexample
(defun dired-mouse-find-file-other-window (event)
  "In Dired, visit the file or directory name you click on."
  (interactive "e")
  (let ((window (posn-window (event-end event)))
        (pos (posn-point (event-end event)))
        file)
    (if (not (windowp window))
        (error "No file chosen"))
    (with-current-buffer (window-buffer window)
      (goto-char pos)
      (setq file (dired-get-file-for-visit)))
    (if (file-directory-p file)
        (or (and (cdr dired-subdir-alist)
                 (dired-goto-subdir file))
            (progn
              (select-window window)
              (dired-other-window file)))
      (select-window window)
      (find-file-other-window (file-name-sans-versions file t)))))
@end smallexample

@noindent
このコマンドはクリックがどこで発生したかを判断するために、関数@code{posn-window}と@code{posn-point}、visitするファイルの判断に関数@code{dired-get-file-for-visit}を使用します。

  マウスコマンドをメジャーモードキーマップ内でバインドするかわりに、@code{keymap}プロパティ(@ref{Special
Properties}を参照)を使用して、リンクテキスト内でバインドできます。たとえば:

@example
(let ((map (make-sparse-keymap)))
  (define-key map [mouse-2] 'operate-this-button)
  (put-text-property link-start link-end 'keymap map))
@end example

@noindent
この手法では、異なるリンクに異なるコマンドを簡単に定義できます。さらに、そのバッファー内の残りのテキストにたいしては、@key{RET}と@kbd{Mouse-2}のグローバル定義を利用可能なまま残すことができます。

@vindex mouse-1-click-follows-link
  リンク上でのクリックにたいするEmacsの基本コマンドは、@kbd{Mouse-2}です。しかし他のグラフィカルなアプリケーションとの互換性のために、ユーザーがマウスを動かさずに素早くリンクをクリックするという条件の下、Emacsはリンク上での@kbd{Mouse-1}クリックも認識します。おこ振る舞いは、ユーザーオプション@code{mouse-1-click-follows-link}により制御されます。@ref{Mouse
References,,, emacs, The GNU Emacs Manual}を参照してください。

@cindex follow-link (text or overlay property)
  @code{mouse-1-click-follows-link}にしたがうようにリンクをセットアップするには、(1)そのテキストに@code{follow-link}テキストプロパティまたはオーバーレイプロパティを適用する、または(2)@code{follow-link}イベントをキーマップ(@code{keymap}テキストプロパティを通じたメジャーモードキーマップまたはローカルキーマップ)にバインドするかの、いずれかを行わなければなりません。@code{follow-link}プロパティの値、または@code{follow-link}イベントにたいするバインディングはリンクアクションにたいする``コンディション(condition)''として機能します。この条件は、Emacsにたいして2つのことを告げます。それは@kbd{Mouse-1}のクリックがそのリンクの``内側''で発生したとみなすべき状況、そして@kbd{Mouse-1}のクリックを何に変換するかを告げる``アクションコード(action
code)''を計算する方法です。そのリンクのアクション条件は、以下のうちの1つです:

@table @asis
@item @code{mouse-face}
コンディションがシンボル@code{mouse-face}の場合、その位置に非@code{nil}の@code{mouse-face}プロパティがあれば、それはリンク内側の位置である。アクションコードは常に@code{t}。

以下はInfoモードが@key{Mouse-1}を処理する例である:

@smallexample
(define-key Info-mode-map [follow-link] 'mouse-face)
@end smallexample

@item 関数
コンディションが関数@var{func}の場合、@code{(@var{func}
@var{pos})}が非@code{nil}に評価されれば、位置@var{pos}はリンクの内側である。@var{func}がリターンする値は、アクションコードとして機能する。

以下はpcvsがファイル名の上でのみ@kbd{Mouse-1}によるリンクのフォローを有効にする方法の例である:

@smallexample
(define-key map [follow-link]
  (lambda (pos)
    (eq (get-char-property pos 'face) 'cvs-filename-face)))
@end smallexample

@item その他
コンディション値がそれ以外の場合、その位置はリンク内側であり、そのコンディション自体がアクションコードである。(バッファー全体に適用されないように)リンクテキストのテキストプロパティまたはオーバーレイプロパティを通じてコンディションを適用するときのみ、この類のコンディションを指定すべきなのは明確である。
@end table

@noindent
アクションコードは、@kbd{Mouse-1}がリンクをフォローする方法を告げます:

@table @asis
@item 文字列またはベクター
アクションコードが文字列かベクターなら、@kbd{Mouse-1}イベントは文字列またはベクターの最初の要素に変換される。つまり@kbd{Mouse-1}クリックのアクションは、その文字またはシンボルのローカルまたはグローバルバインディングである。したがってアクションコードが@code{"foo"}なら、@kbd{Mouse-1}は@kbd{f}に変換され、@code{[foo]}なら@kbd{Mouse-1}は@key{foo}に変換される。

@item その他
その他非@code{nil}のアクションコードでは、@kbd{Mouse-1}イベントは同じ位置の@kbd{Mouse-2}イベントに変換される。
@end table

  @code{define-button-type}で定義されるボタンをアクティブにするように@kbd{Mouse-1}を定義するには、そのボタンに@code{follow-link}プロパティを与えます。このプロパティの値は、上述したリンクのアクションコンディションであること。@ref{Buttons}を参照のこと。たとえば以下はHelpモードが@kbd{Mouse-1}を処理する例である。

@smallexample
(define-button-type 'help-xref
  'follow-link t
  'action #'help-button-action)
@end smallexample

  @code{define-widget}で定義されたウィジェットに@kbd{Mouse-1}を定義するには、そのウィジェットに@code{:follow-link}プロパティを与えます。このプロパティの値は、上述したようなリンクのアクションコンディションであるべきです。たとえば、以下は@key{Mouse-1}クリックが@key{RET}に変換されるように、@code{link}ウィジェットを指定する方法の例をです:

@smallexample
(define-widget 'link 'item
  "An embedded link."
  :button-prefix 'widget-link-prefix
  :button-suffix 'widget-link-suffix
  :follow-link "\C-m"
  :help-echo "Follow the link."
  :format "%[%t%]")
@end smallexample

@defun mouse-on-link-p pos
この関数は、カレントバッファー内の位置@var{pos}がリンク上なら、非@code{nil}をリターンする。@var{pos}は@code{event-start}がリターンするようなマウスイベント位置でもよい(@ref{Accessing
Mouse}を参照)。
@end defun

@node Fields
@subsection Defining and Using Fields
@cindex fields

  フィールドとはバッファー内にある連続する文字範囲であり、@code{field}プロパティ(テキストプロパティかオーバーレイプロパティ)に同じ値(@code{eq}で比較)をもつことにより識別されます。このセクションでは、フィールドの操作に利用できるスペシャル関数を説明します。

  フィールドは、バッファー位置@var{pos}で指定します。各フィールドはバッファー位置の範囲を含むと考えて、指定した位置はその位置を含むフィールドを表します。

  @var{pos}の前または後の文字は同じフィールドに属し、どのフィールドが@var{pos}を含むかという疑問はありません。それらの文字が属するフィールドが、そのフィールドです。@var{pos}がフィールド境界のときは、それがどのフィールドに属すかは、取り囲む2つの文字の@code{field}プロパティのstickinessに依存します(@ref{Sticky
Properties}を参照)。@var{pos}に挿入されたテキストからプロパティが継承されたフィールドが、@var{pos}を含むフィールドです。

  @var{pos}に新たに挿入されたテキストが、いずれの側からも@code{field}プロパティを継承しない、異常なケースがあります。これは前の文字の@code{field}プロパティがrear-stickyでなく、後の文字の@code{field}プロパティがfront-stickyでもない場合に発生します。このケースでは、@var{pos}は前のフィールドと後のフィールドいずれにも属しません。フィールド関数はそれを、開始と終了が@var{pos}の空フィールドに属するものとして扱います。

  これらすべての関数では、@var{pos}が省略または@code{nil}の場合は、ポイントの値がデフォルトとして使用されます。ナローイング(narrowing)が効力をもつ場合、@var{pos}はアクセス可能部分にあるはずです。@ref{Narrowing}を参照してください。

@defun field-beginning &optional pos escape-from-edge limit
この関数は、@var{pos}で指定されたフィールドの先頭をリターンする。

@var{pos}が自身のフィールド先頭にあり、かつ@var{escape-from-edge}が非@code{nil}なら、@var{pos}周辺の@code{field}プロパティのstickinessに関わらず、リターン値は常に@var{pos}が終端であるような前のフィールドの先頭になる。

@var{limit}が非@code{nil}なら、それはバッファーの位置である。そのフィールドの先頭が@var{limit}より前なら、かわりに@var{limit}がリターンされるだろう。
@end defun

@defun field-end &optional pos escape-from-edge limit
この関数は、@var{pos}で指定されるフィールドの終端をリターンする。

@var{pos}が自身のフィールド終端にあり、かつ@var{escape-from-edge}が非@code{nil}なら、@var{pos}周辺の@code{field}プロパティのstickinessに関わらず、リターン値は常に@var{pos}が@emph{先頭}であるような後のフィールドの終端になる。

@var{limit}が非@code{nil}なら、それはバッファーの位置である。そのフィールドの終端が@var{limit}より後なら、かわりに@var{limit}がリターンされるだろう。
@end defun

@defun field-string &optional pos
この関数は@var{pos}で指定されるフィールドのコンテンツを、文字列としてリターンする。
@end defun

@defun field-string-no-properties &optional pos
この関数は、@var{pos}で指定されるフィールドのコンテンツを、テキストプロパティを無視して、文字列としてリターンする。
@end defun

@defun delete-field &optional pos
この関数は、@var{pos}で指定されるフィールドのテキストを削除する。
@end defun

@defun constrain-to-field new-pos old-pos &optional escape-from-edge only-in-line inhibit-capture-property
この関数は@var{new-pos}を@var{old-pos}が属するフィールドに``拘束(constrain)''する。別の言い方をすると、これは
@var{old-pos}と同じフィールド内で@var{new-pos}にもっとも近い位置をリターンする。

@var{new-pos}が@code{nil}なら、@code{constrain-to-field}はかわりにポイントの値を使用して、ポイントをリターンすることに加えて、その位置にポイントを移動する。

@var{old-pos}が2つのフィールドの境界なら、許容できる最後の位置は引数@var{escape-from-edge}に依存する。@var{escape-from-edge}が@code{nil}なら、@var{new-pos}は新たに文字が@var{old-pos}が挿入されたときに、継承するであろう値と@code{field}プロパティが等しいフィールドでなければならない@var{escape-from-edge}がｐ非@code{nil}なら、@var{new-pos}は隣接する2つのフィールド内のどこでも構わない。さらに、2つのフィールドが特別な値@code{boundary}により、他のフィールドで分割されている場合、このスペシャルフィールド内のすべてのポイントも、``境界上''とみなされる。

引数なしの@kbd{C-a}コマンドのように、特別な類の位置に後方へ移動して一度そこに留まるには、おそらく@var{escape-from-edge}にたいして@code{nil}を指定するべきであろう。フィールドをチェックする他の移動コマンドにたいしては、おそらく@code{t}を渡すべきである。

オプション引数@var{only-in-line}が非@code{nil}、かつ@var{new-pos}を通常の方法により拘束することにより異なる行へ移動するような場合、@var{new-pos}は非拘束でリターンされる。これは@code{next-line}や@code{beginning-of-line}のような行単位の移動コマンドで、それらのコマンドが正しい行へ移動できる場合だけフィールド境界を尊重するようにするために用いられる。

オプション引数@var{inhibit-capture-property}が非@code{nil}、かつ@var{old-pos}がその名前の非@code{nil}なプロパティをもつなら、すべてのフィールド境界は無視される。

変数@code{inhibit-field-text-motion}を非@code{nil}値にバインドすることにより、@code{constrain-to-field}にすべてのフィールド境界を無視(何者にも拘束されることがない)させることができる。
@end defun

@node Not Intervals
@subsection Why Text Properties are not Intervals
@cindex intervals

  ユーザーにテキスト内の``インターバル(訳注:
原文のインターバルはIT用語としては時間や距離などの間隔を示す用語として用いれることが多いと思いますが、ここでは『範囲』を示す言葉として用いられているようです。他の箇所で『範囲』と訳したrange等と異なる機能なので、ここではそのまま『インターバル』としました)''を指定させて、そのインターバルにプロパティを追加するために、バッファー内のテキストへの属性の追加をサポートするエディターがいくつかあります。それらのエディターは、ユーザーやプログラマーが個別にインターバルの開始と終了を決定することを許可します。わたしたちは、テキスト変更に関連する特定の逆説的振る舞いを避けるために、Emacs
Lisp内に、故意に異なる種類のインターフェイスを提供しました。

  複数のインターバルに細分化することが実際に意味をもつなら、それは特定のプロパティをもつ単一のインターバルのバッファーと、同じテキストをもち、両方が同じプロパティをもつ2つのインターバルに分割されたバッファーを区別できることを意味します。

  インターバルを1つだけもつバッファーがあり、その一部をkillすることを考えてみてください。そのそのバッファーに残されるのは1つのインターバルであり、killリング(とundoリスト)内のコピーは別個のインターバルになります。そのkillされたテキストをyankで戻すと、同じプロパティをもつ2つのインターバルを得ることになります。したがって、編集では1つのインターバルと2つのインターバルの違いは保たれません。

  テキスト挿入時に2つのインターバルを結合することにより、この問題に``対応''したとします。これは、そのバッファーが元々単一のインターバルだったなら、上手く機能します。
しかし、かわりに同じプロパティをもつ隣接する2つのインターバルがあり、そのうちの1つのインターバルからテキストをkillして、それをyankで戻すことを考えてみてください。あるケースを解決する同じインターバル結合機能が、他のケースにおいては問題を引き起こすのです。このyank後、インターバルはただ1つとなります。繰り返します、編集では1つのインターバルと2つのインターバルの違いは保たれないのです。

  インターバルの間の境界上へのテキスト挿入でも、満足できる回答かない問題が発生します。

  しかし、``バッファーにあるテキスト位置または文字列位置のプロパティは何?''という形式の問にたいして、編集が一貫した振る舞いをするようアレンジするのは簡単です。そこで、わたしたちはこれらが合理的な唯一の問いであると判断したのです。わたしたちはインターバルの開始と終了の場所を問うような実装をしませんでした。

  実際には、明白にインターバル境界であるような箇所では、通常はテキストプロパティ検索関数を使用できます。可能であるならインターバルは常に結合されるとみなすことにより、それらがインターバル境界を探すと考えることができます。@ref{Property
Search}を参照してください。

  Emacsはプレゼンテーション機能として、明示的なインターバルも提供します。@ref{Overlays}を参照してください。

@node Substitution
@section Substituting for a Character Code
@cindex replace characters in region
@cindex substitute characters

  以下の関数は、文字コードにもとづいて、指定されたリージョン内の文字を置き換えます。

@defun subst-char-in-region start end old-char new-char &optional noundo
@cindex replace characters
この関数は、@var{start}と@var{end}で定義されるカレントバッファーのリージョン内に出現する文字@var{old-char}を@var{new-char}に置き換える。

@cindex undo avoidance
@var{noundo}が非@code{nil}なら、@code{subst-char-in-region}はundo用に変更を記録せず、バッファーを変更済みとマークしない。これは、古い機能である選択的ディスプレイ(@ref{Selective
Display}を参照)にとって有用だった。

@code{subst-char-in-region}はポイントを移動せず、@code{nil}をリターンする。

@example
@group
---------- Buffer: foo ----------
This is the contents of the buffer before.
---------- Buffer: foo ----------
@end group

@group
(subst-char-in-region 1 20 ?i ?X)
     @result{} nil

---------- Buffer: foo ----------
ThXs Xs the contents of the buffer before.
---------- Buffer: foo ----------
@end group
@end example
@end defun

@deffn Command translate-region start end table
この関数は、バッファー内の位置@var{start}と@var{end}の間の文字にたいして、変換テーブル(translation
table)を適用する。

変換テーブル@var{table}は、文字列、または文字テーブルである。@code{(aref @var{table}
@var{ochar})}は、@var{ochar}に対応した変換後の文字を与える。@var{table}が文字列なら、@var{table}の長さより大きいコードの文字は、この変更により変更されない。

@code{translate-region}のリターン値は、その変換により実際に変更された文字数である。変換テーブル内でその文字自身にマップされる文字は勘定に入らない。
@end deffn

@node Registers
@section Registers
@cindex registers

  レジスター(register)とは、Emacs内の編集においてさまざまな異なる種類の値を保持できる、一種の変数のことです。レジスターはそれぞれ、1文字で命名されます。すべての@acronym{ASCII}文字、およびそれらのメタ修飾された変種(ただし@kbd{C-g}は例外)を、レジスターの命名に使用できます。したがって、利用可能なレジスター数は255になります。Emacs
Lispでは、レジスターは自身の名前である、その文字により指定されます。

@defvar register-alist
この変数は、要素が@code{(@var{name}
.@var{contents})}という形式のalistである。使用中のEmacsレジスターごとに、通常は1つの要素が存在する。

オブジェクト@var{name}は、レジスターを識別する文字(整数)である。
@end defvar

  レジスターの@var{contents}には、いくつかのタイプがある:

@table @asis
@item 数字
数字はそれ自身を意味する。@code{insert-register}はレジスター内の数字を探して、その数字を10進数に変換する。

@item マーカー
マーカーは、ジャンプ先のバッファー位置を表す。

@item 文字列
文字列の場合は、レジスター内に保存されたテキスト。

@item 矩形(rectangle)
矩形は、文字列のリストを表す。

@item @code{(@var{window-configuration} @var{position})}
これは1つのフレームにリストアされるウィンドウ構成、およびカレントバッファー内のジャンプ先の位置を表す。

@c FIXME: Mention frameset here.
@item @code{(@var{frame-configuration} @var{position})}
これは、リストア用のフレーム構成、およびカレントバッファー内のジャンプ先の位置である。

@item (file @var{filename})
これはvisitするファイルを表し、この値にジャンプすることによりファイル@var{filename}をvisitする。

@item (file-query @var{filename} @var{position})
これはvisitするファイル、およびそのファイル内の位置を表す。この値にジャンプすることによりファイル@var{filename}をvisitして、バッファー位置@var{position}に移動する。このタイプの位置をリストアすると、まずユーザーにたいして確認を求める。
@end table

  このセクションの関数は、特に記さない限り予期せぬ値をリターンします。

@defun get-register reg
この関数はレジスター@var{reg}のコンテンツ、コンテンツがなければ@code{nil}をリターンする。
@end defun

@defun set-register reg value
この関数は、レジスター@var{reg}のコンテンツに@var{value}をセットする。レジスターには任意の値をセットできるが、その他のレジスター関数は特定のデータ型を期待する。リターン値は@var{value}。
@end defun

@deffn Command view-register reg
このコマンドは、レジスター @var{reg}に何が含まれているかを表示する。
@end deffn

@deffn Command insert-register reg &optional beforep
このコマンドは、カレントバッファーにレジスター@var{reg}のコンテンツを挿入する。

このコマンドは通常、ポイントを挿入したテキストの前、後にマークを置く。しかしオプションの第2引き@var{beforep}が非@code{nil}なら、マークを前、ポイントを後に置くインタラクティブな呼び出しでは、プレフィクス引数を与えることにより、2つ目の引数@var{beforep}に@code{nil}を渡すことができる。

レジスターに矩形が含まれる場合、その矩形はポイントの左上隅に挿入される。これはそのテキストがカレント行と、その下に続く行に挿入されることを意味する。

レジスターが保存されたテキスト(文字列)または矩形(リスク)以外の何かを含む場合、現在のところは役に立つようなことは起きない。これは将来変更されるかもしれない。
@end deffn

@defun register-read-with-preview prompt
@cindex register preview
この関数は、@var{prompt}、およびもしかしたら既存レジスターとそのコンテンツをプレビューしてレジスターの名前を読み取り、レジスター名をリターンする。このプレビューは、ユーザーオプション@code{register-preview-delay}と@code{register-alist}がいずれも非@code{nil}なら、@code{register-preview-delay}で指定された遅延の後に、一時ウィンドウ内に表示される。このプレビューは、ユーザーが(たとえばヘルプ文字のタイプにより)ヘルプを要求した場合も表示される。レジスター名を読み取るスベインタラクティブな関数は、この関数を使用することを推奨する。
@end defun

@node Transposition
@section Transposition of Text

  This function can be used to transpose stretches of text:

@defun transpose-regions start1 end1 start2 end2 &optional leave-markers
This function exchanges two nonoverlapping portions of the buffer.
Arguments @var{start1} and @var{end1} specify the bounds of one portion and
arguments @var{start2} and @var{end2} specify the bounds of the other
portion.

Normally, @code{transpose-regions} relocates markers with the transposed
text; a marker previously positioned within one of the two transposed
portions moves along with that portion, thus remaining between the same two
characters in their new position.  However, if @var{leave-markers} is
non-@code{nil}, @code{transpose-regions} does not do this---it leaves all
markers unrelocated.
@end defun

@node Decompression
@section Dealing With Compressed Data

When @code{auto-compression-mode} is enabled, Emacs automatically
uncompresses compressed files when you visit them, and automatically
recompresses them if you alter and save them.  @xref{Compressed Files,,,
emacs, The GNU Emacs Manual}.

The above feature works by calling an external executable (e.g.,
@command{gzip}).  Emacs can also be compiled with support for built-in
decompression using the zlib library, which is faster than calling an
external program.

@defun zlib-available-p
This function returns non-@code{nil} if built-in zlib decompression is
available.
@end defun

@defun zlib-decompress-region start end
This function decompresses the region between @var{start} and @var{end},
using built-in zlib decompression.  The region should contain data that were
compressed with gzip or zlib.  On success, the function replaces the
contents of the region with the decompressed data.  On failure, the function
leaves the region unchanged and returns @code{nil}.  This function can be
called only in unibyte buffers.
@end defun


@node Base 64
@section Base 64 Encoding
@cindex base 64 encoding

  Base 64 code is used in email to encode a sequence of 8-bit bytes as a
longer sequence of @acronym{ASCII} graphic characters.  It is defined in
Internet RFC@footnote{ An RFC, an acronym for @dfn{Request for Comments}, is
a numbered Internet informational document describing a standard.  RFCs are
usually written by technical experts acting on their own initiative, and are
traditionally written in a pragmatic, experience-driven manner.  }2045.
This section describes the functions for converting to and from this code.

@deffn Command base64-encode-region beg end &optional no-line-break
This function converts the region from @var{beg} to @var{end} into base 64
code.  It returns the length of the encoded text.  An error is signaled if a
character in the region is multibyte, i.e., in a multibyte buffer the region
must contain only characters from the charsets @code{ascii},
@code{eight-bit-control} and @code{eight-bit-graphic}.

Normally, this function inserts newline characters into the encoded text, to
avoid overlong lines.  However, if the optional argument @var{no-line-break}
is non-@code{nil}, these newlines are not added, so the output is just one
long line.
@end deffn

@defun base64-encode-string string &optional no-line-break
This function converts the string @var{string} into base 64 code.  It
returns a string containing the encoded text.  As for
@code{base64-encode-region}, an error is signaled if a character in the
string is multibyte.

Normally, this function inserts newline characters into the encoded text, to
avoid overlong lines.  However, if the optional argument @var{no-line-break}
is non-@code{nil}, these newlines are not added, so the result string is
just one long line.
@end defun

@deffn Command base64-decode-region beg end
This function converts the region from @var{beg} to @var{end} from base 64
code into the corresponding decoded text.  It returns the length of the
decoded text.

The decoding functions ignore newline characters in the encoded text.
@end deffn

@defun base64-decode-string string
This function converts the string @var{string} from base 64 code into the
corresponding decoded text.  It returns a unibyte string containing the
decoded text.

The decoding functions ignore newline characters in the encoded text.
@end defun

@node Checksum/Hash
@section Checksum/Hash
@cindex MD5 checksum
@cindex SHA hash
@cindex hash, cryptographic
@cindex cryptographic hash

  Emacs has built-in support for computing @dfn{cryptographic hashes}.  A
cryptographic hash, or @dfn{checksum}, is a digital ``fingerprint'' of a
piece of data (e.g., a block of text) which can be used to check that you
have an unaltered copy of that data.

@cindex message digest
  Emacs supports several common cryptographic hash algorithms: MD5, SHA-1,
SHA-2, SHA-224, SHA-256, SHA-384 and SHA-512.  MD5 is the oldest of these
algorithms, and is commonly used in @dfn{message digests} to check the
integrity of messages transmitted over a network.  MD5 is not ``collision
resistant'' (i.e., it is possible to deliberately design different pieces of
data which have the same MD5 hash), so you should not used it for anything
security-related.  A similar theoretical weakness also exists in SHA-1.
Therefore, for security-related applications you should use the other hash
types, such as SHA-2.

@defun secure-hash algorithm object &optional start end binary
This function returns a hash for @var{object}.  The argument @var{algorithm}
is a symbol stating which hash to compute: one of @code{md5}, @code{sha1},
@code{sha224}, @code{sha256}, @code{sha384} or @code{sha512}.  The argument
@var{object} should be a buffer or a string.

The optional arguments @var{start} and @var{end} are character positions
specifying the portion of @var{object} to compute the message digest for.
If they are @code{nil} or omitted, the hash is computed for the whole of
@var{object}.

If the argument @var{binary} is omitted or @code{nil}, the function returns
the @dfn{text form} of the hash, as an ordinary Lisp string.  If
@var{binary} is non-@code{nil}, it returns the hash in @dfn{binary form}, as
a sequence of bytes stored in a unibyte string.

This function does not compute the hash directly from the internal
representation of @var{object}'s text (@pxref{Text Representations}).
Instead, it encodes the text using a coding system (@pxref{Coding Systems}),
and computes the hash from that encoded text.  If @var{object} is a buffer,
the coding system used is the one which would be chosen by default for
writing the text into a file.  If @var{object} is a string, the user's
preferred coding system is used (@pxref{Recognize Coding,,, emacs, GNU Emacs
Manual}).
@end defun

@defun md5 object &optional start end coding-system noerror
This function returns an MD5 hash.  It is semi-obsolete, since for most
purposes it is equivalent to calling @code{secure-hash} with @code{md5} as
the @var{algorithm} argument.  The @var{object}, @var{start} and @var{end}
arguments have the same meanings as in @code{secure-hash}.

If @var{coding-system} is non-@code{nil}, it specifies a coding system to
use to encode the text; if omitted or @code{nil}, the default coding system
is used, like in @code{secure-hash}.

Normally, @code{md5} signals an error if the text can't be encoded using the
specified or chosen coding system.  However, if @var{noerror} is
non-@code{nil}, it silently uses @code{raw-text} coding instead.
@end defun

@node Parsing HTML/XML
@section Parsing HTML and XML
@cindex parsing html

When Emacs is compiled with libxml2 support, the following functions are
available to parse HTML or XML text into Lisp object trees.

@defun libxml-parse-html-region start end &optional base-url
This function parses the text between @var{start} and @var{end} as HTML, and
returns a list representing the HTML @dfn{parse tree}.  It attempts to
handle ``real world'' HTML by robustly coping with syntax mistakes.

The optional argument @var{base-url}, if non-@code{nil}, should be a string
specifying the base URL for relative URLs occurring in links.

In the parse tree, each HTML node is represented by a list in which the
first element is a symbol representing the node name, the second element is
an alist of node attributes, and the remaining elements are the subnodes.

The following example demonstrates this.  Given this (malformed) HTML
document:

@example
<html><head></head><body width=101><div class=thing>Foo<div>Yes
@end example

@noindent
A call to @code{libxml-parse-html-region} returns this:

@example
(html ()
  (head ())
  (body ((width . "101"))
   (div ((class . "thing"))
    "Foo"
    (div ()
      "Yes"))))
@end example
@end defun

@cindex rendering html
@defun shr-insert-document dom
This function renders the parsed HTML in @var{dom} into the current buffer.
The argument @var{dom} should be a list as generated by
@code{libxml-parse-html-region}.  This function is, e.g., used by @ref{Top,
EWW,, eww, The Emacs Web Wowser Manual}.
@end defun

@cindex parsing xml
@defun libxml-parse-xml-region start end &optional base-url
This function is the same as @code{libxml-parse-html-region}, except that it
parses the text as XML rather than HTML (so it is stricter about syntax).
@end defun

@node Atomic Changes
@section Atomic Change Groups
@cindex atomic changes

  In database terminology, an @dfn{atomic} change is an indivisible
change---it can succeed entirely or it can fail entirely, but it cannot
partly succeed.  A Lisp program can make a series of changes to one or
several buffers as an @dfn{atomic change group}, meaning that either the
entire series of changes will be installed in their buffers or, in case of
an error, none of them will be.

  To do this for one buffer, the one already current, simply write a call to
@code{atomic-change-group} around the code that makes the changes, like
this:

@example
(atomic-change-group
  (insert foo)
  (delete-region x y))
@end example

@noindent
If an error (or other nonlocal exit) occurs inside the body of
@code{atomic-change-group}, it unmakes all the changes in that buffer that
were during the execution of the body.  This kind of change group has no
effect on any other buffers---any such changes remain.

  If you need something more sophisticated, such as to make changes in various
buffers constitute one atomic group, you must directly call lower-level
functions that @code{atomic-change-group} uses.

@defun prepare-change-group &optional buffer
This function sets up a change group for buffer @var{buffer}, which defaults
to the current buffer.  It returns a ``handle'' that represents the change
group.  You must use this handle to activate the change group and
subsequently to finish it.
@end defun

  To use the change group, you must @dfn{activate} it.  You must do this
before making any changes in the text of @var{buffer}.

@defun activate-change-group handle
This function activates the change group that @var{handle} designates.
@end defun

  After you activate the change group, any changes you make in that buffer
become part of it.  Once you have made all the desired changes in the
buffer, you must @dfn{finish} the change group.  There are two ways to do
this: you can either accept (and finalize) all the changes, or cancel them
all.

@defun accept-change-group handle
This function accepts all the changes in the change group specified by
@var{handle}, making them final.
@end defun

@defun cancel-change-group handle
This function cancels and undoes all the changes in the change group
specified by @var{handle}.
@end defun

  Your code should use @code{unwind-protect} to make sure the group is always
finished.  The call to @code{activate-change-group} should be inside the
@code{unwind-protect}, in case the user types @kbd{C-g} just after it runs.
(This is one reason why @code{prepare-change-group} and
@code{activate-change-group} are separate functions, because normally you
would call @code{prepare-change-group} before the start of that
@code{unwind-protect}.)  Once you finish the group, don't use the handle
again---in particular, don't try to finish the same group twice.

  To make a multibuffer change group, call @code{prepare-change-group} once
for each buffer you want to cover, then use @code{nconc} to combine the
returned values, like this:

@example
(nconc (prepare-change-group buffer-1)
       (prepare-change-group buffer-2))
@end example

You can then activate the multibuffer change group with a single call to
@code{activate-change-group}, and finish it with a single call to
@code{accept-change-group} or @code{cancel-change-group}.

  Nested use of several change groups for the same buffer works as you would
expect.  Non-nested use of change groups for the same buffer will get Emacs
confused, so don't let it happen; the first change group you start for any
given buffer should be the last one finished.

@node Change Hooks
@section Change Hooks
@cindex change hooks
@cindex hooks for text changes

  These hook variables let you arrange to take notice of all changes in all
buffers (or in a particular buffer, if you make them buffer-local).  See
also @ref{Special Properties}, for how to detect changes to specific parts
of the text.

  The functions you use in these hooks should save and restore the match data
if they do anything that uses regular expressions; otherwise, they will
interfere in bizarre ways with the editing operations that call them.

@defvar before-change-functions
This variable holds a list of functions to call before any buffer
modification.  Each function gets two arguments, the beginning and end of
the region that is about to change, represented as integers.  The buffer
that is about to change is always the current buffer.
@end defvar

@defvar after-change-functions
This variable holds a list of functions to call after any buffer
modification.  Each function receives three arguments: the beginning and end
of the region just changed, and the length of the text that existed before
the change.  All three arguments are integers.  The buffer that has been
changed is always the current buffer.

The length of the old text is the difference between the buffer positions
before and after that text as it was before the change.  As for the changed
text, its length is simply the difference between the first two arguments.
@end defvar

  Output of messages into the @file{*Messages*} buffer does not call these
functions.

@defmac combine-after-change-calls body@dots{}
The macro executes @var{body} normally, but arranges to call the
after-change functions just once for a series of several changes---if that
seems safe.

If a program makes several text changes in the same area of the buffer,
using the macro @code{combine-after-change-calls} around that part of the
program can make it run considerably faster when after-change hooks are in
use.  When the after-change hooks are ultimately called, the arguments
specify a portion of the buffer including all of the changes made within the
@code{combine-after-change-calls} body.

@strong{Warning:} You must not alter the values of
@code{after-change-functions} within the body of a
@code{combine-after-change-calls} form.

@strong{Warning:} if the changes you combine occur in widely scattered parts
of the buffer, this will still work, but it is not advisable, because it may
lead to inefficient behavior for some change hook functions.
@end defmac

@defvar first-change-hook
This variable is a normal hook that is run whenever a buffer is changed that
was previously in the unmodified state.
@end defvar

@defvar inhibit-modification-hooks
If this variable is non-@code{nil}, all of the change hooks are disabled;
none of them run.  This affects all the hook variables described above in
this section, as well as the hooks attached to certain special text
properties (@pxref{Special Properties}) and overlay properties
(@pxref{Overlay Properties}).

Also, this variable is bound to non-@code{nil} while running those same hook
variables, so that by default modifying the buffer from a modification hook
does not cause other modification hooks to be run.  If you do want
modification hooks to be run in a particular piece of code that is itself
run from a modification hook, then rebind locally
@code{inhibit-modification-hooks} to @code{nil}.
@end defvar
