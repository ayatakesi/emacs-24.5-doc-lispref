# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2018-11-02 17:06+0900\n"
"PO-Revision-Date: 2018-12-11 16:58+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: chapter
#: text.texi.orig:5 text.texi.orig:6
#, no-wrap
msgid "Text"
msgstr "Text"

#. type: cindex
#: text.texi.orig:7
#, no-wrap
msgid "text"
msgstr "text"

#. type: Plain text
#: text.texi.orig:14
msgid "This chapter describes the functions that deal with the text in a buffer.  Most examine, insert, or delete text in the current buffer, often operating at point or on text adjacent to point.  Many are interactive.  All the functions that change the text provide for undoing the changes (@pxref{Undo})."
msgstr "このチャプターでは、バッファー内のテキストを扱う関数を説明します。ほとんどはカレントバッファー内のテキストにたいして検査、挿入、削除を行い、ポイント位置やポイントに隣接するテキストを操作することが多々あります。その多くはインタラクティブ(interactive: 対話的)です。テキストを変更するすべての関数は、その変更にたいするアンドゥ(undo)を提供します(@ref{Undo}を参照)。"

#. type: Plain text
#: text.texi.orig:25
msgid "Many text-related functions operate on a region of text defined by two buffer positions passed in arguments named @var{start} and @var{end}.  These arguments should be either markers (@pxref{Markers}) or numeric character positions (@pxref{Positions}).  The order of these arguments does not matter; it is all right for @var{start} to be the end of the region and @var{end} the beginning.  For example, @code{(delete-region 1 10)} and @code{(delete-region 10 1)} are equivalent.  An @code{args-out-of-range} error is signaled if either @var{start} or @var{end} is outside the accessible portion of the buffer.  In an interactive call, point and the mark are used for these arguments."
msgstr "テキストに関連する関数の多くが、@var{start}および@var{end}という名前の引数として渡された、2つのバッファー位置により定義された、テキストのリージョンを操作します。これらの引数は、マーカー(@ref{Markers}を参照)か、数値的な文字位置(@ref{Positions}を参照)のいずれかであるべきです。これらの引数の順序は関係ありません。@var{start}がリージョンの終端で、@var{end}がリージョンの先頭であっても、何も問題はないのです。たとえば、@code{(delete-region 1 10)}と@code{(delete-region 10 1)}は等価です。@var{start}と@var{end}のいずれかが、バッファーのアクセス可能範囲の外部なら、@code{args-out-of-range}エラーがシグナルされます。インタラクティブな呼び出しでは、これらの引数にポイントとマークが使用されます。"

#. type: cindex
#: text.texi.orig:26
#, no-wrap
msgid "buffer contents"
msgstr "buffer contents"

#. type: Plain text
#: text.texi.orig:31
msgid "Throughout this chapter, ``text'' refers to the characters in the buffer, together with their properties (when relevant).  Keep in mind that point is always between two characters, and the cursor appears on the character after point."
msgstr "このチャプターを通じて、``テキスト(text)''とは(関係あるときは)そのプロパティも含めた、バッファー内の文字を意味します。ポイントは常に2つの文字の間にあり、カーソルはポイントの後の文字上に表示されることを覚えておいてください。"

#. type: node
#: text.texi.orig:63 text.texi.orig:65
#, no-wrap
msgid "Near Point"
msgstr "Near Point"

#. type: menuentry
#: text.texi.orig:63
msgid "Examining text in the vicinity of point."
msgstr "ポイント付近のテキストを調べる。"

#. type: node
#: text.texi.orig:63 text.texi.orig:163
#, no-wrap
msgid "Buffer Contents"
msgstr "Buffer Contents"

#. type: menuentry
#: text.texi.orig:63
msgid "Examining text in a general fashion."
msgstr "一般的な方法によってテキストを調べる。"

#. type: section
#: text.texi.orig:63 text.texi.orig:323 text.texi.orig:324
#, no-wrap
msgid "Comparing Text"
msgstr "Comparing Text"

#. type: menuentry
#: text.texi.orig:63
msgid "Comparing substrings of buffers."
msgstr "バッファーの部分文字列を比較する。"

#. type: node
#: text.texi.orig:63 text.texi.orig:358
#, no-wrap
msgid "Insertion"
msgstr "Insertion"

#. type: menuentry
#: text.texi.orig:63
msgid "Adding new text to a buffer."
msgstr "バッファーへの新たなテキストの追加。"

#. type: node
#: text.texi.orig:63 text.texi.orig:473
#, no-wrap
msgid "Commands for Insertion"
msgstr "Commands for Insertion"

#. type: menuentry
#: text.texi.orig:63
msgid "User-level commands to insert text."
msgstr "テキスト挿入のためのユーザーレベルコマンド。"

#. type: node
#: text.texi.orig:63 text.texi.orig:553
#, no-wrap
msgid "Deletion"
msgstr "Deletion"

#. type: menuentry
#: text.texi.orig:63
msgid "Removing text from a buffer."
msgstr "バッファーからテキストを削除する。"

#. type: node
#: text.texi.orig:63 text.texi.orig:659
#, no-wrap
msgid "User-Level Deletion"
msgstr "User-Level Deletion"

#. type: menuentry
#: text.texi.orig:63
msgid "User-level commands to delete text."
msgstr "テキスト削除のためのユーザーレベルコマンド。"

#. type: section
#: text.texi.orig:63 text.texi.orig:814 text.texi.orig:815
#, no-wrap
msgid "The Kill Ring"
msgstr "The Kill Ring"

#. type: menuentry
#: text.texi.orig:63
msgid "Where removed text sometimes is saved for later use."
msgstr "テキスト削除時にユーザーのためにそれを保存する場所。"

#. type: section
#: text.texi.orig:63 text.texi.orig:1246 text.texi.orig:1247
#, no-wrap
msgid "Undo"
msgstr "Undo"

#. type: menuentry
#: text.texi.orig:63
msgid "Undoing changes to the text of a buffer."
msgstr "バッファーのテキストにたいする変更の取り消し。"

#. type: node
#: text.texi.orig:63 text.texi.orig:1382
#, no-wrap
msgid "Maintaining Undo"
msgstr "Maintaining Undo"

#. type: menuentry
#: text.texi.orig:63
msgid "How to enable and disable undo information.  How to control how much information is kept."
msgstr "アンドゥ情報の有効と無効。情報をどれだけ保持するか制御する方法。"

#. type: section
#: text.texi.orig:63 text.texi.orig:1457 text.texi.orig:1458
#, no-wrap
msgid "Filling"
msgstr "Filling"

#. type: menuentry
#: text.texi.orig:63
msgid "Functions for explicit filling."
msgstr "明示的にフィルを行う関数。"

#. type: node
#: text.texi.orig:63 text.texi.orig:1650
#, no-wrap
msgid "Margins"
msgstr "Margins"

#. type: menuentry
#: text.texi.orig:63
msgid "How to specify margins for filling commands."
msgstr "フィルコマンドにたいしてマージンを指定する方法。"

#. type: node
#: text.texi.orig:63 text.texi.orig:1747
#, no-wrap
msgid "Adaptive Fill"
msgstr "Adaptive Fill"

#. type: menuentry
#: text.texi.orig:63
msgid "Adaptive Fill mode chooses a fill prefix from context."
msgstr "コンテキストからフィルプレフィクスを選択するAdaptive Fillモード。"

#. type: section
#: text.texi.orig:63 text.texi.orig:1837 text.texi.orig:1838
#, no-wrap
msgid "Auto Filling"
msgstr "Auto Filling"

#. type: menuentry
#: text.texi.orig:63
msgid "How auto-fill mode is implemented to break lines."
msgstr "行ブレークにたいするauto-fillの実装方法。"

#. type: node
#: text.texi.orig:63 text.texi.orig:1875
#, no-wrap
msgid "Sorting"
msgstr "Sorting"

#. type: menuentry
#: text.texi.orig:63
msgid "Functions for sorting parts of the buffer."
msgstr "バッファーの一部をソートする関数。"

#. type: node
#: text.texi.orig:63 text.texi.orig:2132
#, no-wrap
msgid "Columns"
msgstr "Columns"

#. type: menuentry
#: text.texi.orig:63
msgid "Computing horizontal positions, and using them."
msgstr "水平位置の計算とその使用方法。"

#. type: section
#: text.texi.orig:63 text.texi.orig:2195 text.texi.orig:2196
#, no-wrap
msgid "Indentation"
msgstr "Indentation"

#. type: menuentry
#: text.texi.orig:63
msgid "Functions to insert or adjust indentation."
msgstr "インデントの挿入や調整のための関数。"

#. type: section
#: text.texi.orig:63 text.texi.orig:2535 text.texi.orig:2536
#, no-wrap
msgid "Case Changes"
msgstr "Case Changes"

#. type: menuentry
#: text.texi.orig:63
msgid "Case conversion of parts of the buffer."
msgstr "バッファーの一部にたいする大文字小文字変換。"

#. type: section
#: text.texi.orig:63 text.texi.orig:2627 text.texi.orig:2628
#, no-wrap
msgid "Text Properties"
msgstr "Text Properties"

#. type: menuentry
#: text.texi.orig:63
msgid "Assigning Lisp property lists to text characters."
msgstr "テキスト文字にたいするLispプロパティリストの追加。"

#. type: node
#: text.texi.orig:63 text.texi.orig:3989
#, no-wrap
msgid "Substitution"
msgstr "Substitution"

#. type: menuentry
#: text.texi.orig:63
msgid "Replacing a given character wherever it appears."
msgstr "与ええられた文字の出現箇所を置換する。"

#. type: section
#: text.texi.orig:63 text.texi.orig:4046 text.texi.orig:4047
#, no-wrap
msgid "Registers"
msgstr "Registers"

#. type: menuentry
#: text.texi.orig:63
msgid "How registers are implemented.  Accessing the text or position stored in a register."
msgstr "レジスターの実装方法。レジスターに格納されたテキストや位置にアクセスする。"

#. type: node
#: text.texi.orig:63 text.texi.orig:4151
#, no-wrap
msgid "Transposition"
msgstr "Transposition"

#. type: menuentry
#: text.texi.orig:63
msgid "Swapping two portions of a buffer."
msgstr "バッファーの2つの部分を交換する。"

#. type: node
#: text.texi.orig:63 text.texi.orig:4170
#, no-wrap
msgid "Decompression"
msgstr "Decompression"

#. type: menuentry
#: text.texi.orig:63
msgid "Dealing with compressed data."
msgstr "圧縮データの扱い。"

#. type: node
#: text.texi.orig:63 text.texi.orig:4199
#, no-wrap
msgid "Base 64"
msgstr "Base 64"

#. type: menuentry
#: text.texi.orig:63
msgid "Conversion to or from base 64 encoding."
msgstr "Base64エンコーディングとの変換。"

#. type: section
#: text.texi.orig:63 text.texi.orig:4256 text.texi.orig:4257
#, no-wrap
msgid "Checksum/Hash"
msgstr "Checksum/Hash"

#. type: menuentry
#: text.texi.orig:63
msgid "Computing cryptographic hashes."
msgstr "暗号ハッシュの計算。"

#. type: node
#: text.texi.orig:63 text.texi.orig:4324
#, no-wrap
msgid "Parsing HTML/XML"
msgstr "Parsing HTML/XML"

#. type: menuentry
#: text.texi.orig:63
msgid "Parsing HTML and XML."
msgstr "HTMLおよびXMLの解析。"

#. type: node
#: text.texi.orig:63 text.texi.orig:4381
#, no-wrap
msgid "Atomic Changes"
msgstr "Atomic Changes"

#. type: menuentry
#: text.texi.orig:63
msgid "Installing several buffer changes \"atomically\"."
msgstr "複数バッファーへの変更を\"アトミック\"にインストールする。"

#. type: section
#: text.texi.orig:63 text.texi.orig:4471 text.texi.orig:4472
#, no-wrap
msgid "Change Hooks"
msgstr "Change Hooks"

#. type: menuentry
#: text.texi.orig:63
msgid "Supplying functions to be run when text is changed."
msgstr "テキスト変更時に実行する関数の指定。"

#. type: section
#: text.texi.orig:66
#, no-wrap
msgid "Examining Text Near Point"
msgstr "Examining Text Near Point"

#. type: cindex
#: text.texi.orig:67
#, no-wrap
msgid "text near point"
msgstr "text near point"

#. type: Plain text
#: text.texi.orig:72
msgid "Many functions are provided to look at the characters around point.  Several simple functions are described here.  See also @code{looking-at} in @ref{Regexp Search}."
msgstr "ポイント付近にある文字を調べるための関数が、数多く提供されています。簡単な関数のいくつかは、ここで説明します。@ref{Regexp Search}の@code{looking-at}も参照してください。"

#. type: Plain text
#: text.texi.orig:75
msgid "In the following four functions, ``beginning'' or ``end'' of buffer refers to the beginning or end of the accessible portion."
msgstr "以下の4つの関数においてバッファーの``先頭(beginning)''と``終端(end)''はそれぞれ、アクセス可能範囲の先頭と終端を意味します。"

#. type: defun
#: text.texi.orig:76
#, no-wrap
msgid "char-after &optional position"
msgstr "char-after &optional position"

#. type: defun
#: text.texi.orig:82
msgid "This function returns the character in the current buffer at (i.e., immediately after) position @var{position}.  If @var{position} is out of range for this purpose, either before the beginning of the buffer, or at or beyond the end, then the value is @code{nil}.  The default for @var{position} is point."
msgstr "この関数は、カレントバッファーの位置@var{position}(つまり直後)の文字をリターンする。@var{position}が、この目的にたいする範囲の外にある場合、すなわちバッファーの先頭より前、またはバッファーの終端以降にある場合、値は@code{nil}となる。@var{position}のデフォルトは、ポイントである。"

#. type: defun
#: text.texi.orig:85
msgid "In the following example, assume that the first character in the buffer is @samp{@@}:"
msgstr "以下の例では、バッファーの最初の文字が@samp{@@}であると仮定する:"

#. type: group
#: text.texi.orig:90
#, no-wrap
msgid ""
"(string (char-after 1))\n"
"     @result{} \"@@\"\n"
msgstr ""
"(string (char-after 1))\n"
"     @result{} \"@@\"\n"

#. type: defun
#: text.texi.orig:94
#, no-wrap
msgid "char-before &optional position"
msgstr "char-before &optional position"

#. type: defun
#: text.texi.orig:100
msgid "This function returns the character in the current buffer immediately before position @var{position}.  If @var{position} is out of range for this purpose, either at or before the beginning of the buffer, or beyond the end, then the value is @code{nil}.  The default for @var{position} is point."
msgstr "この関数は、カレントバッファーの位置@var{position}の直前の文字をリターンする。@var{position}が、この目的にたいする範囲の外にある場合、すなわちバッファーの先頭より前、またはバッファーの終端より後にある場合、値は@code{nil}となる。@var{position}のデフォルトは、ポイントである。"

#. type: defun
#: text.texi.orig:102
#, no-wrap
msgid "following-char"
msgstr "following-char"

#. type: defun
#: text.texi.orig:106
msgid "This function returns the character following point in the current buffer.  This is similar to @code{(char-after (point))}.  However, if point is at the end of the buffer, then @code{following-char} returns 0."
msgstr "この関数は、カレントバッファーのポイントの後にある文字をリターンする。これは@code{(char-after (point))}と同様。ただし、ポイントがバッファー終端にある場合、@code{following-char}は0をリターンする。"

#. type: defun
#: text.texi.orig:111
msgid "Remember that point is always between characters, and the cursor normally appears over the character following point.  Therefore, the character returned by @code{following-char} is the character the cursor is over."
msgstr "ポイントが常に2文字間にあり、通常カーソルはポイント後の文字上に表示されることを思い出していただきたい。したがって、@code{following-char}がリターンする文字は、カーソル上の文字となる。"

#. type: defun
#: text.texi.orig:113
msgid "In this example, point is between the @samp{a} and the @samp{c}."
msgstr "以下の例では、@samp{a}と@samp{c}の間にポイントがある。"

#. type: group
#: text.texi.orig:120
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"

#. type: group
#: text.texi.orig:127
#, no-wrap
msgid ""
"(string (preceding-char))\n"
"     @result{} \"a\"\n"
"(string (following-char))\n"
"     @result{} \"c\"\n"
msgstr ""
"(string (preceding-char))\n"
"     @result{} \"a\"\n"
"(string (following-char))\n"
"     @result{} \"c\"\n"

#. type: defun
#: text.texi.orig:131
#, no-wrap
msgid "preceding-char"
msgstr "preceding-char"

#. type: defun
#: text.texi.orig:136
msgid "This function returns the character preceding point in the current buffer.  See above, under @code{following-char}, for an example.  If point is at the beginning of the buffer, @code{preceding-char} returns 0."
msgstr "この関数は、カレントバッファーのポイントの前の文字をリターンする。上記@code{following-char}の下の例を参照されたい。ポイントがバッファー先頭にある場合、@code{preceding-char}は0をリターンする。"

#. type: defun
#: text.texi.orig:138
#, no-wrap
msgid "bobp"
msgstr "bobp"

#. type: defun
#: text.texi.orig:143
msgid "This function returns @code{t} if point is at the beginning of the buffer.  If narrowing is in effect, this means the beginning of the accessible portion of the text.  See also @code{point-min} in @ref{Point}."
msgstr "この関数は、ポイントがバッファー先頭にあれば@code{t}をリターンする。ナローイングが効力をもつ場合、これはテキストのアクセス可能範囲の先頭を意味する。@ref{Point}の@code{point-min}も参照のこと。"

#. type: defun
#: text.texi.orig:145
#, no-wrap
msgid "eobp"
msgstr "eobp"

#. type: defun
#: text.texi.orig:149
msgid "This function returns @code{t} if point is at the end of the buffer.  If narrowing is in effect, this means the end of accessible portion of the text.  See also @code{point-max} in @xref{Point}."
msgstr "この関数は、ポイントがバッファー終端にあれば@code{t}をリターンする。ナローイングが効力をもつ場合、これはテキストのアクセス可能範囲の終端を意味する。@ref{Point}の@code{point-max}も参照のこと。"

#. type: defun
#: text.texi.orig:151
#, no-wrap
msgid "bolp"
msgstr "bolp"

#. type: defun
#: text.texi.orig:155
msgid "This function returns @code{t} if point is at the beginning of a line.  @xref{Text Lines}.  The beginning of the buffer (or of its accessible portion) always counts as the beginning of a line."
msgstr "この関数は、ポイントが行の先頭にあれば@code{t}をリターンする。@ref{Text Lines}を参照のこと。バッファー(またはアクセス可能範囲)の先頭は、常に行の先頭とみなされる。"

#. type: defun
#: text.texi.orig:157
#, no-wrap
msgid "eolp"
msgstr "eolp"

#. type: defun
#: text.texi.orig:161
msgid "This function returns @code{t} if point is at the end of a line.  The end of the buffer (or of its accessible portion) is always considered the end of a line."
msgstr "この関数は、ポイントが行の終端にあれば@code{t}をリターンする。@ref{Text Lines}を参照のこと。バッファー(またはアクセス可能範囲)の終端は、常に行の先頭とみなされる。"

#. type: section
#: text.texi.orig:164
#, no-wrap
msgid "Examining Buffer Contents"
msgstr "Examining Buffer Contents"

#. type: cindex
#: text.texi.orig:165
#, no-wrap
msgid "buffer portion as string"
msgstr "buffer portion as string"

#. type: Plain text
#: text.texi.orig:169
msgid "This section describes functions that allow a Lisp program to convert any portion of the text in the buffer into a string."
msgstr "このセクションでは、Lispプログラムがバッファー内の任意の範囲のテキストを、文字列に変換するための関数を説明します。"

#. type: defun
#: text.texi.orig:170
#, no-wrap
msgid "buffer-substring start end"
msgstr "buffer-substring start end"

#. type: defun
#: text.texi.orig:176
msgid "This function returns a string containing a copy of the text of the region defined by positions @var{start} and @var{end} in the current buffer.  If the arguments are not positions in the accessible portion of the buffer, @code{buffer-substring} signals an @code{args-out-of-range} error."
msgstr "この関数は、カレントバッファー内の位置@var{start}と@var{end}で定義されるリージョンのテキストのコピーを含む文字列をリターンする。引数がバッファーのアクセス可能範囲内の位置でない場合、@code{buffer-substring}は@code{args-out-of-range}エラーをリターンする。"

#. type: defun
#: text.texi.orig:178
msgid "Here's an example which assumes Font-Lock mode is not enabled:"
msgstr "以下の例では、Font-Lockモードが有効でないものとする:"

#. type: group
#: text.texi.orig:183
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of buffer foo\n"
"\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"This is the contents of buffer foo\n"
"\n"

#. type: group
#: text.texi.orig:185
#, no-wrap
msgid "---------- Buffer: foo ----------\n"
msgstr "---------- Buffer: foo ----------\n"

#. type: group
#: text.texi.orig:190
#, no-wrap
msgid ""
"(buffer-substring 1 10)\n"
"     @result{} \"This is t\"\n"
msgstr ""
"(buffer-substring 1 10)\n"
"     @result{} \"This is t\"\n"

#. type: group
#: text.texi.orig:194
#, no-wrap
msgid ""
"(buffer-substring (point-max) 10)\n"
"     @result{} \"he contents of buffer foo\\n\"\n"
msgstr ""
"(buffer-substring (point-max) 10)\n"
"     @result{} \"he contents of buffer foo\\n\"\n"

#. type: defun
#: text.texi.orig:201
msgid "If the text being copied has any text properties, these are copied into the string along with the characters they belong to.  @xref{Text Properties}.  However, overlays (@pxref{Overlays}) in the buffer and their properties are ignored, not copied."
msgstr "コピーされるテキストが何らかのテキストプロパティをもっていた場合、それらのプロパティが属す文字とともに文字列にコピーされる。しかし、バッファー内のオーバーレイ(@ref{Overlays}を参照)、およびそれらのプロパティは無視されるため、コピーされない。"

#. type: defun
#: text.texi.orig:204
msgid "For example, if Font-Lock mode is enabled, you might get results like these:"
msgstr "たとえば、Font-Lockモードが有効なら、以下のような結果を得るだろう:"

#. type: group
#: text.texi.orig:209
#, no-wrap
msgid ""
"(buffer-substring 1 10)\n"
"     @result{} #(\"This is t\" 0 1 (fontified t) 1 9 (fontified t))\n"
msgstr ""
"(buffer-substring 1 10)\n"
"     @result{} #(\"This is t\" 0 1 (fontified t) 1 9 (fontified t))\n"

#. type: defun
#: text.texi.orig:213
#, no-wrap
msgid "buffer-substring-no-properties start end"
msgstr "buffer-substring-no-properties start end"

#. type: defun
#: text.texi.orig:216
msgid "This is like @code{buffer-substring}, except that it does not copy text properties, just the characters themselves.  @xref{Text Properties}."
msgstr "これは@code{buffer-substring}と同様だが、テキストプロパティはコピーせず、文字自体だけをコピーする点が異なる。@ref{Text Properties}を参照のこと。"

#. type: defun
#: text.texi.orig:218
#, no-wrap
msgid "buffer-string"
msgstr "buffer-string"

#. type: defun
#: text.texi.orig:221
msgid "This function returns the contents of the entire accessible portion of the current buffer, as a string."
msgstr "この関数は、カレントバッファーのアクセス可能範囲全体のコンテンツを、文字列としてリターンする。"

#. type: defun
#: text.texi.orig:223
#, no-wrap
msgid "filter-buffer-substring start end &optional delete"
msgstr "filter-buffer-substring start end &optional delete"

#. type: defun
#: text.texi.orig:227
msgid "This function filters the buffer text between @var{start} and @var{end} using a function specified by the variable @code{filter-buffer-substring-function}, and returns the result."
msgstr "この関数は、変数@code{filter-buffer-substring-function}により指定された関数を使用して、@var{start}と@var{end}の間のバッファーテキストをフィルターし、その結果をリターンする。"

#. type: defun
#: text.texi.orig:233
msgid "The default filter function consults the obsolete wrapper hook @code{filter-buffer-substring-functions}, and the obsolete variable @code{buffer-substring-filters}.  If both of these are @code{nil}, it returns the unaltered text from the buffer, i.e., what @code{buffer-substring} would return."
msgstr "デフォルトのフィルター関数は時代遅れとなったラッパーフック@code{filter-buffer-substring-functions}、および同様に時代遅れとなった変数@code{buffer-substring-filters}を参照する。これら両者が@code{nil}なら、バッファーから未変更のテキスト、すなわち@code{buffer-substring}がリターンするであろうテキストをリターンする。"

#. type: defun
#: text.texi.orig:237
msgid "If @var{delete} is non-@code{nil}, the function deletes the text between @var{start} and @var{end} after copying it, like @code{delete-and-extract-region}."
msgstr "@var{delete}が非@code{nil}なら、この関数は@code{delete-and-extract-region}と同様、コピー後に@var{start}と@var{end}の間のテキストを削除する。"

#. type: defun
#: text.texi.orig:244
msgid "Lisp code should use this function instead of @code{buffer-substring}, @code{buffer-substring-no-properties}, or @code{delete-and-extract-region} when copying into user-accessible data structures such as the kill-ring, X clipboard, and registers.  Major and minor modes can modify @code{filter-buffer-substring-function} to alter such text as it is copied out of the buffer."
msgstr "Lispコードは、killリング、Xクリップボード、レジスターのようなユーザーがアクセス可能なデータ構造内にコピーする際は@code{buffer-substring}、@code{buffer-substring-no-properties}、@code{delete-and-extract-region}のかわりにこの関数を使用するべきである。メジャーモードおよびマイナーモードは、バッファー外部にコピーするテキストを変更するために@code{filter-buffer-substring-function}を変更することができる。"

#. type: defvar
#: text.texi.orig:246
#, no-wrap
msgid "filter-buffer-substring-function"
msgstr "filter-buffer-substring-function"

#. type: defvar
#: text.texi.orig:252
msgid "The value of this variable is a function that @code{filter-buffer-substring} will call to do the actual work.  The function receives three arguments, the same as those of @code{filter-buffer-substring}, which it should treat as per the documentation of that function.  It should return the filtered text (and optionally delete the source text)."
msgstr "この変数の値は、実際の処理を行うために@code{filter-buffer-substring}が呼び出す関数である。その関数は、@code{filter-buffer-substring}と同じように3つの引数を受けとり、それらは@code{filter-buffer-substring}にドキュメントされているように扱われるべきである。関数は、フィルターされたテキストをリターン(およびオプションでソーステキストを削除)すること。"

#. type: Plain text
#: text.texi.orig:257
msgid "@code{filter-buffer-substring-function}, but are still supported for backward compatibility."
msgstr "以下の2つの変数は、@code{filter-buffer-substring-function}により時代遅れになりましたが、後方互換のために依然サポートされます。"

#. type: defvar
#: text.texi.orig:258
#, no-wrap
msgid "filter-buffer-substring-functions"
msgstr "filter-buffer-substring-functions"

#. type: defvar
#: text.texi.orig:265
msgid "This obsolete variable is a wrapper hook, whose members should be functions that accept four arguments: @var{fun}, @var{start}, @var{end}, and @var{delete}.  @var{fun} is a function that takes three arguments (@var{start}, @var{end}, and @var{delete}), and returns a string.  In both cases, the @var{start}, @var{end}, and @var{delete} arguments are the same as those of @code{filter-buffer-substring}."
msgstr "これは時代遅れとなったラッパーフックであり、このフックのメンバーは@var{fun}、@var{start}、@var{end}、@var{delete}の4つの引数を受け取る関数であること。@var{fun}は3つの引数(@var{start}、@var{end}、@var{delete})をとり、文字列をリターンする関数である。両者とも、引数@var{start}、@var{end}、@var{delete}は@code{filter-buffer-substring}のときと同様の意味をもつ。"

#. type: defvar
#: text.texi.orig:275
msgid "The first hook function is passed a @var{fun} that is equivalent to the default operation of @code{filter-buffer-substring}, i.e., it returns the buffer-substring between @var{start} and @var{end} (processed by any @code{buffer-substring-filters}) and optionally deletes the original text from the buffer.  In most cases, the hook function will call @var{fun} once, and then do its own processing of the result.  The next hook function receives a @var{fun} equivalent to this, and so on.  The actual return value is the result of all the hook functions acting in sequence."
msgstr "1つ目のフック関数は@code{filter-buffer-substring}のデフォルトの処理と同じく@var{start}と@var{end}の間の(任意の@code{buffer-substring-filters}により処理された)バッファー部分文字列をリターンし、オプションでバッファーから元テキストを削除する関数で、それが@var{fun}に渡される。ほとんどの場合、フック関数は@var{fun}を1回だけ呼び出してから、その結果にたいして自身の処理を行う。次のフック関数はこれと等しい@var{fun}を受け取り、順次それが繰り返されていく。実際のリターン値は、すべてのフック関数が順次処理した結果である。"

#. type: defvar
#: text.texi.orig:277
#, no-wrap
msgid "buffer-substring-filters"
msgstr "buffer-substring-filters"

#. type: defvar
#: text.texi.orig:284
msgid "The value of this obsolete variable should be a list of functions that accept a single string argument and return another string.  The default @code{filter-buffer-substring} function passes the buffer substring to the first function in this list, and the return value of each function is passed to the next function.  The return value of the last function is passed to @code{filter-buffer-substring-functions}."
msgstr "時代遅れとなったこの変数の値は、文字列を唯一の引数ちして別の文字列をリターンする関数のリストであること。デフォルトの@code{filter-buffer-substring}関数は、バッファー部分文字列をこのリストの1つ目の関数に渡し、そのリターン値を次の関数に渡して、それぞれの関数にたいしてこれが順次繰り返される。最後の関数のリターン値は、@code{filter-buffer-substring-functions}に渡される。"

#. type: defun
#: text.texi.orig:286
#, no-wrap
msgid "current-word &optional strict really-word"
msgstr "current-word &optional strict really-word"

#. type: defun
#: text.texi.orig:289
msgid "This function returns the symbol (or word) at or near point, as a string.  The return value includes no text properties."
msgstr "この関数は、ポイント位置またはその付近のシンボル(または単語)を、文字列としてリターンする。リターン値にはテキストプロパティは含まれない。"

#. type: defun
#: text.texi.orig:293
msgid "If the optional argument @var{really-word} is non-@code{nil}, it finds a word; otherwise, it finds a symbol (which includes both word characters and symbol constituent characters)."
msgstr "オプション引数@var{really-word}が非@code{nil}なら単語、それ以外はシンボル(単語文字とシンボル構成文字の両方を含む)を探す。"

#. type: defun
#: text.texi.orig:298
msgid "If the optional argument @var{strict} is non-@code{nil}, then point must be in or next to the symbol or word---if no symbol or word is there, the function returns @code{nil}.  Otherwise, a nearby symbol or word on the same line is acceptable."
msgstr "オプション引数@var{strict}が非@code{nil}の場合、ポイントは単語(またはシンボル)の内部にあるか隣接しなければならない。そこに単語(またはシンボル)がなければ、この関数は@code{nil}をリターンする。@var{strict}が@code{nil}なら、ポイントと同一行にある近接する単語(またはシンボル)が許容される。"

#. type: defun
#: text.texi.orig:300
#, no-wrap
msgid "thing-at-point thing"
msgstr "thing-at-point thing"

#. type: defun
#: text.texi.orig:302
msgid "Return the @var{thing} around or next to point, as a string."
msgstr "ポイントに隣接または周辺にある@var{thing}を、文字列としてリターンする。"

#. type: defun
#: text.texi.orig:307
msgid "The argument @var{thing} is a symbol which specifies a kind of syntactic entity.  Possibilities include @code{symbol}, @code{list}, @code{sexp}, @code{defun}, @code{filename}, @code{url}, @code{word}, @code{sentence}, @code{whitespace}, @code{line}, @code{page}, and others."
msgstr "引数@var{thing}は、構文エンティティの種別を指定するシンボルである。可能なシンボルとしては@code{symbol}、@code{list}、@code{sexp}、@code{defun}、@code{filename}、@code{url}、@code{word}、@code{sentence}、@code{whitespace}、@code{line}、@code{page}、その他が含まれる。"

#. type: example
#: text.texi.orig:313
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
"\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"Gentlemen may cry ``Pea@point{}ce! Peace!,''\n"
"but there is no peace.\n"
"---------- Buffer: foo ----------\n"
"\n"

#. type: example
#: text.texi.orig:320
#, no-wrap
msgid ""
"(thing-at-point 'word)\n"
"     @result{} \"Peace\"\n"
"(thing-at-point 'line)\n"
"     @result{} \"Gentlemen may cry ``Peace! Peace!,''\\n\"\n"
"(thing-at-point 'whitespace)\n"
"     @result{} nil\n"
msgstr ""
"(thing-at-point 'word)\n"
"     @result{} \"Peace\"\n"
"(thing-at-point 'line)\n"
"     @result{} \"Gentlemen may cry ``Peace! Peace!,''\\n\"\n"
"(thing-at-point 'whitespace)\n"
"     @result{} nil\n"

#. type: cindex
#: text.texi.orig:325
#, no-wrap
msgid "comparing buffer text"
msgstr "comparing buffer text"

#. type: Plain text
#: text.texi.orig:329
msgid "This function lets you compare portions of the text in a buffer, without copying them into strings first."
msgstr "この関数により、最初にバッファー内のテキストを文字列内にコピーすることなく、バッファー内のテキスト断片を比較することが可能になります。"

#. type: defun
#: text.texi.orig:330
#, no-wrap
msgid "compare-buffer-substrings buffer1 start1 end1 buffer2 start2 end2"
msgstr "compare-buffer-substrings buffer1 start1 end1 buffer2 start2 end2"

#. type: defun
#: text.texi.orig:337
msgid "This function lets you compare two substrings of the same buffer or two different buffers.  The first three arguments specify one substring, giving a buffer (or a buffer name) and two positions within the buffer.  The last three arguments specify the other substring in the same way.  You can use @code{nil} for @var{buffer1}, @var{buffer2}, or both to stand for the current buffer."
msgstr "この関数により、1つのバッファー、または2つの異なるバッファーの、2つの部分文字列(substrings)を比較できる。最初の3つの引数は、バッファーとそのバッファー内の2つの位置を与えることにより、1つの部分文字列を指定する。最後の3つの引数は、同様の方法によりもう一方の部分文字列を指定する。@var{buffer1}と@var{buffer2}のいずれか、または両方にたいして、カレントバッファーを意味する@code{nil}を使用できる。"

#. type: defun
#: text.texi.orig:342
msgid "The value is negative if the first substring is less, positive if the first is greater, and zero if they are equal.  The absolute value of the result is one plus the index of the first differing characters within the substrings."
msgstr "1つ目の部分文字列が2つ目の部分文字列より小なら負、大なら正、等しければ値は0となる。結果の絶対値は、部分文字列内で最初に異なる文字のインデックスに1を和した値である。"

#. type: defun
#: text.texi.orig:346
msgid "This function ignores case when comparing characters if @code{case-fold-search} is non-@code{nil}.  It always ignores text properties."
msgstr "@code{case-fold-search}が非@code{nil}なら、この関数は大文字小文字の違いを無視する。テキストプロパティは常に無視される。"

#. type: defun
#: text.texi.orig:351
msgid "Suppose you have the text @w{@samp{foobarbar haha!rara!}} in the current buffer; then in this example the two substrings are @samp{rbar } and @samp{rara!}.  The value is 2 because the first substring is greater at the second character."
msgstr "カレントバッファー内にテキスト@w{@samp{foobarbar haha!rara!}}があるとしよう。そしてこの例では2つの部分文字列が@samp{rbar }と@samp{rara!}であるとする。1つ目の文字列の2つ目の文字が大きいので、値は2となる。"

#. type: example
#: text.texi.orig:355
#, no-wrap
msgid ""
"(compare-buffer-substrings nil 6 11 nil 16 21)\n"
"     @result{} 2\n"
msgstr ""
"(compare-buffer-substrings nil 6 11 nil 16 21)\n"
"     @result{} 2\n"

#. type: section
#: text.texi.orig:359
#, no-wrap
msgid "Inserting Text"
msgstr "Inserting Text"

#. type: cindex
#: text.texi.orig:360
#, no-wrap
msgid "insertion of text"
msgstr "insertion of text"

#. type: cindex
#: text.texi.orig:361
#, no-wrap
msgid "text insertion"
msgstr "text insertion"

#. type: cindex
#: text.texi.orig:363
#, no-wrap
msgid "insertion before point"
msgstr "insertion before point"

#. type: cindex
#: text.texi.orig:364
#, no-wrap
msgid "before point, insertion"
msgstr "before point, insertion"

#. type: Plain text
#: text.texi.orig:370
msgid "@dfn{Insertion} means adding new text to a buffer.  The inserted text goes at point---between the character before point and the character after point.  Some insertion functions leave point before the inserted text, while other functions leave it after.  We call the former insertion @dfn{after point} and the latter insertion @dfn{before point}."
msgstr "@dfn{挿入(insertion)}とは、バッファーへの新たなテキストの追加を意味します。テキストはポイント位置、すなわちポイント前の文字とポイント後の文字の間に追加されます。挿入関数は挿入されたテキストの後にポイントを残しますが、前にポイントを残す関数もいくつかあります。前者の挿入を@dfn{ポイント後挿入(after point)}、後者を@dfn{ポイント前挿入(before point)}と呼びます。"

#. type: Plain text
#: text.texi.orig:378
msgid "Insertion moves markers located at positions after the insertion point, so that they stay with the surrounding text (@pxref{Markers}).  When a marker points at the place of insertion, insertion may or may not relocate the marker, depending on the marker's insertion type (@pxref{Marker Insertion Types}).  Certain special functions such as @code{insert-before-markers} relocate all such markers to point after the inserted text, regardless of the markers' insertion type."
msgstr "挿入により、挿入位置の後にあったマーカーは、テキストを取り囲むように移動されます(@ref{Markers}を参照)。マーカーは挿入箇所をさしている際は、挿入によるマーカー再配置の有無は、そのマーカーの挿入タイプに依存します(@ref{Marker Insertion Types}を参照)。@code{insert-before-markers}のような特定のスペシャル関数は、マーカーの挿入タイプとは関係なく、挿入されたテキストの後にそのようなマーカーすべてを再配置します。"

#. type: Plain text
#: text.texi.orig:382
msgid "Insertion functions signal an error if the current buffer is read-only (@pxref{Read Only Buffers}) or if they insert within read-only text (@pxref{Special Properties})."
msgstr "カレントバッファーが読み取り専用(@ref{Read Only Buffers}を参照)、または読み取り専用テキスト(@ref{Special Properties}を参照)を挿入しようとした場合、挿入関数はエラーをシグナルします。"

#. type: Plain text
#: text.texi.orig:388
msgid "These functions copy text characters from strings and buffers along with their properties.  The inserted characters have exactly the same properties as the characters they were copied from.  By contrast, characters specified as separate arguments, not part of a string or buffer, inherit their text properties from the neighboring text."
msgstr "以下の関数は、文字列およびバッファーからプロパティとともにテキスト文字をコピーします。挿入される文字は、コピー元の文字と完全に同一のプロパティをもちます。それとは対照的に、文字列やバッファーの一部ではない個別の引数として指定された文字は、隣接するテキストからテキストプロパティを継承します。"

#. type: Plain text
#: text.texi.orig:395
msgid "The insertion functions convert text from unibyte to multibyte in order to insert in a multibyte buffer, and vice versa---if the text comes from a string or from a buffer.  However, they do not convert unibyte character codes 128 through 255 to multibyte characters, not even if the current buffer is a multibyte buffer.  @xref{Converting Representations}."
msgstr "テキストが文字列またはバッファー由来の場合、マルチバイトバッファーに挿入するために、挿入関数はユニバイトからマルチバイトへの変換、およびその逆も行います。しかし、たとえカレントバッファーがマルチバイトバッファーであったとしても、コード128から255までのユニバイトはマルチバイトに変換しません。@ref{Converting Representations}を参照してください。"

#. type: defun
#: text.texi.orig:396
#, no-wrap
msgid "insert &rest args"
msgstr "insert &rest args"

#. type: defun
#: text.texi.orig:401
msgid "This function inserts the strings and/or characters @var{args} into the current buffer, at point, moving point forward.  In other words, it inserts the text before point.  An error is signaled unless all @var{args} are either strings or characters.  The value is @code{nil}."
msgstr "この関数は、文字列および/または1つ以上の文字@var{args}を、カレントバッファーのポイント位置に挿入して、ポイントを前方に移動する。別の言い方をすると、ポイントの前にテキストを挿入する。すべての@var{args}が文字列が文字列と文字のいずれでもない場合は、エラーをシグナルする。値は@code{nil}。"

#. type: defun
#: text.texi.orig:403
#, no-wrap
msgid "insert-before-markers &rest args"
msgstr "insert-before-markers &rest args"

#. type: defun
#: text.texi.orig:408
msgid "This function inserts the strings and/or characters @var{args} into the current buffer, at point, moving point forward.  An error is signaled unless all @var{args} are either strings or characters.  The value is @code{nil}."
msgstr "この関数は、文字列および/または1つ以上の文字@var{args}を、カレントバッファーのポイント位置に挿入して、ポイントを前方に移動する。すべての@var{args}が文字列が文字列と文字のいずれでもない場合は、エラーをシグナルする。値は@code{nil}。"

#. type: defun
#: text.texi.orig:415
msgid "This function is unlike the other insertion functions in that it relocates markers initially pointing at the insertion point, to point after the inserted text.  If an overlay begins at the insertion point, the inserted text falls outside the overlay; if a nonempty overlay ends at the insertion point, the inserted text falls inside that overlay."
msgstr "他の挿入関数と異なり、この関数は挿入されたテキストの後を指すように、まずマーカーが挿入位置を指すように再配置する。挿入位置からオーバーレイが開始される場合、挿入されたテキストはそのオーバーレイの外側に出される。空でないオーバーレイが挿入位置で終わる場合、挿入されたテキストはそのオーバーレイの内側に入れられる。"

#. type: deffn
#: text.texi.orig:417
#, no-wrap
msgid "Command insert-char character &optional count inherit"
msgstr "Command insert-char character &optional count inherit"

#. type: deffn
#: text.texi.orig:421
msgid "This command inserts @var{count} instances of @var{character} into the current buffer before point.  The argument @var{count} must be an integer, and @var{character} must be a character."
msgstr "このコマンドは、カレントバッファーのポイントの前に、@var{character}のインスタンスを@var{count}個挿入する。引数@var{count}は整数、@var{character}は文字でなければならない。"

#. type: deffn
#: text.texi.orig:425
msgid "If called interactively, this command prompts for @var{character} using its Unicode name or its code point.  @xref{Inserting Text,,, emacs, The GNU Emacs Manual}."
msgstr "インタラクティブに呼び出された際は、このコマンドは@var{character}にたいしてコードポイントかUnicode名による入力を求める。@ref{Inserting Text,,, emacs, The GNU Emacs Manual}を参照のこと。"

#. type: deffn
#: text.texi.orig:429
msgid "This function does not convert unibyte character codes 128 through 255 to multibyte characters, not even if the current buffer is a multibyte buffer.  @xref{Converting Representations}."
msgstr "この関数は、たとえカレントバッファーがマルチバイトバッファーであっても、コード128から255のユニバイト文字をマルチバイト文字に変換しない。@ref{Converting Representations}を参照のこと。"

#. type: deffn
#: text.texi.orig:433
msgid "If @var{inherit} is non-@code{nil}, the inserted characters inherit sticky text properties from the two characters before and after the insertion point.  @xref{Sticky Properties}."
msgstr "@var{inherit}が非@code{nil}の場合、挿入された文字は挿入位置前後の2文字から、ステッキーテキストプロパティ(sticky text properties)を継承する。@ref{Sticky Properties}を参照のこと。"

#. type: defun
#: text.texi.orig:435
#, no-wrap
msgid "insert-buffer-substring from-buffer-or-name &optional start end"
msgstr "insert-buffer-substring from-buffer-or-name &optional start end"

#. type: defun
#: text.texi.orig:441
msgid "This function inserts a portion of buffer @var{from-buffer-or-name} into the current buffer before point.  The text inserted is the region between @var{start} (inclusive) and @var{end} (exclusive).  (These arguments default to the beginning and end of the accessible portion of that buffer.)  This function returns @code{nil}."
msgstr "この関数は、カレントバッファーのポイント前に、バッファー@var{from-buffer-or-name}の一部を挿入する。挿入されるテキストは、@var{start}(を含む)から@var{end}(を含まない)の間のリージョン(これらの引数のデフォルトは、そのバッファーのアクセス可能範囲の先頭と終端)である。この関数は@code{nil}をリターンする。"

#. type: defun
#: text.texi.orig:444
msgid "In this example, the form is executed with buffer @samp{bar} as the current buffer.  We assume that buffer @samp{bar} is initially empty."
msgstr "以下の例では、バッファー@samp{bar}をカレントバッファーとしてフォームを実行する。バッファー@samp{bar}は、最初は空であるものとする。"

#. type: group
#: text.texi.orig:450
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"We hold these truths to be self-evident, that all\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"We hold these truths to be self-evident, that all\n"
"---------- Buffer: foo ----------\n"

#. type: group
#: text.texi.orig:455
#, no-wrap
msgid ""
"(insert-buffer-substring \"foo\" 1 20)\n"
"     @result{} nil\n"
"\n"
msgstr ""
"(insert-buffer-substring \"foo\" 1 20)\n"
"     @result{} nil\n"
"\n"

#. type: group
#: text.texi.orig:459
#, no-wrap
msgid ""
"---------- Buffer: bar ----------\n"
"We hold these truth@point{}\n"
"---------- Buffer: bar ----------\n"
msgstr ""
"---------- Buffer: bar ----------\n"
"We hold these truth@point{}\n"
"---------- Buffer: bar ----------\n"

#. type: defun
#: text.texi.orig:463
#, no-wrap
msgid "insert-buffer-substring-no-properties from-buffer-or-name &optional start end"
msgstr "insert-buffer-substring-no-properties from-buffer-or-name &optional start end"

#. type: defun
#: text.texi.orig:466
msgid "This is like @code{insert-buffer-substring} except that it does not copy any text properties."
msgstr "これは@code{insert-buffer-substring}と似ているが、テキストプロパティをコピーしない点が異なる。"

#. type: Plain text
#: text.texi.orig:472
msgid "@xref{Sticky Properties}, for other insertion functions that inherit text properties from the nearby text in addition to inserting it.  Whitespace inserted by indentation functions also inherits text properties."
msgstr "テキスト挿入に加えて、隣接するテキストからテキストプロパティを継承する他の関数については、@ref{Sticky Properties}を参照のこと。インデント関数により挿入された空白文字も、テキストプロパティを継承する。"

#. type: section
#: text.texi.orig:474
#, no-wrap
msgid "User-Level Insertion Commands"
msgstr "User-Level Insertion Commands"

#. type: Plain text
#: text.texi.orig:479
msgid "This section describes higher-level commands for inserting text, commands intended primarily for the user but useful also in Lisp programs."
msgstr "このセクションでは、テキスト挿入のための高レベルコマンド、ユーザーによる使用を意図しているがLispプログラムでも有用なコマンドについて説明します。"

#. type: deffn
#: text.texi.orig:480
#, no-wrap
msgid "Command insert-buffer from-buffer-or-name"
msgstr "Command insert-buffer from-buffer-or-name"

#. type: deffn
#: text.texi.orig:485
msgid "This command inserts the entire accessible contents of @var{from-buffer-or-name} (which must exist) into the current buffer after point.  It leaves the mark after the inserted text.  The value is @code{nil}."
msgstr "このコマンドは、@var{from-buffer-or-name}(存在しなければならない)のアクセス可能範囲全体を、カレントバッファーのポイントの後に挿入する。マークは挿入されたテキストの後に残される。値は@code{nil}。"

#. type: deffn
#: text.texi.orig:487
#, no-wrap
msgid "Command self-insert-command count"
msgstr "Command self-insert-command count"

#. type: cindex
#: text.texi.orig:488
#, no-wrap
msgid "character insertion"
msgstr "character insertion"

#. type: cindex
#: text.texi.orig:489
#, no-wrap
msgid "self-insertion"
msgstr "self-insertion"

#. type: deffn
#: text.texi.orig:495
msgid "This command inserts the last character typed; it does so @var{count} times, before point, and returns @code{nil}.  Most printing characters are bound to this command.  In routine use, @code{self-insert-command} is the most frequently called function in Emacs, but programs rarely use it except to install it on a keymap."
msgstr "このコマンドは、タイプされた最後の文字を挿入する。これをポイント前で@var{count}回繰り返して、@code{nil}をリターンする。ほとんどのプリント文字が、このコマンドにバインドされる。通常の使用では、@code{self-insert-command}はEmacsでもっとも頻繁に呼び出される関数だが、Lispプログラムではそれをキーマップにインストールする場合を除き、使用されるのは稀である。"

#. type: deffn
#: text.texi.orig:497
msgid "In an interactive call, @var{count} is the numeric prefix argument."
msgstr "インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数である。"

#. type: deffn
#: text.texi.orig:501
msgid "Self-insertion translates the input character through @code{translation-table-for-input}.  @xref{Translation of Characters}."
msgstr "自己挿入では、入力文字は@code{translation-table-for-input}を通じて変換される。@ref{Translation of Characters}を参照のこと。"

#. type: deffn
#: text.texi.orig:505
msgid "This command calls @code{auto-fill-function} whenever that is non-@code{nil} and the character inserted is in the table @code{auto-fill-chars} (@pxref{Auto Filling})."
msgstr "これは、入力文字がテーブル@code{auto-fill-chars}内にあり、@code{auto-fill-function}が非@code{nil}なら、常にそれを呼び出す(@ref{Auto Filling}を参照)。"

#. type: deffn
#: text.texi.orig:512
msgid "This command performs abbrev expansion if Abbrev mode is enabled and the inserted character does not have word-constituent syntax. (@xref{Abbrevs}, and @ref{Syntax Class Table}.)  It is also responsible for calling @code{blink-paren-function} when the inserted character has close parenthesis syntax (@pxref{Blinking})."
msgstr "このコマンドは、Abbrevモードが有効で、入力文字が単語コウセ構文をもたなければ、abbrev展開を行う(@ref{Abbrevs}および@ref{Syntax Class Table}を参照されたい)。さらに、入力文字が閉じカッコ構文(close parenthesis syntax)をもつ場合は、@code{blink-paren-function}を呼び出す責任もある(@ref{Blinking}を参照)。"

#. type: vindex
#: text.texi.orig:513
#, no-wrap
msgid "post-self-insert-hook"
msgstr "post-self-insert-hook"

#. type: deffn
#: text.texi.orig:517
msgid "The final thing this command does is to run the hook @code{post-self-insert-hook}.  You could use this to automatically reindent text as it is typed, for example."
msgstr "このコマンドは最後に、フック@code{post-self-insert-hook}を実行する。たとえば、タイプされたテキストにしたがい自動インデントするために、これを使用できる。"

#. type: deffn
#: text.texi.orig:521
msgid "Do not try substituting your own definition of @code{self-insert-command} for the standard one.  The editor command loop handles this function specially."
msgstr "@code{self-insert-command}の標準的な定義にたいして、独自の定義による置き換えを試みてはならない。エディターコマンドループは、このコマンドを特別に扱うからだ。"

#. type: deffn
#: text.texi.orig:523
#, no-wrap
msgid "Command newline &optional number-of-newlines"
msgstr "Command newline &optional number-of-newlines"

#. type: deffn
#: text.texi.orig:527
msgid "This command inserts newlines into the current buffer before point.  If @var{number-of-newlines} is supplied, that many newline characters are inserted."
msgstr "このコマンドは、カレントバッファーのポイントの前に、改行を挿入する。@var{number-of-newlines}が与えられた場合は、その個数の改行文字が挿入される。"

#. type: cindex
#: text.texi.orig:528
#, no-wrap
msgid "newline and Auto Fill mode"
msgstr "newline and Auto Fill mode"

#. type: deffn
#: text.texi.orig:536
msgid "This function calls @code{auto-fill-function} if the current column number is greater than the value of @code{fill-column} and @var{number-of-newlines} is @code{nil}.  Typically what @code{auto-fill-function} does is insert a newline; thus, the overall result in this case is to insert two newlines at different places: one at point, and another earlier in the line.  @code{newline} does not auto-fill if @var{number-of-newlines} is non-@code{nil}."
msgstr "この関数は、カレント列数が@code{fill-column}より大、かつ@var{number-of-newlines}が@code{nil}なら、@code{auto-fill-function}を呼び出す。@code{auto-fill-function}が通常行うのは改行の挿入ではり、最終的な結果としては、ポイント位置と、その行のより前方の位置という、2つの異なる箇所に改行を挿入する。@var{number-of-newlines}が非@code{nil}なら、@code{newline}はauto-fillを行わない。"

#. type: deffn
#: text.texi.orig:539
msgid "This command indents to the left margin if that is not zero.  @xref{Margins}."
msgstr "このコマンドは、左マージンが0でなければ、左マージンにインデントする。@ref{Margins}を参照のこと。"

#. type: deffn
#: text.texi.orig:542
msgid "The value returned is @code{nil}.  In an interactive call, @var{count} is the numeric prefix argument."
msgstr "リターン値は@code{nil}。インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数である。"

#. type: defvar
#: text.texi.orig:544
#, no-wrap
msgid "overwrite-mode"
msgstr "overwrite-mode"

#. type: defvar
#: text.texi.orig:551
msgid "This variable controls whether overwrite mode is in effect.  The value should be @code{overwrite-mode-textual}, @code{overwrite-mode-binary}, or @code{nil}.  @code{overwrite-mode-textual} specifies textual overwrite mode (treats newlines and tabs specially), and @code{overwrite-mode-binary} specifies binary overwrite mode (treats newlines and tabs like any other characters)."
msgstr "この変数は、overwriteモードに効力をもつかどうかを制御する。値は@code{overwrite-mode-textual}、@code{overwrite-mode-binary}、または@code{nil}であること。@code{overwrite-mode-textual}はテキスト的なoverwriteモード(改行とタブを特別に扱う)、@code{overwrite-mode-binary}はバイナリーoverwriteモード(改行とタブを普通の文字と同様に扱う)を指定する。"

#. type: section
#: text.texi.orig:554
#, no-wrap
msgid "Deleting Text"
msgstr "Deleting Text"

#. type: cindex
#: text.texi.orig:555
#, no-wrap
msgid "text deletion"
msgstr "text deletion"

#. type: cindex
#: text.texi.orig:557
#, no-wrap
msgid "deleting text vs killing"
msgstr "deleting text vs killing"

#. type: Plain text
#: text.texi.orig:563
msgid "Deletion means removing part of the text in a buffer, without saving it in the kill ring (@pxref{The Kill Ring}).  Deleted text can't be yanked, but can be reinserted using the undo mechanism (@pxref{Undo}).  Some deletion functions do save text in the kill ring in some special cases."
msgstr "削除とは、バッファー内のテキストの一部を、killリングに保存せずに取り除くことを意味します。(@ref{The Kill Ring}を参照)。削除されたテキストをyankすることはできませんが、undoメカニズム(@ref{Undo}を参照)を使用すれば再挿入が可能です。特別なケースにおいては、killリングにテキストの保存を行う削除関数がいくつかあります。"

#. type: Plain text
#: text.texi.orig:565
msgid "All of the deletion functions operate on the current buffer."
msgstr "削除関数はすべて、カレントバッファーにたいして処理を行います。"

#. type: deffn
#: text.texi.orig:566
#, no-wrap
msgid "Command erase-buffer"
msgstr "Command erase-buffer"

#. type: deffn
#: text.texi.orig:573
msgid "This function deletes the entire text of the current buffer (@emph{not} just the accessible portion), leaving it empty.  If the buffer is read-only, it signals a @code{buffer-read-only} error; if some of the text in it is read-only, it signals a @code{text-read-only} error.  Otherwise, it deletes the text without asking for any confirmation.  It returns @code{nil}."
msgstr "この関数は、カレントバッファーのテキスト全体(アクセス可能範囲だけでは@emph{ない})を削除してバッファーが読み取り専用なら@code{buffer-read-only}、バッファー内の一部テキストが読み取り専用の場合は@code{text-read-only}をシグナルする。それ以外では、確認なしでテキストを削除する。リターン値は@code{nil}。"

#. type: deffn
#: text.texi.orig:579
msgid "Normally, deleting a large amount of text from a buffer inhibits further auto-saving of that buffer ``because it has shrunk''.  However, @code{erase-buffer} does not do this, the idea being that the future text is not really related to the former text, and its size should not be compared with that of the former text."
msgstr "バッファーからの大量テキストの削除により、``バッファーが大幅に縮小された''という理由で、通常はさらなる自動保存ふぁ抑制される。しかし@code{erase-buffer}は、将来のテキストが以前のテキストと関連があるのは稀であり、以前のテキストのサイズと比較されるべきではないというアイデアにもとづき、これを行わない。"

#. type: deffn
#: text.texi.orig:581
#, no-wrap
msgid "Command delete-region start end"
msgstr "Command delete-region start end"

#. type: deffn
#: text.texi.orig:586
msgid "This command deletes the text between positions @var{start} and @var{end} in the current buffer, and returns @code{nil}.  If point was inside the deleted region, its value afterward is @var{start}.  Otherwise, point relocates with the surrounding text, as markers do."
msgstr "このコマンドは、カレントバッファー内の位置@var{start}から@var{end}までの間のテキストを削除して、@code{nil}をリターンする。削除されるリージョン内にポイントがある場合、リージョン削除後のポイントの値は@var{start}になる。それ以外の場合は、マーカーが行うようにポイントはテキストを取り囲むように再配置される。"

#. type: defun
#: text.texi.orig:588
#, no-wrap
msgid "delete-and-extract-region start end"
msgstr "delete-and-extract-region start end"

#. type: defun
#: text.texi.orig:592
msgid "This function deletes the text between positions @var{start} and @var{end} in the current buffer, and returns a string containing the text just deleted."
msgstr "この関数は、カレントバッファー内の位置@var{start}から@var{end}までの間のテキストを削除して、削除されたテキストを含む文字列をリターンする。"

#. type: defun
#: text.texi.orig:596
msgid "If point was inside the deleted region, its value afterward is @var{start}.  Otherwise, point relocates with the surrounding text, as markers do."
msgstr "削除されるリージョン内にポイントがある場合、リージョン削除後のポイントの値は@var{start}になる。それ以外の場合は、マーカーが行うようにポイントはテキストを取り囲むように再配置される。"

#. type: deffn
#: text.texi.orig:598
#, no-wrap
msgid "Command delete-char count &optional killp"
msgstr "Command delete-char count &optional killp"

#. type: deffn
#: text.texi.orig:602
msgid "This command deletes @var{count} characters directly after point, or before point if @var{count} is negative.  If @var{killp} is non-@code{nil}, then it saves the deleted characters in the kill ring."
msgstr "このコマンドは、ポイント直後の@var{count}文字、@var{count}が負なら直前の@var{count}文字を削除する。@var{killp}が非@code{nil}なら、削除した文字をkillリングに保存する。"

#. type: deffn
#: text.texi.orig:608 text.texi.orig:623 text.texi.orig:645
msgid "In an interactive call, @var{count} is the numeric prefix argument, and @var{killp} is the unprocessed prefix argument.  Therefore, if a prefix argument is supplied, the text is saved in the kill ring.  If no prefix argument is supplied, then one character is deleted, but not saved in the kill ring."
msgstr "インタラクティブな呼び出しでは、@var{count}は数プレフィクス引数、@var{killp}は未処理プレフィクス引数(unprocessed prefix argument)である。すなわち、プレフィクス引数が与えられた場合、そのテキストはkillリングに保存され、与えられなければ、1文字が削除され、それはkillリングに保存されない。"

#. type: deffn
#: text.texi.orig:610 text.texi.orig:625 text.texi.orig:647
msgid "The value returned is always @code{nil}."
msgstr "リターン値は常に@code{nil}である。"

#. type: deffn
#: text.texi.orig:612
#, no-wrap
msgid "Command delete-backward-char count &optional killp"
msgstr "Command delete-backward-char count &optional killp"

#. type: cindex
#: text.texi.orig:613
#, no-wrap
msgid "deleting previous char"
msgstr "deleting previous char"

#. type: deffn
#: text.texi.orig:617
msgid "This command deletes @var{count} characters directly before point, or after point if @var{count} is negative.  If @var{killp} is non-@code{nil}, then it saves the deleted characters in the kill ring."
msgstr "このコマンドは、ポイント直前の@var{count}文字、@var{count}が負なら直後の@var{count}文字を削除する。@var{killp}が非@code{nil}なら、削除した文字をkillリングに保存する。"

#. type: deffn
#: text.texi.orig:627
#, no-wrap
msgid "Command backward-delete-char-untabify count &optional killp"
msgstr "Command backward-delete-char-untabify count &optional killp"

#. type: cindex
#: text.texi.orig:628
#, no-wrap
msgid "tab deletion"
msgstr "tab deletion"

#. type: deffn
#: text.texi.orig:635
msgid "This command deletes @var{count} characters backward, changing tabs into spaces.  When the next character to be deleted is a tab, it is first replaced with the proper number of spaces to preserve alignment and then one of those spaces is deleted instead of the tab.  If @var{killp} is non-@code{nil}, then the command saves the deleted characters in the kill ring."
msgstr "このコマンドは、タブをスペースに変換しながら、後方に@var{count}文字を削除する。次に削除する文字がタブなら、まず適正な位置を保つような数のスペースに変換してから、それらのうちのスペース1つをタブのかわりに削除する。@var{killp}が非@code{nil}なら、このコマンドは削除した文字をkillリングに保存する。"

#. type: deffn
#: text.texi.orig:639
msgid "Conversion of tabs to spaces happens only if @var{count} is positive.  If it is negative, exactly @minus{}@var{count} characters after point are deleted."
msgstr "タブからスペースへの変換は、@var{count}が正の場合のみ発生する。負の場合は、ポイント後の@minus{}@var{count}文字が、正確に削除される。"

#. type: defopt
#: text.texi.orig:649
#, no-wrap
msgid "backward-delete-char-untabify-method"
msgstr "backward-delete-char-untabify-method"

#. type: defopt
#: text.texi.orig:657
msgid "This option specifies how @code{backward-delete-char-untabify} should deal with whitespace.  Possible values include @code{untabify}, the default, meaning convert a tab to many spaces and delete one; @code{hungry}, meaning delete all tabs and spaces before point with one command; @code{all} meaning delete all tabs, spaces and newlines before point, and @code{nil}, meaning do nothing special for whitespace characters."
msgstr "このオプションは、@code{backward-delete-char-untabify}が空白文字を扱う方法を指定する。可能な値には@code{untabify}(タブを個数分のスペースに変換してスペースを1つ削。これがデフォルト除)、@code{hungry}(1コマンドでポイント前のタブとスペースすべてを削除する)、@code{all}(ポイント前のタブとスペース、および改行すべてを削除する)、@code{nil}(空白文字にたいして特に何もしない)。"

#. type: section
#: text.texi.orig:660
#, no-wrap
msgid "User-Level Deletion Commands"
msgstr "User-Level Deletion Commands"

#. type: Plain text
#: text.texi.orig:665
msgid "This section describes higher-level commands for deleting text, commands intended primarily for the user but useful also in Lisp programs."
msgstr "このセクションでは、主にユーザーにたいして有用なものの、Lispプログラムでも有用な、テキストを削除するための高レベルんｑコマンドを説明します。"

#. type: deffn
#: text.texi.orig:666
#, no-wrap
msgid "Command delete-horizontal-space &optional backward-only"
msgstr "Command delete-horizontal-space &optional backward-only"

#. type: cindex
#: text.texi.orig:667
#, no-wrap
msgid "deleting whitespace"
msgstr "deleting whitespace"

#. type: deffn
#: text.texi.orig:670
msgid "This function deletes all spaces and tabs around point.  It returns @code{nil}."
msgstr "この関数は、ポイント近辺のすべてのスペースとタブを削除する。リターン値は@code{nil}。"

#. type: deffn
#: text.texi.orig:673
msgid "If @var{backward-only} is non-@code{nil}, the function deletes spaces and tabs before point, but not after point."
msgstr "@var{backward-only}が非@code{nil}の場合、この関数はポイント前のスペースとタブを削除するがポイント後のスペースとタブは削除しない。"

#. type: deffn
#: text.texi.orig:677
msgid "In the following examples, we call @code{delete-horizontal-space} four times, once on each line, with point between the second and third characters on the line each time."
msgstr "以下の例では、各行ごとに、2番目と3番目の間にポイントを置いて、@code{delete-horizontal-space}を4回呼び出している。"

#. type: group
#: text.texi.orig:686
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"I @point{}thought\n"
"I @point{}     thought\n"
"We@point{} thought\n"
"Yo@point{}u thought\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"I @point{}thought\n"
"I @point{}     thought\n"
"We@point{} thought\n"
"Yo@point{}u thought\n"
"---------- Buffer: foo ----------\n"

#. type: group
#: text.texi.orig:691
#, no-wrap
msgid ""
"(delete-horizontal-space)   ; @r{Four times.}\n"
"     @result{} nil\n"
"\n"
msgstr ""
"(delete-horizontal-space)   ; @r{Four times.}\n"
"     @result{} nil\n"
"\n"

#. type: group
#: text.texi.orig:698
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"Ithought\n"
"Ithought\n"
"Wethought\n"
"You thought\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"Ithought\n"
"Ithought\n"
"Wethought\n"
"You thought\n"
"---------- Buffer: foo ----------\n"

#. type: deffn
#: text.texi.orig:702
#, no-wrap
msgid "Command delete-indentation &optional join-following-p"
msgstr "Command delete-indentation &optional join-following-p"

#. type: deffn
#: text.texi.orig:708
msgid "This function joins the line point is on to the previous line, deleting any whitespace at the join and in some cases replacing it with one space.  If @var{join-following-p} is non-@code{nil}, @code{delete-indentation} joins this line to the following line instead.  The function returns @code{nil}."
msgstr "この関数は、ポイントのある行を、その前の行に結合(join)する。結合においては、すべての空白文字を削除、特定のケースにおいてはそれらを1つのスペースに置き換える。@var{join-following-p}が非@code{nil}なら、@code{delete-indentation}はかわりに後続行と結合を行う。この関数は@code{nil}をリターンする。"

#. type: deffn
#: text.texi.orig:712
msgid "If there is a fill prefix, and the second of the lines being joined starts with the prefix, then @code{delete-indentation} deletes the fill prefix before joining the lines.  @xref{Margins}."
msgstr "fillプレフィクスがあり、結合される2つ目の行もそのプレフィクスで始まる場合、行の結合前に@code{delete-indentation}はそのfillプレフィクスを削除する。@ref{Margins}を参照のこと。"

#. type: deffn
#: text.texi.orig:716
msgid "In the example below, point is located on the line starting @samp{events}, and it makes no difference if there are trailing spaces in the preceding line."
msgstr "以下の例では、@samp{events}で始まる行にポイントがあり、前の行の末尾に1つ以上のスペースが存在しても、違いは生じない。"

#. type: group
#: text.texi.orig:723
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"When in the course of human\n"
"@point{}    events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"When in the course of human\n"
"@point{}    events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"

#. type: smallexample
#: text.texi.orig:727
#, no-wrap
msgid ""
"(delete-indentation)\n"
"     @result{} nil\n"
"\n"
msgstr ""
"(delete-indentation)\n"
"     @result{} nil\n"
"\n"

#. type: group
#: text.texi.orig:732
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"When in the course of human@point{} events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"When in the course of human@point{} events, it becomes necessary\n"
"---------- Buffer: foo ----------\n"

#. type: deffn
#: text.texi.orig:737
msgid "After the lines are joined, the function @code{fixup-whitespace} is responsible for deciding whether to leave a space at the junction."
msgstr "行の結合後に、結合点に単一のスペースを残すか否かを決定するのは、関数@code{fixup-whitespace}の責任である。"

#. type: deffn
#: text.texi.orig:739
#, no-wrap
msgid "Command fixup-whitespace"
msgstr "Command fixup-whitespace"

#. type: deffn
#: text.texi.orig:743
msgid "This function replaces all the horizontal whitespace surrounding point with either one space or no space, according to the context.  It returns @code{nil}."
msgstr "この関数は、ポイントを取り囲むすべての水平スペースを、コンテキストに応じて1つのスペースまたはスペースなしに置き換える。リターン値は@code{nil}。"

#. type: deffn
#: text.texi.orig:749
msgid "At the beginning or end of a line, the appropriate amount of space is none.  Before a character with close parenthesis syntax, or after a character with open parenthesis or expression-prefix syntax, no space is also appropriate.  Otherwise, one space is appropriate.  @xref{Syntax Class Table}."
msgstr "行の先頭または末尾において、スペースの適正な数は0である。閉じカッコ構文(close parenthesis syntax)の前の文字、開きカッコの後の文字、式プレフィクス構文(expression-prefix syntax)においても、スペースの適正な数は0である。それ以外では、スペースの適正な数は1である。@ref{Syntax Class Table}を参照のこと。"

#. type: deffn
#: text.texi.orig:753
msgid "In the example below, @code{fixup-whitespace} is called the first time with point before the word @samp{spaces} in the first line.  For the second invocation, point is directly after the @samp{(}."
msgstr "以下の例では、最初に1行目の単語@samp{spaces}の前にポイントがある状態で、@code{fixup-whitespace}を呼び出している。2回目の呼び出しでは、@samp{(}の直後にポイントがある。"

#. type: group
#: text.texi.orig:760
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This has too many     @point{}spaces\n"
"This has too many spaces at the start of (@point{}   this list)\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"This has too many     @point{}spaces\n"
"This has too many spaces at the start of (@point{}   this list)\n"
"---------- Buffer: foo ----------\n"

#. type: group
#: text.texi.orig:767
#, no-wrap
msgid ""
"(fixup-whitespace)\n"
"     @result{} nil\n"
"(fixup-whitespace)\n"
"     @result{} nil\n"
msgstr ""
"(fixup-whitespace)\n"
"     @result{} nil\n"
"(fixup-whitespace)\n"
"     @result{} nil\n"

#. type: group
#: text.texi.orig:774
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This has too many spaces\n"
"This has too many spaces at the start of (this list)\n"
"---------- Buffer: foo ----------\n"
msgstr ""
"---------- Buffer: foo ----------\n"
"This has too many spaces\n"
"This has too many spaces at the start of (this list)\n"
"---------- Buffer: foo ----------\n"

#. type: deffn
#: text.texi.orig:778
#, no-wrap
msgid "Command just-one-space &optional n"
msgstr "Command just-one-space &optional n"

#. type: deffn
#: text.texi.orig:783
msgid "This command replaces any spaces and tabs around point with a single space, or @var{n} spaces if @var{n} is specified.  It returns @code{nil}."
msgstr "このコマンドは、ポイントを取り囲むすべてのスペースを1つのスペース、または@var{n}が指定された場合は@var{n}個のスペースで置き換える。リターン値は@code{nil}。"

#. type: deffn
#: text.texi.orig:788
#, no-wrap
msgid "Command delete-blank-lines"
msgstr "Command delete-blank-lines"

#. type: deffn
#: text.texi.orig:794
msgid "This function deletes blank lines surrounding point.  If point is on a blank line with one or more blank lines before or after it, then all but one of them are deleted.  If point is on an isolated blank line, then it is deleted.  If point is on a nonblank line, the command deletes all blank lines immediately following it."
msgstr "この関数は、ポイントを取り囲む空行を削除する。ポイントが前後に1行以上の空行がある空の行にある場合は、1行を除きそれらすべてを削除する。ポイントが孤立した空行にあるなら、その行を削除する。ポイントが空でない行にあるなら、その直後にあるすべての空白を削除する。"

#. type: deffn
#: text.texi.orig:797
msgid "A blank line is defined as a line containing only tabs and spaces."
msgstr "空行とは、タブまたはスペースのみを含む行として定義される。"

#. type: deffn
#: text.texi.orig:799
msgid "@code{delete-blank-lines} returns @code{nil}."
msgstr "@code{delete-blank-lines}は@code{nil}をリターンする。"

#. type: deffn
#: text.texi.orig:801
#, no-wrap
msgid "Command delete-trailing-whitespace start end"
msgstr "Command delete-trailing-whitespace start end"

#. type: deffn
#: text.texi.orig:804
msgid "Delete trailing whitespace in the region defined by @var{start} and @var{end}."
msgstr "@var{start}と@var{end}で定義されるリージョン内の、末尾の空白文字を削除する。"

#. type: deffn
#: text.texi.orig:807
msgid "This command deletes whitespace characters after the last non-whitespace character in each line in the region."
msgstr "このコマンドは、リージョン内の各行の最後の非空白文字後にある空白文字を削除する。"

#. type: deffn
#: text.texi.orig:812
msgid "If this command acts on the entire buffer (i.e. if called interactively with the mark inactive, or called from Lisp with @var{end} @code{nil}), it also deletes all trailing lines at the end of the buffer if the variable @code{delete-trailing-lines} is non-@code{nil}."
msgstr "このコマンドがバッファー全体(マークが非アクティブな状態で呼び出された場合やLispから@var{end}と@code{nil}で呼び出された場合)にたいして動作する場合、変数@code{delete-trailing-lines}が非@code{nil}ならバッファーの終端行の末尾の行も削除する。"

#. type: cindex
#: text.texi.orig:816
#, no-wrap
msgid "kill ring"
msgstr "kill ring"

#. type: Plain text
#: text.texi.orig:824
msgid "@dfn{Kill functions} delete text like the deletion functions, but save it so that the user can reinsert it by @dfn{yanking}.  Most of these functions have @samp{kill-} in their name.  By contrast, the functions whose names start with @samp{delete-} normally do not save text for yanking (though they can still be undone); these are ``deletion'' functions."
msgstr "@dfn{kill関数(kill functions)}は削除関数のようにテキストを削除しますが、ユーザーが@dfn{yank}により再挿入できるようにそれらを保存する点が異なります。これらの関数のほとんどは、@samp{kill-}という名前をもちます。対照的に名前が@samp{delete-}で始まる関数は、(たとえ削除をアンドゥできるとしても)通常はyank用にテキストを保存しません。それらは``削除(deletion)''関数です。"

#. type: Plain text
#: text.texi.orig:832
msgid "Most of the kill commands are primarily for interactive use, and are not described here.  What we do describe are the functions provided for use in writing such commands.  You can use these functions to write commands for killing text.  When you need to delete text for internal purposes within a Lisp function, you should normally use deletion functions, so as not to disturb the kill ring contents.  @xref{Deletion}."
msgstr "ほとんどのkillコマンドは、主にインタラクティブな使用を意図しており、ここでは説明しません。ここで説明するのは、そのようなコマンドの記述に使用されるために提供される関数です。テキストをkillするために、これらのカを使用できます。Lisp関数の内部的な目的のためにテキストの削除を要するときは、killリング内のコンテンツに影響を与えないように、通常は削除関数を使用するべきでしょう。@ref{Deletion}を参照してください。"

#. type: Plain text
#: text.texi.orig:840
msgid "Killed text is saved for later yanking in the @dfn{kill ring}.  This is a list that holds a number of recent kills, not just the last text kill.  We call this a ``ring'' because yanking treats it as having elements in a cyclic order.  The list is kept in the variable @code{kill-ring}, and can be operated on with the usual functions for lists; there are also specialized functions, described in this section, that treat it as a ring."
msgstr "killされたテキストは、後のyank用に@dfn{killリング(kill ring)}内に保存されます。これは、直前のkillだけでなく直近のkillのいくつかを保持するリストです。yankがそれをサイクル順に要素をもつリストとして扱うので、これを``リング(ring)''と称しています。このリストは変数@code{kill-ring}に保持されており、リスト用の通常関数で操作可能です。このセクションで説明する、これをリングとして扱うために特化された関数も存在します。"

#. type: Plain text
#: text.texi.orig:849
msgid "Some people think this use of the word ``kill'' is unfortunate, since it refers to operations that specifically @emph{do not} destroy the entities ``killed''.  This is in sharp contrast to ordinary life, in which death is permanent and ``killed'' entities do not come back to life.  Therefore, other metaphors have been proposed.  For example, the term ``cut ring'' makes sense to people who, in pre-computer days, used scissors and paste to cut up and rearrange manuscripts.  However, it would be difficult to change the terminology now."
msgstr "特に``kill''された実体が@emph{破壊}されてしまわないような操作を参照するという理由から、``kill''という単語の使用が不適切だと考える人もいます。これは通常の生活において、死は永遠であり``kill''された実体は生活に戻ることはないことと対照的です。したがって、他の比喩表現も提案されてきました。たとえば、``cutリング(cut ring)''という用語は、コンピューター誕生前に原稿を再配置するためにハサミで切り取って貼り付けていたような人に意味があるでしょう。しかし、今となってはこの用語を変更するのは困難です。"

#. type: subsection
#: text.texi.orig:857 text.texi.orig:859 text.texi.orig:860
#, no-wrap
msgid "Kill Ring Concepts"
msgstr "Kill Ring Concepts"

#. type: menuentry
#: text.texi.orig:857
msgid "What text looks like in the kill ring."
msgstr "killリング内のテキストがどのように見えるか。"

#. type: node
#: text.texi.orig:857 text.texi.orig:885
#, no-wrap
msgid "Kill Functions"
msgstr "Kill Functions"

#. type: menuentry
#: text.texi.orig:857
msgid "Functions that kill text."
msgstr "テキストをkillする関数。"

#. type: subsection
#: text.texi.orig:857 text.texi.orig:930 text.texi.orig:931
#, no-wrap
msgid "Yanking"
msgstr "Yanking"

#. type: menuentry
#: text.texi.orig:857
msgid "How yanking is done."
msgstr "yankが行われる方法。"

#. type: node
#: text.texi.orig:857 text.texi.orig:1019
#, no-wrap
msgid "Yank Commands"
msgstr "Yank Commands"

#. type: menuentry
#: text.texi.orig:857
msgid "Commands that access the kill ring."
msgstr "killリングにアクセスするコマンド。"

#. type: subsection
#: text.texi.orig:857 text.texi.orig:1088 text.texi.orig:1089
#, no-wrap
msgid "Low-Level Kill Ring"
msgstr "Low-Level Kill Ring"

#. type: menuentry
#: text.texi.orig:857
msgid "Functions and variables for kill ring access."
msgstr "killリングアクセス用の関数および変数。"

#. type: node
#: text.texi.orig:857 text.texi.orig:1174
#, no-wrap
msgid "Internals of Kill Ring"
msgstr "Internals of Kill Ring"

#. type: menuentry
#: text.texi.orig:857
msgid "Variables that hold kill ring data."
msgstr "killリングのデータを保持する変数。"

#. type: Plain text
#: text.texi.orig:864
msgid "The kill ring records killed text as strings in a list, most recent first.  A short kill ring, for example, might look like this:"
msgstr "killリングは、リスト内でもっとも最近にkillされたテキストが先頭になるように、killされたテキストを記録します。たとえば、短いkillリングは以下のようになるでしょう:"

#. type: example
#: text.texi.orig:867
#, no-wrap
msgid "(\"some text\" \"a different piece of text\" \"even older text\")\n"
msgstr "(\"some text\" \"a different piece of text\" \"even older text\")\n"

#. type: Plain text
#: text.texi.orig:872
msgid "When the list reaches @code{kill-ring-max} entries in length, adding a new entry automatically deletes the last entry."
msgstr "このリストのエントリー長が@code{kill-ring-max}に達すると、新たなエントリー追加により最後のエントリーが自動的に削除されます。"

#. type: Plain text
#: text.texi.orig:878
msgid "When kill commands are interwoven with other commands, each kill command makes a new entry in the kill ring.  Multiple kill commands in succession build up a single kill ring entry, which would be yanked as a unit; the second and subsequent consecutive kill commands add text to the entry made by the first one."
msgstr "killコマンドが他のコマンドと混ざり合っているときは、各killコマンドはkillリング内に新たなエントリーを作成します。連続する複数のkillコマンドは単一のkillリングエントリーを構成します。これは1つの単位としてyankされます。2つ目以降の連続するkillコマンドは、最初のkillにより作成されたエントリーにテキストを追加します。"

#. type: Plain text
#: text.texi.orig:884
msgid "For yanking, one entry in the kill ring is designated the ``front'' of the ring.  Some yank commands ``rotate'' the ring by designating a different element as the ``front''.  But this virtual rotation doesn't change the list itself---the most recent entry always comes first in the list."
msgstr "yankにたいしては、killリング内のただ1つのエントリーが、そのリングの``先頭''のエントリーとなります。いくつかのyankコマンドは、異なる要素を``先頭''に指定することにより、リングを``回転(rotate)''させます。しかしこの仮想的回転はリスト自身を変更しません。もっとも最近のエントリーが、常にリスト内の最初に配置されます。"

#. type: subsection
#: text.texi.orig:886
#, no-wrap
msgid "Functions for Killing"
msgstr "Functions for Killing"

#. type: Plain text
#: text.texi.orig:895
msgid "@code{kill-region} is the usual subroutine for killing text.  Any command that calls this function is a ``kill command'' (and should probably have @samp{kill} in its name).  @code{kill-region} puts the newly killed text in a new element at the beginning of the kill ring or adds it to the most recent element.  It determines automatically (using @code{last-command}) whether the previous command was a kill command, and if so appends the killed text to the most recent entry."
msgstr "@code{kill-region}は、テキストkill用の通常サブルーチンです。この関数を呼び出すすべてのコマンドは、``killコマンド''です(そして恐らくは名前に@samp{kill}が含まれる)。@code{kill-region}は新たにkillされたテキストをkillリング内の最初の要素内に置くか、それをもっとも最近の要素に追加します。これは、前のコマンドがkillコマンドか否かを、(@code{last-command}を使用して)自動的に判別し、もしkillコマンドならkillされたテキストをもっとも最近のエントリーに追加します。"

#. type: deffn
#: text.texi.orig:896
#, no-wrap
msgid "Command kill-region start end"
msgstr "Command kill-region start end"

#. type: deffn
#: text.texi.orig:900
msgid "This function kills the text in the region defined by @var{start} and @var{end}.  The text is deleted but saved in the kill ring, along with its text properties.  The value is always @code{nil}."
msgstr "この関数は、@var{start}と@var{end}から定義されるリージョン内のテキストをkillする。そのテキストは削除されるが、そのテキストプロパティと共にkillリングに保存される。値は常に@code{nil}。"

#. type: deffn
#: text.texi.orig:903
msgid "In an interactive call, @var{start} and @var{end} are point and the mark."
msgstr "インタラクティブな呼び出しでは、@var{start}と@var{end}は、ポイントとマークになる。"

#. type: deffn
#: text.texi.orig:908
msgid "If the buffer or text is read-only, @code{kill-region} modifies the kill ring just the same, then signals an error without modifying the buffer.  This is convenient because it lets the user use a series of kill commands to copy text from a read-only buffer into the kill ring."
msgstr "バッファーまたはテキストが読み取り専用の場合、@code{kill-region}は同じようにkillリングを変更後、バッファーを変更せずにエラーをシグナルする。これは、ユーザーが一連のkillコマンドで、読み取り専用バッファーからkillリングにテキストをコピーするのに有用である。"

#. type: defopt
#: text.texi.orig:910
#, no-wrap
msgid "kill-read-only-ok"
msgstr "kill-read-only-ok"

#. type: defopt
#: text.texi.orig:914
msgid "If this option is non-@code{nil}, @code{kill-region} does not signal an error if the buffer or text is read-only.  Instead, it simply returns, updating the kill ring but not changing the buffer."
msgstr "このオプションが非@code{nil}なら、バッファーやテキストが読み取り専用でも、@code{kill-region}はエラーをシグナルしない。かわりに、バッファーを変更せずにkillリングを更新して、単にリターンする。"

#. type: deffn
#: text.texi.orig:916
#, no-wrap
msgid "Command copy-region-as-kill start end"
msgstr "Command copy-region-as-kill start end"

#. type: deffn
#: text.texi.orig:920
msgid "This command saves the region defined by @var{start} and @var{end} on the kill ring (including text properties), but does not delete the text from the buffer.  It returns @code{nil}."
msgstr "このコマンドは、killリングに@var{start}と@var{end}で定義されるリージョン(テキストプロパティを含む)を保存するが、バッファーからテキストを削除しない。リターン値は@code{nil}。"

#. type: deffn
#: text.texi.orig:923
msgid "The command does not set @code{this-command} to @code{kill-region}, so a subsequent kill command does not append to the same kill ring entry."
msgstr "このコマンドは、後続のkillコマンドが同一のkillリングエントリーに追加しないよう、@code{this-command}に@code{kill-region}をセットしない。"

#. type: deffn
#: text.texi.orig:928
msgid "In Lisp programs, it is better to use @code{kill-new} or @code{kill-append} instead of this command.  @xref{Low-Level Kill Ring}."
msgstr "Lispプログラム内では、このコマンドより@code{kill-new}や@code{kill-append}を使うほうがよい。@ref{Low-Level Kill Ring}を参照のこと。"

#. type: Plain text
#: text.texi.orig:937
msgid "Yanking means inserting text from the kill ring, but it does not insert the text blindly.  The @code{yank} command, and related commands, use @code{insert-for-yank} to perform special processing on the text before it is inserted."
msgstr "yankとは、killリングからテキストを挿入するものの、単なる挿入ではないことを意味します。@code{yank}および関連するコマンドは、テキスト挿入前に特別な処理を施すために、@code{insert-for-yank}を使用します。"

#. type: defun
#: text.texi.orig:938
#, no-wrap
msgid "insert-for-yank string"
msgstr "insert-for-yank string"

#. type: defun
#: text.texi.orig:944
msgid "This function works like @code{insert}, except that it processes the text in @var{string} according to the @code{yank-handler} text property, as well as the variables @code{yank-handled-properties} and @code{yank-excluded-properties} (see below), before inserting the result into the current buffer."
msgstr "この関数は@code{insert}と同様に機能するが、結果をカレントバッファーに挿入する前に、テキストプロパティ@code{yank-handler}、同様に変数@code{yank-handled-properties}および@code{yank-excluded-properties}に応じて@var{string}内のテキストを処理する点が異なる。"

#. type: defun
#: text.texi.orig:946
#, no-wrap
msgid "insert-buffer-substring-as-yank buf &optional start end"
msgstr "insert-buffer-substring-as-yank buf &optional start end"

#. type: defun
#: text.texi.orig:952
msgid "This function resembles @code{insert-buffer-substring}, except that it processes the text according to @code{yank-handled-properties} and @code{yank-excluded-properties}.  (It does not handle the @code{yank-handler} property, which does not normally occur in buffer text anyway.)"
msgstr "この関数は@code{insert-buffer-substring}と似ているが、@code{yank-handled-properties}および@code{yank-excluded-properties}に応じてテキストを処理する点が異なる(これは@code{yank-handler}プロパティを処理しないが、いずれにせよバッファー内のテキストでは通常は発生しない)。"

#. type: Plain text
#: text.texi.orig:962
msgid "If you put a @code{yank-handler} text property on all or part of a string, that alters how @code{insert-for-yank} inserts the string.  If different parts of the string have different @code{yank-handler} values (comparison being done with @code{eq}), each substring is handled separately.  The property value must be a list of one to four elements, with the following format (where elements after the first may be omitted):"
msgstr "文字列の一部またはすべてにテキストプロパティ@code{yank-handler}をputした場合、@code{insert-for-yank}が文字列を挿入する方法が変更されます。文字列の別の箇所が異なる@code{yank-handler}の値をもつ場合(比較は@code{eq}で行われる)、部分文字列はそれぞれ個別に処理されます。プロパティ値は以下の形式からなる1から4要素のリストでなければなりません(2番目以降の要素は省略されるかもしれない):"

#. type: example
#: text.texi.orig:965
#, no-wrap
msgid "(@var{function} @var{param} @var{noexclude} @var{undo})\n"
msgstr "(@var{function} @var{param} @var{noexclude} @var{undo})\n"

#. type: Plain text
#: text.texi.orig:968
msgid "Here is what the elements do:"
msgstr "以下は、これらの要素が何を行うかです:"

#. type: item
#: text.texi.orig:970
#, no-wrap
msgid "function"
msgstr "function"

#. type: table
#: text.texi.orig:974
msgid "When @var{function} is non-@code{nil}, it is called instead of @code{insert} to insert the string, with one argument---the string to insert."
msgstr "@var{function}が非@code{nil}なら、@code{insert}のかわりに文字列を挿入するために、挿入する文字列を単一の引数として、その関数が呼び出される。"

#. type: item
#: text.texi.orig:975
#, no-wrap
msgid "param"
msgstr "param"

#. type: table
#: text.texi.orig:981
msgid "If @var{param} is present and non-@code{nil}, it replaces @var{string} (or the substring of @var{string} being processed) as the object passed to @var{function} (or @code{insert}).  For example, if @var{function} is @code{yank-rectangle}, @var{param} should be a list of strings to insert as a rectangle."
msgstr "非@code{nil}の@var{param}が与えられた場合、それは@var{string}(または処理される@var{string}の部分文字列)を置き換えるオブジェクトとして@var{function}(または@code{insert})に渡される。たとえば@var{function}が@code{yank-rectangle}なら、@var{param}は矩形(rectangle)として挿入されるべき文字列のリストになる。"

#. type: item
#: text.texi.orig:982
#, no-wrap
msgid "noexclude"
msgstr "noexclude"

#. type: table
#: text.texi.orig:986
msgid "If @var{noexclude} is present and non-@code{nil}, that disables the normal action of @code{yank-handled-properties} and @code{yank-excluded-properties} on the inserted string."
msgstr "非@code{nil}の@var{noexclude}が与えられた場合は、挿入される文字列にたいする@code{yank-handled-properties}および@code{yank-excluded-properties}の通常の動作を無効にする。"

#. type: item
#: text.texi.orig:987
#, no-wrap
msgid "undo"
msgstr "undo"

#. type: table
#: text.texi.orig:993
msgid "If @var{undo} is present and non-@code{nil}, it is a function that will be called by @code{yank-pop} to undo the insertion of the current object.  It is called with two arguments, the start and end of the current region.  @var{function} can set @code{yank-undo-function} to override the @var{undo} value."
msgstr "非@code{nil}の@var{undo}が与えられた場合、それはカレントオブジェクトの挿入をアンドゥするために@code{yank-pop}が呼び出す関数である。この関数は、カレントリージョンのstartとendの、2つの引数で呼び出される。@var{function}は@code{yank-undo-function}をセットすることにより、@var{undo}の値をオーバーライドできる。"

#. type: cindex
#: text.texi.orig:995
#, no-wrap
msgid "yanking and text properties"
msgstr "yanking and text properties"

#. type: defopt
#: text.texi.orig:996
#, no-wrap
msgid "yank-handled-properties"
msgstr "yank-handled-properties"

#. type: defopt
#: text.texi.orig:1001
msgid "This variable specifies special text property handling conditions for yanked text.  It takes effect after the text has been inserted (either normally, or via the @code{yank-handler} property), and prior to @code{yank-excluded-properties} taking effect."
msgstr "この変数は、yankされるテキストの状態を処理するスペシャルテキストプロパティを指定する。これは(通常の方法、または@code{yank-handler}を通じた)テキスト挿入後、@code{yank-excluded-properties}が効力をもつ前に効果を発揮する。"

#. type: defopt
#: text.texi.orig:1008
msgid "The value should be an alist of elements @code{(@var{prop} . @var{fun})}.  Each alist element is handled in order.  The inserted text is scanned for stretches of text having text properties @code{eq} to @var{prop}; for each such stretch, @var{fun} is called with three arguments: the value of the property, and the start and end positions of the text."
msgstr "値は、要素が@code{(@var{prop} . @var{fun})}であるようなalistであること。alistの各要素は、順番に処理される。挿入されるテキストはテキスト範囲にたいして、テキストプロパティが@var{prop}と@code{eq}なものがスキャンされる。そのような範囲には、そのプロパティの値、そのテキストの開始と終了の位置という、3つの引数により@var{fun}が呼び出される。"

#. type: defopt
#: text.texi.orig:1010
#, no-wrap
msgid "yank-excluded-properties"
msgstr "yank-excluded-properties"

#. type: defopt
#: text.texi.orig:1016
msgid "The value of this variable is the list of properties to remove from inserted text.  Its default value contains properties that might lead to annoying results, such as causing the text to respond to the mouse or specifying key bindings.  It takes effect after @code{yank-handled-properties}."
msgstr "この変数の値は、挿入されるテキストから削除するための、プロパティのリストである。デフォルト値には、マウスに応答したりキーバインディングの指定を引き起こすテキストのような、煩わしい結果をもたらすかもしれないプロパティが含まれる。これは、@code{yank-handled-properties}の後に効果を発揮する。"

#. type: subsection
#: text.texi.orig:1020
#, no-wrap
msgid "Functions for Yanking"
msgstr "Functions for Yanking"

#. type: Plain text
#: text.texi.orig:1027
msgid "This section describes higher-level commands for yanking, which are intended primarily for the user but useful also in Lisp programs.  Both @code{yank} and @code{yank-pop} honor the @code{yank-excluded-properties} variable and @code{yank-handler} text property (@pxref{Yanking})."
msgstr "このセクションでは、yank用の高レベルなコマンドを説明します。これらのコマンドは主にユーザー用に意図されたものですが、Lispプログラム内での使用にたいしても有用です。@code{yank}および@code{yank-pop}はどちらも、変数@code{yank-excluded-properties}およびテキストプロパティ@code{yank-handler}にしたがいます(@ref{Yanking}を参照)。"

#. type: deffn
#: text.texi.orig:1028
#, no-wrap
msgid "Command yank &optional arg"
msgstr "Command yank &optional arg"

#. type: cindex
#: text.texi.orig:1029
#, no-wrap
msgid "inserting killed text"
msgstr "inserting killed text"

#. type: deffn
#: text.texi.orig:1033
msgid "This command inserts before point the text at the front of the kill ring.  It sets the mark at the beginning of that text, using @code{push-mark} (@pxref{The Mark}), and puts point at the end."
msgstr "このコマンドは、killリングの先頭にあるテキストを、ポイントの前に挿入する。これは@code{push-mark}(@ref{The Mark}を参照)を使用して、そのテキストの先頭にマークをセットする。"

#. type: deffn
#: text.texi.orig:1038
msgid "If @var{arg} is a non-@code{nil} list (which occurs interactively when the user types @kbd{C-u} with no digits), then @code{yank} inserts the text as described above, but puts point before the yanked text and sets the mark after it."
msgstr "@var{arg}が非@code{nil}のリスト(これはユーザーがインタラクティブに数字を指定せずに@kbd{C-u}をタイプ時に発生する)なら、@code{yank}は上述のようにテキストを挿入するが、ポイントはyankされたテキストの前、マークはyankされたテキストの後に置かれる。"

#. type: deffn
#: text.texi.orig:1043
msgid "If @var{arg} is a number, then @code{yank} inserts the @var{arg}th most recently killed text---the @var{arg}th element of the kill ring list, counted cyclically from the front, which is considered the first element for this purpose."
msgstr "@var{arg}が数字なら、@code{yank}は@var{arg}番目に最近killされたテキスト、すなわちkillリングリストの@var{arg}番目の要素を挿入する。この順番は、コマンドの目的にたいして1番目の要素としてみなされる、リスト先頭の要素から巡回的に数えられる。"

#. type: deffn
#: text.texi.orig:1048
msgid "@code{yank} does not alter the contents of the kill ring, unless it used text provided by another program, in which case it pushes that text onto the kill ring.  However if @var{arg} is an integer different from one, it rotates the kill ring to place the yanked string at the front."
msgstr "@code{yank}は、それが他のプログラムから提供されるテキストを使用しないかぎり(使用する場合はそのテキストをkillリングにpushする)、killリングのコンテンツを変更しない。しかし、@var{arg}が非1の整数の場合は、killリングを転回(rotate)してyankされるテキストをリング先頭に置く。"

#. type: deffn
#: text.texi.orig:1050
msgid "@code{yank} returns @code{nil}."
msgstr "@code{yank}は@code{nil}をリターンする。"

#. type: deffn
#: text.texi.orig:1052
#, no-wrap
msgid "Command yank-pop &optional arg"
msgstr "Command yank-pop &optional arg"

#. type: deffn
#: text.texi.orig:1055
msgid "This command replaces the just-yanked entry from the kill ring with a different entry from the kill ring."
msgstr "このコマンドは、killリング上の正にyankされたばかりのエントリーを、killリングの別エントリーで置き換える。"

#. type: deffn
#: text.texi.orig:1063
msgid "This is allowed only immediately after a @code{yank} or another @code{yank-pop}.  At such a time, the region contains text that was just inserted by yanking.  @code{yank-pop} deletes that text and inserts in its place a different piece of killed text.  It does not add the deleted text to the kill ring, since it is already in the kill ring somewhere.  It does however rotate the kill ring to place the newly yanked string at the front."
msgstr "このコマンドは、@code{yank}または別の@code{yank-pop}の直後のみ許される。そのような際、そのリージョンにはyankにより正に挿入されたテキストが含まれる。@code{yank-pop}はそのテキストを削除して、killされた別のテキスト片をその位置に挿入する。そのテキスト片はすでにkillリング内のどこか別の箇所にあるので、これは削除されたテキストをkillリングに追加しない。しかし、新たにyankされたテキストが先頭になるよう、killリングの転回は行う。"

#. type: deffn
#: text.texi.orig:1068
msgid "If @var{arg} is @code{nil}, then the replacement text is the previous element of the kill ring.  If @var{arg} is numeric, the replacement is the @var{arg}th previous kill.  If @var{arg} is negative, a more recent kill is the replacement."
msgstr "@var{arg}が@code{nil}なら、置換テキストはkillリングの1つ前の要素である。@var{arg}が数字なら、置換テキストはkillリングの@var{arg}個前の要素である。@var{arg}が負の場合は、より最近のkillが置換される。"

#. type: deffn
#: text.texi.orig:1072
msgid "The sequence of kills in the kill ring wraps around, so that after the oldest one comes the newest one, and before the newest one goes the oldest."
msgstr "killリング内のkillされたエントリーの順序はラップする。すなわちもっとも古いkillの次にもっとも新しいkill、もっとも新しいkillの前はもっとも古いkillとなる。"

#. type: deffn
#: text.texi.orig:1074
msgid "The return value is always @code{nil}."
msgstr "リターン値は常に@code{nil}である。"

#. type: defvar
#: text.texi.orig:1076
#, no-wrap
msgid "yank-undo-function"
msgstr "yank-undo-function"

#. type: defvar
#: text.texi.orig:1082
msgid "If this variable is non-@code{nil}, the function @code{yank-pop} uses its value instead of @code{delete-region} to delete the text inserted by the previous @code{yank} or @code{yank-pop} command.  The value must be a function of two arguments, the start and end of the current region."
msgstr "この変数が非@code{nil}の場合、関数@code{yank-pop}は前の@code{yank}または@code{yank-pop}により挿入されたテキストを削除するために、@code{delete-region}のかわりにこの変数の値を使用する。値は、カレントリージョンの開始と終了という、2つの引数をとる関数でなければならない。"

#. type: defvar
#: text.texi.orig:1086
msgid "The function @code{insert-for-yank} automatically sets this variable according to the @var{undo} element of the @code{yank-handler} text property, if there is one."
msgstr "関数@code{insert-for-yank}は、テキストプロパティ@code{yank-handler}の要素@var{undo}に対応して、この変数を自動的にセットする。"

#. type: Plain text
#: text.texi.orig:1095
msgid "These functions and variables provide access to the kill ring at a lower level, but are still convenient for use in Lisp programs, because they take care of interaction with window system selections (@pxref{Window System Selections})."
msgstr "以下の関数および変数は、killリングにたいして低レベルなアクセスを提供しますが、それらはウィンドウシステムの選択(@ref{Window System Selections}を参照)との相互作用にも留意するので、Lispプログラム内での使用に関しても依然として有用です。"

#. type: defun
#: text.texi.orig:1096
#, no-wrap
msgid "current-kill n &optional do-not-move"
msgstr "current-kill n &optional do-not-move"

#. type: defun
#: text.texi.orig:1100
msgid "The function @code{current-kill} rotates the yanking pointer, which designates the ``front'' of the kill ring, by @var{n} places (from newer kills to older ones), and returns the text at that place in the ring."
msgstr "関数@code{current-kill}は、killリングの``先頭''を指すyankポインターを、(新しいkillから古いkillに)@var{n}個転回して、リング内のその箇所のテキストをリターンする。"

#. type: defun
#: text.texi.orig:1104
msgid "If the optional second argument @var{do-not-move} is non-@code{nil}, then @code{current-kill} doesn't alter the yanking pointer; it just returns the @var{n}th kill, counting from the current yanking pointer."
msgstr "オプションの第2引数@var{do-not-move}が非@code{nil}なら、@code{current-kill}はyankポインターを変更しない。カレントyankポインターから、@var{n}個目のkillを単にリターンする。"

#. type: defun
#: text.texi.orig:1117
msgid "If @var{n} is zero, indicating a request for the latest kill, @code{current-kill} calls the value of @code{interprogram-paste-function} (documented below) before consulting the kill ring.  If that value is a function and calling it returns a string or a list of several string, @code{current-kill} pushes the strings onto the kill ring and returns the first string.  It also sets the yanking pointer to point to the kill-ring entry of the first string returned by @code{interprogram-paste-function}, regardless of the value of @var{do-not-move}.  Otherwise, @code{current-kill} does not treat a zero value for @var{n} specially: it returns the entry pointed at by the yanking pointer and does not move the yanking pointer."
msgstr "@var{n}が0の場合、それは最新のkillの要求を意味しており、@code{current-kill}はkillリング照会前に@code{interprogram-paste-function}(以下参照)の値を呼び出す。その値が関数で、かつそれが文字列または複数の文字列からなるリストをリターンした場合、@code{current-kill}はその文字列をkillリング上にpushして、最初の文字列をリターンする。これは@var{do-not-move}の値に関わらず、@code{interprogram-paste-function}がリターンする最初の文字列のkillリングエントリーを指すように、yankポインターのセットも行う。それ以外では、@code{current-kill}は@var{n}にたいする0値を特別に扱うことはなく、yankポインターが指すエントリーをリターンし、yankポインターの移動は行わない。"

#. type: defun
#: text.texi.orig:1119
#, no-wrap
msgid "kill-new string &optional replace"
msgstr "kill-new string &optional replace"

#. type: defun
#: text.texi.orig:1124
msgid "This function pushes the text @var{string} onto the kill ring and makes the yanking pointer point to it.  It discards the oldest entry if appropriate.  It also invokes the value of @code{interprogram-cut-function} (see below)."
msgstr "この関数は、テキスト@var{string}をkillリング上にpushして、yankポインターがそれを指すようにセットする。それが適切なら、もっとも古いエントリーを破棄する。@code{interprogram-cut-function}(以下参照)の呼び出しも行う。"

#. type: defun
#: text.texi.orig:1128
msgid "If @var{replace} is non-@code{nil}, then @code{kill-new} replaces the first element of the kill ring with @var{string}, rather than pushing @var{string} onto the kill ring."
msgstr "@var{replace}が非@code{nil}なら、@code{kill-new}はkillリング上に@var{string}をpushせずに、killリングの1つ目の要素を@var{string}に置き換える。"

#. type: defun
#: text.texi.orig:1130
#, no-wrap
msgid "kill-append string before-p"
msgstr "kill-append string before-p"

#. type: defun
#: text.texi.orig:1137
msgid "This function appends the text @var{string} to the first entry in the kill ring and makes the yanking pointer point to the combined entry.  Normally @var{string} goes at the end of the entry, but if @var{before-p} is non-@code{nil}, it goes at the beginning.  This function also invokes the value of @code{interprogram-cut-function} (see below)."
msgstr "この関数は、killリング内の最初のエントリーにテキスト@var{string}を追加して、その結合されたエントリーを指すようにyankポインターをセットする。通常はそのエントリーの終端に@var{string}が追加されるが、@var{before-p}が非@code{nil}ならエントリーの先頭に追加される。この関数は、@code{interprogram-cut-function}(以下参照)の呼び出しも行う。"

#. type: defvar
#: text.texi.orig:1139
#, no-wrap
msgid "interprogram-paste-function"
msgstr "interprogram-paste-function"

#. type: defvar
#: text.texi.orig:1143
msgid "This variable provides a way of transferring killed text from other programs, when you are using a window system.  Its value should be @code{nil} or a function of no arguments."
msgstr "この変数は、他のプログラムからkillリングへkillされたテキストを転送する方法を提供する。値は@code{nil}、または引数のない関数であること。"

#. type: defvar
#: text.texi.orig:1148
msgid "If the value is a function, @code{current-kill} calls it to get the ``most recent kill''.  If the function returns a non-@code{nil} value, then that value is used as the ``most recent kill''.  If it returns @code{nil}, then the front of the kill ring is used."
msgstr "値が関数なら、``もっとも最近のkill''を取得するために、@code{current-kill}はそれを呼び出す。その関数が非@code{nil}値をリターンした場合は、その値が``もっとも最近のkill''として使用される。@code{nil}をリターンした場合は、killリングの先頭が使用される。"

#. type: defvar
#: text.texi.orig:1154
msgid "To facilitate support for window systems that support multiple selections, this function may also return a list of strings.  In that case, the first string is used as the ``most recent kill'', and all the other strings are pushed onto the kill ring, for easy access by @code{yank-pop}."
msgstr "複数選択をサポートするウィンドウシステムのサポートを容易にするために、この関数は文字列のリストもリターンするかもしれない。その場合、1つ目の文字列が``もっとも最近のkill''として使用され、その他の文字列はすべて@code{yank-pop}によるアクセスを容易にするために、killリング上にpushされる。"

#. type: defvar
#: text.texi.orig:1160
msgid "The normal use of this function is to get the window system's clipboard as the most recent kill, even if the selection belongs to another application.  @xref{Window System Selections}.  However, if the clipboard contents come from the current Emacs session, this function should return @code{nil}."
msgstr "この関数の通常の用途は、たとえそれが他アプリケーションに属する選択であっても、もっとも最近のkillとして、ウィンドウシステムのクリップボードからそれを取得することである。しかし、クリップボードのコンテンツがカレントEmacsセッション由来なら、この関数は@code{nil}をリターンする筈である。"

#. type: defvar
#: text.texi.orig:1162
#, no-wrap
msgid "interprogram-cut-function"
msgstr "interprogram-cut-function"

#. type: defvar
#: text.texi.orig:1166
msgid "This variable provides a way of communicating killed text to other programs, when you are using a window system.  Its value should be @code{nil} or a function of one required argument."
msgstr "この変数は、ウィンドウシステム使用時に、他のプログラムにkillされたテキストを転送する方法を提供する。値は@code{nil}、または1つの引数を要求する関数であること。"

#. type: defvar
#: text.texi.orig:1169
msgid "If the value is a function, @code{kill-new} and @code{kill-append} call it with the new first element of the kill ring as the argument."
msgstr "値が関数なら、@code{kill-new}および@code{kill-append}は、killリングの新たな1つ目要素を引数として、それを呼び出す。"

#. type: defvar
#: text.texi.orig:1172
msgid "The normal use of this function is to put newly killed text in the window system's clipboard.  @xref{Window System Selections}."
msgstr "この関数の通常の用途は、新たにkillされたテキストを、ウィンドウシステムのクリップボードに配すことである。@ref{Window System Selections}を参照のこと。"

#. type: subsection
#: text.texi.orig:1175
#, no-wrap
msgid "Internals of the Kill Ring"
msgstr "Internals of the Kill Ring"

#. type: Plain text
#: text.texi.orig:1180
msgid "The variable @code{kill-ring} holds the kill ring contents, in the form of a list of strings.  The most recent kill is always at the front of the list."
msgstr "変数@code{kill-ring}は、文字列リスト形式でkillリングのコンテンツを保持します。もっとも最近のkillが、常にこのリストの先頭になります。"

#. type: Plain text
#: text.texi.orig:1189
msgid "The @code{kill-ring-yank-pointer} variable points to a link in the kill ring list, whose @sc{car} is the text to yank next.  We say it identifies the ``front'' of the ring.  Moving @code{kill-ring-yank-pointer} to a different link is called @dfn{rotating the kill ring}.  We call the kill ring a ``ring'' because the functions that move the yank pointer wrap around from the end of the list to the beginning, or vice-versa.  Rotation of the kill ring is virtual; it does not change the value of @code{kill-ring}."
msgstr "変数@code{kill-ring-yank-pointer}は、@sc{car}が次のyankのテキストであるような、killリングリスト内のリンクをpointします。これを、リングの``先頭''を識別すると言います。そして、@code{kill-ring-yank-pointer}を異なるリンクに移動することを、@dfn{killリングの転回(rotating the kill ring)}と呼びます。yankポインターを移動する関数は、yankポインターをリスト終端から先頭、またはその逆へラップするので、、killリングを``ring''と呼びます。killリングの転回は仮想的なものであり、@code{kill-ring}の値は変更しません。"

#. type: Plain text
#: text.texi.orig:1195
msgid "Both @code{kill-ring} and @code{kill-ring-yank-pointer} are Lisp variables whose values are normally lists.  The word ``pointer'' in the name of the @code{kill-ring-yank-pointer} indicates that the variable's purpose is to identify one element of the list for use by the next yank command."
msgstr "@code{kill-ring}および@code{kill-ring-yank-pointer}はどちらも、通常は値がリストであるようなLisp変数です。@code{kill-ring-yank-pointer}の名前にある単語``pointer''は、その変数の目的が次回yankコマンドにより使用されるリストの最初の要素を指すことであるのを示します。"

#. type: Plain text
#: text.texi.orig:1201
msgid "The value of @code{kill-ring-yank-pointer} is always @code{eq} to one of the links in the kill ring list.  The element it identifies is the @sc{car} of that link.  Kill commands, which change the kill ring, also set this variable to the value of @code{kill-ring}.  The effect is to rotate the ring so that the newly killed text is at the front."
msgstr "@code{kill-ring-yank-pointer}の値は常にkillリングリスト内の1つのリンクと@code{eq}です。それが指す要素は、そのリンクの@sc{car}です。killリングを変更するkillコマンドも、この変数に@code{kill-ring}の値をセットします。その効果は、新たにkillされた先頭になるように、リングを転回することです。"

#. type: Plain text
#: text.texi.orig:1205
msgid "Here is a diagram that shows the variable @code{kill-ring-yank-pointer} pointing to the second entry in the kill ring @code{(\"some text\" \"a different piece of text\" \"yet older text\")}."
msgstr "以下は、変数@code{kill-ring-yank-pointer}が、killリング@code{(\"some text\" \"a different piece of text\" \"yet older text\")}内の2番目のエントリーを指すことを表すダイアグラムです。"

#. type: group
#: text.texi.orig:1221
#, no-wrap
msgid ""
"kill-ring                  ---- kill-ring-yank-pointer\n"
"  |                       |\n"
"  |                       v\n"
"  |     --- ---          --- ---      --- ---\n"
"   --> |   |   |------> |   |   |--> |   |   |--> nil\n"
"        --- ---          --- ---      --- ---\n"
"         |                |            |\n"
"         |                |            |\n"
"         |                |             -->\"yet older text\"\n"
"         |                |\n"
"         |                 --> \"a different piece of text\"\n"
"         |\n"
"          --> \"some text\"\n"
msgstr ""
"kill-ring                  ---- kill-ring-yank-pointer\n"
"  |                       |\n"
"  |                       v\n"
"  |     --- ---          --- ---      --- ---\n"
"   --> |   |   |------> |   |   |--> |   |   |--> nil\n"
"        --- ---          --- ---      --- ---\n"
"         |                |            |\n"
"         |                |            |\n"
"         |                |             -->\"yet older text\"\n"
"         |                |\n"
"         |                 --> \"a different piece of text\"\n"
"         |\n"
"          --> \"some text\"\n"

#. type: Plain text
#: text.texi.orig:1227
msgid "This state of affairs might occur after @kbd{C-y} (@code{yank})  immediately followed by @kbd{M-y} (@code{yank-pop})."
msgstr "この状態は、@kbd{C-y}(@code{yank})の直後に@kbd{M-y}(@code{yank-pop})を行うことにより発生し得ます。"

#. type: defvar
#: text.texi.orig:1228
#, no-wrap
msgid "kill-ring"
msgstr "kill-ring"

#. type: defvar
#: text.texi.orig:1231
msgid "This variable holds the list of killed text sequences, most recently killed first."
msgstr "この変数は、もっとも最近にkillされたテキストが先頭になるように、killされたテキストのシーケンスのリストを保持する。"

#. type: defvar
#: text.texi.orig:1233
#, no-wrap
msgid "kill-ring-yank-pointer"
msgstr "kill-ring-yank-pointer"

#. type: defvar
#: text.texi.orig:1238
msgid "This variable's value indicates which element of the kill ring is at the ``front'' of the ring for yanking.  More precisely, the value is a tail of the value of @code{kill-ring}, and its @sc{car} is the kill string that @kbd{C-y} should yank."
msgstr "この変数の値は、yankにたいして使用される、killリングの先頭にある要素を示す。より正確には、値は@code{kill-ring}の値のtail値であり、その@sc{car}が@kbd{C-y}によりyankされるはずのkill文字列となる。"

#. type: defopt
#: text.texi.orig:1240
#, no-wrap
msgid "kill-ring-max"
msgstr "kill-ring-max"

#. type: defopt
#: text.texi.orig:1244
msgid "The value of this variable is the maximum length to which the kill ring can grow, before elements are thrown away at the end.  The default value for @code{kill-ring-max} is 60."
msgstr "この変数の値は、リング終端の要素を破棄する前に、killリングが成長し得る最大長である。@code{kill-ring-max}のデフォルト値は60。"

#. type: cindex
#: text.texi.orig:1248
#, no-wrap
msgid "redo"
msgstr ""

#. type: Plain text
#: text.texi.orig:1258
msgid "Most buffers have an @dfn{undo list}, which records all changes made to the buffer's text so that they can be undone.  (The buffers that don't have one are usually special-purpose buffers for which Emacs assumes that undoing is not useful.  In particular, any buffer whose name begins with a space has its undo recording off by default; see @ref{Buffer Names}.)  All the primitives that modify the text in the buffer automatically add elements to the front of the undo list, which is in the variable @code{buffer-undo-list}."
msgstr ""

#. type: defvar
#: text.texi.orig:1259
#, no-wrap
msgid "buffer-undo-list"
msgstr ""

#. type: defvar
#: text.texi.orig:1262
msgid "This buffer-local variable's value is the undo list of the current buffer.  A value of @code{t} disables the recording of undo information."
msgstr ""

#. type: Plain text
#: text.texi.orig:1265
msgid "Here are the kinds of elements an undo list can have:"
msgstr ""

#. type: var{#1}
#: text.texi.orig:1267
#, no-wrap
msgid "position"
msgstr ""

#. type: table
#: text.texi.orig:1272
msgid "This kind of element records a previous value of point; undoing this element moves point to @var{position}.  Ordinary cursor motion does not make any sort of undo record, but deletion operations use these entries to record where point was before the command."
msgstr ""

#. type: item
#: text.texi.orig:1273
#, no-wrap
msgid "(@var{beg} . @var{end})"
msgstr ""

#. type: table
#: text.texi.orig:1277
msgid "This kind of element indicates how to delete text that was inserted.  Upon insertion, the text occupied the range @var{beg}--@var{end} in the buffer."
msgstr ""

#. type: item
#: text.texi.orig:1278
#, no-wrap
msgid "(@var{text} . @var{position})"
msgstr ""

#. type: table
#: text.texi.orig:1285
msgid "This kind of element indicates how to reinsert text that was deleted.  The deleted text itself is the string @var{text}.  The place to reinsert it is @code{(abs @var{position})}.  If @var{position} is positive, point was at the beginning of the deleted text, otherwise it was at the end.  Zero or more (@var{marker} . @var{adjustment})  elements follow immediately after this element."
msgstr ""

#. type: item
#: text.texi.orig:1286
#, no-wrap
msgid "(t . @var{time-flag})"
msgstr ""

#. type: table
#: text.texi.orig:1298
msgid "This kind of element indicates that an unmodified buffer became modified.  A @var{time-flag} of the form @code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})} represents the visited file's modification time as of when it was previously visited or saved, using the same format as @code{current-time}; see @ref{Time of Day}.  A @var{time-flag} of 0 means the buffer does not correspond to any file; @minus{}1 means the visited file previously did not exist.  @code{primitive-undo} uses these values to determine whether to mark the buffer as unmodified once again; it does so only if the file's status matches that of @var{time-flag}."
msgstr ""

#. type: item
#: text.texi.orig:1299
#, no-wrap
msgid "(nil @var{property} @var{value} @var{beg} . @var{end})"
msgstr ""

#. type: table
#: text.texi.orig:1302
msgid "This kind of element records a change in a text property.  Here's how you might undo the change:"
msgstr ""

#. type: example
#: text.texi.orig:1305
#, no-wrap
msgid "(put-text-property @var{beg} @var{end} @var{property} @var{value})\n"
msgstr ""

#. type: item
#: text.texi.orig:1307
#, no-wrap
msgid "(@var{marker} . @var{adjustment})"
msgstr ""

#. type: table
#: text.texi.orig:1314
msgid "This kind of element records the fact that the marker @var{marker} was relocated due to deletion of surrounding text, and that it moved @var{adjustment} character positions.  If the marker's location is consistent with the (@var{text} . @var{position}) element preceding it in the undo list, then undoing this element moves @var{marker} @minus{} @var{adjustment} characters."
msgstr ""

#. type: item
#: text.texi.orig:1315
#, no-wrap
msgid "(apply @var{funname} . @var{args})"
msgstr ""

#. type: table
#: text.texi.orig:1318
msgid "This is an extensible undo item, which is undone by calling @var{funname} with arguments @var{args}."
msgstr ""

#. type: item
#: text.texi.orig:1319
#, no-wrap
msgid "(apply @var{delta} @var{beg} @var{end} @var{funname} . @var{args})"
msgstr ""

#. type: table
#: text.texi.orig:1324
msgid "This is an extensible undo item, which records a change limited to the range @var{beg} to @var{end}, which increased the size of the buffer by @var{delta} characters.  It is undone by calling @var{funname} with arguments @var{args}."
msgstr ""

#. type: table
#: text.texi.orig:1327
msgid "This kind of element enables undo limited to a region to determine whether the element pertains to that region."
msgstr ""

#. type: item
#: text.texi.orig:1328
#, no-wrap
msgid "nil"
msgstr ""

#. type: table
#: text.texi.orig:1333
msgid "This element is a boundary.  The elements between two boundaries are called a @dfn{change group}; normally, each change group corresponds to one keyboard command, and undo commands normally undo an entire group as a unit."
msgstr ""

#. type: defun
#: text.texi.orig:1335
#, no-wrap
msgid "undo-boundary"
msgstr ""

#. type: defun
#: text.texi.orig:1339
msgid "This function places a boundary element in the undo list.  The undo command stops at such a boundary, and successive undo commands undo to earlier and earlier boundaries.  This function returns @code{nil}."
msgstr ""

#. type: defun
#: text.texi.orig:1350
msgid "The editor command loop automatically calls @code{undo-boundary} just before executing each key sequence, so that each undo normally undoes the effects of one command.  As an exception, the command @code{self-insert-command}, which produces self-inserting input characters (@pxref{Commands for Insertion}), may remove the boundary inserted by the command loop: a boundary is accepted for the first such character, the next 19 consecutive self-inserting input characters do not have boundaries, and then the 20th does; and so on as long as the self-inserting characters continue.  Hence, sequences of consecutive character insertions can be undone as a group."
msgstr ""

#. type: defun
#: text.texi.orig:1354
msgid "All buffer modifications add a boundary whenever the previous undoable change was made in some other buffer.  This is to ensure that each command makes a boundary in each buffer where it makes changes."
msgstr ""

#. type: defun
#: text.texi.orig:1359
msgid "Calling this function explicitly is useful for splitting the effects of a command into more than one unit.  For example, @code{query-replace} calls @code{undo-boundary} after each replacement, so that the user can undo individual replacements one by one."
msgstr ""

#. type: defvar
#: text.texi.orig:1361
#, no-wrap
msgid "undo-in-progress"
msgstr ""

#. type: defvar
#: text.texi.orig:1365
msgid "This variable is normally @code{nil}, but the undo commands bind it to @code{t}.  This is so that various kinds of change hooks can tell when they're being called for the sake of undoing."
msgstr ""

#. type: defun
#: text.texi.orig:1367
#, no-wrap
msgid "primitive-undo count list"
msgstr ""

#. type: defun
#: text.texi.orig:1371
msgid "This is the basic function for undoing elements of an undo list.  It undoes the first @var{count} elements of @var{list}, returning the rest of @var{list}."
msgstr ""

#. type: defun
#: text.texi.orig:1378
msgid "@code{primitive-undo} adds elements to the buffer's undo list when it changes the buffer.  Undo commands avoid confusion by saving the undo list value at the beginning of a sequence of undo operations.  Then the undo operations use and update the saved value.  The new elements added by undoing are not part of this saved value, so they don't interfere with continuing to undo."
msgstr ""

#. type: defun
#: text.texi.orig:1380
msgid "This function does not bind @code{undo-in-progress}."
msgstr ""

#. type: section
#: text.texi.orig:1383
#, no-wrap
msgid "Maintaining Undo Lists"
msgstr ""

#. type: Plain text
#: text.texi.orig:1388
msgid "This section describes how to enable and disable undo information for a given buffer.  It also explains how the undo list is truncated automatically so it doesn't get too big."
msgstr ""

#. type: Plain text
#: text.texi.orig:1394
msgid "Recording of undo information in a newly created buffer is normally enabled to start with; but if the buffer name starts with a space, the undo recording is initially disabled.  You can explicitly enable or disable undo recording with the following two functions, or by setting @code{buffer-undo-list} yourself."
msgstr ""

#. type: deffn
#: text.texi.orig:1395
#, no-wrap
msgid "Command buffer-enable-undo &optional buffer-or-name"
msgstr ""

#. type: deffn
#: text.texi.orig:1401
msgid "This command enables recording undo information for buffer @var{buffer-or-name}, so that subsequent changes can be undone.  If no argument is supplied, then the current buffer is used.  This function does nothing if undo recording is already enabled in the buffer.  It returns @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:1404
msgid "In an interactive call, @var{buffer-or-name} is the current buffer.  You cannot specify any other buffer."
msgstr ""

#. type: deffn
#: text.texi.orig:1406
#, no-wrap
msgid "Command buffer-disable-undo &optional buffer-or-name"
msgstr ""

#. type: cindex
#: text.texi.orig:1407
#, no-wrap
msgid "disabling undo"
msgstr ""

#. type: deffn
#: text.texi.orig:1413
msgid "This function discards the undo list of @var{buffer-or-name}, and disables further recording of undo information.  As a result, it is no longer possible to undo either previous changes or any subsequent changes.  If the undo list of @var{buffer-or-name} is already disabled, this function has no effect."
msgstr ""

#. type: deffn
#: text.texi.orig:1416
msgid "In an interactive call, BUFFER-OR-NAME is the current buffer.  You cannot specify any other buffer.  This function returns @code{nil}."
msgstr ""

#. type: Plain text
#: text.texi.orig:1427
msgid "As editing continues, undo lists get longer and longer.  To prevent them from using up all available memory space, garbage collection trims them back to size limits you can set.  (For this purpose, the ``size'' of an undo list measures the cons cells that make up the list, plus the strings of deleted text.)  Three variables control the range of acceptable sizes: @code{undo-limit}, @code{undo-strong-limit} and @code{undo-outer-limit}.  In these variables, size is counted as the number of bytes occupied, which includes both saved text and other data."
msgstr ""

#. type: defopt
#: text.texi.orig:1428
#, no-wrap
msgid "undo-limit"
msgstr ""

#. type: defopt
#: text.texi.orig:1431
msgid "This is the soft limit for the acceptable size of an undo list.  The change group at which this size is exceeded is the last one kept."
msgstr ""

#. type: defopt
#: text.texi.orig:1433
#, no-wrap
msgid "undo-strong-limit"
msgstr ""

#. type: defopt
#: text.texi.orig:1438
msgid "This is the upper limit for the acceptable size of an undo list.  The change group at which this size is exceeded is discarded itself (along with all older change groups).  There is one exception: the very latest change group is only discarded if it exceeds @code{undo-outer-limit}."
msgstr ""

#. type: defopt
#: text.texi.orig:1440
#, no-wrap
msgid "undo-outer-limit"
msgstr ""

#. type: defopt
#: text.texi.orig:1444
msgid "If at garbage collection time the undo info for the current command exceeds this limit, Emacs discards the info and displays a warning.  This is a last ditch limit to prevent memory overflow."
msgstr ""

#. type: defopt
#: text.texi.orig:1446
#, no-wrap
msgid "undo-ask-before-discard"
msgstr ""

#. type: defopt
#: text.texi.orig:1451
msgid "If this variable is non-@code{nil}, when the undo info exceeds @code{undo-outer-limit}, Emacs asks in the echo area whether to discard the info.  The default value is @code{nil}, which means to discard it automatically."
msgstr ""

#. type: defopt
#: text.texi.orig:1455
msgid "This option is mainly intended for debugging.  Garbage collection is inhibited while the question is asked, which means that Emacs might leak memory if the user waits too long before answering the question."
msgstr ""

#. type: cindex
#: text.texi.orig:1459
#, no-wrap
msgid "filling text"
msgstr ""

#. type: Plain text
#: text.texi.orig:1467
msgid "@dfn{Filling} means adjusting the lengths of lines (by moving the line breaks) so that they are nearly (but no greater than) a specified maximum width.  Additionally, lines can be @dfn{justified}, which means inserting spaces to make the left and/or right margins line up precisely.  The width is controlled by the variable @code{fill-column}.  For ease of reading, lines should be no longer than 70 or so columns."
msgstr ""

#. type: Plain text
#: text.texi.orig:1471
msgid "You can use Auto Fill mode (@pxref{Auto Filling}) to fill text automatically as you insert it, but changes to existing text may leave it improperly filled.  Then you must fill the text explicitly."
msgstr ""

#. type: Plain text
#: text.texi.orig:1477
msgid "Most of the commands in this section return values that are not meaningful.  All the functions that do filling take note of the current left margin, current right margin, and current justification style (@pxref{Margins}).  If the current justification style is @code{none}, the filling functions don't actually do anything."
msgstr ""

#. type: Plain text
#: text.texi.orig:1485
msgid "Several of the filling functions have an argument @var{justify}.  If it is non-@code{nil}, that requests some kind of justification.  It can be @code{left}, @code{right}, @code{full}, or @code{center}, to request a specific style of justification.  If it is @code{t}, that means to use the current justification style for this part of the text (see @code{current-justification}, below).  Any other value is treated as @code{full}."
msgstr ""

#. type: Plain text
#: text.texi.orig:1488
msgid "When you call the filling functions interactively, using a prefix argument implies the value @code{full} for @var{justify}."
msgstr ""

#. type: deffn
#: text.texi.orig:1489
#, no-wrap
msgid "Command fill-paragraph &optional justify region"
msgstr ""

#. type: deffn
#: text.texi.orig:1494
msgid "This command fills the paragraph at or after point.  If @var{justify} is non-@code{nil}, each line is justified as well.  It uses the ordinary paragraph motion commands to find paragraph boundaries.  @xref{Paragraphs,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: text.texi.orig:1500
msgid "When @var{region} is non-@code{nil}, then if Transient Mark mode is enabled and the mark is active, this command calls @code{fill-region} to fill all the paragraphs in the region, instead of filling only the current paragraph.  When this command is called interactively, @var{region} is @code{t}."
msgstr ""

#. type: deffn
#: text.texi.orig:1502
#, no-wrap
msgid "Command fill-region start end &optional justify nosqueeze to-eop"
msgstr ""

#. type: deffn
#: text.texi.orig:1506
msgid "This command fills each of the paragraphs in the region from @var{start} to @var{end}.  It justifies as well if @var{justify} is non-@code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:1511
msgid "If @var{nosqueeze} is non-@code{nil}, that means to leave whitespace other than line breaks untouched.  If @var{to-eop} is non-@code{nil}, that means to keep filling to the end of the paragraph---or the next hard newline, if @code{use-hard-newlines} is enabled (see below)."
msgstr ""

#. type: deffn
#: text.texi.orig:1514
msgid "The variable @code{paragraph-separate} controls how to distinguish paragraphs.  @xref{Standard Regexps}."
msgstr ""

#. type: deffn
#: text.texi.orig:1516
#, no-wrap
msgid "Command fill-individual-paragraphs start end &optional justify citation-regexp"
msgstr ""

#. type: deffn
#: text.texi.orig:1521
msgid "This command fills each paragraph in the region according to its individual fill prefix.  Thus, if the lines of a paragraph were indented with spaces, the filled paragraph will remain indented in the same fashion."
msgstr ""

#. type: deffn
#: text.texi.orig:1531
msgid "The first two arguments, @var{start} and @var{end}, are the beginning and end of the region to be filled.  The third and fourth arguments, @var{justify} and @var{citation-regexp}, are optional.  If @var{justify} is non-@code{nil}, the paragraphs are justified as well as filled.  If @var{citation-regexp} is non-@code{nil}, it means the function is operating on a mail message and therefore should not fill the header lines.  If @var{citation-regexp} is a string, it is used as a regular expression; if it matches the beginning of a line, that line is treated as a citation marker."
msgstr ""

#. type: deffn
#: text.texi.orig:1538
msgid "Ordinarily, @code{fill-individual-paragraphs} regards each change in indentation as starting a new paragraph.  If @code{fill-individual-varying-indent} is non-@code{nil}, then only separator lines separate paragraphs.  That mode can handle indented paragraphs with additional indentation on the first line."
msgstr ""

#. type: defopt
#: text.texi.orig:1540
#, no-wrap
msgid "fill-individual-varying-indent"
msgstr ""

#. type: defopt
#: text.texi.orig:1543
msgid "This variable alters the action of @code{fill-individual-paragraphs} as described above."
msgstr ""

#. type: deffn
#: text.texi.orig:1545
#, no-wrap
msgid "Command fill-region-as-paragraph start end &optional justify nosqueeze squeeze-after"
msgstr ""

#. type: deffn
#: text.texi.orig:1550
msgid "This command considers a region of text as a single paragraph and fills it.  If the region was made up of many paragraphs, the blank lines between paragraphs are removed.  This function justifies as well as filling when @var{justify} is non-@code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:1555
msgid "If @var{nosqueeze} is non-@code{nil}, that means to leave whitespace other than line breaks untouched.  If @var{squeeze-after} is non-@code{nil}, it specifies a position in the region, and means don't canonicalize spaces before that position."
msgstr ""

#. type: deffn
#: text.texi.orig:1558
msgid "In Adaptive Fill mode, this command calls @code{fill-context-prefix} to choose a fill prefix by default.  @xref{Adaptive Fill}."
msgstr ""

#. type: deffn
#: text.texi.orig:1560
#, no-wrap
msgid "Command justify-current-line &optional how eop nosqueeze"
msgstr ""

#. type: deffn
#: text.texi.orig:1564
msgid "This command inserts spaces between the words of the current line so that the line ends exactly at @code{fill-column}.  It returns @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:1570
msgid "The argument @var{how}, if non-@code{nil} specifies explicitly the style of justification.  It can be @code{left}, @code{right}, @code{full}, @code{center}, or @code{none}.  If it is @code{t}, that means to do follow specified justification style (see @code{current-justification}, below).  @code{nil} means to do full justification."
msgstr ""

#. type: deffn
#: text.texi.orig:1575
msgid "If @var{eop} is non-@code{nil}, that means do only left-justification if @code{current-justification} specifies full justification.  This is used for the last line of a paragraph; even if the paragraph as a whole is fully justified, the last line should not be."
msgstr ""

#. type: deffn
#: text.texi.orig:1578
msgid "If @var{nosqueeze} is non-@code{nil}, that means do not change interior whitespace."
msgstr ""

#. type: defopt
#: text.texi.orig:1580
#, no-wrap
msgid "default-justification"
msgstr ""

#. type: defopt
#: text.texi.orig:1585
msgid "This variable's value specifies the style of justification to use for text that doesn't specify a style with a text property.  The possible values are @code{left}, @code{right}, @code{full}, @code{center}, or @code{none}.  The default value is @code{left}."
msgstr ""

#. type: defun
#: text.texi.orig:1587
#, no-wrap
msgid "current-justification"
msgstr ""

#. type: defun
#: text.texi.orig:1590
msgid "This function returns the proper justification style to use for filling the text around point."
msgstr ""

#. type: defun
#: text.texi.orig:1595
msgid "This returns the value of the @code{justification} text property at point, or the variable @var{default-justification} if there is no such text property.  However, it returns @code{nil} rather than @code{none} to mean ``don't justify''."
msgstr ""

#. type: defopt
#: text.texi.orig:1597
#, no-wrap
msgid "sentence-end-double-space"
msgstr ""

#. type: anchor{#1}
#: text.texi.orig:1602
msgid "Definition of sentence-end-double-space"
msgstr ""

#. type: defopt
#: text.texi.orig:1602
msgid "If this variable is non-@code{nil}, a period followed by just one space does not count as the end of a sentence, and the filling functions avoid breaking the line at such a place."
msgstr ""

#. type: defopt
#: text.texi.orig:1604
#, no-wrap
msgid "sentence-end-without-period"
msgstr ""

#. type: defopt
#: text.texi.orig:1608
msgid "If this variable is non-@code{nil}, a sentence can end without a period.  This is used for languages like Thai, where sentences end with a double space but without a period."
msgstr ""

#. type: defopt
#: text.texi.orig:1610
#, no-wrap
msgid "sentence-end-without-space"
msgstr ""

#. type: defopt
#: text.texi.orig:1613
msgid "If this variable is non-@code{nil}, it should be a string of characters that can end a sentence without following spaces."
msgstr ""

#. type: defvar
#: text.texi.orig:1615
#, no-wrap
msgid "fill-paragraph-function"
msgstr ""

#. type: defvar
#: text.texi.orig:1621
msgid "This variable provides a way to override the filling of paragraphs.  If its value is non-@code{nil}, @code{fill-paragraph} calls this function to do the work.  If the function returns a non-@code{nil} value, @code{fill-paragraph} assumes the job is done, and immediately returns that value."
msgstr ""

#. type: defvar
#: text.texi.orig:1625
msgid "The usual use of this feature is to fill comments in programming language modes.  If the function needs to fill a paragraph in the usual way, it can do so as follows:"
msgstr ""

#. type: example
#: text.texi.orig:1629
#, no-wrap
msgid ""
"(let ((fill-paragraph-function nil))\n"
"  (fill-paragraph arg))\n"
msgstr ""

#. type: defvar
#: text.texi.orig:1632
#, no-wrap
msgid "fill-forward-paragraph-function"
msgstr ""

#. type: defvar
#: text.texi.orig:1641
msgid "This variable provides a way to override how the filling functions, such as @code{fill-region} and @code{fill-paragraph}, move forward to the next paragraph.  Its value should be a function, which is called with a single argument @var{n}, the number of paragraphs to move, and should return the difference between @var{n} and the number of paragraphs actually moved.  The default value of this variable is @code{forward-paragraph}.  @xref{Paragraphs,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: defvar
#: text.texi.orig:1643
#, no-wrap
msgid "use-hard-newlines"
msgstr ""

#. type: defvar
#: text.texi.orig:1648
msgid "If this variable is non-@code{nil}, the filling functions do not delete newlines that have the @code{hard} text property.  These ``hard newlines'' act as paragraph separators.  @xref{Hard and Soft Newlines,, Hard and Soft Newlines, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: section
#: text.texi.orig:1651
#, no-wrap
msgid "Margins for Filling"
msgstr ""

#. type: cindex
#: text.texi.orig:1652
#, no-wrap
msgid "margins, filling"
msgstr ""

#. type: defopt
#: text.texi.orig:1654
#, no-wrap
msgid "fill-prefix"
msgstr ""

#. type: defopt
#: text.texi.orig:1663
msgid "This buffer-local variable, if non-@code{nil}, specifies a string of text that appears at the beginning of normal text lines and should be disregarded when filling them.  Any line that fails to start with the fill prefix is considered the start of a paragraph; so is any line that starts with the fill prefix followed by additional whitespace.  Lines that start with the fill prefix but no additional whitespace are ordinary text lines that can be filled together.  The resulting filled lines also start with the fill prefix."
msgstr ""

#. type: defopt
#: text.texi.orig:1665
msgid "The fill prefix follows the left margin whitespace, if any."
msgstr ""

#. type: defopt
#: text.texi.orig:1667
#, no-wrap
msgid "fill-column"
msgstr ""

#. type: defopt
#: text.texi.orig:1672
msgid "This buffer-local variable specifies the maximum width of filled lines.  Its value should be an integer, which is a number of columns.  All the filling, justification, and centering commands are affected by this variable, including Auto Fill mode (@pxref{Auto Filling})."
msgstr ""

#. type: defopt
#: text.texi.orig:1677
msgid "As a practical matter, if you are writing text for other people to read, you should set @code{fill-column} to no more than 70.  Otherwise the line will be too long for people to read comfortably, and this can make the text seem clumsy."
msgstr ""

#. type: defopt
#: text.texi.orig:1679
msgid "The default value for @code{fill-column} is 70."
msgstr ""

#. type: deffn
#: text.texi.orig:1681
#, no-wrap
msgid "Command set-left-margin from to margin"
msgstr ""

#. type: deffn
#: text.texi.orig:1685
msgid "This sets the @code{left-margin} property on the text from @var{from} to @var{to} to the value @var{margin}.  If Auto Fill mode is enabled, this command also refills the region to fit the new margin."
msgstr ""

#. type: deffn
#: text.texi.orig:1687
#, no-wrap
msgid "Command set-right-margin from to margin"
msgstr ""

#. type: deffn
#: text.texi.orig:1691
msgid "This sets the @code{right-margin} property on the text from @var{from} to @var{to} to the value @var{margin}.  If Auto Fill mode is enabled, this command also refills the region to fit the new margin."
msgstr ""

#. type: defun
#: text.texi.orig:1693
#, no-wrap
msgid "current-left-margin"
msgstr ""

#. type: defun
#: text.texi.orig:1698
msgid "This function returns the proper left margin value to use for filling the text around point.  The value is the sum of the @code{left-margin} property of the character at the start of the current line (or zero if none), and the value of the variable @code{left-margin}."
msgstr ""

#. type: defun
#: text.texi.orig:1700
#, no-wrap
msgid "current-fill-column"
msgstr ""

#. type: defun
#: text.texi.orig:1705
msgid "This function returns the proper fill column value to use for filling the text around point.  The value is the value of the @code{fill-column} variable, minus the value of the @code{right-margin} property of the character after point."
msgstr ""

#. type: deffn
#: text.texi.orig:1707
#, no-wrap
msgid "Command move-to-left-margin &optional n force"
msgstr ""

#. type: deffn
#: text.texi.orig:1712
msgid "This function moves point to the left margin of the current line.  The column moved to is determined by calling the function @code{current-left-margin}.  If the argument @var{n} is non-@code{nil}, @code{move-to-left-margin} moves forward @var{n}@minus{}1 lines first."
msgstr ""

#. type: deffn
#: text.texi.orig:1715
msgid "If @var{force} is non-@code{nil}, that says to fix the line's indentation if that doesn't match the left margin value."
msgstr ""

#. type: defun
#: text.texi.orig:1717
#, no-wrap
msgid "delete-to-left-margin &optional from to"
msgstr ""

#. type: defun
#: text.texi.orig:1723
msgid "This function removes left margin indentation from the text between @var{from} and @var{to}.  The amount of indentation to delete is determined by calling @code{current-left-margin}.  In no case does this function delete non-whitespace.  If @var{from} and @var{to} are omitted, they default to the whole buffer."
msgstr ""

#. type: defun
#: text.texi.orig:1725
#, no-wrap
msgid "indent-to-left-margin"
msgstr ""

#. type: defun
#: text.texi.orig:1730
msgid "This function adjusts the indentation at the beginning of the current line to the value specified by the variable @code{left-margin}.  (That may involve either inserting or deleting whitespace.)  This function is value of @code{indent-line-function} in Paragraph-Indent Text mode."
msgstr ""

#. type: item
#: text.texi.orig:1732 text.texi.orig:3487
#, no-wrap
msgid "left-margin"
msgstr ""

#. type: defopt
#: text.texi.orig:1736
msgid "This variable specifies the base left margin column.  In Fundamental mode, @kbd{RET} indents to this column.  This variable automatically becomes buffer-local when set in any fashion."
msgstr ""

#. type: defopt
#: text.texi.orig:1738
#, no-wrap
msgid "fill-nobreak-predicate"
msgstr ""

#. type: defopt
#: text.texi.orig:1745
msgid "This variable gives major modes a way to specify not to break a line at certain places.  Its value should be a list of functions.  Whenever filling considers breaking the line at a certain place in the buffer, it calls each of these functions with no arguments and with point located at that place.  If any of the functions returns non-@code{nil}, then the line won't be broken there."
msgstr ""

#. type: section
#: text.texi.orig:1748
#, no-wrap
msgid "Adaptive Fill Mode"
msgstr ""

#. type: Plain text
#: text.texi.orig:1757
msgid "When @dfn{Adaptive Fill Mode} is enabled, Emacs determines the fill prefix automatically from the text in each paragraph being filled rather than using a predetermined value.  During filling, this fill prefix gets inserted at the start of the second and subsequent lines of the paragraph as described in @ref{Filling}, and in @ref{Auto Filling}."
msgstr ""

#. type: defopt
#: text.texi.orig:1758
#, no-wrap
msgid "adaptive-fill-mode"
msgstr ""

#. type: defopt
#: text.texi.orig:1761
msgid "Adaptive Fill mode is enabled when this variable is non-@code{nil}.  It is @code{t} by default."
msgstr ""

#. type: defun
#: text.texi.orig:1763
#, no-wrap
msgid "fill-context-prefix from to"
msgstr ""

#. type: defun
#: text.texi.orig:1772
msgid "This function implements the heart of Adaptive Fill mode; it chooses a fill prefix based on the text between @var{from} and @var{to}, typically the start and end of a paragraph.  It does this by looking at the first two lines of the paragraph, based on the variables described below."
msgstr ""

#. type: defun
#: text.texi.orig:1778
msgid "Usually, this function returns the fill prefix, a string.  However, before doing this, the function makes a final check (not specially mentioned in the following) that a line starting with this prefix wouldn't look like the start of a paragraph.  Should this happen, the function signals the anomaly by returning @code{nil} instead."
msgstr ""

#. type: defun
#: text.texi.orig:1780
msgid "In detail, @code{fill-context-prefix} does this:"
msgstr ""

#. type: enumerate
#: text.texi.orig:1788
msgid "It takes a candidate for the fill prefix from the first line---it tries first the function in @code{adaptive-fill-function} (if any), then the regular expression @code{adaptive-fill-regexp} (see below).  The first non-@code{nil} result of these, or the empty string if they're both @code{nil}, becomes the first line's candidate."
msgstr ""

#. type: enumerate
#: text.texi.orig:1793
msgid "If the paragraph has as yet only one line, the function tests the validity of the prefix candidate just found.  The function then returns the candidate if it's valid, or a string of spaces otherwise.  (see the description of @code{adaptive-fill-first-line-regexp} below)."
msgstr ""

#. type: enumerate
#: text.texi.orig:1797
msgid "When the paragraph already has two lines, the function next looks for a prefix candidate on the second line, in just the same way it did for the first line.  If it doesn't find one, it returns @code{nil}."
msgstr ""

#. type: enumerate
#: text.texi.orig:1803
msgid "The function now compares the two candidate prefixes heuristically: if the non-whitespace characters in the line 2 candidate occur in the same order in the line 1 candidate, the function returns the line 2 candidate.  Otherwise, it returns the largest initial substring which is common to both candidates (which might be the empty string)."
msgstr ""

#. type: defopt
#: text.texi.orig:1806
#, no-wrap
msgid "adaptive-fill-regexp"
msgstr ""

#. type: defopt
#: text.texi.orig:1810
msgid "Adaptive Fill mode matches this regular expression against the text starting after the left margin whitespace (if any) on a line; the characters it matches are that line's candidate for the fill prefix."
msgstr ""

#. type: defopt
#: text.texi.orig:1813
msgid "The default value matches whitespace with certain punctuation characters intermingled."
msgstr ""

#. type: defopt
#: text.texi.orig:1815
#, no-wrap
msgid "adaptive-fill-first-line-regexp"
msgstr ""

#. type: defopt
#: text.texi.orig:1822
msgid "Used only in one-line paragraphs, this regular expression acts as an additional check of the validity of the one available candidate fill prefix: the candidate must match this regular expression, or match @code{comment-start-skip}.  If it doesn't, @code{fill-context-prefix} replaces the candidate with a string of spaces ``of the same width'' as it."
msgstr ""

#. type: defopt
#: text.texi.orig:1827
msgid "The default value of this variable is @w{@code{\"\\\\`[ \\t]*\\\\'\"}}, which matches only a string of whitespace.  The effect of this default is to force the fill prefixes found in one-line paragraphs always to be pure whitespace."
msgstr ""

#. type: defopt
#: text.texi.orig:1829
#, no-wrap
msgid "adaptive-fill-function"
msgstr ""

#. type: defopt
#: text.texi.orig:1835
msgid "You can specify more complex ways of choosing a fill prefix automatically by setting this variable to a function.  The function is called with point after the left margin (if any) of a line, and it must preserve point.  It should return either ``that line's'' fill prefix or @code{nil}, meaning it has failed to determine a prefix."
msgstr ""

#. type: cindex
#: text.texi.orig:1839
#, no-wrap
msgid "filling, automatic"
msgstr ""

#. type: cindex
#: text.texi.orig:1840
#, no-wrap
msgid "Auto Fill mode"
msgstr ""

#. type: Plain text
#: text.texi.orig:1847
msgid "Auto Fill mode is a minor mode that fills lines automatically as text is inserted.  This section describes the hook used by Auto Fill mode.  For a description of functions that you can call explicitly to fill and justify existing text, see @ref{Filling}."
msgstr ""

#. type: Plain text
#: text.texi.orig:1850
msgid "Auto Fill mode also enables the functions that change the margins and justification style to refill portions of the text.  @xref{Margins}."
msgstr ""

#. type: defvar
#: text.texi.orig:1851
#, no-wrap
msgid "auto-fill-function"
msgstr ""

#. type: defvar
#: text.texi.orig:1856
msgid "The value of this buffer-local variable should be a function (of no arguments) to be called after self-inserting a character from the table @code{auto-fill-chars}.  It may be @code{nil}, in which case nothing special is done in that case."
msgstr ""

#. type: defvar
#: text.texi.orig:1860
msgid "The value of @code{auto-fill-function} is @code{do-auto-fill} when Auto-Fill mode is enabled.  That is a function whose sole purpose is to implement the usual strategy for breaking a line."
msgstr ""

#. type: defvar
#: text.texi.orig:1862
#, no-wrap
msgid "normal-auto-fill-function"
msgstr ""

#. type: defvar
#: text.texi.orig:1867
msgid "This variable specifies the function to use for @code{auto-fill-function}, if and when Auto Fill is turned on.  Major modes can set buffer-local values for this variable to alter how Auto Fill works."
msgstr ""

#. type: defvar
#: text.texi.orig:1869
#, no-wrap
msgid "auto-fill-chars"
msgstr ""

#. type: defvar
#: text.texi.orig:1873
msgid "A char table of characters which invoke @code{auto-fill-function} when self-inserted---space and newline in most language environments.  They have an entry @code{t} in the table."
msgstr ""

#. type: section
#: text.texi.orig:1876
#, no-wrap
msgid "Sorting Text"
msgstr ""

#. type: cindex
#: text.texi.orig:1877
#, no-wrap
msgid "sorting text"
msgstr ""

#. type: Plain text
#: text.texi.orig:1883
msgid "The sorting functions described in this section all rearrange text in a buffer.  This is in contrast to the function @code{sort}, which rearranges the order of the elements of a list (@pxref{Rearrangement}).  The values returned by these functions are not meaningful."
msgstr ""

#. type: defun
#: text.texi.orig:1884
#, no-wrap
msgid "sort-subr reverse nextrecfun endrecfun &optional startkeyfun endkeyfun predicate"
msgstr ""

#. type: defun
#: text.texi.orig:1888
msgid "This function is the general text-sorting routine that subdivides a buffer into records and then sorts them.  Most of the commands in this section use this function."
msgstr ""

#. type: defun
#: text.texi.orig:1895
msgid "To understand how @code{sort-subr} works, consider the whole accessible portion of the buffer as being divided into disjoint pieces called @dfn{sort records}.  The records may or may not be contiguous, but they must not overlap.  A portion of each sort record (perhaps all of it) is designated as the sort key.  Sorting rearranges the records in order by their sort keys."
msgstr ""

#. type: defun
#: text.texi.orig:1900
msgid "Usually, the records are rearranged in order of ascending sort key.  If the first argument to the @code{sort-subr} function, @var{reverse}, is non-@code{nil}, the sort records are rearranged in order of descending sort key."
msgstr ""

#. type: defun
#: text.texi.orig:1904
msgid "The next four arguments to @code{sort-subr} are functions that are called to move point across a sort record.  They are called many times from within @code{sort-subr}."
msgstr ""

#. type: enumerate
#: text.texi.orig:1912
msgid "@var{nextrecfun} is called with point at the end of a record.  This function moves point to the start of the next record.  The first record is assumed to start at the position of point when @code{sort-subr} is called.  Therefore, you should usually move point to the beginning of the buffer before calling @code{sort-subr}."
msgstr ""

#. type: enumerate
#: text.texi.orig:1915
msgid "This function can indicate there are no more sort records by leaving point at the end of the buffer."
msgstr ""

#. type: enumerate
#: text.texi.orig:1919
msgid "@var{endrecfun} is called with point within a record.  It moves point to the end of the record."
msgstr ""

#. type: enumerate
#: text.texi.orig:1928
msgid "@var{startkeyfun} is called to move point from the start of a record to the start of the sort key.  This argument is optional; if it is omitted, the whole record is the sort key.  If supplied, the function should either return a non-@code{nil} value to be used as the sort key, or return @code{nil} to indicate that the sort key is in the buffer starting at point.  In the latter case, @var{endkeyfun} is called to find the end of the sort key."
msgstr ""

#. type: enumerate
#: text.texi.orig:1936
msgid "@var{endkeyfun} is called to move point from the start of the sort key to the end of the sort key.  This argument is optional.  If @var{startkeyfun} returns @code{nil} and this argument is omitted (or @code{nil}), then the sort key extends to the end of the record.  There is no need for @var{endkeyfun} if @var{startkeyfun} returns a non-@code{nil} value."
msgstr ""

#. type: defun
#: text.texi.orig:1941
msgid "The argument @var{predicate} is the function to use to compare keys.  If keys are numbers, it defaults to @code{<}; otherwise it defaults to @code{string<}."
msgstr ""

#. type: defun
#: text.texi.orig:1944
msgid "As an example of @code{sort-subr}, here is the complete function definition for @code{sort-lines}:"
msgstr ""

#. type: group
#: text.texi.orig:1953
#, no-wrap
msgid ""
";; @r{Note that the first two lines of doc string}\n"
";; @r{are effectively one line when viewed by a user.}\n"
"(defun sort-lines (reverse beg end)\n"
"  \"Sort lines in region alphabetically;\\\n"
" argument means descending order.\n"
"Called from a program, there are three arguments:\n"
msgstr ""

#. type: group
#: text.texi.orig:1960
#, no-wrap
msgid ""
"REVERSE (non-nil means reverse order),\\\n"
" BEG and END (region to sort).\n"
"The variable `sort-fold-case' determines\\\n"
" whether alphabetic case affects\n"
"the sort order.\"\n"
msgstr ""

#. type: group
#: text.texi.orig:1969
#, no-wrap
msgid ""
"  (interactive \"P\\nr\")\n"
"  (save-excursion\n"
"    (save-restriction\n"
"      (narrow-to-region beg end)\n"
"      (goto-char (point-min))\n"
"      (let ((inhibit-field-text-motion t))\n"
"        (sort-subr reverse 'forward-line 'end-of-line)))))\n"
msgstr ""

#. type: defun
#: text.texi.orig:1976
msgid "Here @code{forward-line} moves point to the start of the next record, and @code{end-of-line} moves point to the end of record.  We do not pass the arguments @var{startkeyfun} and @var{endkeyfun}, because the entire record is used as the sort key."
msgstr ""

#. type: defun
#: text.texi.orig:1979
msgid "The @code{sort-paragraphs} function is very much the same, except that its @code{sort-subr} call looks like this:"
msgstr ""

#. type: group
#: text.texi.orig:1989
#, no-wrap
msgid ""
"(sort-subr reverse\n"
"           (function\n"
"            (lambda ()\n"
"              (while (and (not (eobp))\n"
"                          (looking-at paragraph-separate))\n"
"                (forward-line 1))))\n"
"           'forward-paragraph)\n"
msgstr ""

#. type: defun
#: text.texi.orig:1994
msgid "Markers pointing into any sort records are left with no useful position after @code{sort-subr} returns."
msgstr ""

#. type: defopt
#: text.texi.orig:1996
#, no-wrap
msgid "sort-fold-case"
msgstr ""

#. type: defopt
#: text.texi.orig:1999
msgid "If this variable is non-@code{nil}, @code{sort-subr} and the other buffer sorting functions ignore case when comparing strings."
msgstr ""

#. type: deffn
#: text.texi.orig:2001
#, no-wrap
msgid "Command sort-regexp-fields reverse record-regexp key-regexp start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2006
msgid "This command sorts the region between @var{start} and @var{end} alphabetically as specified by @var{record-regexp} and @var{key-regexp}.  If @var{reverse} is a negative integer, then sorting is in reverse order."
msgstr ""

#. type: deffn
#: text.texi.orig:2013
msgid "Alphabetical sorting means that two sort keys are compared by comparing the first characters of each, the second characters of each, and so on.  If a mismatch is found, it means that the sort keys are unequal; the sort key whose character is less at the point of first mismatch is the lesser sort key.  The individual characters are compared according to their numerical character codes in the Emacs character set."
msgstr ""

#. type: deffn
#: text.texi.orig:2021
msgid "The value of the @var{record-regexp} argument specifies how to divide the buffer into sort records.  At the end of each record, a search is done for this regular expression, and the text that matches it is taken as the next record.  For example, the regular expression @samp{^.+$}, which matches lines with at least one character besides a newline, would make each such line into a sort record.  @xref{Regular Expressions}, for a description of the syntax and meaning of regular expressions."
msgstr ""

#. type: deffn
#: text.texi.orig:2027
msgid "The value of the @var{key-regexp} argument specifies what part of each record is the sort key.  The @var{key-regexp} could match the whole record, or only a part.  In the latter case, the rest of the record has no effect on the sorted order of records, but it is carried along when the record moves to its new position."
msgstr ""

#. type: deffn
#: text.texi.orig:2031
msgid "The @var{key-regexp} argument can refer to the text matched by a subexpression of @var{record-regexp}, or it can be a regular expression on its own."
msgstr ""

#. type: deffn
#: text.texi.orig:2033
msgid "If @var{key-regexp} is:"
msgstr ""

#. type: samp{#1}
#: text.texi.orig:2035
#, no-wrap
msgid "\\@var{digit}"
msgstr ""

#. type: table
#: text.texi.orig:2038
msgid "then the text matched by the @var{digit}th @samp{\\(...\\)} parenthesis grouping in @var{record-regexp} is the sort key."
msgstr ""

#. type: samp{#1}
#: text.texi.orig:2039
#, no-wrap
msgid "\\&"
msgstr ""

#. type: table
#: text.texi.orig:2041
msgid "then the whole record is the sort key."
msgstr ""

#. type: item
#: text.texi.orig:2042
#, no-wrap
msgid "a regular expression"
msgstr ""

#. type: table
#: text.texi.orig:2048
msgid "then @code{sort-regexp-fields} searches for a match for the regular expression within the record.  If such a match is found, it is the sort key.  If there is no match for @var{key-regexp} within a record then that record is ignored, which means its position in the buffer is not changed.  (The other records may move around it.)"
msgstr ""

#. type: deffn
#: text.texi.orig:2054
msgid "For example, if you plan to sort all the lines in the region by the first word on each line starting with the letter @samp{f}, you should set @var{record-regexp} to @samp{^.*$} and set @var{key-regexp} to @samp{\\<f\\w*\\>}.  The resulting expression looks like this:"
msgstr ""

#. type: group
#: text.texi.orig:2060
#, no-wrap
msgid ""
"(sort-regexp-fields nil \"^.*$\" \"\\\\<f\\\\w*\\\\>\"\n"
"                    (region-beginning)\n"
"                    (region-end))\n"
msgstr ""

#. type: deffn
#: text.texi.orig:2065
msgid "If you call @code{sort-regexp-fields} interactively, it prompts for @var{record-regexp} and @var{key-regexp} in the minibuffer."
msgstr ""

#. type: deffn
#: text.texi.orig:2067
#, no-wrap
msgid "Command sort-lines reverse start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2071
msgid "This command alphabetically sorts lines in the region between @var{start} and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse order."
msgstr ""

#. type: deffn
#: text.texi.orig:2073
#, no-wrap
msgid "Command sort-paragraphs reverse start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2077
msgid "This command alphabetically sorts paragraphs in the region between @var{start} and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse order."
msgstr ""

#. type: deffn
#: text.texi.orig:2079
#, no-wrap
msgid "Command sort-pages reverse start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2083
msgid "This command alphabetically sorts pages in the region between @var{start} and @var{end}.  If @var{reverse} is non-@code{nil}, the sort is in reverse order."
msgstr ""

#. type: deffn
#: text.texi.orig:2085
#, no-wrap
msgid "Command sort-fields field start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2092
msgid "This command sorts lines in the region between @var{start} and @var{end}, comparing them alphabetically by the @var{field}th field of each line.  Fields are separated by whitespace and numbered starting from 1.  If @var{field} is negative, sorting is by the @w{@minus{}@var{field}th} field from the end of the line.  This command is useful for sorting tables."
msgstr ""

#. type: deffn
#: text.texi.orig:2094
#, no-wrap
msgid "Command sort-numeric-fields field start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2101
msgid "This command sorts lines in the region between @var{start} and @var{end}, comparing them numerically by the @var{field}th field of each line.  Fields are separated by whitespace and numbered starting from 1.  The specified field must contain a number in each line of the region.  Numbers starting with 0 are treated as octal, and numbers starting with @samp{0x} are treated as hexadecimal."
msgstr ""

#. type: deffn
#: text.texi.orig:2105
msgid "If @var{field} is negative, sorting is by the @w{@minus{}@var{field}th} field from the end of the line.  This command is useful for sorting tables."
msgstr ""

#. type: defopt
#: text.texi.orig:2107
#, no-wrap
msgid "sort-numeric-base"
msgstr ""

#. type: defopt
#: text.texi.orig:2110
msgid "This variable specifies the default radix for @code{sort-numeric-fields} to parse numbers."
msgstr ""

#. type: deffn
#: text.texi.orig:2112
#, no-wrap
msgid "Command sort-columns reverse &optional beg end"
msgstr ""

#. type: deffn
#: text.texi.orig:2117
msgid "This command sorts the lines in the region between @var{beg} and @var{end}, comparing them alphabetically by a certain range of columns.  The column positions of @var{beg} and @var{end} bound the range of columns to sort on."
msgstr ""

#. type: deffn
#: text.texi.orig:2119
msgid "If @var{reverse} is non-@code{nil}, the sort is in reverse order."
msgstr ""

#. type: deffn
#: text.texi.orig:2123
msgid "One unusual thing about this command is that the entire line containing position @var{beg}, and the entire line containing position @var{end}, are included in the region sorted."
msgstr ""

#. type: deffn
#: text.texi.orig:2127
msgid "Note that @code{sort-columns} rejects text that contains tabs, because tabs could be split across the specified columns.  Use @kbd{M-x untabify} to convert tabs to spaces before sorting."
msgstr ""

#. type: deffn
#: text.texi.orig:2130
msgid "When possible, this command actually works by calling the @code{sort} utility program."
msgstr ""

#. type: section
#: text.texi.orig:2133
#, no-wrap
msgid "Counting Columns"
msgstr ""

#. type: cindex
#: text.texi.orig:2134
#, no-wrap
msgid "columns"
msgstr ""

#. type: cindex
#: text.texi.orig:2135
#, no-wrap
msgid "counting columns"
msgstr ""

#. type: cindex
#: text.texi.orig:2136
#, no-wrap
msgid "horizontal position"
msgstr ""

#. type: Plain text
#: text.texi.orig:2141
msgid "The column functions convert between a character position (counting characters from the beginning of the buffer) and a column position (counting screen characters from the beginning of a line)."
msgstr ""

#. type: Plain text
#: text.texi.orig:2148
msgid "These functions count each character according to the number of columns it occupies on the screen.  This means control characters count as occupying 2 or 4 columns, depending upon the value of @code{ctl-arrow}, and tabs count as occupying a number of columns that depends on the value of @code{tab-width} and on the column where the tab begins.  @xref{Usual Display}."
msgstr ""

#. type: Plain text
#: text.texi.orig:2153
msgid "Column number computations ignore the width of the window and the amount of horizontal scrolling.  Consequently, a column value can be arbitrarily high.  The first (or leftmost) column is numbered 0.  They also ignore overlays and text properties, aside from invisibility."
msgstr ""

#. type: defun
#: text.texi.orig:2154
#, no-wrap
msgid "current-column"
msgstr ""

#. type: defun
#: text.texi.orig:2159
msgid "This function returns the horizontal position of point, measured in columns, counting from 0 at the left margin.  The column position is the sum of the widths of all the displayed representations of the characters between the start of the current line and point."
msgstr ""

#. type: defun
#: text.texi.orig:2162
msgid "For an example of using @code{current-column}, see the description of @code{count-lines} in @ref{Text Lines}."
msgstr ""

#. type: deffn
#: text.texi.orig:2164
#, no-wrap
msgid "Command move-to-column column &optional force"
msgstr ""

#. type: deffn
#: text.texi.orig:2169
msgid "This function moves point to @var{column} in the current line.  The calculation of @var{column} takes into account the widths of the displayed representations of the characters between the start of the line and point."
msgstr ""

#. type: deffn
#: text.texi.orig:2172
msgid "When called interactively, @var{column} is the value of prefix numeric argument.  If @var{column} is not an integer, an error is signaled."
msgstr ""

#. type: deffn
#: text.texi.orig:2187
msgid "If it is impossible to move to column @var{column} because that is in the middle of a multicolumn character such as a tab, point moves to the end of that character.  However, if @var{force} is non-@code{nil}, and @var{column} is in the middle of a tab, then @code{move-to-column} converts the tab into spaces so that it can move precisely to column @var{column}.  Other multicolumn characters can cause anomalies despite @var{force}, since there is no way to split them."
msgstr ""

#. type: deffn
#: text.texi.orig:2191
msgid "The argument @var{force} also has an effect if the line isn't long enough to reach column @var{column}; if it is @code{t}, that means to add whitespace at the end of the line to reach that column."
msgstr ""

#. type: deffn
#: text.texi.orig:2193
msgid "The return value is the column number actually moved to."
msgstr ""

#. type: cindex
#: text.texi.orig:2197
#, no-wrap
msgid "indentation"
msgstr ""

#. type: Plain text
#: text.texi.orig:2203
msgid "The indentation functions are used to examine, move to, and change whitespace that is at the beginning of a line.  Some of the functions can also change whitespace elsewhere on a line.  Columns and indentation count from zero at the left margin."
msgstr ""

#. type: node
#: text.texi.orig:2211 text.texi.orig:2213
#, no-wrap
msgid "Primitive Indent"
msgstr ""

#. type: menuentry
#: text.texi.orig:2211
msgid "Functions used to count and insert indentation."
msgstr ""

#. type: node
#: text.texi.orig:2211 text.texi.orig:2251
#, no-wrap
msgid "Mode-Specific Indent"
msgstr ""

#. type: menuentry
#: text.texi.orig:2211
msgid "Customize indentation for different modes."
msgstr ""

#. type: node
#: text.texi.orig:2211 text.texi.orig:2333
#, no-wrap
msgid "Region Indent"
msgstr ""

#. type: menuentry
#: text.texi.orig:2211
msgid "Indent all the lines in a region."
msgstr ""

#. type: node
#: text.texi.orig:2211 text.texi.orig:2400
#, no-wrap
msgid "Relative Indent"
msgstr ""

#. type: menuentry
#: text.texi.orig:2211
msgid "Indent the current line based on previous lines."
msgstr ""

#. type: node
#: text.texi.orig:2211 text.texi.orig:2477
#, no-wrap
msgid "Indent Tabs"
msgstr ""

#. type: menuentry
#: text.texi.orig:2211
msgid "Adjustable, typewriter-like tab stops."
msgstr ""

#. type: node
#: text.texi.orig:2211 text.texi.orig:2508
#, no-wrap
msgid "Motion by Indent"
msgstr ""

#. type: menuentry
#: text.texi.orig:2211
msgid "Move to first non-blank character."
msgstr ""

#. type: subsection
#: text.texi.orig:2214
#, no-wrap
msgid "Indentation Primitives"
msgstr ""

#. type: Plain text
#: text.texi.orig:2219
msgid "This section describes the primitive functions used to count and insert indentation.  The functions in the following sections use these primitives.  @xref{Size of Displayed Text}, for related functions."
msgstr ""

#. type: defun
#: text.texi.orig:2220
#, no-wrap
msgid "current-indentation"
msgstr ""

#. type: defun
#: text.texi.orig:2227
msgid "This function returns the indentation of the current line, which is the horizontal position of the first nonblank character.  If the contents are entirely blank, then this is the horizontal position of the end of the line."
msgstr ""

#. type: deffn
#: text.texi.orig:2229
#, no-wrap
msgid "Command indent-to column &optional minimum"
msgstr ""

#. type: deffn
#: text.texi.orig:2238
msgid "This function indents from point with tabs and spaces until @var{column} is reached.  If @var{minimum} is specified and non-@code{nil}, then at least that many spaces are inserted even if this requires going beyond @var{column}.  Otherwise the function does nothing if point is already beyond @var{column}.  The value is the column at which the inserted indentation ends."
msgstr ""

#. type: deffn
#: text.texi.orig:2242
msgid "The inserted whitespace characters inherit text properties from the surrounding text (usually, from the preceding text only).  @xref{Sticky Properties}."
msgstr ""

#. type: defopt
#: text.texi.orig:2244
#, no-wrap
msgid "indent-tabs-mode"
msgstr ""

#. type: defopt
#: text.texi.orig:2249
msgid "If this variable is non-@code{nil}, indentation functions can insert tabs as well as spaces.  Otherwise, they insert only spaces.  Setting this variable automatically makes it buffer-local in the current buffer."
msgstr ""

#. type: subsection
#: text.texi.orig:2252
#, no-wrap
msgid "Indentation Controlled by Major Mode"
msgstr ""

#. type: Plain text
#: text.texi.orig:2258
msgid "An important function of each major mode is to customize the @key{TAB} key to indent properly for the language being edited.  This section describes the mechanism of the @key{TAB} key and how to control it.  The functions in this section return unpredictable values."
msgstr ""

#. type: deffn
#: text.texi.orig:2259
#, no-wrap
msgid "Command indent-for-tab-command &optional rigid"
msgstr ""

#. type: deffn
#: text.texi.orig:2263
msgid "This is the command bound to @key{TAB} in most editing modes.  Its usual action is to indent the current line, but it can alternatively insert a tab character or indent a region."
msgstr ""

#. type: deffn
#: text.texi.orig:2265
msgid "Here is what it does:"
msgstr ""

#. type: itemize
#: text.texi.orig:2271
msgid "First, it checks whether Transient Mark mode is enabled and the region is active.  If so, it called @code{indent-region} to indent all the text in the region (@pxref{Region Indent})."
msgstr ""

#. type: itemize
#: text.texi.orig:2278
msgid "Otherwise, if the indentation function in @code{indent-line-function} is @code{indent-to-left-margin} (a trivial command that inserts a tab character), or if the variable @code{tab-always-indent} specifies that a tab character ought to be inserted (see below), then it inserts a tab character."
msgstr ""

#. type: itemize
#: text.texi.orig:2284
msgid "Otherwise, it indents the current line; this is done by calling the function in @code{indent-line-function}.  If the line is already indented, and the value of @code{tab-always-indent} is @code{complete} (see below), it tries completing the text at point."
msgstr ""

#. type: deffn
#: text.texi.orig:2292
msgid "If @var{rigid} is non-@code{nil} (interactively, with a prefix argument), then after this command indents a line or inserts a tab, it also rigidly indents the entire balanced expression which starts at the beginning of the current line, in order to reflect the new indentation.  This argument is ignored if the command indents the region."
msgstr ""

#. type: defvar
#: text.texi.orig:2294
#, no-wrap
msgid "indent-line-function"
msgstr ""

#. type: defvar
#: text.texi.orig:2301
msgid "This variable's value is the function to be used by @code{indent-for-tab-command}, and various other indentation commands, to indent the current line.  It is usually assigned by the major mode; for instance, Lisp mode sets it to @code{lisp-indent-line}, C mode sets it to @code{c-indent-line}, and so on.  The default value is @code{indent-relative}.  @xref{Auto-Indentation}."
msgstr ""

#. type: deffn
#: text.texi.orig:2303
#, no-wrap
msgid "Command indent-according-to-mode"
msgstr ""

#. type: deffn
#: text.texi.orig:2306
msgid "This command calls the function in @code{indent-line-function} to indent the current line in a way appropriate for the current major mode."
msgstr ""

#. type: deffn
#: text.texi.orig:2308
#, no-wrap
msgid "Command newline-and-indent"
msgstr ""

#. type: deffn
#: text.texi.orig:2312
msgid "This function inserts a newline, then indents the new line (the one following the newline just inserted) according to the major mode.  It does indentation by calling @code{indent-according-to-mode}."
msgstr ""

#. type: deffn
#: text.texi.orig:2314
#, no-wrap
msgid "Command reindent-then-newline-and-indent"
msgstr ""

#. type: deffn
#: text.texi.orig:2319
msgid "This command reindents the current line, inserts a newline at point, and then indents the new line (the one following the newline just inserted).  It does indentation on both lines by calling @code{indent-according-to-mode}."
msgstr ""

#. type: defopt
#: text.texi.orig:2321
#, no-wrap
msgid "tab-always-indent"
msgstr ""

#. type: defopt
#: text.texi.orig:2331
msgid "This variable can be used to customize the behavior of the @key{TAB} (@code{indent-for-tab-command}) command.  If the value is @code{t} (the default), the command normally just indents the current line.  If the value is @code{nil}, the command indents the current line only if point is at the left margin or in the line's indentation; otherwise, it inserts a tab character.  If the value is @code{complete}, the command first tries to indent the current line, and if the line was already indented, it calls @code{completion-at-point} to complete the text at point (@pxref{Completion in Buffers})."
msgstr ""

#. type: subsection
#: text.texi.orig:2334
#, no-wrap
msgid "Indenting an Entire Region"
msgstr ""

#. type: Plain text
#: text.texi.orig:2338
msgid "This section describes commands that indent all the lines in the region.  They return unpredictable values."
msgstr ""

#. type: deffn
#: text.texi.orig:2339
#, no-wrap
msgid "Command indent-region start end &optional to-column"
msgstr ""

#. type: deffn
#: text.texi.orig:2345
msgid "This command indents each nonblank line starting between @var{start} (inclusive) and @var{end} (exclusive).  If @var{to-column} is @code{nil}, @code{indent-region} indents each nonblank line by calling the current mode's indentation function, the value of @code{indent-line-function}."
msgstr ""

#. type: deffn
#: text.texi.orig:2350
msgid "If @var{to-column} is non-@code{nil}, it should be an integer specifying the number of columns of indentation; then this function gives each line exactly that much indentation, by either adding or deleting whitespace."
msgstr ""

#. type: deffn
#: text.texi.orig:2353
msgid "If there is a fill prefix, @code{indent-region} indents each line by making it start with the fill prefix."
msgstr ""

#. type: defvar
#: text.texi.orig:2355
#, no-wrap
msgid "indent-region-function"
msgstr ""

#. type: defvar
#: text.texi.orig:2361
msgid "The value of this variable is a function that can be used by @code{indent-region} as a short cut.  It should take two arguments, the start and end of the region.  You should design the function so that it will produce the same results as indenting the lines of the region one by one, but presumably faster."
msgstr ""

#. type: defvar
#: text.texi.orig:2364
msgid "If the value is @code{nil}, there is no short cut, and @code{indent-region} actually works line by line."
msgstr ""

#. type: defvar
#: text.texi.orig:2371
msgid "A short-cut function is useful in modes such as C mode and Lisp mode, where the @code{indent-line-function} must scan from the beginning of the function definition: applying it to each line would be quadratic in time.  The short cut can update the scan information as it moves through the lines indenting them; this takes linear time.  In a mode where indenting a line individually is fast, there is no need for a short cut."
msgstr ""

#. type: defvar
#: text.texi.orig:2374
msgid "@code{indent-region} with a non-@code{nil} argument @var{to-column} has a different meaning and does not use this variable."
msgstr ""

#. type: deffn
#: text.texi.orig:2376
#, no-wrap
msgid "Command indent-rigidly start end count"
msgstr ""

#. type: deffn
#: text.texi.orig:2381
msgid "This function indents all lines starting between @var{start} (inclusive) and @var{end} (exclusive) sideways by @var{count} columns.  This ``preserves the shape'' of the affected region, moving it as a rigid unit."
msgstr ""

#. type: deffn
#: text.texi.orig:2386
msgid "This is useful not only for indenting regions of unindented text, but also for indenting regions of formatted code.  For example, if @var{count} is 3, this command adds 3 columns of indentation to every line that begins in the specified region."
msgstr ""

#. type: deffn
#: text.texi.orig:2390
msgid "If called interactively with no prefix argument, this command invokes a transient mode for adjusting indentation rigidly.  @xref{Indentation Commands,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: text.texi.orig:2392
#, no-wrap
msgid "Command indent-code-rigidly start end columns &optional nochange-regexp"
msgstr ""

#. type: deffn
#: text.texi.orig:2395
msgid "This is like @code{indent-rigidly}, except that it doesn't alter lines that start within strings or comments."
msgstr ""

#. type: deffn
#: text.texi.orig:2398
msgid "In addition, it doesn't alter a line if @var{nochange-regexp} matches at the beginning of the line (if @var{nochange-regexp} is non-@code{nil})."
msgstr ""

#. type: subsection
#: text.texi.orig:2401
#, no-wrap
msgid "Indentation Relative to Previous Lines"
msgstr ""

#. type: Plain text
#: text.texi.orig:2405
msgid "This section describes two commands that indent the current line based on the contents of previous lines."
msgstr ""

#. type: deffn
#: text.texi.orig:2406
#, no-wrap
msgid "Command indent-relative &optional unindented-ok"
msgstr ""

#. type: deffn
#: text.texi.orig:2414
msgid "This command inserts whitespace at point, extending to the same column as the next @dfn{indent point} of the previous nonblank line.  An indent point is a non-whitespace character following whitespace.  The next indent point is the first one at a column greater than the current column of point.  For example, if point is underneath and to the left of the first non-blank character of a line of text, it moves to that column by inserting whitespace."
msgstr ""

#. type: deffn
#: text.texi.orig:2421
msgid "If the previous nonblank line has no next indent point (i.e., none at a great enough column position), @code{indent-relative} either does nothing (if @var{unindented-ok} is non-@code{nil}) or calls @code{tab-to-tab-stop}.  Thus, if point is underneath and to the right of the last column of a short line of text, this command ordinarily moves point to the next tab stop by inserting whitespace."
msgstr ""

#. type: deffn
#: text.texi.orig:2423
msgid "The return value of @code{indent-relative} is unpredictable."
msgstr ""

#. type: deffn
#: text.texi.orig:2426
msgid "In the following example, point is at the beginning of the second line:"
msgstr ""

#. type: group
#: text.texi.orig:2431
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"@point{}The quick brown fox jumped.\n"
msgstr ""

#. type: deffn
#: text.texi.orig:2437 text.texi.orig:2458
msgid "Evaluation of the expression @code{(indent-relative nil)} produces the following:"
msgstr ""

#. type: group
#: text.texi.orig:2442
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"            @point{}The quick brown fox jumped.\n"
msgstr ""

#. type: deffn
#: text.texi.orig:2447
msgid "In this next example, point is between the @samp{m} and @samp{p} of @samp{jumped}:"
msgstr ""

#. type: group
#: text.texi.orig:2452
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"The quick brown fox jum@point{}ped.\n"
msgstr ""

#. type: group
#: text.texi.orig:2463
#, no-wrap
msgid ""
"            This line is indented twelve spaces.\n"
"The quick brown fox jum  @point{}ped.\n"
msgstr ""

#. type: deffn
#: text.texi.orig:2467
#, no-wrap
msgid "Command indent-relative-maybe"
msgstr ""

#. type: deffn
#: text.texi.orig:2472
msgid "This command indents the current line like the previous nonblank line, by calling @code{indent-relative} with @code{t} as the @var{unindented-ok} argument.  The return value is unpredictable."
msgstr ""

#. type: deffn
#: text.texi.orig:2475
msgid "If the previous nonblank line has no indent points beyond the current column, this command does nothing."
msgstr ""

#. type: subsection
#: text.texi.orig:2478
#, no-wrap
msgid "Adjustable ``Tab Stops''"
msgstr ""

#. type: cindex
#: text.texi.orig:2479
#, no-wrap
msgid "tabs stops for indentation"
msgstr ""

#. type: Plain text
#: text.texi.orig:2490
msgid "This section explains the mechanism for user-specified ``tab stops'' and the mechanisms that use and set them.  The name ``tab stops'' is used because the feature is similar to that of the tab stops on a typewriter.  The feature works by inserting an appropriate number of spaces and tab characters to reach the next tab stop column; it does not affect the display of tab characters in the buffer (@pxref{Usual Display}).  Note that the @key{TAB} character as input uses this tab stop feature only in a few major modes, such as Text mode.  @xref{Tab Stops,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: deffn
#: text.texi.orig:2491
#, no-wrap
msgid "Command tab-to-tab-stop"
msgstr ""

#. type: deffn
#: text.texi.orig:2494
msgid "This command inserts spaces or tabs before point, up to the next tab stop column defined by @code{tab-stop-list}."
msgstr ""

#. type: defopt
#: text.texi.orig:2496
#, no-wrap
msgid "tab-stop-list"
msgstr ""

#. type: defopt
#: text.texi.orig:2504
msgid "This variable defines the tab stop columns used by @code{tab-to-tab-stop}.  It should be either @code{nil}, or a list of increasing integers, which need not be evenly spaced.  The list is implicitly extended to infinity through repetition of the interval between the last and penultimate elements (or @code{tab-width} if the list has fewer than two elements).  A value of @code{nil} means a tab stop every @code{tab-width} columns."
msgstr ""

#. type: defopt
#: text.texi.orig:2506
msgid "Use @kbd{M-x edit-tab-stops} to edit the location of tab stops interactively."
msgstr ""

#. type: subsection
#: text.texi.orig:2509
#, no-wrap
msgid "Indentation-Based Motion Commands"
msgstr ""

#. type: Plain text
#: text.texi.orig:2513
msgid "These commands, primarily for interactive use, act based on the indentation in the text."
msgstr ""

#. type: deffn
#: text.texi.orig:2514
#, no-wrap
msgid "Command back-to-indentation"
msgstr ""

#. type: deffn
#: text.texi.orig:2519
msgid "This command moves point to the first non-whitespace character in the current line (which is the line in which point is located).  It returns @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2521
#, no-wrap
msgid "Command backward-to-indentation &optional arg"
msgstr ""

#. type: deffn
#: text.texi.orig:2526
msgid "This command moves point backward @var{arg} lines and then to the first nonblank character on that line.  It returns @code{nil}.  If @var{arg} is omitted or @code{nil}, it defaults to 1."
msgstr ""

#. type: deffn
#: text.texi.orig:2528
#, no-wrap
msgid "Command forward-to-indentation &optional arg"
msgstr ""

#. type: deffn
#: text.texi.orig:2533
msgid "This command moves point forward @var{arg} lines and then to the first nonblank character on that line.  It returns @code{nil}.  If @var{arg} is omitted or @code{nil}, it defaults to 1."
msgstr ""

#. type: cindex
#: text.texi.orig:2537
#, no-wrap
msgid "case conversion in buffers"
msgstr ""

#. type: Plain text
#: text.texi.orig:2543
msgid "The case change commands described here work on text in the current buffer.  @xref{Case Conversion}, for case conversion functions that work on strings and characters.  @xref{Case Tables}, for how to customize which characters are upper or lower case and how to convert them."
msgstr ""

#. type: deffn
#: text.texi.orig:2544
#, no-wrap
msgid "Command capitalize-region start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2549
msgid "This function capitalizes all words in the region defined by @var{start} and @var{end}.  To capitalize means to convert each word's first character to upper case and convert the rest of each word to lower case.  The function returns @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2552
msgid "If one end of the region is in the middle of a word, the part of the word within the region is treated as an entire word."
msgstr ""

#. type: deffn
#: text.texi.orig:2555
msgid "When @code{capitalize-region} is called interactively, @var{start} and @var{end} are point and the mark, with the smallest first."
msgstr ""

#. type: group
#: text.texi.orig:2561
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of the 5th foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: text.texi.orig:2566
#, no-wrap
msgid ""
"(capitalize-region 1 37)\n"
"@result{} nil\n"
"\n"
msgstr ""

#. type: group
#: text.texi.orig:2570
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This Is The Contents Of The 5th Foo.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: text.texi.orig:2574
#, no-wrap
msgid "Command downcase-region start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2578
msgid "This function converts all of the letters in the region defined by @var{start} and @var{end} to lower case.  The function returns @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2581
msgid "When @code{downcase-region} is called interactively, @var{start} and @var{end} are point and the mark, with the smallest first."
msgstr ""

#. type: deffn
#: text.texi.orig:2583
#, no-wrap
msgid "Command upcase-region start end"
msgstr ""

#. type: deffn
#: text.texi.orig:2587
msgid "This function converts all of the letters in the region defined by @var{start} and @var{end} to upper case.  The function returns @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2590
msgid "When @code{upcase-region} is called interactively, @var{start} and @var{end} are point and the mark, with the smallest first."
msgstr ""

#. type: deffn
#: text.texi.orig:2592
#, no-wrap
msgid "Command capitalize-word count"
msgstr ""

#. type: deffn
#: text.texi.orig:2599
msgid "This function capitalizes @var{count} words after point, moving point over as it does.  To capitalize means to convert each word's first character to upper case and convert the rest of each word to lower case.  If @var{count} is negative, the function capitalizes the @minus{}@var{count} previous words but does not move point.  The value is @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2602
msgid "If point is in the middle of a word, the part of the word before point is ignored when moving forward.  The rest is treated as an entire word."
msgstr ""

#. type: deffn
#: text.texi.orig:2605
msgid "When @code{capitalize-word} is called interactively, @var{count} is set to the numeric prefix argument."
msgstr ""

#. type: deffn
#: text.texi.orig:2607
#, no-wrap
msgid "Command downcase-word count"
msgstr ""

#. type: deffn
#: text.texi.orig:2612
msgid "This function converts the @var{count} words after point to all lower case, moving point over as it does.  If @var{count} is negative, it converts the @minus{}@var{count} previous words but does not move point.  The value is @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2615
msgid "When @code{downcase-word} is called interactively, @var{count} is set to the numeric prefix argument."
msgstr ""

#. type: deffn
#: text.texi.orig:2617
#, no-wrap
msgid "Command upcase-word count"
msgstr ""

#. type: deffn
#: text.texi.orig:2622
msgid "This function converts the @var{count} words after point to all upper case, moving point over as it does.  If @var{count} is negative, it converts the @minus{}@var{count} previous words but does not move point.  The value is @code{nil}."
msgstr ""

#. type: deffn
#: text.texi.orig:2625
msgid "When @code{upcase-word} is called interactively, @var{count} is set to the numeric prefix argument."
msgstr ""

#. type: cindex
#: text.texi.orig:2629
#, no-wrap
msgid "text properties"
msgstr ""

#. type: cindex
#: text.texi.orig:2630
#, no-wrap
msgid "attributes of text"
msgstr ""

#. type: cindex
#: text.texi.orig:2631
#, no-wrap
msgid "properties of text"
msgstr ""

#. type: Plain text
#: text.texi.orig:2640
msgid "Each character position in a buffer or a string can have a @dfn{text property list}, much like the property list of a symbol (@pxref{Property Lists}).  The properties belong to a particular character at a particular place, such as, the letter @samp{T} at the beginning of this sentence or the first @samp{o} in @samp{foo}---if the same character occurs in two different places, the two occurrences in general have different properties."
msgstr ""

#. type: Plain text
#: text.texi.orig:2647
msgid "Each property has a name and a value.  Both of these can be any Lisp object, but the name is normally a symbol.  Typically each property name symbol is used for a particular purpose; for instance, the text property @code{face} specifies the faces for displaying the character (@pxref{Special Properties}).  The usual way to access the property list is to specify a name and ask what value corresponds to it."
msgstr ""

#. type: Plain text
#: text.texi.orig:2652
msgid "If a character has a @code{category} property, we call it the @dfn{property category} of the character.  It should be a symbol.  The properties of the symbol serve as defaults for the properties of the character."
msgstr ""

#. type: Plain text
#: text.texi.orig:2656
msgid "Copying text between strings and buffers preserves the properties along with the characters; this includes such diverse functions as @code{substring}, @code{insert}, and @code{buffer-substring}."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:2675
#, no-wrap
msgid "Examining Properties"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Looking at the properties of one character."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:2768
#, no-wrap
msgid "Changing Properties"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Setting the properties of a range of text."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:2933
#, no-wrap
msgid "Property Search"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Searching for where a property changes value."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3075
#, no-wrap
msgid "Special Properties"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Particular properties with special meanings."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3468
#, no-wrap
msgid "Format Properties"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Properties for representing formatting of text."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3496
#, no-wrap
msgid "Sticky Properties"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "How inserted text gets properties from neighboring text."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3581
#, no-wrap
msgid "Lazy Properties"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Computing text properties in a lazy fashion only when text is examined."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3626
#, no-wrap
msgid "Clickable Text"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Using text properties to make regions of text do something when you click on them."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3823
#, no-wrap
msgid "Fields"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "The @code{field} property defines fields within the buffer."
msgstr ""

#. type: node
#: text.texi.orig:2673 text.texi.orig:3940
#, no-wrap
msgid "Not Intervals"
msgstr ""

#. type: menuentry
#: text.texi.orig:2673
msgid "Why text properties do not use Lisp-visible text intervals."
msgstr ""

#. type: subsection
#: text.texi.orig:2676
#, no-wrap
msgid "Examining Text Properties"
msgstr ""

#. type: cindex
#: text.texi.orig:2677
#, no-wrap
msgid "examining text properties"
msgstr ""

#. type: cindex
#: text.texi.orig:2678
#, no-wrap
msgid "text properties, examining"
msgstr ""

#. type: Plain text
#: text.texi.orig:2685
msgid "The simplest way to examine text properties is to ask for the value of a particular property of a particular character.  For that, use @code{get-text-property}.  Use @code{text-properties-at} to get the entire property list of a character.  @xref{Property Search}, for functions to examine the properties of a number of characters at once."
msgstr ""

#. type: Plain text
#: text.texi.orig:2689
msgid "These functions handle both strings and buffers.  Keep in mind that positions in a string start from 0, whereas positions in a buffer start from 1."
msgstr ""

#. type: defun
#: text.texi.orig:2690
#, no-wrap
msgid "get-text-property pos prop &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2695
msgid "This function returns the value of the @var{prop} property of the character after position @var{pos} in @var{object} (a buffer or string).  The argument @var{object} is optional and defaults to the current buffer."
msgstr ""

#. type: defun
#: text.texi.orig:2699
msgid "If there is no @var{prop} property strictly speaking, but the character has a property category that is a symbol, then @code{get-text-property} returns the @var{prop} property of that symbol."
msgstr ""

#. type: defun
#: text.texi.orig:2701
#, no-wrap
msgid "get-char-property position prop &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2704
msgid "This function is like @code{get-text-property}, except that it checks overlays first and then text properties.  @xref{Overlays}."
msgstr ""

#. type: defun
#: text.texi.orig:2712
msgid "The argument @var{object} may be a string, a buffer, or a window.  If it is a window, then the buffer displayed in that window is used for text properties and overlays, but only the overlays active for that window are considered.  If @var{object} is a buffer, then overlays in that buffer are considered first, in order of decreasing priority, followed by the text properties.  If @var{object} is a string, only text properties are considered, since strings never have overlays."
msgstr ""

#. type: defun
#: text.texi.orig:2714
#, no-wrap
msgid "get-pos-property position prop &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2719
msgid "This function is like @code{get-char-property}, except that it pays attention to properties' stickiness and overlays' advancement settings instead of the property of the character at (i.e. right after)  @var{position}."
msgstr ""

#. type: defun
#: text.texi.orig:2721
#, no-wrap
msgid "get-char-property-and-overlay position prop &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2724
msgid "This is like @code{get-char-property}, but gives extra information about the overlay that the property value comes from."
msgstr ""

#. type: defun
#: text.texi.orig:2730
msgid "Its value is a cons cell whose @sc{car} is the property value, the same value @code{get-char-property} would return with the same arguments.  Its @sc{cdr} is the overlay in which the property was found, or @code{nil}, if it was found as a text property or not found at all."
msgstr ""

#. type: defun
#: text.texi.orig:2733
msgid "If @var{position} is at the end of @var{object}, both the @sc{car} and the @sc{cdr} of the value are @code{nil}."
msgstr ""

#. type: defvar
#: text.texi.orig:2735
#, no-wrap
msgid "char-property-alias-alist"
msgstr ""

#. type: defvar
#: text.texi.orig:2742
msgid "This variable holds an alist which maps property names to a list of alternative property names.  If a character does not specify a direct value for a property, the alternative property names are consulted in order; the first non-@code{nil} value is used.  This variable takes precedence over @code{default-text-properties}, and @code{category} properties take precedence over this variable."
msgstr ""

#. type: defun
#: text.texi.orig:2744
#, no-wrap
msgid "text-properties-at position &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2748
msgid "This function returns the entire property list of the character at @var{position} in the string or buffer @var{object}.  If @var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defvar
#: text.texi.orig:2750
#, no-wrap
msgid "default-text-properties"
msgstr ""

#. type: defvar
#: text.texi.orig:2756
msgid "This variable holds a property list giving default values for text properties.  Whenever a character does not specify a value for a property, neither directly, through a category symbol, or through @code{char-property-alias-alist}, the value stored in this list is used instead.  Here is an example:"
msgstr ""

#. type: example
#: text.texi.orig:2765
#, no-wrap
msgid ""
"(setq default-text-properties '(foo 69)\n"
"      char-property-alias-alist nil)\n"
";; @r{Make sure character 1 has no properties of its own.}\n"
"(set-text-properties 1 2 nil)\n"
";; @r{What we get, when we ask, is the default value.}\n"
"(get-text-property 1 'foo)\n"
"     @result{} 69\n"
msgstr ""

#. type: subsection
#: text.texi.orig:2769
#, no-wrap
msgid "Changing Text Properties"
msgstr ""

#. type: cindex
#: text.texi.orig:2770
#, no-wrap
msgid "changing text properties"
msgstr ""

#. type: cindex
#: text.texi.orig:2771
#, no-wrap
msgid "text properties, changing"
msgstr ""

#. type: Plain text
#: text.texi.orig:2778
msgid "The primitives for changing properties apply to a specified range of text in a buffer or string.  The function @code{set-text-properties} (see end of section) sets the entire property list of the text in that range; more often, it is useful to add, change, or delete just certain properties specified by name."
msgstr ""

#. type: Plain text
#: text.texi.orig:2785
msgid "Since text properties are considered part of the contents of the buffer (or string), and can affect how a buffer looks on the screen, any change in buffer text properties marks the buffer as modified.  Buffer text property changes are undoable also (@pxref{Undo}).  Positions in a string start from 0, whereas positions in a buffer start from 1."
msgstr ""

#. type: defun
#: text.texi.orig:2786
#, no-wrap
msgid "put-text-property start end prop value &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2790
msgid "This function sets the @var{prop} property to @var{value} for the text between @var{start} and @var{end} in the string or buffer @var{object}.  If @var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: text.texi.orig:2792
#, no-wrap
msgid "add-text-properties start end props &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2796
msgid "This function adds or overrides text properties for the text between @var{start} and @var{end} in the string or buffer @var{object}.  If @var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: text.texi.orig:2801
msgid "The argument @var{props} specifies which properties to add.  It should have the form of a property list (@pxref{Property Lists}): a list whose elements include the property names followed alternately by the corresponding values."
msgstr ""

#. type: defun
#: text.texi.orig:2805
msgid "The return value is @code{t} if the function actually changed some property's value; @code{nil} otherwise (if @var{props} is @code{nil} or its values agree with those in the text)."
msgstr ""

#. type: defun
#: text.texi.orig:2808
msgid "For example, here is how to set the @code{comment} and @code{face} properties of a range of text:"
msgstr ""

#. type: example
#: text.texi.orig:2812
#, no-wrap
msgid ""
"(add-text-properties @var{start} @var{end}\n"
"                     '(comment t face highlight))\n"
msgstr ""

#. type: defun
#: text.texi.orig:2815
#, no-wrap
msgid "remove-text-properties start end props &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2819
msgid "This function deletes specified text properties from the text between @var{start} and @var{end} in the string or buffer @var{object}.  If @var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: text.texi.orig:2825
msgid "The argument @var{props} specifies which properties to delete.  It should have the form of a property list (@pxref{Property Lists}): a list whose elements are property names alternating with corresponding values.  But only the names matter---the values that accompany them are ignored.  For example, here's how to remove the @code{face} property."
msgstr ""

#. type: example
#: text.texi.orig:2828
#, no-wrap
msgid "(remove-text-properties @var{start} @var{end} '(face nil))\n"
msgstr ""

#. type: defun
#: text.texi.orig:2833
msgid "The return value is @code{t} if the function actually changed some property's value; @code{nil} otherwise (if @var{props} is @code{nil} or if no character in the specified text had any of those properties)."
msgstr ""

#. type: defun
#: text.texi.orig:2837
msgid "To remove all text properties from certain text, use @code{set-text-properties} and specify @code{nil} for the new property list."
msgstr ""

#. type: defun
#: text.texi.orig:2839
#, no-wrap
msgid "remove-list-of-text-properties start end list-of-properties &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2843
msgid "Like @code{remove-text-properties} except that @var{list-of-properties} is a list of property names only, not an alternating list of property names and values."
msgstr ""

#. type: defun
#: text.texi.orig:2845
#, no-wrap
msgid "set-text-properties start end props &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:2849
msgid "This function completely replaces the text property list for the text between @var{start} and @var{end} in the string or buffer @var{object}.  If @var{object} is @code{nil}, it defaults to the current buffer."
msgstr ""

#. type: defun
#: text.texi.orig:2852
msgid "The argument @var{props} is the new property list.  It should be a list whose elements are property names alternating with corresponding values."
msgstr ""

#. type: defun
#: text.texi.orig:2855
msgid "After @code{set-text-properties} returns, all the characters in the specified range have identical properties."
msgstr ""

#. type: defun
#: text.texi.orig:2858
msgid "If @var{props} is @code{nil}, the effect is to get rid of all properties from the specified range of text.  Here's an example:"
msgstr ""

#. type: example
#: text.texi.orig:2861
#, no-wrap
msgid "(set-text-properties @var{start} @var{end} nil)\n"
msgstr ""

#. type: defun
#: text.texi.orig:2864
msgid "Do not rely on the return value of this function."
msgstr ""

#. type: defun
#: text.texi.orig:2866
#, no-wrap
msgid "add-face-text-property start end face &optional appendp object"
msgstr ""

#. type: defun
#: text.texi.orig:2872
msgid "This function acts on the text between @var{start} and @var{end}, adding the face @var{face} to the @code{face} text property.  @var{face} should be a valid value for the @code{face} property (@pxref{Special Properties}), such as a face name or an anonymous face (@pxref{Faces})."
msgstr ""

#. type: defun
#: text.texi.orig:2880
msgid "If any text in the region already has a non-@code{nil} @code{face} property, those face(s) are retained.  This function sets the @code{face} property to a list of faces, with @var{face} as the first element (by default) and the pre-existing faces as the remaining elements.  If the optional argument @var{append} is non-@code{nil}, @var{face} is appended to the end of the list instead.  Note that in a face list, the first occurring value for each attribute takes precedence."
msgstr ""

#. type: defun
#: text.texi.orig:2883
msgid "For example, the following code would assign a italicized green face to the text between @var{start} and @var{end}:"
msgstr ""

#. type: example
#: text.texi.orig:2888
#, no-wrap
msgid ""
"(add-face-text-property @var{start} @var{end} 'italic)\n"
"(add-face-text-property @var{start} @var{end} '(:foreground \"red\"))\n"
"(add-face-text-property @var{start} @var{end} '(:foreground \"green\"))\n"
msgstr ""

#. type: defun
#: text.texi.orig:2894
msgid "The optional argument @var{object}, if non-@code{nil}, specifies a buffer or string to act on, rather than the current buffer.  If @var{object} is a string, then @var{start} and @var{end} are zero-based indices into the string."
msgstr ""

#. type: Plain text
#: text.texi.orig:2898
msgid "The easiest way to make a string with text properties is with @code{propertize}:"
msgstr ""

#. type: defun
#: text.texi.orig:2899
#, no-wrap
msgid "propertize string &rest properties"
msgstr ""

#. type: defun
#: text.texi.orig:2904
msgid "This function returns a copy of @var{string} with the text properties @var{properties} added.  These properties apply to all the characters in the string that is returned.  Here is an example that constructs a string with a @code{face} property and a @code{mouse-face} property:"
msgstr ""

#. type: smallexample
#: text.texi.orig:2909
#, no-wrap
msgid ""
"(propertize \"foo\" 'face 'italic\n"
"            'mouse-face 'bold-italic)\n"
"     @result{} #(\"foo\" 0 3 (mouse-face bold-italic face italic))\n"
msgstr ""

#. type: defun
#: text.texi.orig:2914
msgid "To put different properties on various parts of a string, you can construct each part with @code{propertize} and then combine them with @code{concat}:"
msgstr ""

#. type: smallexample
#: text.texi.orig:2926
#, no-wrap
msgid ""
"(concat\n"
" (propertize \"foo\" 'face 'italic\n"
"             'mouse-face 'bold-italic)\n"
" \" and \"\n"
" (propertize \"bar\" 'face 'italic\n"
"             'mouse-face 'bold-italic))\n"
"     @result{} #(\"foo and bar\"\n"
"                 0 3 (face italic mouse-face bold-italic)\n"
"                 3 8 nil\n"
"                 8 11 (face italic mouse-face bold-italic))\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:2932
msgid "@xref{Buffer Contents}, for the function @code{buffer-substring-no-properties}, which copies text from the buffer but does not copy its properties."
msgstr ""

#. type: subsection
#: text.texi.orig:2934
#, no-wrap
msgid "Text Property Search Functions"
msgstr ""

#. type: cindex
#: text.texi.orig:2935
#, no-wrap
msgid "searching text properties"
msgstr ""

#. type: cindex
#: text.texi.orig:2936
#, no-wrap
msgid "text properties, searching"
msgstr ""

#. type: Plain text
#: text.texi.orig:2942
msgid "In typical use of text properties, most of the time several or many consecutive characters have the same value for a property.  Rather than writing your programs to examine characters one by one, it is much faster to process chunks of text that have the same property value."
msgstr ""

#. type: Plain text
#: text.texi.orig:2946
msgid "Here are functions you can use to do this.  They use @code{eq} for comparing property values.  In all cases, @var{object} defaults to the current buffer."
msgstr ""

#. type: Plain text
#: text.texi.orig:2951
msgid "For good performance, it's very important to use the @var{limit} argument to these functions, especially the ones that search for a single property---otherwise, they may spend a long time scanning to the end of the buffer, if the property you are interested in does not change."
msgstr ""

#. type: Plain text
#: text.texi.orig:2956
msgid "These functions do not move point; instead, they return a position (or @code{nil}).  Remember that a position is always between two characters; the position returned by these functions is between two characters with different properties."
msgstr ""

#. type: defun
#: text.texi.orig:2957
#, no-wrap
msgid "next-property-change pos &optional object limit"
msgstr ""

#. type: defun
#: text.texi.orig:2964
msgid "The function scans the text forward from position @var{pos} in the string or buffer @var{object} until it finds a change in some text property, then returns the position of the change.  In other words, it returns the position of the first character beyond @var{pos} whose properties are not identical to those of the character just after @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:2968
msgid "If @var{limit} is non-@code{nil}, then the scan ends at position @var{limit}.  If there is no property change before that point, this function returns @var{limit}."
msgstr ""

#. type: defun
#: text.texi.orig:2973
msgid "The value is @code{nil} if the properties remain unchanged all the way to the end of @var{object} and @var{limit} is @code{nil}.  If the value is non-@code{nil}, it is a position greater than or equal to @var{pos}.  The value equals @var{pos} only when @var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:2976
msgid "Here is an example of how to scan the buffer by chunks of text within which all properties are constant:"
msgstr ""

#. type: smallexample
#: text.texi.orig:2985
#, no-wrap
msgid ""
"(while (not (eobp))\n"
"  (let ((plist (text-properties-at (point)))\n"
"        (next-change\n"
"         (or (next-property-change (point) (current-buffer))\n"
"             (point-max))))\n"
"    @r{Process text from point to @var{next-change}@dots{}}\n"
"    (goto-char next-change)))\n"
msgstr ""

#. type: defun
#: text.texi.orig:2988
#, no-wrap
msgid "previous-property-change pos &optional object limit"
msgstr ""

#. type: defun
#: text.texi.orig:2993
msgid "This is like @code{next-property-change}, but scans back from @var{pos} instead of forward.  If the value is non-@code{nil}, it is a position less than or equal to @var{pos}; it equals @var{pos} only if @var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:2995
#, no-wrap
msgid "next-single-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: text.texi.orig:3002
msgid "The function scans text for a change in the @var{prop} property, then returns the position of the change.  The scan goes forward from position @var{pos} in the string or buffer @var{object}.  In other words, this function returns the position of the first character beyond @var{pos} whose @var{prop} property differs from that of the character just after @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3006
msgid "If @var{limit} is non-@code{nil}, then the scan ends at position @var{limit}.  If there is no property change before that point, @code{next-single-property-change} returns @var{limit}."
msgstr ""

#. type: defun
#: text.texi.orig:3011
msgid "The value is @code{nil} if the property remains unchanged all the way to the end of @var{object} and @var{limit} is @code{nil}.  If the value is non-@code{nil}, it is a position greater than or equal to @var{pos}; it equals @var{pos} only if @var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3013
#, no-wrap
msgid "previous-single-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: text.texi.orig:3018
msgid "This is like @code{next-single-property-change}, but scans back from @var{pos} instead of forward.  If the value is non-@code{nil}, it is a position less than or equal to @var{pos}; it equals @var{pos} only if @var{limit} equals @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3020
#, no-wrap
msgid "next-char-property-change pos &optional limit"
msgstr ""

#. type: defun
#: text.texi.orig:3029
msgid "This is like @code{next-property-change} except that it considers overlay properties as well as text properties, and if no change is found before the end of the buffer, it returns the maximum buffer position rather than @code{nil} (in this sense, it resembles the corresponding overlay function @code{next-overlay-change}, rather than @code{next-property-change}).  There is no @var{object} operand because this function operates only on the current buffer.  It returns the next address at which either kind of property changes."
msgstr ""

#. type: defun
#: text.texi.orig:3031
#, no-wrap
msgid "previous-char-property-change pos &optional limit"
msgstr ""

#. type: defun
#: text.texi.orig:3035
msgid "This is like @code{next-char-property-change}, but scans back from @var{pos} instead of forward, and returns the minimum buffer position if no change is found."
msgstr ""

#. type: defun
#: text.texi.orig:3037
#, no-wrap
msgid "next-single-char-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: text.texi.orig:3045
msgid "This is like @code{next-single-property-change} except that it considers overlay properties as well as text properties, and if no change is found before the end of the @var{object}, it returns the maximum valid position in @var{object} rather than @code{nil}.  Unlike @code{next-char-property-change}, this function @emph{does} have an @var{object} operand; if @var{object} is not a buffer, only text-properties are considered."
msgstr ""

#. type: defun
#: text.texi.orig:3047
#, no-wrap
msgid "previous-single-char-property-change pos prop &optional object limit"
msgstr ""

#. type: defun
#: text.texi.orig:3051
msgid "This is like @code{next-single-char-property-change}, but scans back from @var{pos} instead of forward, and returns the minimum valid position in @var{object} if no change is found."
msgstr ""

#. type: defun
#: text.texi.orig:3053
#, no-wrap
msgid "text-property-any start end prop value &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:3058
msgid "This function returns non-@code{nil} if at least one character between @var{start} and @var{end} has a property @var{prop} whose value is @var{value}.  More precisely, it returns the position of the first such character.  Otherwise, it returns @code{nil}."
msgstr ""

#. type: defun
#: text.texi.orig:3062 text.texi.orig:3073
msgid "The optional fifth argument, @var{object}, specifies the string or buffer to scan.  Positions are relative to @var{object}.  The default for @var{object} is the current buffer."
msgstr ""

#. type: defun
#: text.texi.orig:3064
#, no-wrap
msgid "text-property-not-all start end prop value &optional object"
msgstr ""

#. type: defun
#: text.texi.orig:3069
msgid "This function returns non-@code{nil} if at least one character between @var{start} and @var{end} does not have a property @var{prop} with value @var{value}.  More precisely, it returns the position of the first such character.  Otherwise, it returns @code{nil}."
msgstr ""

#. type: subsection
#: text.texi.orig:3076
#, no-wrap
msgid "Properties with Special Meanings"
msgstr ""

#. type: Plain text
#: text.texi.orig:3082
msgid "Here is a table of text property names that have special built-in meanings.  The following sections list a few additional special property names that control filling and property inheritance.  All other names have no standard meaning, and you can use them as you like."
msgstr ""

#. type: Plain text
#: text.texi.orig:3087
msgid "Note: the properties @code{composition}, @code{display}, @code{invisible} and @code{intangible} can also cause point to move to an acceptable place, after each Emacs command.  @xref{Adjusting Point}."
msgstr ""

#. type: cindex
#: text.texi.orig:3089
#, no-wrap
msgid "property category of text character"
msgstr ""

#. type: kindex
#: text.texi.orig:3091
#, no-wrap
msgid "category @r{(text property)}"
msgstr ""

#. type: item
#: text.texi.orig:3092
#, no-wrap
msgid "category"
msgstr ""

#. type: table
#: text.texi.orig:3097
msgid "If a character has a @code{category} property, we call it the @dfn{property category} of the character.  It should be a symbol.  The properties of this symbol serve as defaults for the properties of the character."
msgstr ""

#. type: item
#: text.texi.orig:3098
#, no-wrap
msgid "face"
msgstr ""

#. type: cindex
#: text.texi.orig:3099
#, no-wrap
msgid "face codes of text"
msgstr ""

#. type: kindex
#: text.texi.orig:3100
#, no-wrap
msgid "face @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3103
msgid "The @code{face} property controls the appearance of the character (@pxref{Faces}).  The value of the property can be the following:"
msgstr ""

#. type: itemize
#: text.texi.orig:3107
msgid "A face name (a symbol or string)."
msgstr ""

#. type: itemize
#: text.texi.orig:3112
msgid "An anonymous face: a property list of the form @code{(@var{keyword} @var{value} @dots{})}, where each @var{keyword} is a face attribute name and @var{value} is a value for that attribute."
msgstr ""

#. type: itemize
#: text.texi.orig:3118
msgid "A list of faces.  Each list element should be either a face name or an anonymous face.  This specifies a face which is an aggregate of the attributes of each of the listed faces.  Faces occurring earlier in the list have higher priority."
msgstr ""

#. type: itemize
#: text.texi.orig:3126
msgid "A cons cell of the form @code{(foreground-color . @var{color-name})} or @code{(background-color . @var{color-name})}.  This specifies the foreground or background color, similar to @code{(:foreground @var{color-name})} or @code{(:background @var{color-name})}.  This form is supported for backward compatibility only, and should be avoided."
msgstr ""

#. type: table
#: text.texi.orig:3131
msgid "Font Lock mode (@pxref{Font Lock Mode}) works in most buffers by dynamically updating the @code{face} property of characters based on the context."
msgstr ""

#. type: table
#: text.texi.orig:3134
msgid "The @code{add-face-text-property} function provides a convenient way to set this text property.  @xref{Changing Properties}."
msgstr ""

#. type: item
#: text.texi.orig:3135
#, no-wrap
msgid "font-lock-face"
msgstr ""

#. type: kindex
#: text.texi.orig:3136
#, no-wrap
msgid "font-lock-face @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3143
msgid "This property specifies a value for the @code{face} property that Font Lock mode should apply to the underlying text.  It is one of the fontification methods used by Font Lock mode, and is useful for special modes that implement their own highlighting.  @xref{Precalculated Fontification}.  When Font Lock mode is disabled, @code{font-lock-face} has no effect."
msgstr ""

#. type: code{#1}
#: text.texi.orig:3144 text.texi.orig:3738
#, no-wrap
msgid "mouse-face"
msgstr ""

#. type: kindex
#: text.texi.orig:3145
#, no-wrap
msgid "mouse-face @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3150
msgid "This property is used instead of @code{face} when the mouse is on or near the character.  For this purpose, ``near'' means that all text between the character and where the mouse is have the same @code{mouse-face} property value."
msgstr ""

#. type: table
#: text.texi.orig:3155
msgid "Emacs ignores all face attributes from the @code{mouse-face} property that alter the text size (e.g., @code{:height}, @code{:weight}, and @code{:slant}).  Those attributes are always the same as for the unhighlighted text."
msgstr ""

#. type: item
#: text.texi.orig:3156
#, no-wrap
msgid "fontified"
msgstr ""

#. type: kindex
#: text.texi.orig:3157
#, no-wrap
msgid "fontified @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3163
msgid "This property says whether the text is ready for display.  If @code{nil}, Emacs's redisplay routine calls the functions in @code{fontification-functions} (@pxref{Auto Faces}) to prepare this part of the buffer before it is displayed.  It is used internally by the ``just in time'' font locking code."
msgstr ""

#. type: item
#: text.texi.orig:3164
#, no-wrap
msgid "display"
msgstr ""

#. type: table
#: text.texi.orig:3169
msgid "This property activates various features that change the way text is displayed.  For example, it can make text appear taller or shorter, higher or lower, wider or narrow, or replaced with an image.  @xref{Display Property}."
msgstr ""

#. type: item
#: text.texi.orig:3170
#, no-wrap
msgid "help-echo"
msgstr ""

#. type: kindex
#: text.texi.orig:3171
#, no-wrap
msgid "help-echo @r{(text property)}"
msgstr ""

#. type: cindex
#: text.texi.orig:3172
#, no-wrap
msgid "tooltip"
msgstr ""

#. type: anchor{#1}
#: text.texi.orig:3178
msgid "Text help-echo"
msgstr ""

#. type: table
#: text.texi.orig:3178
msgid "If text has a string as its @code{help-echo} property, then when you move the mouse onto that text, Emacs displays that string in the echo area, or in the tooltip window (@pxref{Tooltips,,, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: table
#: text.texi.orig:3186
msgid "If the value of the @code{help-echo} property is a function, that function is called with three arguments, @var{window}, @var{object} and @var{pos} and should return a help string or @code{nil} for none.  The first argument, @var{window} is the window in which the help was found.  The second, @var{object}, is the buffer, overlay or string which had the @code{help-echo} property.  The @var{pos} argument is as follows:"
msgstr ""

#. type: itemize
#: text.texi.orig:3190
msgid "If @var{object} is a buffer, @var{pos} is the position in the buffer."
msgstr ""

#. type: itemize
#: text.texi.orig:3193
msgid "If @var{object} is an overlay, that overlay has a @code{help-echo} property, and @var{pos} is the position in the overlay's buffer."
msgstr ""

#. type: itemize
#: text.texi.orig:3197
msgid "If @var{object} is a string (an overlay string or a string displayed with the @code{display} property), @var{pos} is the position in that string."
msgstr ""

#. type: table
#: text.texi.orig:3201
msgid "If the value of the @code{help-echo} property is neither a function nor a string, it is evaluated to obtain a help string."
msgstr ""

#. type: table
#: text.texi.orig:3204
msgid "You can alter the way help text is displayed by setting the variable @code{show-help-function} (@pxref{Help display})."
msgstr ""

#. type: table
#: text.texi.orig:3206
msgid "This feature is used in the mode line and for other active text."
msgstr ""

#. type: item
#: text.texi.orig:3207
#, no-wrap
msgid "keymap"
msgstr ""

#. type: cindex
#: text.texi.orig:3208
#, no-wrap
msgid "keymap of character"
msgstr ""

#. type: kindex
#: text.texi.orig:3209
#, no-wrap
msgid "keymap @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3215
msgid "The @code{keymap} property specifies an additional keymap for commands.  When this keymap applies, it is used for key lookup before the minor mode keymaps and before the buffer's local map.  @xref{Active Keymaps}.  If the property value is a symbol, the symbol's function definition is used as the keymap."
msgstr ""

#. type: table
#: text.texi.orig:3221
msgid "The property's value for the character before point applies if it is non-@code{nil} and rear-sticky, and the property's value for the character after point applies if it is non-@code{nil} and front-sticky.  (For mouse clicks, the position of the click is used instead of the position of point.)"
msgstr ""

#. type: item
#: text.texi.orig:3222
#, no-wrap
msgid "local-map"
msgstr ""

#. type: kindex
#: text.texi.orig:3223
#, no-wrap
msgid "local-map @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3228
msgid "This property works like @code{keymap} except that it specifies a keymap to use @emph{instead of} the buffer's local map.  For most purposes (perhaps all purposes), it is better to use the @code{keymap} property."
msgstr ""

#. type: item
#: text.texi.orig:3229
#, no-wrap
msgid "syntax-table"
msgstr ""

#. type: table
#: text.texi.orig:3232
msgid "The @code{syntax-table} property overrides what the syntax table says about this particular character.  @xref{Syntax Properties}."
msgstr ""

#. type: item
#: text.texi.orig:3233
#, no-wrap
msgid "read-only"
msgstr ""

#. type: cindex
#: text.texi.orig:3234
#, no-wrap
msgid "read-only character"
msgstr ""

#. type: kindex
#: text.texi.orig:3235
#, no-wrap
msgid "read-only @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3240
msgid "If a character has the property @code{read-only}, then modifying that character is not allowed.  Any command that would do so gets an error, @code{text-read-only}.  If the property value is a string, that string is used as the error message."
msgstr ""

#. type: table
#: text.texi.orig:3245
msgid "Insertion next to a read-only character is an error if inserting ordinary text there would inherit the @code{read-only} property due to stickiness.  Thus, you can control permission to insert next to read-only text by controlling the stickiness.  @xref{Sticky Properties}."
msgstr ""

#. type: table
#: text.texi.orig:3250
msgid "Since changing properties counts as modifying the buffer, it is not possible to remove a @code{read-only} property unless you know the special trick: bind @code{inhibit-read-only} to a non-@code{nil} value and then remove the property.  @xref{Read Only Buffers}."
msgstr ""

#. type: item
#: text.texi.orig:3251
#, no-wrap
msgid "invisible"
msgstr ""

#. type: kindex
#: text.texi.orig:3252
#, no-wrap
msgid "invisible @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3255
msgid "A non-@code{nil} @code{invisible} property can make a character invisible on the screen.  @xref{Invisible Text}, for details."
msgstr ""

#. type: item
#: text.texi.orig:3256
#, no-wrap
msgid "intangible"
msgstr ""

#. type: kindex
#: text.texi.orig:3257
#, no-wrap
msgid "intangible @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3263
msgid "If a group of consecutive characters have equal and non-@code{nil} @code{intangible} properties, then you cannot place point between them.  If you try to move point forward into the group, point actually moves to the end of the group.  If you try to move point backward into the group, point actually moves to the start of the group."
msgstr ""

#. type: table
#: text.texi.orig:3267
msgid "If consecutive characters have unequal non-@code{nil} @code{intangible} properties, they belong to separate groups; each group is separately treated as described above."
msgstr ""

#. type: table
#: text.texi.orig:3270
msgid "When the variable @code{inhibit-point-motion-hooks} is non-@code{nil}, the @code{intangible} property is ignored."
msgstr ""

#. type: table
#: text.texi.orig:3276
msgid "Beware: this property operates at a very low level, and affects a lot of code in unexpected ways.  So use it with extreme caution.  A common misuse is to put an intangible property on invisible text, which is actually unnecessary since the command loop will move point outside of the invisible text at the end of each command anyway.  @xref{Adjusting Point}."
msgstr ""

#. type: item
#: text.texi.orig:3277
#, no-wrap
msgid "field"
msgstr ""

#. type: kindex
#: text.texi.orig:3278
#, no-wrap
msgid "field @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3283
msgid "Consecutive characters with the same @code{field} property constitute a @dfn{field}.  Some motion functions including @code{forward-word} and @code{beginning-of-line} stop moving at a field boundary.  @xref{Fields}."
msgstr ""

#. type: item
#: text.texi.orig:3284
#, no-wrap
msgid "cursor"
msgstr ""

#. type: kindex
#: text.texi.orig:3285
#, no-wrap
msgid "cursor @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3301
msgid "Normally, the cursor is displayed at the beginning or the end of any overlay and text property strings present at the current buffer position.  You can place the cursor on any desired character of these strings by giving that character a non-@code{nil} @code{cursor} text property.  In addition, if the value of the @code{cursor} property is an integer, it specifies the number of buffer's character positions, starting with the position where the overlay or the @code{display} property begins, for which the cursor should be displayed on that character.  Specifically, if the value of the @code{cursor} property of a character is the number @var{n}, the cursor will be displayed on this character for any buffer position in the range @code{[@var{ovpos}..@var{ovpos}+@var{n})}, where @var{ovpos} is the overlay's starting position given by @code{overlay-start} (@pxref{Managing Overlays}), or the position where the @code{display} text property begins in the buffer."
msgstr ""

#. type: table
#: text.texi.orig:3312
msgid "In other words, the string character with the @code{cursor} property of any non-@code{nil} value is the character where to display the cursor.  The value of the property says for which buffer positions to display the cursor there.  If the value is an integer @var{n}, the cursor is displayed there when point is anywhere between the beginning of the overlay or @code{display} property and @var{n} positions after that.  If the value is anything else and non-@code{nil}, the cursor is displayed there only when point is at the beginning of the @code{display} property or at @code{overlay-start}."
msgstr ""

#. type: cindex
#: text.texi.orig:3313
#, no-wrap
msgid "cursor position for @code{display} properties and overlays"
msgstr ""

#. type: table
#: text.texi.orig:3321
msgid "When the buffer has many overlay strings (e.g., @pxref{Overlay Properties, before-string}) or @code{display} properties that are strings, it is a good idea to use the @code{cursor} property on these strings to cue the Emacs display about the places where to put the cursor while traversing these strings.  This directly communicates to the display engine where the Lisp program wants to put the cursor, or where the user would expect the cursor."
msgstr ""

#. type: item
#: text.texi.orig:3322
#, no-wrap
msgid "pointer"
msgstr ""

#. type: kindex
#: text.texi.orig:3323
#, no-wrap
msgid "pointer @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3327
msgid "This specifies a specific pointer shape when the mouse pointer is over this text or image.  @xref{Pointer Shape}, for possible pointer shapes."
msgstr ""

#. type: item
#: text.texi.orig:3328
#, no-wrap
msgid "line-spacing"
msgstr ""

#. type: kindex
#: text.texi.orig:3329
#, no-wrap
msgid "line-spacing @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3334
msgid "A newline can have a @code{line-spacing} text or overlay property that controls the height of the display line ending with that newline.  The property value overrides the default frame line spacing and the buffer local @code{line-spacing} variable.  @xref{Line Height}."
msgstr ""

#. type: item
#: text.texi.orig:3335
#, no-wrap
msgid "line-height"
msgstr ""

#. type: kindex
#: text.texi.orig:3336
#, no-wrap
msgid "line-height @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3340
msgid "A newline can have a @code{line-height} text or overlay property that controls the total height of the display line ending in that newline.  @xref{Line Height}."
msgstr ""

#. type: item
#: text.texi.orig:3341
#, no-wrap
msgid "wrap-prefix"
msgstr ""

#. type: table
#: text.texi.orig:3349
msgid "If text has a @code{wrap-prefix} property, the prefix it defines will be added at display time to the beginning of every continuation line due to text wrapping (so if lines are truncated, the wrap-prefix is never used).  It may be a string or an image (@pxref{Other Display Specs}), or a stretch of whitespace such as specified by the @code{:width} or @code{:align-to} display properties (@pxref{Specified Space})."
msgstr ""

#. type: table
#: text.texi.orig:3354
msgid "A wrap-prefix may also be specified for an entire buffer using the @code{wrap-prefix} buffer-local variable (however, a @code{wrap-prefix} text-property takes precedence over the value of the @code{wrap-prefix} variable).  @xref{Truncation}."
msgstr ""

#. type: item
#: text.texi.orig:3355
#, no-wrap
msgid "line-prefix"
msgstr ""

#. type: table
#: text.texi.orig:3362
msgid "If text has a @code{line-prefix} property, the prefix it defines will be added at display time to the beginning of every non-continuation line.  It may be a string or an image (@pxref{Other Display Specs}), or a stretch of whitespace such as specified by the @code{:width} or @code{:align-to} display properties (@pxref{Specified Space})."
msgstr ""

#. type: table
#: text.texi.orig:3367
msgid "A line-prefix may also be specified for an entire buffer using the @code{line-prefix} buffer-local variable (however, a @code{line-prefix} text-property takes precedence over the value of the @code{line-prefix} variable).  @xref{Truncation}."
msgstr ""

#. type: item
#: text.texi.orig:3368
#, no-wrap
msgid "modification-hooks"
msgstr ""

#. type: cindex
#: text.texi.orig:3369
#, no-wrap
msgid "change hooks for a character"
msgstr ""

#. type: cindex
#: text.texi.orig:3370
#, no-wrap
msgid "hooks for changing a character"
msgstr ""

#. type: kindex
#: text.texi.orig:3371
#, no-wrap
msgid "modification-hooks @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3383
msgid "If a character has the property @code{modification-hooks}, then its value should be a list of functions; modifying that character calls all of those functions before the actual modification.  Each function receives two arguments: the beginning and end of the part of the buffer being modified.  Note that if a particular modification hook function appears on several characters being modified by a single primitive, you can't predict how many times the function will be called.  Furthermore, insertion will not modify any existing character, so this hook will only be run when removing some characters, replacing them with others, or changing their text-properties."
msgstr ""

#. type: table
#: text.texi.orig:3387
msgid "If these functions modify the buffer, they should bind @code{inhibit-modification-hooks} to @code{t} around doing so, to avoid confusing the internal mechanism that calls these hooks."
msgstr ""

#. type: table
#: text.texi.orig:3390
msgid "Overlays also support the @code{modification-hooks} property, but the details are somewhat different (@pxref{Overlay Properties})."
msgstr ""

#. type: item
#: text.texi.orig:3391
#, no-wrap
msgid "insert-in-front-hooks"
msgstr ""

#. type: itemx
#: text.texi.orig:3392
#, no-wrap
msgid "insert-behind-hooks"
msgstr ""

#. type: kindex
#: text.texi.orig:3393
#, no-wrap
msgid "insert-in-front-hooks @r{(text property)}"
msgstr ""

#. type: kindex
#: text.texi.orig:3394
#, no-wrap
msgid "insert-behind-hooks @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3401
msgid "The operation of inserting text in a buffer also calls the functions listed in the @code{insert-in-front-hooks} property of the following character and in the @code{insert-behind-hooks} property of the preceding character.  These functions receive two arguments, the beginning and end of the inserted text.  The functions are called @emph{after} the actual insertion takes place."
msgstr ""

#. type: table
#: text.texi.orig:3404
msgid "See also @ref{Change Hooks}, for other hooks that are called when you change text in a buffer."
msgstr ""

#. type: item
#: text.texi.orig:3405
#, no-wrap
msgid "point-entered"
msgstr ""

#. type: itemx
#: text.texi.orig:3406
#, no-wrap
msgid "point-left"
msgstr ""

#. type: cindex
#: text.texi.orig:3407
#, no-wrap
msgid "hooks for motion of point"
msgstr ""

#. type: kindex
#: text.texi.orig:3408
#, no-wrap
msgid "point-entered @r{(text property)}"
msgstr ""

#. type: kindex
#: text.texi.orig:3409
#, no-wrap
msgid "point-left @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3413
msgid "The special properties @code{point-entered} and @code{point-left} record hook functions that report motion of point.  Each time point moves, Emacs compares these two property values:"
msgstr ""

#. type: itemize
#: text.texi.orig:3418
msgid "the @code{point-left} property of the character after the old location, and"
msgstr ""

#. type: itemize
#: text.texi.orig:3421
msgid "the @code{point-entered} property of the character after the new location."
msgstr ""

#. type: table
#: text.texi.orig:3426
msgid "If these two values differ, each of them is called (if not @code{nil})  with two arguments: the old value of point, and the new one."
msgstr ""

#. type: table
#: text.texi.orig:3433
msgid "The same comparison is made for the characters before the old and new locations.  The result may be to execute two @code{point-left} functions (which may be the same function) and/or two @code{point-entered} functions (which may be the same function).  In any case, all the @code{point-left} functions are called first, followed by all the @code{point-entered} functions."
msgstr ""

#. type: table
#: text.texi.orig:3437
msgid "It is possible to use @code{char-after} to examine characters at various buffer positions without moving point to those positions.  Only an actual change in the value of point runs these hook functions."
msgstr ""

#. type: table
#: text.texi.orig:3441
msgid "The variable @code{inhibit-point-motion-hooks} can inhibit running the @code{point-left} and @code{point-entered} hooks, see @ref{Inhibit point motion hooks}."
msgstr ""

#. type: item
#: text.texi.orig:3442
#, no-wrap
msgid "composition"
msgstr ""

#. type: kindex
#: text.texi.orig:3443
#, no-wrap
msgid "composition @r{(text property)}"
msgstr ""

#. type: table
#: text.texi.orig:3448
msgid "This text property is used to display a sequence of characters as a single glyph composed from components.  But the value of the property itself is completely internal to Emacs and should not be manipulated directly by, for instance, @code{put-text-property}."
msgstr ""

#. type: defvar
#: text.texi.orig:3451
#, no-wrap
msgid "inhibit-point-motion-hooks"
msgstr ""

#. type: anchor{#1}
#: text.texi.orig:3456
msgid "Inhibit point motion hooks"
msgstr ""

#. type: defvar
#: text.texi.orig:3456
msgid "When this variable is non-@code{nil}, @code{point-left} and @code{point-entered} hooks are not run, and the @code{intangible} property has no effect.  Do not set this variable globally; bind it with @code{let}."
msgstr ""

#. type: defvar
#: text.texi.orig:3458
#, no-wrap
msgid "show-help-function"
msgstr ""

#. type: anchor{#1}
#: text.texi.orig:3466
msgid "Help display"
msgstr ""

#. type: defvar
#: text.texi.orig:3466
msgid "If this variable is non-@code{nil}, it specifies a function called to display help strings.  These may be @code{help-echo} properties, menu help strings (@pxref{Simple Menu Items}, @pxref{Extended Menu Items}), or tool bar help strings (@pxref{Tool Bar}).  The specified function is called with one argument, the help string to display.  Tooltip mode (@pxref{Tooltips,,, emacs, The GNU Emacs Manual}) provides an example."
msgstr ""

#. type: subsection
#: text.texi.orig:3469
#, no-wrap
msgid "Formatted Text Properties"
msgstr ""

#. type: Plain text
#: text.texi.orig:3474
msgid "These text properties affect the behavior of the fill commands.  They are used for representing formatted text.  @xref{Filling}, and @ref{Margins}."
msgstr ""

#. type: item
#: text.texi.orig:3476
#, no-wrap
msgid "hard"
msgstr ""

#. type: table
#: text.texi.orig:3482
msgid "If a newline character has this property, it is a ``hard'' newline.  The fill commands do not alter hard newlines and do not move words across them.  However, this property takes effect only if the @code{use-hard-newlines} minor mode is enabled.  @xref{Hard and Soft Newlines,, Hard and Soft Newlines, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: item
#: text.texi.orig:3483
#, no-wrap
msgid "right-margin"
msgstr ""

#. type: table
#: text.texi.orig:3486
msgid "This property specifies an extra right margin for filling this part of the text."
msgstr ""

#. type: table
#: text.texi.orig:3490
msgid "This property specifies an extra left margin for filling this part of the text."
msgstr ""

#. type: item
#: text.texi.orig:3491
#, no-wrap
msgid "justification"
msgstr ""

#. type: table
#: text.texi.orig:3494
msgid "This property specifies the style of justification for filling this part of the text."
msgstr ""

#. type: subsection
#: text.texi.orig:3497
#, no-wrap
msgid "Stickiness of Text Properties"
msgstr ""

#. type: cindex
#: text.texi.orig:3498
#, no-wrap
msgid "sticky text properties"
msgstr ""

#. type: cindex
#: text.texi.orig:3499
#, no-wrap
msgid "inheritance, text property"
msgstr ""

#. type: Plain text
#: text.texi.orig:3503
msgid "Self-inserting characters normally take on the same properties as the preceding character.  This is called @dfn{inheritance} of properties."
msgstr ""

#. type: Plain text
#: text.texi.orig:3513
msgid "A Lisp program can do insertion with inheritance or without, depending on the choice of insertion primitive.  The ordinary text insertion functions, such as @code{insert}, do not inherit any properties.  They insert text with precisely the properties of the string being inserted, and no others.  This is correct for programs that copy text from one context to another---for example, into or out of the kill ring.  To insert with inheritance, use the special primitives described in this section.  Self-inserting characters inherit properties because they work using these primitives."
msgstr ""

#. type: Plain text
#: text.texi.orig:3521
msgid "When you do insertion with inheritance, @emph{which} properties are inherited, and from where, depends on which properties are @dfn{sticky}.  Insertion after a character inherits those of its properties that are @dfn{rear-sticky}.  Insertion before a character inherits those of its properties that are @dfn{front-sticky}.  When both sides offer different sticky values for the same property, the previous character's value takes precedence."
msgstr ""

#. type: Plain text
#: text.texi.orig:3525
msgid "By default, a text property is rear-sticky but not front-sticky; thus, the default is to inherit all the properties of the preceding character, and nothing from the following character."
msgstr ""

#. type: Plain text
#: text.texi.orig:3532
msgid "You can control the stickiness of various text properties with two specific text properties, @code{front-sticky} and @code{rear-nonsticky}, and with the variable @code{text-property-default-nonsticky}.  You can use the variable to specify a different default for a given property.  You can use those two text properties to make any specific properties sticky or nonsticky in any particular part of the text."
msgstr ""

#. type: Plain text
#: text.texi.orig:3540
msgid "If a character's @code{front-sticky} property is @code{t}, then all its properties are front-sticky.  If the @code{front-sticky} property is a list, then the sticky properties of the character are those whose names are in the list.  For example, if a character has a @code{front-sticky} property whose value is @code{(face read-only)}, then insertion before the character can inherit its @code{face} property and its @code{read-only} property, but no others."
msgstr ""

#. type: Plain text
#: text.texi.orig:3548
msgid "The @code{rear-nonsticky} property works the opposite way.  Most properties are rear-sticky by default, so the @code{rear-nonsticky} property says which properties are @emph{not} rear-sticky.  If a character's @code{rear-nonsticky} property is @code{t}, then none of its properties are rear-sticky.  If the @code{rear-nonsticky} property is a list, properties are rear-sticky @emph{unless} their names are in the list."
msgstr ""

#. type: defvar
#: text.texi.orig:3549
#, no-wrap
msgid "text-property-default-nonsticky"
msgstr ""

#. type: defvar
#: text.texi.orig:3554
msgid "This variable holds an alist which defines the default rear-stickiness of various text properties.  Each element has the form @code{(@var{property} . @var{nonstickiness})}, and it defines the stickiness of a particular text property, @var{property}."
msgstr ""

#. type: defvar
#: text.texi.orig:3559
msgid "If @var{nonstickiness} is non-@code{nil}, this means that the property @var{property} is rear-nonsticky by default.  Since all properties are front-nonsticky by default, this makes @var{property} nonsticky in both directions by default."
msgstr ""

#. type: defvar
#: text.texi.orig:3563
msgid "The text properties @code{front-sticky} and @code{rear-nonsticky}, when used, take precedence over the default @var{nonstickiness} specified in @code{text-property-default-nonsticky}."
msgstr ""

#. type: Plain text
#: text.texi.orig:3566
msgid "Here are the functions that insert text with inheritance of properties:"
msgstr ""

#. type: defun
#: text.texi.orig:3567
#, no-wrap
msgid "insert-and-inherit &rest strings"
msgstr ""

#. type: defun
#: text.texi.orig:3570
msgid "Insert the strings @var{strings}, just like the function @code{insert}, but inherit any sticky properties from the adjoining text."
msgstr ""

#. type: defun
#: text.texi.orig:3572
#, no-wrap
msgid "insert-before-markers-and-inherit &rest strings"
msgstr ""

#. type: defun
#: text.texi.orig:3576
msgid "Insert the strings @var{strings}, just like the function @code{insert-before-markers}, but inherit any sticky properties from the adjoining text."
msgstr ""

#. type: Plain text
#: text.texi.orig:3580
msgid "@xref{Insertion}, for the ordinary insertion functions which do not inherit."
msgstr ""

#. type: subsection
#: text.texi.orig:3582
#, no-wrap
msgid "Lazy Computation of Text Properties"
msgstr ""

#. type: Plain text
#: text.texi.orig:3587
msgid "Instead of computing text properties for all the text in the buffer, you can arrange to compute the text properties for parts of the text when and if something depends on them."
msgstr ""

#. type: Plain text
#: text.texi.orig:3591
msgid "The primitive that extracts text from the buffer along with its properties is @code{buffer-substring}.  Before examining the properties, this function runs the abnormal hook @code{buffer-access-fontify-functions}."
msgstr ""

#. type: defvar
#: text.texi.orig:3592
#, no-wrap
msgid "buffer-access-fontify-functions"
msgstr ""

#. type: defvar
#: text.texi.orig:3599
msgid "This variable holds a list of functions for computing text properties.  Before @code{buffer-substring} copies the text and text properties for a portion of the buffer, it calls all the functions in this list.  Each of the functions receives two arguments that specify the range of the buffer being accessed.  (The buffer itself is always the current buffer.)"
msgstr ""

#. type: Plain text
#: text.texi.orig:3603
msgid "The function @code{buffer-substring-no-properties} does not call these functions, since it ignores text properties anyway."
msgstr ""

#. type: Plain text
#: text.texi.orig:3607
msgid "In order to prevent the hook functions from being called more than once for the same part of the buffer, you can use the variable @code{buffer-access-fontified-property}."
msgstr ""

#. type: defvar
#: text.texi.orig:3608
#, no-wrap
msgid "buffer-access-fontified-property"
msgstr ""

#. type: defvar
#: text.texi.orig:3613
msgid "If this variable's value is non-@code{nil}, it is a symbol which is used as a text property name.  A non-@code{nil} value for that text property means, ``the other text properties for this character have already been computed''."
msgstr ""

#. type: defvar
#: text.texi.orig:3619
msgid "If all the characters in the range specified for @code{buffer-substring} have a non-@code{nil} value for this property, @code{buffer-substring} does not call the @code{buffer-access-fontify-functions} functions.  It assumes these characters already have the right text properties, and just copies the properties they already have."
msgstr ""

#. type: defvar
#: text.texi.orig:3624
msgid "The normal way to use this feature is that the @code{buffer-access-fontify-functions} functions add this property, as well as others, to the characters they operate on.  That way, they avoid being called over and over for the same text."
msgstr ""

#. type: subsection
#: text.texi.orig:3627
#, no-wrap
msgid "Defining Clickable Text"
msgstr ""

#. type: cindex
#: text.texi.orig:3628
#, no-wrap
msgid "clickable text"
msgstr ""

#. type: cindex
#: text.texi.orig:3629
#, no-wrap
msgid "follow links"
msgstr ""

#. type: cindex
#: text.texi.orig:3630
#, no-wrap
msgid "mouse-1"
msgstr ""

#. type: Plain text
#: text.texi.orig:3636
msgid "@dfn{Clickable text} is text that can be clicked, with either the mouse or via a keyboard command, to produce some result.  Many major modes use clickable text to implement textual hyper-links, or @dfn{links} for short."
msgstr ""

#. type: Plain text
#: text.texi.orig:3642
msgid "The easiest way to insert and manipulate links is to use the @code{button} package.  @xref{Buttons}.  In this section, we will explain how to manually set up clickable text in a buffer, using text properties.  For simplicity, we will refer to the clickable text as a @dfn{link}."
msgstr ""

#. type: Plain text
#: text.texi.orig:3648
msgid "Implementing a link involves three separate steps: (1) indicating clickability when the mouse moves over the link; (2) making @key{RET} or @kbd{Mouse-2} on that link do something; and (3) setting up a @code{follow-link} condition so that the link obeys @code{mouse-1-click-follows-link}."
msgstr ""

#. type: Plain text
#: text.texi.orig:3655
msgid "To indicate clickability, add the @code{mouse-face} text property to the text of the link; then Emacs will highlight the link when the mouse moves over it.  In addition, you should define a tooltip or echo area message, using the @code{help-echo} text property.  @xref{Special Properties}.  For instance, here is how Dired indicates that file names are clickable:"
msgstr ""

#. type: smallexample
#: text.texi.orig:3665
#, no-wrap
msgid ""
" (if (dired-move-to-filename)\n"
"     (add-text-properties\n"
"       (point)\n"
"       (save-excursion\n"
"         (dired-move-to-end-of-filename)\n"
"         (point))\n"
"       '(mouse-face highlight\n"
"         help-echo \"mouse-2: visit this file in other window\")))\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:3672
msgid "To make the link clickable, bind @key{RET} and @kbd{Mouse-2} to commands that perform the desired action.  Each command should check to see whether it was called on a link, and act accordingly.  For instance, Dired's major mode keymap binds @kbd{Mouse-2} to the following command:"
msgstr ""

#. type: smallexample
#: text.texi.orig:3693
#, no-wrap
msgid ""
"(defun dired-mouse-find-file-other-window (event)\n"
"  \"In Dired, visit the file or directory name you click on.\"\n"
"  (interactive \"e\")\n"
"  (let ((window (posn-window (event-end event)))\n"
"        (pos (posn-point (event-end event)))\n"
"        file)\n"
"    (if (not (windowp window))\n"
"        (error \"No file chosen\"))\n"
"    (with-current-buffer (window-buffer window)\n"
"      (goto-char pos)\n"
"      (setq file (dired-get-file-for-visit)))\n"
"    (if (file-directory-p file)\n"
"        (or (and (cdr dired-subdir-alist)\n"
"                 (dired-goto-subdir file))\n"
"            (progn\n"
"              (select-window window)\n"
"              (dired-other-window file)))\n"
"      (select-window window)\n"
"      (find-file-other-window (file-name-sans-versions file t)))))\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:3699
msgid "This command uses the functions @code{posn-window} and @code{posn-point} to determine where the click occurred, and @code{dired-get-file-for-visit} to determine which file to visit."
msgstr ""

#. type: Plain text
#: text.texi.orig:3703
msgid "Instead of binding the mouse command in a major mode keymap, you can bind it within the link text, using the @code{keymap} text property (@pxref{Special Properties}).  For instance:"
msgstr ""

#. type: example
#: text.texi.orig:3708
#, no-wrap
msgid ""
"(let ((map (make-sparse-keymap)))\n"
"  (define-key map [mouse-2] 'operate-this-button)\n"
"  (put-text-property link-start link-end 'keymap map))\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:3714
msgid "With this method, you can easily define different commands for different links.  Furthermore, the global definition of @key{RET} and @kbd{Mouse-2} remain available for the rest of the text in the buffer."
msgstr ""

#. type: vindex
#: text.texi.orig:3715
#, no-wrap
msgid "mouse-1-click-follows-link"
msgstr ""

#. type: Plain text
#: text.texi.orig:3722
msgid "The basic Emacs command for clicking on links is @kbd{Mouse-2}.  However, for compatibility with other graphical applications, Emacs also recognizes @kbd{Mouse-1} clicks on links, provided the user clicks on the link quickly without moving the mouse.  This behavior is controlled by the user option @code{mouse-1-click-follows-link}.  @xref{Mouse References,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: cindex
#: text.texi.orig:3723
#, no-wrap
msgid "follow-link (text or overlay property)"
msgstr ""

#. type: Plain text
#: text.texi.orig:3736
msgid "To set up the link so that it obeys @code{mouse-1-click-follows-link}, you must either (1) apply a @code{follow-link} text or overlay property to the link text, or (2)  bind the @code{follow-link} event to a keymap (which can be a major mode keymap or a local keymap specified via the @code{keymap} text property).  The value of the @code{follow-link} property, or the binding for the @code{follow-link} event, acts as a ``condition'' for the link action.  This condition tells Emacs two things: the circumstances under which a @kbd{Mouse-1} click should be regarded as occurring ``inside'' the link, and how to compute an ``action code'' that says what to translate the @kbd{Mouse-1} click into.  The link action condition can be one of the following:"
msgstr ""

#. type: table
#: text.texi.orig:3742
msgid "If the condition is the symbol @code{mouse-face}, a position is inside a link if there is a non-@code{nil} @code{mouse-face} property at that position.  The action code is always @code{t}."
msgstr ""

#. type: table
#: text.texi.orig:3744
msgid "For example, here is how Info mode handles @key{Mouse-1}:"
msgstr ""

#. type: smallexample
#: text.texi.orig:3747
#, no-wrap
msgid "(define-key Info-mode-map [follow-link] 'mouse-face)\n"
msgstr ""

#. type: item
#: text.texi.orig:3749
#, no-wrap
msgid "a function"
msgstr ""

#. type: table
#: text.texi.orig:3754
msgid "If the condition is a function, @var{func}, then a position @var{pos} is inside a link if @code{(@var{func} @var{pos})} evaluates to non-@code{nil}.  The value returned by @var{func} serves as the action code."
msgstr ""

#. type: table
#: text.texi.orig:3757
msgid "For example, here is how pcvs enables @kbd{Mouse-1} to follow links on file names only:"
msgstr ""

#. type: smallexample
#: text.texi.orig:3762
#, no-wrap
msgid ""
"(define-key map [follow-link]\n"
"  (lambda (pos)\n"
"    (eq (get-char-property pos 'face) 'cvs-filename-face)))\n"
msgstr ""

#. type: item
#: text.texi.orig:3764 text.texi.orig:3784
#, no-wrap
msgid "anything else"
msgstr ""

#. type: table
#: text.texi.orig:3770
msgid "If the condition value is anything else, then the position is inside a link and the condition itself is the action code.  Clearly, you should specify this kind of condition only when applying the condition via a text or property overlay on the link text (so that it does not apply to the entire buffer)."
msgstr ""

#. type: Plain text
#: text.texi.orig:3774
msgid "The action code tells @kbd{Mouse-1} how to follow the link:"
msgstr ""

#. type: item
#: text.texi.orig:3776
#, no-wrap
msgid "a string or vector"
msgstr ""

#. type: table
#: text.texi.orig:3783
msgid "If the action code is a string or vector, the @kbd{Mouse-1} event is translated into the first element of the string or vector; i.e., the action of the @kbd{Mouse-1} click is the local or global binding of that character or symbol.  Thus, if the action code is @code{\"foo\"}, @kbd{Mouse-1} translates into @kbd{f}.  If it is @code{[foo]}, @kbd{Mouse-1} translates into @key{foo}."
msgstr ""

#. type: table
#: text.texi.orig:3787
msgid "For any other non-@code{nil} action code, the @kbd{Mouse-1} event is translated into a @kbd{Mouse-2} event at the same position."
msgstr ""

#. type: Plain text
#: text.texi.orig:3794
msgid "To define @kbd{Mouse-1} to activate a button defined with @code{define-button-type}, give the button a @code{follow-link} property.  The property value should be a link action condition, as described above.  @xref{Buttons}.  For example, here is how Help mode handles @kbd{Mouse-1}:"
msgstr ""

#. type: smallexample
#: text.texi.orig:3799
#, no-wrap
msgid ""
"(define-button-type 'help-xref\n"
"  'follow-link t\n"
"  'action #'help-button-action)\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:3806
msgid "To define @kbd{Mouse-1} on a widget defined with @code{define-widget}, give the widget a @code{:follow-link} property.  The property value should be a link action condition, as described above.  For example, here is how the @code{link} widget specifies that a @key{Mouse-1} click shall be translated to @key{RET}:"
msgstr ""

#. type: smallexample
#: text.texi.orig:3815
#, no-wrap
msgid ""
"(define-widget 'link 'item\n"
"  \"An embedded link.\"\n"
"  :button-prefix 'widget-link-prefix\n"
"  :button-suffix 'widget-link-suffix\n"
"  :follow-link \"\\C-m\"\n"
"  :help-echo \"Follow the link.\"\n"
"  :format \"%[%t%]\")\n"
msgstr ""

#. type: defun
#: text.texi.orig:3817
#, no-wrap
msgid "mouse-on-link-p pos"
msgstr ""

#. type: defun
#: text.texi.orig:3821
msgid "This function returns non-@code{nil} if position @var{pos} in the current buffer is on a link.  @var{pos} can also be a mouse event location, as returned by @code{event-start} (@pxref{Accessing Mouse})."
msgstr ""

#. type: subsection
#: text.texi.orig:3824
#, no-wrap
msgid "Defining and Using Fields"
msgstr ""

#. type: cindex
#: text.texi.orig:3825
#, no-wrap
msgid "fields"
msgstr ""

#. type: Plain text
#: text.texi.orig:3832
msgid "A field is a range of consecutive characters in the buffer that are identified by having the same value (comparing with @code{eq}) of the @code{field} property (either a text-property or an overlay property).  This section describes special functions that are available for operating on fields."
msgstr ""

#. type: Plain text
#: text.texi.orig:3836
msgid "You specify a field with a buffer position, @var{pos}.  We think of each field as containing a range of buffer positions, so the position you specify stands for the field containing that position."
msgstr ""

#. type: Plain text
#: text.texi.orig:3844
msgid "When the characters before and after @var{pos} are part of the same field, there is no doubt which field contains @var{pos}: the one those characters both belong to.  When @var{pos} is at a boundary between fields, which field it belongs to depends on the stickiness of the @code{field} properties of the two surrounding characters (@pxref{Sticky Properties}).  The field whose property would be inherited by text inserted at @var{pos} is the field that contains @var{pos}."
msgstr ""

#. type: Plain text
#: text.texi.orig:3852
msgid "There is an anomalous case where newly inserted text at @var{pos} would not inherit the @code{field} property from either side.  This happens if the previous character's @code{field} property is not rear-sticky, and the following character's @code{field} property is not front-sticky.  In this case, @var{pos} belongs to neither the preceding field nor the following field; the field functions treat it as belonging to an empty field whose beginning and end are both at @var{pos}."
msgstr ""

#. type: Plain text
#: text.texi.orig:3856
msgid "In all of these functions, if @var{pos} is omitted or @code{nil}, the value of point is used by default.  If narrowing is in effect, then @var{pos} should fall within the accessible portion.  @xref{Narrowing}."
msgstr ""

#. type: defun
#: text.texi.orig:3857
#, no-wrap
msgid "field-beginning &optional pos escape-from-edge limit"
msgstr ""

#. type: defun
#: text.texi.orig:3859
msgid "This function returns the beginning of the field specified by @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3865
msgid "If @var{pos} is at the beginning of its field, and @var{escape-from-edge} is non-@code{nil}, then the return value is always the beginning of the preceding field that @emph{ends} at @var{pos}, regardless of the stickiness of the @code{field} properties around @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3869
msgid "If @var{limit} is non-@code{nil}, it is a buffer position; if the beginning of the field is before @var{limit}, then @var{limit} will be returned instead."
msgstr ""

#. type: defun
#: text.texi.orig:3871
#, no-wrap
msgid "field-end &optional pos escape-from-edge limit"
msgstr ""

#. type: defun
#: text.texi.orig:3873
msgid "This function returns the end of the field specified by @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3878
msgid "If @var{pos} is at the end of its field, and @var{escape-from-edge} is non-@code{nil}, then the return value is always the end of the following field that @emph{begins} at @var{pos}, regardless of the stickiness of the @code{field} properties around @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3882
msgid "If @var{limit} is non-@code{nil}, it is a buffer position; if the end of the field is after @var{limit}, then @var{limit} will be returned instead."
msgstr ""

#. type: defun
#: text.texi.orig:3884
#, no-wrap
msgid "field-string &optional pos"
msgstr ""

#. type: defun
#: text.texi.orig:3887
msgid "This function returns the contents of the field specified by @var{pos}, as a string."
msgstr ""

#. type: defun
#: text.texi.orig:3889
#, no-wrap
msgid "field-string-no-properties &optional pos"
msgstr ""

#. type: defun
#: text.texi.orig:3892
msgid "This function returns the contents of the field specified by @var{pos}, as a string, discarding text properties."
msgstr ""

#. type: defun
#: text.texi.orig:3894
#, no-wrap
msgid "delete-field &optional pos"
msgstr ""

#. type: defun
#: text.texi.orig:3896
msgid "This function deletes the text of the field specified by @var{pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3898
#, no-wrap
msgid "constrain-to-field new-pos old-pos &optional escape-from-edge only-in-line inhibit-capture-property"
msgstr ""

#. type: defun
#: text.texi.orig:3902
msgid "This function ``constrains'' @var{new-pos} to the field that @var{old-pos} belongs to---in other words, it returns the position closest to @var{new-pos} that is in the same field as @var{old-pos}."
msgstr ""

#. type: defun
#: text.texi.orig:3906
msgid "If @var{new-pos} is @code{nil}, then @code{constrain-to-field} uses the value of point instead, and moves point to the resulting position in addition to returning that position."
msgstr ""

#. type: defun
#: text.texi.orig:3918
msgid "If @var{old-pos} is at the boundary of two fields, then the acceptable final positions depend on the argument @var{escape-from-edge}.  If @var{escape-from-edge} is @code{nil}, then @var{new-pos} must be in the field whose @code{field} property equals what new characters inserted at @var{old-pos} would inherit.  (This depends on the stickiness of the @code{field} property for the characters before and after @var{old-pos}.)  If @var{escape-from-edge} is non-@code{nil}, @var{new-pos} can be anywhere in the two adjacent fields.  Additionally, if two fields are separated by another field with the special value @code{boundary}, then any point within this special field is also considered to be ``on the boundary''."
msgstr ""

#. type: defun
#: text.texi.orig:3923
msgid "Commands like @kbd{C-a} with no argument, that normally move backward to a specific kind of location and stay there once there, probably should specify @code{nil} for @var{escape-from-edge}.  Other motion commands that check fields should probably pass @code{t}."
msgstr ""

#. type: defun
#: text.texi.orig:3930
msgid "If the optional argument @var{only-in-line} is non-@code{nil}, and constraining @var{new-pos} in the usual way would move it to a different line, @var{new-pos} is returned unconstrained.  This used in commands that move by line, such as @code{next-line} and @code{beginning-of-line}, so that they respect field boundaries only in the case where they can still move to the right line."
msgstr ""

#. type: defun
#: text.texi.orig:3934
msgid "If the optional argument @var{inhibit-capture-property} is non-@code{nil}, and @var{old-pos} has a non-@code{nil} property of that name, then any field boundaries are ignored."
msgstr ""

#. type: defun
#: text.texi.orig:3938
msgid "You can cause @code{constrain-to-field} to ignore all field boundaries (and so never constrain anything) by binding the variable @code{inhibit-field-text-motion} to a non-@code{nil} value."
msgstr ""

#. type: subsection
#: text.texi.orig:3941
#, no-wrap
msgid "Why Text Properties are not Intervals"
msgstr ""

#. type: cindex
#: text.texi.orig:3942
#, no-wrap
msgid "intervals"
msgstr ""

#. type: Plain text
#: text.texi.orig:3950
msgid "Some editors that support adding attributes to text in the buffer do so by letting the user specify ``intervals'' within the text, and adding the properties to the intervals.  Those editors permit the user or the programmer to determine where individual intervals start and end.  We deliberately provided a different sort of interface in Emacs Lisp to avoid certain paradoxical behavior associated with text modification."
msgstr ""

#. type: Plain text
#: text.texi.orig:3955
msgid "If the actual subdivision into intervals is meaningful, that means you can distinguish between a buffer that is just one interval with a certain property, and a buffer containing the same text subdivided into two intervals, both of which have that property."
msgstr ""

#. type: Plain text
#: text.texi.orig:3962
msgid "Suppose you take the buffer with just one interval and kill part of the text.  The text remaining in the buffer is one interval, and the copy in the kill ring (and the undo list) becomes a separate interval.  Then if you yank back the killed text, you get two intervals with the same properties.  Thus, editing does not preserve the distinction between one interval and two."
msgstr ""

#. type: Plain text
#: text.texi.orig:3971
msgid "Suppose we ``fix'' this problem by coalescing the two intervals when the text is inserted.  That works fine if the buffer originally was a single interval.  But suppose instead that we have two adjacent intervals with the same properties, and we kill the text of one interval and yank it back.  The same interval-coalescence feature that rescues the other case causes trouble in this one: after yanking, we have just one interval.  Once again, editing does not preserve the distinction between one interval and two."
msgstr ""

#. type: Plain text
#: text.texi.orig:3974
msgid "Insertion of text at the border between intervals also raises questions that have no satisfactory answer."
msgstr ""

#. type: Plain text
#: text.texi.orig:3980
msgid "However, it is easy to arrange for editing to behave consistently for questions of the form, ``What are the properties of text at this buffer or string position?'' So we have decided these are the only questions that make sense; we have not implemented asking questions about where intervals start or end."
msgstr ""

#. type: Plain text
#: text.texi.orig:3985
msgid "In practice, you can usually use the text property search functions in place of explicit interval boundaries.  You can think of them as finding the boundaries of intervals, assuming that intervals are always coalesced whenever possible.  @xref{Property Search}."
msgstr ""

#. type: Plain text
#: text.texi.orig:3988
msgid "Emacs also provides explicit intervals as a presentation feature; see @ref{Overlays}."
msgstr ""

#. type: section
#: text.texi.orig:3990
#, no-wrap
msgid "Substituting for a Character Code"
msgstr ""

#. type: cindex
#: text.texi.orig:3991
#, no-wrap
msgid "replace characters in region"
msgstr ""

#. type: cindex
#: text.texi.orig:3992
#, no-wrap
msgid "substitute characters"
msgstr ""

#. type: Plain text
#: text.texi.orig:3996
msgid "The following functions replace characters within a specified region based on their character codes."
msgstr ""

#. type: defun
#: text.texi.orig:3997
#, no-wrap
msgid "subst-char-in-region start end old-char new-char &optional noundo"
msgstr ""

#. type: cindex
#: text.texi.orig:3998
#, no-wrap
msgid "replace characters"
msgstr ""

#. type: defun
#: text.texi.orig:4002
msgid "This function replaces all occurrences of the character @var{old-char} with the character @var{new-char} in the region of the current buffer defined by @var{start} and @var{end}."
msgstr ""

#. type: cindex
#: text.texi.orig:4003
#, no-wrap
msgid "undo avoidance"
msgstr ""

#. type: defun
#: text.texi.orig:4008
msgid "If @var{noundo} is non-@code{nil}, then @code{subst-char-in-region} does not record the change for undo and does not mark the buffer as modified.  This was useful for controlling the old selective display feature (@pxref{Selective Display})."
msgstr ""

#. type: defun
#: text.texi.orig:4011
msgid "@code{subst-char-in-region} does not move point and returns @code{nil}."
msgstr ""

#. type: group
#: text.texi.orig:4017
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"This is the contents of the buffer before.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: group
#: text.texi.orig:4022
#, no-wrap
msgid ""
"(subst-char-in-region 1 20 ?i ?X)\n"
"     @result{} nil\n"
"\n"
msgstr ""

#. type: group
#: text.texi.orig:4026
#, no-wrap
msgid ""
"---------- Buffer: foo ----------\n"
"ThXs Xs the contents of the buffer before.\n"
"---------- Buffer: foo ----------\n"
msgstr ""

#. type: deffn
#: text.texi.orig:4030
#, no-wrap
msgid "Command translate-region start end table"
msgstr ""

#. type: deffn
#: text.texi.orig:4033
msgid "This function applies a translation table to the characters in the buffer between positions @var{start} and @var{end}."
msgstr ""

#. type: deffn
#: text.texi.orig:4039
msgid "The translation table @var{table} is a string or a char-table; @code{(aref @var{table} @var{ochar})} gives the translated character corresponding to @var{ochar}.  If @var{table} is a string, any characters with codes larger than the length of @var{table} are not altered by the translation."
msgstr ""

#. type: deffn
#: text.texi.orig:4044
msgid "The return value of @code{translate-region} is the number of characters that were actually changed by the translation.  This does not count characters that were mapped into themselves in the translation table."
msgstr ""

#. type: cindex
#: text.texi.orig:4048
#, no-wrap
msgid "registers"
msgstr ""

#. type: Plain text
#: text.texi.orig:4056
msgid "A register is a sort of variable used in Emacs editing that can hold a variety of different kinds of values.  Each register is named by a single character.  All @acronym{ASCII} characters and their meta variants (but with the exception of @kbd{C-g}) can be used to name registers.  Thus, there are 255 possible registers.  A register is designated in Emacs Lisp by the character that is its name."
msgstr ""

#. type: defvar
#: text.texi.orig:4057
#, no-wrap
msgid "register-alist"
msgstr ""

#. type: defvar
#: text.texi.orig:4061
msgid "This variable is an alist of elements of the form @code{(@var{name} .  @var{contents})}.  Normally, there is one element for each Emacs register that has been used."
msgstr ""

#. type: defvar
#: text.texi.orig:4064
msgid "The object @var{name} is a character (an integer) identifying the register."
msgstr ""

#. type: Plain text
#: text.texi.orig:4067
msgid "The @var{contents} of a register can have several possible types:"
msgstr ""

#. type: item
#: text.texi.orig:4069
#, no-wrap
msgid "a number"
msgstr ""

#. type: table
#: text.texi.orig:4072
msgid "A number stands for itself.  If @code{insert-register} finds a number in the register, it converts the number to decimal."
msgstr ""

#. type: item
#: text.texi.orig:4073
#, no-wrap
msgid "a marker"
msgstr ""

#. type: table
#: text.texi.orig:4075
msgid "A marker represents a buffer position to jump to."
msgstr ""

#. type: item
#: text.texi.orig:4076
#, no-wrap
msgid "a string"
msgstr ""

#. type: table
#: text.texi.orig:4078
msgid "A string is text saved in the register."
msgstr ""

#. type: item
#: text.texi.orig:4079
#, no-wrap
msgid "a rectangle"
msgstr ""

#. type: table
#: text.texi.orig:4081
msgid "A rectangle is represented by a list of strings."
msgstr ""

#. type: code{#1}
#: text.texi.orig:4082
#, no-wrap
msgid "(@var{window-configuration} @var{position})"
msgstr ""

#. type: table
#: text.texi.orig:4085
msgid "This represents a window configuration to restore in one frame, and a position to jump to in the current buffer."
msgstr ""

#. type: code{#1}
#: text.texi.orig:4087
#, no-wrap
msgid "(@var{frame-configuration} @var{position})"
msgstr ""

#. type: table
#: text.texi.orig:4090
msgid "This represents a frame configuration to restore, and a position to jump to in the current buffer."
msgstr ""

#. type: item
#: text.texi.orig:4091
#, no-wrap
msgid "(file @var{filename})"
msgstr ""

#. type: table
#: text.texi.orig:4094
msgid "This represents a file to visit; jumping to this value visits file @var{filename}."
msgstr ""

#. type: item
#: text.texi.orig:4095
#, no-wrap
msgid "(file-query @var{filename} @var{position})"
msgstr ""

#. type: table
#: text.texi.orig:4100
msgid "This represents a file to visit and a position in it; jumping to this value visits file @var{filename} and goes to buffer position @var{position}.  Restoring this type of position asks the user for confirmation first."
msgstr ""

#. type: Plain text
#: text.texi.orig:4104
msgid "The functions in this section return unpredictable values unless otherwise stated."
msgstr ""

#. type: defun
#: text.texi.orig:4105
#, no-wrap
msgid "get-register reg"
msgstr ""

#. type: defun
#: text.texi.orig:4108
msgid "This function returns the contents of the register @var{reg}, or @code{nil} if it has no contents."
msgstr ""

#. type: defun
#: text.texi.orig:4110
#, no-wrap
msgid "set-register reg value"
msgstr ""

#. type: defun
#: text.texi.orig:4114
msgid "This function sets the contents of register @var{reg} to @var{value}.  A register can be set to any value, but the other register functions expect only certain data types.  The return value is @var{value}."
msgstr ""

#. type: deffn
#: text.texi.orig:4116
#, no-wrap
msgid "Command view-register reg"
msgstr ""

#. type: deffn
#: text.texi.orig:4118
msgid "This command displays what is contained in register @var{reg}."
msgstr ""

#. type: deffn
#: text.texi.orig:4120
#, no-wrap
msgid "Command insert-register reg &optional beforep"
msgstr ""

#. type: deffn
#: text.texi.orig:4123
msgid "This command inserts contents of register @var{reg} into the current buffer."
msgstr ""

#. type: deffn
#: text.texi.orig:4129
msgid "Normally, this command puts point before the inserted text, and the mark after it.  However, if the optional second argument @var{beforep} is non-@code{nil}, it puts the mark before and point after.  You can pass a non-@code{nil} second argument @var{beforep} to this function interactively by supplying any prefix argument."
msgstr ""

#. type: deffn
#: text.texi.orig:4133
msgid "If the register contains a rectangle, then the rectangle is inserted with its upper left corner at point.  This means that text is inserted in the current line and underneath it on successive lines."
msgstr ""

#. type: deffn
#: text.texi.orig:4137
msgid "If the register contains something other than saved text (a string) or a rectangle (a list), currently useless things happen.  This may be changed in the future."
msgstr ""

#. type: defun
#: text.texi.orig:4139
#, no-wrap
msgid "register-read-with-preview prompt"
msgstr ""

#. type: cindex
#: text.texi.orig:4140
#, no-wrap
msgid "register preview"
msgstr ""

#. type: defun
#: text.texi.orig:4149
msgid "This function reads and returns a register name, prompting with @var{prompt} and possibly showing a preview of the existing registers and their contents.  The preview is shown in a temporary window, after the delay specified by the user option @code{register-preview-delay}, if its value and @code{register-alist} are both non-@code{nil}.  The preview is also shown if the user requests help (e.g., by typing the help character).  We recommend that all interactive commands which read register names use this function."
msgstr ""

#. type: section
#: text.texi.orig:4152
#, no-wrap
msgid "Transposition of Text"
msgstr ""

#. type: Plain text
#: text.texi.orig:4155
msgid "This function can be used to transpose stretches of text:"
msgstr ""

#. type: defun
#: text.texi.orig:4156
#, no-wrap
msgid "transpose-regions start1 end1 start2 end2 &optional leave-markers"
msgstr ""

#. type: defun
#: text.texi.orig:4161
msgid "This function exchanges two nonoverlapping portions of the buffer.  Arguments @var{start1} and @var{end1} specify the bounds of one portion and arguments @var{start2} and @var{end2} specify the bounds of the other portion."
msgstr ""

#. type: defun
#: text.texi.orig:4168
msgid "Normally, @code{transpose-regions} relocates markers with the transposed text; a marker previously positioned within one of the two transposed portions moves along with that portion, thus remaining between the same two characters in their new position.  However, if @var{leave-markers} is non-@code{nil}, @code{transpose-regions} does not do this---it leaves all markers unrelocated."
msgstr ""

#. type: section
#: text.texi.orig:4171
#, no-wrap
msgid "Dealing With Compressed Data"
msgstr ""

#. type: Plain text
#: text.texi.orig:4177
msgid "When @code{auto-compression-mode} is enabled, Emacs automatically uncompresses compressed files when you visit them, and automatically recompresses them if you alter and save them.  @xref{Compressed Files,,, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: Plain text
#: text.texi.orig:4182
msgid "The above feature works by calling an external executable (e.g., @command{gzip}).  Emacs can also be compiled with support for built-in decompression using the zlib library, which is faster than calling an external program."
msgstr ""

#. type: defun
#: text.texi.orig:4183
#, no-wrap
msgid "zlib-available-p"
msgstr ""

#. type: defun
#: text.texi.orig:4186
msgid "This function returns non-@code{nil} if built-in zlib decompression is available."
msgstr ""

#. type: defun
#: text.texi.orig:4188
#, no-wrap
msgid "zlib-decompress-region start end"
msgstr ""

#. type: defun
#: text.texi.orig:4196
msgid "This function decompresses the region between @var{start} and @var{end}, using built-in zlib decompression.  The region should contain data that were compressed with gzip or zlib.  On success, the function replaces the contents of the region with the decompressed data.  On failure, the function leaves the region unchanged and returns @code{nil}.  This function can be called only in unibyte buffers."
msgstr ""

#. type: section
#: text.texi.orig:4200
#, no-wrap
msgid "Base 64 Encoding"
msgstr ""

#. type: cindex
#: text.texi.orig:4201
#, no-wrap
msgid "base 64 encoding"
msgstr ""

#. type: Plain text
#: text.texi.orig:4213
msgid "Base 64 code is used in email to encode a sequence of 8-bit bytes as a longer sequence of @acronym{ASCII} graphic characters.  It is defined in Internet RFC@footnote{ An RFC, an acronym for @dfn{Request for Comments}, is a numbered Internet informational document describing a standard.  RFCs are usually written by technical experts acting on their own initiative, and are traditionally written in a pragmatic, experience-driven manner.  }2045.  This section describes the functions for converting to and from this code."
msgstr ""

#. type: deffn
#: text.texi.orig:4214
#, no-wrap
msgid "Command base64-encode-region beg end &optional no-line-break"
msgstr ""

#. type: deffn
#: text.texi.orig:4221
msgid "This function converts the region from @var{beg} to @var{end} into base 64 code.  It returns the length of the encoded text.  An error is signaled if a character in the region is multibyte, i.e., in a multibyte buffer the region must contain only characters from the charsets @code{ascii}, @code{eight-bit-control} and @code{eight-bit-graphic}."
msgstr ""

#. type: deffn
#: text.texi.orig:4226
msgid "Normally, this function inserts newline characters into the encoded text, to avoid overlong lines.  However, if the optional argument @var{no-line-break} is non-@code{nil}, these newlines are not added, so the output is just one long line."
msgstr ""

#. type: defun
#: text.texi.orig:4228
#, no-wrap
msgid "base64-encode-string string &optional no-line-break"
msgstr ""

#. type: defun
#: text.texi.orig:4233
msgid "This function converts the string @var{string} into base 64 code.  It returns a string containing the encoded text.  As for @code{base64-encode-region}, an error is signaled if a character in the string is multibyte."
msgstr ""

#. type: defun
#: text.texi.orig:4238
msgid "Normally, this function inserts newline characters into the encoded text, to avoid overlong lines.  However, if the optional argument @var{no-line-break} is non-@code{nil}, these newlines are not added, so the result string is just one long line."
msgstr ""

#. type: deffn
#: text.texi.orig:4240
#, no-wrap
msgid "Command base64-decode-region beg end"
msgstr ""

#. type: deffn
#: text.texi.orig:4244
msgid "This function converts the region from @var{beg} to @var{end} from base 64 code into the corresponding decoded text.  It returns the length of the decoded text."
msgstr ""

#. type: defun
#: text.texi.orig:4246 text.texi.orig:4254
msgid "The decoding functions ignore newline characters in the encoded text."
msgstr ""

#. type: defun
#: text.texi.orig:4248
#, no-wrap
msgid "base64-decode-string string"
msgstr ""

#. type: defun
#: text.texi.orig:4252
msgid "This function converts the string @var{string} from base 64 code into the corresponding decoded text.  It returns a unibyte string containing the decoded text."
msgstr ""

#. type: cindex
#: text.texi.orig:4258
#, no-wrap
msgid "MD5 checksum"
msgstr ""

#. type: cindex
#: text.texi.orig:4259
#, no-wrap
msgid "SHA hash"
msgstr ""

#. type: cindex
#: text.texi.orig:4260
#, no-wrap
msgid "hash, cryptographic"
msgstr ""

#. type: cindex
#: text.texi.orig:4261
#, no-wrap
msgid "cryptographic hash"
msgstr ""

#. type: Plain text
#: text.texi.orig:4267
msgid "Emacs has built-in support for computing @dfn{cryptographic hashes}.  A cryptographic hash, or @dfn{checksum}, is a digital ``fingerprint'' of a piece of data (e.g., a block of text) which can be used to check that you have an unaltered copy of that data."
msgstr ""

#. type: cindex
#: text.texi.orig:4268
#, no-wrap
msgid "message digest"
msgstr ""

#. type: Plain text
#: text.texi.orig:4279
msgid "Emacs supports several common cryptographic hash algorithms: MD5, SHA-1, SHA-2, SHA-224, SHA-256, SHA-384 and SHA-512.  MD5 is the oldest of these algorithms, and is commonly used in @dfn{message digests} to check the integrity of messages transmitted over a network.  MD5 is not ``collision resistant'' (i.e., it is possible to deliberately design different pieces of data which have the same MD5 hash), so you should not used it for anything security-related.  A similar theoretical weakness also exists in SHA-1.  Therefore, for security-related applications you should use the other hash types, such as SHA-2."
msgstr ""

#. type: defun
#: text.texi.orig:4280
#, no-wrap
msgid "secure-hash algorithm object &optional start end binary"
msgstr ""

#. type: defun
#: text.texi.orig:4286
msgid "This function returns a hash for @var{object}.  The argument @var{algorithm} is a symbol stating which hash to compute: one of @code{md5}, @code{sha1}, @code{sha224}, @code{sha256}, @code{sha384} or @code{sha512}.  The argument @var{object} should be a buffer or a string."
msgstr ""

#. type: defun
#: text.texi.orig:4291
msgid "The optional arguments @var{start} and @var{end} are character positions specifying the portion of @var{object} to compute the message digest for.  If they are @code{nil} or omitted, the hash is computed for the whole of @var{object}."
msgstr ""

#. type: defun
#: text.texi.orig:4296
msgid "If the argument @var{binary} is omitted or @code{nil}, the function returns the @dfn{text form} of the hash, as an ordinary Lisp string.  If @var{binary} is non-@code{nil}, it returns the hash in @dfn{binary form}, as a sequence of bytes stored in a unibyte string."
msgstr ""

#. type: defun
#: text.texi.orig:4305
msgid "This function does not compute the hash directly from the internal representation of @var{object}'s text (@pxref{Text Representations}).  Instead, it encodes the text using a coding system (@pxref{Coding Systems}), and computes the hash from that encoded text.  If @var{object} is a buffer, the coding system used is the one which would be chosen by default for writing the text into a file.  If @var{object} is a string, the user's preferred coding system is used (@pxref{Recognize Coding,,, emacs, GNU Emacs Manual})."
msgstr ""

#. type: defun
#: text.texi.orig:4307
#, no-wrap
msgid "md5 object &optional start end coding-system noerror"
msgstr ""

#. type: defun
#: text.texi.orig:4313
msgid "This function returns an MD5 hash.  It is semi-obsolete, since for most purposes it is equivalent to calling @code{secure-hash} with @code{md5} as the @var{algorithm} argument.  The @var{object}, @var{start} and @var{end} arguments have the same meanings as in @code{secure-hash}."
msgstr ""

#. type: defun
#: text.texi.orig:4317
msgid "If @var{coding-system} is non-@code{nil}, it specifies a coding system to use to encode the text; if omitted or @code{nil}, the default coding system is used, like in @code{secure-hash}."
msgstr ""

#. type: defun
#: text.texi.orig:4322
msgid "Normally, @code{md5} signals an error if the text can't be encoded using the specified or chosen coding system.  However, if @var{noerror} is non-@code{nil}, it silently uses @code{raw-text} coding instead."
msgstr ""

#. type: section
#: text.texi.orig:4325
#, no-wrap
msgid "Parsing HTML and XML"
msgstr ""

#. type: cindex
#: text.texi.orig:4326
#, no-wrap
msgid "parsing html"
msgstr ""

#. type: Plain text
#: text.texi.orig:4330
msgid "When Emacs is compiled with libxml2 support, the following functions are available to parse HTML or XML text into Lisp object trees."
msgstr ""

#. type: defun
#: text.texi.orig:4331
#, no-wrap
msgid "libxml-parse-html-region start end &optional base-url"
msgstr ""

#. type: defun
#: text.texi.orig:4336
msgid "This function parses the text between @var{start} and @var{end} as HTML, and returns a list representing the HTML @dfn{parse tree}.  It attempts to handle ``real world'' HTML by robustly coping with syntax mistakes."
msgstr ""

#. type: defun
#: text.texi.orig:4339
msgid "The optional argument @var{base-url}, if non-@code{nil}, should be a string specifying the base URL for relative URLs occurring in links."
msgstr ""

#. type: defun
#: text.texi.orig:4344
msgid "In the parse tree, each HTML node is represented by a list in which the first element is a symbol representing the node name, the second element is an alist of node attributes, and the remaining elements are the subnodes."
msgstr ""

#. type: defun
#: text.texi.orig:4347
msgid "The following example demonstrates this.  Given this (malformed) HTML document:"
msgstr ""

#. type: example
#: text.texi.orig:4350
#, no-wrap
msgid "<html><head></head><body width=101><div class=thing>Foo<div>Yes\n"
msgstr ""

#. type: defun
#: text.texi.orig:4354
msgid "A call to @code{libxml-parse-html-region} returns this:"
msgstr ""

#. type: example
#: text.texi.orig:4363
#, no-wrap
msgid ""
"(html ()\n"
"  (head ())\n"
"  (body ((width . \"101\"))\n"
"   (div ((class . \"thing\"))\n"
"    \"Foo\"\n"
"    (div ()\n"
"      \"Yes\"))))\n"
msgstr ""

#. type: cindex
#: text.texi.orig:4366
#, no-wrap
msgid "rendering html"
msgstr ""

#. type: defun
#: text.texi.orig:4367
#, no-wrap
msgid "shr-insert-document dom"
msgstr ""

#. type: defun
#: text.texi.orig:4372
msgid "This function renders the parsed HTML in @var{dom} into the current buffer.  The argument @var{dom} should be a list as generated by @code{libxml-parse-html-region}.  This function is, e.g., used by @ref{Top, EWW,, eww, The Emacs Web Wowser Manual}."
msgstr ""

#. type: cindex
#: text.texi.orig:4374
#, no-wrap
msgid "parsing xml"
msgstr ""

#. type: defun
#: text.texi.orig:4375
#, no-wrap
msgid "libxml-parse-xml-region start end &optional base-url"
msgstr ""

#. type: defun
#: text.texi.orig:4379
msgid "This function is the same as @code{libxml-parse-html-region}, except that it parses the text as XML rather than HTML (so it is stricter about syntax)."
msgstr ""

#. type: section
#: text.texi.orig:4382
#, no-wrap
msgid "Atomic Change Groups"
msgstr ""

#. type: cindex
#: text.texi.orig:4383
#, no-wrap
msgid "atomic changes"
msgstr ""

#. type: Plain text
#: text.texi.orig:4391
msgid "In database terminology, an @dfn{atomic} change is an indivisible change---it can succeed entirely or it can fail entirely, but it cannot partly succeed.  A Lisp program can make a series of changes to one or several buffers as an @dfn{atomic change group}, meaning that either the entire series of changes will be installed in their buffers or, in case of an error, none of them will be."
msgstr ""

#. type: Plain text
#: text.texi.orig:4395
msgid "To do this for one buffer, the one already current, simply write a call to @code{atomic-change-group} around the code that makes the changes, like this:"
msgstr ""

#. type: example
#: text.texi.orig:4400
#, no-wrap
msgid ""
"(atomic-change-group\n"
"  (insert foo)\n"
"  (delete-region x y))\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:4407
msgid "If an error (or other nonlocal exit) occurs inside the body of @code{atomic-change-group}, it unmakes all the changes in that buffer that were during the execution of the body.  This kind of change group has no effect on any other buffers---any such changes remain."
msgstr ""

#. type: Plain text
#: text.texi.orig:4411
msgid "If you need something more sophisticated, such as to make changes in various buffers constitute one atomic group, you must directly call lower-level functions that @code{atomic-change-group} uses."
msgstr ""

#. type: defun
#: text.texi.orig:4412
#, no-wrap
msgid "prepare-change-group &optional buffer"
msgstr ""

#. type: defun
#: text.texi.orig:4417
msgid "This function sets up a change group for buffer @var{buffer}, which defaults to the current buffer.  It returns a ``handle'' that represents the change group.  You must use this handle to activate the change group and subsequently to finish it."
msgstr ""

#. type: Plain text
#: text.texi.orig:4421
msgid "To use the change group, you must @dfn{activate} it.  You must do this before making any changes in the text of @var{buffer}."
msgstr ""

#. type: defun
#: text.texi.orig:4422
#, no-wrap
msgid "activate-change-group handle"
msgstr ""

#. type: defun
#: text.texi.orig:4424
msgid "This function activates the change group that @var{handle} designates."
msgstr ""

#. type: Plain text
#: text.texi.orig:4431
msgid "After you activate the change group, any changes you make in that buffer become part of it.  Once you have made all the desired changes in the buffer, you must @dfn{finish} the change group.  There are two ways to do this: you can either accept (and finalize) all the changes, or cancel them all."
msgstr ""

#. type: defun
#: text.texi.orig:4432
#, no-wrap
msgid "accept-change-group handle"
msgstr ""

#. type: defun
#: text.texi.orig:4435
msgid "This function accepts all the changes in the change group specified by @var{handle}, making them final."
msgstr ""

#. type: defun
#: text.texi.orig:4437
#, no-wrap
msgid "cancel-change-group handle"
msgstr ""

#. type: defun
#: text.texi.orig:4440
msgid "This function cancels and undoes all the changes in the change group specified by @var{handle}."
msgstr ""

#. type: Plain text
#: text.texi.orig:4452
msgid "Your code should use @code{unwind-protect} to make sure the group is always finished.  The call to @code{activate-change-group} should be inside the @code{unwind-protect}, in case the user types @kbd{C-g} just after it runs.  (This is one reason why @code{prepare-change-group} and @code{activate-change-group} are separate functions, because normally you would call @code{prepare-change-group} before the start of that @code{unwind-protect}.)  Once you finish the group, don't use the handle again---in particular, don't try to finish the same group twice."
msgstr ""

#. type: Plain text
#: text.texi.orig:4456
msgid "To make a multibuffer change group, call @code{prepare-change-group} once for each buffer you want to cover, then use @code{nconc} to combine the returned values, like this:"
msgstr ""

#. type: example
#: text.texi.orig:4460
#, no-wrap
msgid ""
"(nconc (prepare-change-group buffer-1)\n"
"       (prepare-change-group buffer-2))\n"
msgstr ""

#. type: Plain text
#: text.texi.orig:4465
msgid "You can then activate the multibuffer change group with a single call to @code{activate-change-group}, and finish it with a single call to @code{accept-change-group} or @code{cancel-change-group}."
msgstr ""

#. type: Plain text
#: text.texi.orig:4470
msgid "Nested use of several change groups for the same buffer works as you would expect.  Non-nested use of change groups for the same buffer will get Emacs confused, so don't let it happen; the first change group you start for any given buffer should be the last one finished."
msgstr ""

#. type: cindex
#: text.texi.orig:4473
#, no-wrap
msgid "change hooks"
msgstr ""

#. type: cindex
#: text.texi.orig:4474
#, no-wrap
msgid "hooks for text changes"
msgstr ""

#. type: Plain text
#: text.texi.orig:4480
msgid "These hook variables let you arrange to take notice of all changes in all buffers (or in a particular buffer, if you make them buffer-local).  See also @ref{Special Properties}, for how to detect changes to specific parts of the text."
msgstr ""

#. type: Plain text
#: text.texi.orig:4485
msgid "The functions you use in these hooks should save and restore the match data if they do anything that uses regular expressions; otherwise, they will interfere in bizarre ways with the editing operations that call them."
msgstr ""

#. type: defvar
#: text.texi.orig:4486
#, no-wrap
msgid "before-change-functions"
msgstr ""

#. type: defvar
#: text.texi.orig:4491
msgid "This variable holds a list of functions to call before any buffer modification.  Each function gets two arguments, the beginning and end of the region that is about to change, represented as integers.  The buffer that is about to change is always the current buffer."
msgstr ""

#. type: defvar
#: text.texi.orig:4493
#, no-wrap
msgid "after-change-functions"
msgstr ""

#. type: defvar
#: text.texi.orig:4499
msgid "This variable holds a list of functions to call after any buffer modification.  Each function receives three arguments: the beginning and end of the region just changed, and the length of the text that existed before the change.  All three arguments are integers.  The buffer that has been changed is always the current buffer."
msgstr ""

#. type: defvar
#: text.texi.orig:4504
msgid "The length of the old text is the difference between the buffer positions before and after that text as it was before the change.  As for the changed text, its length is simply the difference between the first two arguments."
msgstr ""

#. type: Plain text
#: text.texi.orig:4508
msgid "Output of messages into the @file{*Messages*} buffer does not call these functions."
msgstr ""

#. type: defmac
#: text.texi.orig:4509
#, no-wrap
msgid "combine-after-change-calls body@dots{}"
msgstr ""

#. type: defmac
#: text.texi.orig:4513
msgid "The macro executes @var{body} normally, but arranges to call the after-change functions just once for a series of several changes---if that seems safe."
msgstr ""

#. type: defmac
#: text.texi.orig:4520
msgid "If a program makes several text changes in the same area of the buffer, using the macro @code{combine-after-change-calls} around that part of the program can make it run considerably faster when after-change hooks are in use.  When the after-change hooks are ultimately called, the arguments specify a portion of the buffer including all of the changes made within the @code{combine-after-change-calls} body."
msgstr ""

#. type: defmac
#: text.texi.orig:4524
msgid "@strong{Warning:} You must not alter the values of @code{after-change-functions} within the body of a @code{combine-after-change-calls} form."
msgstr ""

#. type: defmac
#: text.texi.orig:4529
msgid "@strong{Warning:} if the changes you combine occur in widely scattered parts of the buffer, this will still work, but it is not advisable, because it may lead to inefficient behavior for some change hook functions."
msgstr ""

#. type: defvar
#: text.texi.orig:4531
#, no-wrap
msgid "first-change-hook"
msgstr ""

#. type: defvar
#: text.texi.orig:4534
msgid "This variable is a normal hook that is run whenever a buffer is changed that was previously in the unmodified state."
msgstr ""

#. type: defvar
#: text.texi.orig:4536
#, no-wrap
msgid "inhibit-modification-hooks"
msgstr ""

#. type: defvar
#: text.texi.orig:4542
msgid "If this variable is non-@code{nil}, all of the change hooks are disabled; none of them run.  This affects all the hook variables described above in this section, as well as the hooks attached to certain special text properties (@pxref{Special Properties}) and overlay properties (@pxref{Overlay Properties})."
msgstr ""

#. type: defvar
#: text.texi.orig:4549
msgid "Also, this variable is bound to non-@code{nil} while running those same hook variables, so that by default modifying the buffer from a modification hook does not cause other modification hooks to be run.  If you do want modification hooks to be run in a particular piece of code that is itself run from a modification hook, then rebind locally @code{inhibit-modification-hooks} to @code{nil}."
msgstr ""
