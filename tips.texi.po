# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-10-03 19:19+0900\n"
"PO-Revision-Date: 2019-10-04 17:14+0900\n"
"Last-Translator: Ayanokoji Takesi <ayanokoji.takesi@gmail.com>\n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: node
#: tips.texi.orig:6
#, no-wrap
msgid "Tips"
msgstr "Tips"

#. type: appendix
#: tips.texi.orig:7
#, no-wrap
msgid "Tips and Conventions"
msgstr "Tips and Conventions"

#. type: cindex
#: tips.texi.orig:8
#, no-wrap
msgid "tips for writing Lisp"
msgstr "tips for writing Lisp"

#. type: cindex
#: tips.texi.orig:9
#, no-wrap
msgid "standards of coding style"
msgstr "standards of coding style"

#. type: cindex
#: tips.texi.orig:10
#, no-wrap
msgid "coding standards"
msgstr "coding standards"

#. type: Plain text
#: tips.texi.orig:16
msgid "This chapter describes no additional features of Emacs Lisp.  Instead it gives advice on making effective use of the features described in the previous chapters, and describes conventions Emacs Lisp programmers should follow."
msgstr "このチャプターででは、Emacs Lispの追加機能については説明しません。かわりに、以前のチャプターで説明した機能を効果的に使う方法と、Emacs Lispプログラマーがしたがうべき慣習を説明します。"

#. type: Plain text
#: tips.texi.orig:22
msgid "You can automatically check some of the conventions described below by running the command @kbd{M-x checkdoc RET} when visiting a Lisp file.  It cannot check all of the conventions, and not all the warnings it gives necessarily correspond to problems, but it is worth examining them all."
msgstr "以降で説明する慣習のいくつかは、Lispファイルのvisit時にコマンド@kbd{M-x checkdoc RET}を実行することにより、自動的にチェックできます。これはすべての監修はチェックできませんし、与えられた警告すべてが必ずしも問題に対応する訳ではありませんが、それらすべてを検証することには価値があります。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:34
#, no-wrap
msgid "Coding Conventions"
msgstr "Coding Conventions"

#. type: menuentry
#: tips.texi.orig:32
msgid "Conventions for clean and robust programs."
msgstr "明快で堅牢なプログラムにたいする慣習。"

#. type: section
#: tips.texi.orig:32 tips.texi.orig:246 tips.texi.orig:247
#, no-wrap
msgid "Key Binding Conventions"
msgstr "Key Binding Conventions"

#. type: menuentry
#: tips.texi.orig:32
msgid "Which keys should be bound by which programs."
msgstr "どのキーをどのプログラムにバインドすべきか。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:325
#, no-wrap
msgid "Programming Tips"
msgstr "Programming Tips"

#. type: menuentry
#: tips.texi.orig:32
msgid "Making Emacs code fit smoothly in Emacs."
msgstr "Emacsコードを円滑にEmacsに適合させる。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:450
#, no-wrap
msgid "Compilation Tips"
msgstr "Compilation Tips"

#. type: menuentry
#: tips.texi.orig:32
msgid "Making compiled code run fast."
msgstr "コンパイル済みコードの実行を高速にする。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:505
#, no-wrap
msgid "Warning Tips"
msgstr "Warning Tips"

#. type: menuentry
#: tips.texi.orig:32
msgid "Turning off compiler warnings."
msgstr "コンパイラー警告をオフにする。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:551
#, no-wrap
msgid "Documentation Tips"
msgstr "Documentation Tips"

#. type: menuentry
#: tips.texi.orig:32
msgid "Writing readable documentation strings."
msgstr "読みやすいドキュメント文字列の記述。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:822
#, no-wrap
msgid "Comment Tips"
msgstr "Comment Tips"

#. type: menuentry
#: tips.texi.orig:32
msgid "Conventions for writing comments."
msgstr "コメント記述の慣習。"

#. type: node
#: tips.texi.orig:32 tips.texi.orig:906
#, no-wrap
msgid "Library Headers"
msgstr "Library Headers"

#. type: menuentry
#: tips.texi.orig:32
msgid "Standard headers for library packages."
msgstr "ライブラリーパッケージにたいする標準的なヘッダー。"

#. type: section
#: tips.texi.orig:35
#, no-wrap
msgid "Emacs Lisp Coding Conventions"
msgstr "Emacs Lisp Coding Conventions"

#. type: cindex
#: tips.texi.orig:37
#, no-wrap
msgid "coding conventions in Emacs Lisp"
msgstr "coding conventions in Emacs Lisp"

#. type: Plain text
#: tips.texi.orig:40
msgid "Here are conventions that you should follow when writing Emacs Lisp code intended for widespread use:"
msgstr "以下は、幅広いユーザーを意図したEmacs Lispコードを記述する際にしたがうべき慣習です:"

#. type: itemize
#: tips.texi.orig:46
msgid "Simply loading a package should not change Emacs's editing behavior.  Include a command or commands to enable and disable the feature, or to invoke it."
msgstr "単なるパッケージのロードが、Emacsの編集の挙動を変更すねきではない。コマンドと、その機能を有効または無効にするコマンド、またはそれの呼び出しが含まれる。"

#. type: itemize
#: tips.texi.orig:51
msgid "This convention is mandatory for any file that includes custom definitions.  If fixing such a file to follow this convention requires an incompatible change, go ahead and make the incompatible change; don't postpone it."
msgstr "この慣習は、カスタム定義を含むすべてのファイルに必須である。そのようなファイルを、この慣習にしたがうために修正するのが、非互換の変更を要求するなら、構うことはないから、非互換の修正を行うこと。先送りにしてはならない。"

#. type: itemize
#: tips.texi.orig:63
msgid "You should choose a short word to distinguish your program from other Lisp programs.  The names of all global symbols in your program, that is the names of variables, constants, and functions, should begin with that chosen prefix.  Separate the prefix from the rest of the name with a hyphen, @samp{-}.  This practice helps avoid name conflicts, since all global variables in Emacs Lisp share the same name space, and all functions share another name space@footnote{The benefits of a Common Lisp-style package system are considered not to outweigh the costs.}.  Use two hyphens to separate prefix and name if the symbol is not meant to be used by other packages."
msgstr "他のLispプログラムと区別するための、短い単語を選択すること。あなたのプログラム内のグローバルなシンボルすべて、すなわち変数、定数、関数の名前はその選択したプレフィクスで始まること。そのプレフィクスと名前の残りの部分は、ハイフン@samp{-}で区切る。Emacs Lisp内のすべてのグローバル変数は同じネームスペース、関数はすべて別のネームスペースを共有するので、これの実践は名前の競合を回避する@footnote{Common Lispスタイルのパッケージシステムの恩恵は、そのコストを上回るとは考えられない。}。他のパッケージから使用されることを意図しない場合には、プレフィクス名前を2つのハイフンで区切ること。"

#. type: itemize
#: tips.texi.orig:69
msgid "Occasionally, for a command name intended for users to use, it is more convenient if some words come before the package's name prefix.  And constructs that define functions, variables, etc., work better if they start with @samp{defun} or @samp{defvar}, so put the name prefix later on in the name."
msgstr "ユーザーの使用を意図したコマンド名では、何らかの単語がそのパッケージ名のプレフィクスの前にあると便利なことがある。関数や変数等を定義する構成は、それらが@samp{defun}や@samp{defvar}で始まればより良く機能するので、名前内でそれらの後に名前プレフィクスを置くこと。"

#. type: itemize
#: tips.texi.orig:76
msgid "This recommendation applies even to names for traditional Lisp primitives that are not primitives in Emacs Lisp---such as @code{copy-list}.  Believe it or not, there is more than one plausible way to define @code{copy-list}.  Play it safe; append your name prefix to produce a name like @code{foo-copy-list} or @code{mylib-copy-list} instead."
msgstr "この勧告は、@code{copy-list}のようなEmacs Lisp内のプリミティブではなく、伝統的なLispプリミティブにさえ適用される。信じようと信じまいと、@code{copy-list}を定義する尤もらしい方法は複数あるのだ。安全第一である。かわりに@code{foo-copy-list}や@code{mylib-copy-list}のような名前を生成するために、あなたの名前プレフィクスを追加しよう。"

#. type: itemize
#: tips.texi.orig:82
msgid "If you write a function that you think ought to be added to Emacs under a certain name, such as @code{twiddle-files}, don't call it by that name in your program.  Call it @code{mylib-twiddle-files} in your program, and send mail to @samp{bug-gnu-emacs@@gnu.org} suggesting we add it to Emacs.  If and when we do, we can change the name easily enough."
msgstr "@code{twiddle-files}のような特定の名前でEmacsに追加されるべきと考えている関数を記述する場合には、プログラム内でそれを名前で呼び出さないこと。プログラム内ではそれを@code{mylib-twiddle-files}で呼び出して、わたしたちがそれをEmacsに追加するため提案メールを、@samp{bug-gnu-emacs@@gnu.org}に送信すること。もし追加することになったそのとき、わたしたちは十分容易にその名前を変更できるだろう。"

#. type: itemize
#: tips.texi.orig:85
msgid "If one prefix is insufficient, your package can use two or three alternative common prefixes, so long as they make sense."
msgstr "1つのプレフィクスで十分でなければ、それらに意味があるかぎり、あなたんパッケージは2つまたは3つの一般的なプレフィクス候補を使用できる。"

#. type: itemize
#: tips.texi.orig:89
msgid "Put a call to @code{provide} at the end of each separate Lisp file.  @xref{Named Features}."
msgstr "個々のLispファイルすべての終端に、@code{provide}呼出を配置すること。@ref{Named Features}を参照されたい。"

#. type: itemize
#: tips.texi.orig:95
msgid "If a file requires certain other Lisp programs to be loaded beforehand, then the comments at the beginning of the file should say so.  Also, use @code{require} to make sure they are loaded.  @xref{Named Features}."
msgstr "事前に他の特定のLispプログラムのロードを要するファイルは、そのファイル先頭のコメントでそのように告げるべきである。また、それらが確実にロードされるよう、@code{require}を使用すること。@ref{Named Features}を参照されたい。"

#. type: itemize
#: tips.texi.orig:100
msgid "If a file @var{foo} uses a macro defined in another file @var{bar}, but does not use any functions or variables defined in @var{bar}, then @var{foo} should contain the following expression:"
msgstr "ファイル@var{foo}が、別のファイル@var{bar}内で定義されたマクロを使用するが、@var{bar}内の他の関数や変数を何も使用しない場合には、@var{foo}に以下の式を含めるべきである:"

#. type: example
#: tips.texi.orig:103
#, no-wrap
msgid "(eval-when-compile (require '@var{bar}))\n"
msgstr "(eval-when-compile (require '@var{bar}))\n"

#. type: itemize
#: tips.texi.orig:112
msgid "This tells Emacs to load @var{bar} just before byte-compiling @var{foo}, so that the macro definition is available during compilation.  Using @code{eval-when-compile} avoids loading @var{bar} when the compiled version of @var{foo} is @emph{used}.  It should be called before the first use of the macro in the file.  @xref{Compiling Macros}."
msgstr "これは、@var{foo}のバイトコンパイル直前に@var{bar}をロードするようEmacsに告げるので、そのマクロはコンパイル中は利用可能になる。@code{eval-when-compile}の使用により、コンパイル済みバージョンの@var{foo}が@emph{中古}なら、@var{bar}のロードを避けられる。これはファイル内の、最初のマクロ呼び出しの前に呼び出すこと。@ref{Compiling Macros}を参照されたい。"

#. type: itemize
#: tips.texi.orig:123
msgid "Avoid loading additional libraries at run time unless they are really needed.  If your file simply cannot work without some other library, then just @code{require} that library at the top-level and be done with it.  But if your file contains several independent features, and only one or two require the extra library, then consider putting @code{require} statements inside the relevant functions rather than at the top-level.  Or use @code{autoload} statements to load the extra library when needed.  This way people who don't use those aspects of your file do not need to load the extra library."
msgstr "実行時、それらが本当に必要でなければ、追加ライブラリーのロードを避けること。あなたのファイルが、単に他のいくつかのライブラリーなしでは機能しないなら、単にトップレベルでそのライブラリーを@code{require}して、それを使って行うこと。しかしあなたのファイルが、いくつかの独立した機能を含み、それらの1つか2つだけが余分なライブラリーを要するなら、トップレベルではなく関連する関数内部に、@code{require}を配置することを考慮すること。または必要時に余分のライブラリーをロードするために、@code{autoload}ステートメントを使用すること。この方法では、あなたのファイルの該当部分を使用しない人は、余分なライブラリーをロードする必要がなくなる。"

#. type: itemize
#: tips.texi.orig:131
msgid "If you need Common Lisp extensions, use the @code{cl-lib} library rather than the old @code{cl} library.  The latter does not use a clean namespace (i.e., its definitions do not start with a @samp{cl-} prefix).  If your package loads @code{cl} at run time, that could cause name clashes for users who don't use that package."
msgstr "Common Lisp拡張が必要なら、古い@code{cl}ライブラリーではなく、@code{cl-lib}ライブラリーを使うこと。@code{cl}ライブラリーは、クリーンなネームスペースを使用しない(定義が@samp{cl-}で始まらない)。パッケージが実行時に@code{cl}をロードする場合、そのパッケージを使用しないユーザーにたいして、名前の衝突を起こすかもしれない。"

#. type: itemize
#: tips.texi.orig:137
msgid "There is no problem with using the @code{cl} package at @emph{compile} time, with @code{(eval-when-compile (require 'cl))}.  That's sufficient for using the macros in the @code{cl} package, because the compiler expands them before generating the byte-code.  It is still better to use the more modern @code{cl-lib} in this case, though."
msgstr "@code{(eval-when-compile (require 'cl))}で、@emph{コンパイル時}に@code{cl}を使用するのは問題ない。コンパイラーはバイトコードを生成する前にマクロを展開するので、@code{cl}内のマクロを使用するには十分である。ただしこの場合でも、現代的な@code{cl-lib}を使用したほうが良い。"

#. type: itemize
#: tips.texi.orig:141
msgid "When defining a major mode, please follow the major mode conventions.  @xref{Major Mode Conventions}."
msgstr "メジャーモードを定義する際には、メジャーモードの慣習にしたがってほしい。@ref{Major Mode Conventions}を参照されたい。"

#. type: itemize
#: tips.texi.orig:145
msgid "When defining a minor mode, please follow the minor mode conventions.  @xref{Minor Mode Conventions}."
msgstr "マイナーモードを定義する際には、マイナーモードの慣習にしたがってほしい。@ref{Minor Mode Conventions}を参照されたい。"

#. type: itemize
#: tips.texi.orig:152
msgid "If the purpose of a function is to tell you whether a certain condition is true or false, give the function a name that ends in @samp{p} (which stands for ``predicate'').  If the name is one word, add just @samp{p}; if the name is multiple words, add @samp{-p}.  Examples are @code{framep} and @code{frame-live-p}."
msgstr "ある関数の目的が、特定の条件の真偽を告げることであるなら、(述語である``predicate''を意味する)@samp{p}で終わる名前を与えること。その名前が1単語なら単に@samp{p}を追加し、複数単語なら@samp{-p}を追加する。例は@code{framep}や@code{frame-live-p}。"

#. type: itemize
#: tips.texi.orig:158
msgid "If the purpose of a variable is to store a single function, give it a name that ends in @samp{-function}.  If the purpose of a variable is to store a list of functions (i.e., the variable is a hook), please follow the naming conventions for hooks.  @xref{Hooks}."
msgstr "ある変数の目的が、単一の関数の格納にあるなら、@samp{-function}で終わる名前を与えること。ある変数の目的が、関数のリストの格納にあるなら(たとえばその変数がフックなら)、フックの命名規約にしたがってほしい。@ref{Hooks}を参照されたい。"

#. type: cindex
#: tips.texi.orig:160
#, no-wrap
msgid "unloading packages, preparing for"
msgstr "unloading packages, preparing for"

#. type: itemize
#: tips.texi.orig:166
msgid "If loading the file adds functions to hooks, define a function @code{@var{feature}-unload-hook}, where @var{feature} is the name of the feature the package provides, and make it undo any such changes.  Using @code{unload-feature} to unload the file will run this function.  @xref{Unloading}."
msgstr "そのファイルをロードすることにより、フックに関数が追加されるなら、@code{@var{feature}-unload-hook}という関数を定義すること。ここで@var{feature}は、そのパッケージが提供する機能の名前で、そのような変更をアンドゥするためのフックにする。そのファイルのアンロードに@code{unload-feature}を使用することにより、この関数が実行されるようになる。@ref{Unloading}を参照のこと。"

#. type: itemize
#: tips.texi.orig:172
msgid "It is a bad idea to define aliases for the Emacs primitives.  Normally you should use the standard names instead.  The case where an alias may be useful is where it facilitates backwards compatibility or portability."
msgstr "Emacsのプリミティブにエイリアスを定義するのは、悪いアイデアである。通常は、かわりに標準の名前を使用すること。エイリアスが有用になるかもしれないケースは、後方互換性や可搬性を向上させる場合である。"

#. type: itemize
#: tips.texi.orig:179
msgid "If a package needs to define an alias or a new function for compatibility with some other version of Emacs, name it with the package prefix, not with the raw name with which it occurs in the other version.  Here is an example from Gnus, which provides many examples of such compatibility issues."
msgstr "パッケージで、別のバージョンのEmacsにたいする互換性のためにエイリアスや新たな関数の定義が必要なら、別のバージョンにあるそのままの名前ではなく、そのパッケージのプレフィクスを名前に付加すること。以下は、そのような互換性問題を多く提供するGnusでの例である。"

#. type: example
#: tips.texi.orig:185
#, no-wrap
msgid ""
"(defalias 'gnus-point-at-bol\n"
"  (if (fboundp 'point-at-bol)\n"
"      'point-at-bol\n"
"    'line-beginning-position))\n"
msgstr ""
"(defalias 'gnus-point-at-bol\n"
"  (if (fboundp 'point-at-bol)\n"
"      'point-at-bol\n"
"    'line-beginning-position))\n"

#. type: itemize
#: tips.texi.orig:191
msgid "Redefining or advising an Emacs primitive is a bad idea.  It may do the right thing for a particular program, but there is no telling what other programs might break as a result."
msgstr "Emacsのプリミティブの再定義やadviseは悪いアイデアである。これは特定のプログラムには正しいことを行うが、結果として他のプロラムが破壊されるかもしれない。"

#. type: itemize
#: tips.texi.orig:195
msgid "It is likewise a bad idea for one Lisp package to advise a function in another Lisp package (@pxref{Advising Functions})."
msgstr "同様に、あるLispパッケージで別のLispパッケージ内の関数にadviseするのも悪いアイデアである。"

#. type: itemize
#: tips.texi.orig:203
msgid "Avoid using @code{eval-after-load} in libraries and packages (@pxref{Hooks for Loading}).  This feature is meant for personal customizations; using it in a Lisp program is unclean, because it modifies the behavior of another Lisp file in a way that's not visible in that file.  This is an obstacle for debugging, much like advising a function in the other package."
msgstr "ライブラリやパッケージでの@code{eval-after-load}の使用を避けること(@ref{Hooks for Loading}を参照)。この機能は個人的なカスタマイズを意図している。Lispプログラム内でこれを使用すると、別のLisp内ではそれが見えず、その挙動を変更するため不明瞭になる。これは、別のパッケージ内の関数へのadviseに似て、デバッグの障害になる。"

#. type: itemize
#: tips.texi.orig:209
msgid "If a file does replace any of the standard functions or library programs of Emacs, prominent comments at the beginning of the file should say which functions are replaced, and how the behavior of the replacements differs from that of the originals."
msgstr "Emacsの標準的な関数やライブラリープログラムの何かをファイルが置換するなら、そのファイル冒頭の主要コメントで、どの関数が置換されるか、および置換によりオリジナルと挙動がどのように異なるかを告げること。"

#. type: itemize
#: tips.texi.orig:217
msgid "Constructs that define a function or variable should be macros, not functions, and their names should start with @samp{define-}.  The macro should receive the name to be defined as the first argument.  That will help various tools find the definition automatically.  Avoid constructing the names in the macro itself, since that would confuse these tools."
msgstr "関数や変数を定義するコンストラクターは、関数ではなくマクロであるべきで、その名前は@samp{define-}で始まること。そのマクロは、定義される名前を1つ目の引数で受け取ること。これは自動的に定義を探す、種々のツールを助けることになる。マクロ自身の中でその名前を構築するのは、それらのツールを混乱させるので避けること。"

#. type: itemize
#: tips.texi.orig:224
msgid "In some other systems there is a convention of choosing variable names that begin and end with @samp{*}.  We don't use that convention in Emacs Lisp, so please don't use it in your programs.  (Emacs uses such names only for special-purpose buffers.)  People will find Emacs more coherent if all libraries use the same conventions."
msgstr "別のいくつかのシステムでは、@samp{*}が先頭や終端にある変数名を選択する慣習がある。Emacs Lispではその慣習を使用しないので、あなたのプログラム内でそれを使用しないでほしい。(Emacsでは特別な目的をもつバッファーだけに、そのような名前を使用する)。すべてのライブラリーが同じ慣習を使用するなら、人はEmacsがより整合性があることを見い出すだろう。"

#. type: itemize
#: tips.texi.orig:232
msgid "The default file coding system for Emacs Lisp source files is UTF-8 (@pxref{Text Representations}).  In the rare event that your program contains characters which are @emph{not} in UTF-8, you should specify an appropriate coding system in the source file's @samp{-*-} line or local variables list.  @xref{File Variables, , Local Variables in Files, emacs, The GNU Emacs Manual}."
msgstr "Emacs LispソースファイルのデフォルトのファイルコーディングシステムはUTFである(@ref{Text Representations}を参照)。あなたのプログラムがUTF-8@emph{以外}の文字を含むような稀なケースでは、ソースファイル内の@samp{-*-}行かローカル変数リスト内で、適切なコーディングシステムを指定するべきである。@ref{File Variables, , Local Variables in Files, emacs, The GNU Emacs Manual}を参照されたい。"

#. type: itemize
#: tips.texi.orig:235
msgid "Indent the file using the default indentation parameters."
msgstr "デフォルトのインデントパラメーターで、ファイルをインデントすること。"

#. type: itemize
#: tips.texi.orig:239
msgid "Don't make a habit of putting close-parentheses on lines by themselves; Lisp programmers find this disconcerting."
msgstr "自分で行に閉カッコを配置するのを習慣としてはならない。Lispプログラマーは、これに当惑させられる。"

#. type: itemize
#: tips.texi.orig:243
msgid "Please put a copyright notice and copying permission notice on the file if you distribute copies.  @xref{Library Headers}."
msgstr "コピーを配布する場合は著作権表示と複製許可表示を配してほしい。@ref{Library Headers}を参照されたい。"

#. type: cindex
#: tips.texi.orig:248
#, no-wrap
msgid "key binding, conventions for"
msgstr "key binding, conventions for"

#. type: cindex
#: tips.texi.orig:252
#, no-wrap
msgid "mouse-2"
msgstr "mouse-2"

#. type: cindex
#: tips.texi.orig:253
#, no-wrap
msgid "references, following"
msgstr "references, following"

#. type: itemize
#: tips.texi.orig:261
msgid "Many special major modes, like Dired, Info, Compilation, and Occur, are designed to handle read-only text that contains @dfn{hyper-links}.  Such a major mode should redefine @kbd{mouse-2} and @key{RET} to follow the links.  It should also set up a @code{follow-link} condition, so that the link obeys @code{mouse-1-click-follows-link}.  @xref{Clickable Text}.  @xref{Buttons}, for an easy method of implementing such clickable links."
msgstr "Dired、Info、Compilation、Occurなどの多くのメジャーモードでは、@dfn{ハイパーリンク}を含むを読み取り専用テキストとして処理するようデザインされている。そのようなメジャーモードは、リンクをフォローするよう@kbd{mouse-2}と@key{RET}を再定義すること。そのリンクが@code{mouse-1-click-follows-link}にしたがうよう、@code{follow-link}条件もセットアップすること。@ref{Clickable Text}を参照されたい。そのようなクリック可能リンクを実装する簡便な手法については、@ref{Buttons}を参照されたい。"

#. type: cindex
#: tips.texi.orig:263
#, no-wrap
msgid "reserved keys"
msgstr "reserved keys"

#. type: cindex
#: tips.texi.orig:264
#, no-wrap
msgid "keys, reserved"
msgstr "keys, reserved"

#. type: itemize
#: tips.texi.orig:269
msgid "Don't define @kbd{C-c @var{letter}} as a key in Lisp programs.  Sequences consisting of @kbd{C-c} and a letter (either upper or lower case) are reserved for users; they are the @strong{only} sequences reserved for users, so do not block them."
msgstr "Lispプログラム内のキーとして、@kbd{C-c @var{letter}}を定義してはならない。@kbd{C-c}とアルファベット(大文字と小文字の両方)からなるシーケンスは、ユーザー用に予約済みである。これらはユーザー用に、@strong{唯一}予約されたシーケンスなので、それを阻害してはならない。"

#. type: itemize
#: tips.texi.orig:273
msgid "Changing all the Emacs major modes to respect this convention was a lot of work; abandoning this convention would make that work go to waste, and inconvenience users.  Please comply with it."
msgstr "すべてのメジャーモードがこの慣習を尊重するよう変更するには、多大な作業を要する。この慣習を捨て去れば、そのような作業は不要になり、ユーザーは不便になるだろう。この慣習を遵守してほしい。"

#. type: itemize
#: tips.texi.orig:277
msgid "Function keys @key{F5} through @key{F9} without modifier keys are also reserved for users to define."
msgstr "修飾キーなしの@key{F5}から@key{F9}までのファンクションキーも、ユーザー定義用に予約済みである。"

#. type: itemize
#: tips.texi.orig:281
msgid "Sequences consisting of @kbd{C-c} followed by a control character or a digit are reserved for major modes."
msgstr "後にコントロールキーか数字が続く@kbd{C-c}シーケンスは、メジャーモード用に予約済みである。"

#. type: itemize
#: tips.texi.orig:285
msgid "Sequences consisting of @kbd{C-c} followed by @kbd{@{}, @kbd{@}}, @kbd{<}, @kbd{>}, @kbd{:} or @kbd{;} are also reserved for major modes."
msgstr "後に@kbd{@{}、@kbd{@}}、@kbd{<}、@kbd{>}、 @kbd{:}、@kbd{;}が続く@kbd{C-c}シーケンスも、メジャーモード用に予約済みである。"

#. type: itemize
#: tips.texi.orig:291
msgid "Sequences consisting of @kbd{C-c} followed by any other punctuation character are allocated for minor modes.  Using them in a major mode is not absolutely prohibited, but if you do that, the major mode binding may be shadowed from time to time by minor modes."
msgstr "後に他の区切り文字が続く@kbd{C-c}シーケンスは、マイナーモードに割り当てられている。メジャーモード内でのそれらの使用は絶対禁止ではないが、もしそれを行えばそのメジャーモードがマイナーモードにより、時々シャドーされるかもしれない。"

#. type: itemize
#: tips.texi.orig:297
msgid "Don't bind @kbd{C-h} following any prefix character (including @kbd{C-c}).  If you don't bind @kbd{C-h}, it is automatically available as a help character for listing the subcommands of the prefix character."
msgstr "後にプレフィクス文字(@kbd{C-c}を含む)が続く@kbd{C-h}をバインドしてはならない。@kbd{C-h}をバインドしなければ、そのプレフィクス文字をもつサブコマンドをリストするためのヘルプ文字として、それが自動的に利用可能になる。"

#. type: itemize
#: tips.texi.orig:302
msgid "Don't bind a key sequence ending in @key{ESC} except following another @key{ESC}.  (That is, it is OK to bind a sequence ending in @kbd{@key{ESC} @key{ESC}}.)"
msgstr "別の@key{ESC}が後に続く場合を除き、@key{ESC}で終わるキーシーケンスをバインドしてはならない(つまり@kbd{@key{ESC} @key{ESC}}で終わるキーシーケンスのバインドはOK)。"

#. type: itemize
#: tips.texi.orig:306
msgid "The reason for this rule is that a non-prefix binding for @key{ESC} in any context prevents recognition of escape sequences as function keys in that context."
msgstr "このルールの理由は、任意のンテキストでの非プレフィクスであるような@key{ESC}のバインディングは、そのコンテキストにおいてファンクションキーとなるようなエスケープシーケンスの認識を阻害するからである。"

#. type: itemize
#: tips.texi.orig:310
msgid "Similarly, don't bind a key sequence ending in @key{C-g}, since that is commonly used to cancel a key sequence."
msgstr "同様に、@key{C-g}は一般的にはキーシーケンスのキャンセルに使用されるので、@key{C-g}で終わるキーシーケンスをバインドしてはならない。"

#. type: itemize
#: tips.texi.orig:315
msgid "Anything that acts like a temporary mode or state that the user can enter and leave should define @kbd{@key{ESC} @key{ESC}} or @kbd{@key{ESC} @key{ESC} @key{ESC}} as a way to escape."
msgstr "一時的なモードや、ユーザーが出入り可能な状態のような動作はすべて、エスケープ手段として@kbd{@key{ESC} @key{ESC}}か@kbd{@key{ESC} @key{ESC} @key{ESC}}を定義すること。"

#. type: itemize
#: tips.texi.orig:323
msgid "For a state that accepts ordinary Emacs commands, or more generally any kind of state in which @key{ESC} followed by a function key or arrow key is potentially meaningful, then you must not define @kbd{@key{ESC} @key{ESC}}, since that would preclude recognizing an escape sequence after @key{ESC}.  In these states, you should define @kbd{@key{ESC} @key{ESC} @key{ESC}} as the way to escape.  Otherwise, define @kbd{@key{ESC} @key{ESC}} instead."
msgstr "通常のEmacsコマンドを受け入れる状態、より一般的には後にファンクションキーか矢印キーが続く@key{ESC}内のような状態は潜在的な意味をもつので、@kbd{@key{ESC} @key{ESC}}を定義してはならない。なぜならそれは、@key{ESC}の後のエスケープシーケンスの認識を阻害するからである。これらの状態においては、エスケープ手段として@kbd{@key{ESC} @key{ESC} @key{ESC}}を定義すること。それ以外なら、かわりに@kbd{@key{ESC} @key{ESC}}を定義すること。"

#. type: section
#: tips.texi.orig:326
#, no-wrap
msgid "Emacs Programming Tips"
msgstr "Emacs Programming Tips"

#. type: cindex
#: tips.texi.orig:327
#, no-wrap
msgid "programming conventions"
msgstr "programming conventions"

#. type: Plain text
#: tips.texi.orig:331
msgid "Following these conventions will make your program fit better into Emacs when it runs."
msgstr "以下の慣習にしたがうことにより実行時、あなたのプログラムがよりEmacsに適合するようになります。"

#. type: itemize
#: tips.texi.orig:337
msgid "Don't use @code{next-line} or @code{previous-line} in programs; nearly always, @code{forward-line} is more convenient as well as more predictable and robust.  @xref{Text Lines}."
msgstr "プログラム内で@code{next-line}や@code{previous-line}を使用してはならない。ほとんど常に、@code{forward-line}のほうがより簡便で、より予測可能かつ堅牢である。@ref{Text Lines}を参照のこと。"

#. type: itemize
#: tips.texi.orig:343
msgid "Don't call functions that set the mark, unless setting the mark is one of the intended features of your program.  The mark is a user-level feature, so it is incorrect to change the mark except to supply a value for the user's benefit.  @xref{The Mark}."
msgstr "あなたのプログラム内で、マークのセットが意図した機能でないなら、マークをセットする関数を呼び出してはならない。マークはユーザーレベルの機能なので、ユーザーの益となる値を提供する場合を除き、マークの変更は間違っている。@ref{The Mark}を参照のこと。"

#. type: itemize
#: tips.texi.orig:345
msgid "In particular, don't use any of these functions:"
msgstr "得に、以下の関数は使用しないこと:"

#. type: itemize
#: tips.texi.orig:349
msgid "@code{beginning-of-buffer}, @code{end-of-buffer}"
msgstr "@code{beginning-of-buffer}、@code{end-of-buffer}"

#. type: itemize
#: tips.texi.orig:351
msgid "@code{replace-string}, @code{replace-regexp}"
msgstr "@code{replace-string}、@code{replace-regexp}"

#. type: itemize
#: tips.texi.orig:353
msgid "@code{insert-file}, @code{insert-buffer}"
msgstr "@code{insert-file}、@code{insert-buffer}"

#. type: itemize
#: tips.texi.orig:359
msgid "If you just want to move point, or replace a certain string, or insert a file or buffer's contents, without any of the other features intended for interactive users, you can replace these functions with one or two lines of simple Lisp code."
msgstr "インタラクティブなユーザーを意図した別の機能がないのにポイントの移動、特定の文字列の置換、またはファイルやバッファーのコンテンツを挿入したいだけなら、単純な1、2行のLispコードでそれらの関数を置き換えられる。"

#. type: itemize
#: tips.texi.orig:364
msgid "Use lists rather than vectors, except when there is a particular reason to use a vector.  Lisp has more facilities for manipulating lists than for vectors, and working with lists is usually more convenient."
msgstr "ベクターを使用する特別な理由がある場合を除き、ベクターではなくリストを使用すること。Lispでは、ベクターよりリストを操作する機能のほうが多く、リストを処理するほうが通常は簡便である。"

#. type: itemize
#: tips.texi.orig:368
msgid "Vectors are advantageous for tables that are substantial in size and are accessed in random order (not searched front to back), provided there is no need to insert or delete elements (only lists allow that)."
msgstr "要素の挿入や削除がなく(これはリストだけで可能)、ある程度のサイズがあって、(先頭か末尾から検索しない)ランダムアクセスがあるテーブルでは、ベクターが有利である。"

#. type: itemize
#: tips.texi.orig:372
msgid "The recommended way to show a message in the echo area is with the @code{message} function, not @code{princ}.  @xref{The Echo Area}."
msgstr "エコーエリア内にメッセージを表示する推奨方法は、@code{princ}ではなく@code{message}関数である。@ref{The Echo Area}を参照のこと。"

#. type: itemize
#: tips.texi.orig:377
msgid "When you encounter an error condition, call the function @code{error} (or @code{signal}).  The function @code{error} does not return.  @xref{Signaling Errors}."
msgstr "エラーコンディションに遭遇したときは、関数@code{error}(または@code{signal})を呼び出すこと。関数@code{error}はリターンしない。@ref{Signaling Errors}を参照のこと。"

#. type: itemize
#: tips.texi.orig:380
msgid "Don't use @code{message}, @code{throw}, @code{sleep-for}, or @code{beep} to report errors."
msgstr "エラーの報告に@code{message}、@code{throw}、@code{sleep-for}、@code{beep}を使用しないこと。"

#. type: itemize
#: tips.texi.orig:384
msgid "An error message should start with a capital letter but should not end with a period."
msgstr "エラーメッセージは大文字で始まり、ピリオドで終わらないこと。"

#. type: itemize
#: tips.texi.orig:389
msgid "A question asked in the minibuffer with @code{yes-or-no-p} or @code{y-or-n-p} should start with a capital letter and end with @samp{? }."
msgstr "ミニバッファー内で@code{yes-or-no-p}か@code{y-or-n-p}で答えを求める質問を行う場合には、大文字で始めて@samp{? }で終わること。"

#. type: itemize
#: tips.texi.orig:394
msgid "When you mention a default value in a minibuffer prompt, put it and the word @samp{default} inside parentheses.  It should look like this:"
msgstr "ミニバッファーのプロンプトでデフォルト値を示すときは、カッコ内に単語@samp{default}を配すること。これは以下のようになる:"

#. type: example
#: tips.texi.orig:397
#, no-wrap
msgid "Enter the answer (default 42):\n"
msgstr "Enter the answer (default 42):\n"

#. type: itemize
#: tips.texi.orig:406
msgid "In @code{interactive}, if you use a Lisp expression to produce a list of arguments, don't try to provide the ``correct'' default values for region or position arguments.  Instead, provide @code{nil} for those arguments if they were not specified, and have the function body compute the default value when the argument is @code{nil}.  For instance, write this:"
msgstr "@code{interactive}で引数リストを生成するLisp式を使用する場合には、リージョンまたはポジションの引数にたいして、``正しい''デフォルト値を生成しようと試みではならない。それらの引数が指定されていなければ、かわりに@code{nil}を提供して、引数が@code{nil}のときに関数のbodyでデフォルト値を計算すること。たとえば以下のように記述する:"

#. type: example
#: tips.texi.orig:413
#, no-wrap
msgid ""
"(defun foo (pos)\n"
"  (interactive\n"
"   (list (if @var{specified} @var{specified-pos})))\n"
"  (unless pos (setq pos @var{default-pos}))\n"
"  ...)\n"
msgstr ""
"(defun foo (pos)\n"
"  (interactive\n"
"   (list (if @var{specified} @var{specified-pos})))\n"
"  (unless pos (setq pos @var{default-pos}))\n"
"  ...)\n"

#. type: itemize
#: tips.texi.orig:417
msgid "rather than this:"
msgstr "以下のようにはしないよう:"

#. type: example
#: tips.texi.orig:424
#, no-wrap
msgid ""
"(defun foo (pos)\n"
"  (interactive\n"
"   (list (if @var{specified} @var{specified-pos}\n"
"             @var{default-pos})))\n"
"  ...)\n"
msgstr ""
"(defun foo (pos)\n"
"  (interactive\n"
"   (list (if @var{specified} @var{specified-pos}\n"
"             @var{default-pos})))\n"
"  ...)\n"

#. type: itemize
#: tips.texi.orig:429
msgid "This is so that repetition of the command will recompute these defaults based on the current circumstances."
msgstr "これは、そのコマンドを繰り返す場合に、そのときの状況にもとづいてデフォルト値が再計算されるからである。"

#. type: itemize
#: tips.texi.orig:434
msgid "You do not need to take such precautions when you use interactive specs @samp{d}, @samp{m} and @samp{r}, because they make special arrangements to recompute the argument values on repetition of the command."
msgstr "interactiveの@samp{d}、@samp{m}、@samp{r}指定を使用する際、これらはコマンドを繰り返すときの引数値の再計算にたいして特別な段取りを行うので、このような注意事項を採用する必要はない。"

#. type: itemize
#: tips.texi.orig:442
msgid "Many commands that take a long time to execute display a message that says something like @samp{Operating...} when they start, and change it to @samp{Operating...done} when they finish.  Please keep the style of these messages uniform: @emph{no} space around the ellipsis, and @emph{no} period after @samp{done}.  @xref{Progress}, for an easy way to generate such messages."
msgstr "実行に長時間を要する多くのコマンドは、開始時に@samp{Operating...}、完了時に@samp{Operating...done}のような、何らかのメッセージを表示すること。これらのメッセージのスタイルは、@samp{...}の周囲に@emph{スペース}を置かず、@samp{done}の後に@emph{ピリオド}を置かないよう、一定に保ってほしい。そのようなメッセージを生成する簡便な方法は、@ref{Progress}を参照のこと。"

#. type: itemize
#: tips.texi.orig:448
msgid "Try to avoid using recursive edits.  Instead, do what the Rmail @kbd{e} command does: use a new local keymap that contains a command defined to switch back to the old local keymap.  Or simply switch to another buffer and let the user switch back at will.  @xref{Recursive Editing}."
msgstr "再帰編集の使用を避けること。かわりにRmailの@kbd{e}コマンドが行うように、元のローカルキーマップに戻るよう定義したコマンドを含む、新たなローカルキーマップを使用する。または単に別のバッファーにスイッチして、ユーザーが自身で戻れるようにすること。@ref{Recursive Editing}を参照っされたい。"

#. type: section
#: tips.texi.orig:451
#, no-wrap
msgid "Tips for Making Compiled Code Fast"
msgstr "Tips for Making Compiled Code Fast"

#. type: cindex
#: tips.texi.orig:452
#, no-wrap
msgid "execution speed"
msgstr "execution speed"

#. type: cindex
#: tips.texi.orig:453
#, no-wrap
msgid "speedups"
msgstr "speedups"

#. type: Plain text
#: tips.texi.orig:457
msgid "Here are ways of improving the execution speed of byte-compiled Lisp programs."
msgstr "以下は、バイトコンパイル済みLispプログラムの実行速度を改善する方法です。"

#. type: itemize
#: tips.texi.orig:462
msgid "Profile your program, to find out where the time is being spent.  @xref{Profiling}."
msgstr "その時間がどこで消費されているか見つかるために、プログラムのプロファイルを行う。@ref{Profiling}を参照のこと。"

#. type: itemize
#: tips.texi.orig:467
msgid "Use iteration rather than recursion whenever possible.  Function calls are slow in Emacs Lisp even when a compiled function is calling another compiled function."
msgstr "可能なら常に再帰ではなく繰り返しを使用する。Emacs Lispでは、コンパイル済み関数が別のコンパイル済み関数を呼び出すときでさえ、関数呼び出しは低速である"

#. type: itemize
#: tips.texi.orig:473
msgid "Using the primitive list-searching functions @code{memq}, @code{member}, @code{assq}, or @code{assoc} is even faster than explicit iteration.  It can be worth rearranging a data structure so that one of these primitive search functions can be used."
msgstr "プリミティブのリスト検索関数@code{memq}、@code{member}、@code{assq}、@code{assoc}は明示的な繰り返しより更に高速である。これらの検索プリミティブを使用できるように、データ構造を再配置することにも価値が有り得る。"

#. type: itemize
#: tips.texi.orig:481
msgid "Certain built-in functions are handled specially in byte-compiled code, avoiding the need for an ordinary function call.  It is a good idea to use these functions rather than alternatives.  To see whether a function is handled specially by the compiler, examine its @code{byte-compile} property.  If the property is non-@code{nil}, then the function is handled specially."
msgstr "特定のビルトイン関数は、通常の関数呼び出しの必要を回避するよう、バイトコンパイル済みコードでは特別に扱われる。別の候補案のかわりにこれらの関数を使用するのは、良いアイデアである。コンパイラーにより特別に扱われる関数かどうかを確認するには、それの@code{byte-compile}プロパティを調べればよい。そのプロパティが非@code{nil}なら、その関数は特別に扱われる。"

#. type: itemize
#: tips.texi.orig:484
msgid "For example, the following input will show you that @code{aref} is compiled specially (@pxref{Array Functions}):"
msgstr "たとえば以下を入力すると、@code{aref}が特別にコンパイルされえることが示される(@ref{Array Functions}を参照):"

#. type: group
#: tips.texi.orig:489
#, no-wrap
msgid ""
"(get 'aref 'byte-compile)\n"
"     @result{} byte-compile-two-args\n"
msgstr ""
"(get 'aref 'byte-compile)\n"
"     @result{} byte-compile-two-args\n"

#. type: itemize
#: tips.texi.orig:495
msgid "Note that in this case (and many others), you must first load the @file{bytecomp} library, which defines the @code{byte-compile} property."
msgstr "この場合(および他の多くの場合)、最初に@code{byte-compile}プロパティを定義する、@file{bytecomp}ライブラリーをロードしなければならない。"

#. type: itemize
#: tips.texi.orig:503
msgid "If calling a small function accounts for a substantial part of your program's running time, make the function inline.  This eliminates the function call overhead.  Since making a function inline reduces the flexibility of changing the program, don't do it unless it gives a noticeable speedup in something slow enough that users care about the speed.  @xref{Inline Functions}."
msgstr "プログラム内で実行時間のある程度を占める小さい関数を呼び出すなら、その関数をinlineにする。これにより、関数呼び出しのオーバーヘッドがなくなる。関数のinline化はプログラム変更の自由度を減少させるので、ユーザーがスピードを気にするに足るほど低速であり、inline化により顕著に速度が改善されるのでなければ、これを行ってはならない。@ref{Inline Functions}を参照のこと。"

#. type: section
#: tips.texi.orig:506
#, no-wrap
msgid "Tips for Avoiding Compiler Warnings"
msgstr ""

#. type: cindex
#: tips.texi.orig:507
#, no-wrap
msgid "byte compiler warnings, how to avoid"
msgstr ""

#. type: itemize
#: tips.texi.orig:513
msgid "Try to avoid compiler warnings about undefined free variables, by adding dummy @code{defvar} definitions for these variables, like this:"
msgstr ""

#. type: example
#: tips.texi.orig:516
#, no-wrap
msgid "(defvar foo)\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:520
msgid "Such a definition has no effect except to tell the compiler not to warn about uses of the variable @code{foo} in this file."
msgstr ""

#. type: itemize
#: tips.texi.orig:525
msgid "Similarly, to avoid a compiler warning about an undefined function that you know @emph{will} be defined, use a @code{declare-function} statement (@pxref{Declaring Functions})."
msgstr ""

#. type: itemize
#: tips.texi.orig:530
msgid "If you use many functions and variables from a certain file, you can add a @code{require} for that package to avoid compilation warnings for them.  For instance,"
msgstr ""

#. type: example
#: tips.texi.orig:534
#, no-wrap
msgid ""
"(eval-when-compile\n"
"  (require 'foo))\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:544
msgid "If you bind a variable in one function, and use it or set it in another function, the compiler warns about the latter function unless the variable has a definition.  But adding a definition would be unclean if the variable has a short name, since Lisp packages should not define short variable names.  The right thing to do is to rename this variable to start with the name prefix used for the other functions and variables in your package."
msgstr ""

#. type: itemize
#: tips.texi.orig:549
msgid "The last resort for avoiding a warning, when you want to do something that is usually a mistake but you know is not a mistake in your usage, is to put it inside @code{with-no-warnings}.  @xref{Compiler Errors}."
msgstr ""

#. type: section
#: tips.texi.orig:552
#, no-wrap
msgid "Tips for Documentation Strings"
msgstr ""

#. type: cindex
#: tips.texi.orig:553
#, no-wrap
msgid "documentation strings, conventions and tips"
msgstr ""

#. type: findex
#: tips.texi.orig:555
#, no-wrap
msgid "checkdoc-minor-mode"
msgstr ""

#. type: Plain text
#: tips.texi.orig:559
msgid "Here are some tips and conventions for the writing of documentation strings.  You can check many of these conventions by running the command @kbd{M-x checkdoc-minor-mode}."
msgstr ""

#. type: itemize
#: tips.texi.orig:564
msgid "Every command, function, or variable intended for users to know about should have a documentation string."
msgstr ""

#. type: itemize
#: tips.texi.orig:569
msgid "An internal variable or subroutine of a Lisp program might as well have a documentation string.  Documentation strings take up very little space in a running Emacs."
msgstr ""

#. type: itemize
#: tips.texi.orig:575
msgid "Format the documentation string so that it fits in an Emacs window on an 80-column screen.  It is a good idea for most lines to be no wider than 60 characters.  The first line should not be wider than 67 characters or it will look bad in the output of @code{apropos}."
msgstr ""

#. type: vindex
#: tips.texi.orig:576
#, no-wrap
msgid "emacs-lisp-docstring-fill-column"
msgstr ""

#. type: itemize
#: tips.texi.orig:583
msgid "You can fill the text if that looks good.  Emacs Lisp mode fills documentation strings to the width specified by @code{emacs-lisp-docstring-fill-column}.  However, you can sometimes make a documentation string much more readable by adjusting its line breaks with care.  Use blank lines between sections if the documentation string is long."
msgstr ""

#. type: itemize
#: tips.texi.orig:590
msgid "The first line of the documentation string should consist of one or two complete sentences that stand on their own as a summary.  @kbd{M-x apropos} displays just the first line, and if that line's contents don't stand on their own, the result looks bad.  In particular, start the first line with a capital letter and end it with a period."
msgstr ""

#. type: itemize
#: tips.texi.orig:594
msgid "For a function, the first line should briefly answer the question, ``What does this function do?'' For a variable, the first line should briefly answer the question, ``What does this value mean?''"
msgstr ""

#. type: itemize
#: tips.texi.orig:598
msgid "Don't limit the documentation string to one line; use as many lines as you need to explain the details of how to use the function or variable.  Please use complete sentences for the rest of the text too."
msgstr ""

#. type: itemize
#: tips.texi.orig:604
msgid "When the user tries to use a disabled command, Emacs displays just the first paragraph of its documentation string---everything through the first blank line.  If you wish, you can choose which information to include before the first blank line so as to make this display useful."
msgstr ""

#. type: itemize
#: tips.texi.orig:612
msgid "The first line should mention all the important arguments of the function, and should mention them in the order that they are written in a function call.  If the function has many arguments, then it is not feasible to mention them all in the first line; in that case, the first line should mention the first few arguments, including the most important arguments."
msgstr ""

#. type: itemize
#: tips.texi.orig:619
msgid "When a function's documentation string mentions the value of an argument of the function, use the argument name in capital letters as if it were a name for that value.  Thus, the documentation string of the function @code{eval} refers to its first argument as @samp{FORM}, because the actual argument name is @code{form}:"
msgstr ""

#. type: example
#: tips.texi.orig:622
#, no-wrap
msgid "Evaluate FORM and return its value.\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:628
msgid "Also write metasyntactic variables in capital letters, such as when you show the decomposition of a list or vector into subunits, some of which may vary.  @samp{KEY} and @samp{VALUE} in the following example illustrate this practice:"
msgstr ""

#. type: example
#: tips.texi.orig:632
#, no-wrap
msgid ""
"The argument TABLE should be an alist whose elements\n"
"have the form (KEY . VALUE).  Here, KEY is ...\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:638
msgid "Never change the case of a Lisp symbol when you mention it in a doc string.  If the symbol's name is @code{foo}, write ``foo'', not ``Foo'' (which is a different symbol)."
msgstr ""

#. type: itemize
#: tips.texi.orig:643
msgid "This might appear to contradict the policy of writing function argument values, but there is no real contradiction; the argument @emph{value} is not the same thing as the @emph{symbol} that the function uses to hold the value."
msgstr ""

#. type: itemize
#: tips.texi.orig:647
msgid "If this puts a lower-case letter at the beginning of a sentence and that annoys you, rewrite the sentence so that the symbol is not at the start of it."
msgstr ""

#. type: itemize
#: tips.texi.orig:650
msgid "Do not start or end a documentation string with whitespace."
msgstr ""

#. type: itemize
#: tips.texi.orig:657
msgid "@strong{Do not} indent subsequent lines of a documentation string so that the text is lined up in the source code with the text of the first line.  This looks nice in the source code, but looks bizarre when users view the documentation.  Remember that the indentation before the starting double-quote is not part of the string!"
msgstr ""

#. type: anchor{#1}
#: tips.texi.orig:659
msgid "Docstring hyperlinks"
msgstr ""

#. type: iftex
#: tips.texi.orig:665
msgid "When a documentation string refers to a Lisp symbol, write it as it would be printed (which usually means in lower case), with single-quotes around it.  For example: @samp{`lambda'}.  There are two exceptions: write @code{t} and @code{nil} without single-quotes."
msgstr ""

#. type: ifnottex
#: tips.texi.orig:672
msgid "When a documentation string refers to a Lisp symbol, write it as it would be printed (which usually means in lower case), with single-quotes around it.  For example: @samp{lambda}.  There are two exceptions: write t and nil without single-quotes.  (In this manual, we use a different convention, with single-quotes for all symbols.)"
msgstr ""

#. type: cindex
#: tips.texi.orig:674
#, no-wrap
msgid "hyperlinks in documentation strings"
msgstr ""

#. type: itemize
#: tips.texi.orig:684
msgid "Help mode automatically creates a hyperlink when a documentation string uses a symbol name inside single quotes, if the symbol has either a function or a variable definition.  You do not need to do anything special to make use of this feature.  However, when a symbol has both a function definition and a variable definition, and you want to refer to just one of them, you can specify which one by writing one of the words @samp{variable}, @samp{option}, @samp{function}, or @samp{command}, immediately before the symbol name.  (Case makes no difference in recognizing these indicator words.)  For example, if you write"
msgstr ""

#. type: example
#: tips.texi.orig:687
#, no-wrap
msgid "This function sets the variable `buffer-file-name'.\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:692
msgid "then the hyperlink will refer only to the variable documentation of @code{buffer-file-name}, and not to its function documentation."
msgstr ""

#. type: itemize
#: tips.texi.orig:697
msgid "If a symbol has a function definition and/or a variable definition, but those are irrelevant to the use of the symbol that you are documenting, you can write the words @samp{symbol} or @samp{program} before the symbol name to prevent making any hyperlink.  For example,"
msgstr ""

#. type: example
#: tips.texi.orig:702
#, no-wrap
msgid ""
"If the argument KIND-OF-RESULT is the symbol `list',\n"
"this function returns a list of all the objects\n"
"that satisfy the criterion.\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:707
msgid "does not make a hyperlink to the documentation, irrelevant here, of the function @code{list}."
msgstr ""

#. type: itemize
#: tips.texi.orig:712
msgid "Normally, no hyperlink is made for a variable without variable documentation.  You can force a hyperlink for such variables by preceding them with one of the words @samp{variable} or @samp{option}."
msgstr ""

#. type: itemize
#: tips.texi.orig:717
msgid "Hyperlinks for faces are only made if the face name is preceded or followed by the word @samp{face}.  In that case, only the face documentation will be shown, even if the symbol is also defined as a variable or as a function."
msgstr ""

#. type: itemize
#: tips.texi.orig:722
msgid "To make a hyperlink to Info documentation, write the name of the Info node (or anchor) in single quotes, preceded by @samp{info node}, @samp{Info node}, @samp{info anchor} or @samp{Info anchor}.  The Info file name defaults to @samp{emacs}.  For example,"
msgstr ""

#. type: smallexample
#: tips.texi.orig:725
#, no-wrap
msgid "See Info node `Font Lock' and Info node `(elisp)Font Lock Basics'.\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:729
msgid "Finally, to create a hyperlink to URLs, write the URL in single quotes, preceded by @samp{URL}. For example,"
msgstr ""

#. type: smallexample
#: tips.texi.orig:733
#, no-wrap
msgid ""
"The home page for the GNU project has more information (see URL\n"
"`http://www.gnu.org/').\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:743
msgid "Don't write key sequences directly in documentation strings.  Instead, use the @samp{\\\\[@dots{}]} construct to stand for them.  For example, instead of writing @samp{C-f}, write the construct @samp{\\\\[forward-char]}.  When Emacs displays the documentation string, it substitutes whatever key is currently bound to @code{forward-char}.  (This is normally @samp{C-f}, but it may be some other character if the user has moved key bindings.)  @xref{Keys in Documentation}."
msgstr ""

#. type: itemize
#: tips.texi.orig:752
msgid "In documentation strings for a major mode, you will want to refer to the key bindings of that mode's local map, rather than global ones.  Therefore, use the construct @samp{\\\\<@dots{}>} once in the documentation string to specify which key map to use.  Do this before the first use of @samp{\\\\[@dots{}]}.  The text inside the @samp{\\\\<@dots{}>} should be the name of the variable containing the local keymap for the major mode."
msgstr ""

#. type: itemize
#: tips.texi.orig:757
msgid "It is not practical to use @samp{\\\\[@dots{}]} very many times, because display of the documentation string will become slow.  So use this to describe the most important commands in your major mode, and then use @samp{\\\\@{@dots{}@}} to display the rest of the mode's keymap."
msgstr ""

#. type: itemize
#: tips.texi.orig:765
msgid "For consistency, phrase the verb in the first sentence of a function's documentation string as an imperative---for instance, use ``Return the cons of A and B.@:'' in preference to ``Returns the cons of A and B@.'' Usually it looks good to do likewise for the rest of the first paragraph.  Subsequent paragraphs usually look better if each sentence is indicative and has a proper subject."
msgstr ""

#. type: itemize
#: tips.texi.orig:772
msgid "The documentation string for a function that is a yes-or-no predicate should start with words such as ``Return t if'', to indicate explicitly what constitutes ``truth''.  The word ``return'' avoids starting the sentence with lower-case ``t'', which could be somewhat distracting."
msgstr ""

#. type: itemize
#: tips.texi.orig:776
msgid "If a line in a documentation string begins with an open-parenthesis, write a backslash before the open-parenthesis, like this:"
msgstr ""

#. type: example
#: tips.texi.orig:780
#, no-wrap
msgid ""
"The argument FOO can be either a number\n"
"\\(a buffer position) or a string (a file name).\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:784
msgid "This prevents the open-parenthesis from being treated as the start of a defun (@pxref{Defuns,, Defuns, emacs, The GNU Emacs Manual})."
msgstr ""

#. type: itemize
#: tips.texi.orig:790
msgid "Write documentation strings in the active voice, not the passive, and in the present tense, not the future.  For instance, use ``Return a list containing A and B.@:'' instead of ``A list containing A and B will be returned.''"
msgstr ""

#. type: itemize
#: tips.texi.orig:795
msgid "Avoid using the word ``cause'' (or its equivalents) unnecessarily.  Instead of, ``Cause Emacs to display text in boldface'', write just ``Display text in boldface''."
msgstr ""

#. type: itemize
#: tips.texi.orig:801
msgid "Avoid using ``iff'' (a mathematics term meaning ``if and only if''), since many people are unfamiliar with it and mistake it for a typo.  In most cases, the meaning is clear with just ``if''.  Otherwise, try to find an alternate phrasing that conveys the meaning."
msgstr ""

#. type: itemize
#: tips.texi.orig:806
msgid "When a command is meaningful only in a certain mode or situation, do mention that in the documentation string.  For example, the documentation of @code{dired-find-file} is:"
msgstr ""

#. type: example
#: tips.texi.orig:809
#, no-wrap
msgid "In Dired, visit the file or directory named on this line.\n"
msgstr ""

#. type: itemize
#: tips.texi.orig:814
msgid "When you define a variable that represents an option users might want to set, use @code{defcustom}.  @xref{Defining Variables}."
msgstr ""

#. type: itemize
#: tips.texi.orig:820
msgid "The documentation string for a variable that is a yes-or-no flag should start with words such as ``Non-nil means'', to make it clear that all non-@code{nil} values are equivalent and indicate explicitly what @code{nil} and non-@code{nil} mean."
msgstr ""

#. type: section
#: tips.texi.orig:823
#, no-wrap
msgid "Tips on Writing Comments"
msgstr ""

#. type: cindex
#: tips.texi.orig:824
#, no-wrap
msgid "comments, Lisp convention for"
msgstr ""

#. type: Plain text
#: tips.texi.orig:827
msgid "We recommend these conventions for comments:"
msgstr ""

#. type: item
#: tips.texi.orig:829
#, no-wrap
msgid ";"
msgstr ""

#. type: table
#: tips.texi.orig:834
msgid "Comments that start with a single semicolon, @samp{;}, should all be aligned to the same column on the right of the source code.  Such comments usually explain how the code on that line does its job.  For example:"
msgstr ""

#. type: group
#: tips.texi.orig:841
#, no-wrap
msgid ""
"(setq base-version-list                 ; There was a base\n"
"      (assoc (substring fn 0 start-vn)  ; version to which\n"
"             file-version-assoc-list))  ; this looks like\n"
"                                        ; a subversion.\n"
msgstr ""

#. type: item
#: tips.texi.orig:844
#, no-wrap
msgid ";;"
msgstr ""

#. type: table
#: tips.texi.orig:849
msgid "Comments that start with two semicolons, @samp{;;}, should be aligned to the same level of indentation as the code.  Such comments usually describe the purpose of the following lines or the state of the program at that point.  For example:"
msgstr ""

#. type: group
#: tips.texi.orig:857
#, no-wrap
msgid ""
"(prog1 (setq auto-fill-function\n"
"             @dots{}\n"
"             @dots{}\n"
"  ;; Update mode line.\n"
"  (force-mode-line-update)))\n"
msgstr ""

#. type: table
#: tips.texi.orig:861
msgid "We also normally use two semicolons for comments outside functions."
msgstr ""

#. type: group
#: tips.texi.orig:866
#, no-wrap
msgid ""
";; This Lisp code is run in Emacs when it is to operate as\n"
";; a server for other processes.\n"
msgstr ""

#. type: table
#: tips.texi.orig:875
msgid "If a function has no documentation string, it should instead have a two-semicolon comment right before the function, explaining what the function does and how to call it properly.  Explain precisely what each argument means and how the function interprets its possible values.  It is much better to convert such comments to documentation strings, though."
msgstr ""

#. type: item
#: tips.texi.orig:876
#, no-wrap
msgid ";;;"
msgstr ""

#. type: table
#: tips.texi.orig:886
msgid "Comments that start with three semicolons, @samp{;;;}, should start at the left margin.  We use them for comments which should be considered a ``heading'' by Outline minor mode.  By default, comments starting with at least three semicolons (followed by a single space and a non-whitespace character) are considered headings, comments starting with two or fewer are not.  Historically, triple-semicolon comments have also been used for commenting out lines within a function, but this use is discouraged."
msgstr ""

#. type: table
#: tips.texi.orig:888
msgid "When commenting out entire functions, use two semicolons."
msgstr ""

#. type: item
#: tips.texi.orig:889
#, no-wrap
msgid ";;;;"
msgstr ""

#. type: table
#: tips.texi.orig:893
msgid "Comments that start with four semicolons, @samp{;;;;}, should be aligned to the left margin and are used for headings of major sections of a program.  For example:"
msgstr ""

#. type: smallexample
#: tips.texi.orig:896
#, no-wrap
msgid ";;;; The kill ring\n"
msgstr ""

#. type: Plain text
#: tips.texi.orig:905
msgid "Generally speaking, the @kbd{M-;} (@code{comment-dwim}) command automatically starts a comment of the appropriate type; or indents an existing comment to the right place, depending on the number of semicolons.  @xref{Comments,, Manipulating Comments, emacs, The GNU Emacs Manual}."
msgstr ""

#. type: section
#: tips.texi.orig:907
#, no-wrap
msgid "Conventional Headers for Emacs Libraries"
msgstr ""

#. type: cindex
#: tips.texi.orig:908
#, no-wrap
msgid "header comments"
msgstr ""

#. type: cindex
#: tips.texi.orig:909
#, no-wrap
msgid "library header comments"
msgstr ""

#. type: Plain text
#: tips.texi.orig:916
msgid "Emacs has conventions for using special comments in Lisp libraries to divide them into sections and give information such as who wrote them.  Using a standard format for these items makes it easier for tools (and people) to extract the relevant information.  This section explains these conventions, starting with an example:"
msgstr ""

#. type: group
#: tips.texi.orig:920
#, no-wrap
msgid ""
";;; foo.el --- Support for the Foo programming language\n"
"\n"
msgstr ""

#. type: group
#: tips.texi.orig:922
#, no-wrap
msgid ";; Copyright (C) 2010-2015 Your Name\n"
msgstr ""

#. type: smallexample
#: tips.texi.orig:927
#, no-wrap
msgid ""
";; Author: Your Name <yourname@@example.com>\n"
";; Maintainer: Someone Else <someone@@example.com>\n"
";; Created: 14 Jul 2010\n"
msgstr ""

#. type: group
#: tips.texi.orig:930
#, no-wrap
msgid ""
";; Keywords: languages\n"
";; Homepage: http://example.com/foo\n"
"\n"
msgstr ""

#. type: group
#: tips.texi.orig:932
#, no-wrap
msgid ""
";; This file is not part of GNU Emacs.\n"
"\n"
msgstr ""

#. type: group
#: tips.texi.orig:936
#, no-wrap
msgid ""
";; This file is free software@dots{}\n"
"@dots{}\n"
";; along with this file.  If not, see <http://www.gnu.org/licenses/>.\n"
msgstr ""

#. type: Plain text
#: tips.texi.orig:940
msgid "The very first line should have this format:"
msgstr ""

#. type: example
#: tips.texi.orig:943
#, no-wrap
msgid ";;; @var{filename} --- @var{description}\n"
msgstr ""

#. type: Plain text
#: tips.texi.orig:950
msgid "The description should be contained in one line.  If the file needs a @samp{-*-} specification, put it after @var{description}.  If this would make the first line too long, use a Local Variables section at the end of the file."
msgstr ""

#. type: Plain text
#: tips.texi.orig:959
msgid "The copyright notice usually lists your name (if you wrote the file).  If you have an employer who claims copyright on your work, you might need to list them instead.  Do not say that the copyright holder is the Free Software Foundation (or that the file is part of GNU Emacs) unless your file has been accepted into the Emacs distribution.  For more information on the form of copyright and license notices, see @uref{http://www.gnu.org/licenses/gpl-howto.html, the guide on the GNU website}."
msgstr ""

#. type: Plain text
#: tips.texi.orig:963
msgid "After the copyright notice come several @dfn{header comment} lines, each beginning with @samp{;; @var{header-name}:}.  Here is a table of the conventional possibilities for @var{header-name}:"
msgstr ""

#. type: item
#: tips.texi.orig:965
#, no-wrap
msgid "Author"
msgstr ""

#. type: table
#: tips.texi.orig:971
msgid "This line states the name and email address of at least the principal author of the library.  If there are multiple authors, list them on continuation lines led by @code{;;} and a tab or at least two spaces.  We recommend including a contact email address, of the form @samp{<@dots{}>}.  For example:"
msgstr ""

#. type: group
#: tips.texi.orig:977
#, no-wrap
msgid ""
";; Author: Your Name <yourname@@example.com>\n"
";;      Someone Else <someone@@example.com>\n"
";;      Another Person <another@@example.com>\n"
msgstr ""

#. type: item
#: tips.texi.orig:980
#, no-wrap
msgid "Maintainer"
msgstr ""

#. type: table
#: tips.texi.orig:984
msgid "This header has the same format as the Author header.  It lists the person(s) who currently maintain(s) the file (respond to bug reports, etc.)."
msgstr ""

#. type: table
#: tips.texi.orig:990
msgid "If there is no maintainer line, the person(s) in the Author field is/are presumed to be the maintainers.  Some files in Emacs use @samp{FSF} for the maintainer.  This means that the original author is no longer responsible for the file, and that it is maintained as part of Emacs."
msgstr ""

#. type: item
#: tips.texi.orig:991
#, no-wrap
msgid "Created"
msgstr ""

#. type: table
#: tips.texi.orig:994
msgid "This optional line gives the original creation date of the file, and is for historical interest only."
msgstr ""

#. type: item
#: tips.texi.orig:995
#, no-wrap
msgid "Version"
msgstr ""

#. type: table
#: tips.texi.orig:1002
msgid "If you wish to record version numbers for the individual Lisp program, put them in this line.  Lisp files distributed with Emacs generally do not have a @samp{Version} header, since the version number of Emacs itself serves the same purpose.  If you are distributing a collection of multiple files, we recommend not writing the version in every file, but only the main one."
msgstr ""

#. type: item
#: tips.texi.orig:1003
#, no-wrap
msgid "Keywords"
msgstr ""

#. type: table
#: tips.texi.orig:1006
msgid "This line lists keywords for the @code{finder-by-keyword} help command.  Please use that command to see a list of the meaningful keywords."
msgstr ""

#. type: table
#: tips.texi.orig:1010
msgid "This field is how people will find your package when they're looking for things by topic.  To separate the keywords, you can use spaces, commas, or both."
msgstr ""

#. type: table
#: tips.texi.orig:1014
msgid "The name of this field is unfortunate, since people often assume it is the place to write arbitrary keywords that describe their package, rather than just the relevant Finder keywords."
msgstr ""

#. type: item
#: tips.texi.orig:1015
#, no-wrap
msgid "Homepage"
msgstr ""

#. type: table
#: tips.texi.orig:1017
msgid "This line states the homepage of the library."
msgstr ""

#. type: item
#: tips.texi.orig:1018
#, no-wrap
msgid "Package-Version"
msgstr ""

#. type: table
#: tips.texi.orig:1023
msgid "If @samp{Version} is not suitable for use by the package manager, then a package can define @samp{Package-Version}; it will be used instead.  This is handy if @samp{Version} is an RCS id or something else that cannot be parsed by @code{version-to-list}.  @xref{Packaging Basics}."
msgstr ""

#. type: item
#: tips.texi.orig:1024
#, no-wrap
msgid "Package-Requires"
msgstr ""

#. type: table
#: tips.texi.orig:1030
msgid "If this exists, it names packages on which the current package depends for proper operation.  @xref{Packaging Basics}.  This is used by the package manager both at download time (to ensure that a complete set of packages is downloaded) and at activation time (to ensure that a package is only activated if all its dependencies have been)."
msgstr ""

#. type: table
#: tips.texi.orig:1034
msgid "Its format is a list of lists.  The @code{car} of each sub-list is the name of a package, as a symbol.  The @code{cadr} of each sub-list is the minimum acceptable version number, as a string.  For instance:"
msgstr ""

#. type: smallexample
#: tips.texi.orig:1037
#, no-wrap
msgid ";; Package-Requires: ((gnus \"1.0\") (bubbles \"2.7.2\"))\n"
msgstr ""

#. type: table
#: tips.texi.orig:1042
msgid "The package code automatically defines a package named @samp{emacs} with the version number of the currently running Emacs.  This can be used to require a minimal version of Emacs for a package."
msgstr ""

#. type: Plain text
#: tips.texi.orig:1048
msgid "Just about every Lisp library ought to have the @samp{Author} and @samp{Keywords} header comment lines.  Use the others if they are appropriate.  You can also put in header lines with other header names---they have no standard meanings, so they can't do any harm."
msgstr ""

#. type: Plain text
#: tips.texi.orig:1052
msgid "We use additional stylized comments to subdivide the contents of the library file.  These should be separated from anything else by blank lines.  Here is a table of them:"
msgstr ""

#. type: cindex
#: tips.texi.orig:1053
#, no-wrap
msgid "commentary, in a Lisp library"
msgstr ""

#. type: item
#: tips.texi.orig:1055
#, no-wrap
msgid ";;; Commentary:"
msgstr ""

#. type: table
#: tips.texi.orig:1061
msgid "This begins introductory comments that explain how the library works.  It should come right after the copying permissions, terminated by a @samp{Change Log}, @samp{History} or @samp{Code} comment line.  This text is used by the Finder package, so it should make sense in that context."
msgstr ""

#. type: item
#: tips.texi.orig:1062
#, no-wrap
msgid ";;; Change Log:"
msgstr ""

#. type: table
#: tips.texi.orig:1068
msgid "This begins an optional log of changes to the file over time.  Don't put too much information in this section---it is better to keep the detailed logs in a version control system (as Emacs does) or in a separate @file{ChangeLog} file.  @samp{History} is an alternative to @samp{Change Log}."
msgstr ""

#. type: item
#: tips.texi.orig:1069
#, no-wrap
msgid ";;; Code:"
msgstr ""

#. type: table
#: tips.texi.orig:1071
msgid "This begins the actual code of the program."
msgstr ""

#. type: item
#: tips.texi.orig:1072
#, no-wrap
msgid ";;; @var{filename} ends here"
msgstr ""

#. type: table
#: tips.texi.orig:1076
msgid "This is the @dfn{footer line}; it appears at the very end of the file.  Its purpose is to enable people to detect truncated versions of the file from the lack of a footer line."
msgstr ""
